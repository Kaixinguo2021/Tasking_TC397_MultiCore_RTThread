	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\4_McHal\\Tricore\\Evadc\\Std\\.IfxEvadc.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include\\libc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.src ..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c'

	
$TC162
	.sdecl	'.zrodata.IfxEvadc..2.cnt',data,rom
	.sect	'.zrodata.IfxEvadc..2.cnt'
	.align	2
.2.cnt:	.type	object
	.size	.2.cnt,4
	.word	20000000
	.sdecl	'.zrodata.IfxEvadc..3.cnt',data,rom
	.sect	'.zrodata.IfxEvadc..3.cnt'
	.align	2
.3.cnt:	.type	object
	.size	.3.cnt,4
	.word	500000
	.sdecl	'.zrodata.IfxEvadc..4.cnt',data,rom
	.sect	'.zrodata.IfxEvadc..4.cnt'
	.align	2
.4.cnt:	.type	object
	.size	.4.cnt,4
	.word	19500000
	
	.sdecl	'.text.IfxEvadc.IfxEvadc_addToQueue',code,cluster('IfxEvadc_addToQueue')
	.sect	'.text.IfxEvadc.IfxEvadc_addToQueue'
	.align	2
	
	.global	IfxEvadc_addToQueue

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	     1  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	     2   * \file IfxEvadc.c
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	     3   * \brief EVADC  basic functionality
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	     4   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	     5   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	     6   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	     7   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	     8   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	     9   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    10   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    11   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    12   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    13   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    14   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    15   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    16   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    17   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    18   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    19   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    20   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    21   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    22   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    23   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    24   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    25   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    26   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    27   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    28   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    29   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    30   * language processor.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    31   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    32   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    33   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    34   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    35   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    36   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    37   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    38   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    39   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    40   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    41  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    42  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    43  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    44  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    45  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    46  #include "IfxEvadc.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    47  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    48  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    49  /*-------------------------Function Implementations---------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    50  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    51  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    52  void IfxEvadc_addToQueue(Ifx_EVADC_G *group, IfxEvadc_ChannelId channel, IfxEvadc_RequestSource sourceType, uint32 options)
; Function IfxEvadc_addToQueue
.L140:
IfxEvadc_addToQueue:	.type	func

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    53  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    54      switch (sourceType)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    55      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    56      case IfxEvadc_RequestSource_queue0:
	jeq	d5,#0,.L2
.L604:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    57          group->Q[0].QINR.U = (channel | options);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    58          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    59      case IfxEvadc_RequestSource_queue1:
	jeq	d5,#1,.L3
.L605:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    60          group->Q[1].QINR.U = (channel | options);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    61          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    62      case IfxEvadc_RequestSource_queue2:
	jeq	d5,#2,.L4
.L606:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    63          group->Q[2].QINR.U = (channel | options);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    64  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    65          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    66      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    67  }
	ret
.L2:
	or	d4,d6
	st.w	[a4]272,d4
.L508:
	ret
.L3:
	or	d4,d6
	st.w	[a4]304,d4
.L509:
	ret
.L4:
	or	d4,d6
	st.w	[a4]336,d4
.L510:
	ret
.L352:
	
__IfxEvadc_addToQueue_function_end:
	.size	IfxEvadc_addToQueue,__IfxEvadc_addToQueue_function_end-IfxEvadc_addToQueue
.L208:
	; End of function
	
	.sdecl	'.text.IfxEvadc.IfxEvadc_configExternalMultiplexerMode',code,cluster('IfxEvadc_configExternalMultiplexerMode')
	.sect	'.text.IfxEvadc.IfxEvadc_configExternalMultiplexerMode'
	.align	2
	
	.global	IfxEvadc_configExternalMultiplexerMode

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    68  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    69  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    70  void IfxEvadc_configExternalMultiplexerMode(Ifx_EVADC *evadc, Ifx_EVADC_G *evadcG, IfxEvadc_ExternalMultiplexerMode mode, uint8 channels, IfxEvadc_EmuxSelectValue startChannel, IfxEvadc_EmuxCodingScheme code, IfxEvadc_EmuxSampleTimeControl sampleTimeControl, IfxEvadc_ChannelSelectionStyle channelSelectionStyle)
; Function IfxEvadc_configExternalMultiplexerMode
.L142:
IfxEvadc_configExternalMultiplexerMode:	.type	func

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    71  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    72      Ifx_EVADC_G_EMUXCTR emuxctr;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    73      Ifx_EVADC_G_EMUXCS  emuxcs;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    74  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    75      emuxctr.B.EMXWC    = 1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    76      emuxctr.B.EMUXMODE = mode;
	insert	d15,d9,d4,#4,#3
	ld.bu	d1,[a10]4
.L512:
	ld.bu	d0,[a10]
.L514:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    77      emuxctr.B.EMXCSS   = channelSelectionStyle;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    78      emuxctr.B.EMUXSET  = startChannel;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    79      emuxctr.B.EMXCOD   = code;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    80      emuxctr.B.EMXST    = sampleTimeControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    81      emuxcs.B.EMUXCH    = channels;
	insert	d8,d8,d5,#0,#16
	mov.aa	a15,a4
.L515:
	insert	d15,d15,d6,#0,#3
	mov.aa	a12,a5
.L516:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    82      IfxEvadc_enableAccess(evadc, IfxEvadc_Protection_externalMultiplexer);
	mov	d4,#81
.L513:
	insert	d9,d9,d15,#0,#8
.L884:
	extr.u	d15,d9,#8,#8
.L885:
	or	d15,#128
.L886:
	insert	d15,d15,d1,#6,#1
.L887:
	insert	d15,d15,d7,#4,#1
.L888:
	insert	d15,d15,d0,#5,#1
.L889:
	insert	d9,d9,d15,#8,#8
	call	IfxEvadc_enableAccess
.L511:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    83      evadcG->EMUXCTR.U  = emuxctr.U;
	st.w	[a12]496,d9
.L890:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    84      emuxctr.B.EMXWC    = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    85      evadcG->EMUXCTR.U  = emuxctr.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    86      evadcG->EMUXCS.U   = emuxcs.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    87      IfxEvadc_disableAccess(evadc, IfxEvadc_Protection_externalMultiplexer);
	insert	d9,d9,#0,#15,#1
	mov.aa	a4,a15
.L517:
	mov	d4,#81
	st.w	[a12]496,d9
.L891:
	st.w	[a12]500,d8
.L892:
	j	IfxEvadc_disableAccess
.L490:
	
__IfxEvadc_configExternalMultiplexerMode_function_end:
	.size	IfxEvadc_configExternalMultiplexerMode,__IfxEvadc_configExternalMultiplexerMode_function_end-IfxEvadc_configExternalMultiplexerMode
.L318:
	; End of function
	
	.sdecl	'.text.IfxEvadc.IfxEvadc_disableAccess',code,cluster('IfxEvadc_disableAccess')
	.sect	'.text.IfxEvadc.IfxEvadc_disableAccess'
	.align	2
	
	.global	IfxEvadc_disableAccess

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    88  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    89  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    90  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    91  void IfxEvadc_disableAccess(Ifx_EVADC *evadc, IfxEvadc_Protection protectionSet)
; Function IfxEvadc_disableAccess
.L144:
IfxEvadc_disableAccess:	.type	func
	mov.aa	a15,a4
.L519:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    92  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    93      uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
	mov	d9,d4
	call	IfxScuWdt_getSafetyWatchdogPassword
.L518:
	mov	d8,d2
.L522:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    94      IfxScuWdt_clearSafetyEndinit(passwd);
	mov	d4,d8
	call	IfxScuWdt_clearSafetyEndinit
.L521:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    95  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    96      if (protectionSet < IFXEVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
	mov	d15,#32
.L771:
	jge.u	d9,d15,.L8
.L772:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    97      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    98          evadc->ACCPROT0.U |= (0x00000001 << protectionSet);
	mov	d1,#1
	ld.w	d0,[a15]136
.L773:
	sha	d1,d1,d9
.L774:
	or	d0,d1
	st.w	[a15]136,d0
.L775:
	j	.L9
.L8:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	    99      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   100      else if (protectionSet < IFXEVADC_MAXIMUM_BITFIELDS_IN_ACCPROT1_REGISTER)
	mov	d15,#64
.L776:
	jge.u	d9,d15,.L10
.L777:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   101      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   102          evadc->ACCPROT1.U |= (0x00000001 << (protectionSet & 0x1F));
	fcall	.cocofun_7
.L520:
	or	d0,d1
	st.w	[a15]140,d0
.L523:
	j	.L11
.L10:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   103      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   104      else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   105      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   106          evadc->ACCPROT2.U |= (0x00000001 << (protectionSet & 0x3F));
	fcall	.cocofun_8
.L524:
	or	d0,d1
	st.w	[a15]144,d0
.L11:
.L9:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   107      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   108  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   109      IfxScuWdt_setSafetyEndinit(passwd);
	mov	d4,d8
.L525:
	j	IfxScuWdt_setSafetyEndinit
.L430:
	
__IfxEvadc_disableAccess_function_end:
	.size	IfxEvadc_disableAccess,__IfxEvadc_disableAccess_function_end-IfxEvadc_disableAccess
.L283:
	; End of function
	
	.sdecl	'.text.IfxEvadc..cocofun_8',code,cluster('.cocofun_8')
	.sect	'.text.IfxEvadc..cocofun_8'
	.align	2
; Function .cocofun_8
.L146:
.cocofun_8:	.type	func
; Function body .cocofun_8, coco_iter:0
	and	d15,d9,#63
	ld.w	d0,[a15]144
.L918:
	mov	d1,#1
.L919:
	sha	d1,d1,d15
	fret
.L338:
	; End of function
	.sdecl	'.text.IfxEvadc..cocofun_7',code,cluster('.cocofun_7')
	.sect	'.text.IfxEvadc..cocofun_7'
	.align	2
; Function .cocofun_7
.L148:
.cocofun_7:	.type	func
; Function body .cocofun_7, coco_iter:0
	and	d15,d9,#31
	ld.w	d0,[a15]140
.L912:
	mov	d1,#1
.L913:
	sha	d1,d1,d15
	fret
.L333:
	; End of function
	.sdecl	'.text.IfxEvadc.IfxEvadc_disableQueueSlotExternalTrigger',code,cluster('IfxEvadc_disableQueueSlotExternalTrigger')
	.sect	'.text.IfxEvadc.IfxEvadc_disableQueueSlotExternalTrigger'
	.align	2
	
	.global	IfxEvadc_disableQueueSlotExternalTrigger

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   110  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   111  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   112  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   113  void IfxEvadc_disableQueueSlotExternalTrigger(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType)
; Function IfxEvadc_disableQueueSlotExternalTrigger
.L150:
IfxEvadc_disableQueueSlotExternalTrigger:	.type	func

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   114  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   115      switch (sourceType)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   116      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   117      case IfxEvadc_RequestSource_queue0:
	jeq	d4,#0,.L12
.L611:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   118          evadcG->Q[0].QMR.B.ENTR = 0; /* disable external trigger */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   119          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   120      case IfxEvadc_RequestSource_queue1:
	jeq	d4,#1,.L13
.L612:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   121          evadcG->Q[1].QMR.B.ENTR = 0; /* disable external trigger */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   122          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   123      case IfxEvadc_RequestSource_queue2:
	jeq	d4,#2,.L14
.L613:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   124          evadcG->Q[2].QMR.B.ENTR = 0; /* disable external trigger */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   125          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   126      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   127  }
	ret
.L12:
	ld.bu	d15,[a4]260
.L614:
	insert	d15,d15,#0,#2,#1
	st.b	[a4]260,d15
.L615:
	ret
.L13:
	ld.bu	d15,[a4]292
.L616:
	insert	d15,d15,#0,#2,#1
	st.b	[a4]292,d15
.L617:
	ret
.L14:
	ld.bu	d15,[a4]324
.L618:
	insert	d15,d15,#0,#2,#1
	st.b	[a4]324,d15
.L619:
	ret
.L358:
	
__IfxEvadc_disableQueueSlotExternalTrigger_function_end:
	.size	IfxEvadc_disableQueueSlotExternalTrigger,__IfxEvadc_disableQueueSlotExternalTrigger_function_end-IfxEvadc_disableQueueSlotExternalTrigger
.L213:
	; End of function
	
	.sdecl	'.text.IfxEvadc.IfxEvadc_enableAccess',code,cluster('IfxEvadc_enableAccess')
	.sect	'.text.IfxEvadc.IfxEvadc_enableAccess'
	.align	2
	
	.global	IfxEvadc_enableAccess

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   128  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   129  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   130  void IfxEvadc_enableAccess(Ifx_EVADC *evadc, IfxEvadc_Protection protectionSet)
; Function IfxEvadc_enableAccess
.L152:
IfxEvadc_enableAccess:	.type	func
	mov.aa	a15,a4
.L528:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   131  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   132      uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
	mov	d9,d4
	call	IfxScuWdt_getSafetyWatchdogPassword
.L526:
	mov	d8,d2
.L529:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   133      IfxScuWdt_clearSafetyEndinit(passwd);
	mov	d4,d8
	call	IfxScuWdt_clearSafetyEndinit
.L527:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   134  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   135      if (protectionSet < IFXEVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
	mov	d15,#32
.L782:
	jge.u	d9,d15,.L18
.L783:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   136      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   137          evadc->ACCPROT0.U &= ~(0x00000001 << protectionSet);
	mov	d1,#1
	ld.w	d0,[a15]136
.L784:
	sha	d1,d1,d9
.L785:
	mov	d15,#-1
	xor	d1,d15
.L786:
	and	d0,d1
	st.w	[a15]136,d0
.L787:
	j	.L19
.L18:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   138      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   139      else if (protectionSet < IFXEVADC_MAXIMUM_BITFIELDS_IN_ACCPROT1_REGISTER)
	mov	d15,#64
.L788:
	jge.u	d9,d15,.L20
.L789:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   140      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   141          evadc->ACCPROT1.U &= ~(0x00000001 << (protectionSet & 0x1F));
	fcall	.cocofun_7
.L790:
	mov	d15,#-1
	xor	d1,d15
.L791:
	and	d0,d1
	st.w	[a15]140,d0
.L792:
	j	.L21
.L20:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   142      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   143      else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   144      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   145          evadc->ACCPROT2.U &= ~(0x00000001 << (protectionSet & 0x3F));
	fcall	.cocofun_8
.L793:
	mov	d15,#-1
	xor	d1,d15
.L794:
	and	d0,d1
	st.w	[a15]144,d0
.L21:
.L19:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   146      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   147  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   148      IfxScuWdt_setSafetyEndinit(passwd);
	mov	d4,d8
.L530:
	j	IfxScuWdt_setSafetyEndinit
.L437:
	
__IfxEvadc_enableAccess_function_end:
	.size	IfxEvadc_enableAccess,__IfxEvadc_enableAccess_function_end-IfxEvadc_enableAccess
.L288:
	; End of function
	
	.sdecl	'.text.IfxEvadc.IfxEvadc_enableQueueSlotExternalTrigger',code,cluster('IfxEvadc_enableQueueSlotExternalTrigger')
	.sect	'.text.IfxEvadc.IfxEvadc_enableQueueSlotExternalTrigger'
	.align	2
	
	.global	IfxEvadc_enableQueueSlotExternalTrigger

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   149  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   150  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   151  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   152  void IfxEvadc_enableQueueSlotExternalTrigger(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType)
; Function IfxEvadc_enableQueueSlotExternalTrigger
.L154:
IfxEvadc_enableQueueSlotExternalTrigger:	.type	func

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   153  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   154      switch (sourceType)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   155      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   156      case IfxEvadc_RequestSource_queue0:
	jeq	d4,#0,.L22
.L624:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   157          evadcG->Q[0].QMR.B.ENTR = 1; /* enable external trigger */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   158          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   159      case IfxEvadc_RequestSource_queue1:
	jeq	d4,#1,.L23
.L625:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   160          evadcG->Q[1].QMR.B.ENTR = 1; /* enable external trigger */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   161          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   162      case IfxEvadc_RequestSource_queue2:
	jeq	d4,#2,.L24
.L626:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   163          evadcG->Q[2].QMR.B.ENTR = 1; /* enable external trigger */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   164  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   165          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   166      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   167  }
	ret
.L22:
	ld.bu	d15,[a4]260
.L627:
	or	d15,#4
	st.b	[a4]260,d15
.L628:
	ret
.L23:
	ld.bu	d15,[a4]292
.L629:
	or	d15,#4
	st.b	[a4]292,d15
.L630:
	ret
.L24:
	ld.bu	d15,[a4]324
.L631:
	or	d15,#4
	st.b	[a4]324,d15
.L632:
	ret
.L361:
	
__IfxEvadc_enableQueueSlotExternalTrigger_function_end:
	.size	IfxEvadc_enableQueueSlotExternalTrigger,__IfxEvadc_enableQueueSlotExternalTrigger_function_end-IfxEvadc_enableQueueSlotExternalTrigger
.L218:
	; End of function
	
	.sdecl	'.text.IfxEvadc.IfxEvadc_getAdcDigitalFrequency',code,cluster('IfxEvadc_getAdcDigitalFrequency')
	.sect	'.text.IfxEvadc.IfxEvadc_getAdcDigitalFrequency'
	.align	2
	
	.global	IfxEvadc_getAdcDigitalFrequency

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   168  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   169  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   170  float32 IfxEvadc_getAdcDigitalFrequency(Ifx_EVADC *evadc)
; Function IfxEvadc_getAdcDigitalFrequency
.L156:
IfxEvadc_getAdcDigitalFrequency:	.type	func

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     2   * \file IfxScuCcu.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    42   * \defgroup IfxLld_Scu SCU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    43   * \addtogroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    44   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    45   * \defgroup IfxLld_ScuCcu How to use the Scu Clock driver?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    46   * \addtogroup IfxLld_ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    47   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    48   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    49   * The Scu Clock control unit driver provides a default configuration for pll and Clock initialisation and set of peripheral clock configuration functions.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    51   * In the following sections it will be described, how to integrate the driver into the application framework.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    52   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    53   * \section IfxLld_ScuCcu_Std_Preparation Preparation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    54   * \subsection IfxLld_ScuCcu_Std_Include Include Files
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    55   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    56   * Include following header file into your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    57   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    58   * #include <Scu/Std/IfxScuCcu.h>
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    59   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    60   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    61   * \subsection IfxLld_ScuCcu_Std_Variables Variables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    62   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    63   * Declare the Clock Configuration variables in your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    64   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    65   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    66   * // used globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    67   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    68   * // configuration for the PLL  steps
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    69   * static IfxScuCcu_PllStepsConfig IfxScuCcu_testPllConfigSteps[] = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    70   *     IFXSCU_CFG_PLL_STEPS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    71   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    72   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    73   * static const IfxScuCcu_FlashWaitstateConfig IfxScuCcu_defaultFlashWaitstateConfig = IFXSCU_CFG_FLASH_WAITSTATE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    74   * // Default configuration for the Clock Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    75   * IfxScuCcu_Config                      IfxScuCcu_testClockConfig = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    76   *     // IfxScuCcu_InitialStepConfig: Configuration of first step which is same as internal osc frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    77   *     IFXSCU_CFG_PLL_INITIAL_STEP,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    78   *     //IfxScuCcu_PllThrottleConfig: Configuration of PLL throttling.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    79   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    80   *         sizeof(IfxScuCcu_defaultPllConfigSteps) / sizeof(IfxScuCcu_PllStepConfig),
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    81   *         IfxScuCcu_defaultPllConfigSteps
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    82   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    83   *     IFXSCU_CFG_CLK_DISTRIBUTION,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    84   *     &IfxScuCcu_defaultFlashWaitstateConfig,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    85   *     &IfxScuCcu_defaultModConfig
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    86   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    87   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    88   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    89   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    90   * \subsection IfxLld_ScuCcu_Std_Init Module Initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    91   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    92   * The module initialisation can be done in the same function. Here an example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    93   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    94   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    95   *        // standard PLL & clock initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    96   *         IfxScuCcu_init(&IfxScuCcu_testClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    97   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    99   *    The SYS PLL, PER PLL1 , PLL2 and clocks are now initialised based on the XTAL and PLL values configured in Ifx_Cfg.h and are ready for use now!
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   100   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   101   * Alternately the PLL and clocks can be initialised using below method which provides greater control on the configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   102   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   103   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   104   * static const IfxScuCcu_PllStepConfig IfxScuCcu_defaultPllConfigSteps[] = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   105   *     {                   //Step 0 Config: 150MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   106   *         (4 - 1),        //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   107   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   108   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   109   *     {                   //Step 1 Config: 200MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   110   *         (3 - 1),       //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   111   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   112   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   113   *     {                   //Step 2 Config: 300MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   114   *         (2 - 1),        //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   115   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   116   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   117   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   118   *     IfxScuCcu_Config        IfxScuCcu_sampleClockConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   119   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   120   *     IfxScuCcu_initConfig(&IfxScuCcu_sampleClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   121   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   122   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   123   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   124   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.pllInputClockSelection = IfxScuCcu_PllInputClockSelection_fOsc0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   126   *     //SYS PLL = 300Mhz, XTAL = 20Mhz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   127   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.k2Divider = IfxScuCcu_K2divider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   128   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.nDivider = IfxScuCcu_Ndivider_60;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   129   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.pDivider = IfxScuCcu_Pdivider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   130   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.waitTime = 0.000200F;  // wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   131   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   132   *     IfxScuCcu_sampleClockConfig.sysPllThrottleConfig.numOfSteps = sizeof(IfxScuCcu_defaultPllConfigSteps) / sizeof(IfxScuCcu_PllStepConfig); //  step clock incr
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   133   *     IfxScuCcu_sampleClockConfig.sysPllThrottleConfig.pllSteps = IfxScuCcu_defaultPllConfigSteps;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   135   *     // PER PLL1 = 240Mhz, PERPLL2 = 50Mhz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   136   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k2Divider = IfxScuCcu_K2divider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   137   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k3Divider = IfxScuCcu_K3divider_6;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   138   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k3DividerBypass = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   139   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.nDivider = IfxScuCcu_Ndivider_24;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   140   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.pDivider = IfxScuCcu_Pdivider_1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   142   *     // update CCUCON Config use mask and value as below
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   143   *     IfxScuCcu_sampleClockConfig.clockDistribution.ccucon0.mask =IFXSCU_CFG_CCUCON0_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   144   *     IfxScuCcu_sampleClockConfig.clockDistribution.ccucon0.value = IFXSCU_CFG_CCUCON0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   146   *     // standard PLL & clock initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   147   *     IfxScuCcu_init(&IfxScuCcu_sampleClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   149   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   150   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   151   * ** Modulation Configuration **
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   152   * The SCU CCU module also provides an option to Frequency Modulate the clock.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   153   * The Modulation configuration can be done as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   154   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   155   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   156   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   157   * //define your modulation configuration structure:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   158   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   159   *  IFX_CONST IfxScuCcu_Mod_Config IfxScuCcu_SampleModConfig = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   160   *          IfxScuCcu_ModEn_disabled,          // disable is default //enable / disable modulation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   161   *          IfxScuCcu_ModulationAmplitude_0p5, // default 0 value  // specify the modulation amplitude %
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   162   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   163   *  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   164   *  // put this as part of the CCU configuration:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   165   *  IfxScuCcu_sampleClockConfig.modulationConfig = &IfxScuCcu_SampleModConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   166   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   167   *  // now initalize the CCU PLL and clock with the init function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   168   *  IfxScuCcu_init(&IfxScuCcu_sampleClockConfig)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   169   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   171   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   172   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   173   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   174   * \defgroup IfxLld_Scu_Std_Ccu Ccu Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   175   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   176   * \defgroup IfxLld_Scu_Std_Ccu_Ccu Clock Control Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   177   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   178   * \defgroup IfxLld_Scu_Std_Ccu_Ccu_Operative Clock Control Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   179   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   180   * \defgroup IfxLld_Scu_Std_Ccu_Ccu_Configuration Clock Control Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   181   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   182   * \defgroup IfxLld_Scu_Std_Ccu_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   183   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   185  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   186  #ifndef IFXSCUCCU_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   187  #define IFXSCUCCU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   188  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   189  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   190  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   191  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   193  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   194  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   195  #include "Cpu/Std/IfxCpu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   196  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   197  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   198  #include "_PinMap/IfxScu_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   199  #include "IfxSmu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   200  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   201  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   202  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   203  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   205  /** \brief Oscillator stability check timeout count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   207  #ifndef IFXSCUCCU_OSC_STABLECHK_TIME
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   208  #define IFXSCUCCU_OSC_STABLECHK_TIME               (640)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   209  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   210  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   211  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   213  #define IFXSCUCCU_SMUALARM_MASK                    (0x1DU)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   215  /** \brief ~40uS max wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   216   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   217  #ifndef IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   218  #define IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT     (0x1000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   219  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   221  /** \brief ~122uS max wait time for PLL locking
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   223  #define IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT           (0x3000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   224  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   225  /** \brief ~122uS max wait time for PLL power down/up state update
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   227  #define IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT (0x3000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   229  /** \brief ~244uS max wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   230   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   231  #define IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT           (0x6000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   233  /** \brief 3mS max wait time for PLL power down/up state update
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   235  #define IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT (0x493E0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   237  #define IFXSCUCCU_LOOP_TIMEOUT_CHECK(tVar, tErr) \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   238      {                                            \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   239          if (((sint32)--tVar) <= 0)               \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   240          {                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   241              tErr = (uint8)1;                     \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   242              break;                               \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   243          }                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   244          else                                     \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   245          {                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   246          }                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   247      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   248  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   249  /** \brief Modulation frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   250   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   251  #define IFXSCUCCU_MODULATION_FREQ_HZ               (3600000)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   253  /** \brief MODCFG shift value for SYSPLLCON2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   255  #define IFXSCUCCU_MODCFG_DEFAULT_SHIFT             (10)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   257  /** \brief MODCFG default value - for SYSPLLCON2[15:10]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   259  #define IFXSCUCCU_MODCFG_DEFAULT_VAL               ((uint32)0x3D)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   261  /** \brief get Rgain from MA and FDco
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   263  #define IFXSCUCCU_GET_RGAIN_NOM(MA, FDco)  ((2 * (MA / 100) * (FDco / IFXSCUCCU_MODULATION_FREQ_HZ)))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   265  /** \brief Get RGAin HEX from RGain Nominal value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   266   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   267  #define IFXSCUCCU_GET_RGAIN_HEX(RGain_Nom) ((uint16)((RGain_Nom * 32) + 0.5))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   269  /** \brief Get MODCFG from RGAIN_HEX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   271  #define IFXSCUCCU_GET_MODCFG(RGain_Hex)    ((uint16)(IFXSCUCCU_MODCFG_DEFAULT_VAL << IFXSCUCCU_MODCFG_DEFAULT_SHIFT) | (uint16)(RGain_Hex))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   273  /** \brief Define to include the flash wait state check in ScuCcu_init()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   275  #define IFXSCUCCU_FLASHWAITSTATECHECK (0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   277  /** \brief 10 microsecond wait time between steps to jump back to normal mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   278   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   279  #ifndef IFXSCUCCU_LPTONORMAL_WAITTIME
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   280  #define IFXSCUCCU_LPTONORMAL_WAITTIME (0.00001f)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   281  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   283  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   284  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   285  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   287  /** \brief Function pointer type for the hooks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   288   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   290  typedef void (*IfxScuCcu_PllStepsFunctionHook)(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   292  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   293  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   294  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   295  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   296  /** \addtogroup IfxLld_Scu_Std_Ccu_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   297   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   298  /** \brief clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   299   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   300  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   301  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   302      IfxScuCcu_Fsource_0 = 0,      /**< \brief fSource0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   303      IfxScuCcu_Fsource_1,          /**< \brief fSource1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   304      IfxScuCcu_Fsource_2           /**< \brief fSource2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   305  } IfxScuCcu_Fsource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   307  /** \brief MODULE_SCU.PLLCON1.B.K2DIV, specifies the K2-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   308   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   309  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   310  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   311      IfxScuCcu_K2divider_1 = 0,      /**< \brief K2-Divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   312      IfxScuCcu_K2divider_2,          /**< \brief K2-Divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   313      IfxScuCcu_K2divider_3,          /**< \brief K2-Divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   314      IfxScuCcu_K2divider_4,          /**< \brief K2-Divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   315      IfxScuCcu_K2divider_5,          /**< \brief K2-Divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   316      IfxScuCcu_K2divider_6,          /**< \brief K2-Divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   317      IfxScuCcu_K2divider_7,          /**< \brief K2-Divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   318      IfxScuCcu_K2divider_8           /**< \brief K2-Divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   319  } IfxScuCcu_K2divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   321  /** \brief MODULE_SCU.PLLCON1.B.K3DIV, specifies the K3-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   322   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   323  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   324  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   325      IfxScuCcu_K3divider_1 = 0,      /**< \brief K3-Divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   326      IfxScuCcu_K3divider_2,          /**< \brief K3-Divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   327      IfxScuCcu_K3divider_3,          /**< \brief K3-Divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   328      IfxScuCcu_K3divider_4,          /**< \brief K3-Divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   329      IfxScuCcu_K3divider_5,          /**< \brief K3-Divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   330      IfxScuCcu_K3divider_6,          /**< \brief K3-Divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   331      IfxScuCcu_K3divider_7,          /**< \brief K3-Divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   332      IfxScuCcu_K3divider_8           /**< \brief K3-Divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   333  } IfxScuCcu_K3divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   334  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   335  /** \brief Low Power Division Ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   336   * Corresponds to values of LPDIV in CCUCON0.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   337   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   338  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   339  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   340      IfxScuCcu_LowPowerDivRatio_divBy30 = 1,  /**< \brief Divide by 30 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   341      IfxScuCcu_LowPowerDivRatio_divBy60,      /**< \brief Divide by 60 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   342      IfxScuCcu_LowPowerDivRatio_divBy120,     /**< \brief Divide by 120 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   343      IfxScuCcu_LowPowerDivRatio_divBy240      /**< \brief Divide by 240 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   344  } IfxScuCcu_LowPowerDivRatio;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   346  /** \brief ENUM for MA (%) values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   347   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   348  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   349  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   350      IfxScuCcu_ModulationAmplitude_0p5 = 0,      /**< \brief 0.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   351      IfxScuCcu_ModulationAmplitude_1p0,          /**< \brief 1.0%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   352      IfxScuCcu_ModulationAmplitude_1p25,         /**< \brief 1.25%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   353      IfxScuCcu_ModulationAmplitude_1p5,          /**< \brief 1.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   354      IfxScuCcu_ModulationAmplitude_2p0,          /**< \brief 2%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   355      IfxScuCcu_ModulationAmplitude_2p5,          /**< \brief 2.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   356      IfxScuCcu_ModulationAmplitude_count,        /**< \brief range  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   357  } IfxScuCcu_ModulationAmplitude;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   358  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   359  /** \brief MODULE_SCU.PLLCON0.B.NDIV, specifies the N-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   361  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   362  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   363      IfxScuCcu_Ndivider_1 = 0,      /**< \brief  N-divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   364      IfxScuCcu_Ndivider_2,          /**< \brief  N-divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   365      IfxScuCcu_Ndivider_3,          /**< \brief  N-divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   366      IfxScuCcu_Ndivider_4,          /**< \brief  N-divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   367      IfxScuCcu_Ndivider_5,          /**< \brief  N-divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   368      IfxScuCcu_Ndivider_6,          /**< \brief  N-divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   369      IfxScuCcu_Ndivider_7,          /**< \brief  N-divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   370      IfxScuCcu_Ndivider_8,          /**< \brief  N-divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   371      IfxScuCcu_Ndivider_9,          /**< \brief  N-divider 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   372      IfxScuCcu_Ndivider_10,         /**< \brief  N-divider 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   373      IfxScuCcu_Ndivider_11,         /**< \brief  N-divider 11  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   374      IfxScuCcu_Ndivider_12,         /**< \brief  N-divider 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   375      IfxScuCcu_Ndivider_13,         /**< \brief  N-divider 13  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   376      IfxScuCcu_Ndivider_14,         /**< \brief  N-divider 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   377      IfxScuCcu_Ndivider_15,         /**< \brief  N-divider 15  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   378      IfxScuCcu_Ndivider_16,         /**< \brief  N-divider 16  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   379      IfxScuCcu_Ndivider_17,         /**< \brief  N-divider 17  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   380      IfxScuCcu_Ndivider_18,         /**< \brief  N-divider 18  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   381      IfxScuCcu_Ndivider_19,         /**< \brief  N-divider 19  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   382      IfxScuCcu_Ndivider_20,         /**< \brief  N-divider 20  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   383      IfxScuCcu_Ndivider_21,         /**< \brief  N-divider 21  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   384      IfxScuCcu_Ndivider_22,         /**< \brief  N-divider 22  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   385      IfxScuCcu_Ndivider_23,         /**< \brief  N-divider 23  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   386      IfxScuCcu_Ndivider_24,         /**< \brief  N-divider 24  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   387      IfxScuCcu_Ndivider_25,         /**< \brief  N-divider 25  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   388      IfxScuCcu_Ndivider_26,         /**< \brief  N-divider 26  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   389      IfxScuCcu_Ndivider_27,         /**< \brief  N-divider 27  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   390      IfxScuCcu_Ndivider_28,         /**< \brief  N-divider 28  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   391      IfxScuCcu_Ndivider_29,         /**< \brief  N-divider 29  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   392      IfxScuCcu_Ndivider_30,         /**< \brief  N-divider 30  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   393      IfxScuCcu_Ndivider_31,         /**< \brief  N-divider 31  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   394      IfxScuCcu_Ndivider_32,         /**< \brief  N-divider 32  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   395      IfxScuCcu_Ndivider_33,         /**< \brief  N-divider 33  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   396      IfxScuCcu_Ndivider_34,         /**< \brief  N-divider 34  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   397      IfxScuCcu_Ndivider_35,         /**< \brief  N-divider 35  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   398      IfxScuCcu_Ndivider_36,         /**< \brief  N-divider 36  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   399      IfxScuCcu_Ndivider_37,         /**< \brief  N-divider 37  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   400      IfxScuCcu_Ndivider_38,         /**< \brief  N-divider 38  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   401      IfxScuCcu_Ndivider_39,         /**< \brief  N-divider 39  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   402      IfxScuCcu_Ndivider_40,         /**< \brief  N-divider 40  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   403      IfxScuCcu_Ndivider_41,         /**< \brief  N-divider 41  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   404      IfxScuCcu_Ndivider_42,         /**< \brief  N-divider 42  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   405      IfxScuCcu_Ndivider_43,         /**< \brief  N-divider 43  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   406      IfxScuCcu_Ndivider_44,         /**< \brief  N-divider 44  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   407      IfxScuCcu_Ndivider_45,         /**< \brief  N-divider 45  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   408      IfxScuCcu_Ndivider_46,         /**< \brief  N-divider 46  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   409      IfxScuCcu_Ndivider_47,         /**< \brief  N-divider 47  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   410      IfxScuCcu_Ndivider_48,         /**< \brief  N-divider 48  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   411      IfxScuCcu_Ndivider_49,         /**< \brief  N-divider 49  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   412      IfxScuCcu_Ndivider_50,         /**< \brief  N-divider 50  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   413      IfxScuCcu_Ndivider_51,         /**< \brief  N-divider 51  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   414      IfxScuCcu_Ndivider_52,         /**< \brief  N-divider 52  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   415      IfxScuCcu_Ndivider_53,         /**< \brief  N-divider 53  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   416      IfxScuCcu_Ndivider_54,         /**< \brief  N-divider 54  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   417      IfxScuCcu_Ndivider_55,         /**< \brief  N-divider 55  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   418      IfxScuCcu_Ndivider_56,         /**< \brief  N-divider 56  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   419      IfxScuCcu_Ndivider_57,         /**< \brief  N-divider 57  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   420      IfxScuCcu_Ndivider_58,         /**< \brief  N-divider 58  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   421      IfxScuCcu_Ndivider_59,         /**< \brief  N-divider 59  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   422      IfxScuCcu_Ndivider_60,         /**< \brief  N-divider 60  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   423      IfxScuCcu_Ndivider_61,         /**< \brief  N-divider 61  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   424      IfxScuCcu_Ndivider_62,         /**< \brief  N-divider 62  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   425      IfxScuCcu_Ndivider_63,         /**< \brief  N-divider 63  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   426      IfxScuCcu_Ndivider_64,         /**< \brief  N-divider 64  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   427      IfxScuCcu_Ndivider_65,         /**< \brief  N-divider 65  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   428      IfxScuCcu_Ndivider_66,         /**< \brief  N-divider 66  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   429      IfxScuCcu_Ndivider_67,         /**< \brief  N-divider 67  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   430      IfxScuCcu_Ndivider_68,         /**< \brief  N-divider 68  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   431      IfxScuCcu_Ndivider_69,         /**< \brief  N-divider 69  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   432      IfxScuCcu_Ndivider_70,         /**< \brief  N-divider 70  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   433      IfxScuCcu_Ndivider_71,         /**< \brief  N-divider 71  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   434      IfxScuCcu_Ndivider_72,         /**< \brief  N-divider 72  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   435      IfxScuCcu_Ndivider_73,         /**< \brief  N-divider 73  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   436      IfxScuCcu_Ndivider_74,         /**< \brief  N-divider 74  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   437      IfxScuCcu_Ndivider_75,         /**< \brief  N-divider 75  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   438      IfxScuCcu_Ndivider_76,         /**< \brief  N-divider 76  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   439      IfxScuCcu_Ndivider_77,         /**< \brief  N-divider 77  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   440      IfxScuCcu_Ndivider_78,         /**< \brief  N-divider 78  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   441      IfxScuCcu_Ndivider_79,         /**< \brief  N-divider 79  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   442      IfxScuCcu_Ndivider_80,         /**< \brief  N-divider 80  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   443      IfxScuCcu_Ndivider_81,         /**< \brief  N-divider 81  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   444      IfxScuCcu_Ndivider_82,         /**< \brief  N-divider 82  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   445      IfxScuCcu_Ndivider_83,         /**< \brief  N-divider 83  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   446      IfxScuCcu_Ndivider_84,         /**< \brief  N-divider 84  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   447      IfxScuCcu_Ndivider_85,         /**< \brief  N-divider 85  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   448      IfxScuCcu_Ndivider_86,         /**< \brief  N-divider 86  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   449      IfxScuCcu_Ndivider_87,         /**< \brief  N-divider 87  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   450      IfxScuCcu_Ndivider_88,         /**< \brief  N-divider 88  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   451      IfxScuCcu_Ndivider_89,         /**< \brief  N-divider 89  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   452      IfxScuCcu_Ndivider_90,         /**< \brief  N-divider 90  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   453      IfxScuCcu_Ndivider_91,         /**< \brief  N-divider 91  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   454      IfxScuCcu_Ndivider_92,         /**< \brief  N-divider 92  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   455      IfxScuCcu_Ndivider_93,         /**< \brief  N-divider 93  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   456      IfxScuCcu_Ndivider_94,         /**< \brief  N-divider 94  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   457      IfxScuCcu_Ndivider_95,         /**< \brief  N-divider 95  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   458      IfxScuCcu_Ndivider_96,         /**< \brief  N-divider 96  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   459      IfxScuCcu_Ndivider_97,         /**< \brief  N-divider 97  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   460      IfxScuCcu_Ndivider_98,         /**< \brief  N-divider 98  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   461      IfxScuCcu_Ndivider_99,         /**< \brief  N-divider 99  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   462      IfxScuCcu_Ndivider_100,        /**< \brief  N-divider 100  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   463      IfxScuCcu_Ndivider_101,        /**< \brief  N-divider 101  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   464      IfxScuCcu_Ndivider_102,        /**< \brief  N-divider 102  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   465      IfxScuCcu_Ndivider_103,        /**< \brief  N-divider 103  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   466      IfxScuCcu_Ndivider_104,        /**< \brief  N-divider 104  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   467      IfxScuCcu_Ndivider_105,        /**< \brief  N-divider 105  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   468      IfxScuCcu_Ndivider_106,        /**< \brief  N-divider 106  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   469      IfxScuCcu_Ndivider_107,        /**< \brief  N-divider 107  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   470      IfxScuCcu_Ndivider_108,        /**< \brief  N-divider 108  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   471      IfxScuCcu_Ndivider_109,        /**< \brief  N-divider 109  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   472      IfxScuCcu_Ndivider_110,        /**< \brief  N-divider 110  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   473      IfxScuCcu_Ndivider_111,        /**< \brief  N-divider 111  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   474      IfxScuCcu_Ndivider_112,        /**< \brief  N-divider 112  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   475      IfxScuCcu_Ndivider_113,        /**< \brief  N-divider 113  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   476      IfxScuCcu_Ndivider_114,        /**< \brief  N-divider 114  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   477      IfxScuCcu_Ndivider_115,        /**< \brief  N-divider 115  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   478      IfxScuCcu_Ndivider_116,        /**< \brief  N-divider 116  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   479      IfxScuCcu_Ndivider_117,        /**< \brief  N-divider 117  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   480      IfxScuCcu_Ndivider_118,        /**< \brief  N-divider 118  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   481      IfxScuCcu_Ndivider_119,        /**< \brief  N-divider 119  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   482      IfxScuCcu_Ndivider_120,        /**< \brief  N-divider 120  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   483      IfxScuCcu_Ndivider_121,        /**< \brief  N-divider 121  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   484      IfxScuCcu_Ndivider_122,        /**< \brief  N-divider 122  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   485      IfxScuCcu_Ndivider_123,        /**< \brief  N-divider 123  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   486      IfxScuCcu_Ndivider_124,        /**< \brief  N-divider 124  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   487      IfxScuCcu_Ndivider_125,        /**< \brief  N-divider 125  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   488      IfxScuCcu_Ndivider_126,        /**< \brief  N-divider 126  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   489      IfxScuCcu_Ndivider_127,        /**< \brief  N-divider 127  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   490      IfxScuCcu_Ndivider_128         /**< \brief  N-divider 128  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   491  } IfxScuCcu_Ndivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   492  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   493  /** \brief MODULE_SCU.PLLCON0.B.PDIV, specifies the P-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   495  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   496  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   497      IfxScuCcu_Pdivider_1 = 0,      /**< \brief  P-divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   498      IfxScuCcu_Pdivider_2,          /**< \brief  P-divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   499      IfxScuCcu_Pdivider_3,          /**< \brief  P-divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   500      IfxScuCcu_Pdivider_4,          /**< \brief  P-divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   501      IfxScuCcu_Pdivider_5,          /**< \brief  P-divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   502      IfxScuCcu_Pdivider_6,          /**< \brief  P-divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   503      IfxScuCcu_Pdivider_7,          /**< \brief  P-divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   504      IfxScuCcu_Pdivider_8           /**< \brief  P-divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   505  } IfxScuCcu_Pdivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   506  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   507  /** \brief SysPll & Per Pll input clock selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   508   * SYSPLLCON0.B.INSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   509   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   510  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   511  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   512      IfxScuCcu_PllInputClockSelection_fOsc1   = 0, /**< \brief Backup clock select */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   513      IfxScuCcu_PllInputClockSelection_fOsc0   = 1, /**< \brief fOsc0 or XTAL clock select */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   514      IfxScuCcu_PllInputClockSelection_fSysclk = 2  /**< \brief fOsc1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   515  } IfxScuCcu_PllInputClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   516  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   517  /** \brief trap request type
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   518   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   519  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   520  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   521      IfxScuCcu_Traprequest_esr0 = 0,  /**< \brief external service request 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   522      IfxScuCcu_Traprequest_esr1,      /**< \brief external service request 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   523      IfxScuCcu_Traprequest_trap2,     /**< \brief trap2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   524      IfxScuCcu_Traprequest_smu        /**< \brief safety management unit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   525  } IfxScuCcu_Traprequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   526  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   527  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   528  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   529  /** \brief modulation enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   530   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   531  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   532  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   533      IfxScuCcu_ModEn_disabled = 0,  /**< \brief disable modulation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   534      IfxScuCcu_ModEn_enabled  = 1   /**< \brief enable modulation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   535  } IfxScuCcu_ModEn;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   537  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   538  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   539  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   541  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   542   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   543  /** \brief Configuration structure type for the Per Pll step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   544   * This structure must be used to configure the P, N and K2, K3 dividers .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   545   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   546  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   547  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   548      uint8 pDivider;              /**< \brief P divider value for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   549      uint8 nDivider;              /**< \brief N divider value for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   550      uint8 k2Divider;             /**< \brief K2 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   551      uint8 k3Divider;             /**< \brief K3 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   552      uint8 k3DividerBypass;       /**< \brief Divider Bypass
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   553                                    * 0 - The divide by block in front of the K3-Divider is not bypassed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   554                                    * 1-  The divide by block in front of the K3-Divider is bypassed. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   555  } IfxScuCcu_PerPllConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   556  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   557  /** \brief Configuration structure type for the Pll initial step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   558   * This structure must be used to configure the P, N and K2 dividers for initial step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   559   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   560  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   561  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   562      uint8 pDivider;        /**< \brief P divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   563      uint8 nDivider;        /**< \brief N divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   564      uint8 k2Divider;       /**< \brief K2 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   565  } IfxScuCcu_SysPllConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   567  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   568  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   569  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   570   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   571  /** \brief Configuration structure type for CCUCON registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   573  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   574  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   575      uint32 value;       /**< \brief CCUCON Register value to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   576      uint32 mask;        /**< \brief CCUCON Mask to select the bit fields to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   577  } IfxScuCcu_CcuconRegConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   578  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   579  /** \brief Configuration structure type for the Pll Steps for current jump control.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   581  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   582  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   583      uint8   k2Step;         /**< \brief K2 divider value for this step. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   584      float32 waitTime;       /**< \brief Wait time for for this step. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   585  } IfxScuCcu_PllStepConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   587  /** \brief Configuration structure type for the Pll Parameters.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   589  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   590  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   591      uint32                           xtalFrequency;                /**< \brief Xtal frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   592      IfxScuCcu_PllInputClockSelection pllInputClockSelection;       /**< \brief Pll input clock selection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   593      IfxScuCcu_SysPllConfig           sysPllConfig;                 /**< \brief System PLL Configurations */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   594      IfxScuCcu_PerPllConfig           perPllConfig;                 /**< \brief Peripheral PLL Configurations */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   595  } IfxScuCcu_pllsParameterConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   596  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   597  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   599  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   600   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   601  /** \brief Configuration structure type for the Flash waitstate configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   602   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   603  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   604  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   605      uint32 value;       /**< \brief FLASH.FCON Register value to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   606      uint32 mask;        /**< \brief FLASH.FCON Mask to select the bit fields to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   607  } IfxScuCcu_FlashWaitstateConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   609  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   610  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   611  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   612   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   613  /** \brief Configuration structure type for all the CCUCON registers to configure clock distribution.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   615  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   616  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   617      IfxScuCcu_CcuconRegConfig ccucon0;        /**< \brief CCUCON0 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   618      IfxScuCcu_CcuconRegConfig ccucon1;        /**< \brief CCUCON1 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   619      IfxScuCcu_CcuconRegConfig ccucon2;        /**< \brief CCUCON2 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   620      IfxScuCcu_CcuconRegConfig ccucon5;        /**< \brief CCUCON5 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   621      IfxScuCcu_CcuconRegConfig ccucon6;        /**< \brief CCUCON6 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   622      IfxScuCcu_CcuconRegConfig ccucon7;        /**< \brief CCUCON7 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   623      IfxScuCcu_CcuconRegConfig ccucon8;        /**< \brief CCUCON8 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   624      IfxScuCcu_CcuconRegConfig ccucon9;        /**< \brief CCUCON9 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   625      IfxScuCcu_CcuconRegConfig ccucon10;       /**< \brief CCUCON10 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   626      IfxScuCcu_CcuconRegConfig ccucon11;       /**< \brief CCUCON11 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   627  } IfxScuCcu_ClockDistributionConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   629  /** \brief Configuration structure type for the Pll Initial Step Configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   631  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   633      IfxScuCcu_pllsParameterConfig pllsParameters;       /**< \brief Configuration Parameters for both PLLs */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   634      float32                       waitTime;             /**< \brief Wait time for for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   635  } IfxScuCcu_InitialStepConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   637  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   638   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   639  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   640  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   641      uint8                              numOfSteps;       /**< \brief Number of PLL divider steps during clock throttling */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   642      IFX_CONST IfxScuCcu_PllStepConfig *pllSteps;         /**< \brief Pointer to the array of Pll divider step configuration. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   643  } IfxScuCcu_PllThrottleConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   644  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   645  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   647  /** \brief modulation config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   648   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   649  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   650  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   651      IfxScuCcu_ModEn               Mod_Enable;       /**< \brief modulation enable */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   652      IfxScuCcu_ModulationAmplitude Mod_Amp;          /**< \brief modulation amplitude */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   653  } IfxScuCcu_Mod_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   655  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   656   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   657  /** \brief Configuration structure SCU module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   658   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   659  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   660  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   661      IfxScuCcu_InitialStepConfig               pllInitialStepConfig;           /**< \brief Configuration of first step which is same as internal osc frequency. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   662      IfxScuCcu_PllThrottleConfig               sysPllThrottleConfig;           /**< \brief Configuration of PLL throttling. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   663      IfxScuCcu_ClockDistributionConfig         clockDistribution;              /**< \brief Configuration of of bus clocks and other module clock distribution. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   664      IFX_CONST IfxScuCcu_FlashWaitstateConfig *flashFconWaitStateConfig;       /**< \brief Configuration of flash waitstate */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   665      IFX_CONST IfxScuCcu_Mod_Config           *modulationConfig;               /**< \brief modulation configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   666  } IfxScuCcu_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   668  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   669  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   670  /** \brief structure holding the RGain parameters for modulation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   671   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   672  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   673  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   674      float32 RGainNom;       /**< \brief RGain Nominal value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   675      uint16  RGainHex;       /**< \brief RGain Hex value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   676  } IfxScuCcu_RGain_Values;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   678  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   679   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   680  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   681  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   682  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   683  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   684  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   685  /** \brief API to wait for requested duration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   686   * Note: IfxScuCcu_wait shall not use STM in future, because we can guarantee that STM is enabled after reset but  If PLL init is called for changing the frequency during runtime, there is no guarantee that STM is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   687   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   688   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   689  IFX_INLINE void IfxScuCcu_wait(float32 timeSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   690  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   691  /** \brief API to wait for requested duration along with watchdog service to avoid any reset case during startup of the chip.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   692   * Note: IfxScuCcu_wait shall not use STM in future, because we can guarantee that STM is enabled after reset but  If PLL init is called for changing the frequency during runtime, there is no guarantee that STM is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   693   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   694   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   695  IFX_INLINE void IfxScuCcu_waitWithWdtService(float32 timeSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   696  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   697  /** \brief API to configure the LPDIV value to enter into Low Power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   698   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   699   * Caution:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   700   * write to LPDIV with non-zero division ratio will cause system to enter low power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   701   * Low power mode will affect different SPBDIV and SRIDIV ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   703   * The original CCUCON0 ratios should be preserved by user prior to calling this function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   704   * The "normal" CCUCON0 ratios have to be passed to API: "IfxScuCcu_switchToNormalMode" to go back to the original division ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   705   * \param lpDiv Low Power Division Ratio
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   706   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   707   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   708  IFX_INLINE void IfxScuCcu_switchToLowPowerMode(IfxScuCcu_LowPowerDivRatio lpDiv);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   710  /** \brief API to switch back to normal mode from low power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   711   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   712   * Caution:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   713   * The original CCUCON0 setting has to be saved by user prior to entering Low Power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   714   * Pass the original CCUCON0 register as a whole word to this function to restore the normal settings.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   715   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   716   * Ramp back to normal mode is done in steps to avoid sudden jump in frequency and power usage.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   717   * \param ccucon0 CCUCON0 values at normal mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   718   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   720   * Switch to low power mode and back using iLLD functions as below
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   721   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   722   *     uint32 ccucon0 = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   723   *     IfxScuCcu_LowPowerDivRatio lpDiv = IfxScuCcu_LowPowerDivRatio_divBy30;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   724   *     IfxScuCcu_switchToLowPowerMode(lpDiv);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   725   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   726   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   727   * Switch back to normal mode  with the saved ccucon0 value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   728   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   729   *     IfxScuCcu_switchToNormalMode(ccucon0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   730   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   731   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   733  IFX_INLINE void IfxScuCcu_switchToNormalMode(const uint32 ccucon0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   735  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   736  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   737  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   738   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   739  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   740  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   741  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   742  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   743  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   744  /** \brief API to get ADAS divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   745   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   746   * \return ADAS frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   748  IFX_INLINE float32 IfxScuCcu_getAdasFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   750  /** \brief API to get Adc (EVADC, EDSADC)  frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   751   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   752   * \return Adc frequency (fADC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   753   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   754  IFX_INLINE float32 IfxScuCcu_getAdcFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   755  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   756  /** \brief API to get ASCLINF divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   757   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   758   * \return AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   759   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   760  IFX_INLINE float32 IfxScuCcu_getAsclinFFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   762  /** \brief API to get EBU frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   763   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   764   * \return EBU frequency (fEBU) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   765   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   766  IFX_INLINE float32 IfxScuCcu_getEbuFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   768  /** \brief API to get EVR Oscillator frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   769   * This API returns the constant which is specific to the ScuCcu of the controller.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   770   * \return EVR Oscillator frequency (fBACK or fEVR) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   771   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   772  IFX_INLINE float32 IfxScuCcu_getEvrFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   774  /** \brief API to get GETH divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   775   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   776   * \return GETH frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   777   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   778  IFX_INLINE float32 IfxScuCcu_getGethFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   780  /** \brief API to get GTMdivider frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   781   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   782   * return GTM frequency (fGTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   783   * \return Gtm Frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   784   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   785  IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   787  /** \brief API to get I2C frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   788   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   789   * \return I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   790   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   791  IFX_INLINE float32 IfxScuCcu_getI2cFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   792  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   793  /** \brief API to get MCANH divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   794   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   795   * \return MCANH frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   796   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   797  IFX_INLINE float32 IfxScuCcu_getMcanhFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   799  /** \brief API to get Oscillator 0 frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   800   * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   801   * \return Osc0 frequency (fOSC0) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   802   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   803  IFX_INLINE float32 IfxScuCcu_getOsc0Frequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   804  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   805  /** \brief API to get Oscillator 0 frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   806   * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   807   * \return Osc frequency (fOSC) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   808   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   809  IFX_INLINE float32 IfxScuCcu_getOscFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   811  /** \brief Returns the clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   812   * \return Clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   813   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   814  IFX_INLINE IfxScuCcu_PllInputClockSelection IfxScuCcu_getSourceSelection(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   816  /** \brief API to get STM divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   817   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   818   * \return STM frequency (fSTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   819   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   820  IFX_INLINE float32 IfxScuCcu_getStmFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   821  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   822  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   823  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   824  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   825  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   826  /** \brief API to get ASCLINS divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   827   * This API returns the ASCLINS frequency  based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   828   * \return AsclinS frequency (fASCLINS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   829   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   830  IFX_EXTERN float32 IfxScuCcu_getAsclinSFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   831  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   832  /** \brief API to get BBB divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   833   * This API returns the BBBDivider frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   834   * \return BBB frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   835   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   836  IFX_EXTERN float32 IfxScuCcu_getBbbFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   838  /** \brief This API returns the Cpu frequency based on the divider value in CCUCON register and fSource frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   839   * \param cpu CPU number for which effective fCPU is sought
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   840   * \return Cpu[x] frequency in Hz, where x is cpu number passed as parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   841   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   842  IFX_EXTERN float32 IfxScuCcu_getCpuFrequency(const IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   843  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   844  /** \brief API to get FSI2 divider frequency in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   845   * This API returns the fFSI2 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   846   * \return FSI2 frequency (fFSI2) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   847   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   848  IFX_EXTERN float32 IfxScuCcu_getFsi2Frequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   849  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   850  /** \brief API to get FSI divider frequency in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   851   * This API returns the fFSI based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   852   * \return FSI frequency (fFSI) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   853   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   854  IFX_EXTERN float32 IfxScuCcu_getFsiFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   855  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   856  /** \brief API to get MCAN divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   857   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   858   * \return Mcan frequency (fMCAN) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   859   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   860  IFX_EXTERN float32 IfxScuCcu_getMcanFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   861  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   862  /** \brief get source frequency fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   863   * This API returns the source frequency based on the configurations with CCUCON register configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   864   * \return Module frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   865   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   866  IFX_EXTERN float32 IfxScuCcu_getModuleFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   867  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   868  /** \brief API to get MSC divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   869   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   870   * \return Msc frequency (fMSC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   871   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   872  IFX_EXTERN float32 IfxScuCcu_getMscFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   873  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   874  /** \brief API to get actual PER PLL1  frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   875   * This API returns the PER PLL1 frequency based on the K2 divider value in PLLCON and the VCO frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   876   * Fpll1= (Fosc*N)/(P*K2)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   877   * \return PER PLL1 (K2 Divider) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   878   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   879  IFX_EXTERN float32 IfxScuCcu_getPerPllFrequency1(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   880  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   881  /** \brief API to get actual PER PLL2 (K3 Divider) frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   882   * This API returns the PER PLL2 frequency based on the K3 divider value in PLLCON and the VCO frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   883   * Fpll2= (Fosc*N)/(P*K3*1.6)  // DIVBY = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   884   * Fpll2= (Fosc*N)/(P*K3*2)  // DIVBY = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   885   * \return PER PLL2 (K3 Divider ) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   886   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   887  IFX_EXTERN float32 IfxScuCcu_getPerPllFrequency2(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   888  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   889  /** \brief API to get actual Sys PLL output frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   890   * This API returns the based on the divider values in CCUCON, PLLCON registers and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   891   * \return System Pll (fSysPLL) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   892   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   893  IFX_EXTERN float32 IfxScuCcu_getPllFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   894  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   895  /** \brief API to get Qspi divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   896   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   897   * \return Qspi frequency (fQspi) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   898   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   899  IFX_EXTERN float32 IfxScuCcu_getQspiFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   900  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   901  /** \brief get source frequency fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   902   * This API returns the source frequency based on the configurations with CCUCON register configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   903   * \param fsource fsource selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   904   * \return Effective fSOURCE in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   905   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   906  IFX_EXTERN float32 IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource fsource);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   907  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   908  /** \brief API to get SPB divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   909   * This API returns the based on fSOURCE and also on Low power divider mode and/or SPBDIV divider value in CCUCON registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   910   * \return SPB frequency (fSPB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   911   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   912  IFX_EXTERN float32 IfxScuCcu_getSpbFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   913  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   914  /** \brief API to get SRI divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   915   * This API returns the Sri frequency based on the divider values in CCUCON registers and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   916   * \return Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   917   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   918  IFX_EXTERN float32 IfxScuCcu_getSriFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   920  /** \brief API to set ADAS frequency (with ADAS divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   921   * This API configure adas divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   922   * \param adasFreq ADAS frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   923   * \return Actual Adas frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   924   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   925  IFX_EXTERN float32 IfxScuCcu_setAdasFrequency(float32 adasFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   926  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   927  /** \brief API to set ASCLINF frequency (with ASCLINF divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   928   * This API configure ASCLINF divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   929   * \param asclinFFreq AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   930   * \return Actual AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   931   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   932  IFX_EXTERN float32 IfxScuCcu_setAsclinFFrequency(float32 asclinFFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   933  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   934  /** \brief API to set ASCLINS frequency (with ASCLINS divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   935   * This API configure ASCLINS divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   936   * \param asclinSFreq Desired AscLinS frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   937   * \return Actual AsclinS frequency (fASCLINS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   938   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   939  IFX_EXTERN float32 IfxScuCcu_setAsclinSFrequency(float32 asclinSFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   940  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   941  /** \brief API to set BBB frequency (with Bbb divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   942   * This API configure Bbb divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   943   * \param bbbFreq Bbb frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   944   * \return Actual Bbb frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   945   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   946  IFX_EXTERN float32 IfxScuCcu_setBbbFrequency(float32 bbbFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   947  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   948  /** \brief API to set CPU frequency (with CPU divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   949   * This API configure CPU divider values in CCUCON registers. The actual frequency is always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   950   * \param cpu CPU number for which fCPU to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   951   * \param cpuFreq Desired CPU frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   952   * \return Actual CPU[x] frequency in Hz, where x is the cpu number passed as parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   953   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   954  IFX_EXTERN float32 IfxScuCcu_setCpuFrequency(IfxCpu_ResourceCpu cpu, float32 cpuFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   955  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   956  /** \brief API to set FSI2 frequency (with FSI2 divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   957   * This API configure Fsi2 divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   958   * \param fsi2Freq FSI2 frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   959   * \return Actual Fsi2 frequency (fFSI2) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   960   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   961  IFX_EXTERN float32 IfxScuCcu_setFsi2Frequency(float32 fsi2Freq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   962  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   963  /** \brief API to set FSI frequency (with FSI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   964   * This API configure Fsi divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   965   * \param fsiFreq FSI frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   966   * \return Actual Fsi frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   967   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   968  IFX_EXTERN float32 IfxScuCcu_setFsiFrequency(float32 fsiFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   969  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   970  /** \brief API to set GETH frequency (with GETH divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   971   * This API configure geth divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   972   * \param gethFreq GETH frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   973   * \return Actual Geth frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   974   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   975  IFX_EXTERN float32 IfxScuCcu_setGethFrequency(float32 gethFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   976  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   977  /** \brief API to set GTM frequency (with GTM divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   978   * This API configure GTM divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   979   * \param gtmFreq Desired GTM frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   980   * \return Actual GTM frequency in HZ
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   981   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   982  IFX_EXTERN float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   983  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   984  /** \brief API to set I2C frequency (with I2C divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   985   * This API configure adas divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   986   * \param i2cFreq I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   987   * \return Actual I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   988   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   989  IFX_EXTERN float32 IfxScuCcu_setI2cFrequency(float32 i2cFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   990  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   991  /** \brief API to set MCAN frequency (with MCAN divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   992   * This API configure MCAN divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   993   * \param mcanFreq Desired MSC frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   994   * \return Actual Mcan frequency (fMCAN) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   995   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   996  IFX_EXTERN float32 IfxScuCcu_setMcanFrequency(float32 mcanFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   997  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   998  /** \brief API to set MCANH frequency (with MCANH divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   999   * This API configure mcanh divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1000   * \param mcanhFreq MCANH frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1001   * \return Actual MCanh frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1002   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1003  IFX_EXTERN float32 IfxScuCcu_setMcanhFrequency(float32 mcanhFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1004  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1005  /** \brief API to set MSC frequency (with MSC divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1006   * This API configure MSC divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1007   * \param mscFreq Desired MSC frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1008   * \return Actual Msc frequency (fMSC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1009   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1010  IFX_EXTERN float32 IfxScuCcu_setMscFrequency(float32 mscFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1011  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1012  /** \brief API to set QSPI frequency (with QSPI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1013   * This API configure Qspi divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1014   * \param qspiFreq Desired QSPI frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1015   * \return Actual Qspi frequency (fQspi) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1016   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1017  IFX_EXTERN float32 IfxScuCcu_setQspiFrequency(float32 qspiFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1018  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1019  /** \brief API to set SPB frequency (with SPB divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1020   * This API configure SPB divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1021   * \param spbFreq Desired SPB frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1022   * \return Actual SPB frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1023   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1024  IFX_EXTERN float32 IfxScuCcu_setSpbFrequency(float32 spbFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1025  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1026  /** \brief API to set SRI frequency (with SRI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1027   * This API configure Sri divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1028   * \param sriFreq Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1029   * \return Actual Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1030   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1031  IFX_EXTERN float32 IfxScuCcu_setSriFrequency(float32 sriFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1032  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1033  /** \brief API to set STM frequency (with STM divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1034   * This API configure Stm divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1035   * \param stmFreq Stm frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1036   * \return Actual Stm frequency (fSTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1037   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1038  IFX_EXTERN float32 IfxScuCcu_setStmFrequency(float32 stmFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1039  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1040  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1041  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1042  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1043   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1044  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1045  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1046  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1047  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1048  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1049  /** \brief This inline function configures the Ccu SYS PLLs initial step and PER PLL.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1050   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1051  IFX_INLINE boolean IfxScuCcu_configureCcuInitialStep(const IfxScuCcu_InitialStepConfig *pllInitStepCfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1052  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1053  /** \brief Inlined API for clock distribution
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1054   * For each CCUCON register update the configured value with the mask.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1055   * \param clockDistributionConfig pointer to clock distribution structure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1056   * \return TRUE: Operation successful, FALSE: Operation Failure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1057   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1058  IFX_INLINE boolean IfxScuCcu_distributeClockInline(const IfxScuCcu_ClockDistributionConfig *clockDistributionConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1059  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1060  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1061  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1062  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1063  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1064  /** \brief API for clock distribution.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1065   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1066   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1067  IFX_EXTERN void IfxScuCcu_distributeClock(IfxScuCcu_ClockDistributionConfig *clockDistributionConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1068  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1069  /** \brief API to initialize the SCU Clock Control Unit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1070   * This API initialize the Sys PLL with ramp steps, BUS dividers and Per PLL for the configuration provided by the configuration structure.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1071   * FSyspll = (Fosc * Nsys)/(Psys * K2sys);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1072   * Fpll1= (Fosc * Nper)/(Pper * K2per);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1073   * Fpll2= (Fosc * Nper)/(Pper * K3per * 1.6); // if DIVBY = 0, else Fpll2= (Fosc * Nper)/(Pper * K3per * 2) // if DIVBY = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1074   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1075   * Note: Following SMU alarms are disabled before the PLL configuration and Enabled at the end of PLL lock in the function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1076   * PLL0,1,2 clock out of range frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1077   * PLL0,1 VCO loss of lock event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1078   * System PLL Oscillator Watchdog, input clock out of range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1079   * The application should store/restore these alarm configurations if required.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1080   * \param config Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1081   * \return Error status of the ScuCcu initialization process.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1082   * \retval TRUE: If an error occurred during initialization.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1083   * \retval FALSE: If initialization was successful.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1084   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1085  IFX_EXTERN boolean IfxScuCcu_init(const IfxScuCcu_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1086  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1087  /** \brief Initializes the clock configuration with default values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1088   * \param cfg Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1089   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1090   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1091  IFX_EXTERN void IfxScuCcu_initConfig(IfxScuCcu_Config *cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1092  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1093  /** \brief API to switch to Backup clock from the current PLL frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1094   * \param cfg Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1095   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1096   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1097  IFX_EXTERN void IfxScuCcu_switchToBackupClock(const IfxScuCcu_Config *cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1098  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1099  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1100  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1101  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1102  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1103  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1105  /** \brief Clear the trap status flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1106   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1107   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1108   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1109  IFX_INLINE void IfxScuCcu_clearTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1110  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1111  /** \brief Get trap disable flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1112   * \param cpuIndex Cpu index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1113   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1114   * \return Trap request can be generated or not.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1115   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1116  IFX_INLINE boolean IfxScuCcu_getTrapDisableFlag(IfxCpu_ResourceCpu cpuIndex, IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1117  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1118  /** \brief Get the trap status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1119   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1120   * \return Trap was requested or not.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1121   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1122  IFX_INLINE boolean IfxScuCcu_getTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1124  /** \brief Set the trap disable flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1125   * \param cpuIndex Cpu index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1126   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1127   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1129  IFX_INLINE void IfxScuCcu_setTrapDisableFlag(IfxCpu_ResourceCpu cpuIndex, IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1130  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1131  /** \brief Set the trap status flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1132   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1134   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1135  IFX_INLINE void IfxScuCcu_setTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1136  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1137  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1138   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1139  IFX_INLINE boolean IfxScuCcu_throttleSysPllClockInline(const IfxScuCcu_PllThrottleConfig *pllThrottleConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1140  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1141  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1142  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1143  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1145  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1146   * \param modamp modulation amplitude
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1147   * \param RGain_P RGain values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1148   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1149   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1150  IFX_EXTERN void IfxScuCcu_calRGainParameters(IfxScuCcu_ModulationAmplitude modamp, IfxScuCcu_RGain_Values *RGain_P);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1151  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1152  /** \brief initialize modulation parameters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1153   * \param Mod_Cfg modulation configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1156  IFX_EXTERN void IfxScuCcu_modulation_init(const IfxScuCcu_Mod_Config *Mod_Cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1157  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1158  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1159   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1160   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1161  IFX_EXTERN void IfxScuCcu_throttleSysPllClock(IfxScuCcu_PllThrottleConfig *pllThrottleConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1162  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1163  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1164  /*-------------------Global Exported Variables/Constants----------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1165  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1167  /** \brief maps to the IfxScuCcu_ModulationAmplitude enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1169  IFX_EXTERN IFX_CONST float32 IfxScuCcu_MA_percent[IfxScuCcu_ModulationAmplitude_count];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1170  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1171  /** \brief Configuration structure for SCU CCU driver.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1172   * The values of this structure are defined as # defined macros in the implementation of Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1173   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1174  IFX_EXTERN IFX_CONST IfxScuCcu_Config     IfxScuCcu_defaultClockConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1176  /** \brief default modulation config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1177   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1178  IFX_EXTERN IFX_CONST IfxScuCcu_Mod_Config IfxScuCcu_defaultModConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1179  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1180  IFX_EXTERN uint32                         IfxScuCcu_xtalFrequency;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1181  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1182  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1183  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1184  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1185  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1186  IFX_INLINE void IfxScuCcu_clearTrapStatusFlag(IfxScuCcu_Traprequest request)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1187  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1188      uint32 trapclear = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1189      SCU_TRAPCLR.U |= (trapclear << request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1190  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1193  IFX_INLINE boolean IfxScuCcu_configureCcuInitialStep(const IfxScuCcu_InitialStepConfig *pllInitStepCfg)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1194  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1195      uint8                                initError = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1196      uint16                               endinitSfty_pw;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1197  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1198      uint32                               timeoutCycleCount;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1199      const IfxScuCcu_pllsParameterConfig *pllsParamCfg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1200      pllsParamCfg   = &pllInitStepCfg->pllsParameters;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1201      /*get the watch-dog passwords for usage with this function*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1202      endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1203  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1204      /* Reset Safety ENDINIT, SCU_CCUCON registers are protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1205      IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1206  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1207      timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1208  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1209      while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1210      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1211          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1212      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1213  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1214      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1215          Ifx_SCU_CCUCON0 scuCcucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1216          scuCcucon0.U        = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1217          scuCcucon0.B.CLKSEL = 0; /*Select the EVR as fsource0/1/2 for the clock distribution */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1218          scuCcucon0.B.UP     = 1; /*Update the ccucon0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1219          SCU_CCUCON0.U       = scuCcucon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1220      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1221  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1222      timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1224      while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1225      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1226          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1227      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1229      /*Disable SMU Alarms */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1230      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1231          SMU_KEYS.U    = (uint32)0xBCU;        /* Enable access to SMU registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1232          SMU_AG8CF0.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1233          SMU_AG8CF1.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1234          SMU_AG8CF2.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1235          SMU_KEYS.U    = (uint32)0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1236      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1237  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1238      /* Power down the both the PLLs before configuring registers*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1239      /* Both the PLLs are powered down to be sure for asynchronous PLL registers update cause no glitches */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1240      SCU_SYSPLLCON0.B.PLLPWD = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1241      SCU_PERPLLCON0.B.PLLPWD = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1242  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1243      timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1244  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1245      while ((SCU_SYSPLLSTAT.B.PWDSTAT == 0) || (SCU_PERPLLSTAT.B.PWDSTAT == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1246      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1247          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1248      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1249  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1250      /* Now configure the oscillator, required oscillator mode is external crystal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1252      if ((pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fOsc0) || (pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fSysclk))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1253  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1254      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1255          Ifx_SCU_OSCCON scuOsccon;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1256          scuOsccon.U      = SCU_OSCCON.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1257  #if (IFX_CFG_SCU_EXT_CLOCK == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1258          scuOsccon.B.MODE = 2U;   /* external clock selected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1259  #else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1260          scuOsccon.B.MODE = 0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1261  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1262  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1263          scuOsccon.B.OSCVAL = (uint32)(pllsParamCfg->xtalFrequency / 1000000U) - 15; /*XTAL range 16MHz to 40MHz*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1264          /*Note: Oscillator Watchdog Reset (OSCRES) is not required when the PLLs are powered down*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1265          SCU_OSCCON.U       = scuOsccon.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1266      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1267  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1268      /* Configure the initial steps for the system PLL*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1269      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1270          Ifx_SCU_SYSPLLCON0 sysPllCon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1271          sysPllCon0.U       = SCU_SYSPLLCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1272          sysPllCon0.B.PDIV  = pllsParamCfg->sysPllConfig.pDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1273          sysPllCon0.B.NDIV  = pllsParamCfg->sysPllConfig.nDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1274          sysPllCon0.B.INSEL = pllsParamCfg->pllInputClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1275          SCU_SYSPLLCON0.U   = sysPllCon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1276      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1277  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1278      /* Configure the initial steps for the peripheral PLL*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1279      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1280          Ifx_SCU_PERPLLCON0 scuPerPllCon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1281          scuPerPllCon0.U       = SCU_PERPLLCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1282          scuPerPllCon0.B.DIVBY = pllsParamCfg->perPllConfig.k3DividerBypass;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1283          scuPerPllCon0.B.PDIV  = pllsParamCfg->perPllConfig.pDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1284          scuPerPllCon0.B.NDIV  = pllsParamCfg->perPllConfig.nDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1285          SCU_PERPLLCON0.U      = scuPerPllCon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1286      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1288      /* Power up the both the PLLs before configuring registers*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1289      SCU_SYSPLLCON0.B.PLLPWD = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1290      SCU_PERPLLCON0.B.PLLPWD = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1292      timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1294      while ((SCU_SYSPLLSTAT.B.PWDSTAT == 1) || (SCU_PERPLLSTAT.B.PWDSTAT == 1))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1295      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1296          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1297      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1298  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1299      timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1301      while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1302             (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1303             (SCU_PERPLLSTAT.B.K3RDY == 0U))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1304      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1305          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1306      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1307  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1308      SCU_SYSPLLCON1.B.K2DIV = pllsParamCfg->sysPllConfig.k2Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1309      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1310          Ifx_SCU_PERPLLCON1 scuPerPllCon1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1311          scuPerPllCon1.U       = SCU_PERPLLCON1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1312          scuPerPllCon1.B.K2DIV = pllsParamCfg->perPllConfig.k2Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1313          scuPerPllCon1.B.K3DIV = pllsParamCfg->perPllConfig.k3Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1314          SCU_PERPLLCON1.U      = scuPerPllCon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1315      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1316  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1317      timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1319      while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1320             (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1321             (SCU_PERPLLSTAT.B.K3RDY == 0U))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1322      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1323          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1324      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1325  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1326      /*Check if the OSC frequencies are in the limit*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1327      timeoutCycleCount = IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1329      while ((SCU_OSCCON.B.PLLLV == 0) && (SCU_OSCCON.B.PLLHV == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1330      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1331          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1332      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1333  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1334      /* Now start PLL locking for latest set values*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1335      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1336          SCU_SYSPLLCON0.B.RESLD = 1;             /* Restart Sys PLL lock detection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1337          SCU_PERPLLCON0.B.RESLD = 1;             /* Restart Per PLL lock detection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1338  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1339          timeoutCycleCount      = IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1340  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1341          while ((SCU_SYSPLLSTAT.B.LOCK == 0) || (SCU_PERPLLSTAT.B.LOCK == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1342          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1343              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1344          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1345      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1346      /*Enable SMU Alarms */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1347      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1348          SMU_KEYS.U = (uint32)0xBCU;           /* Enable access to SMU registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1349          SMU_CMD.U  = (uint32)0x00000005;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1350          SMU_AG8.U  = IFXSCUCCU_SMUALARM_MASK; /* Clear SMU Alarms*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1351          SMU_KEYS.U = (uint32)0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1352      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1353      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1354          Ifx_SCU_CCUCON0 scu_ccucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1355          scu_ccucon0.U        = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1356          scu_ccucon0.B.CLKSEL = 1; /*Select the PLLs for fsource0/1/2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1357          scu_ccucon0.B.UP     = 1; /*Update the ccucon0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1358  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1359          timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1360  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1361          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1362          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1363              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1364          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1365  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1366          SCU_CCUCON0.U     = scu_ccucon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1367  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1368          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1369  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1370          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1371          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1372              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1373          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1374      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1375  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1376      IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1377      return (boolean)initError;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1378  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1379  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1380  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1381  IFX_INLINE boolean IfxScuCcu_distributeClockInline(const IfxScuCcu_ClockDistributionConfig *clockDistributionConfig)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1382  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1383      uint16 endinitSfty_pw;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1384      uint32 timeoutCycleCount;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1385      uint32 initError = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1386  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1387      /*get the watch-dog passwords for usage with this function*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1388      endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1389  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1390      /* Reset Safety ENDINIT, SCU_CCUCON registers are protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1391      IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1393      /*Configure the clock distribution */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1394      {                                                    /*Write CCUCON0 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1395          Ifx_SCU_CCUCON0 ccucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1396          ccucon0.U         = SCU_CCUCON0.U & ~clockDistributionConfig->ccucon0.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1397          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1398          ccucon0.U        |= (clockDistributionConfig->ccucon0.mask & clockDistributionConfig->ccucon0.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1399          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1400  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1401          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1402          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1403              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1404          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1405  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1406          SCU_CCUCON0.U     = ccucon0.U;      /*Set update bit explicitly to make above configurations effective */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1407          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1408  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1409          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1410          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1411              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1412          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1413      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1414      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1415          /*Write CCUCON1 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1416          Ifx_SCU_CCUCON1 ccucon1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1417          ccucon1.U = SCU_CCUCON1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1419          if (ccucon1.B.CLKSELMCAN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1420              || ccucon1.B.CLKSELMSC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1421              || ccucon1.B.CLKSELQSPI)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1422          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1423              /* Non Zero ClockSel exists - set to Zero */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1424              /* CAUTION: this would briefly reset and set all clocks in CCUCON1! */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1425              ccucon1.U  = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1426              /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1427              ccucon1.U |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1428  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1429              /* set Clock selects to 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1430              ccucon1.B.CLKSELMCAN = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1431              ccucon1.B.CLKSELMSC  = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1432              ccucon1.B.CLKSELQSPI = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1434              timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1435  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1436              while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1437              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1438                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1439              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1441              SCU_CCUCON1.U     = ccucon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1442  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1443              timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1444  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1445              while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1446              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1447                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1448              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1449          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1450  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1451          ccucon1.U         = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1452          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1453          ccucon1.U        |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1454  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1455          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1456  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1457          while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1458          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1459              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1460          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1461  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1462          SCU_CCUCON1.U     = ccucon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1463  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1464          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1465  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1466          while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1467          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1468              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1469          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1470      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1472      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1473          /*Write CCUCON2 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1474          Ifx_SCU_CCUCON2 ccucon2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1475          ccucon2.U = SCU_CCUCON2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1477          if (ccucon2.B.CLKSELASCLINS)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1478          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1479              /* Non Zero ClockSel exists - set to Zero */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1480              /* CAUTION: this would briefly reset and set ASCLINS clock in CCUCON2! */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1481              ccucon2.U               = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1482              /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1483              ccucon2.U              |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1484  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1485              ccucon2.B.CLKSELASCLINS = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1486  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1487              timeoutCycleCount       = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1488  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1489              while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1490              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1491                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1492              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1494              SCU_CCUCON2.U     = ccucon2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1495  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1496              timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1497  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1498              while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1499              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1500                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1501              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1502          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1503  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1504          ccucon2.U         = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1505          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1506          ccucon2.U        |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1507  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1508          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1509  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1510          while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1511          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1512              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1513          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1514  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1515          SCU_CCUCON2.U     = ccucon2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1516  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1517          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1518  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1519          while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1520          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1521              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1522          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1523      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1524      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1525          /*Write CCUCON5 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1526          Ifx_SCU_CCUCON5 ccucon5;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1527          ccucon5.U         = SCU_CCUCON5.U & ~clockDistributionConfig->ccucon5.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1528          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1529          ccucon5.U        |= (clockDistributionConfig->ccucon5.mask & clockDistributionConfig->ccucon5.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1530          ccucon5.B.UP      = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1531          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1532  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1533          while (SCU_CCUCON5.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1534          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1535              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1536          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1538          SCU_CCUCON5.U     = ccucon5.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1539          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1541          while (SCU_CCUCON5.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1542          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1543              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1544          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1545      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1546      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1547          /*Write CCUCON6 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1548          Ifx_SCU_CCUCON6 ccucon6;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1549          ccucon6.U     = SCU_CCUCON6.U & ~clockDistributionConfig->ccucon6.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1550          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1551          ccucon6.U    |= (clockDistributionConfig->ccucon6.mask & clockDistributionConfig->ccucon6.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1552          SCU_CCUCON6.U = ccucon6.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1553      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1555      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1556          /*Write CCUCON7 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1557          Ifx_SCU_CCUCON7 ccucon7;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1558          ccucon7.U     = SCU_CCUCON7.U & ~clockDistributionConfig->ccucon7.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1559          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1560          ccucon7.U    |= (clockDistributionConfig->ccucon7.mask & clockDistributionConfig->ccucon7.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1561          SCU_CCUCON7.U = ccucon7.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1562      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1563  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1564      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1565          /*Write CCUCON8 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1566          Ifx_SCU_CCUCON8 ccucon8;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1567          ccucon8.U     = SCU_CCUCON8.U & ~clockDistributionConfig->ccucon8.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1568          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1569          ccucon8.U    |= (clockDistributionConfig->ccucon8.mask & clockDistributionConfig->ccucon8.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1570          SCU_CCUCON8.U = ccucon8.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1571      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1572      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1573          /*Write CCUCON9 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1574          Ifx_SCU_CCUCON9 ccucon9;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1575          ccucon9.U     = SCU_CCUCON9.U & ~clockDistributionConfig->ccucon9.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1576          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1577          ccucon9.U    |= (clockDistributionConfig->ccucon9.mask & clockDistributionConfig->ccucon9.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1578          SCU_CCUCON9.U = ccucon9.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1579      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1580      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1581          /*Write CCUCON10 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1582          Ifx_SCU_CCUCON10 ccucon10;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1583          ccucon10.U     = SCU_CCUCON10.U & ~clockDistributionConfig->ccucon10.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1584          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1585          ccucon10.U    |= (clockDistributionConfig->ccucon10.mask & clockDistributionConfig->ccucon10.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1586          SCU_CCUCON10.U = ccucon10.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1587      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1588      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1589          /*Write CCUCON11 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1590          Ifx_SCU_CCUCON11 ccucon11;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1591          ccucon11.U     = SCU_CCUCON11.U & ~clockDistributionConfig->ccucon11.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1592          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1593          ccucon11.U    |= (clockDistributionConfig->ccucon11.mask & clockDistributionConfig->ccucon11.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1594          SCU_CCUCON11.U = ccucon11.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1595      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1596      IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1597      return (boolean)initError;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1598  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1599  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1600  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1601  IFX_INLINE float32 IfxScuCcu_getAdasFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1602  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1603      uint32 adasDiv = SCU_CCUCON5.B.ADASDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1604  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1605      return (adasDiv == (uint32)0) ? 0 : IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / adasDiv;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1606  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1607  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1609  IFX_INLINE float32 IfxScuCcu_getAdcFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1610  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1611      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_1);
	mov	d4,#1
	j	IfxScuCcu_getSourceFrequency
.L420:
	
__IfxEvadc_getAdcDigitalFrequency_function_end:
	.size	IfxEvadc_getAdcDigitalFrequency,__IfxEvadc_getAdcDigitalFrequency_function_end-IfxEvadc_getAdcDigitalFrequency
.L273:
	; End of function
	
	.sdecl	'.text.IfxEvadc.IfxEvadc_getAdcModuleFrequency',code,cluster('IfxEvadc_getAdcModuleFrequency')
	.sect	'.text.IfxEvadc.IfxEvadc_getAdcModuleFrequency'
	.align	2
	
	.global	IfxEvadc_getAdcModuleFrequency

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   171  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   172      IFX_UNUSED_PARAMETER(evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   173  #ifdef IFX_CFG_AURIX_SCUCCU_USED
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   174      return IfxScuCcu_getSpbFrequency();
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   175  #else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   176      return IfxScuCcu_getAdcFrequency();
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   177  #endif
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   178  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   179  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   180  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   181  float32 IfxEvadc_getAdcModuleFrequency(Ifx_EVADC *evadc)
; Function IfxEvadc_getAdcModuleFrequency
.L158:
IfxEvadc_getAdcModuleFrequency:	.type	func

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     2   * \file IfxScuCcu.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    42   * \defgroup IfxLld_Scu SCU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    43   * \addtogroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    44   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    45   * \defgroup IfxLld_ScuCcu How to use the Scu Clock driver?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    46   * \addtogroup IfxLld_ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    47   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    48   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    49   * The Scu Clock control unit driver provides a default configuration for pll and Clock initialisation and set of peripheral clock configuration functions.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    51   * In the following sections it will be described, how to integrate the driver into the application framework.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    52   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    53   * \section IfxLld_ScuCcu_Std_Preparation Preparation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    54   * \subsection IfxLld_ScuCcu_Std_Include Include Files
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    55   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    56   * Include following header file into your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    57   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    58   * #include <Scu/Std/IfxScuCcu.h>
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    59   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    60   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    61   * \subsection IfxLld_ScuCcu_Std_Variables Variables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    62   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    63   * Declare the Clock Configuration variables in your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    64   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    65   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    66   * // used globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    67   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    68   * // configuration for the PLL  steps
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    69   * static IfxScuCcu_PllStepsConfig IfxScuCcu_testPllConfigSteps[] = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    70   *     IFXSCU_CFG_PLL_STEPS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    71   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    72   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    73   * static const IfxScuCcu_FlashWaitstateConfig IfxScuCcu_defaultFlashWaitstateConfig = IFXSCU_CFG_FLASH_WAITSTATE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    74   * // Default configuration for the Clock Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    75   * IfxScuCcu_Config                      IfxScuCcu_testClockConfig = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    76   *     // IfxScuCcu_InitialStepConfig: Configuration of first step which is same as internal osc frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    77   *     IFXSCU_CFG_PLL_INITIAL_STEP,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    78   *     //IfxScuCcu_PllThrottleConfig: Configuration of PLL throttling.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    79   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    80   *         sizeof(IfxScuCcu_defaultPllConfigSteps) / sizeof(IfxScuCcu_PllStepConfig),
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    81   *         IfxScuCcu_defaultPllConfigSteps
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    82   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    83   *     IFXSCU_CFG_CLK_DISTRIBUTION,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    84   *     &IfxScuCcu_defaultFlashWaitstateConfig,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    85   *     &IfxScuCcu_defaultModConfig
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    86   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    87   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    88   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    89   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    90   * \subsection IfxLld_ScuCcu_Std_Init Module Initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    91   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    92   * The module initialisation can be done in the same function. Here an example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    93   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    94   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    95   *        // standard PLL & clock initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    96   *         IfxScuCcu_init(&IfxScuCcu_testClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    97   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    99   *    The SYS PLL, PER PLL1 , PLL2 and clocks are now initialised based on the XTAL and PLL values configured in Ifx_Cfg.h and are ready for use now!
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   100   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   101   * Alternately the PLL and clocks can be initialised using below method which provides greater control on the configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   102   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   103   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   104   * static const IfxScuCcu_PllStepConfig IfxScuCcu_defaultPllConfigSteps[] = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   105   *     {                   //Step 0 Config: 150MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   106   *         (4 - 1),        //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   107   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   108   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   109   *     {                   //Step 1 Config: 200MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   110   *         (3 - 1),       //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   111   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   112   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   113   *     {                   //Step 2 Config: 300MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   114   *         (2 - 1),        //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   115   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   116   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   117   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   118   *     IfxScuCcu_Config        IfxScuCcu_sampleClockConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   119   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   120   *     IfxScuCcu_initConfig(&IfxScuCcu_sampleClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   121   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   122   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   123   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   124   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.pllInputClockSelection = IfxScuCcu_PllInputClockSelection_fOsc0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   126   *     //SYS PLL = 300Mhz, XTAL = 20Mhz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   127   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.k2Divider = IfxScuCcu_K2divider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   128   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.nDivider = IfxScuCcu_Ndivider_60;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   129   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.pDivider = IfxScuCcu_Pdivider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   130   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.waitTime = 0.000200F;  // wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   131   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   132   *     IfxScuCcu_sampleClockConfig.sysPllThrottleConfig.numOfSteps = sizeof(IfxScuCcu_defaultPllConfigSteps) / sizeof(IfxScuCcu_PllStepConfig); //  step clock incr
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   133   *     IfxScuCcu_sampleClockConfig.sysPllThrottleConfig.pllSteps = IfxScuCcu_defaultPllConfigSteps;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   135   *     // PER PLL1 = 240Mhz, PERPLL2 = 50Mhz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   136   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k2Divider = IfxScuCcu_K2divider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   137   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k3Divider = IfxScuCcu_K3divider_6;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   138   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k3DividerBypass = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   139   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.nDivider = IfxScuCcu_Ndivider_24;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   140   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.pDivider = IfxScuCcu_Pdivider_1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   142   *     // update CCUCON Config use mask and value as below
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   143   *     IfxScuCcu_sampleClockConfig.clockDistribution.ccucon0.mask =IFXSCU_CFG_CCUCON0_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   144   *     IfxScuCcu_sampleClockConfig.clockDistribution.ccucon0.value = IFXSCU_CFG_CCUCON0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   146   *     // standard PLL & clock initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   147   *     IfxScuCcu_init(&IfxScuCcu_sampleClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   149   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   150   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   151   * ** Modulation Configuration **
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   152   * The SCU CCU module also provides an option to Frequency Modulate the clock.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   153   * The Modulation configuration can be done as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   154   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   155   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   156   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   157   * //define your modulation configuration structure:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   158   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   159   *  IFX_CONST IfxScuCcu_Mod_Config IfxScuCcu_SampleModConfig = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   160   *          IfxScuCcu_ModEn_disabled,          // disable is default //enable / disable modulation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   161   *          IfxScuCcu_ModulationAmplitude_0p5, // default 0 value  // specify the modulation amplitude %
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   162   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   163   *  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   164   *  // put this as part of the CCU configuration:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   165   *  IfxScuCcu_sampleClockConfig.modulationConfig = &IfxScuCcu_SampleModConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   166   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   167   *  // now initalize the CCU PLL and clock with the init function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   168   *  IfxScuCcu_init(&IfxScuCcu_sampleClockConfig)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   169   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   171   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   172   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   173   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   174   * \defgroup IfxLld_Scu_Std_Ccu Ccu Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   175   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   176   * \defgroup IfxLld_Scu_Std_Ccu_Ccu Clock Control Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   177   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   178   * \defgroup IfxLld_Scu_Std_Ccu_Ccu_Operative Clock Control Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   179   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   180   * \defgroup IfxLld_Scu_Std_Ccu_Ccu_Configuration Clock Control Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   181   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   182   * \defgroup IfxLld_Scu_Std_Ccu_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   183   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   185  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   186  #ifndef IFXSCUCCU_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   187  #define IFXSCUCCU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   188  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   189  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   190  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   191  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   193  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   194  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   195  #include "Cpu/Std/IfxCpu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   196  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   197  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   198  #include "_PinMap/IfxScu_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   199  #include "IfxSmu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   200  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   201  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   202  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   203  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   205  /** \brief Oscillator stability check timeout count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   207  #ifndef IFXSCUCCU_OSC_STABLECHK_TIME
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   208  #define IFXSCUCCU_OSC_STABLECHK_TIME               (640)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   209  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   210  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   211  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   213  #define IFXSCUCCU_SMUALARM_MASK                    (0x1DU)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   215  /** \brief ~40uS max wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   216   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   217  #ifndef IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   218  #define IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT     (0x1000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   219  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   221  /** \brief ~122uS max wait time for PLL locking
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   223  #define IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT           (0x3000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   224  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   225  /** \brief ~122uS max wait time for PLL power down/up state update
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   227  #define IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT (0x3000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   229  /** \brief ~244uS max wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   230   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   231  #define IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT           (0x6000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   233  /** \brief 3mS max wait time for PLL power down/up state update
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   235  #define IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT (0x493E0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   237  #define IFXSCUCCU_LOOP_TIMEOUT_CHECK(tVar, tErr) \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   238      {                                            \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   239          if (((sint32)--tVar) <= 0)               \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   240          {                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   241              tErr = (uint8)1;                     \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   242              break;                               \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   243          }                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   244          else                                     \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   245          {                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   246          }                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   247      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   248  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   249  /** \brief Modulation frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   250   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   251  #define IFXSCUCCU_MODULATION_FREQ_HZ               (3600000)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   253  /** \brief MODCFG shift value for SYSPLLCON2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   255  #define IFXSCUCCU_MODCFG_DEFAULT_SHIFT             (10)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   257  /** \brief MODCFG default value - for SYSPLLCON2[15:10]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   259  #define IFXSCUCCU_MODCFG_DEFAULT_VAL               ((uint32)0x3D)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   261  /** \brief get Rgain from MA and FDco
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   263  #define IFXSCUCCU_GET_RGAIN_NOM(MA, FDco)  ((2 * (MA / 100) * (FDco / IFXSCUCCU_MODULATION_FREQ_HZ)))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   265  /** \brief Get RGAin HEX from RGain Nominal value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   266   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   267  #define IFXSCUCCU_GET_RGAIN_HEX(RGain_Nom) ((uint16)((RGain_Nom * 32) + 0.5))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   269  /** \brief Get MODCFG from RGAIN_HEX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   271  #define IFXSCUCCU_GET_MODCFG(RGain_Hex)    ((uint16)(IFXSCUCCU_MODCFG_DEFAULT_VAL << IFXSCUCCU_MODCFG_DEFAULT_SHIFT) | (uint16)(RGain_Hex))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   273  /** \brief Define to include the flash wait state check in ScuCcu_init()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   275  #define IFXSCUCCU_FLASHWAITSTATECHECK (0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   277  /** \brief 10 microsecond wait time between steps to jump back to normal mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   278   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   279  #ifndef IFXSCUCCU_LPTONORMAL_WAITTIME
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   280  #define IFXSCUCCU_LPTONORMAL_WAITTIME (0.00001f)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   281  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   283  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   284  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   285  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   287  /** \brief Function pointer type for the hooks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   288   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   290  typedef void (*IfxScuCcu_PllStepsFunctionHook)(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   292  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   293  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   294  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   295  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   296  /** \addtogroup IfxLld_Scu_Std_Ccu_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   297   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   298  /** \brief clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   299   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   300  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   301  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   302      IfxScuCcu_Fsource_0 = 0,      /**< \brief fSource0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   303      IfxScuCcu_Fsource_1,          /**< \brief fSource1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   304      IfxScuCcu_Fsource_2           /**< \brief fSource2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   305  } IfxScuCcu_Fsource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   307  /** \brief MODULE_SCU.PLLCON1.B.K2DIV, specifies the K2-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   308   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   309  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   310  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   311      IfxScuCcu_K2divider_1 = 0,      /**< \brief K2-Divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   312      IfxScuCcu_K2divider_2,          /**< \brief K2-Divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   313      IfxScuCcu_K2divider_3,          /**< \brief K2-Divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   314      IfxScuCcu_K2divider_4,          /**< \brief K2-Divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   315      IfxScuCcu_K2divider_5,          /**< \brief K2-Divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   316      IfxScuCcu_K2divider_6,          /**< \brief K2-Divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   317      IfxScuCcu_K2divider_7,          /**< \brief K2-Divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   318      IfxScuCcu_K2divider_8           /**< \brief K2-Divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   319  } IfxScuCcu_K2divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   321  /** \brief MODULE_SCU.PLLCON1.B.K3DIV, specifies the K3-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   322   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   323  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   324  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   325      IfxScuCcu_K3divider_1 = 0,      /**< \brief K3-Divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   326      IfxScuCcu_K3divider_2,          /**< \brief K3-Divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   327      IfxScuCcu_K3divider_3,          /**< \brief K3-Divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   328      IfxScuCcu_K3divider_4,          /**< \brief K3-Divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   329      IfxScuCcu_K3divider_5,          /**< \brief K3-Divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   330      IfxScuCcu_K3divider_6,          /**< \brief K3-Divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   331      IfxScuCcu_K3divider_7,          /**< \brief K3-Divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   332      IfxScuCcu_K3divider_8           /**< \brief K3-Divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   333  } IfxScuCcu_K3divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   334  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   335  /** \brief Low Power Division Ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   336   * Corresponds to values of LPDIV in CCUCON0.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   337   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   338  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   339  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   340      IfxScuCcu_LowPowerDivRatio_divBy30 = 1,  /**< \brief Divide by 30 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   341      IfxScuCcu_LowPowerDivRatio_divBy60,      /**< \brief Divide by 60 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   342      IfxScuCcu_LowPowerDivRatio_divBy120,     /**< \brief Divide by 120 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   343      IfxScuCcu_LowPowerDivRatio_divBy240      /**< \brief Divide by 240 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   344  } IfxScuCcu_LowPowerDivRatio;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   346  /** \brief ENUM for MA (%) values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   347   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   348  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   349  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   350      IfxScuCcu_ModulationAmplitude_0p5 = 0,      /**< \brief 0.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   351      IfxScuCcu_ModulationAmplitude_1p0,          /**< \brief 1.0%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   352      IfxScuCcu_ModulationAmplitude_1p25,         /**< \brief 1.25%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   353      IfxScuCcu_ModulationAmplitude_1p5,          /**< \brief 1.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   354      IfxScuCcu_ModulationAmplitude_2p0,          /**< \brief 2%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   355      IfxScuCcu_ModulationAmplitude_2p5,          /**< \brief 2.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   356      IfxScuCcu_ModulationAmplitude_count,        /**< \brief range  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   357  } IfxScuCcu_ModulationAmplitude;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   358  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   359  /** \brief MODULE_SCU.PLLCON0.B.NDIV, specifies the N-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   361  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   362  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   363      IfxScuCcu_Ndivider_1 = 0,      /**< \brief  N-divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   364      IfxScuCcu_Ndivider_2,          /**< \brief  N-divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   365      IfxScuCcu_Ndivider_3,          /**< \brief  N-divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   366      IfxScuCcu_Ndivider_4,          /**< \brief  N-divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   367      IfxScuCcu_Ndivider_5,          /**< \brief  N-divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   368      IfxScuCcu_Ndivider_6,          /**< \brief  N-divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   369      IfxScuCcu_Ndivider_7,          /**< \brief  N-divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   370      IfxScuCcu_Ndivider_8,          /**< \brief  N-divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   371      IfxScuCcu_Ndivider_9,          /**< \brief  N-divider 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   372      IfxScuCcu_Ndivider_10,         /**< \brief  N-divider 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   373      IfxScuCcu_Ndivider_11,         /**< \brief  N-divider 11  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   374      IfxScuCcu_Ndivider_12,         /**< \brief  N-divider 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   375      IfxScuCcu_Ndivider_13,         /**< \brief  N-divider 13  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   376      IfxScuCcu_Ndivider_14,         /**< \brief  N-divider 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   377      IfxScuCcu_Ndivider_15,         /**< \brief  N-divider 15  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   378      IfxScuCcu_Ndivider_16,         /**< \brief  N-divider 16  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   379      IfxScuCcu_Ndivider_17,         /**< \brief  N-divider 17  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   380      IfxScuCcu_Ndivider_18,         /**< \brief  N-divider 18  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   381      IfxScuCcu_Ndivider_19,         /**< \brief  N-divider 19  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   382      IfxScuCcu_Ndivider_20,         /**< \brief  N-divider 20  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   383      IfxScuCcu_Ndivider_21,         /**< \brief  N-divider 21  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   384      IfxScuCcu_Ndivider_22,         /**< \brief  N-divider 22  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   385      IfxScuCcu_Ndivider_23,         /**< \brief  N-divider 23  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   386      IfxScuCcu_Ndivider_24,         /**< \brief  N-divider 24  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   387      IfxScuCcu_Ndivider_25,         /**< \brief  N-divider 25  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   388      IfxScuCcu_Ndivider_26,         /**< \brief  N-divider 26  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   389      IfxScuCcu_Ndivider_27,         /**< \brief  N-divider 27  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   390      IfxScuCcu_Ndivider_28,         /**< \brief  N-divider 28  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   391      IfxScuCcu_Ndivider_29,         /**< \brief  N-divider 29  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   392      IfxScuCcu_Ndivider_30,         /**< \brief  N-divider 30  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   393      IfxScuCcu_Ndivider_31,         /**< \brief  N-divider 31  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   394      IfxScuCcu_Ndivider_32,         /**< \brief  N-divider 32  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   395      IfxScuCcu_Ndivider_33,         /**< \brief  N-divider 33  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   396      IfxScuCcu_Ndivider_34,         /**< \brief  N-divider 34  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   397      IfxScuCcu_Ndivider_35,         /**< \brief  N-divider 35  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   398      IfxScuCcu_Ndivider_36,         /**< \brief  N-divider 36  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   399      IfxScuCcu_Ndivider_37,         /**< \brief  N-divider 37  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   400      IfxScuCcu_Ndivider_38,         /**< \brief  N-divider 38  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   401      IfxScuCcu_Ndivider_39,         /**< \brief  N-divider 39  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   402      IfxScuCcu_Ndivider_40,         /**< \brief  N-divider 40  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   403      IfxScuCcu_Ndivider_41,         /**< \brief  N-divider 41  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   404      IfxScuCcu_Ndivider_42,         /**< \brief  N-divider 42  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   405      IfxScuCcu_Ndivider_43,         /**< \brief  N-divider 43  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   406      IfxScuCcu_Ndivider_44,         /**< \brief  N-divider 44  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   407      IfxScuCcu_Ndivider_45,         /**< \brief  N-divider 45  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   408      IfxScuCcu_Ndivider_46,         /**< \brief  N-divider 46  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   409      IfxScuCcu_Ndivider_47,         /**< \brief  N-divider 47  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   410      IfxScuCcu_Ndivider_48,         /**< \brief  N-divider 48  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   411      IfxScuCcu_Ndivider_49,         /**< \brief  N-divider 49  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   412      IfxScuCcu_Ndivider_50,         /**< \brief  N-divider 50  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   413      IfxScuCcu_Ndivider_51,         /**< \brief  N-divider 51  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   414      IfxScuCcu_Ndivider_52,         /**< \brief  N-divider 52  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   415      IfxScuCcu_Ndivider_53,         /**< \brief  N-divider 53  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   416      IfxScuCcu_Ndivider_54,         /**< \brief  N-divider 54  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   417      IfxScuCcu_Ndivider_55,         /**< \brief  N-divider 55  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   418      IfxScuCcu_Ndivider_56,         /**< \brief  N-divider 56  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   419      IfxScuCcu_Ndivider_57,         /**< \brief  N-divider 57  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   420      IfxScuCcu_Ndivider_58,         /**< \brief  N-divider 58  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   421      IfxScuCcu_Ndivider_59,         /**< \brief  N-divider 59  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   422      IfxScuCcu_Ndivider_60,         /**< \brief  N-divider 60  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   423      IfxScuCcu_Ndivider_61,         /**< \brief  N-divider 61  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   424      IfxScuCcu_Ndivider_62,         /**< \brief  N-divider 62  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   425      IfxScuCcu_Ndivider_63,         /**< \brief  N-divider 63  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   426      IfxScuCcu_Ndivider_64,         /**< \brief  N-divider 64  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   427      IfxScuCcu_Ndivider_65,         /**< \brief  N-divider 65  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   428      IfxScuCcu_Ndivider_66,         /**< \brief  N-divider 66  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   429      IfxScuCcu_Ndivider_67,         /**< \brief  N-divider 67  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   430      IfxScuCcu_Ndivider_68,         /**< \brief  N-divider 68  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   431      IfxScuCcu_Ndivider_69,         /**< \brief  N-divider 69  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   432      IfxScuCcu_Ndivider_70,         /**< \brief  N-divider 70  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   433      IfxScuCcu_Ndivider_71,         /**< \brief  N-divider 71  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   434      IfxScuCcu_Ndivider_72,         /**< \brief  N-divider 72  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   435      IfxScuCcu_Ndivider_73,         /**< \brief  N-divider 73  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   436      IfxScuCcu_Ndivider_74,         /**< \brief  N-divider 74  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   437      IfxScuCcu_Ndivider_75,         /**< \brief  N-divider 75  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   438      IfxScuCcu_Ndivider_76,         /**< \brief  N-divider 76  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   439      IfxScuCcu_Ndivider_77,         /**< \brief  N-divider 77  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   440      IfxScuCcu_Ndivider_78,         /**< \brief  N-divider 78  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   441      IfxScuCcu_Ndivider_79,         /**< \brief  N-divider 79  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   442      IfxScuCcu_Ndivider_80,         /**< \brief  N-divider 80  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   443      IfxScuCcu_Ndivider_81,         /**< \brief  N-divider 81  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   444      IfxScuCcu_Ndivider_82,         /**< \brief  N-divider 82  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   445      IfxScuCcu_Ndivider_83,         /**< \brief  N-divider 83  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   446      IfxScuCcu_Ndivider_84,         /**< \brief  N-divider 84  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   447      IfxScuCcu_Ndivider_85,         /**< \brief  N-divider 85  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   448      IfxScuCcu_Ndivider_86,         /**< \brief  N-divider 86  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   449      IfxScuCcu_Ndivider_87,         /**< \brief  N-divider 87  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   450      IfxScuCcu_Ndivider_88,         /**< \brief  N-divider 88  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   451      IfxScuCcu_Ndivider_89,         /**< \brief  N-divider 89  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   452      IfxScuCcu_Ndivider_90,         /**< \brief  N-divider 90  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   453      IfxScuCcu_Ndivider_91,         /**< \brief  N-divider 91  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   454      IfxScuCcu_Ndivider_92,         /**< \brief  N-divider 92  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   455      IfxScuCcu_Ndivider_93,         /**< \brief  N-divider 93  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   456      IfxScuCcu_Ndivider_94,         /**< \brief  N-divider 94  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   457      IfxScuCcu_Ndivider_95,         /**< \brief  N-divider 95  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   458      IfxScuCcu_Ndivider_96,         /**< \brief  N-divider 96  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   459      IfxScuCcu_Ndivider_97,         /**< \brief  N-divider 97  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   460      IfxScuCcu_Ndivider_98,         /**< \brief  N-divider 98  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   461      IfxScuCcu_Ndivider_99,         /**< \brief  N-divider 99  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   462      IfxScuCcu_Ndivider_100,        /**< \brief  N-divider 100  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   463      IfxScuCcu_Ndivider_101,        /**< \brief  N-divider 101  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   464      IfxScuCcu_Ndivider_102,        /**< \brief  N-divider 102  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   465      IfxScuCcu_Ndivider_103,        /**< \brief  N-divider 103  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   466      IfxScuCcu_Ndivider_104,        /**< \brief  N-divider 104  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   467      IfxScuCcu_Ndivider_105,        /**< \brief  N-divider 105  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   468      IfxScuCcu_Ndivider_106,        /**< \brief  N-divider 106  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   469      IfxScuCcu_Ndivider_107,        /**< \brief  N-divider 107  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   470      IfxScuCcu_Ndivider_108,        /**< \brief  N-divider 108  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   471      IfxScuCcu_Ndivider_109,        /**< \brief  N-divider 109  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   472      IfxScuCcu_Ndivider_110,        /**< \brief  N-divider 110  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   473      IfxScuCcu_Ndivider_111,        /**< \brief  N-divider 111  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   474      IfxScuCcu_Ndivider_112,        /**< \brief  N-divider 112  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   475      IfxScuCcu_Ndivider_113,        /**< \brief  N-divider 113  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   476      IfxScuCcu_Ndivider_114,        /**< \brief  N-divider 114  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   477      IfxScuCcu_Ndivider_115,        /**< \brief  N-divider 115  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   478      IfxScuCcu_Ndivider_116,        /**< \brief  N-divider 116  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   479      IfxScuCcu_Ndivider_117,        /**< \brief  N-divider 117  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   480      IfxScuCcu_Ndivider_118,        /**< \brief  N-divider 118  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   481      IfxScuCcu_Ndivider_119,        /**< \brief  N-divider 119  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   482      IfxScuCcu_Ndivider_120,        /**< \brief  N-divider 120  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   483      IfxScuCcu_Ndivider_121,        /**< \brief  N-divider 121  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   484      IfxScuCcu_Ndivider_122,        /**< \brief  N-divider 122  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   485      IfxScuCcu_Ndivider_123,        /**< \brief  N-divider 123  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   486      IfxScuCcu_Ndivider_124,        /**< \brief  N-divider 124  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   487      IfxScuCcu_Ndivider_125,        /**< \brief  N-divider 125  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   488      IfxScuCcu_Ndivider_126,        /**< \brief  N-divider 126  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   489      IfxScuCcu_Ndivider_127,        /**< \brief  N-divider 127  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   490      IfxScuCcu_Ndivider_128         /**< \brief  N-divider 128  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   491  } IfxScuCcu_Ndivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   492  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   493  /** \brief MODULE_SCU.PLLCON0.B.PDIV, specifies the P-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   495  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   496  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   497      IfxScuCcu_Pdivider_1 = 0,      /**< \brief  P-divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   498      IfxScuCcu_Pdivider_2,          /**< \brief  P-divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   499      IfxScuCcu_Pdivider_3,          /**< \brief  P-divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   500      IfxScuCcu_Pdivider_4,          /**< \brief  P-divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   501      IfxScuCcu_Pdivider_5,          /**< \brief  P-divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   502      IfxScuCcu_Pdivider_6,          /**< \brief  P-divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   503      IfxScuCcu_Pdivider_7,          /**< \brief  P-divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   504      IfxScuCcu_Pdivider_8           /**< \brief  P-divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   505  } IfxScuCcu_Pdivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   506  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   507  /** \brief SysPll & Per Pll input clock selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   508   * SYSPLLCON0.B.INSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   509   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   510  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   511  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   512      IfxScuCcu_PllInputClockSelection_fOsc1   = 0, /**< \brief Backup clock select */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   513      IfxScuCcu_PllInputClockSelection_fOsc0   = 1, /**< \brief fOsc0 or XTAL clock select */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   514      IfxScuCcu_PllInputClockSelection_fSysclk = 2  /**< \brief fOsc1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   515  } IfxScuCcu_PllInputClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   516  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   517  /** \brief trap request type
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   518   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   519  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   520  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   521      IfxScuCcu_Traprequest_esr0 = 0,  /**< \brief external service request 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   522      IfxScuCcu_Traprequest_esr1,      /**< \brief external service request 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   523      IfxScuCcu_Traprequest_trap2,     /**< \brief trap2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   524      IfxScuCcu_Traprequest_smu        /**< \brief safety management unit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   525  } IfxScuCcu_Traprequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   526  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   527  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   528  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   529  /** \brief modulation enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   530   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   531  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   532  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   533      IfxScuCcu_ModEn_disabled = 0,  /**< \brief disable modulation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   534      IfxScuCcu_ModEn_enabled  = 1   /**< \brief enable modulation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   535  } IfxScuCcu_ModEn;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   537  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   538  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   539  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   541  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   542   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   543  /** \brief Configuration structure type for the Per Pll step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   544   * This structure must be used to configure the P, N and K2, K3 dividers .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   545   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   546  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   547  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   548      uint8 pDivider;              /**< \brief P divider value for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   549      uint8 nDivider;              /**< \brief N divider value for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   550      uint8 k2Divider;             /**< \brief K2 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   551      uint8 k3Divider;             /**< \brief K3 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   552      uint8 k3DividerBypass;       /**< \brief Divider Bypass
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   553                                    * 0 - The divide by block in front of the K3-Divider is not bypassed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   554                                    * 1-  The divide by block in front of the K3-Divider is bypassed. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   555  } IfxScuCcu_PerPllConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   556  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   557  /** \brief Configuration structure type for the Pll initial step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   558   * This structure must be used to configure the P, N and K2 dividers for initial step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   559   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   560  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   561  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   562      uint8 pDivider;        /**< \brief P divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   563      uint8 nDivider;        /**< \brief N divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   564      uint8 k2Divider;       /**< \brief K2 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   565  } IfxScuCcu_SysPllConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   567  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   568  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   569  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   570   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   571  /** \brief Configuration structure type for CCUCON registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   573  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   574  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   575      uint32 value;       /**< \brief CCUCON Register value to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   576      uint32 mask;        /**< \brief CCUCON Mask to select the bit fields to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   577  } IfxScuCcu_CcuconRegConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   578  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   579  /** \brief Configuration structure type for the Pll Steps for current jump control.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   581  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   582  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   583      uint8   k2Step;         /**< \brief K2 divider value for this step. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   584      float32 waitTime;       /**< \brief Wait time for for this step. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   585  } IfxScuCcu_PllStepConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   587  /** \brief Configuration structure type for the Pll Parameters.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   589  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   590  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   591      uint32                           xtalFrequency;                /**< \brief Xtal frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   592      IfxScuCcu_PllInputClockSelection pllInputClockSelection;       /**< \brief Pll input clock selection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   593      IfxScuCcu_SysPllConfig           sysPllConfig;                 /**< \brief System PLL Configurations */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   594      IfxScuCcu_PerPllConfig           perPllConfig;                 /**< \brief Peripheral PLL Configurations */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   595  } IfxScuCcu_pllsParameterConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   596  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   597  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   599  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   600   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   601  /** \brief Configuration structure type for the Flash waitstate configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   602   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   603  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   604  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   605      uint32 value;       /**< \brief FLASH.FCON Register value to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   606      uint32 mask;        /**< \brief FLASH.FCON Mask to select the bit fields to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   607  } IfxScuCcu_FlashWaitstateConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   609  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   610  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   611  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   612   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   613  /** \brief Configuration structure type for all the CCUCON registers to configure clock distribution.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   615  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   616  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   617      IfxScuCcu_CcuconRegConfig ccucon0;        /**< \brief CCUCON0 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   618      IfxScuCcu_CcuconRegConfig ccucon1;        /**< \brief CCUCON1 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   619      IfxScuCcu_CcuconRegConfig ccucon2;        /**< \brief CCUCON2 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   620      IfxScuCcu_CcuconRegConfig ccucon5;        /**< \brief CCUCON5 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   621      IfxScuCcu_CcuconRegConfig ccucon6;        /**< \brief CCUCON6 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   622      IfxScuCcu_CcuconRegConfig ccucon7;        /**< \brief CCUCON7 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   623      IfxScuCcu_CcuconRegConfig ccucon8;        /**< \brief CCUCON8 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   624      IfxScuCcu_CcuconRegConfig ccucon9;        /**< \brief CCUCON9 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   625      IfxScuCcu_CcuconRegConfig ccucon10;       /**< \brief CCUCON10 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   626      IfxScuCcu_CcuconRegConfig ccucon11;       /**< \brief CCUCON11 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   627  } IfxScuCcu_ClockDistributionConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   629  /** \brief Configuration structure type for the Pll Initial Step Configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   631  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   633      IfxScuCcu_pllsParameterConfig pllsParameters;       /**< \brief Configuration Parameters for both PLLs */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   634      float32                       waitTime;             /**< \brief Wait time for for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   635  } IfxScuCcu_InitialStepConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   637  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   638   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   639  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   640  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   641      uint8                              numOfSteps;       /**< \brief Number of PLL divider steps during clock throttling */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   642      IFX_CONST IfxScuCcu_PllStepConfig *pllSteps;         /**< \brief Pointer to the array of Pll divider step configuration. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   643  } IfxScuCcu_PllThrottleConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   644  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   645  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   647  /** \brief modulation config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   648   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   649  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   650  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   651      IfxScuCcu_ModEn               Mod_Enable;       /**< \brief modulation enable */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   652      IfxScuCcu_ModulationAmplitude Mod_Amp;          /**< \brief modulation amplitude */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   653  } IfxScuCcu_Mod_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   655  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   656   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   657  /** \brief Configuration structure SCU module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   658   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   659  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   660  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   661      IfxScuCcu_InitialStepConfig               pllInitialStepConfig;           /**< \brief Configuration of first step which is same as internal osc frequency. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   662      IfxScuCcu_PllThrottleConfig               sysPllThrottleConfig;           /**< \brief Configuration of PLL throttling. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   663      IfxScuCcu_ClockDistributionConfig         clockDistribution;              /**< \brief Configuration of of bus clocks and other module clock distribution. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   664      IFX_CONST IfxScuCcu_FlashWaitstateConfig *flashFconWaitStateConfig;       /**< \brief Configuration of flash waitstate */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   665      IFX_CONST IfxScuCcu_Mod_Config           *modulationConfig;               /**< \brief modulation configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   666  } IfxScuCcu_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   668  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   669  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   670  /** \brief structure holding the RGain parameters for modulation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   671   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   672  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   673  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   674      float32 RGainNom;       /**< \brief RGain Nominal value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   675      uint16  RGainHex;       /**< \brief RGain Hex value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   676  } IfxScuCcu_RGain_Values;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   678  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   679   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   680  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   681  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   682  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   683  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   684  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   685  /** \brief API to wait for requested duration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   686   * Note: IfxScuCcu_wait shall not use STM in future, because we can guarantee that STM is enabled after reset but  If PLL init is called for changing the frequency during runtime, there is no guarantee that STM is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   687   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   688   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   689  IFX_INLINE void IfxScuCcu_wait(float32 timeSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   690  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   691  /** \brief API to wait for requested duration along with watchdog service to avoid any reset case during startup of the chip.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   692   * Note: IfxScuCcu_wait shall not use STM in future, because we can guarantee that STM is enabled after reset but  If PLL init is called for changing the frequency during runtime, there is no guarantee that STM is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   693   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   694   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   695  IFX_INLINE void IfxScuCcu_waitWithWdtService(float32 timeSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   696  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   697  /** \brief API to configure the LPDIV value to enter into Low Power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   698   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   699   * Caution:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   700   * write to LPDIV with non-zero division ratio will cause system to enter low power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   701   * Low power mode will affect different SPBDIV and SRIDIV ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   703   * The original CCUCON0 ratios should be preserved by user prior to calling this function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   704   * The "normal" CCUCON0 ratios have to be passed to API: "IfxScuCcu_switchToNormalMode" to go back to the original division ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   705   * \param lpDiv Low Power Division Ratio
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   706   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   707   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   708  IFX_INLINE void IfxScuCcu_switchToLowPowerMode(IfxScuCcu_LowPowerDivRatio lpDiv);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   710  /** \brief API to switch back to normal mode from low power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   711   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   712   * Caution:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   713   * The original CCUCON0 setting has to be saved by user prior to entering Low Power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   714   * Pass the original CCUCON0 register as a whole word to this function to restore the normal settings.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   715   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   716   * Ramp back to normal mode is done in steps to avoid sudden jump in frequency and power usage.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   717   * \param ccucon0 CCUCON0 values at normal mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   718   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   720   * Switch to low power mode and back using iLLD functions as below
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   721   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   722   *     uint32 ccucon0 = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   723   *     IfxScuCcu_LowPowerDivRatio lpDiv = IfxScuCcu_LowPowerDivRatio_divBy30;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   724   *     IfxScuCcu_switchToLowPowerMode(lpDiv);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   725   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   726   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   727   * Switch back to normal mode  with the saved ccucon0 value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   728   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   729   *     IfxScuCcu_switchToNormalMode(ccucon0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   730   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   731   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   733  IFX_INLINE void IfxScuCcu_switchToNormalMode(const uint32 ccucon0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   735  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   736  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   737  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   738   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   739  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   740  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   741  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   742  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   743  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   744  /** \brief API to get ADAS divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   745   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   746   * \return ADAS frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   748  IFX_INLINE float32 IfxScuCcu_getAdasFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   750  /** \brief API to get Adc (EVADC, EDSADC)  frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   751   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   752   * \return Adc frequency (fADC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   753   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   754  IFX_INLINE float32 IfxScuCcu_getAdcFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   755  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   756  /** \brief API to get ASCLINF divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   757   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   758   * \return AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   759   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   760  IFX_INLINE float32 IfxScuCcu_getAsclinFFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   762  /** \brief API to get EBU frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   763   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   764   * \return EBU frequency (fEBU) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   765   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   766  IFX_INLINE float32 IfxScuCcu_getEbuFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   768  /** \brief API to get EVR Oscillator frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   769   * This API returns the constant which is specific to the ScuCcu of the controller.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   770   * \return EVR Oscillator frequency (fBACK or fEVR) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   771   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   772  IFX_INLINE float32 IfxScuCcu_getEvrFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   774  /** \brief API to get GETH divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   775   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   776   * \return GETH frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   777   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   778  IFX_INLINE float32 IfxScuCcu_getGethFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   780  /** \brief API to get GTMdivider frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   781   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   782   * return GTM frequency (fGTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   783   * \return Gtm Frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   784   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   785  IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   787  /** \brief API to get I2C frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   788   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   789   * \return I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   790   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   791  IFX_INLINE float32 IfxScuCcu_getI2cFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   792  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   793  /** \brief API to get MCANH divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   794   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   795   * \return MCANH frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   796   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   797  IFX_INLINE float32 IfxScuCcu_getMcanhFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   799  /** \brief API to get Oscillator 0 frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   800   * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   801   * \return Osc0 frequency (fOSC0) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   802   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   803  IFX_INLINE float32 IfxScuCcu_getOsc0Frequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   804  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   805  /** \brief API to get Oscillator 0 frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   806   * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   807   * \return Osc frequency (fOSC) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   808   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   809  IFX_INLINE float32 IfxScuCcu_getOscFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   811  /** \brief Returns the clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   812   * \return Clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   813   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   814  IFX_INLINE IfxScuCcu_PllInputClockSelection IfxScuCcu_getSourceSelection(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   816  /** \brief API to get STM divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   817   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   818   * \return STM frequency (fSTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   819   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   820  IFX_INLINE float32 IfxScuCcu_getStmFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   821  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   822  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   823  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   824  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   825  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   826  /** \brief API to get ASCLINS divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   827   * This API returns the ASCLINS frequency  based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   828   * \return AsclinS frequency (fASCLINS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   829   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   830  IFX_EXTERN float32 IfxScuCcu_getAsclinSFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   831  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   832  /** \brief API to get BBB divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   833   * This API returns the BBBDivider frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   834   * \return BBB frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   835   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   836  IFX_EXTERN float32 IfxScuCcu_getBbbFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   838  /** \brief This API returns the Cpu frequency based on the divider value in CCUCON register and fSource frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   839   * \param cpu CPU number for which effective fCPU is sought
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   840   * \return Cpu[x] frequency in Hz, where x is cpu number passed as parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   841   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   842  IFX_EXTERN float32 IfxScuCcu_getCpuFrequency(const IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   843  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   844  /** \brief API to get FSI2 divider frequency in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   845   * This API returns the fFSI2 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   846   * \return FSI2 frequency (fFSI2) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   847   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   848  IFX_EXTERN float32 IfxScuCcu_getFsi2Frequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   849  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   850  /** \brief API to get FSI divider frequency in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   851   * This API returns the fFSI based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   852   * \return FSI frequency (fFSI) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   853   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   854  IFX_EXTERN float32 IfxScuCcu_getFsiFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   855  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   856  /** \brief API to get MCAN divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   857   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   858   * \return Mcan frequency (fMCAN) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   859   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   860  IFX_EXTERN float32 IfxScuCcu_getMcanFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   861  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   862  /** \brief get source frequency fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   863   * This API returns the source frequency based on the configurations with CCUCON register configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   864   * \return Module frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   865   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   866  IFX_EXTERN float32 IfxScuCcu_getModuleFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   867  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   868  /** \brief API to get MSC divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   869   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   870   * \return Msc frequency (fMSC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   871   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   872  IFX_EXTERN float32 IfxScuCcu_getMscFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   873  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   874  /** \brief API to get actual PER PLL1  frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   875   * This API returns the PER PLL1 frequency based on the K2 divider value in PLLCON and the VCO frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   876   * Fpll1= (Fosc*N)/(P*K2)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   877   * \return PER PLL1 (K2 Divider) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   878   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   879  IFX_EXTERN float32 IfxScuCcu_getPerPllFrequency1(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   880  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   881  /** \brief API to get actual PER PLL2 (K3 Divider) frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   882   * This API returns the PER PLL2 frequency based on the K3 divider value in PLLCON and the VCO frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   883   * Fpll2= (Fosc*N)/(P*K3*1.6)  // DIVBY = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   884   * Fpll2= (Fosc*N)/(P*K3*2)  // DIVBY = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   885   * \return PER PLL2 (K3 Divider ) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   886   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   887  IFX_EXTERN float32 IfxScuCcu_getPerPllFrequency2(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   888  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   889  /** \brief API to get actual Sys PLL output frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   890   * This API returns the based on the divider values in CCUCON, PLLCON registers and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   891   * \return System Pll (fSysPLL) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   892   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   893  IFX_EXTERN float32 IfxScuCcu_getPllFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   894  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   895  /** \brief API to get Qspi divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   896   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   897   * \return Qspi frequency (fQspi) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   898   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   899  IFX_EXTERN float32 IfxScuCcu_getQspiFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   900  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   901  /** \brief get source frequency fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   902   * This API returns the source frequency based on the configurations with CCUCON register configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   903   * \param fsource fsource selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   904   * \return Effective fSOURCE in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   905   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   906  IFX_EXTERN float32 IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource fsource);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   907  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   908  /** \brief API to get SPB divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   909   * This API returns the based on fSOURCE and also on Low power divider mode and/or SPBDIV divider value in CCUCON registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   910   * \return SPB frequency (fSPB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   911   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   912  IFX_EXTERN float32 IfxScuCcu_getSpbFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   913  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   914  /** \brief API to get SRI divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   915   * This API returns the Sri frequency based on the divider values in CCUCON registers and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   916   * \return Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   917   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   918  IFX_EXTERN float32 IfxScuCcu_getSriFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   920  /** \brief API to set ADAS frequency (with ADAS divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   921   * This API configure adas divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   922   * \param adasFreq ADAS frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   923   * \return Actual Adas frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   924   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   925  IFX_EXTERN float32 IfxScuCcu_setAdasFrequency(float32 adasFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   926  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   927  /** \brief API to set ASCLINF frequency (with ASCLINF divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   928   * This API configure ASCLINF divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   929   * \param asclinFFreq AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   930   * \return Actual AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   931   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   932  IFX_EXTERN float32 IfxScuCcu_setAsclinFFrequency(float32 asclinFFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   933  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   934  /** \brief API to set ASCLINS frequency (with ASCLINS divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   935   * This API configure ASCLINS divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   936   * \param asclinSFreq Desired AscLinS frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   937   * \return Actual AsclinS frequency (fASCLINS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   938   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   939  IFX_EXTERN float32 IfxScuCcu_setAsclinSFrequency(float32 asclinSFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   940  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   941  /** \brief API to set BBB frequency (with Bbb divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   942   * This API configure Bbb divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   943   * \param bbbFreq Bbb frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   944   * \return Actual Bbb frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   945   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   946  IFX_EXTERN float32 IfxScuCcu_setBbbFrequency(float32 bbbFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   947  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   948  /** \brief API to set CPU frequency (with CPU divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   949   * This API configure CPU divider values in CCUCON registers. The actual frequency is always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   950   * \param cpu CPU number for which fCPU to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   951   * \param cpuFreq Desired CPU frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   952   * \return Actual CPU[x] frequency in Hz, where x is the cpu number passed as parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   953   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   954  IFX_EXTERN float32 IfxScuCcu_setCpuFrequency(IfxCpu_ResourceCpu cpu, float32 cpuFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   955  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   956  /** \brief API to set FSI2 frequency (with FSI2 divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   957   * This API configure Fsi2 divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   958   * \param fsi2Freq FSI2 frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   959   * \return Actual Fsi2 frequency (fFSI2) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   960   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   961  IFX_EXTERN float32 IfxScuCcu_setFsi2Frequency(float32 fsi2Freq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   962  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   963  /** \brief API to set FSI frequency (with FSI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   964   * This API configure Fsi divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   965   * \param fsiFreq FSI frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   966   * \return Actual Fsi frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   967   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   968  IFX_EXTERN float32 IfxScuCcu_setFsiFrequency(float32 fsiFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   969  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   970  /** \brief API to set GETH frequency (with GETH divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   971   * This API configure geth divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   972   * \param gethFreq GETH frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   973   * \return Actual Geth frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   974   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   975  IFX_EXTERN float32 IfxScuCcu_setGethFrequency(float32 gethFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   976  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   977  /** \brief API to set GTM frequency (with GTM divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   978   * This API configure GTM divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   979   * \param gtmFreq Desired GTM frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   980   * \return Actual GTM frequency in HZ
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   981   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   982  IFX_EXTERN float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   983  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   984  /** \brief API to set I2C frequency (with I2C divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   985   * This API configure adas divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   986   * \param i2cFreq I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   987   * \return Actual I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   988   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   989  IFX_EXTERN float32 IfxScuCcu_setI2cFrequency(float32 i2cFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   990  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   991  /** \brief API to set MCAN frequency (with MCAN divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   992   * This API configure MCAN divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   993   * \param mcanFreq Desired MSC frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   994   * \return Actual Mcan frequency (fMCAN) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   995   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   996  IFX_EXTERN float32 IfxScuCcu_setMcanFrequency(float32 mcanFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   997  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   998  /** \brief API to set MCANH frequency (with MCANH divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   999   * This API configure mcanh divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1000   * \param mcanhFreq MCANH frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1001   * \return Actual MCanh frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1002   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1003  IFX_EXTERN float32 IfxScuCcu_setMcanhFrequency(float32 mcanhFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1004  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1005  /** \brief API to set MSC frequency (with MSC divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1006   * This API configure MSC divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1007   * \param mscFreq Desired MSC frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1008   * \return Actual Msc frequency (fMSC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1009   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1010  IFX_EXTERN float32 IfxScuCcu_setMscFrequency(float32 mscFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1011  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1012  /** \brief API to set QSPI frequency (with QSPI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1013   * This API configure Qspi divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1014   * \param qspiFreq Desired QSPI frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1015   * \return Actual Qspi frequency (fQspi) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1016   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1017  IFX_EXTERN float32 IfxScuCcu_setQspiFrequency(float32 qspiFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1018  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1019  /** \brief API to set SPB frequency (with SPB divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1020   * This API configure SPB divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1021   * \param spbFreq Desired SPB frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1022   * \return Actual SPB frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1023   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1024  IFX_EXTERN float32 IfxScuCcu_setSpbFrequency(float32 spbFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1025  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1026  /** \brief API to set SRI frequency (with SRI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1027   * This API configure Sri divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1028   * \param sriFreq Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1029   * \return Actual Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1030   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1031  IFX_EXTERN float32 IfxScuCcu_setSriFrequency(float32 sriFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1032  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1033  /** \brief API to set STM frequency (with STM divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1034   * This API configure Stm divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1035   * \param stmFreq Stm frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1036   * \return Actual Stm frequency (fSTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1037   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1038  IFX_EXTERN float32 IfxScuCcu_setStmFrequency(float32 stmFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1039  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1040  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1041  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1042  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1043   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1044  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1045  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1046  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1047  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1048  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1049  /** \brief This inline function configures the Ccu SYS PLLs initial step and PER PLL.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1050   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1051  IFX_INLINE boolean IfxScuCcu_configureCcuInitialStep(const IfxScuCcu_InitialStepConfig *pllInitStepCfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1052  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1053  /** \brief Inlined API for clock distribution
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1054   * For each CCUCON register update the configured value with the mask.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1055   * \param clockDistributionConfig pointer to clock distribution structure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1056   * \return TRUE: Operation successful, FALSE: Operation Failure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1057   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1058  IFX_INLINE boolean IfxScuCcu_distributeClockInline(const IfxScuCcu_ClockDistributionConfig *clockDistributionConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1059  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1060  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1061  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1062  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1063  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1064  /** \brief API for clock distribution.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1065   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1066   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1067  IFX_EXTERN void IfxScuCcu_distributeClock(IfxScuCcu_ClockDistributionConfig *clockDistributionConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1068  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1069  /** \brief API to initialize the SCU Clock Control Unit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1070   * This API initialize the Sys PLL with ramp steps, BUS dividers and Per PLL for the configuration provided by the configuration structure.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1071   * FSyspll = (Fosc * Nsys)/(Psys * K2sys);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1072   * Fpll1= (Fosc * Nper)/(Pper * K2per);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1073   * Fpll2= (Fosc * Nper)/(Pper * K3per * 1.6); // if DIVBY = 0, else Fpll2= (Fosc * Nper)/(Pper * K3per * 2) // if DIVBY = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1074   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1075   * Note: Following SMU alarms are disabled before the PLL configuration and Enabled at the end of PLL lock in the function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1076   * PLL0,1,2 clock out of range frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1077   * PLL0,1 VCO loss of lock event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1078   * System PLL Oscillator Watchdog, input clock out of range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1079   * The application should store/restore these alarm configurations if required.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1080   * \param config Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1081   * \return Error status of the ScuCcu initialization process.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1082   * \retval TRUE: If an error occurred during initialization.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1083   * \retval FALSE: If initialization was successful.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1084   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1085  IFX_EXTERN boolean IfxScuCcu_init(const IfxScuCcu_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1086  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1087  /** \brief Initializes the clock configuration with default values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1088   * \param cfg Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1089   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1090   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1091  IFX_EXTERN void IfxScuCcu_initConfig(IfxScuCcu_Config *cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1092  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1093  /** \brief API to switch to Backup clock from the current PLL frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1094   * \param cfg Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1095   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1096   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1097  IFX_EXTERN void IfxScuCcu_switchToBackupClock(const IfxScuCcu_Config *cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1098  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1099  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1100  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1101  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1102  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1103  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1105  /** \brief Clear the trap status flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1106   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1107   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1108   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1109  IFX_INLINE void IfxScuCcu_clearTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1110  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1111  /** \brief Get trap disable flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1112   * \param cpuIndex Cpu index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1113   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1114   * \return Trap request can be generated or not.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1115   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1116  IFX_INLINE boolean IfxScuCcu_getTrapDisableFlag(IfxCpu_ResourceCpu cpuIndex, IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1117  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1118  /** \brief Get the trap status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1119   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1120   * \return Trap was requested or not.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1121   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1122  IFX_INLINE boolean IfxScuCcu_getTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1124  /** \brief Set the trap disable flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1125   * \param cpuIndex Cpu index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1126   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1127   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1129  IFX_INLINE void IfxScuCcu_setTrapDisableFlag(IfxCpu_ResourceCpu cpuIndex, IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1130  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1131  /** \brief Set the trap status flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1132   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1134   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1135  IFX_INLINE void IfxScuCcu_setTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1136  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1137  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1138   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1139  IFX_INLINE boolean IfxScuCcu_throttleSysPllClockInline(const IfxScuCcu_PllThrottleConfig *pllThrottleConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1140  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1141  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1142  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1143  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1145  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1146   * \param modamp modulation amplitude
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1147   * \param RGain_P RGain values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1148   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1149   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1150  IFX_EXTERN void IfxScuCcu_calRGainParameters(IfxScuCcu_ModulationAmplitude modamp, IfxScuCcu_RGain_Values *RGain_P);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1151  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1152  /** \brief initialize modulation parameters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1153   * \param Mod_Cfg modulation configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1156  IFX_EXTERN void IfxScuCcu_modulation_init(const IfxScuCcu_Mod_Config *Mod_Cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1157  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1158  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1159   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1160   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1161  IFX_EXTERN void IfxScuCcu_throttleSysPllClock(IfxScuCcu_PllThrottleConfig *pllThrottleConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1162  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1163  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1164  /*-------------------Global Exported Variables/Constants----------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1165  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1167  /** \brief maps to the IfxScuCcu_ModulationAmplitude enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1169  IFX_EXTERN IFX_CONST float32 IfxScuCcu_MA_percent[IfxScuCcu_ModulationAmplitude_count];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1170  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1171  /** \brief Configuration structure for SCU CCU driver.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1172   * The values of this structure are defined as # defined macros in the implementation of Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1173   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1174  IFX_EXTERN IFX_CONST IfxScuCcu_Config     IfxScuCcu_defaultClockConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1176  /** \brief default modulation config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1177   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1178  IFX_EXTERN IFX_CONST IfxScuCcu_Mod_Config IfxScuCcu_defaultModConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1179  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1180  IFX_EXTERN uint32                         IfxScuCcu_xtalFrequency;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1181  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1182  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1183  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1184  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1185  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1186  IFX_INLINE void IfxScuCcu_clearTrapStatusFlag(IfxScuCcu_Traprequest request)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1187  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1188      uint32 trapclear = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1189      SCU_TRAPCLR.U |= (trapclear << request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1190  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1193  IFX_INLINE boolean IfxScuCcu_configureCcuInitialStep(const IfxScuCcu_InitialStepConfig *pllInitStepCfg)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1194  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1195      uint8                                initError = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1196      uint16                               endinitSfty_pw;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1197  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1198      uint32                               timeoutCycleCount;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1199      const IfxScuCcu_pllsParameterConfig *pllsParamCfg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1200      pllsParamCfg   = &pllInitStepCfg->pllsParameters;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1201      /*get the watch-dog passwords for usage with this function*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1202      endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1203  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1204      /* Reset Safety ENDINIT, SCU_CCUCON registers are protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1205      IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1206  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1207      timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1208  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1209      while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1210      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1211          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1212      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1213  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1214      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1215          Ifx_SCU_CCUCON0 scuCcucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1216          scuCcucon0.U        = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1217          scuCcucon0.B.CLKSEL = 0; /*Select the EVR as fsource0/1/2 for the clock distribution */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1218          scuCcucon0.B.UP     = 1; /*Update the ccucon0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1219          SCU_CCUCON0.U       = scuCcucon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1220      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1221  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1222      timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1224      while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1225      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1226          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1227      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1229      /*Disable SMU Alarms */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1230      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1231          SMU_KEYS.U    = (uint32)0xBCU;        /* Enable access to SMU registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1232          SMU_AG8CF0.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1233          SMU_AG8CF1.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1234          SMU_AG8CF2.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1235          SMU_KEYS.U    = (uint32)0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1236      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1237  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1238      /* Power down the both the PLLs before configuring registers*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1239      /* Both the PLLs are powered down to be sure for asynchronous PLL registers update cause no glitches */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1240      SCU_SYSPLLCON0.B.PLLPWD = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1241      SCU_PERPLLCON0.B.PLLPWD = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1242  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1243      timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1244  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1245      while ((SCU_SYSPLLSTAT.B.PWDSTAT == 0) || (SCU_PERPLLSTAT.B.PWDSTAT == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1246      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1247          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1248      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1249  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1250      /* Now configure the oscillator, required oscillator mode is external crystal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1252      if ((pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fOsc0) || (pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fSysclk))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1253  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1254      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1255          Ifx_SCU_OSCCON scuOsccon;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1256          scuOsccon.U      = SCU_OSCCON.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1257  #if (IFX_CFG_SCU_EXT_CLOCK == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1258          scuOsccon.B.MODE = 2U;   /* external clock selected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1259  #else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1260          scuOsccon.B.MODE = 0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1261  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1262  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1263          scuOsccon.B.OSCVAL = (uint32)(pllsParamCfg->xtalFrequency / 1000000U) - 15; /*XTAL range 16MHz to 40MHz*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1264          /*Note: Oscillator Watchdog Reset (OSCRES) is not required when the PLLs are powered down*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1265          SCU_OSCCON.U       = scuOsccon.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1266      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1267  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1268      /* Configure the initial steps for the system PLL*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1269      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1270          Ifx_SCU_SYSPLLCON0 sysPllCon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1271          sysPllCon0.U       = SCU_SYSPLLCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1272          sysPllCon0.B.PDIV  = pllsParamCfg->sysPllConfig.pDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1273          sysPllCon0.B.NDIV  = pllsParamCfg->sysPllConfig.nDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1274          sysPllCon0.B.INSEL = pllsParamCfg->pllInputClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1275          SCU_SYSPLLCON0.U   = sysPllCon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1276      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1277  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1278      /* Configure the initial steps for the peripheral PLL*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1279      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1280          Ifx_SCU_PERPLLCON0 scuPerPllCon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1281          scuPerPllCon0.U       = SCU_PERPLLCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1282          scuPerPllCon0.B.DIVBY = pllsParamCfg->perPllConfig.k3DividerBypass;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1283          scuPerPllCon0.B.PDIV  = pllsParamCfg->perPllConfig.pDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1284          scuPerPllCon0.B.NDIV  = pllsParamCfg->perPllConfig.nDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1285          SCU_PERPLLCON0.U      = scuPerPllCon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1286      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1288      /* Power up the both the PLLs before configuring registers*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1289      SCU_SYSPLLCON0.B.PLLPWD = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1290      SCU_PERPLLCON0.B.PLLPWD = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1292      timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1294      while ((SCU_SYSPLLSTAT.B.PWDSTAT == 1) || (SCU_PERPLLSTAT.B.PWDSTAT == 1))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1295      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1296          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1297      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1298  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1299      timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1301      while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1302             (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1303             (SCU_PERPLLSTAT.B.K3RDY == 0U))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1304      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1305          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1306      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1307  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1308      SCU_SYSPLLCON1.B.K2DIV = pllsParamCfg->sysPllConfig.k2Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1309      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1310          Ifx_SCU_PERPLLCON1 scuPerPllCon1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1311          scuPerPllCon1.U       = SCU_PERPLLCON1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1312          scuPerPllCon1.B.K2DIV = pllsParamCfg->perPllConfig.k2Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1313          scuPerPllCon1.B.K3DIV = pllsParamCfg->perPllConfig.k3Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1314          SCU_PERPLLCON1.U      = scuPerPllCon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1315      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1316  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1317      timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1319      while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1320             (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1321             (SCU_PERPLLSTAT.B.K3RDY == 0U))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1322      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1323          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1324      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1325  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1326      /*Check if the OSC frequencies are in the limit*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1327      timeoutCycleCount = IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1329      while ((SCU_OSCCON.B.PLLLV == 0) && (SCU_OSCCON.B.PLLHV == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1330      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1331          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1332      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1333  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1334      /* Now start PLL locking for latest set values*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1335      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1336          SCU_SYSPLLCON0.B.RESLD = 1;             /* Restart Sys PLL lock detection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1337          SCU_PERPLLCON0.B.RESLD = 1;             /* Restart Per PLL lock detection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1338  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1339          timeoutCycleCount      = IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1340  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1341          while ((SCU_SYSPLLSTAT.B.LOCK == 0) || (SCU_PERPLLSTAT.B.LOCK == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1342          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1343              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1344          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1345      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1346      /*Enable SMU Alarms */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1347      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1348          SMU_KEYS.U = (uint32)0xBCU;           /* Enable access to SMU registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1349          SMU_CMD.U  = (uint32)0x00000005;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1350          SMU_AG8.U  = IFXSCUCCU_SMUALARM_MASK; /* Clear SMU Alarms*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1351          SMU_KEYS.U = (uint32)0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1352      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1353      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1354          Ifx_SCU_CCUCON0 scu_ccucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1355          scu_ccucon0.U        = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1356          scu_ccucon0.B.CLKSEL = 1; /*Select the PLLs for fsource0/1/2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1357          scu_ccucon0.B.UP     = 1; /*Update the ccucon0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1358  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1359          timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1360  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1361          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1362          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1363              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1364          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1365  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1366          SCU_CCUCON0.U     = scu_ccucon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1367  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1368          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1369  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1370          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1371          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1372              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1373          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1374      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1375  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1376      IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1377      return (boolean)initError;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1378  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1379  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1380  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1381  IFX_INLINE boolean IfxScuCcu_distributeClockInline(const IfxScuCcu_ClockDistributionConfig *clockDistributionConfig)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1382  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1383      uint16 endinitSfty_pw;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1384      uint32 timeoutCycleCount;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1385      uint32 initError = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1386  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1387      /*get the watch-dog passwords for usage with this function*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1388      endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1389  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1390      /* Reset Safety ENDINIT, SCU_CCUCON registers are protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1391      IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1393      /*Configure the clock distribution */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1394      {                                                    /*Write CCUCON0 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1395          Ifx_SCU_CCUCON0 ccucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1396          ccucon0.U         = SCU_CCUCON0.U & ~clockDistributionConfig->ccucon0.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1397          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1398          ccucon0.U        |= (clockDistributionConfig->ccucon0.mask & clockDistributionConfig->ccucon0.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1399          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1400  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1401          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1402          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1403              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1404          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1405  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1406          SCU_CCUCON0.U     = ccucon0.U;      /*Set update bit explicitly to make above configurations effective */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1407          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1408  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1409          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1410          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1411              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1412          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1413      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1414      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1415          /*Write CCUCON1 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1416          Ifx_SCU_CCUCON1 ccucon1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1417          ccucon1.U = SCU_CCUCON1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1419          if (ccucon1.B.CLKSELMCAN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1420              || ccucon1.B.CLKSELMSC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1421              || ccucon1.B.CLKSELQSPI)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1422          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1423              /* Non Zero ClockSel exists - set to Zero */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1424              /* CAUTION: this would briefly reset and set all clocks in CCUCON1! */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1425              ccucon1.U  = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1426              /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1427              ccucon1.U |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1428  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1429              /* set Clock selects to 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1430              ccucon1.B.CLKSELMCAN = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1431              ccucon1.B.CLKSELMSC  = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1432              ccucon1.B.CLKSELQSPI = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1434              timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1435  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1436              while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1437              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1438                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1439              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1441              SCU_CCUCON1.U     = ccucon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1442  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1443              timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1444  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1445              while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1446              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1447                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1448              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1449          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1450  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1451          ccucon1.U         = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1452          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1453          ccucon1.U        |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1454  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1455          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1456  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1457          while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1458          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1459              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1460          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1461  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1462          SCU_CCUCON1.U     = ccucon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1463  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1464          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1465  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1466          while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1467          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1468              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1469          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1470      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1472      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1473          /*Write CCUCON2 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1474          Ifx_SCU_CCUCON2 ccucon2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1475          ccucon2.U = SCU_CCUCON2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1477          if (ccucon2.B.CLKSELASCLINS)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1478          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1479              /* Non Zero ClockSel exists - set to Zero */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1480              /* CAUTION: this would briefly reset and set ASCLINS clock in CCUCON2! */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1481              ccucon2.U               = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1482              /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1483              ccucon2.U              |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1484  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1485              ccucon2.B.CLKSELASCLINS = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1486  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1487              timeoutCycleCount       = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1488  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1489              while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1490              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1491                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1492              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1494              SCU_CCUCON2.U     = ccucon2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1495  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1496              timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1497  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1498              while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1499              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1500                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1501              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1502          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1503  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1504          ccucon2.U         = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1505          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1506          ccucon2.U        |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1507  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1508          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1509  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1510          while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1511          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1512              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1513          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1514  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1515          SCU_CCUCON2.U     = ccucon2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1516  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1517          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1518  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1519          while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1520          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1521              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1522          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1523      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1524      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1525          /*Write CCUCON5 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1526          Ifx_SCU_CCUCON5 ccucon5;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1527          ccucon5.U         = SCU_CCUCON5.U & ~clockDistributionConfig->ccucon5.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1528          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1529          ccucon5.U        |= (clockDistributionConfig->ccucon5.mask & clockDistributionConfig->ccucon5.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1530          ccucon5.B.UP      = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1531          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1532  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1533          while (SCU_CCUCON5.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1534          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1535              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1536          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1538          SCU_CCUCON5.U     = ccucon5.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1539          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1541          while (SCU_CCUCON5.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1542          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1543              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1544          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1545      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1546      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1547          /*Write CCUCON6 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1548          Ifx_SCU_CCUCON6 ccucon6;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1549          ccucon6.U     = SCU_CCUCON6.U & ~clockDistributionConfig->ccucon6.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1550          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1551          ccucon6.U    |= (clockDistributionConfig->ccucon6.mask & clockDistributionConfig->ccucon6.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1552          SCU_CCUCON6.U = ccucon6.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1553      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1555      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1556          /*Write CCUCON7 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1557          Ifx_SCU_CCUCON7 ccucon7;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1558          ccucon7.U     = SCU_CCUCON7.U & ~clockDistributionConfig->ccucon7.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1559          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1560          ccucon7.U    |= (clockDistributionConfig->ccucon7.mask & clockDistributionConfig->ccucon7.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1561          SCU_CCUCON7.U = ccucon7.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1562      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1563  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1564      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1565          /*Write CCUCON8 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1566          Ifx_SCU_CCUCON8 ccucon8;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1567          ccucon8.U     = SCU_CCUCON8.U & ~clockDistributionConfig->ccucon8.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1568          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1569          ccucon8.U    |= (clockDistributionConfig->ccucon8.mask & clockDistributionConfig->ccucon8.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1570          SCU_CCUCON8.U = ccucon8.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1571      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1572      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1573          /*Write CCUCON9 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1574          Ifx_SCU_CCUCON9 ccucon9;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1575          ccucon9.U     = SCU_CCUCON9.U & ~clockDistributionConfig->ccucon9.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1576          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1577          ccucon9.U    |= (clockDistributionConfig->ccucon9.mask & clockDistributionConfig->ccucon9.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1578          SCU_CCUCON9.U = ccucon9.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1579      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1580      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1581          /*Write CCUCON10 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1582          Ifx_SCU_CCUCON10 ccucon10;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1583          ccucon10.U     = SCU_CCUCON10.U & ~clockDistributionConfig->ccucon10.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1584          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1585          ccucon10.U    |= (clockDistributionConfig->ccucon10.mask & clockDistributionConfig->ccucon10.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1586          SCU_CCUCON10.U = ccucon10.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1587      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1588      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1589          /*Write CCUCON11 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1590          Ifx_SCU_CCUCON11 ccucon11;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1591          ccucon11.U     = SCU_CCUCON11.U & ~clockDistributionConfig->ccucon11.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1592          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1593          ccucon11.U    |= (clockDistributionConfig->ccucon11.mask & clockDistributionConfig->ccucon11.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1594          SCU_CCUCON11.U = ccucon11.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1595      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1596      IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1597      return (boolean)initError;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1598  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1599  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1600  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1601  IFX_INLINE float32 IfxScuCcu_getAdasFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1602  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1603      uint32 adasDiv = SCU_CCUCON5.B.ADASDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1604  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1605      return (adasDiv == (uint32)0) ? 0 : IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / adasDiv;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1606  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1607  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1609  IFX_INLINE float32 IfxScuCcu_getAdcFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1610  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1611      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_1);
	mov	d4,#1
	j	IfxScuCcu_getSourceFrequency
.L441:
	
__IfxEvadc_getAdcModuleFrequency_function_end:
	.size	IfxEvadc_getAdcModuleFrequency,__IfxEvadc_getAdcModuleFrequency_function_end-IfxEvadc_getAdcModuleFrequency
.L293:
	; End of function
	
	.sdecl	'.text.IfxEvadc.IfxEvadc_getQueueSlotGatingMode',code,cluster('IfxEvadc_getQueueSlotGatingMode')
	.sect	'.text.IfxEvadc.IfxEvadc_getQueueSlotGatingMode'
	.align	2
	
	.global	IfxEvadc_getQueueSlotGatingMode

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   182  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   183      IFX_UNUSED_PARAMETER(evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   184  #ifdef IFX_CFG_AURIX_SCUCCU_USED
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   185      return IfxScuCcu_getSpbFrequency();
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   186  #else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   187      return IfxScuCcu_getAdcFrequency();
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   188  #endif
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   189  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   190  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   191  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   192  IfxEvadc_GatingMode IfxEvadc_getQueueSlotGatingMode(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType)
; Function IfxEvadc_getQueueSlotGatingMode
.L160:
IfxEvadc_getQueueSlotGatingMode:	.type	func

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   193  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   194      uint8 gatingMode = 0;
	mov	d2,#0
.L531:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   195  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   196      switch (sourceType)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   197      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   198      case IfxEvadc_RequestSource_queue0:
	jeq	d4,#0,.L30
.L637:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   199          gatingMode = evadcG->Q[0].QMR.B.ENGT;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   200          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   201      case IfxEvadc_RequestSource_queue1:
	jeq	d4,#1,.L31
.L638:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   202          gatingMode = evadcG->Q[1].QMR.B.ENGT;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   203          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   204      case IfxEvadc_RequestSource_queue2:
	jeq	d4,#2,.L32
.L639:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   205          gatingMode = evadcG->Q[2].QMR.B.ENGT;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   206  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   207          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   208      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   209  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   210      return (IfxEvadc_GatingMode)gatingMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   211  }
	ret
.L30:
	ld.bu	d15,[a4]260
.L640:
	j	.L34
.L31:
	ld.bu	d15,[a4]292
.L641:
	j	.L35
.L32:
	ld.bu	d15,[a4]324
.L34:
.L35:
	and	d2,d15,#3
	ret
.L365:
	
__IfxEvadc_getQueueSlotGatingMode_function_end:
	.size	IfxEvadc_getQueueSlotGatingMode,__IfxEvadc_getQueueSlotGatingMode_function_end-IfxEvadc_getQueueSlotGatingMode
.L223:
	; End of function
	
	.sdecl	'.text.IfxEvadc.IfxEvadc_getQueueSlotGatingSource',code,cluster('IfxEvadc_getQueueSlotGatingSource')
	.sect	'.text.IfxEvadc.IfxEvadc_getQueueSlotGatingSource'
	.align	2
	
	.global	IfxEvadc_getQueueSlotGatingSource

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   212  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   213  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   214  IfxEvadc_GatingSource IfxEvadc_getQueueSlotGatingSource(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType)
; Function IfxEvadc_getQueueSlotGatingSource
.L162:
IfxEvadc_getQueueSlotGatingSource:	.type	func

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   215  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   216      uint32 gateSource = 0;
	mov	d2,#0
.L532:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   217  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   218      switch (sourceType)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   219      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   220      case IfxEvadc_RequestSource_queue0:
	jeq	d4,#0,.L37
.L646:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   221          gateSource = evadcG->Q[0].QCTRL.B.GTSEL;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   222          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   223      case IfxEvadc_RequestSource_queue1:
	jeq	d4,#1,.L38
.L647:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   224          gateSource = evadcG->Q[1].QCTRL.B.GTSEL;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   225          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   226      case IfxEvadc_RequestSource_queue2:
	jeq	d4,#2,.L39
.L648:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   227          gateSource = evadcG->Q[2].QCTRL.B.GTSEL;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   228          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   229      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   230  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   231      return (IfxEvadc_GatingSource)gateSource;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   232  }
	ret
.L37:
	ld.bu	d15,[a4]258
.L649:
	j	.L41
.L38:
	ld.bu	d15,[a4]290
.L650:
	j	.L42
.L39:
	ld.bu	d15,[a4]322
.L41:
.L42:
	and	d2,d15,#15
	ret
.L371:
	
__IfxEvadc_getQueueSlotGatingSource_function_end:
	.size	IfxEvadc_getQueueSlotGatingSource,__IfxEvadc_getQueueSlotGatingSource_function_end-IfxEvadc_getQueueSlotGatingSource
.L228:
	; End of function
	
	.sdecl	'.text.IfxEvadc.IfxEvadc_getQueueSlotPriority',code,cluster('IfxEvadc_getQueueSlotPriority')
	.sect	'.text.IfxEvadc.IfxEvadc_getQueueSlotPriority'
	.align	2
	
	.global	IfxEvadc_getQueueSlotPriority

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   233  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   234  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   235  IfxEvadc_RequestSlotPriority IfxEvadc_getQueueSlotPriority(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType)
; Function IfxEvadc_getQueueSlotPriority
.L164:
IfxEvadc_getQueueSlotPriority:	.type	func

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   236  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   237      uint8 slotPriority = 0;
	mov	d2,#0
.L533:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   238  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   239      switch (sourceType)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   240      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   241      case IfxEvadc_RequestSource_queue0:
	jeq	d4,#0,.L44
.L655:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   242          slotPriority = evadcG->ARBPR.B.PRIO0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   243          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   244      case IfxEvadc_RequestSource_queue1:
	jeq	d4,#1,.L45
.L656:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   245          slotPriority = evadcG->ARBPR.B.PRIO1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   246          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   247      case IfxEvadc_RequestSource_queue2:
	jeq	d4,#2,.L46
.L657:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   248          slotPriority = evadcG->ARBPR.B.PRIO2;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   249          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   250      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   251  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   252      return (IfxEvadc_RequestSlotPriority)slotPriority;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   253  }
	ret
.L44:
	ld.bu	d15,[a4]132
.L658:
	j	.L48
.L45:
	ld.bu	d15,[a4]132
.L659:
	extr.u	d2,d15,#4,#2
	ret
.L46:
	ld.bu	d15,[a4]133
.L48:
	and	d2,d15,#3
	ret
.L376:
	
__IfxEvadc_getQueueSlotPriority_function_end:
	.size	IfxEvadc_getQueueSlotPriority,__IfxEvadc_getQueueSlotPriority_function_end-IfxEvadc_getQueueSlotPriority
.L233:
	; End of function
	
	.sdecl	'.text.IfxEvadc.IfxEvadc_getQueueSlotStartMode',code,cluster('IfxEvadc_getQueueSlotStartMode')
	.sect	'.text.IfxEvadc.IfxEvadc_getQueueSlotStartMode'
	.align	2
	
	.global	IfxEvadc_getQueueSlotStartMode

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   254  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   255  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   256  IfxEvadc_RequestSlotStartMode IfxEvadc_getQueueSlotStartMode(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType)
; Function IfxEvadc_getQueueSlotStartMode
.L166:
IfxEvadc_getQueueSlotStartMode:	.type	func

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   257  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   258      uint8 slotStartMode = 0;
	mov	d2,#0
.L534:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   259  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   260      switch (sourceType)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   261      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   262      case IfxEvadc_RequestSource_queue0:
	jeq	d4,#0,.L51
.L664:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   263          slotStartMode = evadcG->ARBPR.B.CSM0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   264          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   265      case IfxEvadc_RequestSource_queue1:
	jeq	d4,#1,.L52
.L665:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   266          slotStartMode = evadcG->ARBPR.B.CSM1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   267          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   268      case IfxEvadc_RequestSource_queue2:
	jeq	d4,#2,.L53
.L666:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   269          slotStartMode = evadcG->ARBPR.B.CSM2;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   270          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   271      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   272  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   273      return (IfxEvadc_RequestSlotStartMode)slotStartMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   274  }
	ret
.L51:
	ld.bu	d15,[a4]132
.L667:
	j	.L55
.L52:
	ld.bu	d15,[a4]132
.L668:
	extr.u	d2,d15,#7,#1
	ret
.L53:
	ld.bu	d15,[a4]133
.L55:
	extr.u	d2,d15,#3,#1
	ret
.L381:
	
__IfxEvadc_getQueueSlotStartMode_function_end:
	.size	IfxEvadc_getQueueSlotStartMode,__IfxEvadc_getQueueSlotStartMode_function_end-IfxEvadc_getQueueSlotStartMode
.L238:
	; End of function
	
	.sdecl	'.text.IfxEvadc.IfxEvadc_getQueueSlotTriggerInput',code,cluster('IfxEvadc_getQueueSlotTriggerInput')
	.sect	'.text.IfxEvadc.IfxEvadc_getQueueSlotTriggerInput'
	.align	2
	
	.global	IfxEvadc_getQueueSlotTriggerInput

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   275  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   276  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   277  IfxEvadc_TriggerSource IfxEvadc_getQueueSlotTriggerInput(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType)
; Function IfxEvadc_getQueueSlotTriggerInput
.L168:
IfxEvadc_getQueueSlotTriggerInput:	.type	func

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   278  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   279      uint32 triggerSource = 0;
	mov	d2,#0
.L535:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   280  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   281      switch (sourceType)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   282      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   283      case IfxEvadc_RequestSource_queue0:
	jeq	d4,#0,.L58
.L673:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   284          triggerSource = evadcG->Q[0].QCTRL.B.XTSEL;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   285          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   286      case IfxEvadc_RequestSource_queue1:
	jeq	d4,#1,.L59
.L674:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   287          triggerSource = evadcG->Q[1].QCTRL.B.XTSEL;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   288          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   289      case IfxEvadc_RequestSource_queue2:
	jeq	d4,#2,.L60
.L675:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   290          triggerSource = evadcG->Q[2].QCTRL.B.XTSEL;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   291  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   292          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   293      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   294  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   295      return (IfxEvadc_TriggerSource)triggerSource;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   296  }
	ret
.L58:
	ld.bu	d15,[a4]257
.L676:
	j	.L62
.L59:
	ld.bu	d15,[a4]289
.L677:
	j	.L63
.L60:
	ld.bu	d15,[a4]321
.L62:
.L63:
	and	d2,d15,#15
	ret
.L386:
	
__IfxEvadc_getQueueSlotTriggerInput_function_end:
	.size	IfxEvadc_getQueueSlotTriggerInput,__IfxEvadc_getQueueSlotTriggerInput_function_end-IfxEvadc_getQueueSlotTriggerInput
.L243:
	; End of function
	
	.sdecl	'.text.IfxEvadc.IfxEvadc_getQueueSlotTriggerMode',code,cluster('IfxEvadc_getQueueSlotTriggerMode')
	.sect	'.text.IfxEvadc.IfxEvadc_getQueueSlotTriggerMode'
	.align	2
	
	.global	IfxEvadc_getQueueSlotTriggerMode

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   297  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   298  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   299  IfxEvadc_TriggerMode IfxEvadc_getQueueSlotTriggerMode(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType)
; Function IfxEvadc_getQueueSlotTriggerMode
.L170:
IfxEvadc_getQueueSlotTriggerMode:	.type	func

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   300  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   301      uint8 triggerMode = 0;
	mov	d2,#0
.L536:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   302  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   303      switch (sourceType)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   304      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   305      case IfxEvadc_RequestSource_queue0:
	jeq	d4,#0,.L65
.L682:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   306          triggerMode = evadcG->Q[0].QCTRL.B.XTMODE;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   307          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   308      case IfxEvadc_RequestSource_queue1:
	jeq	d4,#1,.L66
.L683:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   309          triggerMode = evadcG->Q[1].QCTRL.B.XTMODE;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   310          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   311      case IfxEvadc_RequestSource_queue2:
	jeq	d4,#2,.L67
.L684:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   312          triggerMode = evadcG->Q[2].QCTRL.B.XTMODE;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   313  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   314          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   315      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   316  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   317      return (IfxEvadc_TriggerMode)triggerMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   318  }
	ret
.L65:
	ld.bu	d15,[a4]257
.L685:
	j	.L69
.L66:
	ld.bu	d15,[a4]289
.L686:
	j	.L70
.L67:
	ld.bu	d15,[a4]321
.L69:
.L70:
	extr.u	d2,d15,#5,#2
	ret
.L391:
	
__IfxEvadc_getQueueSlotTriggerMode_function_end:
	.size	IfxEvadc_getQueueSlotTriggerMode,__IfxEvadc_getQueueSlotTriggerMode_function_end-IfxEvadc_getQueueSlotTriggerMode
.L248:
	; End of function
	
	.sdecl	'.text.IfxEvadc.IfxEvadc_getQueueStatus',code,cluster('IfxEvadc_getQueueStatus')
	.sect	'.text.IfxEvadc.IfxEvadc_getQueueStatus'
	.align	2
	
	.global	IfxEvadc_getQueueStatus

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   319  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   320  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   321  IfxEvadc_Status IfxEvadc_getQueueStatus(Ifx_EVADC_G *group, IfxEvadc_RequestSource sourceType)
; Function IfxEvadc_getQueueStatus
.L172:
IfxEvadc_getQueueStatus:	.type	func

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   322  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   323      IfxEvadc_Status status = IfxEvadc_Status_noError;
	mov	d2,#0
.L537:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   324  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   325      switch (sourceType)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   326      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   327      case IfxEvadc_RequestSource_queue0:
	jeq	d4,#0,.L72
.L691:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   328  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   329          /* just fill level is checked */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   330          if (0x7 == group->Q[0].QSR.B.FILL)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   331          {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   332              status = IfxEvadc_Status_queueFull;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   333          }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   334          else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   335          {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   336              status = IfxEvadc_Status_noError;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   337          }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   338  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   339          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   340  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   341      case IfxEvadc_RequestSource_queue1:
	jeq	d4,#1,.L73
.L692:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   342  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   343          if (0x7 == group->Q[1].QSR.B.FILL)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   344          {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   345              status = IfxEvadc_Status_queueFull;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   346          }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   347          else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   348          {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   349              status = IfxEvadc_Status_noError;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   350          }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   351  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   352          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   353  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   354      case IfxEvadc_RequestSource_queue2:
	jeq	d4,#2,.L74
.L693:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   355  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   356          if (0x7 == group->Q[2].QSR.B.FILL)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   357          {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   358              status = IfxEvadc_Status_queueFull;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   359          }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   360          else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   361          {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   362              status = IfxEvadc_Status_noError;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   363          }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   364  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   365          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   366      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   367  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   368      return status;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   369  }
	ret
.L72:
	ld.bu	d15,[a4]264
	and	d15,#15
.L694:
	jne	d15,#7,.L76
.L695:
	j	.L77
.L73:
	ld.bu	d15,[a4]296
	and	d15,#15
.L696:
	jne	d15,#7,.L78
.L77:
	mov	d2,#4
	ret
.L78:
.L76:
	ret
.L74:
	ld.bu	d15,[a4]328
	and	d15,#15
.L697:
	eq	d15,d15,#7
.L698:
	sha	d2,d15,#2
	ret
.L396:
	
__IfxEvadc_getQueueStatus_function_end:
	.size	IfxEvadc_getQueueStatus,__IfxEvadc_getQueueStatus_function_end-IfxEvadc_getQueueStatus
.L253:
	; End of function
	
	.sdecl	'.text.IfxEvadc.IfxEvadc_getResultBasedOnRequestSource',code,cluster('IfxEvadc_getResultBasedOnRequestSource')
	.sect	'.text.IfxEvadc.IfxEvadc_getResultBasedOnRequestSource'
	.align	2
	
	.global	IfxEvadc_getResultBasedOnRequestSource

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   370  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   371  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   372  Ifx_EVADC_G_RES IfxEvadc_getResultBasedOnRequestSource(Ifx_EVADC *evadc, Ifx_EVADC_G *group, IfxEvadc_ChannelId channel, IfxEvadc_RequestSource sourceType)
; Function IfxEvadc_getResultBasedOnRequestSource
.L174:
IfxEvadc_getResultBasedOnRequestSource:	.type	func

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   373  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   374      sint32          sourceResultRegister = -1;
	mov	d15,#-1
.L538:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   375      Ifx_EVADC_G_RES tmpResult;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   376  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   377      switch (sourceType)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   378      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   379      case IfxEvadc_RequestSource_queue0:
	jeq	d5,#0,.L82
.L588:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   380          sourceResultRegister = group->Q[0].QCTRL.B.SRCRESREG;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   381          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   382  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   383      case IfxEvadc_RequestSource_queue1:
	jeq	d5,#1,.L83
.L589:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   384          sourceResultRegister = group->Q[1].QCTRL.B.SRCRESREG;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   385          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   386  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   387      case IfxEvadc_RequestSource_queue2:
	jeq	d5,#2,.L84
.L590:
	j	.L85
.L82:
	ld.bu	d15,[a5]256
.L539:
	j	.L86
.L83:
	ld.bu	d15,[a5]288
.L540:
	j	.L87
.L84:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   388          sourceResultRegister = group->Q[2].QCTRL.B.SRCRESREG;
	ld.bu	d15,[a5]320

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   389          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   390      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   391  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   392      if (sourceResultRegister > 0)
.L86:
.L87:
	and	d15,#15
.L85:
	jge	d15,#1,.L89
.L591:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   393      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   394          tmpResult.U = group->RES[sourceResultRegister].U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   395  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   396          return tmpResult;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   397      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   398      else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   399      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   400          if ((group->CHCTR[channel].B.RESTGT == 1))
	addsc.a	a15,a5,d4,#2
.L592:
	lea	a15,[a15]514
	ld.bu	d15,[a15]
.L541:
	jz.t	d15:4,.L90
.L593:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   401          {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   402              tmpResult.B.VF     = evadc->GLOB.RES.B.VF;
	ld.bu	d15,[a4]771
	extr.u	d15,d15,#7,#1
.L542:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   403              tmpResult.B.CRS    = evadc->GLOB.RES.B.CRS;
	insert	d2,d2,d15,#31,#1
	ld.bu	d15,[a4]771
	extr.u	d15,d15,#4,#2
.L594:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   404              tmpResult.B.EMUX   = evadc->GLOB.RES.B.EMUX;
	insert	d2,d2,d15,#28,#2
	ld.bu	d15,[a4]771
	extr.u	d15,d15,#1,#3
.L595:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   405              tmpResult.B.CHNR   = evadc->GLOB.RES.B.CHNR;
	insert	d2,d2,d15,#25,#3
	ld.hu	d15,[a4]770
	extr.u	d15,d15,#4,#5
.L596:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   406              tmpResult.B.DRC    = evadc->GLOB.RES.B.GNR;
	insert	d2,d2,d15,#20,#5
	ld.bu	d15,[a4]770
	and	d15,#15
.L597:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   407              tmpResult.B.RESULT = evadc->GLOB.RES.B.RESULT;
	insert	d2,d2,d15,#16,#4
	ld.hu	d15,[a4]768
.L598:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   408  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   409              return tmpResult;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   410          }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   411          else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   412          {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   413              tmpResult.U = group->RES[group->CHCTR[channel].B.RESREG].U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   414  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   415              return tmpResult;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   416          }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   417      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   418  }
	insert	d2,d2,d15,#0,#16
	ret
.L90:
	ld.bu	d15,[a15]
	and	d15,#15
.L89:
	addsc.a	a15,a5,d15,#2
.L599:
	ld.w	d2,[a15]768
.L543:
	ret
.L340:
	
__IfxEvadc_getResultBasedOnRequestSource_function_end:
	.size	IfxEvadc_getResultBasedOnRequestSource,__IfxEvadc_getResultBasedOnRequestSource_function_end-IfxEvadc_getResultBasedOnRequestSource
.L203:
	; End of function
	
	.sdecl	'.text.IfxEvadc.IfxEvadc_initializeFAdcI',code,cluster('IfxEvadc_initializeFAdcI')
	.sect	'.text.IfxEvadc.IfxEvadc_initializeFAdcI'
	.align	2
	
	.global	IfxEvadc_initializeFAdcI

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   419  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   420  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   421  uint32 IfxEvadc_initializeFAdcI(Ifx_EVADC *evadc, uint32 fAdcI, Ifx_EVADC_G *group)
; Function IfxEvadc_initializeFAdcI
.L176:
IfxEvadc_initializeFAdcI:	.type	func
	mov	d15,d4
	mov.aa	a15,a5
.L450:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     2   * \file IfxScuCcu.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    42   * \defgroup IfxLld_Scu SCU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    43   * \addtogroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    44   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    45   * \defgroup IfxLld_ScuCcu How to use the Scu Clock driver?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    46   * \addtogroup IfxLld_ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    47   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    48   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    49   * The Scu Clock control unit driver provides a default configuration for pll and Clock initialisation and set of peripheral clock configuration functions.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    51   * In the following sections it will be described, how to integrate the driver into the application framework.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    52   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    53   * \section IfxLld_ScuCcu_Std_Preparation Preparation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    54   * \subsection IfxLld_ScuCcu_Std_Include Include Files
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    55   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    56   * Include following header file into your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    57   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    58   * #include <Scu/Std/IfxScuCcu.h>
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    59   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    60   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    61   * \subsection IfxLld_ScuCcu_Std_Variables Variables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    62   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    63   * Declare the Clock Configuration variables in your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    64   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    65   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    66   * // used globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    67   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    68   * // configuration for the PLL  steps
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    69   * static IfxScuCcu_PllStepsConfig IfxScuCcu_testPllConfigSteps[] = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    70   *     IFXSCU_CFG_PLL_STEPS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    71   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    72   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    73   * static const IfxScuCcu_FlashWaitstateConfig IfxScuCcu_defaultFlashWaitstateConfig = IFXSCU_CFG_FLASH_WAITSTATE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    74   * // Default configuration for the Clock Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    75   * IfxScuCcu_Config                      IfxScuCcu_testClockConfig = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    76   *     // IfxScuCcu_InitialStepConfig: Configuration of first step which is same as internal osc frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    77   *     IFXSCU_CFG_PLL_INITIAL_STEP,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    78   *     //IfxScuCcu_PllThrottleConfig: Configuration of PLL throttling.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    79   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    80   *         sizeof(IfxScuCcu_defaultPllConfigSteps) / sizeof(IfxScuCcu_PllStepConfig),
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    81   *         IfxScuCcu_defaultPllConfigSteps
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    82   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    83   *     IFXSCU_CFG_CLK_DISTRIBUTION,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    84   *     &IfxScuCcu_defaultFlashWaitstateConfig,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    85   *     &IfxScuCcu_defaultModConfig
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    86   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    87   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    88   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    89   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    90   * \subsection IfxLld_ScuCcu_Std_Init Module Initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    91   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    92   * The module initialisation can be done in the same function. Here an example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    93   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    94   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    95   *        // standard PLL & clock initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    96   *         IfxScuCcu_init(&IfxScuCcu_testClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    97   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    99   *    The SYS PLL, PER PLL1 , PLL2 and clocks are now initialised based on the XTAL and PLL values configured in Ifx_Cfg.h and are ready for use now!
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   100   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   101   * Alternately the PLL and clocks can be initialised using below method which provides greater control on the configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   102   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   103   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   104   * static const IfxScuCcu_PllStepConfig IfxScuCcu_defaultPllConfigSteps[] = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   105   *     {                   //Step 0 Config: 150MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   106   *         (4 - 1),        //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   107   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   108   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   109   *     {                   //Step 1 Config: 200MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   110   *         (3 - 1),       //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   111   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   112   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   113   *     {                   //Step 2 Config: 300MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   114   *         (2 - 1),        //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   115   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   116   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   117   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   118   *     IfxScuCcu_Config        IfxScuCcu_sampleClockConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   119   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   120   *     IfxScuCcu_initConfig(&IfxScuCcu_sampleClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   121   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   122   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   123   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   124   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.pllInputClockSelection = IfxScuCcu_PllInputClockSelection_fOsc0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   126   *     //SYS PLL = 300Mhz, XTAL = 20Mhz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   127   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.k2Divider = IfxScuCcu_K2divider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   128   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.nDivider = IfxScuCcu_Ndivider_60;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   129   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.pDivider = IfxScuCcu_Pdivider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   130   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.waitTime = 0.000200F;  // wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   131   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   132   *     IfxScuCcu_sampleClockConfig.sysPllThrottleConfig.numOfSteps = sizeof(IfxScuCcu_defaultPllConfigSteps) / sizeof(IfxScuCcu_PllStepConfig); //  step clock incr
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   133   *     IfxScuCcu_sampleClockConfig.sysPllThrottleConfig.pllSteps = IfxScuCcu_defaultPllConfigSteps;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   135   *     // PER PLL1 = 240Mhz, PERPLL2 = 50Mhz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   136   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k2Divider = IfxScuCcu_K2divider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   137   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k3Divider = IfxScuCcu_K3divider_6;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   138   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k3DividerBypass = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   139   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.nDivider = IfxScuCcu_Ndivider_24;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   140   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.pDivider = IfxScuCcu_Pdivider_1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   142   *     // update CCUCON Config use mask and value as below
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   143   *     IfxScuCcu_sampleClockConfig.clockDistribution.ccucon0.mask =IFXSCU_CFG_CCUCON0_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   144   *     IfxScuCcu_sampleClockConfig.clockDistribution.ccucon0.value = IFXSCU_CFG_CCUCON0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   146   *     // standard PLL & clock initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   147   *     IfxScuCcu_init(&IfxScuCcu_sampleClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   149   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   150   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   151   * ** Modulation Configuration **
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   152   * The SCU CCU module also provides an option to Frequency Modulate the clock.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   153   * The Modulation configuration can be done as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   154   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   155   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   156   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   157   * //define your modulation configuration structure:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   158   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   159   *  IFX_CONST IfxScuCcu_Mod_Config IfxScuCcu_SampleModConfig = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   160   *          IfxScuCcu_ModEn_disabled,          // disable is default //enable / disable modulation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   161   *          IfxScuCcu_ModulationAmplitude_0p5, // default 0 value  // specify the modulation amplitude %
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   162   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   163   *  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   164   *  // put this as part of the CCU configuration:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   165   *  IfxScuCcu_sampleClockConfig.modulationConfig = &IfxScuCcu_SampleModConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   166   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   167   *  // now initalize the CCU PLL and clock with the init function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   168   *  IfxScuCcu_init(&IfxScuCcu_sampleClockConfig)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   169   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   171   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   172   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   173   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   174   * \defgroup IfxLld_Scu_Std_Ccu Ccu Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   175   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   176   * \defgroup IfxLld_Scu_Std_Ccu_Ccu Clock Control Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   177   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   178   * \defgroup IfxLld_Scu_Std_Ccu_Ccu_Operative Clock Control Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   179   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   180   * \defgroup IfxLld_Scu_Std_Ccu_Ccu_Configuration Clock Control Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   181   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   182   * \defgroup IfxLld_Scu_Std_Ccu_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   183   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   185  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   186  #ifndef IFXSCUCCU_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   187  #define IFXSCUCCU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   188  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   189  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   190  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   191  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   193  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   194  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   195  #include "Cpu/Std/IfxCpu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   196  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   197  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   198  #include "_PinMap/IfxScu_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   199  #include "IfxSmu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   200  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   201  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   202  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   203  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   205  /** \brief Oscillator stability check timeout count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   207  #ifndef IFXSCUCCU_OSC_STABLECHK_TIME
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   208  #define IFXSCUCCU_OSC_STABLECHK_TIME               (640)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   209  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   210  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   211  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   213  #define IFXSCUCCU_SMUALARM_MASK                    (0x1DU)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   215  /** \brief ~40uS max wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   216   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   217  #ifndef IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   218  #define IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT     (0x1000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   219  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   221  /** \brief ~122uS max wait time for PLL locking
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   223  #define IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT           (0x3000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   224  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   225  /** \brief ~122uS max wait time for PLL power down/up state update
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   227  #define IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT (0x3000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   229  /** \brief ~244uS max wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   230   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   231  #define IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT           (0x6000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   233  /** \brief 3mS max wait time for PLL power down/up state update
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   235  #define IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT (0x493E0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   237  #define IFXSCUCCU_LOOP_TIMEOUT_CHECK(tVar, tErr) \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   238      {                                            \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   239          if (((sint32)--tVar) <= 0)               \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   240          {                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   241              tErr = (uint8)1;                     \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   242              break;                               \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   243          }                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   244          else                                     \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   245          {                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   246          }                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   247      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   248  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   249  /** \brief Modulation frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   250   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   251  #define IFXSCUCCU_MODULATION_FREQ_HZ               (3600000)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   253  /** \brief MODCFG shift value for SYSPLLCON2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   255  #define IFXSCUCCU_MODCFG_DEFAULT_SHIFT             (10)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   257  /** \brief MODCFG default value - for SYSPLLCON2[15:10]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   259  #define IFXSCUCCU_MODCFG_DEFAULT_VAL               ((uint32)0x3D)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   261  /** \brief get Rgain from MA and FDco
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   263  #define IFXSCUCCU_GET_RGAIN_NOM(MA, FDco)  ((2 * (MA / 100) * (FDco / IFXSCUCCU_MODULATION_FREQ_HZ)))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   265  /** \brief Get RGAin HEX from RGain Nominal value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   266   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   267  #define IFXSCUCCU_GET_RGAIN_HEX(RGain_Nom) ((uint16)((RGain_Nom * 32) + 0.5))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   269  /** \brief Get MODCFG from RGAIN_HEX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   271  #define IFXSCUCCU_GET_MODCFG(RGain_Hex)    ((uint16)(IFXSCUCCU_MODCFG_DEFAULT_VAL << IFXSCUCCU_MODCFG_DEFAULT_SHIFT) | (uint16)(RGain_Hex))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   273  /** \brief Define to include the flash wait state check in ScuCcu_init()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   275  #define IFXSCUCCU_FLASHWAITSTATECHECK (0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   277  /** \brief 10 microsecond wait time between steps to jump back to normal mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   278   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   279  #ifndef IFXSCUCCU_LPTONORMAL_WAITTIME
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   280  #define IFXSCUCCU_LPTONORMAL_WAITTIME (0.00001f)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   281  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   283  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   284  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   285  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   287  /** \brief Function pointer type for the hooks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   288   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   290  typedef void (*IfxScuCcu_PllStepsFunctionHook)(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   292  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   293  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   294  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   295  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   296  /** \addtogroup IfxLld_Scu_Std_Ccu_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   297   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   298  /** \brief clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   299   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   300  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   301  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   302      IfxScuCcu_Fsource_0 = 0,      /**< \brief fSource0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   303      IfxScuCcu_Fsource_1,          /**< \brief fSource1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   304      IfxScuCcu_Fsource_2           /**< \brief fSource2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   305  } IfxScuCcu_Fsource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   307  /** \brief MODULE_SCU.PLLCON1.B.K2DIV, specifies the K2-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   308   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   309  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   310  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   311      IfxScuCcu_K2divider_1 = 0,      /**< \brief K2-Divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   312      IfxScuCcu_K2divider_2,          /**< \brief K2-Divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   313      IfxScuCcu_K2divider_3,          /**< \brief K2-Divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   314      IfxScuCcu_K2divider_4,          /**< \brief K2-Divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   315      IfxScuCcu_K2divider_5,          /**< \brief K2-Divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   316      IfxScuCcu_K2divider_6,          /**< \brief K2-Divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   317      IfxScuCcu_K2divider_7,          /**< \brief K2-Divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   318      IfxScuCcu_K2divider_8           /**< \brief K2-Divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   319  } IfxScuCcu_K2divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   321  /** \brief MODULE_SCU.PLLCON1.B.K3DIV, specifies the K3-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   322   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   323  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   324  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   325      IfxScuCcu_K3divider_1 = 0,      /**< \brief K3-Divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   326      IfxScuCcu_K3divider_2,          /**< \brief K3-Divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   327      IfxScuCcu_K3divider_3,          /**< \brief K3-Divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   328      IfxScuCcu_K3divider_4,          /**< \brief K3-Divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   329      IfxScuCcu_K3divider_5,          /**< \brief K3-Divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   330      IfxScuCcu_K3divider_6,          /**< \brief K3-Divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   331      IfxScuCcu_K3divider_7,          /**< \brief K3-Divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   332      IfxScuCcu_K3divider_8           /**< \brief K3-Divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   333  } IfxScuCcu_K3divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   334  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   335  /** \brief Low Power Division Ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   336   * Corresponds to values of LPDIV in CCUCON0.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   337   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   338  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   339  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   340      IfxScuCcu_LowPowerDivRatio_divBy30 = 1,  /**< \brief Divide by 30 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   341      IfxScuCcu_LowPowerDivRatio_divBy60,      /**< \brief Divide by 60 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   342      IfxScuCcu_LowPowerDivRatio_divBy120,     /**< \brief Divide by 120 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   343      IfxScuCcu_LowPowerDivRatio_divBy240      /**< \brief Divide by 240 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   344  } IfxScuCcu_LowPowerDivRatio;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   346  /** \brief ENUM for MA (%) values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   347   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   348  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   349  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   350      IfxScuCcu_ModulationAmplitude_0p5 = 0,      /**< \brief 0.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   351      IfxScuCcu_ModulationAmplitude_1p0,          /**< \brief 1.0%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   352      IfxScuCcu_ModulationAmplitude_1p25,         /**< \brief 1.25%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   353      IfxScuCcu_ModulationAmplitude_1p5,          /**< \brief 1.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   354      IfxScuCcu_ModulationAmplitude_2p0,          /**< \brief 2%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   355      IfxScuCcu_ModulationAmplitude_2p5,          /**< \brief 2.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   356      IfxScuCcu_ModulationAmplitude_count,        /**< \brief range  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   357  } IfxScuCcu_ModulationAmplitude;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   358  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   359  /** \brief MODULE_SCU.PLLCON0.B.NDIV, specifies the N-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   361  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   362  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   363      IfxScuCcu_Ndivider_1 = 0,      /**< \brief  N-divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   364      IfxScuCcu_Ndivider_2,          /**< \brief  N-divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   365      IfxScuCcu_Ndivider_3,          /**< \brief  N-divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   366      IfxScuCcu_Ndivider_4,          /**< \brief  N-divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   367      IfxScuCcu_Ndivider_5,          /**< \brief  N-divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   368      IfxScuCcu_Ndivider_6,          /**< \brief  N-divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   369      IfxScuCcu_Ndivider_7,          /**< \brief  N-divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   370      IfxScuCcu_Ndivider_8,          /**< \brief  N-divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   371      IfxScuCcu_Ndivider_9,          /**< \brief  N-divider 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   372      IfxScuCcu_Ndivider_10,         /**< \brief  N-divider 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   373      IfxScuCcu_Ndivider_11,         /**< \brief  N-divider 11  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   374      IfxScuCcu_Ndivider_12,         /**< \brief  N-divider 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   375      IfxScuCcu_Ndivider_13,         /**< \brief  N-divider 13  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   376      IfxScuCcu_Ndivider_14,         /**< \brief  N-divider 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   377      IfxScuCcu_Ndivider_15,         /**< \brief  N-divider 15  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   378      IfxScuCcu_Ndivider_16,         /**< \brief  N-divider 16  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   379      IfxScuCcu_Ndivider_17,         /**< \brief  N-divider 17  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   380      IfxScuCcu_Ndivider_18,         /**< \brief  N-divider 18  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   381      IfxScuCcu_Ndivider_19,         /**< \brief  N-divider 19  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   382      IfxScuCcu_Ndivider_20,         /**< \brief  N-divider 20  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   383      IfxScuCcu_Ndivider_21,         /**< \brief  N-divider 21  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   384      IfxScuCcu_Ndivider_22,         /**< \brief  N-divider 22  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   385      IfxScuCcu_Ndivider_23,         /**< \brief  N-divider 23  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   386      IfxScuCcu_Ndivider_24,         /**< \brief  N-divider 24  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   387      IfxScuCcu_Ndivider_25,         /**< \brief  N-divider 25  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   388      IfxScuCcu_Ndivider_26,         /**< \brief  N-divider 26  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   389      IfxScuCcu_Ndivider_27,         /**< \brief  N-divider 27  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   390      IfxScuCcu_Ndivider_28,         /**< \brief  N-divider 28  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   391      IfxScuCcu_Ndivider_29,         /**< \brief  N-divider 29  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   392      IfxScuCcu_Ndivider_30,         /**< \brief  N-divider 30  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   393      IfxScuCcu_Ndivider_31,         /**< \brief  N-divider 31  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   394      IfxScuCcu_Ndivider_32,         /**< \brief  N-divider 32  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   395      IfxScuCcu_Ndivider_33,         /**< \brief  N-divider 33  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   396      IfxScuCcu_Ndivider_34,         /**< \brief  N-divider 34  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   397      IfxScuCcu_Ndivider_35,         /**< \brief  N-divider 35  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   398      IfxScuCcu_Ndivider_36,         /**< \brief  N-divider 36  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   399      IfxScuCcu_Ndivider_37,         /**< \brief  N-divider 37  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   400      IfxScuCcu_Ndivider_38,         /**< \brief  N-divider 38  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   401      IfxScuCcu_Ndivider_39,         /**< \brief  N-divider 39  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   402      IfxScuCcu_Ndivider_40,         /**< \brief  N-divider 40  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   403      IfxScuCcu_Ndivider_41,         /**< \brief  N-divider 41  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   404      IfxScuCcu_Ndivider_42,         /**< \brief  N-divider 42  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   405      IfxScuCcu_Ndivider_43,         /**< \brief  N-divider 43  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   406      IfxScuCcu_Ndivider_44,         /**< \brief  N-divider 44  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   407      IfxScuCcu_Ndivider_45,         /**< \brief  N-divider 45  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   408      IfxScuCcu_Ndivider_46,         /**< \brief  N-divider 46  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   409      IfxScuCcu_Ndivider_47,         /**< \brief  N-divider 47  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   410      IfxScuCcu_Ndivider_48,         /**< \brief  N-divider 48  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   411      IfxScuCcu_Ndivider_49,         /**< \brief  N-divider 49  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   412      IfxScuCcu_Ndivider_50,         /**< \brief  N-divider 50  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   413      IfxScuCcu_Ndivider_51,         /**< \brief  N-divider 51  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   414      IfxScuCcu_Ndivider_52,         /**< \brief  N-divider 52  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   415      IfxScuCcu_Ndivider_53,         /**< \brief  N-divider 53  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   416      IfxScuCcu_Ndivider_54,         /**< \brief  N-divider 54  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   417      IfxScuCcu_Ndivider_55,         /**< \brief  N-divider 55  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   418      IfxScuCcu_Ndivider_56,         /**< \brief  N-divider 56  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   419      IfxScuCcu_Ndivider_57,         /**< \brief  N-divider 57  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   420      IfxScuCcu_Ndivider_58,         /**< \brief  N-divider 58  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   421      IfxScuCcu_Ndivider_59,         /**< \brief  N-divider 59  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   422      IfxScuCcu_Ndivider_60,         /**< \brief  N-divider 60  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   423      IfxScuCcu_Ndivider_61,         /**< \brief  N-divider 61  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   424      IfxScuCcu_Ndivider_62,         /**< \brief  N-divider 62  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   425      IfxScuCcu_Ndivider_63,         /**< \brief  N-divider 63  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   426      IfxScuCcu_Ndivider_64,         /**< \brief  N-divider 64  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   427      IfxScuCcu_Ndivider_65,         /**< \brief  N-divider 65  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   428      IfxScuCcu_Ndivider_66,         /**< \brief  N-divider 66  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   429      IfxScuCcu_Ndivider_67,         /**< \brief  N-divider 67  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   430      IfxScuCcu_Ndivider_68,         /**< \brief  N-divider 68  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   431      IfxScuCcu_Ndivider_69,         /**< \brief  N-divider 69  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   432      IfxScuCcu_Ndivider_70,         /**< \brief  N-divider 70  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   433      IfxScuCcu_Ndivider_71,         /**< \brief  N-divider 71  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   434      IfxScuCcu_Ndivider_72,         /**< \brief  N-divider 72  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   435      IfxScuCcu_Ndivider_73,         /**< \brief  N-divider 73  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   436      IfxScuCcu_Ndivider_74,         /**< \brief  N-divider 74  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   437      IfxScuCcu_Ndivider_75,         /**< \brief  N-divider 75  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   438      IfxScuCcu_Ndivider_76,         /**< \brief  N-divider 76  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   439      IfxScuCcu_Ndivider_77,         /**< \brief  N-divider 77  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   440      IfxScuCcu_Ndivider_78,         /**< \brief  N-divider 78  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   441      IfxScuCcu_Ndivider_79,         /**< \brief  N-divider 79  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   442      IfxScuCcu_Ndivider_80,         /**< \brief  N-divider 80  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   443      IfxScuCcu_Ndivider_81,         /**< \brief  N-divider 81  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   444      IfxScuCcu_Ndivider_82,         /**< \brief  N-divider 82  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   445      IfxScuCcu_Ndivider_83,         /**< \brief  N-divider 83  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   446      IfxScuCcu_Ndivider_84,         /**< \brief  N-divider 84  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   447      IfxScuCcu_Ndivider_85,         /**< \brief  N-divider 85  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   448      IfxScuCcu_Ndivider_86,         /**< \brief  N-divider 86  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   449      IfxScuCcu_Ndivider_87,         /**< \brief  N-divider 87  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   450      IfxScuCcu_Ndivider_88,         /**< \brief  N-divider 88  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   451      IfxScuCcu_Ndivider_89,         /**< \brief  N-divider 89  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   452      IfxScuCcu_Ndivider_90,         /**< \brief  N-divider 90  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   453      IfxScuCcu_Ndivider_91,         /**< \brief  N-divider 91  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   454      IfxScuCcu_Ndivider_92,         /**< \brief  N-divider 92  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   455      IfxScuCcu_Ndivider_93,         /**< \brief  N-divider 93  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   456      IfxScuCcu_Ndivider_94,         /**< \brief  N-divider 94  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   457      IfxScuCcu_Ndivider_95,         /**< \brief  N-divider 95  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   458      IfxScuCcu_Ndivider_96,         /**< \brief  N-divider 96  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   459      IfxScuCcu_Ndivider_97,         /**< \brief  N-divider 97  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   460      IfxScuCcu_Ndivider_98,         /**< \brief  N-divider 98  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   461      IfxScuCcu_Ndivider_99,         /**< \brief  N-divider 99  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   462      IfxScuCcu_Ndivider_100,        /**< \brief  N-divider 100  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   463      IfxScuCcu_Ndivider_101,        /**< \brief  N-divider 101  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   464      IfxScuCcu_Ndivider_102,        /**< \brief  N-divider 102  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   465      IfxScuCcu_Ndivider_103,        /**< \brief  N-divider 103  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   466      IfxScuCcu_Ndivider_104,        /**< \brief  N-divider 104  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   467      IfxScuCcu_Ndivider_105,        /**< \brief  N-divider 105  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   468      IfxScuCcu_Ndivider_106,        /**< \brief  N-divider 106  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   469      IfxScuCcu_Ndivider_107,        /**< \brief  N-divider 107  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   470      IfxScuCcu_Ndivider_108,        /**< \brief  N-divider 108  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   471      IfxScuCcu_Ndivider_109,        /**< \brief  N-divider 109  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   472      IfxScuCcu_Ndivider_110,        /**< \brief  N-divider 110  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   473      IfxScuCcu_Ndivider_111,        /**< \brief  N-divider 111  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   474      IfxScuCcu_Ndivider_112,        /**< \brief  N-divider 112  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   475      IfxScuCcu_Ndivider_113,        /**< \brief  N-divider 113  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   476      IfxScuCcu_Ndivider_114,        /**< \brief  N-divider 114  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   477      IfxScuCcu_Ndivider_115,        /**< \brief  N-divider 115  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   478      IfxScuCcu_Ndivider_116,        /**< \brief  N-divider 116  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   479      IfxScuCcu_Ndivider_117,        /**< \brief  N-divider 117  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   480      IfxScuCcu_Ndivider_118,        /**< \brief  N-divider 118  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   481      IfxScuCcu_Ndivider_119,        /**< \brief  N-divider 119  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   482      IfxScuCcu_Ndivider_120,        /**< \brief  N-divider 120  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   483      IfxScuCcu_Ndivider_121,        /**< \brief  N-divider 121  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   484      IfxScuCcu_Ndivider_122,        /**< \brief  N-divider 122  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   485      IfxScuCcu_Ndivider_123,        /**< \brief  N-divider 123  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   486      IfxScuCcu_Ndivider_124,        /**< \brief  N-divider 124  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   487      IfxScuCcu_Ndivider_125,        /**< \brief  N-divider 125  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   488      IfxScuCcu_Ndivider_126,        /**< \brief  N-divider 126  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   489      IfxScuCcu_Ndivider_127,        /**< \brief  N-divider 127  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   490      IfxScuCcu_Ndivider_128         /**< \brief  N-divider 128  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   491  } IfxScuCcu_Ndivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   492  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   493  /** \brief MODULE_SCU.PLLCON0.B.PDIV, specifies the P-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   495  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   496  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   497      IfxScuCcu_Pdivider_1 = 0,      /**< \brief  P-divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   498      IfxScuCcu_Pdivider_2,          /**< \brief  P-divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   499      IfxScuCcu_Pdivider_3,          /**< \brief  P-divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   500      IfxScuCcu_Pdivider_4,          /**< \brief  P-divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   501      IfxScuCcu_Pdivider_5,          /**< \brief  P-divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   502      IfxScuCcu_Pdivider_6,          /**< \brief  P-divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   503      IfxScuCcu_Pdivider_7,          /**< \brief  P-divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   504      IfxScuCcu_Pdivider_8           /**< \brief  P-divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   505  } IfxScuCcu_Pdivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   506  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   507  /** \brief SysPll & Per Pll input clock selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   508   * SYSPLLCON0.B.INSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   509   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   510  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   511  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   512      IfxScuCcu_PllInputClockSelection_fOsc1   = 0, /**< \brief Backup clock select */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   513      IfxScuCcu_PllInputClockSelection_fOsc0   = 1, /**< \brief fOsc0 or XTAL clock select */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   514      IfxScuCcu_PllInputClockSelection_fSysclk = 2  /**< \brief fOsc1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   515  } IfxScuCcu_PllInputClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   516  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   517  /** \brief trap request type
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   518   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   519  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   520  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   521      IfxScuCcu_Traprequest_esr0 = 0,  /**< \brief external service request 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   522      IfxScuCcu_Traprequest_esr1,      /**< \brief external service request 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   523      IfxScuCcu_Traprequest_trap2,     /**< \brief trap2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   524      IfxScuCcu_Traprequest_smu        /**< \brief safety management unit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   525  } IfxScuCcu_Traprequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   526  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   527  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   528  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   529  /** \brief modulation enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   530   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   531  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   532  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   533      IfxScuCcu_ModEn_disabled = 0,  /**< \brief disable modulation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   534      IfxScuCcu_ModEn_enabled  = 1   /**< \brief enable modulation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   535  } IfxScuCcu_ModEn;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   537  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   538  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   539  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   541  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   542   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   543  /** \brief Configuration structure type for the Per Pll step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   544   * This structure must be used to configure the P, N and K2, K3 dividers .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   545   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   546  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   547  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   548      uint8 pDivider;              /**< \brief P divider value for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   549      uint8 nDivider;              /**< \brief N divider value for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   550      uint8 k2Divider;             /**< \brief K2 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   551      uint8 k3Divider;             /**< \brief K3 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   552      uint8 k3DividerBypass;       /**< \brief Divider Bypass
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   553                                    * 0 - The divide by block in front of the K3-Divider is not bypassed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   554                                    * 1-  The divide by block in front of the K3-Divider is bypassed. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   555  } IfxScuCcu_PerPllConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   556  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   557  /** \brief Configuration structure type for the Pll initial step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   558   * This structure must be used to configure the P, N and K2 dividers for initial step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   559   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   560  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   561  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   562      uint8 pDivider;        /**< \brief P divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   563      uint8 nDivider;        /**< \brief N divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   564      uint8 k2Divider;       /**< \brief K2 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   565  } IfxScuCcu_SysPllConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   567  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   568  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   569  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   570   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   571  /** \brief Configuration structure type for CCUCON registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   573  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   574  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   575      uint32 value;       /**< \brief CCUCON Register value to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   576      uint32 mask;        /**< \brief CCUCON Mask to select the bit fields to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   577  } IfxScuCcu_CcuconRegConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   578  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   579  /** \brief Configuration structure type for the Pll Steps for current jump control.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   581  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   582  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   583      uint8   k2Step;         /**< \brief K2 divider value for this step. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   584      float32 waitTime;       /**< \brief Wait time for for this step. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   585  } IfxScuCcu_PllStepConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   587  /** \brief Configuration structure type for the Pll Parameters.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   589  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   590  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   591      uint32                           xtalFrequency;                /**< \brief Xtal frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   592      IfxScuCcu_PllInputClockSelection pllInputClockSelection;       /**< \brief Pll input clock selection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   593      IfxScuCcu_SysPllConfig           sysPllConfig;                 /**< \brief System PLL Configurations */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   594      IfxScuCcu_PerPllConfig           perPllConfig;                 /**< \brief Peripheral PLL Configurations */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   595  } IfxScuCcu_pllsParameterConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   596  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   597  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   599  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   600   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   601  /** \brief Configuration structure type for the Flash waitstate configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   602   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   603  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   604  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   605      uint32 value;       /**< \brief FLASH.FCON Register value to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   606      uint32 mask;        /**< \brief FLASH.FCON Mask to select the bit fields to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   607  } IfxScuCcu_FlashWaitstateConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   609  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   610  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   611  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   612   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   613  /** \brief Configuration structure type for all the CCUCON registers to configure clock distribution.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   615  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   616  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   617      IfxScuCcu_CcuconRegConfig ccucon0;        /**< \brief CCUCON0 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   618      IfxScuCcu_CcuconRegConfig ccucon1;        /**< \brief CCUCON1 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   619      IfxScuCcu_CcuconRegConfig ccucon2;        /**< \brief CCUCON2 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   620      IfxScuCcu_CcuconRegConfig ccucon5;        /**< \brief CCUCON5 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   621      IfxScuCcu_CcuconRegConfig ccucon6;        /**< \brief CCUCON6 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   622      IfxScuCcu_CcuconRegConfig ccucon7;        /**< \brief CCUCON7 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   623      IfxScuCcu_CcuconRegConfig ccucon8;        /**< \brief CCUCON8 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   624      IfxScuCcu_CcuconRegConfig ccucon9;        /**< \brief CCUCON9 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   625      IfxScuCcu_CcuconRegConfig ccucon10;       /**< \brief CCUCON10 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   626      IfxScuCcu_CcuconRegConfig ccucon11;       /**< \brief CCUCON11 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   627  } IfxScuCcu_ClockDistributionConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   629  /** \brief Configuration structure type for the Pll Initial Step Configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   631  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   633      IfxScuCcu_pllsParameterConfig pllsParameters;       /**< \brief Configuration Parameters for both PLLs */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   634      float32                       waitTime;             /**< \brief Wait time for for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   635  } IfxScuCcu_InitialStepConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   637  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   638   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   639  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   640  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   641      uint8                              numOfSteps;       /**< \brief Number of PLL divider steps during clock throttling */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   642      IFX_CONST IfxScuCcu_PllStepConfig *pllSteps;         /**< \brief Pointer to the array of Pll divider step configuration. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   643  } IfxScuCcu_PllThrottleConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   644  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   645  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   647  /** \brief modulation config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   648   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   649  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   650  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   651      IfxScuCcu_ModEn               Mod_Enable;       /**< \brief modulation enable */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   652      IfxScuCcu_ModulationAmplitude Mod_Amp;          /**< \brief modulation amplitude */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   653  } IfxScuCcu_Mod_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   655  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   656   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   657  /** \brief Configuration structure SCU module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   658   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   659  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   660  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   661      IfxScuCcu_InitialStepConfig               pllInitialStepConfig;           /**< \brief Configuration of first step which is same as internal osc frequency. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   662      IfxScuCcu_PllThrottleConfig               sysPllThrottleConfig;           /**< \brief Configuration of PLL throttling. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   663      IfxScuCcu_ClockDistributionConfig         clockDistribution;              /**< \brief Configuration of of bus clocks and other module clock distribution. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   664      IFX_CONST IfxScuCcu_FlashWaitstateConfig *flashFconWaitStateConfig;       /**< \brief Configuration of flash waitstate */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   665      IFX_CONST IfxScuCcu_Mod_Config           *modulationConfig;               /**< \brief modulation configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   666  } IfxScuCcu_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   668  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   669  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   670  /** \brief structure holding the RGain parameters for modulation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   671   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   672  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   673  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   674      float32 RGainNom;       /**< \brief RGain Nominal value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   675      uint16  RGainHex;       /**< \brief RGain Hex value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   676  } IfxScuCcu_RGain_Values;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   678  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   679   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   680  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   681  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   682  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   683  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   684  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   685  /** \brief API to wait for requested duration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   686   * Note: IfxScuCcu_wait shall not use STM in future, because we can guarantee that STM is enabled after reset but  If PLL init is called for changing the frequency during runtime, there is no guarantee that STM is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   687   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   688   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   689  IFX_INLINE void IfxScuCcu_wait(float32 timeSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   690  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   691  /** \brief API to wait for requested duration along with watchdog service to avoid any reset case during startup of the chip.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   692   * Note: IfxScuCcu_wait shall not use STM in future, because we can guarantee that STM is enabled after reset but  If PLL init is called for changing the frequency during runtime, there is no guarantee that STM is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   693   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   694   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   695  IFX_INLINE void IfxScuCcu_waitWithWdtService(float32 timeSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   696  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   697  /** \brief API to configure the LPDIV value to enter into Low Power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   698   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   699   * Caution:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   700   * write to LPDIV with non-zero division ratio will cause system to enter low power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   701   * Low power mode will affect different SPBDIV and SRIDIV ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   703   * The original CCUCON0 ratios should be preserved by user prior to calling this function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   704   * The "normal" CCUCON0 ratios have to be passed to API: "IfxScuCcu_switchToNormalMode" to go back to the original division ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   705   * \param lpDiv Low Power Division Ratio
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   706   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   707   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   708  IFX_INLINE void IfxScuCcu_switchToLowPowerMode(IfxScuCcu_LowPowerDivRatio lpDiv);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   710  /** \brief API to switch back to normal mode from low power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   711   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   712   * Caution:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   713   * The original CCUCON0 setting has to be saved by user prior to entering Low Power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   714   * Pass the original CCUCON0 register as a whole word to this function to restore the normal settings.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   715   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   716   * Ramp back to normal mode is done in steps to avoid sudden jump in frequency and power usage.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   717   * \param ccucon0 CCUCON0 values at normal mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   718   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   720   * Switch to low power mode and back using iLLD functions as below
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   721   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   722   *     uint32 ccucon0 = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   723   *     IfxScuCcu_LowPowerDivRatio lpDiv = IfxScuCcu_LowPowerDivRatio_divBy30;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   724   *     IfxScuCcu_switchToLowPowerMode(lpDiv);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   725   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   726   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   727   * Switch back to normal mode  with the saved ccucon0 value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   728   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   729   *     IfxScuCcu_switchToNormalMode(ccucon0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   730   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   731   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   733  IFX_INLINE void IfxScuCcu_switchToNormalMode(const uint32 ccucon0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   735  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   736  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   737  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   738   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   739  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   740  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   741  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   742  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   743  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   744  /** \brief API to get ADAS divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   745   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   746   * \return ADAS frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   748  IFX_INLINE float32 IfxScuCcu_getAdasFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   750  /** \brief API to get Adc (EVADC, EDSADC)  frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   751   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   752   * \return Adc frequency (fADC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   753   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   754  IFX_INLINE float32 IfxScuCcu_getAdcFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   755  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   756  /** \brief API to get ASCLINF divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   757   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   758   * \return AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   759   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   760  IFX_INLINE float32 IfxScuCcu_getAsclinFFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   762  /** \brief API to get EBU frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   763   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   764   * \return EBU frequency (fEBU) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   765   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   766  IFX_INLINE float32 IfxScuCcu_getEbuFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   768  /** \brief API to get EVR Oscillator frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   769   * This API returns the constant which is specific to the ScuCcu of the controller.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   770   * \return EVR Oscillator frequency (fBACK or fEVR) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   771   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   772  IFX_INLINE float32 IfxScuCcu_getEvrFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   774  /** \brief API to get GETH divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   775   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   776   * \return GETH frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   777   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   778  IFX_INLINE float32 IfxScuCcu_getGethFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   780  /** \brief API to get GTMdivider frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   781   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   782   * return GTM frequency (fGTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   783   * \return Gtm Frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   784   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   785  IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   787  /** \brief API to get I2C frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   788   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   789   * \return I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   790   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   791  IFX_INLINE float32 IfxScuCcu_getI2cFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   792  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   793  /** \brief API to get MCANH divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   794   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   795   * \return MCANH frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   796   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   797  IFX_INLINE float32 IfxScuCcu_getMcanhFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   799  /** \brief API to get Oscillator 0 frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   800   * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   801   * \return Osc0 frequency (fOSC0) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   802   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   803  IFX_INLINE float32 IfxScuCcu_getOsc0Frequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   804  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   805  /** \brief API to get Oscillator 0 frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   806   * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   807   * \return Osc frequency (fOSC) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   808   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   809  IFX_INLINE float32 IfxScuCcu_getOscFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   811  /** \brief Returns the clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   812   * \return Clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   813   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   814  IFX_INLINE IfxScuCcu_PllInputClockSelection IfxScuCcu_getSourceSelection(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   816  /** \brief API to get STM divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   817   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   818   * \return STM frequency (fSTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   819   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   820  IFX_INLINE float32 IfxScuCcu_getStmFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   821  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   822  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   823  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   824  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   825  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   826  /** \brief API to get ASCLINS divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   827   * This API returns the ASCLINS frequency  based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   828   * \return AsclinS frequency (fASCLINS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   829   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   830  IFX_EXTERN float32 IfxScuCcu_getAsclinSFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   831  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   832  /** \brief API to get BBB divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   833   * This API returns the BBBDivider frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   834   * \return BBB frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   835   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   836  IFX_EXTERN float32 IfxScuCcu_getBbbFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   838  /** \brief This API returns the Cpu frequency based on the divider value in CCUCON register and fSource frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   839   * \param cpu CPU number for which effective fCPU is sought
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   840   * \return Cpu[x] frequency in Hz, where x is cpu number passed as parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   841   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   842  IFX_EXTERN float32 IfxScuCcu_getCpuFrequency(const IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   843  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   844  /** \brief API to get FSI2 divider frequency in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   845   * This API returns the fFSI2 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   846   * \return FSI2 frequency (fFSI2) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   847   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   848  IFX_EXTERN float32 IfxScuCcu_getFsi2Frequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   849  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   850  /** \brief API to get FSI divider frequency in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   851   * This API returns the fFSI based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   852   * \return FSI frequency (fFSI) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   853   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   854  IFX_EXTERN float32 IfxScuCcu_getFsiFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   855  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   856  /** \brief API to get MCAN divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   857   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   858   * \return Mcan frequency (fMCAN) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   859   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   860  IFX_EXTERN float32 IfxScuCcu_getMcanFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   861  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   862  /** \brief get source frequency fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   863   * This API returns the source frequency based on the configurations with CCUCON register configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   864   * \return Module frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   865   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   866  IFX_EXTERN float32 IfxScuCcu_getModuleFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   867  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   868  /** \brief API to get MSC divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   869   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   870   * \return Msc frequency (fMSC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   871   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   872  IFX_EXTERN float32 IfxScuCcu_getMscFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   873  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   874  /** \brief API to get actual PER PLL1  frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   875   * This API returns the PER PLL1 frequency based on the K2 divider value in PLLCON and the VCO frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   876   * Fpll1= (Fosc*N)/(P*K2)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   877   * \return PER PLL1 (K2 Divider) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   878   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   879  IFX_EXTERN float32 IfxScuCcu_getPerPllFrequency1(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   880  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   881  /** \brief API to get actual PER PLL2 (K3 Divider) frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   882   * This API returns the PER PLL2 frequency based on the K3 divider value in PLLCON and the VCO frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   883   * Fpll2= (Fosc*N)/(P*K3*1.6)  // DIVBY = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   884   * Fpll2= (Fosc*N)/(P*K3*2)  // DIVBY = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   885   * \return PER PLL2 (K3 Divider ) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   886   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   887  IFX_EXTERN float32 IfxScuCcu_getPerPllFrequency2(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   888  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   889  /** \brief API to get actual Sys PLL output frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   890   * This API returns the based on the divider values in CCUCON, PLLCON registers and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   891   * \return System Pll (fSysPLL) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   892   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   893  IFX_EXTERN float32 IfxScuCcu_getPllFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   894  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   895  /** \brief API to get Qspi divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   896   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   897   * \return Qspi frequency (fQspi) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   898   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   899  IFX_EXTERN float32 IfxScuCcu_getQspiFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   900  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   901  /** \brief get source frequency fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   902   * This API returns the source frequency based on the configurations with CCUCON register configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   903   * \param fsource fsource selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   904   * \return Effective fSOURCE in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   905   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   906  IFX_EXTERN float32 IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource fsource);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   907  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   908  /** \brief API to get SPB divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   909   * This API returns the based on fSOURCE and also on Low power divider mode and/or SPBDIV divider value in CCUCON registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   910   * \return SPB frequency (fSPB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   911   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   912  IFX_EXTERN float32 IfxScuCcu_getSpbFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   913  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   914  /** \brief API to get SRI divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   915   * This API returns the Sri frequency based on the divider values in CCUCON registers and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   916   * \return Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   917   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   918  IFX_EXTERN float32 IfxScuCcu_getSriFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   920  /** \brief API to set ADAS frequency (with ADAS divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   921   * This API configure adas divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   922   * \param adasFreq ADAS frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   923   * \return Actual Adas frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   924   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   925  IFX_EXTERN float32 IfxScuCcu_setAdasFrequency(float32 adasFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   926  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   927  /** \brief API to set ASCLINF frequency (with ASCLINF divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   928   * This API configure ASCLINF divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   929   * \param asclinFFreq AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   930   * \return Actual AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   931   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   932  IFX_EXTERN float32 IfxScuCcu_setAsclinFFrequency(float32 asclinFFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   933  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   934  /** \brief API to set ASCLINS frequency (with ASCLINS divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   935   * This API configure ASCLINS divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   936   * \param asclinSFreq Desired AscLinS frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   937   * \return Actual AsclinS frequency (fASCLINS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   938   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   939  IFX_EXTERN float32 IfxScuCcu_setAsclinSFrequency(float32 asclinSFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   940  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   941  /** \brief API to set BBB frequency (with Bbb divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   942   * This API configure Bbb divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   943   * \param bbbFreq Bbb frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   944   * \return Actual Bbb frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   945   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   946  IFX_EXTERN float32 IfxScuCcu_setBbbFrequency(float32 bbbFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   947  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   948  /** \brief API to set CPU frequency (with CPU divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   949   * This API configure CPU divider values in CCUCON registers. The actual frequency is always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   950   * \param cpu CPU number for which fCPU to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   951   * \param cpuFreq Desired CPU frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   952   * \return Actual CPU[x] frequency in Hz, where x is the cpu number passed as parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   953   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   954  IFX_EXTERN float32 IfxScuCcu_setCpuFrequency(IfxCpu_ResourceCpu cpu, float32 cpuFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   955  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   956  /** \brief API to set FSI2 frequency (with FSI2 divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   957   * This API configure Fsi2 divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   958   * \param fsi2Freq FSI2 frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   959   * \return Actual Fsi2 frequency (fFSI2) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   960   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   961  IFX_EXTERN float32 IfxScuCcu_setFsi2Frequency(float32 fsi2Freq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   962  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   963  /** \brief API to set FSI frequency (with FSI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   964   * This API configure Fsi divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   965   * \param fsiFreq FSI frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   966   * \return Actual Fsi frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   967   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   968  IFX_EXTERN float32 IfxScuCcu_setFsiFrequency(float32 fsiFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   969  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   970  /** \brief API to set GETH frequency (with GETH divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   971   * This API configure geth divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   972   * \param gethFreq GETH frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   973   * \return Actual Geth frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   974   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   975  IFX_EXTERN float32 IfxScuCcu_setGethFrequency(float32 gethFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   976  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   977  /** \brief API to set GTM frequency (with GTM divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   978   * This API configure GTM divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   979   * \param gtmFreq Desired GTM frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   980   * \return Actual GTM frequency in HZ
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   981   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   982  IFX_EXTERN float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   983  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   984  /** \brief API to set I2C frequency (with I2C divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   985   * This API configure adas divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   986   * \param i2cFreq I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   987   * \return Actual I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   988   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   989  IFX_EXTERN float32 IfxScuCcu_setI2cFrequency(float32 i2cFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   990  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   991  /** \brief API to set MCAN frequency (with MCAN divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   992   * This API configure MCAN divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   993   * \param mcanFreq Desired MSC frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   994   * \return Actual Mcan frequency (fMCAN) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   995   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   996  IFX_EXTERN float32 IfxScuCcu_setMcanFrequency(float32 mcanFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   997  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   998  /** \brief API to set MCANH frequency (with MCANH divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   999   * This API configure mcanh divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1000   * \param mcanhFreq MCANH frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1001   * \return Actual MCanh frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1002   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1003  IFX_EXTERN float32 IfxScuCcu_setMcanhFrequency(float32 mcanhFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1004  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1005  /** \brief API to set MSC frequency (with MSC divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1006   * This API configure MSC divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1007   * \param mscFreq Desired MSC frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1008   * \return Actual Msc frequency (fMSC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1009   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1010  IFX_EXTERN float32 IfxScuCcu_setMscFrequency(float32 mscFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1011  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1012  /** \brief API to set QSPI frequency (with QSPI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1013   * This API configure Qspi divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1014   * \param qspiFreq Desired QSPI frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1015   * \return Actual Qspi frequency (fQspi) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1016   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1017  IFX_EXTERN float32 IfxScuCcu_setQspiFrequency(float32 qspiFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1018  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1019  /** \brief API to set SPB frequency (with SPB divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1020   * This API configure SPB divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1021   * \param spbFreq Desired SPB frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1022   * \return Actual SPB frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1023   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1024  IFX_EXTERN float32 IfxScuCcu_setSpbFrequency(float32 spbFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1025  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1026  /** \brief API to set SRI frequency (with SRI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1027   * This API configure Sri divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1028   * \param sriFreq Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1029   * \return Actual Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1030   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1031  IFX_EXTERN float32 IfxScuCcu_setSriFrequency(float32 sriFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1032  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1033  /** \brief API to set STM frequency (with STM divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1034   * This API configure Stm divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1035   * \param stmFreq Stm frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1036   * \return Actual Stm frequency (fSTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1037   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1038  IFX_EXTERN float32 IfxScuCcu_setStmFrequency(float32 stmFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1039  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1040  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1041  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1042  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1043   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1044  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1045  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1046  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1047  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1048  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1049  /** \brief This inline function configures the Ccu SYS PLLs initial step and PER PLL.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1050   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1051  IFX_INLINE boolean IfxScuCcu_configureCcuInitialStep(const IfxScuCcu_InitialStepConfig *pllInitStepCfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1052  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1053  /** \brief Inlined API for clock distribution
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1054   * For each CCUCON register update the configured value with the mask.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1055   * \param clockDistributionConfig pointer to clock distribution structure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1056   * \return TRUE: Operation successful, FALSE: Operation Failure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1057   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1058  IFX_INLINE boolean IfxScuCcu_distributeClockInline(const IfxScuCcu_ClockDistributionConfig *clockDistributionConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1059  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1060  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1061  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1062  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1063  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1064  /** \brief API for clock distribution.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1065   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1066   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1067  IFX_EXTERN void IfxScuCcu_distributeClock(IfxScuCcu_ClockDistributionConfig *clockDistributionConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1068  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1069  /** \brief API to initialize the SCU Clock Control Unit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1070   * This API initialize the Sys PLL with ramp steps, BUS dividers and Per PLL for the configuration provided by the configuration structure.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1071   * FSyspll = (Fosc * Nsys)/(Psys * K2sys);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1072   * Fpll1= (Fosc * Nper)/(Pper * K2per);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1073   * Fpll2= (Fosc * Nper)/(Pper * K3per * 1.6); // if DIVBY = 0, else Fpll2= (Fosc * Nper)/(Pper * K3per * 2) // if DIVBY = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1074   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1075   * Note: Following SMU alarms are disabled before the PLL configuration and Enabled at the end of PLL lock in the function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1076   * PLL0,1,2 clock out of range frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1077   * PLL0,1 VCO loss of lock event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1078   * System PLL Oscillator Watchdog, input clock out of range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1079   * The application should store/restore these alarm configurations if required.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1080   * \param config Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1081   * \return Error status of the ScuCcu initialization process.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1082   * \retval TRUE: If an error occurred during initialization.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1083   * \retval FALSE: If initialization was successful.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1084   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1085  IFX_EXTERN boolean IfxScuCcu_init(const IfxScuCcu_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1086  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1087  /** \brief Initializes the clock configuration with default values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1088   * \param cfg Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1089   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1090   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1091  IFX_EXTERN void IfxScuCcu_initConfig(IfxScuCcu_Config *cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1092  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1093  /** \brief API to switch to Backup clock from the current PLL frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1094   * \param cfg Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1095   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1096   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1097  IFX_EXTERN void IfxScuCcu_switchToBackupClock(const IfxScuCcu_Config *cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1098  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1099  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1100  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1101  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1102  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1103  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1105  /** \brief Clear the trap status flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1106   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1107   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1108   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1109  IFX_INLINE void IfxScuCcu_clearTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1110  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1111  /** \brief Get trap disable flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1112   * \param cpuIndex Cpu index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1113   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1114   * \return Trap request can be generated or not.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1115   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1116  IFX_INLINE boolean IfxScuCcu_getTrapDisableFlag(IfxCpu_ResourceCpu cpuIndex, IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1117  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1118  /** \brief Get the trap status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1119   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1120   * \return Trap was requested or not.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1121   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1122  IFX_INLINE boolean IfxScuCcu_getTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1124  /** \brief Set the trap disable flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1125   * \param cpuIndex Cpu index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1126   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1127   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1129  IFX_INLINE void IfxScuCcu_setTrapDisableFlag(IfxCpu_ResourceCpu cpuIndex, IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1130  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1131  /** \brief Set the trap status flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1132   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1134   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1135  IFX_INLINE void IfxScuCcu_setTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1136  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1137  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1138   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1139  IFX_INLINE boolean IfxScuCcu_throttleSysPllClockInline(const IfxScuCcu_PllThrottleConfig *pllThrottleConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1140  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1141  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1142  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1143  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1145  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1146   * \param modamp modulation amplitude
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1147   * \param RGain_P RGain values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1148   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1149   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1150  IFX_EXTERN void IfxScuCcu_calRGainParameters(IfxScuCcu_ModulationAmplitude modamp, IfxScuCcu_RGain_Values *RGain_P);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1151  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1152  /** \brief initialize modulation parameters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1153   * \param Mod_Cfg modulation configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1156  IFX_EXTERN void IfxScuCcu_modulation_init(const IfxScuCcu_Mod_Config *Mod_Cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1157  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1158  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1159   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1160   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1161  IFX_EXTERN void IfxScuCcu_throttleSysPllClock(IfxScuCcu_PllThrottleConfig *pllThrottleConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1162  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1163  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1164  /*-------------------Global Exported Variables/Constants----------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1165  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1167  /** \brief maps to the IfxScuCcu_ModulationAmplitude enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1169  IFX_EXTERN IFX_CONST float32 IfxScuCcu_MA_percent[IfxScuCcu_ModulationAmplitude_count];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1170  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1171  /** \brief Configuration structure for SCU CCU driver.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1172   * The values of this structure are defined as # defined macros in the implementation of Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1173   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1174  IFX_EXTERN IFX_CONST IfxScuCcu_Config     IfxScuCcu_defaultClockConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1176  /** \brief default modulation config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1177   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1178  IFX_EXTERN IFX_CONST IfxScuCcu_Mod_Config IfxScuCcu_defaultModConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1179  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1180  IFX_EXTERN uint32                         IfxScuCcu_xtalFrequency;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1181  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1182  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1183  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1184  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1185  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1186  IFX_INLINE void IfxScuCcu_clearTrapStatusFlag(IfxScuCcu_Traprequest request)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1187  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1188      uint32 trapclear = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1189      SCU_TRAPCLR.U |= (trapclear << request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1190  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1193  IFX_INLINE boolean IfxScuCcu_configureCcuInitialStep(const IfxScuCcu_InitialStepConfig *pllInitStepCfg)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1194  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1195      uint8                                initError = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1196      uint16                               endinitSfty_pw;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1197  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1198      uint32                               timeoutCycleCount;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1199      const IfxScuCcu_pllsParameterConfig *pllsParamCfg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1200      pllsParamCfg   = &pllInitStepCfg->pllsParameters;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1201      /*get the watch-dog passwords for usage with this function*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1202      endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1203  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1204      /* Reset Safety ENDINIT, SCU_CCUCON registers are protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1205      IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1206  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1207      timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1208  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1209      while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1210      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1211          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1212      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1213  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1214      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1215          Ifx_SCU_CCUCON0 scuCcucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1216          scuCcucon0.U        = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1217          scuCcucon0.B.CLKSEL = 0; /*Select the EVR as fsource0/1/2 for the clock distribution */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1218          scuCcucon0.B.UP     = 1; /*Update the ccucon0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1219          SCU_CCUCON0.U       = scuCcucon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1220      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1221  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1222      timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1224      while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1225      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1226          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1227      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1229      /*Disable SMU Alarms */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1230      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1231          SMU_KEYS.U    = (uint32)0xBCU;        /* Enable access to SMU registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1232          SMU_AG8CF0.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1233          SMU_AG8CF1.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1234          SMU_AG8CF2.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1235          SMU_KEYS.U    = (uint32)0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1236      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1237  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1238      /* Power down the both the PLLs before configuring registers*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1239      /* Both the PLLs are powered down to be sure for asynchronous PLL registers update cause no glitches */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1240      SCU_SYSPLLCON0.B.PLLPWD = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1241      SCU_PERPLLCON0.B.PLLPWD = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1242  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1243      timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1244  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1245      while ((SCU_SYSPLLSTAT.B.PWDSTAT == 0) || (SCU_PERPLLSTAT.B.PWDSTAT == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1246      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1247          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1248      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1249  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1250      /* Now configure the oscillator, required oscillator mode is external crystal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1252      if ((pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fOsc0) || (pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fSysclk))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1253  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1254      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1255          Ifx_SCU_OSCCON scuOsccon;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1256          scuOsccon.U      = SCU_OSCCON.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1257  #if (IFX_CFG_SCU_EXT_CLOCK == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1258          scuOsccon.B.MODE = 2U;   /* external clock selected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1259  #else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1260          scuOsccon.B.MODE = 0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1261  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1262  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1263          scuOsccon.B.OSCVAL = (uint32)(pllsParamCfg->xtalFrequency / 1000000U) - 15; /*XTAL range 16MHz to 40MHz*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1264          /*Note: Oscillator Watchdog Reset (OSCRES) is not required when the PLLs are powered down*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1265          SCU_OSCCON.U       = scuOsccon.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1266      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1267  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1268      /* Configure the initial steps for the system PLL*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1269      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1270          Ifx_SCU_SYSPLLCON0 sysPllCon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1271          sysPllCon0.U       = SCU_SYSPLLCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1272          sysPllCon0.B.PDIV  = pllsParamCfg->sysPllConfig.pDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1273          sysPllCon0.B.NDIV  = pllsParamCfg->sysPllConfig.nDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1274          sysPllCon0.B.INSEL = pllsParamCfg->pllInputClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1275          SCU_SYSPLLCON0.U   = sysPllCon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1276      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1277  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1278      /* Configure the initial steps for the peripheral PLL*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1279      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1280          Ifx_SCU_PERPLLCON0 scuPerPllCon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1281          scuPerPllCon0.U       = SCU_PERPLLCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1282          scuPerPllCon0.B.DIVBY = pllsParamCfg->perPllConfig.k3DividerBypass;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1283          scuPerPllCon0.B.PDIV  = pllsParamCfg->perPllConfig.pDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1284          scuPerPllCon0.B.NDIV  = pllsParamCfg->perPllConfig.nDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1285          SCU_PERPLLCON0.U      = scuPerPllCon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1286      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1288      /* Power up the both the PLLs before configuring registers*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1289      SCU_SYSPLLCON0.B.PLLPWD = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1290      SCU_PERPLLCON0.B.PLLPWD = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1292      timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1294      while ((SCU_SYSPLLSTAT.B.PWDSTAT == 1) || (SCU_PERPLLSTAT.B.PWDSTAT == 1))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1295      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1296          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1297      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1298  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1299      timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1301      while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1302             (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1303             (SCU_PERPLLSTAT.B.K3RDY == 0U))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1304      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1305          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1306      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1307  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1308      SCU_SYSPLLCON1.B.K2DIV = pllsParamCfg->sysPllConfig.k2Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1309      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1310          Ifx_SCU_PERPLLCON1 scuPerPllCon1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1311          scuPerPllCon1.U       = SCU_PERPLLCON1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1312          scuPerPllCon1.B.K2DIV = pllsParamCfg->perPllConfig.k2Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1313          scuPerPllCon1.B.K3DIV = pllsParamCfg->perPllConfig.k3Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1314          SCU_PERPLLCON1.U      = scuPerPllCon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1315      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1316  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1317      timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1319      while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1320             (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1321             (SCU_PERPLLSTAT.B.K3RDY == 0U))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1322      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1323          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1324      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1325  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1326      /*Check if the OSC frequencies are in the limit*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1327      timeoutCycleCount = IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1329      while ((SCU_OSCCON.B.PLLLV == 0) && (SCU_OSCCON.B.PLLHV == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1330      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1331          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1332      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1333  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1334      /* Now start PLL locking for latest set values*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1335      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1336          SCU_SYSPLLCON0.B.RESLD = 1;             /* Restart Sys PLL lock detection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1337          SCU_PERPLLCON0.B.RESLD = 1;             /* Restart Per PLL lock detection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1338  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1339          timeoutCycleCount      = IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1340  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1341          while ((SCU_SYSPLLSTAT.B.LOCK == 0) || (SCU_PERPLLSTAT.B.LOCK == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1342          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1343              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1344          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1345      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1346      /*Enable SMU Alarms */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1347      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1348          SMU_KEYS.U = (uint32)0xBCU;           /* Enable access to SMU registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1349          SMU_CMD.U  = (uint32)0x00000005;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1350          SMU_AG8.U  = IFXSCUCCU_SMUALARM_MASK; /* Clear SMU Alarms*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1351          SMU_KEYS.U = (uint32)0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1352      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1353      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1354          Ifx_SCU_CCUCON0 scu_ccucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1355          scu_ccucon0.U        = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1356          scu_ccucon0.B.CLKSEL = 1; /*Select the PLLs for fsource0/1/2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1357          scu_ccucon0.B.UP     = 1; /*Update the ccucon0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1358  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1359          timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1360  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1361          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1362          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1363              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1364          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1365  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1366          SCU_CCUCON0.U     = scu_ccucon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1367  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1368          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1369  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1370          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1371          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1372              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1373          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1374      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1375  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1376      IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1377      return (boolean)initError;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1378  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1379  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1380  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1381  IFX_INLINE boolean IfxScuCcu_distributeClockInline(const IfxScuCcu_ClockDistributionConfig *clockDistributionConfig)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1382  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1383      uint16 endinitSfty_pw;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1384      uint32 timeoutCycleCount;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1385      uint32 initError = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1386  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1387      /*get the watch-dog passwords for usage with this function*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1388      endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1389  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1390      /* Reset Safety ENDINIT, SCU_CCUCON registers are protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1391      IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1393      /*Configure the clock distribution */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1394      {                                                    /*Write CCUCON0 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1395          Ifx_SCU_CCUCON0 ccucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1396          ccucon0.U         = SCU_CCUCON0.U & ~clockDistributionConfig->ccucon0.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1397          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1398          ccucon0.U        |= (clockDistributionConfig->ccucon0.mask & clockDistributionConfig->ccucon0.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1399          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1400  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1401          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1402          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1403              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1404          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1405  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1406          SCU_CCUCON0.U     = ccucon0.U;      /*Set update bit explicitly to make above configurations effective */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1407          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1408  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1409          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1410          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1411              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1412          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1413      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1414      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1415          /*Write CCUCON1 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1416          Ifx_SCU_CCUCON1 ccucon1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1417          ccucon1.U = SCU_CCUCON1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1419          if (ccucon1.B.CLKSELMCAN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1420              || ccucon1.B.CLKSELMSC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1421              || ccucon1.B.CLKSELQSPI)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1422          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1423              /* Non Zero ClockSel exists - set to Zero */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1424              /* CAUTION: this would briefly reset and set all clocks in CCUCON1! */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1425              ccucon1.U  = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1426              /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1427              ccucon1.U |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1428  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1429              /* set Clock selects to 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1430              ccucon1.B.CLKSELMCAN = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1431              ccucon1.B.CLKSELMSC  = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1432              ccucon1.B.CLKSELQSPI = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1434              timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1435  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1436              while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1437              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1438                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1439              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1441              SCU_CCUCON1.U     = ccucon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1442  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1443              timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1444  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1445              while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1446              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1447                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1448              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1449          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1450  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1451          ccucon1.U         = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1452          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1453          ccucon1.U        |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1454  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1455          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1456  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1457          while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1458          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1459              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1460          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1461  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1462          SCU_CCUCON1.U     = ccucon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1463  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1464          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1465  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1466          while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1467          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1468              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1469          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1470      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1472      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1473          /*Write CCUCON2 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1474          Ifx_SCU_CCUCON2 ccucon2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1475          ccucon2.U = SCU_CCUCON2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1477          if (ccucon2.B.CLKSELASCLINS)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1478          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1479              /* Non Zero ClockSel exists - set to Zero */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1480              /* CAUTION: this would briefly reset and set ASCLINS clock in CCUCON2! */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1481              ccucon2.U               = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1482              /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1483              ccucon2.U              |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1484  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1485              ccucon2.B.CLKSELASCLINS = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1486  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1487              timeoutCycleCount       = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1488  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1489              while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1490              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1491                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1492              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1494              SCU_CCUCON2.U     = ccucon2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1495  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1496              timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1497  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1498              while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1499              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1500                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1501              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1502          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1503  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1504          ccucon2.U         = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1505          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1506          ccucon2.U        |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1507  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1508          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1509  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1510          while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1511          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1512              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1513          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1514  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1515          SCU_CCUCON2.U     = ccucon2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1516  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1517          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1518  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1519          while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1520          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1521              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1522          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1523      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1524      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1525          /*Write CCUCON5 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1526          Ifx_SCU_CCUCON5 ccucon5;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1527          ccucon5.U         = SCU_CCUCON5.U & ~clockDistributionConfig->ccucon5.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1528          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1529          ccucon5.U        |= (clockDistributionConfig->ccucon5.mask & clockDistributionConfig->ccucon5.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1530          ccucon5.B.UP      = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1531          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1532  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1533          while (SCU_CCUCON5.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1534          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1535              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1536          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1538          SCU_CCUCON5.U     = ccucon5.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1539          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1541          while (SCU_CCUCON5.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1542          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1543              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1544          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1545      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1546      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1547          /*Write CCUCON6 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1548          Ifx_SCU_CCUCON6 ccucon6;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1549          ccucon6.U     = SCU_CCUCON6.U & ~clockDistributionConfig->ccucon6.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1550          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1551          ccucon6.U    |= (clockDistributionConfig->ccucon6.mask & clockDistributionConfig->ccucon6.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1552          SCU_CCUCON6.U = ccucon6.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1553      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1555      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1556          /*Write CCUCON7 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1557          Ifx_SCU_CCUCON7 ccucon7;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1558          ccucon7.U     = SCU_CCUCON7.U & ~clockDistributionConfig->ccucon7.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1559          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1560          ccucon7.U    |= (clockDistributionConfig->ccucon7.mask & clockDistributionConfig->ccucon7.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1561          SCU_CCUCON7.U = ccucon7.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1562      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1563  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1564      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1565          /*Write CCUCON8 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1566          Ifx_SCU_CCUCON8 ccucon8;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1567          ccucon8.U     = SCU_CCUCON8.U & ~clockDistributionConfig->ccucon8.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1568          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1569          ccucon8.U    |= (clockDistributionConfig->ccucon8.mask & clockDistributionConfig->ccucon8.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1570          SCU_CCUCON8.U = ccucon8.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1571      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1572      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1573          /*Write CCUCON9 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1574          Ifx_SCU_CCUCON9 ccucon9;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1575          ccucon9.U     = SCU_CCUCON9.U & ~clockDistributionConfig->ccucon9.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1576          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1577          ccucon9.U    |= (clockDistributionConfig->ccucon9.mask & clockDistributionConfig->ccucon9.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1578          SCU_CCUCON9.U = ccucon9.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1579      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1580      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1581          /*Write CCUCON10 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1582          Ifx_SCU_CCUCON10 ccucon10;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1583          ccucon10.U     = SCU_CCUCON10.U & ~clockDistributionConfig->ccucon10.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1584          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1585          ccucon10.U    |= (clockDistributionConfig->ccucon10.mask & clockDistributionConfig->ccucon10.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1586          SCU_CCUCON10.U = ccucon10.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1587      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1588      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1589          /*Write CCUCON11 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1590          Ifx_SCU_CCUCON11 ccucon11;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1591          ccucon11.U     = SCU_CCUCON11.U & ~clockDistributionConfig->ccucon11.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1592          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1593          ccucon11.U    |= (clockDistributionConfig->ccucon11.mask & clockDistributionConfig->ccucon11.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1594          SCU_CCUCON11.U = ccucon11.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1595      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1596      IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1597      return (boolean)initError;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1598  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1599  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1600  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1601  IFX_INLINE float32 IfxScuCcu_getAdasFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1602  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1603      uint32 adasDiv = SCU_CCUCON5.B.ADASDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1604  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1605      return (adasDiv == (uint32)0) ? 0 : IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / adasDiv;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1606  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1607  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1609  IFX_INLINE float32 IfxScuCcu_getAdcFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1610  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1611      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_1);
	mov	d4,#1
	call	IfxScuCcu_getSourceFrequency
.L451:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   422  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   423      uint32 divA;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   424      uint32 result;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   425  #ifdef IFX_CFG_AURIX_SCUCCU_USED
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   426      uint32 fadc = IfxScuCcu_getSpbFrequency();
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   427  #else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   428      uint32 fadc = IfxScuCcu_getAdcFrequency();
	ftouz	d0,d2
.L545:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   429  #endif
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   430      /*    DivA = min(max(0, Fadc / FAdcI - 1), 0x3F); */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   431      divA   = (fadc << 2) / fAdcI;
	sh	d1,d0,#2
.L803:
	div.u	e2,d1,d15
.L804:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   432  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   433      divA   = (divA + 2) >> 2; /* Round to nearest integer */
	add	d15,d2,#2
.L544:
	sh	d15,#-2
.L805:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   434      divA   = __minu(divA - 1, 0x1Fu);
	add	d15,#-1
.L806:
	min.u	d15,d15,#31
.L547:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   435      result = fadc / (divA + 1);
	add	d1,d15,#1
.L807:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   436  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   437      if (result > IFXEVADC_ANALOG_FREQUENCY_MAX)
	div.u	e2,d0,d1
	ld.w	d3,.2.cnt
.L548:
	jge.u	d3,d2,.L93
.L808:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   438      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   439          divA   = __minu(divA + 1, 0x1Fu);
	min.u	d15,d1,#31
.L809:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   440  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   441          result = fadc / (divA + 1);
	add	d1,d15,#1
.L810:
	div.u	e2,d0,d1
.L93:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   442      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   443      else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   444      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   445          /* do nothing */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   446      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   447  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   448      if (!((result >= IFXEVADC_ANALOG_FREQUENCY_MIN) && (result <= IFXEVADC_ANALOG_FREQUENCY_MAX)))
	ld.w	d0,.3.cnt
.L546:
	ld.w	d1,.4.cnt
.L549:
	sub	d0,d2,d0
.L550:
	jge.u	d1,d0,.L94
.L811:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   449      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   450          result = 0;             /* Min / Max FAdcI frequency */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   451      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   452      else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   453      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   454          IfxEvadc_initialiseAdcConverterClock(evadc, group, (IfxEvadc_ClockDividerFactor)divA);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   455      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   456  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   457      return result;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   458  }
	mov	d2,#0
	ret
.L94:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     2   * \file IfxEvadc.h
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     3   * \brief EVADC  basic functionality
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     4   * \ingroup IfxLld_Evadc
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     5   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     8   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     9   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    11   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    16   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    18   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    25   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    32   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    40   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    41   * \defgroup IfxLld_Evadc_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    42   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    43   * \defgroup IfxLld_Evadc_Std_Global Global Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    44   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    45   * \defgroup IfxLld_Evadc_Std_QueueRequest Queue Request Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    46   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    47   * \defgroup IfxLld_Evadc_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    48   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    49   * \defgroup IfxLld_Evadc_Std_Frequency Frequency Calculation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    50   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    51   * \defgroup IfxLld_Evadc_Std_Group Group Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    52   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    53   * \defgroup IfxLld_Evadc_Std_Module Module Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    54   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    55   * \defgroup IfxLld_Evadc_Std_Channel Channel Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    56   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    57   * \defgroup IfxLld_Evadc_Std_Emux Emux Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    58   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    59   * \defgroup IfxLld_Evadc_Std_FastCompare Fast Compare functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    60   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    61   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    62  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    63  #ifndef IFXEVADC_H
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    64  #define IFXEVADC_H 1
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    65  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    66  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    67  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    68  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    69  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    70  #include "_Impl/IfxEvadc_cfg.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    71  #include "_PinMap/IfxEvadc_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    72  #include "IfxEvadc_bf.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    73  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    74  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    75  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    76  #include "IfxCbs_reg.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    77  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    78  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    79  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    80  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    81  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    82  /** \addtogroup IfxLld_Evadc_Std_Enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    83   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    84  /** \brief Defined in MODULE_EVADC.G[x].ARBCFG.B.ANONS and ANONC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    85   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    86  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    87  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    88      IfxEvadc_AnalogConverterMode_off             = 0, /**< \brief Analog Converter off */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    89      IfxEvadc_AnalogConverterMode_slowStandby     = 1, /**< \brief Slow Standby Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    90      IfxEvadc_AnalogConverterMode_fastStandby     = 2, /**< \brief Fast Standby Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    91      IfxEvadc_AnalogConverterMode_normalOperation = 3  /**< \brief Normal operation mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    92  } IfxEvadc_AnalogConverterMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    93  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    94  /** \brief Arbitration round length defined in MODULE_EVADC.G[x].ARBCFG.ARBRND(x=0,1,..,11)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    95   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    96  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    97  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    98      IfxEvadc_ArbitrationRounds_4_slots  = 0,  /**< \brief An arbitration round contains 4 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    99      IfxEvadc_ArbitrationRounds_8_slots  = 1,  /**< \brief An arbitration round contains 8 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   100      IfxEvadc_ArbitrationRounds_16_slots = 2,  /**< \brief An arbitration round contains 16 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   101      IfxEvadc_ArbitrationRounds_20_slots = 3   /**< \brief An arbitration round contains 20 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   102  } IfxEvadc_ArbitrationRounds;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   103  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   104  /** \brief Boundary Extension defined in MODULE_EVADC.G[x].CHCTR[y].B.BNDSELX(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   105   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   106  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   107  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   108      IfxEvadc_BoundaryExtension_standard            = 0,   /**< \brief Boundary Standard mode. BNDSELU/BNDSELL as Boundaries */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   109      IfxEvadc_BoundaryExtension_fastCompareResult1  = 1,   /**< \brief Fast compare mode use as upper boundary  Channel result   1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   110      IfxEvadc_BoundaryExtension_fastCompareResult2  = 2,   /**< \brief Fast compare mode use as upper boundary  Channel result   2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   111      IfxEvadc_BoundaryExtension_fastCompareResult3  = 3,   /**< \brief Fast compare mode use as upper boundary  Channel result   3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   112      IfxEvadc_BoundaryExtension_fastCompareResult4  = 4,   /**< \brief Fast compare mode use as upper boundary  Channel result   4 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   113      IfxEvadc_BoundaryExtension_fastCompareResult5  = 5,   /**< \brief Fast compare mode use as upper boundary  Channel result   5 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   114      IfxEvadc_BoundaryExtension_fastCompareResult6  = 6,   /**< \brief Fast compare mode use as upper boundary  Channel result   6 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   115      IfxEvadc_BoundaryExtension_fastCompareResult7  = 7,   /**< \brief Fast compare mode use as upper boundary  Channel result   7 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   116      IfxEvadc_BoundaryExtension_fastCompareResult8  = 8,   /**< \brief Fast compare mode use as upper boundary  Channel result   8 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   117      IfxEvadc_BoundaryExtension_fastCompareResult9  = 9,   /**< \brief Fast compare mode use as upper boundary  Channel result   9 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   118      IfxEvadc_BoundaryExtension_fastCompareResult10 = 10,  /**< \brief Fast compare mode use as upper boundary  Channel result  10 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   119      IfxEvadc_BoundaryExtension_fastCompareResult11 = 11,  /**< \brief Fast compare mode use as upper boundary  Channel result  11 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   120      IfxEvadc_BoundaryExtension_fastCompareResult12 = 12,  /**< \brief Fast compare mode use as upper boundary  Channel result  12 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   121      IfxEvadc_BoundaryExtension_fastCompareResult13 = 13,  /**< \brief Fast compare mode use as upper boundary  Channel result  13 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   122      IfxEvadc_BoundaryExtension_fastCompareResult14 = 14,  /**< \brief Fast compare mode use as upper boundary  Channel result  14 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   123      IfxEvadc_BoundaryExtension_fastCompareResult15 = 15   /**< \brief Fast compare mode use as upper boundary  Channel result  15 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   124  } IfxEvadc_BoundaryExtension;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   125  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   126  /** \brief BoundarySel defined in MODULE_EVADC.G[x].CHCTR[y].B.BNDSELL(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   127   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   128  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   129  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   130      IfxEvadc_BoundarySelection_group0  = 0,  /**< \brief Use group class 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   131      IfxEvadc_BoundarySelection_group1  = 1,  /**< \brief Use group class 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   132      IfxEvadc_BoundarySelection_global0 = 2,  /**< \brief Use global class 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   133      IfxEvadc_BoundarySelection_global1 = 3   /**< \brief Use global class 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   134  } IfxEvadc_BoundarySelection;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   135  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   136  /** \brief EVADC Channels
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   137   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   138  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   139  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   140      IfxEvadc_ChannelId_none = -1,  /**< \brief None of EVADC channels */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   141      IfxEvadc_ChannelId_0    = 0,   /**< \brief Channel 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   142      IfxEvadc_ChannelId_1    = 1,   /**< \brief Channel 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   143      IfxEvadc_ChannelId_2    = 2,   /**< \brief Channel 2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   144      IfxEvadc_ChannelId_3    = 3,   /**< \brief Channel 3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   145      IfxEvadc_ChannelId_4    = 4,   /**< \brief Channel 4 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   146      IfxEvadc_ChannelId_5    = 5,   /**< \brief Channel 5 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   147      IfxEvadc_ChannelId_6    = 6,   /**< \brief Channel 6 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   148      IfxEvadc_ChannelId_7    = 7,   /**< \brief Channel 7 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   149      IfxEvadc_ChannelId_8    = 8,   /**< \brief Channel 8 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   150      IfxEvadc_ChannelId_9    = 9,   /**< \brief Channel 9 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   151      IfxEvadc_ChannelId_10   = 10,  /**< \brief Channel 10 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   152      IfxEvadc_ChannelId_11   = 11,  /**< \brief Channel 11 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   153      IfxEvadc_ChannelId_12   = 12,  /**< \brief Channel 12 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   154      IfxEvadc_ChannelId_13   = 13,  /**< \brief Channel 13 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   155      IfxEvadc_ChannelId_14   = 14,  /**< \brief Channel 14 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   156      IfxEvadc_ChannelId_15   = 15   /**< \brief Channel 15 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   157  } IfxEvadc_ChannelId;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   158  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   159  /** \brief ADC channel reference defined in MODULE_EVADC.G[x].CHCTR[y].B.REFSEL(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   160   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   161  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   162  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   163      IfxEvadc_ChannelReference_standard = 0,  /**< \brief use Varef as reference */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   164      IfxEvadc_ChannelReference_channel0 = 1   /**< \brief use CH0 as reference */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   165  } IfxEvadc_ChannelReference;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   166  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   167  /** \brief Channel Result defined in MODULE_EVADC.G[x].CHCTR[y].B.RESREG(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   168   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   169  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   170  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   171      IfxEvadc_ChannelResult_0 = 0,      /**< \brief Use Channel result 0  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   172      IfxEvadc_ChannelResult_1,          /**< \brief Use Channel result 1  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   173      IfxEvadc_ChannelResult_2,          /**< \brief Use Channel result 2  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   174      IfxEvadc_ChannelResult_3,          /**< \brief Use Channel result 3  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   175      IfxEvadc_ChannelResult_4,          /**< \brief Use Channel result 4  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   176      IfxEvadc_ChannelResult_5,          /**< \brief Use Channel result 5  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   177      IfxEvadc_ChannelResult_6,          /**< \brief Use Channel result 6  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   178      IfxEvadc_ChannelResult_7,          /**< \brief Use Channel result 7  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   179      IfxEvadc_ChannelResult_8,          /**< \brief Use Channel result 8  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   180      IfxEvadc_ChannelResult_9,          /**< \brief Use Channel result 9  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   181      IfxEvadc_ChannelResult_10,         /**< \brief Use Channel result 10  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   182      IfxEvadc_ChannelResult_11,         /**< \brief Use Channel result 11  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   183      IfxEvadc_ChannelResult_12,         /**< \brief Use Channel result 12  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   184      IfxEvadc_ChannelResult_13,         /**< \brief Use Channel result 13  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   185      IfxEvadc_ChannelResult_14,         /**< \brief Use Channel result 14  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   186      IfxEvadc_ChannelResult_15          /**< \brief Use Channel result 15  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   187  } IfxEvadc_ChannelResult;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   188  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   189  /** \brief External Multiplexer Channel Selection Style as defined in
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   190   * Ifx_EVADC.G[x].EMUXCTR.B.EMXCSS
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   191   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   192  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   193  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   194      IfxEvadc_ChannelSelectionStyle_channelNumber = 0,  /**< \brief selects an arbitrary channel */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   195      IfxEvadc_ChannelSelectionStyle_binary        = 1   /**< \brief Each bit of bitfield EMUXCH selects the
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   196                                                          * associated channel for EMUX control */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   197  } IfxEvadc_ChannelSelectionStyle;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   198  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   199  /** \brief Specifies the External Coding scheme(binary/gray)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   200   * defined in Ifx_EVADC.G[x].EMUXCTR.B.EMXCOD
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   201   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   202  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   203  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   204      IfxEvadc_EmuxCodingScheme_binary = 0,  /**< \brief Output the Channel Number in Binary code */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   205      IfxEvadc_EmuxCodingScheme_gray   = 1   /**< \brief Output the channel number in gray code */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   206  } IfxEvadc_EmuxCodingScheme;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   207  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   208  /** \brief Specifies the Emux interface
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   209   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   210  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   211  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   212      IfxEvadc_EmuxInterface_0 = 0,  /**< \brief Emux Interface 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   213      IfxEvadc_EmuxInterface_1 = 1   /**< \brief Emux Interface 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   214  } IfxEvadc_EmuxInterface;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   215  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   216  /** \brief External Multiplexer sample time control
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   217   * defined in Ifx_EVADC.G[x].EMUXCTR.B.EMXST
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   218   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   219  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   220  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   221      IfxEvadc_EmuxSampleTimeControl_settingChanges = 0,  /**< \brief Use STCE Whenever Setting Changes */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   222      IfxEvadc_EmuxSampleTimeControl_always         = 1   /**< \brief Use STCE for each conversion of an external channel */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   223  } IfxEvadc_EmuxSampleTimeControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   224  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   225  /** \brief specifies the External Channel Start select value
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   226   * defined in Ifx_EVADC.G[x].EMUXCTR.B.EMUXSET
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   227   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   228  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   229  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   230      IfxEvadc_EmuxSelectValue_0 = 0,      /**< \brief Start Selection Value 0  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   231      IfxEvadc_EmuxSelectValue_1,          /**< \brief Start Selection Value 1  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   232      IfxEvadc_EmuxSelectValue_2,          /**< \brief Start Selection Value 2  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   233      IfxEvadc_EmuxSelectValue_3,          /**< \brief Start Selection Value 3  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   234      IfxEvadc_EmuxSelectValue_4,          /**< \brief Start Selection Value 4  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   235      IfxEvadc_EmuxSelectValue_5,          /**< \brief Start Selection Value 5  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   236      IfxEvadc_EmuxSelectValue_6,          /**< \brief Start Selection Value 6  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   237      IfxEvadc_EmuxSelectValue_7           /**< \brief Start Selection Value 7  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   238  } IfxEvadc_EmuxSelectValue;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   239  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   240  /** \brief Specifies External Multiplexer Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   241   * define in Ifx_EVADC.G[x].EMUXCTR.B.EMUXMODE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   242   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   243  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   244  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   245      IfxEvadc_ExternalMultiplexerMode_softwareControl = 0,  /**< \brief Disable The Emux Control */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   246      IfxEvadc_ExternalMultiplexerMode_steady          = 1,  /**< \brief select steady mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   247      IfxEvadc_ExternalMultiplexerMode_singleStep      = 2,  /**< \brief Select single step mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   248      IfxEvadc_ExternalMultiplexerMode_sequence        = 3   /**< \brief Select Sequence Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   249  } IfxEvadc_ExternalMultiplexerMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   250  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   251  /** \brief FIFO mode enable
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   252   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   253  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   254  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   255      IfxEvadc_FifoMode_seperateResultRegister = 0,  /**< \brief seperate Result Register */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   256      IfxEvadc_FifoMode_fifoStructure          = 1,  /**< \brief Part of FIFO structure: copy each new valid result */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   257      IfxEvadc_FifoMode_maximumMode            = 2,  /**< \brief copy new result if bigger */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   258      IfxEvadc_FifoMode_minimumMode            = 3   /**< \brief copy new result if it is smaller */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   259  } IfxEvadc_FifoMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   260  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   261  /** \brief gating mode defined in MODULE_EVADC.QMR0.ENGT
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   262   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   263  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   264  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   265      IfxEvadc_GatingMode_disabled   = 0,  /**< \brief Gating is disabled, no conversion request are issued */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   266      IfxEvadc_GatingMode_always     = 1,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   267      IfxEvadc_GatingMode_gatingHigh = 2,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is high */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   268      IfxEvadc_GatingMode_gatingLow  = 3   /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is low */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   269  } IfxEvadc_GatingMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   270  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   271  /** \brief External trigger gating defined in MODULE_EVADC.G[x].QCTRLy.GTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   272   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   273  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   274  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   275      IfxEvadc_GatingSource_0 = 0,      /**< \brief Input signal REQGTx_0  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   276      IfxEvadc_GatingSource_1,          /**< \brief Input signal REQGTx_1  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   277      IfxEvadc_GatingSource_2,          /**< \brief Input signal REQGTx_2  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   278      IfxEvadc_GatingSource_3,          /**< \brief Input signal REQGTx_3  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   279      IfxEvadc_GatingSource_4,          /**< \brief Input signal REQGTx_4  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   280      IfxEvadc_GatingSource_5,          /**< \brief Input signal REQGTx_5  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   281      IfxEvadc_GatingSource_6,          /**< \brief Input signal REQGTx_6  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   282      IfxEvadc_GatingSource_7,          /**< \brief Input signal REQGTx_7  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   283      IfxEvadc_GatingSource_8,          /**< \brief Input signal REQGTx_8  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   284      IfxEvadc_GatingSource_9,          /**< \brief Input signal REQGTx_9  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   285      IfxEvadc_GatingSource_10,         /**< \brief Input signal REQGTx_10  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   286      IfxEvadc_GatingSource_11,         /**< \brief Input signal REQGTx_11  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   287      IfxEvadc_GatingSource_12,         /**< \brief Input signal REQGTx_12  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   288      IfxEvadc_GatingSource_13,         /**< \brief Input signal REQGTx_13  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   289      IfxEvadc_GatingSource_14,         /**< \brief Input signal REQGTx_14  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   290      IfxEvadc_GatingSource_15          /**< \brief Input signal REQGTx_15  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   291  } IfxEvadc_GatingSource;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   292  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   293  /** \brief inputClass defined in MODULE_EVADC.G[x].CHCTR[y].B.ICLSEL(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   294   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   295  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   296  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   297      IfxEvadc_InputClasses_group0  = 0,  /**< \brief Use group class 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   298      IfxEvadc_InputClasses_group1  = 1,  /**< \brief Use group class 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   299      IfxEvadc_InputClasses_global0 = 2,  /**< \brief Use global class 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   300      IfxEvadc_InputClasses_global1 = 3   /**< \brief Use global class 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   301  } IfxEvadc_InputClasses;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   302  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   303  /** \brief ADC channel limit check defined in MODULE_EVADC.G[x].CHCTR[y].B.CHEVMODE(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   304   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   305  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   306  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   307      IfxEvadc_LimitCheck_noCheck            = 0,  /**< \brief Normal compare mode Event Never Fast Compare mode Event Never */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   308      IfxEvadc_LimitCheck_eventIfInArea      = 1,  /**< \brief Normal compare mode Event If result is inside the boundary band    Fast Compare mode Event If result switches to high (above comp. value) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   309      IfxEvadc_LimitCheck_eventIfOutsideArea = 2,  /**< \brief Normal compare mode Event If result is outside the boundary band   Fast Compare mode Event If result switches to low (below comp. value) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   310      IfxEvadc_LimitCheck_always             = 3   /**< \brief Normal compare mode Event Always   Fast Compare mode Event Always */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   311  } IfxEvadc_LimitCheck;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   312  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   313  /** \brief Access protection for Group registers defined in MODULE_EVADC.ACCPROT0.U
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   314   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   315  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   316  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   317      IfxEvadc_Protection_channelControl0         = 0,   /**< \brief Access control for GxCHCTR0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   318      IfxEvadc_Protection_channelControl1         = 1,   /**< \brief Access control for GxCHCTR1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   319      IfxEvadc_Protection_channelControl2         = 2,   /**< \brief Access control for GxCHCTR2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   320      IfxEvadc_Protection_channelControl3         = 3,   /**< \brief Access control for GxCHCTR3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   321      IfxEvadc_Protection_channelControl4         = 4,   /**< \brief Access control for GxCHCTR4 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   322      IfxEvadc_Protection_channelControl5         = 5,   /**< \brief Access control for GxCHCTR5 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   323      IfxEvadc_Protection_channelControl6         = 6,   /**< \brief Access control for GxCHCTR6 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   324      IfxEvadc_Protection_channelControl7         = 7,   /**< \brief Access control for GxCHCTR7 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   325      IfxEvadc_Protection_channelControl8         = 8,   /**< \brief Access control for GxCHCTR8 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   326      IfxEvadc_Protection_channelControl9         = 9,   /**< \brief Access control for GxCHCTR9 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   327      IfxEvadc_Protection_channelControl10        = 10,  /**< \brief Access control for GxCHCTR10 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   328      IfxEvadc_Protection_channelControl11        = 11,  /**< \brief Access control for GxCHCTR11 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   329      IfxEvadc_Protection_channelControl12        = 12,  /**< \brief Access control for GxCHCTR12 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   330      IfxEvadc_Protection_channelControl13        = 13,  /**< \brief Access control for GxCHCTR13 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   331      IfxEvadc_Protection_channelControl14        = 14,  /**< \brief Access control for GxCHCTR14 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   332      IfxEvadc_Protection_initGroup0              = 16,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   333      IfxEvadc_Protection_initGroup1              = 17,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   334      IfxEvadc_Protection_initGroup2              = 18,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   335      IfxEvadc_Protection_initGroup3              = 19,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   336      IfxEvadc_Protection_initGroup4              = 20,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   337      IfxEvadc_Protection_initGroup5              = 21,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   338      IfxEvadc_Protection_initGroup6              = 22,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   339      IfxEvadc_Protection_initGroup7              = 23,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   340      IfxEvadc_Protection_initGroup8              = 24,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   341      IfxEvadc_Protection_initGroup9              = 25,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   342      IfxEvadc_Protection_initGroup10             = 26,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   343      IfxEvadc_Protection_initGroup11             = 27,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   344      IfxEvadc_Protection_initGroup12             = 28,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   345      IfxEvadc_Protection_initGroup13             = 29,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   346      IfxEvadc_Protection_initGroup14             = 30,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   347      IfxEvadc_Protection_serviceGroup0           = 32,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   348      IfxEvadc_Protection_serviceGroup1           = 33,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   349      IfxEvadc_Protection_serviceGroup2           = 34,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   350      IfxEvadc_Protection_serviceGroup3           = 35,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   351      IfxEvadc_Protection_serviceGroup4           = 36,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   352      IfxEvadc_Protection_serviceGroup5           = 37,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   353      IfxEvadc_Protection_serviceGroup6           = 38,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   354      IfxEvadc_Protection_serviceGroup7           = 39,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   355      IfxEvadc_Protection_serviceGroup8           = 40,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   356      IfxEvadc_Protection_serviceGroup9           = 41,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   357      IfxEvadc_Protection_serviceGroup10          = 42,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   358      IfxEvadc_Protection_serviceGroup11          = 43,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   359      IfxEvadc_Protection_serviceGroup12          = 44,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   360      IfxEvadc_Protection_serviceGroup13          = 45,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   361      IfxEvadc_Protection_serviceGroup14          = 46,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   362      IfxEvadc_Protection_resultRegisterGroup0    = 48,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   363      IfxEvadc_Protection_resultRegisterGroup1    = 49,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   364      IfxEvadc_Protection_resultRegisterGroup2    = 50,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   365      IfxEvadc_Protection_resultRegisterGroup3    = 51,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   366      IfxEvadc_Protection_resultRegisterGroup4    = 52,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   367      IfxEvadc_Protection_resultRegisterGroup5    = 53,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   368      IfxEvadc_Protection_resultRegisterGroup6    = 54,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   369      IfxEvadc_Protection_resultRegisterGroup7    = 55,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   370      IfxEvadc_Protection_resultRegisterGroup8    = 56,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   371      IfxEvadc_Protection_resultRegisterGroup9    = 57,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   372      IfxEvadc_Protection_resultRegisterGroup10   = 58,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   373      IfxEvadc_Protection_resultRegisterGroup11   = 59,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   374      IfxEvadc_Protection_resultRegisterGroup12   = 60,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   375      IfxEvadc_Protection_resultRegisterGroup13   = 61,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   376      IfxEvadc_Protection_resultRegisterGroup14   = 62,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   377      IfxEvadc_Protection_initFastCompareChannel0 = 64,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   378                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   379      IfxEvadc_Protection_initFastCompareChannel1 = 65,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   380                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   381      IfxEvadc_Protection_initFastCompareChannel2 = 66,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   382                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   383      IfxEvadc_Protection_initFastCompareChannel3 = 67,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   384                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   385      IfxEvadc_Protection_initFastCompareChannel4 = 68,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   386                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   387      IfxEvadc_Protection_initFastCompareChannel5 = 69,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   388                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   389      IfxEvadc_Protection_initFastCompareChannel6 = 70,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   390                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   391      IfxEvadc_Protection_initFastCompareChannel7 = 71,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   392                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   393      IfxEvadc_Protection_globalConfig            = 80,  /**< \brief Access control for GLOBCFG */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   394      IfxEvadc_Protection_externalMultiplexer     = 81,  /**< \brief Access control for EMUXSEL, GxEMUXCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   395      IfxEvadc_Protection_testFunction            = 82   /**< \brief Access control for GLOBTF */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   396  } IfxEvadc_Protection;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   397  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   398  /** \brief Arbitration priority, Group x,defined in MODULE_EVADC.G[x].ARBPR.PRIOy(x=0,1,...,11;y=0,1,2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   399   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   400  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   401  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   402      IfxEvadc_RequestSlotPriority_lowest  = 0, /**< \brief Lowest priority */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   403      IfxEvadc_RequestSlotPriority_low     = 1, /**< \brief Lowpriority */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   404      IfxEvadc_RequestSlotPriority_high    = 2, /**< \brief High priority */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   405      IfxEvadc_RequestSlotPriority_highest = 3  /**< \brief Highest priority */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   406  } IfxEvadc_RequestSlotPriority;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   407  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   408  /** \brief Request source start mode defined in MODULE_EVADC.G[x].ARBPR.CSMy(x=0,1,...,11;y=0,1,2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   409   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   410  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   411  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   412      IfxEvadc_RequestSlotStartMode_waitForStart       = 0, /**< \brief Wait for start */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   413      IfxEvadc_RequestSlotStartMode_cancelInjectRepeat = 1  /**< \brief Cancel-Inject-Repeat */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   414  } IfxEvadc_RequestSlotStartMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   415  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   416  /** \brief Request sources
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   417   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   418  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   419  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   420      IfxEvadc_RequestSource_queue0 = 0,  /**< \brief 8 stage Queue0 request */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   421      IfxEvadc_RequestSource_queue1 = 1,  /**< \brief 8 stage Queue1 request */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   422      IfxEvadc_RequestSource_queue2 = 2   /**< \brief 8 stage Queue2 request */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   423  } IfxEvadc_RequestSource;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   424  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   425  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   426   * Definition in Ifx_EVADC.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   427   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   428  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   429  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   430      IfxEvadc_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   431      IfxEvadc_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   432  } IfxEvadc_SleepMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   433  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   434  /** \brief Service Node defined in MODULE_EVADC.G[x].SRACT.U(x= 0,1,..,11)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   435   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   436  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   437  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   438      IfxEvadc_SrcNr_group0  = 0,  /**< \brief service request line 0 of group */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   439      IfxEvadc_SrcNr_group1  = 1,  /**< \brief service request line 1 of group */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   440      IfxEvadc_SrcNr_group2  = 2,  /**< \brief service request line 2 of group */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   441      IfxEvadc_SrcNr_group3  = 3,  /**< \brief service request line 3 of group */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   442      IfxEvadc_SrcNr_shared0 = 4,  /**< \brief Select shared service request line 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   443      IfxEvadc_SrcNr_shared1 = 5,  /**< \brief Select shared service request line 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   444      IfxEvadc_SrcNr_shared2 = 6,  /**< \brief Select shared service request line 2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   445      IfxEvadc_SrcNr_shared3 = 7   /**< \brief Select shared service request line 3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   446  } IfxEvadc_SrcNr;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   447  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   448  /** \brief API return values defined in
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   449   * MODULE_EVADC.G[x].QSR0.U,MODULE_EVADC.G[x].QSR1.U,MODULE_EVADC.G[x].QSR2.U(x=0,1,...,11)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   450   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   451  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   452  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   453      IfxEvadc_Status_noError              = 0, /**< \brief No error during api execution */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   454      IfxEvadc_Status_notInitialised       = 1, /**< \brief Appropriate initialisation not done */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   455      IfxEvadc_Status_invalidGroup         = 2, /**< \brief Invalid group number */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   456      IfxEvadc_Status_invalidChannel       = 3, /**< \brief Invalid channel number */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   457      IfxEvadc_Status_queueFull            = 4, /**< \brief Queue is full */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   458      IfxEvadc_Status_noAccess             = 5, /**< \brief Access to the group/channel is disabled */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   459      IfxEvadc_Status_channelsStillPending = 6  /**< \brief Conversion for some of the channels are still pending */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   460  } IfxEvadc_Status;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   461  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   462  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   463   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   464  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   465  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   466      IfxEvadc_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   467      IfxEvadc_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   468      IfxEvadc_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   469  } IfxEvadc_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   470  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   471  /** \brief trigger definition defined in MODULE_EVADC.G[x].QCTRL0.XTMODE(x=0,1,..,11)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   472   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   473  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   474  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   475      IfxEvadc_TriggerMode_noExternalTrigger = 0,  /**< \brief No external trigger */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   476      IfxEvadc_TriggerMode_uponFallingEdge   = 1,  /**< \brief Trigger event upon a falling edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   477      IfxEvadc_TriggerMode_uponRisingEdge    = 2,  /**< \brief Trigger event upon a rising edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   478      IfxEvadc_TriggerMode_uponAnyEdge       = 3   /**< \brief Trigger event upon any edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   479  } IfxEvadc_TriggerMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   480  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   481  /** \brief Trigger request source defined in MODULE_EVADC.G[x].QCTRLy.XTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   482   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   483  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   484  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   485      IfxEvadc_TriggerSource_0 = 0,      /**< \brief Input signal REQTRx_0  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   486      IfxEvadc_TriggerSource_1,          /**< \brief Input signal REQTRx_1  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   487      IfxEvadc_TriggerSource_2,          /**< \brief Input signal REQTRx_2  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   488      IfxEvadc_TriggerSource_3,          /**< \brief Input signal REQTRx_3  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   489      IfxEvadc_TriggerSource_4,          /**< \brief Input signal REQTRx_4  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   490      IfxEvadc_TriggerSource_5,          /**< \brief Input signal REQTRx_5  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   491      IfxEvadc_TriggerSource_6,          /**< \brief Input signal REQTRx_6  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   492      IfxEvadc_TriggerSource_7,          /**< \brief Input signal REQTRx_7  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   493      IfxEvadc_TriggerSource_8,          /**< \brief Input signal REQTRx_8  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   494      IfxEvadc_TriggerSource_9,          /**< \brief Input signal REQTRx_9  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   495      IfxEvadc_TriggerSource_10,         /**< \brief Input signal REQTRx_10  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   496      IfxEvadc_TriggerSource_11,         /**< \brief Input signal REQTRx_11  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   497      IfxEvadc_TriggerSource_12,         /**< \brief Input signal REQTRx_12  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   498      IfxEvadc_TriggerSource_13,         /**< \brief Input signal REQTRx_13  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   499      IfxEvadc_TriggerSource_14,         /**< \brief Input signal REQTRx_14  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   500      IfxEvadc_TriggerSource_15          /**< \brief Input signal REQTRx_15  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   501  } IfxEvadc_TriggerSource;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   502  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   503  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   504  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   505  /** \addtogroup IfxLld_Evadc_Std_FastCompare
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   506   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   507  /** \brief Selects the behaviour of BoundaryFlag in FCBFL.B.BFA
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   508   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   509  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   510  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   511      IfxEvadc_BoundaryFlagActivationMode_0 = 0,  /**< \brief Set boundary flag BFL if result FCR = 1 (input above the defined
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   512                                                   * band or compare value), clear if FCR = 0 (input below) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   513      IfxEvadc_BoundaryFlagActivationMode_1 = 1   /**< \brief Set boundary flag BFL if result FCR = 0 (input below the defined
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   514                                                   * band or compare value), clear if FCR = 1 (input above) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   515  } IfxEvadc_BoundaryFlagActivationMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   516  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   517  /** \brief Controls in in FCBFL.B.BFI options for whether to use Boundary Flag(FCM.B.BFL) directly or in a inverted format.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   518   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   519  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   520  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   521      IfxEvadc_BoundaryFlagInversionControl_direct = 0,  /**< \brief Use BFL directly */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   522      IfxEvadc_BoundaryFlagInversionControl_invert = 1   /**< \brief Use inverted BFL */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   523  } IfxEvadc_BoundaryFlagInversionControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   524  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   525  /** \brief Options for FCBFL.B.BFLNP to select Boundary Flag Node Pointer
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   526   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   527  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   528  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   529      IfxEvadc_BoundaryFlagNodePointer_commonBoundaryFlagOutput0 = 0,  /**< \brief Select common boundary flag output 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   530      IfxEvadc_BoundaryFlagNodePointer_commonBoundaryFlagOutput1 = 1,  /**< \brief Select common boundary flag output 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   531      IfxEvadc_BoundaryFlagNodePointer_commonBoundaryFlagOutput2 = 2,  /**< \brief Select common boundary flag output 2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   532      IfxEvadc_BoundaryFlagNodePointer_commonBoundaryFlagOutput3 = 3,  /**< \brief Select common boundary flag output 3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   533      IfxEvadc_BoundaryFlagNodePointer_sharedServiceRequestLine0 = 4,  /**< \brief Select shared service request line 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   534      IfxEvadc_BoundaryFlagNodePointer_sharedServiceRequestLine1 = 5,  /**< \brief Select shared service request line 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   535      IfxEvadc_BoundaryFlagNodePointer_sharedServiceRequestLine2 = 6,  /**< \brief Select shared service request line 2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   536      IfxEvadc_BoundaryFlagNodePointer_sharedServiceRequestLine3 = 7,  /**< \brief Select shared service request line 3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   537      IfxEvadc_BoundaryFlagNodePointer_disabled                  = 16  /**< \brief Disabled, no common output signal */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   538  } IfxEvadc_BoundaryFlagNodePointer;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   539  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   540  /** \brief Options for FCBFL.B.BFS to modify the Boundary Flag(FCM.B.BFL)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   541   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   542  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   543  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   544      IfxEvadc_BoundaryFlagSwControl_noAction = 0,  /**< \brief No Action */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   545      IfxEvadc_BoundaryFlagSwControl_clear    = 1,  /**< \brief Clear BFL */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   546      IfxEvadc_BoundaryFlagSwControl_set      = 2,  /**< \brief Set BFL */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   547      IfxEvadc_BoundaryFlagSwControl_toggle   = 3   /**< \brief Toggle BFL */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   548  } IfxEvadc_BoundaryFlagSwControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   549  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   550  /** \brief Channel Event Mode for configuring generation of events for Fast Compare channels in FCCTRL.B.CHEVMODE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   551   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   552  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   553  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   554      IfxEvadc_ChannelEventMode_never                    = 0, /**< \brief Never generate a service request */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   555      IfxEvadc_ChannelEventMode_aboveCompareValue        = 1, /**< \brief Generate a service request in case the result is above compare value */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   556      IfxEvadc_ChannelEventMode_belowCompareValue        = 2, /**< \brief Generate a service request in case the result is below compare value */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   557      IfxEvadc_ChannelEventMode_aboveOrBelowCompareValue = 3  /**< \brief Generate a service request in case the result switches to either level(above or below the compare value) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   558  } IfxEvadc_ChannelEventMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   559  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   560  /** \brief Defines the frequency of the analog converter clock f_ADCI (base clock for
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   561   * conversion steps), derived from the peripheral clock: f_ADCI = fADC / CP.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   562   * To be filled in FCCTRL.B.DIVA for Fast Compare channels & ANCFG.B.DIVA for other groups
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   563   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   564  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   565  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   566      IfxEvadc_ClockDividerFactor_maxFrequency = 0,  /**< \brief Max. frequency */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   567      IfxEvadc_ClockDividerFactor_2            = 1,  /**< \brief Frequency Divided by 2  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   568      IfxEvadc_ClockDividerFactor_3,                 /**< \brief Frequency Divided by 3  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   569      IfxEvadc_ClockDividerFactor_4,                 /**< \brief Frequency Divided by 4  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   570      IfxEvadc_ClockDividerFactor_5,                 /**< \brief Frequency Divided by 5  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   571      IfxEvadc_ClockDividerFactor_6,                 /**< \brief Frequency Divided by 6  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   572      IfxEvadc_ClockDividerFactor_7,                 /**< \brief Frequency Divided by 7  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   573      IfxEvadc_ClockDividerFactor_8,                 /**< \brief Frequency Divided by 8  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   574      IfxEvadc_ClockDividerFactor_9,                 /**< \brief Frequency Divided by 9  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   575      IfxEvadc_ClockDividerFactor_10,                /**< \brief Frequency Divided by 10  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   576      IfxEvadc_ClockDividerFactor_11,                /**< \brief Frequency Divided by 11  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   577      IfxEvadc_ClockDividerFactor_12,                /**< \brief Frequency Divided by 12  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   578      IfxEvadc_ClockDividerFactor_13,                /**< \brief Frequency Divided by 13  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   579      IfxEvadc_ClockDividerFactor_14,                /**< \brief Frequency Divided by 14  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   580      IfxEvadc_ClockDividerFactor_15,                /**< \brief Frequency Divided by 15  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   581      IfxEvadc_ClockDividerFactor_16,                /**< \brief Frequency Divided by 16  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   582      IfxEvadc_ClockDividerFactor_17,                /**< \brief Frequency Divided by 17  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   583      IfxEvadc_ClockDividerFactor_18,                /**< \brief Frequency Divided by 18  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   584      IfxEvadc_ClockDividerFactor_19,                /**< \brief Frequency Divided by 19  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   585      IfxEvadc_ClockDividerFactor_20,                /**< \brief Frequency Divided by 20  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   586      IfxEvadc_ClockDividerFactor_21,                /**< \brief Frequency Divided by 21  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   587      IfxEvadc_ClockDividerFactor_22,                /**< \brief Frequency Divided by 22  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   588      IfxEvadc_ClockDividerFactor_23,                /**< \brief Frequency Divided by 23  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   589      IfxEvadc_ClockDividerFactor_24,                /**< \brief Frequency Divided by 24  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   590      IfxEvadc_ClockDividerFactor_25,                /**< \brief Frequency Divided by 25  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   591      IfxEvadc_ClockDividerFactor_26,                /**< \brief Frequency Divided by 26  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   592      IfxEvadc_ClockDividerFactor_27,                /**< \brief Frequency Divided by 27  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   593      IfxEvadc_ClockDividerFactor_28,                /**< \brief Frequency Divided by 28  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   594      IfxEvadc_ClockDividerFactor_29,                /**< \brief Frequency Divided by 29  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   595      IfxEvadc_ClockDividerFactor_30,                /**< \brief Frequency Divided by 30  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   596      IfxEvadc_ClockDividerFactor_31,                /**< \brief Frequency Divided by 31  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   597      IfxEvadc_ClockDividerFactor_32                 /**< \brief Frequency Divided by 32  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   598  } IfxEvadc_ClockDividerFactor;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   599  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   600  /** \brief External Trigger Polarity to be set in FCCTRL.B.XTPOL
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   601   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   602  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   603  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   604      IfxEvadc_ExternalTriggerPolarity_direct   = 0, /**< \brief Use selected input signal directly */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   605      IfxEvadc_ExternalTriggerPolarity_inverted = 1  /**< \brief Invert selected input signal */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   606  } IfxEvadc_ExternalTriggerPolarity;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   607  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   608  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   609  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   610      IfxEvadc_FastCompareAnalogClockSynchronizationDelay_0 = 0,  /**< \brief No delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   611      IfxEvadc_FastCompareAnalogClockSynchronizationDelay_1 = 1,  /**< \brief 1 clock cycle delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   612      IfxEvadc_FastCompareAnalogClockSynchronizationDelay_2 = 2,  /**< \brief 2 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   613      IfxEvadc_FastCompareAnalogClockSynchronizationDelay_3 = 3   /**< \brief 3 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   614  } IfxEvadc_FastCompareAnalogClockSynchronizationDelay;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   615  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   616  /** \brief Settings for Analog Coverter Controller to be done in FCM.B.ANON
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   617   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   618  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   619  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   620      IfxEvadc_FastCompareAnalogConverterControl_off    = 0, /**< \brief Analog converter off */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   621      IfxEvadc_FastCompareAnalogConverterControl_normal = 1  /**< \brief Normal operation */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   622  } IfxEvadc_FastCompareAnalogConverterControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   623  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   624  /** \brief Defines the source of the value(s) in bitfield FCM.B.FCREF
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   625   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   626   * Note: Software can only write to bitfield FCM.B.FCREF, while AUE = 00B.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   627   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   628  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   629  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   630      IfxEvadc_FastCompareAutomaticUpdate_sw             = 0,  /**< \brief No automatic update.Value(s) written by software. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   631      IfxEvadc_FastCompareAutomaticUpdate_alternateValue = 1,  /**< \brief While gate is active (high), value is copied from bitfield FCM.B.FCRCOMPA and while gate is inactive (low), value is copied from bitfield FCM.B.FCRCOMPB */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   632      IfxEvadc_FastCompareAutomaticUpdate_rampCounter    = 2,  /**< \brief Value(s) copied from ramp counter on ramp start or counter
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   633                                                                * update. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   634      IfxEvadc_FastCompareAutomaticUpdate_analogSource   = 3   /**< \brief Value(s) written by the associated converter */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   635  } IfxEvadc_FastCompareAutomaticUpdate;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   636  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   637  /** \brief Defines the basic run conditions of the fast compare channel in FCM.B.RUNCOMP
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   638   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   639  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   640  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   641      IfxEvadc_FastCompareRunControl_stop      = 0, /**< \brief Stop, no operation */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   642      IfxEvadc_FastCompareRunControl_alwaysRun = 1  /**< \brief Always run */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   643  } IfxEvadc_FastCompareRunControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   644  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   645  /** \brief Criteria/mode settings for service request generation in FCM.B.SRG
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   646   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   647  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   648  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   649      IfxEvadc_FastCompareServiceRequestGeneration_off       = 0, /**< \brief No service requests are generated */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   650      IfxEvadc_FastCompareServiceRequestGeneration_rampEnd   = 1, /**< \brief Issue service request when the ramp counter stops */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   651      IfxEvadc_FastCompareServiceRequestGeneration_newValue  = 2, /**< \brief Issue service request when a value is written to FCREF */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   652      IfxEvadc_FastCompareServiceRequestGeneration_newResult = 3  /**< \brief Issue service request when a new result available */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   653  } IfxEvadc_FastCompareServiceRequestGeneration;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   654  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   655  /** \brief Gate Operating Mode to be filled in FCCTRL.B.GTMODE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   656   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   657  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   658  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   659      IfxEvadc_GateOperatingMode_noGateFunction     = 0,  /**< \brief No gate function */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   660      IfxEvadc_GateOperatingMode_alternateValueMode = 1,  /**< \brief Alternate value mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   661      IfxEvadc_GateOperatingMode_lockBoundaryFlag   = 2   /**< \brief Lock boundary flag */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   662  } IfxEvadc_GateOperatingMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   663  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   664  /** \brief Ramp direction setting in FCM.B.FCRDIR
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   665   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   666  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   667  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   668      IfxEvadc_RampDirection_down = 0,  /**< \brief Decrement ramp counter and stop when counter <= FCRCOMPB */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   669      IfxEvadc_RampDirection_up   = 1   /**< \brief Increment ramp counter and stop when counter >= FCRCOMPB */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   670  } IfxEvadc_RampDirection;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   671  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   672  /** \brief Defines the run conditions for the ramp generation in FCM.B.RUNRAMP
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   673   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   674  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   675  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   676      IfxEvadc_RampRunControl_stop = 0,  /**< \brief Stop, no operation */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   677      IfxEvadc_RampRunControl_1    = 1,  /**< \brief Start immediately when GxFCRAMP0/1 is written */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   678      IfxEvadc_RampRunControl_2    = 2,  /**< \brief Start upon the selected trigger event of signal REQTRx */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   679      IfxEvadc_RampRunControl_3    = 3   /**< \brief Start immediately when GxFCRAMP0/1 is written and
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   680                                          * stop upon the selected trigger event of signal REQTRx */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   681  } IfxEvadc_RampRunControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   682  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   683  /** \brief Sample timing sync settings for FCM.B.SSE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   684   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   685  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   686  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   687      IfxEvadc_SampleSynchronization_off                     = 0, /**< \brief No synchronization */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   688      IfxEvadc_SampleSynchronization_synchronizeSampleTiming = 1  /**< \brief Sample timing is synchronized.This is recommended for operation of several ADCs. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   689  } IfxEvadc_SampleSynchronization;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   690  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   691  /** \brief Trigger operating mode in Fast Compare channels, to be entered in FCCTRL.B.XTMODE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   692   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   693  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   694  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   695      IfxEvadc_TriggerOperatingMode_noExternalTrigger = 0,  /**< \brief No external trigger */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   696      IfxEvadc_TriggerOperatingMode_fallingEdge       = 1,  /**< \brief Trigger event upon a falling edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   697      IfxEvadc_TriggerOperatingMode_risingEdge        = 2,  /**< \brief Trigger event upon a rising edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   698      IfxEvadc_TriggerOperatingMode_anyEdge           = 3   /**< \brief Trigger event upon any edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   699  } IfxEvadc_TriggerOperatingMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   700  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   701  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   702  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   703  /** \brief Defines the way the analog clock is generated.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   704   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   705  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   706  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   707      IfxEvadc_AnalogClockGenerationMode_synchronized   = 0, /**< \brief Synchronized mode: Initial clock pulse is defined by the phase synchronizer */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   708      IfxEvadc_AnalogClockGenerationMode_unsynchronized = 1  /**< \brief Unsynchronized mode: The analog clock is generated independently. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   709  } IfxEvadc_AnalogClockGenerationMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   710  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   711  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   712  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   713      IfxEvadc_AnalogClockSynchronizationDelay_0 = 0,  /**< \brief No Delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   714      IfxEvadc_AnalogClockSynchronizationDelay_1 = 1,  /**< \brief 1 clock cycle delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   715      IfxEvadc_AnalogClockSynchronizationDelay_2 = 2,  /**< \brief 2 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   716      IfxEvadc_AnalogClockSynchronizationDelay_3 = 3,  /**< \brief 3 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   717      IfxEvadc_AnalogClockSynchronizationDelay_4 = 4,  /**< \brief 4 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   718      IfxEvadc_AnalogClockSynchronizationDelay_5 = 5,  /**< \brief 5 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   719      IfxEvadc_AnalogClockSynchronizationDelay_6 = 6,  /**< \brief 6 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   720      IfxEvadc_AnalogClockSynchronizationDelay_7 = 7   /**< \brief 7 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   721  } IfxEvadc_AnalogClockSynchronizationDelay;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   722  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   723  /** \brief Analog Input Precharge Control for Standard Conversions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   724   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   725  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   726  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   727      IfxEvadc_AnalogInputPrechargeControl_noPrecharge = 0,  /**< \brief No Precharge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   728      IfxEvadc_AnalogInputPrechargeControl_8Cycles     = 1,  /**< \brief Precharge for 8 clock cycles */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   729      IfxEvadc_AnalogInputPrechargeControl_16Cycles    = 2,  /**< \brief Precharge for 16 clock cycles */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   730      IfxEvadc_AnalogInputPrechargeControl_32cycles    = 3   /**< \brief Precharge for 32 clock cycles */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   731  } IfxEvadc_AnalogInputPrechargeControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   732  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   733  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   734  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   735      IfxEvadc_ArbitrationMode_0 = 0,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   736      IfxEvadc_ArbitrationMode_1 = 1
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   737  } IfxEvadc_ArbitrationMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   738  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   739  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   740  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   741      IfxEvadc_CalibrationSampleTimeControl_2 = 0,  /**< \brief 2*t_ADCI */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   742      IfxEvadc_CalibrationSampleTimeControl_4 = 1,  /**< \brief 4*t_ADCI */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   743      IfxEvadc_CalibrationSampleTimeControl_6 = 2,  /**< \brief 6*t_ADCI */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   744      IfxEvadc_CalibrationSampleTimeControl_8 = 3   /**< \brief 8*t_ADCI */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   745  } IfxEvadc_CalibrationSampleTimeControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   746  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   747  /** \brief Conversion Mode for standard Conversion
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   748   *  channel precision defined in MODULE_EVADC.G[x].CHCTR[y].B.ICLASS[y].B.CMS(x=0,1,...,11;y=0,1)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   749   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   750  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   751  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   752      IfxEvadc_ChannelNoiseReduction_standardConversion = 0,  /**< \brief Standard Conversions mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   753      IfxEvadc_ChannelNoiseReduction_level1             = 1,  /**< \brief Noise reduction conversion level 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   754      IfxEvadc_ChannelNoiseReduction_level2             = 2,  /**< \brief Noise reduction conversion level 2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   755      IfxEvadc_ChannelNoiseReduction_level3             = 3   /**< \brief Noise reduction conversion level 3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   756  } IfxEvadc_ChannelNoiseReduction;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   757  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   758  /** \brief Conversion Mode for EMUX Conversions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   759   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   760  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   761  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   762      IfxEvadc_ChannelNoiseReductionEMUX_standardConversion = 0,  /**< \brief Standard conversion */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   763      IfxEvadc_ChannelNoiseReductionEMUX_level1             = 1,  /**< \brief Noise reduction conversion level 1, 1 additional conversion step */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   764      IfxEvadc_ChannelNoiseReductionEMUX_level2             = 2,  /**< \brief Noise reduction conversion level 2, 3 additional conversion steps */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   765      IfxEvadc_ChannelNoiseReductionEMUX_level3             = 3   /**< \brief Noise reduction conversion level 3, 7 additional conversion steps */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   766  } IfxEvadc_ChannelNoiseReductionEMUX;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   767  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   768  /** \brief Data Modification Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   769   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   770  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   771  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   772      IfxEvadc_DataModificationMode_standardDataReduction = 0,  /**< \brief Standard Data Reduction */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   773      IfxEvadc_DataModificationMode_resultFilteringMode   = 1,  /**< \brief Result Filtering Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   774      IfxEvadc_DataModificationMode_differenceMode        = 2   /**< \brief Difference Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   775  } IfxEvadc_DataModificationMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   776  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   777  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   778  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   779      IfxEvadc_DataReductionControlMode_0  = 0,   /**< \brief If DMM=0b00, Data reduction disabled,if DMM=0b01, FIR:a=2,b=1,c=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   780      IfxEvadc_DataReductionControlMode_1  = 1,   /**< \brief If DMM=0b00, Accumulate 2 result values,if DMM=0b01, FIR:a=1,b=2,c=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   781      IfxEvadc_DataReductionControlMode_2  = 2,   /**< \brief If DMM=0b00, Accumulate 3 result values,if DMM=0b01, FIR:a=2,b=0,c=1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   782      IfxEvadc_DataReductionControlMode_3  = 3,   /**< \brief If DMM=0b00, Accumulate 4 result values,if DMM=0b01, FIR:a=1,b=1,c=1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   783      IfxEvadc_DataReductionControlMode_4  = 4,   /**< \brief If DMM=0b00, Accumulate 5 result values,if DMM=0b01, FIR:a=1,b=0,c=2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   784      IfxEvadc_DataReductionControlMode_5  = 5,   /**< \brief If DMM=0b00, Accumulate 6 result values,if DMM=0b01, FIR:a=3,b=1,c=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   785      IfxEvadc_DataReductionControlMode_6  = 6,   /**< \brief If DMM=0b00, Accumulate 7 result values,if DMM=0b01, FIR:a=2,b=2,c=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   786      IfxEvadc_DataReductionControlMode_7  = 7,   /**< \brief If DMM=0b00, Accumulate 8 result values,if DMM=0b01, FIR:a=1,b=3,c=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   787      IfxEvadc_DataReductionControlMode_8  = 8,   /**< \brief If DMM=0b00, Accumulate 9 result values,if DMM=0b01, FIR:a=3,b=0,c=1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   788      IfxEvadc_DataReductionControlMode_9  = 9,   /**< \brief If DMM=0b00, Accumulate 10 result values,if DMM=0b01, FIR:a=2,b=1,c=1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   789      IfxEvadc_DataReductionControlMode_10 = 10,  /**< \brief If DMM=0b00, Accumulate 11 result values,if DMM=0b01, FIR:a=1,b=2,c=1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   790      IfxEvadc_DataReductionControlMode_11 = 11,  /**< \brief If DMM=0b00, Accumulate 12 result values,if DMM=0b01, FIR:a=2,b=0,c=2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   791      IfxEvadc_DataReductionControlMode_12 = 12,  /**< \brief If DMM=0b00, Accumulate 13 result values,if DMM=0b01, FIR:a=1,b=1,c=2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   792      IfxEvadc_DataReductionControlMode_13 = 13,  /**< \brief If DMM=0b00, Accumulate 14 result values,if DMM=0b01, FIR:a=1,b=0,c=3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   793      IfxEvadc_DataReductionControlMode_14 = 14,  /**< \brief If DMM=0b00, Accumulate 15 result values,if DMM=0b01, IIR:a=2,b=2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   794      IfxEvadc_DataReductionControlMode_15 = 15   /**< \brief If DMM=0b00, Accumulate 16 result values,if DMM=0b01, IIR:a=3,b=4 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   795  } IfxEvadc_DataReductionControlMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   796  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   797  /** \brief Contains options for Idle Precharge levels
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   798   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   799  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   800  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   801      IfxEvadc_IdlePrecharge_currentLevel = 0,  /**< \brief The sampling capacitor keeps the current charge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   802      IfxEvadc_IdlePrecharge_referenceBy2 = 1   /**< \brief ThSampling capacitor is precharged to approx. half the reference when idle */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   803  } IfxEvadc_IdlePrecharge;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   804  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   805  /** \brief Selects the MSB conversion time(in terms of t_ADC)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   806   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   807  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   808  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   809      IfxEvadc_MsbConversionTime_singleClockCycle = 0,  /**< \brief 1 clock cycle for the MSB (standard) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   810      IfxEvadc_MsbConversionTime_doubleClockCycle = 1   /**< \brief 2 clock cycle for the MSB */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   811  } IfxEvadc_MsbConversionTime;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   812  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   813  /** \brief Reference Precharge Control
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   814   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   815  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   816  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   817      IfxEvadc_ReferencePrechargeControl_singleClockPhase  = 0, /**< \brief Precharge the reference input for 1 clock phase */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   818      IfxEvadc_ReferencePrechargeControl_singleClockPeriod = 1  /**< \brief Precharge the reference input for 1 clock period */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   819  } IfxEvadc_ReferencePrechargeControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   820  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   821  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   822  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   823      IfxEvadc_SpreadEarlySamplePointEMUXConversionsMode_nominal = 0,  /**< \brief Nominal sample timing */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   824      IfxEvadc_SpreadEarlySamplePointEMUXConversionsMode_spread  = 1   /**< \brief Spread sample timing, end of sample phase is varied */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   825  } IfxEvadc_SpreadEarlySamplePointEMUXConversionsMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   826  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   827  /** \brief Spread Early Sample Point for Standard Conversions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   828   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   829  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   830  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   831      IfxEvadc_SpreadEarlySamplePointStandardConversionsMode_nominal = 0,  /**< \brief Nominal sample timing */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   832      IfxEvadc_SpreadEarlySamplePointStandardConversionsMode_spread  = 1   /**< \brief Spread sample timing, end of sample phase is varied */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   833  } IfxEvadc_SpreadEarlySamplePointStandardConversionsMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   834  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   835  /** \brief The 0-1 transition of bit SUCAL initiates the start-up calibrationphase of
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   836   * all analog converters (except for the fast compare channels).
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   837   * Note: The start-up calibration will abort any running conversion
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   838   * and cannot be stopped before it is complete.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   839   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   840  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   841  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   842      IfxEvadc_StartupCalibration_noAction = 0,  /**< \brief No action */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   843      IfxEvadc_StartupCalibration_initiate = 1   /**< \brief Initiate the start-up calibration phase
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   844                                                  * (indication in bit GxARBCFG.CAL) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   845  } IfxEvadc_StartupCalibration;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   846  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   847  /** \brief Adjusts the analog circuitry to the supply voltage used in the application
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   848   * system. Make sure to keep SUPLEV = 0b00 or 0b01 in the case of a 5 V supply.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   849   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   850  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   851  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   852      IfxEvadc_SupplyVoltageLevelControl_automaticControl = 0,  /**< \brief Automatic control: voltage range is controlled by the power supply */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   853      IfxEvadc_SupplyVoltageLevelControl_upperVoltage     = 1,  /**< \brief Upper voltage range: assume a 5 V power supply is connected */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   854      IfxEvadc_SupplyVoltageLevelControl_lowerVoltage     = 2   /**< \brief Lower voltage range: assume a 3.3 V power supply is connected */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   855  } IfxEvadc_SupplyVoltageLevelControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   856  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   857  /** \brief Wait-for-Read Mode Enable
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   858   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   859  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   860  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   861      IfxEvadc_WaitForRead_overwriteMode = 0,  /**< \brief Overwrite Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   862      IfxEvadc_WaitForRead_enabled       = 1   /**< \brief Wait-for-read mode enabled for this register */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   863  } IfxEvadc_WaitForRead;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   864  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   865  /** \addtogroup IfxLld_Evadc_Std_Global
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   866   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   867  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   868  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   869  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   870  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   871  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   872  /** \brief access function to enable/disable  wait for read mode for result registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   873   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   874   * \param resultIdx result register index
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   875   * \param enabled wait for read mode enabled/disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   876   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   877   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   878  IFX_INLINE void IfxEvadc_configureWaitForReadMode(Ifx_EVADC_G *group, uint32 resultIdx, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   879  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   880  /** \brief access function to enable/disable  wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   881   * \param evadc pointer to the EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   882   * \param enabled wait for read mode enabled/disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   883   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   884   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   885  IFX_INLINE void IfxEvadc_configureWaitForReadModeForGlobalResultRegister(Ifx_EVADC *evadc, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   886  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   887  /** \brief get the ADC Module  noise reduction level
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   888   * \param evadc pointer to EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   889   * \param inputClassNum Adc Module input Class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   890   * \return Adc input class noise reduction level
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   891   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   892  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getGlobalConversionMode(Ifx_EVADC *evadc, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   893  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   894  /** \brief return conversion result stored in the Global result Register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   895   * \param evadc pointer to the EVADC module
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   896   * \return global result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   897   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   898   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   899   * Ifx_EVADC* evadc = &MODULE_EVADC; // module pointer
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   900   * IfxEvadc_GroupId groupId = IfxEvadc_GroupId0; // for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   901   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   902   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   903   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   904   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   905   * IfxEvadc_configureWaitForReadModeForGlobalResultRegister(evadc, TRUE);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   906   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   907   * // enable all arbiter request sources
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   908   * adcGroupConfig.arbiter.requestSlotQueue0Enabled           = TRUE; // enable Queue0 mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   909   * // enable all gates in "always" mode (no edge detection)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   910   * adcGroupConfig.queueRequest[0].triggerConfig.gatingMode = IfxEvadc_GatingMode_always;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   911   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   912   * // Add channel to queue with refill enabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   913   *  IfxEvadc_Adc_addToQueue(&adcChannel, IFXEVADC_QUEUE_REFILL, IfxEvadc_RequestSource_queue0);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   914   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   915   *  // start the Queue
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   916   *  IfxEvadc_Adc_startQueue(&adcGroup, IfxEvadc_RequestSource_queue0);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   917   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   918   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   919   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   920   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   921   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   922   * Ifx_EVADC_GLOB.RES result;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   923   * result = IfxVadc_getGlobalResult (evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   924   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   925   * \endcode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   926   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   927   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   928  IFX_INLINE Ifx_EVADC_GLOB_RES IfxEvadc_getGlobalResult(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   929  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   930  /** \brief Get Sample Time in sec
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   931   * \param evadc Pointer to EVADC Module
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   932   * \param inputClassNum ADC Input Class Number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   933   * \param analogFrequency ADC module analog frequency in Hz
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   934   * \return ADC input class channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   935   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   936  IFX_INLINE float32 IfxEvadc_getGlobalSampleTime(Ifx_EVADC *evadc, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   937  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   938  /** \brief Get conversion result (Function does not care about the alignment)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   939   * value = raw * gain + offset.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   940   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   941   * \param resultIdx result register index
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   942   * \return scaled Conversion result
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   943   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   944   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   945   * Ifx_EVADC_G* group = &MODULE_EVADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   946   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   947   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   948   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   949   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   950   * IfxEvadc_configureWaitForReadMode(group,IfxEvadc_ChannelResult0, TRUE);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   951   * IfxEvadc_configureWaitForReadMode(group,IfxEvadc_ChannelResult1, TRUE);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   952   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   953   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   954   * // Add channel to queue with refill enabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   955   *  IfxEvadc_Adc_addToQueue(&adcChannel, IfxEvadc_RequestSource_queue0, IFXEVADC_QUEUE_REFILL);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   956   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   957   * // start the Queue
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   958   *  IfxEvadc_Adc_startQueue(&adcGroup, IfxEvadc_RequestSource_queue0);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   959   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   960   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   961   * // wait for conversion to finish
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   962   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   963   * // fetch the result of conversion from result register 0 for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   964   * Ifx_EVADC_G_RES result;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   965   * result = IfxEvadc_getResult(group, IfxEvadc_ChannelResult0);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   966   * \endcode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   967   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   968   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   969  IFX_INLINE Ifx_EVADC_G_RES IfxEvadc_getResult(Ifx_EVADC_G *group, uint32 resultIdx);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   970  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   971  /** \brief Sets the sample time in sec of ADC global class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   972   * \param evadc pointer to EVADC module registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   973   * \param groupInputClassNum group input class  number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   974   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   975   * \param sampleTime the requested sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   976   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   977   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   978  IFX_INLINE void IfxEvadc_setGlobalSampleTime(Ifx_EVADC *evadc, uint8 groupInputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   979  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   980  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   981  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   982  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   983  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   984  /** \brief Get conversion result (Function does not care about the alignment)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   985   * value = raw * gain + offset.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   986   * \param evadc EVADC module pointer
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   987   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   988   * \param channel channel Id
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   989   * \param sourceType type of request source
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   990   * \return scaled Conversion result
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   991   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   992   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   993   * Ifx_EVADC evadc;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   994   * evadc.evadc = &MODULE_EVADC;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   995   * Ifx_EVADC_G* group = &MODULE_EVADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   996   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   997   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   998   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   999   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1000   * IfxEvadc_configureWaitForReadMode(group,IfxEvadc_ChannelResult0, TRUE);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1001   * IfxEvadc_configureWaitForReadMode(group,IfxEvadc_ChannelResult1, TRUE);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1002   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1003   * // Add channel to queue with refill enabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1004   *  IfxEvadc_Adc_addToQueue(&adcChannel, IfxEvadc_RequestSource_queue0, IFXEVADC_QUEUE_REFILL);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1005   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1006   * // start the Queue
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1007   *  IfxEvadc_Adc_startQueue(&adcGroup, IfxEvadc_RequestSource_queue0);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1008   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1009   * // fetch the result of conversion for channel 2 of group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1010   * Ifx_EVADC_G_RESresult2;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1011   * result = IfxEvadc_getResultBasedOnRequestSource(&evadc, group, IfxVadc_ChannelId2,IfxEvadc_RequestSource_queue0 );
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1012   * Ifx_EVADC_G_RESresult5;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1013   * result = IfxEvadc_getResultBasedOnRequestSource(&evadc, group, IfxEvadc_ChannelId5,IfxEvadc_RequestSource_queue0 );
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1014   * \endcode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1015   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1016   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1017  IFX_EXTERN Ifx_EVADC_G_RES IfxEvadc_getResultBasedOnRequestSource(Ifx_EVADC *evadc, Ifx_EVADC_G *group, IfxEvadc_ChannelId channel, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1018  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1019  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1020  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1021  /** \addtogroup IfxLld_Evadc_Std_QueueRequest
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1022   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1023  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1024  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1025  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1026  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1027  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1028  /** \brief Clears all the queue entries including backup stage.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1029   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1030   * \param flushQueue Whether queue is cleared or not.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1031   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1032   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1033   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1034  IFX_INLINE void IfxEvadc_clearQueue(Ifx_EVADC_G *evadcG, boolean flushQueue, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1035  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1036  /** \brief Starts a queue of a group by generating a trigger event through software
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1037   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1038   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1039   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1040   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1041  IFX_INLINE void IfxEvadc_startQueue(Ifx_EVADC_G *group, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1042  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1043  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1044  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1045  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1046  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1047  /** \brief Add an entry to the queue of a group for the specified channel with the following options set:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1048   * refill incase of aborted conversion
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1049   * source interrupt enable/disable
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1050   * external trigger control of the aborted conversion
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1051   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1052   * \param channel specifies channel Id
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1053   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1054   * \param options specifies the refill, source interrupt enable/disable and external trigger control selection
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1055   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1056   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1057   * For coding example see: \ref IfxEvadc_Adc_getResult
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1058   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1059   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1060  IFX_EXTERN void IfxEvadc_addToQueue(Ifx_EVADC_G *group, IfxEvadc_ChannelId channel, IfxEvadc_RequestSource sourceType, uint32 options);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1061  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1062  /** \brief Disables the external trigger.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1063   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1064   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1065   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1066   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1067  IFX_EXTERN void IfxEvadc_disableQueueSlotExternalTrigger(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1068  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1069  /** \brief Enables the external trigger.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1070   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1071   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1072   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1073   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1074  IFX_EXTERN void IfxEvadc_enableQueueSlotExternalTrigger(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1075  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1076  /** \brief Gets the requested queue slot gating mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1077   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1078   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1079   * \return requested queue0 slot gating mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1080   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1081  IFX_EXTERN IfxEvadc_GatingMode IfxEvadc_getQueueSlotGatingMode(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1082  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1083  /** \brief Gets the requested queue slot gating input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1084   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1085   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1086   * \return requested queue0 slot gating input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1087   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1088  IFX_EXTERN IfxEvadc_GatingSource IfxEvadc_getQueueSlotGatingSource(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1089  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1090  /** \brief Gets the request queue slot priority.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1091   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1092   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1093   * \return requested queue0 slot priority.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1094   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1095  IFX_EXTERN IfxEvadc_RequestSlotPriority IfxEvadc_getQueueSlotPriority(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1096  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1097  /** \brief Gets the requested queue slot start mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1098   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1099   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1100   * \return requested queue slot start mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1101   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1102  IFX_EXTERN IfxEvadc_RequestSlotStartMode IfxEvadc_getQueueSlotStartMode(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1103  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1104  /** \brief Gets the requested queue slot trigger input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1105   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1106   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1107   * \return requested queue slot trigger input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1108   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1109  IFX_EXTERN IfxEvadc_TriggerSource IfxEvadc_getQueueSlotTriggerInput(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1110  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1111  /** \brief Gets the requested queue slot trigger mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1112   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1113   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1114   * \return requested queue slot trigger mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1115   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1116  IFX_EXTERN IfxEvadc_TriggerMode IfxEvadc_getQueueSlotTriggerMode(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1117  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1118  /** \brief Gives the status of the Queue of a group by returning non zero value if the Queue is full
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1119   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1120   * \param sourceType sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1121   * \return status of the Queue
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1122   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1123   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1124   * Ifx_EVADC_G* group = &MODULE_EVADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1125   * boolean queueFull = (IfxEvadc_getQueueStatus(group)==IfxEvadc_Status_queueFull)?TRUE:FALSE; // get Queue status for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1126   * \endcode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1127   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1128   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1129  IFX_EXTERN IfxEvadc_Status IfxEvadc_getQueueStatus(Ifx_EVADC_G *group, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1130  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1131  /** \brief Returns the queue slot requested status.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1132   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1133   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1134   * \return TRUE if queue slot request enabled otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1135   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1136  IFX_EXTERN boolean IfxEvadc_isRequestQueueSlotEnabled(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1137  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1138  /** \brief Sets the gating configurations.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1139   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1140   * \param gatingSource gate input for group.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1141   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1142   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1143   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1144   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1145  IFX_EXTERN void IfxEvadc_setQueueSlotGatingConfig(Ifx_EVADC_G *evadcG, IfxEvadc_GatingSource gatingSource, IfxEvadc_GatingMode gatingMode, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1146  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1147  /** \brief Sets the trigger operating configurations.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1148   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1149   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1150   * \param triggerSource trigger input for group.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1151   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1152   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1153   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1154  IFX_EXTERN void IfxEvadc_setQueueSlotTriggerOperatingConfig(Ifx_EVADC_G *evadcG, IfxEvadc_TriggerMode triggerMode, IfxEvadc_TriggerSource triggerSource, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1155  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1156  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1157  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1158  /** \addtogroup IfxLld_Evadc_Std_IO
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1159   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1160  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1161  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1162  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1163  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1164  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1165  /** \brief Initializes a EMUX output
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1166   * \param emux the Emux Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1167   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1168   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1169   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1170   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1171  IFX_INLINE void IfxEvadc_initEmuxPin(const IfxEvadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1172  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1173  /** \brief Initializes a GxBFL output
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1174   * \param gxBfl the GxBFL Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1175   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1176   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1177   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1178   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1179  IFX_INLINE void IfxEvadc_initGxBflPin(const IfxEvadc_GxBfl_Out *gxBfl, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1180  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1181  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1182  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1183  /** \addtogroup IfxLld_Evadc_Std_Frequency
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1184   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1185  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1186  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1187  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1188  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1189  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1190  /** \brief Calculate the time using analog frequency.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1191   * \param analogFrequency analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1192   * \param sampleTime sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1193   * \return sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1194   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1195  IFX_INLINE uint32 IfxEvadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1196  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1197  /** \brief Returns the configured Fadci EVADC analog clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1198   * \param group pointer to the EVADC registers group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1199   * \return the configured Fadci EVADC analog clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1200   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1201  IFX_INLINE float32 IfxEvadc_getAdcAnalogFrequency(Ifx_EVADC_G *group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1202  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1203  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1204  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1205  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1206  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1207  /** \brief configured Fadcd EVADC digital clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1208   * \param evadc pointer to the base of EVADC registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1209   * \return the configured Fadcd EVADC digital clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1210   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1211  IFX_EXTERN float32 IfxEvadc_getAdcDigitalFrequency(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1212  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1213  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1214  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1215  /** \addtogroup IfxLld_Evadc_Std_Group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1216   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1217  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1218  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1219  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1220  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1221  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1222  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1223   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1224   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1225   * \param delay Selects an additional clock cycle for the conversion step of the MSB
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1228  IFX_INLINE void IfxEvadc_setAnalogClockSynchronizationDelay(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_AnalogClockSynchronizationDelay delay);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1229  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1230  /** \brief Select calibration sample time in units of t_ADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1231   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1232   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1233   * \param mode Select calibration sample time in units of t_ADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1234   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1235   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1236  IFX_INLINE void IfxEvadc_setCalibrationSampleTime(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_CalibrationSampleTimeControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1237  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1238  /** \brief Clears the all group requests.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1239   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1242  IFX_INLINE void IfxEvadc_clearAllResultRequests(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1243  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1244  /** \brief Gets the EVADC input class channel conversion mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1245   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1246   * \param inputClassNum EVADC input class number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1247   * \return EVADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1248   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1249  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1250  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1251  /** \brief Get conversion result for the group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1252   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1253   * \param results pointer to scaled conversion results
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1254   * \param resultOffset offset for the first result
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1255   * \param numResults number of results
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1256   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1257   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1258   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1259   * Here,Three channels are used for queued transfers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1260   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1261   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1262   * unsigned savedGate = adcGroup.module.evadc->G[adcGroup.groupId].Queue0.QMR0.B.ENGT;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1263   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1264   * // IMPORTANT: for deterministic results we have to disable the queue gate
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1265   * // while filling the queue, otherwise results could be output in the wrong order
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1266   * adcGroup.module.evadc->G[adcGroup.groupId].Queue0.QMR0.B.ENGT = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1267   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1268   * // create channel config
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1269   * IfxEvadc_Adc_ChannelConfig adcChannelConfig[3];
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1270   * IfxEvadc_Adc_Channel adcChannel[3];
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1271   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1272   * for(int chnIx=0; chnIx<3; ++chnIx) {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1273   * IfxEvadc_Adc_initChannelConfig(&adcChannelConfig[chnIx], &adcGroup);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1274   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1275   * adcChannelConfig[chnIx].channelId = (IfxEvadc_ChannelId)(chnIx);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1276   * adcChannelConfig[chnIx].resultRegister = IfxEvadc_ChannelResult_1; // use result register #1 for all channels
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1277   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1278   * // initialize the channel
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1279   * IfxEvadc_Adc_initChannel(&adcChannel[chnIx], &adcChannelConfig[chnIx]);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1280   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1281   * // Add channel to queue with refill enabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1282   * IfxEvadc_Adc_addToQueue(&adcChannel[chnIx], IfxEvadc_RequestSource_queue0, IFXEVADC_QUEUE_REFILL);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1283   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1284   * // restore previous gate config
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1285   * adcGroup.module.evadc->G[adcGroup.groupId].Queue0.QMR0.B.ENGT = savedGate;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1286   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1287   * // start the Queue
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1288   * IfxEvadc_Adc_startQueue(&adcGroup,IfxEvadc_RequestSource_queue0); // just for the case that somebody copy&pastes the code - the queue has already been started in previous test
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1289   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1290   * Ifx_EVADC_G_RES results[10];
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1291   * result = IfxEvadc_getGroupResult(group, results, 0, 2);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1292   * \endcode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1293   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1294   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1295  IFX_INLINE void IfxEvadc_getGroupResult(Ifx_EVADC_G *group, Ifx_EVADC_G_RES *results, uint32 resultOffset, uint32 numResults);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1296  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1297  /** \brief Gets the EVADC input class channel sample time.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1298   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1299   * \param inputClassNum ADC input class number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1300   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1301   * \return ADC input class channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1302   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1303  IFX_INLINE float32 IfxEvadc_getGroupSampleTime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1304  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1305  /** \brief Gets the configured master index.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1306   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1307   * \return configured master kernel index.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1308   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1309  IFX_INLINE uint8 IfxEvadc_getMasterIndex(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1310  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1311  /** \brief Selects the chargingmode/voltage level in idle mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1312   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1313   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1314   * \param mode 0 - No precharge, the sampling capacitor keeps the current charge
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1315   * 1 - The sampling capacitor is precharged to approx. half the reference when idle
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1316   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1317   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1318  IFX_INLINE void IfxEvadc_selectIdlePrechargeLevel(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_IdlePrecharge mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1319  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1320  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1321   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1322   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1323   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1324   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1325  IFX_INLINE void IfxEvadc_enableInputBuffer(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1326  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1327  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1328   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1329   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1330   * \param duration Selects the amount of time for reference input precharging
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1331   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1332   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1333  IFX_INLINE void IfxEvadc_setReferencePrechargeDuration(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_ReferencePrechargeControl duration);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1334  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1335  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1336   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1337   * \param group EVADC Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1338   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1339   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1340  IFX_INLINE void IfxEvadc_enableReferencePrecharge(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1341  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1342  /** \brief Resets the ADC group.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1343   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1344   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1345   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1346  IFX_INLINE void IfxEvadc_resetGroup(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1347  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1348  /** \brief Selects whether sample synchronization must be performed or not.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1349   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1350   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1351   * \param mode Sample Synchronization Options
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1352   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1353   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1354  IFX_INLINE void IfxEvadc_setSampleSynchronizationMode(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_SampleSynchronization mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1355  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1356  /** \brief Selects an additional clock cycle for the conversion step of the MSB.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1357   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1358   * \param group EVADC Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1359   * \param mode Selects an single or double clock cycle(s) for the conversion step of the MSB
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1360   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1361   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1362  IFX_INLINE void IfxEvadc_selectDoubleClockForMSBConversion(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_MsbConversionTime mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1363  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1364  /** \brief Sets analog converter group number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1365   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1366   * \param analogConverterMode group analog converter mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1367   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1368   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1369  IFX_INLINE void IfxEvadc_setAnalogConvertControl(Ifx_EVADC_G *evadcG, IfxEvadc_AnalogConverterMode analogConverterMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1370  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1371  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1372   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1373   * \param inputClassNum Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1374   * \param mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1375   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1376   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1377  IFX_INLINE void IfxEvadc_setAnalogInputPrechargeControlEMUX(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_AnalogInputPrechargeControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1378  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1379  /** \brief Analog Input Precharge Control for Standard Conversions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1380   * Buffer must be enabled by GxANCFG.B.BE = 1
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1381   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1382   * \param inputClassNum Class No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1383   * \param mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1384   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1385   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1386  IFX_INLINE void IfxEvadc_setAnalogInputPrechargeControlStandard(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_AnalogInputPrechargeControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1387  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1388  /** \brief Sets the ADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1389   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1390   * \param inputClassNum input class number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1391   * \param conversionMode ADC input class channel Conversion Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1392   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1393   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1394  IFX_INLINE void IfxEvadc_setGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_ChannelNoiseReduction conversionMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1395  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1396  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1397   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1398   * \param inputClassNum Class No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1399   * \param conversionMode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1400   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1401   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1402  IFX_INLINE void IfxEvadc_setGroupConversionModeEMUX(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_ChannelNoiseReductionEMUX conversionMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1403  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1404  /** \brief Sets the ADC input class sample time ticks.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1405   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1406   * \param inputClassNum input class number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1407   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1408   * \param sampleTime request sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1409   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1410   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1411  IFX_INLINE void IfxEvadc_setGroupSampleTime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1412  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1413  /** \brief Set the additional number of cycles(in addition to 2) in sample time.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1414   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1415   * \param inputClassNum Class No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1416   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1417   * \param sampleTime request sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1418   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1419   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1420  IFX_INLINE void IfxEvadc_setGroupSampleTimeEMUX(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1421  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1422  /** \brief Sets the master index.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1423   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1424   * \param masterIndex master index.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1425   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1426   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1427  IFX_INLINE void IfxEvadc_setMasterIndex(Ifx_EVADC_G *evadcG, uint8 masterIndex);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1428  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1429  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1430   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1431   * \param inputClassNum Class No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1432   * \param mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1433   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1434   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1435  IFX_INLINE void IfxEvadc_spreadEarlySamplePointEMUXConversions(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_SpreadEarlySamplePointEMUXConversionsMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1436  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1437  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1438   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1439   * \param inputClassNum Class No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1440   * \param mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1441   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1442   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1443  IFX_INLINE void IfxEvadc_spreadEarlySamplePointStandardConversions(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_SpreadEarlySamplePointStandardConversionsMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1444  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1445  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1446  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1447  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1448  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1449  /** \brief Sets the Arbiter slot configurations.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1450   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1451   * \param slotEnable enable/disable of slot.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1452   * \param prio channel request priority.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1453   * \param mode Channel Slot start mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1454   * \param slot channel slot Request source.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1455   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1456   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1457  IFX_EXTERN void IfxEvadc_setArbiterPriority(Ifx_EVADC_G *evadcG, boolean slotEnable, IfxEvadc_RequestSlotPriority prio, IfxEvadc_RequestSlotStartMode mode, IfxEvadc_RequestSource slot);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1458  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1459  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1460  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1461  /** \addtogroup IfxLld_Evadc_Std_Module
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1462   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1463  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1464  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1465  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1466  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1467  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1468  /** \brief Disable EVADC kernel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1469   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1470   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1471   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1472  IFX_INLINE void IfxEvadc_disableModule(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1473  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1474  /** \brief Disables the post calibration.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1475   * \param evadcG pointer to the base of EVADC Grroup registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1476   * \param group Index of the group.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1477   * \param enabled disable or not.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1478   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1479   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1480  IFX_INLINE void IfxEvadc_disablePostCalibration(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1481  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1482  /** \brief Enable EVADC kernel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1483   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1484   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1485   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1486  IFX_INLINE void IfxEvadc_enableModule(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1487  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1488  /** \brief gets ADC Calibration Flag CAL status.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1489   * \param evadc pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1490   * \param adcCalGroupNum ADC CAL group number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1491   * \return CAL group status.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1492   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1493  IFX_INLINE uint8 IfxEvadc_getAdcCalibrationActiveState(Ifx_EVADC *evadc, uint8 adcCalGroupNum);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1494  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1495  /** \brief Gets the global control configuration value.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1496   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1497   * \return global control configuration value.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1498   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1499  IFX_INLINE Ifx_EVADC_GLOBCFG IfxEvadc_getGlobalConfigValue(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1500  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1501  /** \brief Gives the SRC source address.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1502   * \param group Index of the group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1503   * \param index SRC number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1504   * \return SRC source address
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1505   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1506  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEvadc_getSrcAddress(IfxEvadc_GroupId group, IfxEvadc_SrcNr index);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1507  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1508  /** \brief get status of GLOBCFG.SUCAL Bit field
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1509   * \param evadc Pointer to EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1510   * \return status of GLOBCFG.SUCAL Bit field
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1511   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1512  IFX_INLINE boolean IfxEvadc_getStartupCalibrationStatus(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1513  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1514  /** \brief Initialises ADC converter clock.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1515   * \param evadc Pointer to EVADC  SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1516   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1517   * \param converterClockDivider ADC converter clock divider.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1518   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1519   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1520  IFX_INLINE void IfxEvadc_initialiseAdcConverterClock(Ifx_EVADC *evadc, Ifx_EVADC_G *evadcG, IfxEvadc_ClockDividerFactor converterClockDivider);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1521  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1522  /** \brief initiates the calibration pulse phase.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1523   * \param evadc pointer to the base of EVADC registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1524   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1525   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1526  IFX_INLINE void IfxEvadc_initiateStartupCalibration(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1527  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1528  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1529   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1530   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1531   * \param evadc Pointer to EVADC module registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1532   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1533   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1534  IFX_INLINE boolean IfxEvadc_isModuleSuspended(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1535  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1536  /** \brief Sets the channel conversion mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1537   * \param evadc pointer to EVADC module registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1538   * \param InputClassNum input class  number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1539   * \param conversionMode ADC conversion Mode. Improves the precision of conversion
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1540   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1541   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1542  IFX_INLINE void IfxEvadc_setGlobalConversionMode(Ifx_EVADC *evadc, uint8 InputClassNum, IfxEvadc_ChannelNoiseReduction conversionMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1543  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1544  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1545   * \param evadc pointer to EVADC registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1546   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1547   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1548   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1549  IFX_INLINE void IfxEvadc_setSleepMode(Ifx_EVADC *evadc, IfxEvadc_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1550  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1551  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1552   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1553   * \param evadc Pointer to EVADC module registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1554   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1555   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1556   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1557  IFX_INLINE void IfxEvadc_setSuspendMode(Ifx_EVADC *evadc, IfxEvadc_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1558  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1559  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1560  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1561  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1562  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1563  /** \brief Disable write access to the EVADC config/control registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1564   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1565   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be disabled.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1566   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1567   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1568  IFX_EXTERN void IfxEvadc_disableAccess(Ifx_EVADC *evadc, IfxEvadc_Protection protectionSet);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1569  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1570  /** \brief Enable write access to the EVADC config/control registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1571   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1572   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be enabled.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1573   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1574   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1575  IFX_EXTERN void IfxEvadc_enableAccess(Ifx_EVADC *evadc, IfxEvadc_Protection protectionSet);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1576  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1577  /** \brief ADC Module Frequency in Hz
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1578   * \param evadc Pointer to EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1579   * \return module frequency
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1580   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1581  IFX_EXTERN float32 IfxEvadc_getAdcModuleFrequency(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1582  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1583  /** \brief Configure the ADC analog clock.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1584   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1585   * \param fAdcI ADC analog clock clock frequency in Hz. Range = [5000000, 10000000].
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1586   * \param group Pointer to EVADC Group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1587   * \return ADC analog clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1588   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1589  IFX_EXTERN uint32 IfxEvadc_initializeFAdcI(Ifx_EVADC *evadc, uint32 fAdcI, Ifx_EVADC_G *group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1590  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1591  /** \brief Resets the kernel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1592   * \param evadc pointer to the  EVADC Module
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1593   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1594   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1595  IFX_EXTERN void IfxEvadc_resetModule(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1596  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1597  /** \brief Starts ADC calibration and wait for the end of the calibration process.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1598   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1599   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1600   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1601  IFX_EXTERN void IfxEvadc_startupCalibration(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1602  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1603  /** \brief SW workaround of EVADC Master/Slave conversion jitter issue(MCMETILLD-910)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1604   * \param evadc Pointer to EVADC module registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1605   * \return Used for detecting failure in either OCDS Debug Active State Activation or Trigger Line TL1 Activation or both.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1606   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1607  IFX_EXTERN boolean IfxEvadc_syncConvWorkAround(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1608  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1609  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1610  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1611  /** \addtogroup IfxLld_Evadc_Std_Channel
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1612   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1613  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1614  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1615  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1616  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1617  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1618  /** \brief Clears the channel request.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1619   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1620   * \param channelId channel id whose request to be cleared.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1621   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1622   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1623  IFX_INLINE void IfxEvadc_clearChannelRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelId);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1624  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1625  /** \brief Enables the FIFO mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1626   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1627   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1628   * \param fifoMode FIFO mode .
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1629   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1630   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1631  IFX_INLINE void IfxEvadc_enableFifoMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, IfxEvadc_FifoMode fifoMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1632  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1633  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1634   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1635   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1636   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1637   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1638  IFX_INLINE void IfxEvadc_enableServiceRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1639  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1640  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1641   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1642   * \param resultRegister
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1643   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1644   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1645  IFX_INLINE void IfxEvadc_disableServiceRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1646  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1647  /** \brief Gets the current ADC channel control configurations.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1648   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1649   * \param channelIndex EVADC channel number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1650   * \return current ADC channel control configuration.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1651   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1652  IFX_INLINE Ifx_EVADC_G_CHCTR IfxEvadc_getChannelControlConfig(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1653  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1654  /** \brief get channel Input class
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1655   * \param evadcG Pointer to EVADC Group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1656   * \param channelIndex Specifies channel Id
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1657   * \return Input class
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1658   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1659  IFX_INLINE IfxEvadc_InputClasses IfxEvadc_getChannelInputclass(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1660  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1661  /** \brief Gets the channel result service request node pointer 0.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1662   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1663   * \return channel result service request node pointer 0.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1664   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1665  IFX_INLINE Ifx_EVADC_G_REVNP0 IfxEvadc_getChannelResultServiceRequestNodePointer0(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1666  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1667  /** \brief Gets the channel result service request node pointer 1.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1668   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1669   * \return channel result service request node pointer 1.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1670   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1671  IFX_INLINE Ifx_EVADC_G_REVNP1 IfxEvadc_getChannelResultServiceRequestNodePointer1(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1672  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1673  /** \brief Gets the channel service request node pointer.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1674   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1675   * \return channel service request node pointer.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1676   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1677  IFX_INLINE Ifx_EVADC_G_CEVNP0 IfxEvadc_getChannelServiceRequestNodePointer0(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1678  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1679  /** \brief get the channel service request node pointer (CH8--CH15)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1680   * \param evadcG pointer to EVADC Group register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1681   * \return Channel service request node pointer for CH8 to CH15
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1682   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1683  IFX_INLINE Ifx_EVADC_G_CEVNP1 IfxEvadc_getChannelServiceRequestNodePointer1(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1684  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1685  /** \brief Selects boundary extension.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1686   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1687   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1688   * \param boundaryMode boundary extension mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1689   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1690   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1691  IFX_INLINE void IfxEvadc_setBoundaryMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_BoundaryExtension boundaryMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1692  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1693  /** \brief Sets the channel event service request line.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1694   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1695   * \param channelSrcNr channel event Service Node.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1696   * \param channel channel number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1697   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1698   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1699  IFX_INLINE void IfxEvadc_setChannelEventNodePointer0(Ifx_EVADC_G *evadcG, IfxEvadc_SrcNr channelSrcNr, IfxEvadc_ChannelId channel);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1700  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1701  /** \brief set channel event node pointer(channel 8- channel 15)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1702   * \param evadcG pointer to the EVADC Group register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1703   * \param channelSrcNr service Request
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1704   * \param channel specifies channel ID
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1705   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1706   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1707  IFX_INLINE void IfxEvadc_setChannelEventNodePointer1(Ifx_EVADC_G *evadcG, IfxEvadc_SrcNr channelSrcNr, IfxEvadc_ChannelId channel);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1708  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1709  /** \brief Sets the channel input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1710   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1711   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1712   * \param inputClass channel input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1713   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1714   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1715  IFX_INLINE void IfxEvadc_setChannelInputClass(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_InputClasses inputClass);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1716  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1717  /** \brief Sets the channel event mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1718   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1719   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1720   * \param limitCheck channel event mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1721   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1722   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1723  IFX_INLINE void IfxEvadc_setChannelLimitCheckMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_LimitCheck limitCheck);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1724  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1725  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1726   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1727   * \param resultRegister
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1728   * \param mode 0b00 Standard data reduction (accumulation)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1729   * 0b01 Result filtering mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1730   * 0b10 Difference mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1731   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1732   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1733  IFX_INLINE void IfxEvadc_setDataModificationMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, IfxEvadc_DataModificationMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1734  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1735  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1736   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1737   * \param resultRegister Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1738   * \param mode Defines result values stored/accumulated for the final result.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1739   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1740   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1741  IFX_INLINE void IfxEvadc_setDataReductionControlMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, uint32 mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1742  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1743  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1744   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1745   * \param resultRegister
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1746   * \param mode 0b00 - Separate result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1747   * 0b01 - Part of a FIFO structure: copy each new valid result
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1748   * 0b10 - Maximum mode: copy new result if bigger
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1749   * 0b11 - Minimum mode: copy new result if smaller
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1750   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1751   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1752  IFX_INLINE void IfxEvadc_setFifoMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, IfxEvadc_FifoMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1753  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1754  /** \brief Sets group's lower boundary.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1755   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1756   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1757   * \param lowerBoundary group lower boundary.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1758   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1759   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1760  IFX_INLINE void IfxEvadc_setLowerBoundary(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_BoundarySelection lowerBoundary);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1761  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1762  /** \brief Selects the refernce input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1763   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1764   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1765   * \param reference reference input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1766   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1767   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1768  IFX_INLINE void IfxEvadc_setReferenceInput(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_ChannelReference reference);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1769  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1770  /** \brief Sets result event node pointer 0.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1771   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1772   * \param resultSrcNr channel result event service node.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1773   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1774   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1775   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1776  IFX_INLINE void IfxEvadc_setResultNodeEventPointer0(Ifx_EVADC_G *evadcG, IfxEvadc_SrcNr resultSrcNr, IfxEvadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1777  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1778  /** \brief Sets result event node pointer 1.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1779   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1780   * \param resultSrcNr channel result event service node.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1781   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1782   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1783   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1784  IFX_INLINE void IfxEvadc_setResultNodeEventPointer1(Ifx_EVADC_G *evadcG, IfxEvadc_SrcNr resultSrcNr, IfxEvadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1785  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1786  /** \brief Sets result store position.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1787   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1788   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1789   * \param rightAlignedStorage result store position.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1790   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1791   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1792  IFX_INLINE void IfxEvadc_setResultPosition(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, boolean rightAlignedStorage);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1793  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1794  /** \brief Sets channel synchronization request.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1795   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1796   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1797   * \param synchonize whether channel synchronize or stand alone operation.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1798   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1799   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1800  IFX_INLINE void IfxEvadc_setSyncRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, boolean synchonize);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1801  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1802  /** \brief Sets group's upper boundary.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1803   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1804   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1805   * \param upperBoundary group upper boundary.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1806   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1807   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1808  IFX_INLINE void IfxEvadc_setUpperBoundary(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_BoundarySelection upperBoundary);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1809  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1810  /** \brief Sets the group result register.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1811   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1812   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1813   * \param resultRegister result register for group result storage.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1814   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1815   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1816  IFX_INLINE void IfxEvadc_storeGroupResult(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1817  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1818  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1819  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1820  /** \addtogroup IfxLld_Evadc_Std_Emux
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1821   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1822  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1823  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1824  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1825  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1826  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1827  /** \brief get global input class conversion mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1828   * \param evadc Pointer to EVADC Module space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1829   * \param inputClassNum global input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1830   * \return External channel resolution for global input class
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1831   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1832  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getEmuxGlobalConversionMode(Ifx_EVADC *evadc, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1833  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1834  /** \brief get the external conversion mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1835   * \param evadcG Pointer to EVADC group register space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1836   * \param inputClassNum Adc input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1837   * \return Adc input class External channel conversion mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1838   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1839  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getEmuxGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1840  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1841  /** \brief Gets the ADC input class sample time of external channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1842   * \param evadcG Pointer to Register Group space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1843   * \param inputClassNum ADC input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1844   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1845   * \return ADC input class external channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1846   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1847  IFX_INLINE float32 IfxEvadc_getEmuxGroupSampleTime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1848  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1849  /** \brief set the external conversion mode of Global class
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1850   * \param evadc pointer to EVADC Module space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1851   * \param inputClassNum Global Input Class Number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1852   * \param conversionMode External Channel resolution
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1853   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1854   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1855  IFX_INLINE void IfxEvadc_setEmuxGlobalConversionMode(Ifx_EVADC *evadc, uint8 inputClassNum, IfxEvadc_ChannelNoiseReduction conversionMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1856  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1857  /** \brief Sets the sample time of ADC global class for external channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1858   * \param evadc Pointer to EVADC Module space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1859   * \param inputClassNum Adc input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1860   * \param analogFrequency ADC analog Frequency in HZ
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1861   * \param sampleTime the requested sample time for input class in sec
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1862   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1863   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1864  IFX_INLINE void IfxEvadc_setEmuxGlobalSampleTime(Ifx_EVADC *evadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1865  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1866  /** \brief set the external channel conversion mode of ADC input class
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1867   * \param evadcG pointer to EVADC Group Register space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1868   * \param inputClassNum input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1869   * \param conversionMode input class external channel resolution
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1870   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1871   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1872  IFX_INLINE void IfxEvadc_setEmuxGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_ChannelNoiseReduction conversionMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1873  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1874  /** \brief Sets the ADC input class sample time for external channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1875   * \param evadcG Pointer to EVADC Group Register Space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1876   * \param inputClassNum input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1877   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1878   * \param sampleTime request sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1879   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1880   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1881  IFX_INLINE void IfxEvadc_setEmuxGroupSampletime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1882  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1883  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1884  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1885  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1886  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1887  /** \brief Configure external multiplexer mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1888   * \param evadc pointer to Module space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1889   * \param evadcG Pointer to EVADC group register space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1890   * \param mode External Multiplexer mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1891   * \param channels Specifies channel Id
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1892   * \param startChannel specifies the external channel value from which conversion to be carried out
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1893   * \param code Output the channel number in binary code/gray code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1894   * \param sampleTimeControl specifies when to use a sample time for external channel
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1895   * \param channelSelectionStyle External Multiplexer Channel Selection Style
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1896   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1897   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1898  IFX_EXTERN void IfxEvadc_configExternalMultiplexerMode(Ifx_EVADC *evadc, Ifx_EVADC_G *evadcG, IfxEvadc_ExternalMultiplexerMode mode, uint8 channels, IfxEvadc_EmuxSelectValue startChannel, IfxEvadc_EmuxCodingScheme code, IfxEvadc_EmuxSampleTimeControl sampleTimeControl, IfxEvadc_ChannelSelectionStyle channelSelectionStyle);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1899  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1900  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1901  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1902  /** \addtogroup IfxLld_Evadc_Std_FastCompare
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1903   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1904  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1905  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1906  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1907  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1908  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1909  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1910   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1911   * \param control Action to be taken on the BoundaryFlag(FCM.B.BFL)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1912   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1913   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1914  IFX_INLINE void IfxEvadc_setFastCompareBoundaryFlagSwControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagSwControl control);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1915  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1916  /** \brief Sets in FCM.B.BFI whether to use Boundary Flag(FCM.B.BFL) directly or in a inverted format
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1917   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1918   * \param mode Invert or not to invert the Boundary Flag(BFL)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1919   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1920   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1921  IFX_INLINE void IfxEvadc_setFastCompareBoundaryFlagInversion(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagInversionControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1922  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1923  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1924   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1925   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1926   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1927  IFX_INLINE void IfxEvadc_disableFastCompareBoundaryFlag(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1928  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1929  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1930   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1931   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1932   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1933  IFX_INLINE void IfxEvadc_enableFastCompareBoundaryFlag(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1934  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1935  /** \brief Enable/Disable sample timing synchronization
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1936   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1937   * \param mode Sample synchronization mode select
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1938   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1939   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1940  IFX_INLINE void IfxEvadc_enableFastCompareSampleSynchronization(Ifx_EVADC_FC *evadcFC, IfxEvadc_SampleSynchronization mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1941  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1942  /** \brief Setting the Reference Precharge Control for Fast Compare Channels in FCCTRL.B.RPC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1943   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1944   * \param duration Reference Precharge Control Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1945   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1946   * 0 - Precharge the reference input for 1 clock phase
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1947   * 1 - Precharge the reference input for 1 clock period (2 phases)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1948   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1949   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1950  IFX_INLINE void IfxEvadc_setFastCompareReferencePrechargeDuration(Ifx_EVADC_FC *evadcFC, IfxEvadc_ReferencePrechargeControl duration);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1951  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1952  /** \brief Get boundary flag status.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1953   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1954   * \return 0(FALSE) - Passive state : Result has not yet crossed the activation boundary, or selected gate signal is inactive, or this boundary flag is disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1955   * 1(TRUE) - Active state:result has crossed the activation boundary
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1956   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1957  IFX_INLINE boolean IfxEvadc_getFastCompareBoundaryFlagStatus(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1958  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1959  /** \brief Returns current level of the selected trigger input
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1960   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1961   * \return Current level of the selected trigger input
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1962   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1963  IFX_INLINE boolean IfxEvadc_getFastCompareExternalTriggerLevelStatus(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1964  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1965  /** \brief Returns result for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1966   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1967   * \return Result for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1968   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1969  IFX_INLINE boolean IfxEvadc_getFastCompareResultStatus(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1970  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1971  /** \brief Indicates availability of a new result in bit FCM.B.FCR
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1972   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1973   * \return Returns value Indicating availability of a new result in bit FCM.B.FCR
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1974   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1975  IFX_INLINE boolean IfxEvadc_isFastCompareNewResultAvailable(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1976  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1977  /** \brief Selects behaviour of Boundary Flag(BFL) wih respect to the value of FCR.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1978   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1979   * \param mode 0 - Set boundary flag BFL if result FCR = 1 (input above the defined band or compare value), clear if FCR = 0 (input below)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1980   * 1 - Set boundary flag BFL if result FCR = 0 (input below the defined band or compare value), clear if FCR = 1 (input above)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1981   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1982   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1983  IFX_INLINE void IfxEvadc_selectFastCompareBoundaryFlagActivationMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagActivationMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1984  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1985  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1986   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1987   * \param nodePointer Bounday Flag Node Pointers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1988   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1989   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1990  IFX_INLINE void IfxEvadc_selectFastCompareBoundaryFlagNodePointer(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagNodePointer nodePointer);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1991  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1992  /** \brief Sets the delay of the analog clock(in clock cycles) after the sync signal.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1993   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1994   * \param delay Defines the delay of the analog clock in clocks after the sync signal.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1995   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1996   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1997  IFX_INLINE void IfxEvadc_setFastCompareAnalogClockSynchronizationDelay(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareAnalogClockSynchronizationDelay delay);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1998  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1999  /** \brief Set Analog Converter Control modes
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2000   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2001   * \param mode Analog Converter Control modes
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2002   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2003   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2004  IFX_INLINE void IfxEvadc_setFastCompareAnalogConverter(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareAnalogConverterControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2005  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2006  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2007   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2008   * \param mode Analog Input Precharge Enable for Fast Comparisons
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2009   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2010   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2011  IFX_INLINE void IfxEvadc_setFastCompareAnalogInputPrechargeControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_AnalogInputPrechargeControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2012  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2013  /** \brief Defines the frequency of the analog converter clock fADCI (base clock for
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2014   * conversion steps), derived from the peripheral clock: fADCI = fADC / divider
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2015   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2016   * \param divider Fast Compare Analog Internal Clock Divider factor
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2017   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2018   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2019  IFX_INLINE void IfxEvadc_setFastCompareAnalogInternalClockDivider(Ifx_EVADC_FC *evadcFC, IfxEvadc_ClockDividerFactor divider);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2020  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2021  /** \brief Sets the source of the value(s) in bitfield FCREF.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2022   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2023   * \param mode Defines the source of the value(s) in bitfield FCREF.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2024   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2025   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2026  IFX_INLINE void IfxEvadc_setFastCompareAutomaticUpdateMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareAutomaticUpdate mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2027  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2028  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2029   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2030   * \param mode Mode/criteria for generation of service requests
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2031   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2032   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2033  IFX_INLINE void IfxEvadc_setFastCompareChannelEventMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_ChannelEventMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2034  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2035  /** \brief Set external trigger polarity in FCCTRL.B.XTPOL
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2036   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2037   * \param mode 0 - Use selected input signal directly
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2038   * 1 - Invert selected input signal
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2039   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2040   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2041  IFX_INLINE void IfxEvadc_setFastCompareExternalTriggerPolarity(Ifx_EVADC_FC *evadcFC, IfxEvadc_ExternalTriggerPolarity mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2042  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2043  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2044   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2045   * \param mode Fast Compare Gate Operating Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2046   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2047   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2048  IFX_INLINE void IfxEvadc_setFastCompareGateOperatingMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_GateOperatingMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2049  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2050  /** \brief Ramp direction(up or down) settings
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2051   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2052   * \param rampDirection Ramp direction(up or down) settings
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2053   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2054   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2055  IFX_INLINE void IfxEvadc_setFastCompareRampDirection(Ifx_EVADC_FC *evadcFC, IfxEvadc_RampDirection rampDirection);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2056  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2057  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2058   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2059   * \param referenceValue The input level is compared to this value.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2060   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2061   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2062  IFX_INLINE void IfxEvadc_setFastCompareReferenceValue(Ifx_EVADC_FC *evadcFC, uint16 referenceValue);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2063  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2064  /** \brief Defines the basic run conditions of the fast compare channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2065   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2066   * \param mode Run mode of the fast compare channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2067   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2068   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2069  IFX_INLINE void IfxEvadc_setFastCompareRunControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareRunControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2070  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2071  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2072   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2073   * \param rampStartMode Defines the run conditions for the ramp generation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2074   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2075   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2076  IFX_INLINE void IfxEvadc_setFastCompareRunRampControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_RampRunControl rampStartMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2077  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2078  /** \brief Setting additional sample time in FCCTRL.B.STCF
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2079   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2080   * \param additionalCycles Number of additional clock cycles to be added to the minimum sample phase of 2 analog clock cycles
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2081   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2082   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2083  IFX_INLINE void IfxEvadc_setFastCompareSampleTimeControl(Ifx_EVADC_FC *evadcFC, uint8 additionalCycles);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2084  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2085  /** \brief Sets when to generate service requests
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2086   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2087   * \param mode Defines when to generate service requests
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2088   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2089   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2090  IFX_INLINE void IfxEvadc_setFastCompareServiceRequestGeneration(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareServiceRequestGeneration mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2091  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2092  /** \brief Sets the interval at which fast compare operations are triggered in steps of 16 * 1/fADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2093   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2094   * \param interval Defines the interval at which fast compare operations are triggered in steps of 16 * 1/f_ADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2095   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2096   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2097  IFX_INLINE void IfxEvadc_setFastCompareTriggerInterval(Ifx_EVADC_FC *evadcFC, uint8 interval);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2098  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2099  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2100   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2101   * \param mode External Trigger Operating Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2102   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2103   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2104  IFX_INLINE void IfxEvadc_setFastCompareTriggerOperatingMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_TriggerOperatingMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2105  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2106  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2107  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2108  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2109  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2110  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2111  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2112  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2113   * \param evadcG Pointer to EVADC group register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2114   * \return analog function configuration value
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2115   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2116  IFX_INLINE Ifx_EVADC_G_ANCFG IfxEvadc_getAnalogFunctionConfiguration(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2117  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2118  /** \brief Get the sample time of ADC global class for external channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2119   * \param evadc pointer to EVADC Module space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2120   * \param inputClassNum Adc input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2121   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2122   * \return ADC input class external channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2123   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2124  IFX_INLINE float32 IfxEvadc_getEmuxGlobalSampleTime(Ifx_EVADC *evadc, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2125  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2126  /** \brief Sets the Emux Interface for a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2127   * \param evadc Pointer to EVADC Module Space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2128   * \param emuxInterface specifies the EmuxInterface
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2129   * \param group specifies the group ID
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2130   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2131   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2132  IFX_INLINE void IfxEvadc_setEmuxInterfaceForGroup(Ifx_EVADC *evadc, IfxEvadc_EmuxInterface emuxInterface, IfxEvadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2133  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2134  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2135   * \param evadcG Pointer to EVADC Group Registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2136   * \param group EVADC Group Number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2137   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2138   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2139  IFX_INLINE void IfxEvadc_disableReferencePrecharge(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2140  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2141  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2142   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2143   * \param group EVADC Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2144   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2145   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2146  IFX_INLINE void IfxEvadc_disableInputBuffer(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2147  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2148  /** \brief Return if the clock for EVADC modules is enabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2149   * \param evadc Pointer to EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2150   * \return Status (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2151   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2152  IFX_INLINE boolean IfxEvadc_isModuleEnabled(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2153  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2154  /** \brief Enable the startup calibaration phase
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2155   * \param evadc Pointer to EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2156   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2157   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2158  IFX_INLINE void IfxEvadc_enableStartupCalibration(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2159  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2160  /** \brief Enable the Queue Gating Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2161   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2162   * \param queue Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2163   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2164   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2165   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2166  IFX_INLINE void IfxEvadc_selectQueueGatingMode(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource queue, IfxEvadc_GatingMode gatingMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2167  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2168  /** \brief Defines the channel number to be converted
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2169   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2170   * \param queue Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2171   * \param channel Channel number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2172   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2173   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2174  IFX_INLINE void IfxEvadc_setChannelRequest(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource queue, IfxEvadc_ChannelId channel);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2175  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2176  /** \brief Sets the global input class registers, define the sample time and data conversion mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2177   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2178   * \param inputClassNum Input Class Number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2179   * \param value Value to be written
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2180   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2181   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2182  IFX_INLINE void IfxEvadc_configureIclass(Ifx_EVADC_G *evadcG, uint8 inputClassNum, uint32 value);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2183  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2184  /** \brief Returns the pointer to the result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2185   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2186   * \param channel Channel Number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2187   * \return The address to the result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2188   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2189  IFX_INLINE volatile uint32 *IfxEvadc_getResultRegisterAddress(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channel);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2190  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2191  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2192  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2193  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2194  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2195  IFX_INLINE void IfxEvadc_setAnalogClockSynchronizationDelay(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_AnalogClockSynchronizationDelay delay)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2196  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2197      IFX_UNUSED_PARAMETER(group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2198      evadcG->ANCFG.B.ACSD = delay;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2199  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2200  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2201  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2202  IFX_INLINE uint32 IfxEvadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2203  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2204      uint32 ticks = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2205  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2206      ticks = (uint32)(sampleTime * analogFrequency) - 2;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2207  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2208      if (ticks > 31)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2209      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2210          ticks = (ticks / 16) + 15;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2211      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2212  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2213      ticks = __minu(ticks, 0xFFu);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2214  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2215      return ticks;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2216  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2217  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2218  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2219  IFX_INLINE void IfxEvadc_setCalibrationSampleTime(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_CalibrationSampleTimeControl mode)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2220  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2221      IFX_UNUSED_PARAMETER(group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2222      evadcG->ANCFG.B.CALSTC = mode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2223  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2224  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2225  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2226  IFX_INLINE void IfxEvadc_clearAllResultRequests(Ifx_EVADC_G *evadcG)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2227  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2228      evadcG->REFCLR.U = 0x0000FFFFu;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2229  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2230  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2231  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2232  IFX_INLINE void IfxEvadc_clearChannelRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelId)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2233  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2234      evadcG->CEFCLR.U = 1 << channelId;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2235  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2236  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2237  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2238  IFX_INLINE void IfxEvadc_clearQueue(Ifx_EVADC_G *evadcG, boolean flushQueue, IfxEvadc_RequestSource sourceType)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2239  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2240      switch (sourceType)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2241      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2242      case IfxEvadc_RequestSource_queue0:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2243          evadcG->Q[0].QMR.B.FLUSH = flushQueue;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2244          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2245      case IfxEvadc_RequestSource_queue1:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2246          evadcG->Q[1].QMR.B.FLUSH = flushQueue;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2247          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2248      case IfxEvadc_RequestSource_queue2:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2249          evadcG->Q[2].QMR.B.FLUSH = flushQueue;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2250          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2251      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2252  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2253  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2254  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2255  IFX_INLINE void IfxEvadc_configureWaitForReadMode(Ifx_EVADC_G *group, uint32 resultIdx, boolean enabled)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2256  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2257      group->RCR[resultIdx].B.WFR = enabled;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2258  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2259  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2260  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2261  IFX_INLINE void IfxEvadc_configureWaitForReadModeForGlobalResultRegister(Ifx_EVADC *evadc, boolean enabled)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2262  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2263      evadc->GLOB.RCR.B.WFR = enabled;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2264  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2265  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2266  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2267  IFX_INLINE void IfxEvadc_setFastCompareBoundaryFlagSwControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagSwControl control)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2268  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2269      evadcFC->FCBFL.B.BFS = control;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2270  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2271  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2272  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2273  IFX_INLINE void IfxEvadc_setFastCompareBoundaryFlagInversion(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagInversionControl mode)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2274  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2275      evadcFC->FCBFL.B.BFI = mode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2276  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2277  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2278  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2279  IFX_INLINE void IfxEvadc_disableFastCompareBoundaryFlag(Ifx_EVADC_FC *evadcFC)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2280  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2281      evadcFC->FCBFL.B.BFM = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2282  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2283  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2284  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2285  IFX_INLINE void IfxEvadc_disableModule(Ifx_EVADC *evadc)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2286  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2287      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2288  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2289      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2290      evadc->CLC.B.DISR = 1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2291      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2292  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2293  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2294  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2295  IFX_INLINE void IfxEvadc_disablePostCalibration(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, boolean enabled)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2296  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2297      IFX_UNUSED_PARAMETER(group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2298      evadcG->ANCFG.B.DPCAL = enabled;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2299  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2300  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2301  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2302  IFX_INLINE void IfxEvadc_enableFastCompareBoundaryFlag(Ifx_EVADC_FC *evadcFC)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2303  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2304      evadcFC->FCBFL.B.BFM = 1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2305  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2306  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2307  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2308  IFX_INLINE void IfxEvadc_enableFastCompareSampleSynchronization(Ifx_EVADC_FC *evadcFC, IfxEvadc_SampleSynchronization mode)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2309  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2310      Ifx_EVADC_FC_FCM tempFCM;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2311      tempFCM.U       = evadcFC->FCM.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2312      tempFCM.B.FCMWC = 1;  /*Enabling write permission to FCM.B.SSE*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2313      tempFCM.B.SSE   = mode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2314      evadcFC->FCM.U  = tempFCM.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2315  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2316  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2317  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2318  IFX_INLINE void IfxEvadc_enableFifoMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, IfxEvadc_FifoMode fifoMode)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2319  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2320      evadcG->RCR[resultRegister].B.FEN = fifoMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2321  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2322  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2323  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2324  IFX_INLINE void IfxEvadc_enableModule(Ifx_EVADC *evadc)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2325  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2326      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2327  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2328      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2329      evadc->CLC.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2330      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2331  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2332  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2333  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2334  IFX_INLINE void IfxEvadc_enableServiceRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2335  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2336      evadcG->RCR[resultRegister].B.SRGEN = 1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2337  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2338  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2339  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2340  IFX_INLINE void IfxEvadc_disableServiceRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2341  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2342      evadcG->RCR[resultRegister].B.SRGEN = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2343  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2344  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2345  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2346  IFX_INLINE void IfxEvadc_setFastCompareReferencePrechargeDuration(Ifx_EVADC_FC *evadcFC, IfxEvadc_ReferencePrechargeControl duration)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2347  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2348      Ifx_EVADC_FC_FCCTRL tempFCCTRL;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2349      tempFCCTRL.U      = evadcFC->FCCTRL.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2350      tempFCCTRL.B.CPWC = 1; /*Enabling write permission to FCCTRL.B.RPC*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2351      tempFCCTRL.B.RPE  = duration;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2352      evadcFC->FCCTRL.U = tempFCCTRL.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2353  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2354  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2355  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2356  IFX_INLINE float32 IfxEvadc_getAdcAnalogFrequency(Ifx_EVADC_G *group)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2357  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2358  #ifdef IFX_CFG_AURIX_SCUCCU_USED
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2359      return IfxScuCcu_getSpbFrequency() / (1U + group->ANCFG.B.DIVA);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2360  #else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2361      return IfxScuCcu_getAdcFrequency() / (1U + group->ANCFG.B.DIVA);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2362  #endif
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2363  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2364  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2365  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2366  IFX_INLINE uint8 IfxEvadc_getAdcCalibrationActiveState(Ifx_EVADC *evadc, uint8 adcCalGroupNum)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2367  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2368      uint8 status = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2369      status = evadc->G[adcCalGroupNum].ARBCFG.B.CAL;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2370      return status;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2371  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2372  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2373  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2374  IFX_INLINE Ifx_EVADC_G_ANCFG IfxEvadc_getAnalogFunctionConfiguration(Ifx_EVADC_G *evadcG)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2375  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2376      Ifx_EVADC_G_ANCFG analogCfg;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2377      analogCfg.U = evadcG->ANCFG.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2378      return analogCfg;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2379  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2380  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2381  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2382  IFX_INLINE Ifx_EVADC_G_CHCTR IfxEvadc_getChannelControlConfig(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2383  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2384      Ifx_EVADC_G_CHCTR tempChctr;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2385      tempChctr.U = evadcG->CHCTR[channelIndex].U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2386      return tempChctr;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2387  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2388  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2389  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2390  IFX_INLINE IfxEvadc_InputClasses IfxEvadc_getChannelInputclass(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2391  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2392      return (IfxEvadc_InputClasses)evadcG->CHCTR[channelIndex].B.ICLSEL;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2393  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2394  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2395  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2396  IFX_INLINE Ifx_EVADC_G_REVNP0 IfxEvadc_getChannelResultServiceRequestNodePointer0(Ifx_EVADC_G *evadcG)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2397  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2398      Ifx_EVADC_G_REVNP0 resultServiceRequestNodePtr0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2399      resultServiceRequestNodePtr0.U = evadcG->REVNP0.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2400      return resultServiceRequestNodePtr0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2401  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2402  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2403  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2404  IFX_INLINE Ifx_EVADC_G_REVNP1 IfxEvadc_getChannelResultServiceRequestNodePointer1(Ifx_EVADC_G *evadcG)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2405  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2406      Ifx_EVADC_G_REVNP1 resultServiceRequestNodePtr1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2407      resultServiceRequestNodePtr1.U = evadcG->REVNP1.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2408      return resultServiceRequestNodePtr1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2409  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2410  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2411  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2412  IFX_INLINE Ifx_EVADC_G_CEVNP0 IfxEvadc_getChannelServiceRequestNodePointer0(Ifx_EVADC_G *evadcG)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2413  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2414      Ifx_EVADC_G_CEVNP0 serviceRequestNodePtr;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2415      serviceRequestNodePtr.U = evadcG->CEVNP0.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2416      return serviceRequestNodePtr;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2417  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2418  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2419  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2420  IFX_INLINE Ifx_EVADC_G_CEVNP1 IfxEvadc_getChannelServiceRequestNodePointer1(Ifx_EVADC_G *evadcG)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2421  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2422      Ifx_EVADC_G_CEVNP1 serviceRequestNodePtr;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2423      serviceRequestNodePtr.U = evadcG->CEVNP1.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2424      return serviceRequestNodePtr;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2425  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2426  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2427  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2428  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getEmuxGlobalConversionMode(Ifx_EVADC *evadc, uint8 inputClassNum)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2429  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2430      return (IfxEvadc_ChannelNoiseReduction)evadc->GLOB.ICLASS[inputClassNum].B.CME;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2431  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2432  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2433  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2434  IFX_INLINE float32 IfxEvadc_getEmuxGlobalSampleTime(Ifx_EVADC *evadc, uint8 inputClassNum, float32 analogFrequency)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2435  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2436      return (float32)(IFXEVADC_SAMPLETIME_MIN + evadc->GLOB.ICLASS[inputClassNum].B.STCE) / analogFrequency;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2437  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2438  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2439  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2440  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getEmuxGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2441  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2442      return (IfxEvadc_ChannelNoiseReduction)evadcG->ICLASS[inputClassNum].B.CME;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2443  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2444  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2445  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2446  IFX_INLINE float32 IfxEvadc_getEmuxGroupSampleTime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2447  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2448      return (float32)(IFXEVADC_SAMPLETIME_MIN + evadcG->ICLASS[inputClassNum].B.STCE) / analogFrequency;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2449  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2450  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2451  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2452  IFX_INLINE boolean IfxEvadc_getFastCompareBoundaryFlagStatus(Ifx_EVADC_FC *evadcFC)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2453  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2454      boolean status;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2455  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2456      if (evadcFC->FCBFL.B.BFL == 1)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2457      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2458          status = TRUE;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2459      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2460      else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2461      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2462          status = FALSE;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2463      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2464  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2465      return status;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2466  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2467  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2468  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2469  IFX_INLINE boolean IfxEvadc_getFastCompareExternalTriggerLevelStatus(Ifx_EVADC_FC *evadcFC)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2470  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2471      boolean extTrigLevel;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2472  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2473      if (evadcFC->FCCTRL.B.XTLVL == 1)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2474      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2475          extTrigLevel = TRUE;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2476      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2477      else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2478      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2479          extTrigLevel = FALSE;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2480      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2481  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2482      return extTrigLevel;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2483  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2484  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2485  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2486  IFX_INLINE boolean IfxEvadc_getFastCompareResultStatus(Ifx_EVADC_FC *evadcFC)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2487  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2488      boolean result;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2489  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2490      if (evadcFC->FCBFL.B.FCR == 1)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2491      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2492          result = TRUE;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2493      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2494      else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2495      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2496          result = FALSE;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2497      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2498  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2499      return result;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2500  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2501  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2502  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2503  IFX_INLINE Ifx_EVADC_GLOBCFG IfxEvadc_getGlobalConfigValue(Ifx_EVADC *evadc)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2504  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2505      Ifx_EVADC_GLOBCFG globCfg;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2506      globCfg.U = evadc->GLOBCFG.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2507      return globCfg;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2508  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2509  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2510  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2511  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getGlobalConversionMode(Ifx_EVADC *evadc, uint8 inputClassNum)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2512  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2513      return (IfxEvadc_ChannelNoiseReduction)evadc->GLOB.ICLASS[inputClassNum].B.CMS;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2514  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2515  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2516  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2517  IFX_INLINE Ifx_EVADC_GLOB_RES IfxEvadc_getGlobalResult(Ifx_EVADC *evadc)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2518  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2519      Ifx_EVADC_GLOB_RES tmpGlobalResult;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2520  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2521      tmpGlobalResult.U = evadc->GLOB.RES.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2522  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2523      return tmpGlobalResult;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2524  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2525  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2526  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2527  IFX_INLINE float32 IfxEvadc_getGlobalSampleTime(Ifx_EVADC *evadc, uint8 inputClassNum, float32 analogFrequency)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2528  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2529      uint32 sampleTime = evadc->GLOB.ICLASS[inputClassNum].B.STCS;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2530  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2531      if (sampleTime > 16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2532      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2533          sampleTime = (sampleTime - 15) * 16;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2534      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2535  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2536      return (float32)(IFXEVADC_SAMPLETIME_MIN + sampleTime) / analogFrequency;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2537  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2538  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2539  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2540  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2541  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2542      return (IfxEvadc_ChannelNoiseReduction)evadcG->ICLASS[inputClassNum].B.CMS;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2543  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2544  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2545  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2546  IFX_INLINE void IfxEvadc_getGroupResult(Ifx_EVADC_G *group, Ifx_EVADC_G_RES *results, uint32 resultOffset, uint32 numResults)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2547  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2548      uint32 idx = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2549  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2550      for (idx = 0; idx < numResults; idx++)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2551      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2552          results[idx].U = group->RES[resultOffset + idx].U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2553      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2554  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2555  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2556  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2557  IFX_INLINE float32 IfxEvadc_getGroupSampleTime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2558  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2559      uint32 sampleTime = evadcG->ICLASS[inputClassNum].B.STCS;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2560  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2561      if (sampleTime > 16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2562      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2563          sampleTime = (sampleTime - 15) * 16;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2564      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2565  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2566      return (float32)(IFXEVADC_SAMPLETIME_MIN + sampleTime) / analogFrequency;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2567  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2568  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2569  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2570  IFX_INLINE uint8 IfxEvadc_getMasterIndex(Ifx_EVADC_G *evadcG)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2571  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2572      uint8 masterIndex = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2573      masterIndex = evadcG->SYNCTR.B.STSEL;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2574      return masterIndex;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2575  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2576  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2577  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2578  IFX_INLINE Ifx_EVADC_G_RES IfxEvadc_getResult(Ifx_EVADC_G *group, uint32 resultIdx)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2579  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2580      Ifx_EVADC_G_RES tmpResult;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2581      tmpResult.U = group->RES[resultIdx].U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2582  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2583      return tmpResult;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2584  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2585  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2586  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2587  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEvadc_getSrcAddress(IfxEvadc_GroupId group, IfxEvadc_SrcNr index)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2588  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2589      if ((group >= IfxEvadc_GroupId_12) && (group < IfxEvadc_GroupId_global0)) //Condition for Fast Compare groups
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2590      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2591          IFX_ASSERT(IFX_VERBOSE_LEVEL_WARNING, index == 0);                    /* For Fast Compare group, only SR0 is available.So only index = 0 is valid.So asserting warning in case index!=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2592      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2593  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2594  /*This is being done because the enum IfxEvadc_GroupId has count equal to group number and this count may not be continuous for different derivatives whereas IfxEvadc_cfg_srcAddresses[] has continuous positioning according to number of groups of each type available*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2595      if ((group > 7) && (group < 12))
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2596      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2597          group = (IfxEvadc_GroupId)(group - (8 - IFXEVADC_NUM_ADC_PRIMARY_GROUPS));
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2598      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2599      else if ((group > 11) && (group < 20))
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2600      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2601          group = (IfxEvadc_GroupId)(group - (12 - IFXEVADC_NUM_ADC_PRIMARY_GROUPS - IFXEVADC_NUM_ADC_SECONDARY_GROUPS));
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2602      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2603      else if ((group == 20) || (group == 21))
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2604      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2605          group = (IfxEvadc_GroupId)(group - (20 - IFXEVADC_NUM_ADC_PRIMARY_GROUPS - IFXEVADC_NUM_ADC_SECONDARY_GROUPS - IFXEVADC_NUM_FAST_COMPARE_CHANNELS));
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2606      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2607  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2608      volatile Ifx_SRC_SRCR *base = IfxEvadc_cfg_srcAddresses[(group << 2) + index];
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2609  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2610      return base;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2611  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2612  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2613  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2614  IFX_INLINE boolean IfxEvadc_getStartupCalibrationStatus(Ifx_EVADC *evadc)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2615  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2616      return (boolean)evadc->GLOBCFG.B.SUCAL;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2617  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2618  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2619  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2620  IFX_INLINE void IfxEvadc_selectIdlePrechargeLevel(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_IdlePrecharge mode)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2621  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2622      IFX_UNUSED_PARAMETER(group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2623  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2624      evadcG->ANCFG.B.IPE = mode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2625  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2626  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2627  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2628  IFX_INLINE void IfxEvadc_initEmuxPin(const IfxEvadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2629  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2630      IfxPort_setPinModeOutput(emux->pin.port, emux->pin.pinIndex, outputMode, emux->select);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2631      IfxPort_setPinPadDriver(emux->pin.port, emux->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2632  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2633  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2634  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2635  IFX_INLINE void IfxEvadc_initGxBflPin(const IfxEvadc_GxBfl_Out *gxBfl, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2636  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2637      IfxPort_setPinModeOutput(gxBfl->pin.port, gxBfl->pin.pinIndex, outputMode, gxBfl->select);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2638      IfxPort_setPinPadDriver(gxBfl->pin.port, gxBfl->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2639  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2640  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2641  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2642  IFX_INLINE void IfxEvadc_initialiseAdcConverterClock(Ifx_EVADC *evadc, Ifx_EVADC_G *evadcG, IfxEvadc_ClockDividerFactor converterClockDivider)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2643  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2644      IFX_UNUSED_PARAMETER(evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2645      evadcG->ANCFG.B.DIVA = converterClockDivider;
	ld.hu	d0,[a15]138
.L812:
	insert	d15,d0,d15,#4,#5
	st.h	[a15]138,d15
.L453:
	ret
.L443:
	
__IfxEvadc_initializeFAdcI_function_end:
	.size	IfxEvadc_initializeFAdcI,__IfxEvadc_initializeFAdcI_function_end-IfxEvadc_initializeFAdcI
.L298:
	; End of function
	
	.sdecl	'.text.IfxEvadc.IfxEvadc_isRequestQueueSlotEnabled',code,cluster('IfxEvadc_isRequestQueueSlotEnabled')
	.sect	'.text.IfxEvadc.IfxEvadc_isRequestQueueSlotEnabled'
	.align	2
	
	.global	IfxEvadc_isRequestQueueSlotEnabled

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   459  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   460  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   461  boolean IfxEvadc_isRequestQueueSlotEnabled(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType)
; Function IfxEvadc_isRequestQueueSlotEnabled
.L178:
IfxEvadc_isRequestQueueSlotEnabled:	.type	func

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   462  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   463      boolean enabled = 0;
	mov	d2,#0
.L551:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   464  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   465      switch (sourceType)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   466      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   467      case IfxEvadc_RequestSource_queue0:
	jeq	d4,#0,.L97
.L703:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   468          enabled = evadcG->ARBPR.B.ASEN0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   469          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   470      case IfxEvadc_RequestSource_queue1:
	jeq	d4,#1,.L98
.L704:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   471          enabled = evadcG->ARBPR.B.ASEN1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   472          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   473      case IfxEvadc_RequestSource_queue2:
	jeq	d4,#2,.L99
.L705:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   474          enabled = evadcG->ARBPR.B.ASEN2;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   475          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   476      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   477  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   478      return enabled;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   479  }
	ret
.L97:
	ld.bu	d15,[a4]135
.L706:
	and	d2,d15,#1
	ret
.L98:
	ld.bu	d15,[a4]135
.L707:
	extr.u	d2,d15,#1,#1
	ret
.L99:
	ld.bu	d15,[a4]135
.L708:
	extr.u	d2,d15,#2,#1
	ret
.L400:
	
__IfxEvadc_isRequestQueueSlotEnabled_function_end:
	.size	IfxEvadc_isRequestQueueSlotEnabled,__IfxEvadc_isRequestQueueSlotEnabled_function_end-IfxEvadc_isRequestQueueSlotEnabled
.L258:
	; End of function
	
	.sdecl	'.text.IfxEvadc.IfxEvadc_resetModule',code,cluster('IfxEvadc_resetModule')
	.sect	'.text.IfxEvadc.IfxEvadc_resetModule'
	.align	2
	
	.global	IfxEvadc_resetModule

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   480  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   481  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   482  void IfxEvadc_resetModule(Ifx_EVADC *evadc)
; Function IfxEvadc_resetModule
.L180:
IfxEvadc_resetModule:	.type	func
	mov.aa	a15,a4
.L553:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   483  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   484      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L552:
	mov	d8,d2
.L555:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   485      IfxScuWdt_clearCpuEndinit(passwd);
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L554:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   486  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   487      IfxEvadc_enableAccess(evadc, IfxEvadc_Protection_globalConfig);
	mov	d4,#80
	mov.aa	a4,a15
.L556:
	call	IfxEvadc_enableAccess
.L557:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   488      evadc->KRST1.B.RST = 1;      /* Only if both Kernel reset bits are set a reset is executed */
	ld.bu	d15,[a15]48
.L817:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   489      evadc->KRST0.B.RST = 1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   490      IfxScuWdt_setCpuEndinit(passwd);
	mov	d4,d8
.L558:
	or	d15,#1
	st.b	[a15]48,d15
.L818:
	ld.bu	d15,[a15]52
.L819:
	or	d15,#1
	st.b	[a15]52,d15
.L820:
	call	IfxScuWdt_setCpuEndinit

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   491  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   492      while (evadc->KRST0.B.RSTSTAT == 0)
.L104:
	ld.bu	d15,[a15]52
.L821:
	jz.t	d15:1,.L104
.L822:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   493      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   494          /* Wait until reset is executed */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   495      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   496  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   497      IfxScuWdt_clearCpuEndinit(passwd);
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L823:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   498      evadc->KRSTCLR.B.CLR = 1;    /* Clear Kernel reset status bit */
	ld.bu	d15,[a15]44
.L824:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   499      IfxEvadc_disableAccess(evadc, IfxEvadc_Protection_globalConfig);
	mov	d4,#80
	mov.aa	a4,a15
.L559:
	or	d15,#1
	st.b	[a15]44,d15
.L825:
	call	IfxEvadc_disableAccess
.L560:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   500      IfxScuWdt_setCpuEndinit(passwd);
	mov	d4,d8
.L561:
	j	IfxScuWdt_setCpuEndinit
.L461:
	
__IfxEvadc_resetModule_function_end:
	.size	IfxEvadc_resetModule,__IfxEvadc_resetModule_function_end-IfxEvadc_resetModule
.L303:
	; End of function
	
	.sdecl	'.text.IfxEvadc.IfxEvadc_setArbiterPriority',code,cluster('IfxEvadc_setArbiterPriority')
	.sect	'.text.IfxEvadc.IfxEvadc_setArbiterPriority'
	.align	2
	
	.global	IfxEvadc_setArbiterPriority

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   501  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   502  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   503  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   504  void IfxEvadc_setArbiterPriority(Ifx_EVADC_G *evadcG, boolean slotEnable, IfxEvadc_RequestSlotPriority prio, IfxEvadc_RequestSlotStartMode mode, IfxEvadc_RequestSource slot)
; Function IfxEvadc_setArbiterPriority
.L182:
IfxEvadc_setArbiterPriority:	.type	func

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   505  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   506      if (slotEnable != FALSE)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   507      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   508          evadcG->ARBPR.U |= slotEnable << (IFX_EVADC_G_ARBPR_ASEN0_OFF + slot); /* enable Slot */
	add	d0,d7,#24
.L745:
	jeq	d4,#0,.L105
.L746:
	sha	d4,d4,d0
	ld.w	d15,[a4]132
.L564:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   509          evadcG->ARBPR.U &= ~(IFX_EVADC_G_ARBPR_PRIO0_MSK << (slot * 4u));      /* clear Priority */
	sh	d7,#2
.L563:
	or	d15,d4
	st.w	[a4]132,d15
.L747:
	mov	d0,#3
.L748:
	ld.w	d15,[a4]132
.L749:
	sh	d0,d0,d7
.L750:
	mov	d1,#-1
	xor	d0,d1
.L751:
	and	d15,d0
	st.w	[a4]132,d15
.L752:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   510          evadcG->ARBPR.U |= (prio << (slot * 4u));                              /* Set Priority */
	sha	d5,d5,d7
.L562:
	ld.w	d15,[a4]132
.L753:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   511  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   512          if (mode != IfxEvadc_RequestSlotStartMode_waitForStart)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   513          {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   514              evadcG->ARBPR.U |= 0x1u << (IFX_EVADC_G_ARBPR_CSM0_OFF + (slot * 4u)); /* Set cancel inject mode */
	add	d7,#3
.L754:
	or	d15,d5
	st.w	[a4]132,d15
.L755:
	mov	d15,#1
.L756:
	sh	d15,d15,d7
.L757:
	jeq	d6,#0,.L106
.L758:
	ld.w	d0,[a4]132
.L759:
	or	d0,d15
	j	.L107
.L106:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   515          }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   516          else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   517          {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   518              evadcG->ARBPR.U &= ~(0x1u << (IFX_EVADC_G_ARBPR_CSM0_OFF + (slot * 4u)));  /* Set Wait for Start mode */
	ld.w	d0,[a4]132
.L760:
	xor	d15,d1
.L761:
	and	d0,d15
.L107:
	st.w	[a4]132,d0
.L762:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   519          }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   520      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   521      else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   522      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   523          evadcG->ARBPR.U &= ~(IFX_EVADC_G_ARBPR_ASEN0_MSK << (IFX_EVADC_G_ARBPR_ASEN0_OFF + slot));  /* disable Slot */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   524      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   525  }
	ret
.L105:
	mov	d1,#1
	ld.w	d15,[a4]132
.L763:
	sh	d1,d1,d0
.L764:
	mov	d0,#-1
	xor	d1,d0
.L765:
	and	d15,d1
	st.w	[a4]132,d15
.L766:
	ret
.L424:
	
__IfxEvadc_setArbiterPriority_function_end:
	.size	IfxEvadc_setArbiterPriority,__IfxEvadc_setArbiterPriority_function_end-IfxEvadc_setArbiterPriority
.L278:
	; End of function
	
	.sdecl	'.text.IfxEvadc.IfxEvadc_setQueueSlotGatingConfig',code,cluster('IfxEvadc_setQueueSlotGatingConfig')
	.sect	'.text.IfxEvadc.IfxEvadc_setQueueSlotGatingConfig'
	.align	2
	
	.global	IfxEvadc_setQueueSlotGatingConfig

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   526  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   527  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   528  void IfxEvadc_setQueueSlotGatingConfig(Ifx_EVADC_G *evadcG, IfxEvadc_GatingSource gatingSource, IfxEvadc_GatingMode gatingMode, IfxEvadc_RequestSource sourceType)
; Function IfxEvadc_setQueueSlotGatingConfig
.L184:
IfxEvadc_setQueueSlotGatingConfig:	.type	func

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   529  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   530      Ifx_EVADC_G_Q_QCTRL qctrl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   531  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   532      switch (sourceType)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   533      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   534      case IfxEvadc_RequestSource_queue0:
	jeq	d6,#0,.L109
.L713:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   535  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   536          qctrl.U                 = evadcG->Q[0].QCTRL.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   537          qctrl.B.GTWC            = 1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   538          qctrl.B.GTSEL           = gatingSource;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   539          evadcG->Q[0].QCTRL.U    = qctrl.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   540          evadcG->Q[0].QMR.B.ENGT = gatingMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   541          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   542      case IfxEvadc_RequestSource_queue1:
	jeq	d6,#1,.L110
.L714:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   543  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   544          qctrl.U                 = evadcG->Q[1].QCTRL.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   545          qctrl.B.GTWC            = 1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   546          qctrl.B.GTSEL           = gatingSource;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   547          evadcG->Q[1].QCTRL.U    = qctrl.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   548          evadcG->Q[1].QMR.B.ENGT = gatingMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   549  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   550          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   551      case IfxEvadc_RequestSource_queue2:
	jeq	d6,#2,.L111
.L715:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   552  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   553          qctrl.U                 = evadcG->Q[2].QCTRL.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   554          qctrl.B.GTWC            = 1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   555          qctrl.B.GTSEL           = gatingSource;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   556          evadcG->Q[2].QCTRL.U    = qctrl.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   557          evadcG->Q[2].QMR.B.ENGT = gatingMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   558  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   559          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   560      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   561  }
	ret
.L109:
	ld.w	d0,[a4]256
.L566:
	fcall	.cocofun_6
.L565:
	st.w	[a4]256,d0
.L567:
	ld.bu	d15,[a4]260
.L716:
	insert	d15,d15,d5,#0,#2
	st.b	[a4]260,d15
.L717:
	ret
.L110:
	ld.w	d0,[a4]288
.L568:
	fcall	.cocofun_6
.L718:
	st.w	[a4]288,d0
.L719:
	ld.bu	d15,[a4]292
.L720:
	insert	d15,d15,d5,#0,#2
	st.b	[a4]292,d15
.L721:
	ret
.L111:
	ld.w	d0,[a4]320
.L569:
	fcall	.cocofun_6
.L722:
	st.w	[a4]320,d0
.L723:
	ld.bu	d15,[a4]324
.L724:
	insert	d15,d15,d5,#0,#2
	st.b	[a4]324,d15
.L725:
	ret
.L404:
	
__IfxEvadc_setQueueSlotGatingConfig_function_end:
	.size	IfxEvadc_setQueueSlotGatingConfig,__IfxEvadc_setQueueSlotGatingConfig_function_end-IfxEvadc_setQueueSlotGatingConfig
.L263:
	; End of function
	
	.sdecl	'.text.IfxEvadc..cocofun_6',code,cluster('.cocofun_6')
	.sect	'.text.IfxEvadc..cocofun_6'
	.align	2
; Function .cocofun_6
.L186:
.cocofun_6:	.type	func
; Function body .cocofun_6, coco_iter:0
	extr.u	d15,d0,#16,#8
.L905:
	or	d15,#128
.L906:
	insert	d15,d15,d4,#0,#4
.L907:
	insert	d0,d0,d15,#16,#8
	fret
.L328:
	; End of function
	.sdecl	'.text.IfxEvadc.IfxEvadc_setQueueSlotTriggerOperatingConfig',code,cluster('IfxEvadc_setQueueSlotTriggerOperatingConfig')
	.sect	'.text.IfxEvadc.IfxEvadc_setQueueSlotTriggerOperatingConfig'
	.align	2
	
	.global	IfxEvadc_setQueueSlotTriggerOperatingConfig

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   562  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   563  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   564  void IfxEvadc_setQueueSlotTriggerOperatingConfig(Ifx_EVADC_G *evadcG, IfxEvadc_TriggerMode triggerMode, IfxEvadc_TriggerSource triggerSource, IfxEvadc_RequestSource sourceType)
; Function IfxEvadc_setQueueSlotTriggerOperatingConfig
.L188:
IfxEvadc_setQueueSlotTriggerOperatingConfig:	.type	func

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   565  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   566      Ifx_EVADC_G_Q_QCTRL qctrl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   567  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   568      switch (sourceType)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   569      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   570      case IfxEvadc_RequestSource_queue0:
	jeq	d6,#0,.L115
.L730:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   571  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   572          qctrl.U              = evadcG->Q[0].QCTRL.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   573          qctrl.B.XTWC         = 1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   574          qctrl.B.XTMODE       = triggerMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   575          qctrl.B.XTSEL        = triggerSource;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   576          evadcG->Q[0].QCTRL.U = qctrl.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   577          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   578      case IfxEvadc_RequestSource_queue1:
	jeq	d6,#1,.L116
.L731:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   579          qctrl.U              = evadcG->Q[1].QCTRL.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   580          qctrl.B.XTWC         = 1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   581          qctrl.B.XTMODE       = triggerMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   582          qctrl.B.XTSEL        = triggerSource;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   583          evadcG->Q[1].QCTRL.U = qctrl.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   584          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   585      case IfxEvadc_RequestSource_queue2:
	jeq	d6,#2,.L117
.L732:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   586          qctrl.U              = evadcG->Q[2].QCTRL.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   587          qctrl.B.XTWC         = 1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   588          qctrl.B.XTMODE       = triggerMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   589          qctrl.B.XTSEL        = triggerSource;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   590          evadcG->Q[2].QCTRL.U = qctrl.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   591  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   592          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   593      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   594  }
	ret
.L115:
	ld.w	d0,[a4]256
.L571:
	fcall	.cocofun_5
.L570:
	st.w	[a4]256,d0
.L572:
	ret
.L116:
	ld.w	d0,[a4]288
.L573:
	fcall	.cocofun_5
.L733:
	st.w	[a4]288,d0
.L734:
	ret
.L117:
	ld.w	d0,[a4]320
.L574:
	fcall	.cocofun_5
.L735:
	st.w	[a4]320,d0
.L736:
	ret
.L412:
	
__IfxEvadc_setQueueSlotTriggerOperatingConfig_function_end:
	.size	IfxEvadc_setQueueSlotTriggerOperatingConfig,__IfxEvadc_setQueueSlotTriggerOperatingConfig_function_end-IfxEvadc_setQueueSlotTriggerOperatingConfig
.L268:
	; End of function
	
	.sdecl	'.text.IfxEvadc..cocofun_5',code,cluster('.cocofun_5')
	.sect	'.text.IfxEvadc..cocofun_5'
	.align	2
; Function .cocofun_5
.L190:
.cocofun_5:	.type	func
; Function body .cocofun_5, coco_iter:0
	extr.u	d15,d0,#8,#8
.L897:
	or	d15,#128
.L898:
	insert	d15,d15,d4,#5,#2
.L899:
	insert	d15,d15,d5,#0,#4
.L900:
	insert	d0,d0,d15,#8,#8
	fret
.L323:
	; End of function
	.sdecl	'.text.IfxEvadc.IfxEvadc_startupCalibration',code,cluster('IfxEvadc_startupCalibration')
	.sect	'.text.IfxEvadc.IfxEvadc_startupCalibration'
	.align	2
	
	.global	IfxEvadc_startupCalibration

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   595  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   596  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   597  void IfxEvadc_startupCalibration(Ifx_EVADC *evadc)
; Function IfxEvadc_startupCalibration
.L192:
IfxEvadc_startupCalibration:	.type	func
	mov.aa	a15,a4
.L575:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   598  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   599      boolean calibrationRunning;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   600      uint8   adcCalGroupNum  = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   601      uint8   tempAdcGroupNum = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   602      /* Start calibration */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   603      IfxEvadc_enableAccess(evadc, IfxEvadc_Protection_globalConfig);
	mov	d4,#80
	call	IfxEvadc_enableAccess
.L469:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     2   * \file IfxEvadc.h
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     3   * \brief EVADC  basic functionality
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     4   * \ingroup IfxLld_Evadc
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     5   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     8   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     9   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    11   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    16   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    18   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    25   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    32   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    40   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    41   * \defgroup IfxLld_Evadc_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    42   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    43   * \defgroup IfxLld_Evadc_Std_Global Global Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    44   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    45   * \defgroup IfxLld_Evadc_Std_QueueRequest Queue Request Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    46   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    47   * \defgroup IfxLld_Evadc_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    48   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    49   * \defgroup IfxLld_Evadc_Std_Frequency Frequency Calculation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    50   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    51   * \defgroup IfxLld_Evadc_Std_Group Group Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    52   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    53   * \defgroup IfxLld_Evadc_Std_Module Module Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    54   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    55   * \defgroup IfxLld_Evadc_Std_Channel Channel Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    56   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    57   * \defgroup IfxLld_Evadc_Std_Emux Emux Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    58   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    59   * \defgroup IfxLld_Evadc_Std_FastCompare Fast Compare functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    60   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    61   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    62  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    63  #ifndef IFXEVADC_H
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    64  #define IFXEVADC_H 1
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    65  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    66  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    67  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    68  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    69  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    70  #include "_Impl/IfxEvadc_cfg.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    71  #include "_PinMap/IfxEvadc_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    72  #include "IfxEvadc_bf.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    73  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    74  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    75  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    76  #include "IfxCbs_reg.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    77  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    78  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    79  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    80  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    81  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    82  /** \addtogroup IfxLld_Evadc_Std_Enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    83   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    84  /** \brief Defined in MODULE_EVADC.G[x].ARBCFG.B.ANONS and ANONC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    85   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    86  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    87  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    88      IfxEvadc_AnalogConverterMode_off             = 0, /**< \brief Analog Converter off */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    89      IfxEvadc_AnalogConverterMode_slowStandby     = 1, /**< \brief Slow Standby Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    90      IfxEvadc_AnalogConverterMode_fastStandby     = 2, /**< \brief Fast Standby Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    91      IfxEvadc_AnalogConverterMode_normalOperation = 3  /**< \brief Normal operation mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    92  } IfxEvadc_AnalogConverterMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    93  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    94  /** \brief Arbitration round length defined in MODULE_EVADC.G[x].ARBCFG.ARBRND(x=0,1,..,11)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    95   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    96  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    97  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    98      IfxEvadc_ArbitrationRounds_4_slots  = 0,  /**< \brief An arbitration round contains 4 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    99      IfxEvadc_ArbitrationRounds_8_slots  = 1,  /**< \brief An arbitration round contains 8 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   100      IfxEvadc_ArbitrationRounds_16_slots = 2,  /**< \brief An arbitration round contains 16 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   101      IfxEvadc_ArbitrationRounds_20_slots = 3   /**< \brief An arbitration round contains 20 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   102  } IfxEvadc_ArbitrationRounds;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   103  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   104  /** \brief Boundary Extension defined in MODULE_EVADC.G[x].CHCTR[y].B.BNDSELX(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   105   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   106  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   107  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   108      IfxEvadc_BoundaryExtension_standard            = 0,   /**< \brief Boundary Standard mode. BNDSELU/BNDSELL as Boundaries */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   109      IfxEvadc_BoundaryExtension_fastCompareResult1  = 1,   /**< \brief Fast compare mode use as upper boundary  Channel result   1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   110      IfxEvadc_BoundaryExtension_fastCompareResult2  = 2,   /**< \brief Fast compare mode use as upper boundary  Channel result   2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   111      IfxEvadc_BoundaryExtension_fastCompareResult3  = 3,   /**< \brief Fast compare mode use as upper boundary  Channel result   3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   112      IfxEvadc_BoundaryExtension_fastCompareResult4  = 4,   /**< \brief Fast compare mode use as upper boundary  Channel result   4 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   113      IfxEvadc_BoundaryExtension_fastCompareResult5  = 5,   /**< \brief Fast compare mode use as upper boundary  Channel result   5 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   114      IfxEvadc_BoundaryExtension_fastCompareResult6  = 6,   /**< \brief Fast compare mode use as upper boundary  Channel result   6 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   115      IfxEvadc_BoundaryExtension_fastCompareResult7  = 7,   /**< \brief Fast compare mode use as upper boundary  Channel result   7 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   116      IfxEvadc_BoundaryExtension_fastCompareResult8  = 8,   /**< \brief Fast compare mode use as upper boundary  Channel result   8 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   117      IfxEvadc_BoundaryExtension_fastCompareResult9  = 9,   /**< \brief Fast compare mode use as upper boundary  Channel result   9 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   118      IfxEvadc_BoundaryExtension_fastCompareResult10 = 10,  /**< \brief Fast compare mode use as upper boundary  Channel result  10 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   119      IfxEvadc_BoundaryExtension_fastCompareResult11 = 11,  /**< \brief Fast compare mode use as upper boundary  Channel result  11 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   120      IfxEvadc_BoundaryExtension_fastCompareResult12 = 12,  /**< \brief Fast compare mode use as upper boundary  Channel result  12 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   121      IfxEvadc_BoundaryExtension_fastCompareResult13 = 13,  /**< \brief Fast compare mode use as upper boundary  Channel result  13 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   122      IfxEvadc_BoundaryExtension_fastCompareResult14 = 14,  /**< \brief Fast compare mode use as upper boundary  Channel result  14 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   123      IfxEvadc_BoundaryExtension_fastCompareResult15 = 15   /**< \brief Fast compare mode use as upper boundary  Channel result  15 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   124  } IfxEvadc_BoundaryExtension;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   125  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   126  /** \brief BoundarySel defined in MODULE_EVADC.G[x].CHCTR[y].B.BNDSELL(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   127   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   128  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   129  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   130      IfxEvadc_BoundarySelection_group0  = 0,  /**< \brief Use group class 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   131      IfxEvadc_BoundarySelection_group1  = 1,  /**< \brief Use group class 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   132      IfxEvadc_BoundarySelection_global0 = 2,  /**< \brief Use global class 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   133      IfxEvadc_BoundarySelection_global1 = 3   /**< \brief Use global class 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   134  } IfxEvadc_BoundarySelection;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   135  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   136  /** \brief EVADC Channels
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   137   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   138  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   139  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   140      IfxEvadc_ChannelId_none = -1,  /**< \brief None of EVADC channels */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   141      IfxEvadc_ChannelId_0    = 0,   /**< \brief Channel 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   142      IfxEvadc_ChannelId_1    = 1,   /**< \brief Channel 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   143      IfxEvadc_ChannelId_2    = 2,   /**< \brief Channel 2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   144      IfxEvadc_ChannelId_3    = 3,   /**< \brief Channel 3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   145      IfxEvadc_ChannelId_4    = 4,   /**< \brief Channel 4 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   146      IfxEvadc_ChannelId_5    = 5,   /**< \brief Channel 5 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   147      IfxEvadc_ChannelId_6    = 6,   /**< \brief Channel 6 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   148      IfxEvadc_ChannelId_7    = 7,   /**< \brief Channel 7 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   149      IfxEvadc_ChannelId_8    = 8,   /**< \brief Channel 8 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   150      IfxEvadc_ChannelId_9    = 9,   /**< \brief Channel 9 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   151      IfxEvadc_ChannelId_10   = 10,  /**< \brief Channel 10 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   152      IfxEvadc_ChannelId_11   = 11,  /**< \brief Channel 11 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   153      IfxEvadc_ChannelId_12   = 12,  /**< \brief Channel 12 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   154      IfxEvadc_ChannelId_13   = 13,  /**< \brief Channel 13 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   155      IfxEvadc_ChannelId_14   = 14,  /**< \brief Channel 14 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   156      IfxEvadc_ChannelId_15   = 15   /**< \brief Channel 15 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   157  } IfxEvadc_ChannelId;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   158  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   159  /** \brief ADC channel reference defined in MODULE_EVADC.G[x].CHCTR[y].B.REFSEL(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   160   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   161  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   162  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   163      IfxEvadc_ChannelReference_standard = 0,  /**< \brief use Varef as reference */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   164      IfxEvadc_ChannelReference_channel0 = 1   /**< \brief use CH0 as reference */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   165  } IfxEvadc_ChannelReference;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   166  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   167  /** \brief Channel Result defined in MODULE_EVADC.G[x].CHCTR[y].B.RESREG(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   168   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   169  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   170  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   171      IfxEvadc_ChannelResult_0 = 0,      /**< \brief Use Channel result 0  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   172      IfxEvadc_ChannelResult_1,          /**< \brief Use Channel result 1  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   173      IfxEvadc_ChannelResult_2,          /**< \brief Use Channel result 2  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   174      IfxEvadc_ChannelResult_3,          /**< \brief Use Channel result 3  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   175      IfxEvadc_ChannelResult_4,          /**< \brief Use Channel result 4  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   176      IfxEvadc_ChannelResult_5,          /**< \brief Use Channel result 5  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   177      IfxEvadc_ChannelResult_6,          /**< \brief Use Channel result 6  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   178      IfxEvadc_ChannelResult_7,          /**< \brief Use Channel result 7  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   179      IfxEvadc_ChannelResult_8,          /**< \brief Use Channel result 8  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   180      IfxEvadc_ChannelResult_9,          /**< \brief Use Channel result 9  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   181      IfxEvadc_ChannelResult_10,         /**< \brief Use Channel result 10  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   182      IfxEvadc_ChannelResult_11,         /**< \brief Use Channel result 11  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   183      IfxEvadc_ChannelResult_12,         /**< \brief Use Channel result 12  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   184      IfxEvadc_ChannelResult_13,         /**< \brief Use Channel result 13  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   185      IfxEvadc_ChannelResult_14,         /**< \brief Use Channel result 14  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   186      IfxEvadc_ChannelResult_15          /**< \brief Use Channel result 15  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   187  } IfxEvadc_ChannelResult;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   188  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   189  /** \brief External Multiplexer Channel Selection Style as defined in
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   190   * Ifx_EVADC.G[x].EMUXCTR.B.EMXCSS
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   191   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   192  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   193  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   194      IfxEvadc_ChannelSelectionStyle_channelNumber = 0,  /**< \brief selects an arbitrary channel */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   195      IfxEvadc_ChannelSelectionStyle_binary        = 1   /**< \brief Each bit of bitfield EMUXCH selects the
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   196                                                          * associated channel for EMUX control */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   197  } IfxEvadc_ChannelSelectionStyle;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   198  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   199  /** \brief Specifies the External Coding scheme(binary/gray)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   200   * defined in Ifx_EVADC.G[x].EMUXCTR.B.EMXCOD
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   201   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   202  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   203  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   204      IfxEvadc_EmuxCodingScheme_binary = 0,  /**< \brief Output the Channel Number in Binary code */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   205      IfxEvadc_EmuxCodingScheme_gray   = 1   /**< \brief Output the channel number in gray code */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   206  } IfxEvadc_EmuxCodingScheme;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   207  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   208  /** \brief Specifies the Emux interface
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   209   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   210  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   211  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   212      IfxEvadc_EmuxInterface_0 = 0,  /**< \brief Emux Interface 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   213      IfxEvadc_EmuxInterface_1 = 1   /**< \brief Emux Interface 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   214  } IfxEvadc_EmuxInterface;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   215  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   216  /** \brief External Multiplexer sample time control
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   217   * defined in Ifx_EVADC.G[x].EMUXCTR.B.EMXST
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   218   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   219  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   220  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   221      IfxEvadc_EmuxSampleTimeControl_settingChanges = 0,  /**< \brief Use STCE Whenever Setting Changes */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   222      IfxEvadc_EmuxSampleTimeControl_always         = 1   /**< \brief Use STCE for each conversion of an external channel */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   223  } IfxEvadc_EmuxSampleTimeControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   224  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   225  /** \brief specifies the External Channel Start select value
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   226   * defined in Ifx_EVADC.G[x].EMUXCTR.B.EMUXSET
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   227   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   228  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   229  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   230      IfxEvadc_EmuxSelectValue_0 = 0,      /**< \brief Start Selection Value 0  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   231      IfxEvadc_EmuxSelectValue_1,          /**< \brief Start Selection Value 1  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   232      IfxEvadc_EmuxSelectValue_2,          /**< \brief Start Selection Value 2  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   233      IfxEvadc_EmuxSelectValue_3,          /**< \brief Start Selection Value 3  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   234      IfxEvadc_EmuxSelectValue_4,          /**< \brief Start Selection Value 4  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   235      IfxEvadc_EmuxSelectValue_5,          /**< \brief Start Selection Value 5  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   236      IfxEvadc_EmuxSelectValue_6,          /**< \brief Start Selection Value 6  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   237      IfxEvadc_EmuxSelectValue_7           /**< \brief Start Selection Value 7  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   238  } IfxEvadc_EmuxSelectValue;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   239  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   240  /** \brief Specifies External Multiplexer Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   241   * define in Ifx_EVADC.G[x].EMUXCTR.B.EMUXMODE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   242   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   243  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   244  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   245      IfxEvadc_ExternalMultiplexerMode_softwareControl = 0,  /**< \brief Disable The Emux Control */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   246      IfxEvadc_ExternalMultiplexerMode_steady          = 1,  /**< \brief select steady mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   247      IfxEvadc_ExternalMultiplexerMode_singleStep      = 2,  /**< \brief Select single step mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   248      IfxEvadc_ExternalMultiplexerMode_sequence        = 3   /**< \brief Select Sequence Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   249  } IfxEvadc_ExternalMultiplexerMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   250  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   251  /** \brief FIFO mode enable
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   252   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   253  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   254  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   255      IfxEvadc_FifoMode_seperateResultRegister = 0,  /**< \brief seperate Result Register */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   256      IfxEvadc_FifoMode_fifoStructure          = 1,  /**< \brief Part of FIFO structure: copy each new valid result */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   257      IfxEvadc_FifoMode_maximumMode            = 2,  /**< \brief copy new result if bigger */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   258      IfxEvadc_FifoMode_minimumMode            = 3   /**< \brief copy new result if it is smaller */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   259  } IfxEvadc_FifoMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   260  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   261  /** \brief gating mode defined in MODULE_EVADC.QMR0.ENGT
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   262   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   263  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   264  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   265      IfxEvadc_GatingMode_disabled   = 0,  /**< \brief Gating is disabled, no conversion request are issued */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   266      IfxEvadc_GatingMode_always     = 1,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   267      IfxEvadc_GatingMode_gatingHigh = 2,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is high */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   268      IfxEvadc_GatingMode_gatingLow  = 3   /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is low */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   269  } IfxEvadc_GatingMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   270  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   271  /** \brief External trigger gating defined in MODULE_EVADC.G[x].QCTRLy.GTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   272   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   273  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   274  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   275      IfxEvadc_GatingSource_0 = 0,      /**< \brief Input signal REQGTx_0  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   276      IfxEvadc_GatingSource_1,          /**< \brief Input signal REQGTx_1  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   277      IfxEvadc_GatingSource_2,          /**< \brief Input signal REQGTx_2  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   278      IfxEvadc_GatingSource_3,          /**< \brief Input signal REQGTx_3  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   279      IfxEvadc_GatingSource_4,          /**< \brief Input signal REQGTx_4  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   280      IfxEvadc_GatingSource_5,          /**< \brief Input signal REQGTx_5  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   281      IfxEvadc_GatingSource_6,          /**< \brief Input signal REQGTx_6  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   282      IfxEvadc_GatingSource_7,          /**< \brief Input signal REQGTx_7  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   283      IfxEvadc_GatingSource_8,          /**< \brief Input signal REQGTx_8  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   284      IfxEvadc_GatingSource_9,          /**< \brief Input signal REQGTx_9  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   285      IfxEvadc_GatingSource_10,         /**< \brief Input signal REQGTx_10  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   286      IfxEvadc_GatingSource_11,         /**< \brief Input signal REQGTx_11  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   287      IfxEvadc_GatingSource_12,         /**< \brief Input signal REQGTx_12  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   288      IfxEvadc_GatingSource_13,         /**< \brief Input signal REQGTx_13  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   289      IfxEvadc_GatingSource_14,         /**< \brief Input signal REQGTx_14  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   290      IfxEvadc_GatingSource_15          /**< \brief Input signal REQGTx_15  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   291  } IfxEvadc_GatingSource;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   292  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   293  /** \brief inputClass defined in MODULE_EVADC.G[x].CHCTR[y].B.ICLSEL(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   294   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   295  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   296  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   297      IfxEvadc_InputClasses_group0  = 0,  /**< \brief Use group class 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   298      IfxEvadc_InputClasses_group1  = 1,  /**< \brief Use group class 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   299      IfxEvadc_InputClasses_global0 = 2,  /**< \brief Use global class 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   300      IfxEvadc_InputClasses_global1 = 3   /**< \brief Use global class 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   301  } IfxEvadc_InputClasses;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   302  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   303  /** \brief ADC channel limit check defined in MODULE_EVADC.G[x].CHCTR[y].B.CHEVMODE(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   304   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   305  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   306  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   307      IfxEvadc_LimitCheck_noCheck            = 0,  /**< \brief Normal compare mode Event Never Fast Compare mode Event Never */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   308      IfxEvadc_LimitCheck_eventIfInArea      = 1,  /**< \brief Normal compare mode Event If result is inside the boundary band    Fast Compare mode Event If result switches to high (above comp. value) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   309      IfxEvadc_LimitCheck_eventIfOutsideArea = 2,  /**< \brief Normal compare mode Event If result is outside the boundary band   Fast Compare mode Event If result switches to low (below comp. value) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   310      IfxEvadc_LimitCheck_always             = 3   /**< \brief Normal compare mode Event Always   Fast Compare mode Event Always */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   311  } IfxEvadc_LimitCheck;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   312  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   313  /** \brief Access protection for Group registers defined in MODULE_EVADC.ACCPROT0.U
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   314   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   315  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   316  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   317      IfxEvadc_Protection_channelControl0         = 0,   /**< \brief Access control for GxCHCTR0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   318      IfxEvadc_Protection_channelControl1         = 1,   /**< \brief Access control for GxCHCTR1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   319      IfxEvadc_Protection_channelControl2         = 2,   /**< \brief Access control for GxCHCTR2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   320      IfxEvadc_Protection_channelControl3         = 3,   /**< \brief Access control for GxCHCTR3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   321      IfxEvadc_Protection_channelControl4         = 4,   /**< \brief Access control for GxCHCTR4 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   322      IfxEvadc_Protection_channelControl5         = 5,   /**< \brief Access control for GxCHCTR5 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   323      IfxEvadc_Protection_channelControl6         = 6,   /**< \brief Access control for GxCHCTR6 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   324      IfxEvadc_Protection_channelControl7         = 7,   /**< \brief Access control for GxCHCTR7 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   325      IfxEvadc_Protection_channelControl8         = 8,   /**< \brief Access control for GxCHCTR8 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   326      IfxEvadc_Protection_channelControl9         = 9,   /**< \brief Access control for GxCHCTR9 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   327      IfxEvadc_Protection_channelControl10        = 10,  /**< \brief Access control for GxCHCTR10 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   328      IfxEvadc_Protection_channelControl11        = 11,  /**< \brief Access control for GxCHCTR11 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   329      IfxEvadc_Protection_channelControl12        = 12,  /**< \brief Access control for GxCHCTR12 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   330      IfxEvadc_Protection_channelControl13        = 13,  /**< \brief Access control for GxCHCTR13 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   331      IfxEvadc_Protection_channelControl14        = 14,  /**< \brief Access control for GxCHCTR14 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   332      IfxEvadc_Protection_initGroup0              = 16,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   333      IfxEvadc_Protection_initGroup1              = 17,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   334      IfxEvadc_Protection_initGroup2              = 18,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   335      IfxEvadc_Protection_initGroup3              = 19,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   336      IfxEvadc_Protection_initGroup4              = 20,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   337      IfxEvadc_Protection_initGroup5              = 21,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   338      IfxEvadc_Protection_initGroup6              = 22,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   339      IfxEvadc_Protection_initGroup7              = 23,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   340      IfxEvadc_Protection_initGroup8              = 24,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   341      IfxEvadc_Protection_initGroup9              = 25,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   342      IfxEvadc_Protection_initGroup10             = 26,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   343      IfxEvadc_Protection_initGroup11             = 27,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   344      IfxEvadc_Protection_initGroup12             = 28,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   345      IfxEvadc_Protection_initGroup13             = 29,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   346      IfxEvadc_Protection_initGroup14             = 30,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   347      IfxEvadc_Protection_serviceGroup0           = 32,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   348      IfxEvadc_Protection_serviceGroup1           = 33,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   349      IfxEvadc_Protection_serviceGroup2           = 34,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   350      IfxEvadc_Protection_serviceGroup3           = 35,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   351      IfxEvadc_Protection_serviceGroup4           = 36,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   352      IfxEvadc_Protection_serviceGroup5           = 37,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   353      IfxEvadc_Protection_serviceGroup6           = 38,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   354      IfxEvadc_Protection_serviceGroup7           = 39,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   355      IfxEvadc_Protection_serviceGroup8           = 40,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   356      IfxEvadc_Protection_serviceGroup9           = 41,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   357      IfxEvadc_Protection_serviceGroup10          = 42,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   358      IfxEvadc_Protection_serviceGroup11          = 43,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   359      IfxEvadc_Protection_serviceGroup12          = 44,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   360      IfxEvadc_Protection_serviceGroup13          = 45,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   361      IfxEvadc_Protection_serviceGroup14          = 46,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   362      IfxEvadc_Protection_resultRegisterGroup0    = 48,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   363      IfxEvadc_Protection_resultRegisterGroup1    = 49,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   364      IfxEvadc_Protection_resultRegisterGroup2    = 50,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   365      IfxEvadc_Protection_resultRegisterGroup3    = 51,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   366      IfxEvadc_Protection_resultRegisterGroup4    = 52,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   367      IfxEvadc_Protection_resultRegisterGroup5    = 53,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   368      IfxEvadc_Protection_resultRegisterGroup6    = 54,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   369      IfxEvadc_Protection_resultRegisterGroup7    = 55,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   370      IfxEvadc_Protection_resultRegisterGroup8    = 56,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   371      IfxEvadc_Protection_resultRegisterGroup9    = 57,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   372      IfxEvadc_Protection_resultRegisterGroup10   = 58,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   373      IfxEvadc_Protection_resultRegisterGroup11   = 59,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   374      IfxEvadc_Protection_resultRegisterGroup12   = 60,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   375      IfxEvadc_Protection_resultRegisterGroup13   = 61,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   376      IfxEvadc_Protection_resultRegisterGroup14   = 62,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   377      IfxEvadc_Protection_initFastCompareChannel0 = 64,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   378                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   379      IfxEvadc_Protection_initFastCompareChannel1 = 65,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   380                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   381      IfxEvadc_Protection_initFastCompareChannel2 = 66,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   382                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   383      IfxEvadc_Protection_initFastCompareChannel3 = 67,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   384                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   385      IfxEvadc_Protection_initFastCompareChannel4 = 68,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   386                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   387      IfxEvadc_Protection_initFastCompareChannel5 = 69,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   388                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   389      IfxEvadc_Protection_initFastCompareChannel6 = 70,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   390                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   391      IfxEvadc_Protection_initFastCompareChannel7 = 71,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   392                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   393      IfxEvadc_Protection_globalConfig            = 80,  /**< \brief Access control for GLOBCFG */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   394      IfxEvadc_Protection_externalMultiplexer     = 81,  /**< \brief Access control for EMUXSEL, GxEMUXCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   395      IfxEvadc_Protection_testFunction            = 82   /**< \brief Access control for GLOBTF */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   396  } IfxEvadc_Protection;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   397  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   398  /** \brief Arbitration priority, Group x,defined in MODULE_EVADC.G[x].ARBPR.PRIOy(x=0,1,...,11;y=0,1,2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   399   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   400  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   401  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   402      IfxEvadc_RequestSlotPriority_lowest  = 0, /**< \brief Lowest priority */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   403      IfxEvadc_RequestSlotPriority_low     = 1, /**< \brief Lowpriority */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   404      IfxEvadc_RequestSlotPriority_high    = 2, /**< \brief High priority */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   405      IfxEvadc_RequestSlotPriority_highest = 3  /**< \brief Highest priority */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   406  } IfxEvadc_RequestSlotPriority;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   407  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   408  /** \brief Request source start mode defined in MODULE_EVADC.G[x].ARBPR.CSMy(x=0,1,...,11;y=0,1,2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   409   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   410  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   411  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   412      IfxEvadc_RequestSlotStartMode_waitForStart       = 0, /**< \brief Wait for start */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   413      IfxEvadc_RequestSlotStartMode_cancelInjectRepeat = 1  /**< \brief Cancel-Inject-Repeat */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   414  } IfxEvadc_RequestSlotStartMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   415  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   416  /** \brief Request sources
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   417   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   418  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   419  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   420      IfxEvadc_RequestSource_queue0 = 0,  /**< \brief 8 stage Queue0 request */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   421      IfxEvadc_RequestSource_queue1 = 1,  /**< \brief 8 stage Queue1 request */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   422      IfxEvadc_RequestSource_queue2 = 2   /**< \brief 8 stage Queue2 request */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   423  } IfxEvadc_RequestSource;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   424  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   425  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   426   * Definition in Ifx_EVADC.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   427   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   428  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   429  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   430      IfxEvadc_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   431      IfxEvadc_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   432  } IfxEvadc_SleepMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   433  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   434  /** \brief Service Node defined in MODULE_EVADC.G[x].SRACT.U(x= 0,1,..,11)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   435   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   436  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   437  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   438      IfxEvadc_SrcNr_group0  = 0,  /**< \brief service request line 0 of group */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   439      IfxEvadc_SrcNr_group1  = 1,  /**< \brief service request line 1 of group */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   440      IfxEvadc_SrcNr_group2  = 2,  /**< \brief service request line 2 of group */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   441      IfxEvadc_SrcNr_group3  = 3,  /**< \brief service request line 3 of group */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   442      IfxEvadc_SrcNr_shared0 = 4,  /**< \brief Select shared service request line 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   443      IfxEvadc_SrcNr_shared1 = 5,  /**< \brief Select shared service request line 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   444      IfxEvadc_SrcNr_shared2 = 6,  /**< \brief Select shared service request line 2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   445      IfxEvadc_SrcNr_shared3 = 7   /**< \brief Select shared service request line 3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   446  } IfxEvadc_SrcNr;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   447  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   448  /** \brief API return values defined in
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   449   * MODULE_EVADC.G[x].QSR0.U,MODULE_EVADC.G[x].QSR1.U,MODULE_EVADC.G[x].QSR2.U(x=0,1,...,11)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   450   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   451  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   452  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   453      IfxEvadc_Status_noError              = 0, /**< \brief No error during api execution */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   454      IfxEvadc_Status_notInitialised       = 1, /**< \brief Appropriate initialisation not done */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   455      IfxEvadc_Status_invalidGroup         = 2, /**< \brief Invalid group number */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   456      IfxEvadc_Status_invalidChannel       = 3, /**< \brief Invalid channel number */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   457      IfxEvadc_Status_queueFull            = 4, /**< \brief Queue is full */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   458      IfxEvadc_Status_noAccess             = 5, /**< \brief Access to the group/channel is disabled */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   459      IfxEvadc_Status_channelsStillPending = 6  /**< \brief Conversion for some of the channels are still pending */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   460  } IfxEvadc_Status;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   461  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   462  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   463   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   464  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   465  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   466      IfxEvadc_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   467      IfxEvadc_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   468      IfxEvadc_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   469  } IfxEvadc_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   470  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   471  /** \brief trigger definition defined in MODULE_EVADC.G[x].QCTRL0.XTMODE(x=0,1,..,11)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   472   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   473  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   474  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   475      IfxEvadc_TriggerMode_noExternalTrigger = 0,  /**< \brief No external trigger */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   476      IfxEvadc_TriggerMode_uponFallingEdge   = 1,  /**< \brief Trigger event upon a falling edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   477      IfxEvadc_TriggerMode_uponRisingEdge    = 2,  /**< \brief Trigger event upon a rising edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   478      IfxEvadc_TriggerMode_uponAnyEdge       = 3   /**< \brief Trigger event upon any edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   479  } IfxEvadc_TriggerMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   480  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   481  /** \brief Trigger request source defined in MODULE_EVADC.G[x].QCTRLy.XTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   482   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   483  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   484  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   485      IfxEvadc_TriggerSource_0 = 0,      /**< \brief Input signal REQTRx_0  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   486      IfxEvadc_TriggerSource_1,          /**< \brief Input signal REQTRx_1  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   487      IfxEvadc_TriggerSource_2,          /**< \brief Input signal REQTRx_2  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   488      IfxEvadc_TriggerSource_3,          /**< \brief Input signal REQTRx_3  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   489      IfxEvadc_TriggerSource_4,          /**< \brief Input signal REQTRx_4  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   490      IfxEvadc_TriggerSource_5,          /**< \brief Input signal REQTRx_5  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   491      IfxEvadc_TriggerSource_6,          /**< \brief Input signal REQTRx_6  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   492      IfxEvadc_TriggerSource_7,          /**< \brief Input signal REQTRx_7  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   493      IfxEvadc_TriggerSource_8,          /**< \brief Input signal REQTRx_8  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   494      IfxEvadc_TriggerSource_9,          /**< \brief Input signal REQTRx_9  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   495      IfxEvadc_TriggerSource_10,         /**< \brief Input signal REQTRx_10  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   496      IfxEvadc_TriggerSource_11,         /**< \brief Input signal REQTRx_11  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   497      IfxEvadc_TriggerSource_12,         /**< \brief Input signal REQTRx_12  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   498      IfxEvadc_TriggerSource_13,         /**< \brief Input signal REQTRx_13  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   499      IfxEvadc_TriggerSource_14,         /**< \brief Input signal REQTRx_14  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   500      IfxEvadc_TriggerSource_15          /**< \brief Input signal REQTRx_15  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   501  } IfxEvadc_TriggerSource;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   502  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   503  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   504  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   505  /** \addtogroup IfxLld_Evadc_Std_FastCompare
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   506   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   507  /** \brief Selects the behaviour of BoundaryFlag in FCBFL.B.BFA
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   508   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   509  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   510  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   511      IfxEvadc_BoundaryFlagActivationMode_0 = 0,  /**< \brief Set boundary flag BFL if result FCR = 1 (input above the defined
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   512                                                   * band or compare value), clear if FCR = 0 (input below) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   513      IfxEvadc_BoundaryFlagActivationMode_1 = 1   /**< \brief Set boundary flag BFL if result FCR = 0 (input below the defined
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   514                                                   * band or compare value), clear if FCR = 1 (input above) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   515  } IfxEvadc_BoundaryFlagActivationMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   516  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   517  /** \brief Controls in in FCBFL.B.BFI options for whether to use Boundary Flag(FCM.B.BFL) directly or in a inverted format.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   518   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   519  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   520  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   521      IfxEvadc_BoundaryFlagInversionControl_direct = 0,  /**< \brief Use BFL directly */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   522      IfxEvadc_BoundaryFlagInversionControl_invert = 1   /**< \brief Use inverted BFL */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   523  } IfxEvadc_BoundaryFlagInversionControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   524  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   525  /** \brief Options for FCBFL.B.BFLNP to select Boundary Flag Node Pointer
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   526   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   527  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   528  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   529      IfxEvadc_BoundaryFlagNodePointer_commonBoundaryFlagOutput0 = 0,  /**< \brief Select common boundary flag output 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   530      IfxEvadc_BoundaryFlagNodePointer_commonBoundaryFlagOutput1 = 1,  /**< \brief Select common boundary flag output 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   531      IfxEvadc_BoundaryFlagNodePointer_commonBoundaryFlagOutput2 = 2,  /**< \brief Select common boundary flag output 2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   532      IfxEvadc_BoundaryFlagNodePointer_commonBoundaryFlagOutput3 = 3,  /**< \brief Select common boundary flag output 3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   533      IfxEvadc_BoundaryFlagNodePointer_sharedServiceRequestLine0 = 4,  /**< \brief Select shared service request line 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   534      IfxEvadc_BoundaryFlagNodePointer_sharedServiceRequestLine1 = 5,  /**< \brief Select shared service request line 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   535      IfxEvadc_BoundaryFlagNodePointer_sharedServiceRequestLine2 = 6,  /**< \brief Select shared service request line 2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   536      IfxEvadc_BoundaryFlagNodePointer_sharedServiceRequestLine3 = 7,  /**< \brief Select shared service request line 3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   537      IfxEvadc_BoundaryFlagNodePointer_disabled                  = 16  /**< \brief Disabled, no common output signal */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   538  } IfxEvadc_BoundaryFlagNodePointer;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   539  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   540  /** \brief Options for FCBFL.B.BFS to modify the Boundary Flag(FCM.B.BFL)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   541   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   542  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   543  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   544      IfxEvadc_BoundaryFlagSwControl_noAction = 0,  /**< \brief No Action */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   545      IfxEvadc_BoundaryFlagSwControl_clear    = 1,  /**< \brief Clear BFL */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   546      IfxEvadc_BoundaryFlagSwControl_set      = 2,  /**< \brief Set BFL */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   547      IfxEvadc_BoundaryFlagSwControl_toggle   = 3   /**< \brief Toggle BFL */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   548  } IfxEvadc_BoundaryFlagSwControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   549  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   550  /** \brief Channel Event Mode for configuring generation of events for Fast Compare channels in FCCTRL.B.CHEVMODE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   551   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   552  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   553  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   554      IfxEvadc_ChannelEventMode_never                    = 0, /**< \brief Never generate a service request */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   555      IfxEvadc_ChannelEventMode_aboveCompareValue        = 1, /**< \brief Generate a service request in case the result is above compare value */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   556      IfxEvadc_ChannelEventMode_belowCompareValue        = 2, /**< \brief Generate a service request in case the result is below compare value */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   557      IfxEvadc_ChannelEventMode_aboveOrBelowCompareValue = 3  /**< \brief Generate a service request in case the result switches to either level(above or below the compare value) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   558  } IfxEvadc_ChannelEventMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   559  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   560  /** \brief Defines the frequency of the analog converter clock f_ADCI (base clock for
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   561   * conversion steps), derived from the peripheral clock: f_ADCI = fADC / CP.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   562   * To be filled in FCCTRL.B.DIVA for Fast Compare channels & ANCFG.B.DIVA for other groups
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   563   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   564  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   565  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   566      IfxEvadc_ClockDividerFactor_maxFrequency = 0,  /**< \brief Max. frequency */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   567      IfxEvadc_ClockDividerFactor_2            = 1,  /**< \brief Frequency Divided by 2  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   568      IfxEvadc_ClockDividerFactor_3,                 /**< \brief Frequency Divided by 3  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   569      IfxEvadc_ClockDividerFactor_4,                 /**< \brief Frequency Divided by 4  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   570      IfxEvadc_ClockDividerFactor_5,                 /**< \brief Frequency Divided by 5  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   571      IfxEvadc_ClockDividerFactor_6,                 /**< \brief Frequency Divided by 6  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   572      IfxEvadc_ClockDividerFactor_7,                 /**< \brief Frequency Divided by 7  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   573      IfxEvadc_ClockDividerFactor_8,                 /**< \brief Frequency Divided by 8  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   574      IfxEvadc_ClockDividerFactor_9,                 /**< \brief Frequency Divided by 9  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   575      IfxEvadc_ClockDividerFactor_10,                /**< \brief Frequency Divided by 10  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   576      IfxEvadc_ClockDividerFactor_11,                /**< \brief Frequency Divided by 11  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   577      IfxEvadc_ClockDividerFactor_12,                /**< \brief Frequency Divided by 12  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   578      IfxEvadc_ClockDividerFactor_13,                /**< \brief Frequency Divided by 13  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   579      IfxEvadc_ClockDividerFactor_14,                /**< \brief Frequency Divided by 14  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   580      IfxEvadc_ClockDividerFactor_15,                /**< \brief Frequency Divided by 15  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   581      IfxEvadc_ClockDividerFactor_16,                /**< \brief Frequency Divided by 16  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   582      IfxEvadc_ClockDividerFactor_17,                /**< \brief Frequency Divided by 17  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   583      IfxEvadc_ClockDividerFactor_18,                /**< \brief Frequency Divided by 18  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   584      IfxEvadc_ClockDividerFactor_19,                /**< \brief Frequency Divided by 19  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   585      IfxEvadc_ClockDividerFactor_20,                /**< \brief Frequency Divided by 20  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   586      IfxEvadc_ClockDividerFactor_21,                /**< \brief Frequency Divided by 21  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   587      IfxEvadc_ClockDividerFactor_22,                /**< \brief Frequency Divided by 22  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   588      IfxEvadc_ClockDividerFactor_23,                /**< \brief Frequency Divided by 23  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   589      IfxEvadc_ClockDividerFactor_24,                /**< \brief Frequency Divided by 24  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   590      IfxEvadc_ClockDividerFactor_25,                /**< \brief Frequency Divided by 25  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   591      IfxEvadc_ClockDividerFactor_26,                /**< \brief Frequency Divided by 26  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   592      IfxEvadc_ClockDividerFactor_27,                /**< \brief Frequency Divided by 27  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   593      IfxEvadc_ClockDividerFactor_28,                /**< \brief Frequency Divided by 28  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   594      IfxEvadc_ClockDividerFactor_29,                /**< \brief Frequency Divided by 29  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   595      IfxEvadc_ClockDividerFactor_30,                /**< \brief Frequency Divided by 30  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   596      IfxEvadc_ClockDividerFactor_31,                /**< \brief Frequency Divided by 31  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   597      IfxEvadc_ClockDividerFactor_32                 /**< \brief Frequency Divided by 32  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   598  } IfxEvadc_ClockDividerFactor;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   599  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   600  /** \brief External Trigger Polarity to be set in FCCTRL.B.XTPOL
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   601   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   602  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   603  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   604      IfxEvadc_ExternalTriggerPolarity_direct   = 0, /**< \brief Use selected input signal directly */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   605      IfxEvadc_ExternalTriggerPolarity_inverted = 1  /**< \brief Invert selected input signal */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   606  } IfxEvadc_ExternalTriggerPolarity;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   607  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   608  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   609  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   610      IfxEvadc_FastCompareAnalogClockSynchronizationDelay_0 = 0,  /**< \brief No delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   611      IfxEvadc_FastCompareAnalogClockSynchronizationDelay_1 = 1,  /**< \brief 1 clock cycle delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   612      IfxEvadc_FastCompareAnalogClockSynchronizationDelay_2 = 2,  /**< \brief 2 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   613      IfxEvadc_FastCompareAnalogClockSynchronizationDelay_3 = 3   /**< \brief 3 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   614  } IfxEvadc_FastCompareAnalogClockSynchronizationDelay;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   615  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   616  /** \brief Settings for Analog Coverter Controller to be done in FCM.B.ANON
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   617   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   618  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   619  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   620      IfxEvadc_FastCompareAnalogConverterControl_off    = 0, /**< \brief Analog converter off */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   621      IfxEvadc_FastCompareAnalogConverterControl_normal = 1  /**< \brief Normal operation */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   622  } IfxEvadc_FastCompareAnalogConverterControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   623  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   624  /** \brief Defines the source of the value(s) in bitfield FCM.B.FCREF
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   625   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   626   * Note: Software can only write to bitfield FCM.B.FCREF, while AUE = 00B.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   627   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   628  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   629  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   630      IfxEvadc_FastCompareAutomaticUpdate_sw             = 0,  /**< \brief No automatic update.Value(s) written by software. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   631      IfxEvadc_FastCompareAutomaticUpdate_alternateValue = 1,  /**< \brief While gate is active (high), value is copied from bitfield FCM.B.FCRCOMPA and while gate is inactive (low), value is copied from bitfield FCM.B.FCRCOMPB */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   632      IfxEvadc_FastCompareAutomaticUpdate_rampCounter    = 2,  /**< \brief Value(s) copied from ramp counter on ramp start or counter
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   633                                                                * update. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   634      IfxEvadc_FastCompareAutomaticUpdate_analogSource   = 3   /**< \brief Value(s) written by the associated converter */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   635  } IfxEvadc_FastCompareAutomaticUpdate;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   636  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   637  /** \brief Defines the basic run conditions of the fast compare channel in FCM.B.RUNCOMP
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   638   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   639  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   640  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   641      IfxEvadc_FastCompareRunControl_stop      = 0, /**< \brief Stop, no operation */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   642      IfxEvadc_FastCompareRunControl_alwaysRun = 1  /**< \brief Always run */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   643  } IfxEvadc_FastCompareRunControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   644  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   645  /** \brief Criteria/mode settings for service request generation in FCM.B.SRG
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   646   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   647  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   648  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   649      IfxEvadc_FastCompareServiceRequestGeneration_off       = 0, /**< \brief No service requests are generated */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   650      IfxEvadc_FastCompareServiceRequestGeneration_rampEnd   = 1, /**< \brief Issue service request when the ramp counter stops */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   651      IfxEvadc_FastCompareServiceRequestGeneration_newValue  = 2, /**< \brief Issue service request when a value is written to FCREF */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   652      IfxEvadc_FastCompareServiceRequestGeneration_newResult = 3  /**< \brief Issue service request when a new result available */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   653  } IfxEvadc_FastCompareServiceRequestGeneration;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   654  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   655  /** \brief Gate Operating Mode to be filled in FCCTRL.B.GTMODE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   656   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   657  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   658  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   659      IfxEvadc_GateOperatingMode_noGateFunction     = 0,  /**< \brief No gate function */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   660      IfxEvadc_GateOperatingMode_alternateValueMode = 1,  /**< \brief Alternate value mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   661      IfxEvadc_GateOperatingMode_lockBoundaryFlag   = 2   /**< \brief Lock boundary flag */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   662  } IfxEvadc_GateOperatingMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   663  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   664  /** \brief Ramp direction setting in FCM.B.FCRDIR
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   665   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   666  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   667  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   668      IfxEvadc_RampDirection_down = 0,  /**< \brief Decrement ramp counter and stop when counter <= FCRCOMPB */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   669      IfxEvadc_RampDirection_up   = 1   /**< \brief Increment ramp counter and stop when counter >= FCRCOMPB */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   670  } IfxEvadc_RampDirection;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   671  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   672  /** \brief Defines the run conditions for the ramp generation in FCM.B.RUNRAMP
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   673   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   674  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   675  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   676      IfxEvadc_RampRunControl_stop = 0,  /**< \brief Stop, no operation */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   677      IfxEvadc_RampRunControl_1    = 1,  /**< \brief Start immediately when GxFCRAMP0/1 is written */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   678      IfxEvadc_RampRunControl_2    = 2,  /**< \brief Start upon the selected trigger event of signal REQTRx */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   679      IfxEvadc_RampRunControl_3    = 3   /**< \brief Start immediately when GxFCRAMP0/1 is written and
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   680                                          * stop upon the selected trigger event of signal REQTRx */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   681  } IfxEvadc_RampRunControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   682  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   683  /** \brief Sample timing sync settings for FCM.B.SSE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   684   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   685  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   686  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   687      IfxEvadc_SampleSynchronization_off                     = 0, /**< \brief No synchronization */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   688      IfxEvadc_SampleSynchronization_synchronizeSampleTiming = 1  /**< \brief Sample timing is synchronized.This is recommended for operation of several ADCs. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   689  } IfxEvadc_SampleSynchronization;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   690  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   691  /** \brief Trigger operating mode in Fast Compare channels, to be entered in FCCTRL.B.XTMODE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   692   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   693  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   694  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   695      IfxEvadc_TriggerOperatingMode_noExternalTrigger = 0,  /**< \brief No external trigger */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   696      IfxEvadc_TriggerOperatingMode_fallingEdge       = 1,  /**< \brief Trigger event upon a falling edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   697      IfxEvadc_TriggerOperatingMode_risingEdge        = 2,  /**< \brief Trigger event upon a rising edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   698      IfxEvadc_TriggerOperatingMode_anyEdge           = 3   /**< \brief Trigger event upon any edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   699  } IfxEvadc_TriggerOperatingMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   700  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   701  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   702  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   703  /** \brief Defines the way the analog clock is generated.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   704   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   705  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   706  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   707      IfxEvadc_AnalogClockGenerationMode_synchronized   = 0, /**< \brief Synchronized mode: Initial clock pulse is defined by the phase synchronizer */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   708      IfxEvadc_AnalogClockGenerationMode_unsynchronized = 1  /**< \brief Unsynchronized mode: The analog clock is generated independently. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   709  } IfxEvadc_AnalogClockGenerationMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   710  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   711  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   712  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   713      IfxEvadc_AnalogClockSynchronizationDelay_0 = 0,  /**< \brief No Delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   714      IfxEvadc_AnalogClockSynchronizationDelay_1 = 1,  /**< \brief 1 clock cycle delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   715      IfxEvadc_AnalogClockSynchronizationDelay_2 = 2,  /**< \brief 2 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   716      IfxEvadc_AnalogClockSynchronizationDelay_3 = 3,  /**< \brief 3 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   717      IfxEvadc_AnalogClockSynchronizationDelay_4 = 4,  /**< \brief 4 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   718      IfxEvadc_AnalogClockSynchronizationDelay_5 = 5,  /**< \brief 5 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   719      IfxEvadc_AnalogClockSynchronizationDelay_6 = 6,  /**< \brief 6 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   720      IfxEvadc_AnalogClockSynchronizationDelay_7 = 7   /**< \brief 7 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   721  } IfxEvadc_AnalogClockSynchronizationDelay;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   722  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   723  /** \brief Analog Input Precharge Control for Standard Conversions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   724   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   725  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   726  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   727      IfxEvadc_AnalogInputPrechargeControl_noPrecharge = 0,  /**< \brief No Precharge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   728      IfxEvadc_AnalogInputPrechargeControl_8Cycles     = 1,  /**< \brief Precharge for 8 clock cycles */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   729      IfxEvadc_AnalogInputPrechargeControl_16Cycles    = 2,  /**< \brief Precharge for 16 clock cycles */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   730      IfxEvadc_AnalogInputPrechargeControl_32cycles    = 3   /**< \brief Precharge for 32 clock cycles */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   731  } IfxEvadc_AnalogInputPrechargeControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   732  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   733  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   734  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   735      IfxEvadc_ArbitrationMode_0 = 0,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   736      IfxEvadc_ArbitrationMode_1 = 1
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   737  } IfxEvadc_ArbitrationMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   738  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   739  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   740  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   741      IfxEvadc_CalibrationSampleTimeControl_2 = 0,  /**< \brief 2*t_ADCI */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   742      IfxEvadc_CalibrationSampleTimeControl_4 = 1,  /**< \brief 4*t_ADCI */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   743      IfxEvadc_CalibrationSampleTimeControl_6 = 2,  /**< \brief 6*t_ADCI */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   744      IfxEvadc_CalibrationSampleTimeControl_8 = 3   /**< \brief 8*t_ADCI */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   745  } IfxEvadc_CalibrationSampleTimeControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   746  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   747  /** \brief Conversion Mode for standard Conversion
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   748   *  channel precision defined in MODULE_EVADC.G[x].CHCTR[y].B.ICLASS[y].B.CMS(x=0,1,...,11;y=0,1)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   749   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   750  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   751  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   752      IfxEvadc_ChannelNoiseReduction_standardConversion = 0,  /**< \brief Standard Conversions mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   753      IfxEvadc_ChannelNoiseReduction_level1             = 1,  /**< \brief Noise reduction conversion level 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   754      IfxEvadc_ChannelNoiseReduction_level2             = 2,  /**< \brief Noise reduction conversion level 2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   755      IfxEvadc_ChannelNoiseReduction_level3             = 3   /**< \brief Noise reduction conversion level 3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   756  } IfxEvadc_ChannelNoiseReduction;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   757  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   758  /** \brief Conversion Mode for EMUX Conversions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   759   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   760  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   761  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   762      IfxEvadc_ChannelNoiseReductionEMUX_standardConversion = 0,  /**< \brief Standard conversion */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   763      IfxEvadc_ChannelNoiseReductionEMUX_level1             = 1,  /**< \brief Noise reduction conversion level 1, 1 additional conversion step */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   764      IfxEvadc_ChannelNoiseReductionEMUX_level2             = 2,  /**< \brief Noise reduction conversion level 2, 3 additional conversion steps */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   765      IfxEvadc_ChannelNoiseReductionEMUX_level3             = 3   /**< \brief Noise reduction conversion level 3, 7 additional conversion steps */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   766  } IfxEvadc_ChannelNoiseReductionEMUX;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   767  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   768  /** \brief Data Modification Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   769   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   770  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   771  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   772      IfxEvadc_DataModificationMode_standardDataReduction = 0,  /**< \brief Standard Data Reduction */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   773      IfxEvadc_DataModificationMode_resultFilteringMode   = 1,  /**< \brief Result Filtering Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   774      IfxEvadc_DataModificationMode_differenceMode        = 2   /**< \brief Difference Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   775  } IfxEvadc_DataModificationMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   776  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   777  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   778  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   779      IfxEvadc_DataReductionControlMode_0  = 0,   /**< \brief If DMM=0b00, Data reduction disabled,if DMM=0b01, FIR:a=2,b=1,c=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   780      IfxEvadc_DataReductionControlMode_1  = 1,   /**< \brief If DMM=0b00, Accumulate 2 result values,if DMM=0b01, FIR:a=1,b=2,c=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   781      IfxEvadc_DataReductionControlMode_2  = 2,   /**< \brief If DMM=0b00, Accumulate 3 result values,if DMM=0b01, FIR:a=2,b=0,c=1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   782      IfxEvadc_DataReductionControlMode_3  = 3,   /**< \brief If DMM=0b00, Accumulate 4 result values,if DMM=0b01, FIR:a=1,b=1,c=1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   783      IfxEvadc_DataReductionControlMode_4  = 4,   /**< \brief If DMM=0b00, Accumulate 5 result values,if DMM=0b01, FIR:a=1,b=0,c=2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   784      IfxEvadc_DataReductionControlMode_5  = 5,   /**< \brief If DMM=0b00, Accumulate 6 result values,if DMM=0b01, FIR:a=3,b=1,c=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   785      IfxEvadc_DataReductionControlMode_6  = 6,   /**< \brief If DMM=0b00, Accumulate 7 result values,if DMM=0b01, FIR:a=2,b=2,c=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   786      IfxEvadc_DataReductionControlMode_7  = 7,   /**< \brief If DMM=0b00, Accumulate 8 result values,if DMM=0b01, FIR:a=1,b=3,c=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   787      IfxEvadc_DataReductionControlMode_8  = 8,   /**< \brief If DMM=0b00, Accumulate 9 result values,if DMM=0b01, FIR:a=3,b=0,c=1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   788      IfxEvadc_DataReductionControlMode_9  = 9,   /**< \brief If DMM=0b00, Accumulate 10 result values,if DMM=0b01, FIR:a=2,b=1,c=1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   789      IfxEvadc_DataReductionControlMode_10 = 10,  /**< \brief If DMM=0b00, Accumulate 11 result values,if DMM=0b01, FIR:a=1,b=2,c=1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   790      IfxEvadc_DataReductionControlMode_11 = 11,  /**< \brief If DMM=0b00, Accumulate 12 result values,if DMM=0b01, FIR:a=2,b=0,c=2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   791      IfxEvadc_DataReductionControlMode_12 = 12,  /**< \brief If DMM=0b00, Accumulate 13 result values,if DMM=0b01, FIR:a=1,b=1,c=2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   792      IfxEvadc_DataReductionControlMode_13 = 13,  /**< \brief If DMM=0b00, Accumulate 14 result values,if DMM=0b01, FIR:a=1,b=0,c=3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   793      IfxEvadc_DataReductionControlMode_14 = 14,  /**< \brief If DMM=0b00, Accumulate 15 result values,if DMM=0b01, IIR:a=2,b=2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   794      IfxEvadc_DataReductionControlMode_15 = 15   /**< \brief If DMM=0b00, Accumulate 16 result values,if DMM=0b01, IIR:a=3,b=4 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   795  } IfxEvadc_DataReductionControlMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   796  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   797  /** \brief Contains options for Idle Precharge levels
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   798   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   799  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   800  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   801      IfxEvadc_IdlePrecharge_currentLevel = 0,  /**< \brief The sampling capacitor keeps the current charge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   802      IfxEvadc_IdlePrecharge_referenceBy2 = 1   /**< \brief ThSampling capacitor is precharged to approx. half the reference when idle */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   803  } IfxEvadc_IdlePrecharge;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   804  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   805  /** \brief Selects the MSB conversion time(in terms of t_ADC)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   806   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   807  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   808  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   809      IfxEvadc_MsbConversionTime_singleClockCycle = 0,  /**< \brief 1 clock cycle for the MSB (standard) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   810      IfxEvadc_MsbConversionTime_doubleClockCycle = 1   /**< \brief 2 clock cycle for the MSB */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   811  } IfxEvadc_MsbConversionTime;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   812  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   813  /** \brief Reference Precharge Control
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   814   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   815  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   816  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   817      IfxEvadc_ReferencePrechargeControl_singleClockPhase  = 0, /**< \brief Precharge the reference input for 1 clock phase */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   818      IfxEvadc_ReferencePrechargeControl_singleClockPeriod = 1  /**< \brief Precharge the reference input for 1 clock period */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   819  } IfxEvadc_ReferencePrechargeControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   820  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   821  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   822  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   823      IfxEvadc_SpreadEarlySamplePointEMUXConversionsMode_nominal = 0,  /**< \brief Nominal sample timing */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   824      IfxEvadc_SpreadEarlySamplePointEMUXConversionsMode_spread  = 1   /**< \brief Spread sample timing, end of sample phase is varied */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   825  } IfxEvadc_SpreadEarlySamplePointEMUXConversionsMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   826  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   827  /** \brief Spread Early Sample Point for Standard Conversions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   828   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   829  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   830  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   831      IfxEvadc_SpreadEarlySamplePointStandardConversionsMode_nominal = 0,  /**< \brief Nominal sample timing */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   832      IfxEvadc_SpreadEarlySamplePointStandardConversionsMode_spread  = 1   /**< \brief Spread sample timing, end of sample phase is varied */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   833  } IfxEvadc_SpreadEarlySamplePointStandardConversionsMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   834  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   835  /** \brief The 0-1 transition of bit SUCAL initiates the start-up calibrationphase of
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   836   * all analog converters (except for the fast compare channels).
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   837   * Note: The start-up calibration will abort any running conversion
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   838   * and cannot be stopped before it is complete.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   839   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   840  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   841  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   842      IfxEvadc_StartupCalibration_noAction = 0,  /**< \brief No action */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   843      IfxEvadc_StartupCalibration_initiate = 1   /**< \brief Initiate the start-up calibration phase
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   844                                                  * (indication in bit GxARBCFG.CAL) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   845  } IfxEvadc_StartupCalibration;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   846  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   847  /** \brief Adjusts the analog circuitry to the supply voltage used in the application
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   848   * system. Make sure to keep SUPLEV = 0b00 or 0b01 in the case of a 5 V supply.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   849   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   850  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   851  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   852      IfxEvadc_SupplyVoltageLevelControl_automaticControl = 0,  /**< \brief Automatic control: voltage range is controlled by the power supply */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   853      IfxEvadc_SupplyVoltageLevelControl_upperVoltage     = 1,  /**< \brief Upper voltage range: assume a 5 V power supply is connected */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   854      IfxEvadc_SupplyVoltageLevelControl_lowerVoltage     = 2   /**< \brief Lower voltage range: assume a 3.3 V power supply is connected */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   855  } IfxEvadc_SupplyVoltageLevelControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   856  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   857  /** \brief Wait-for-Read Mode Enable
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   858   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   859  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   860  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   861      IfxEvadc_WaitForRead_overwriteMode = 0,  /**< \brief Overwrite Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   862      IfxEvadc_WaitForRead_enabled       = 1   /**< \brief Wait-for-read mode enabled for this register */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   863  } IfxEvadc_WaitForRead;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   864  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   865  /** \addtogroup IfxLld_Evadc_Std_Global
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   866   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   867  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   868  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   869  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   870  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   871  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   872  /** \brief access function to enable/disable  wait for read mode for result registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   873   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   874   * \param resultIdx result register index
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   875   * \param enabled wait for read mode enabled/disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   876   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   877   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   878  IFX_INLINE void IfxEvadc_configureWaitForReadMode(Ifx_EVADC_G *group, uint32 resultIdx, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   879  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   880  /** \brief access function to enable/disable  wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   881   * \param evadc pointer to the EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   882   * \param enabled wait for read mode enabled/disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   883   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   884   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   885  IFX_INLINE void IfxEvadc_configureWaitForReadModeForGlobalResultRegister(Ifx_EVADC *evadc, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   886  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   887  /** \brief get the ADC Module  noise reduction level
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   888   * \param evadc pointer to EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   889   * \param inputClassNum Adc Module input Class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   890   * \return Adc input class noise reduction level
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   891   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   892  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getGlobalConversionMode(Ifx_EVADC *evadc, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   893  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   894  /** \brief return conversion result stored in the Global result Register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   895   * \param evadc pointer to the EVADC module
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   896   * \return global result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   897   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   898   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   899   * Ifx_EVADC* evadc = &MODULE_EVADC; // module pointer
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   900   * IfxEvadc_GroupId groupId = IfxEvadc_GroupId0; // for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   901   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   902   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   903   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   904   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   905   * IfxEvadc_configureWaitForReadModeForGlobalResultRegister(evadc, TRUE);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   906   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   907   * // enable all arbiter request sources
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   908   * adcGroupConfig.arbiter.requestSlotQueue0Enabled           = TRUE; // enable Queue0 mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   909   * // enable all gates in "always" mode (no edge detection)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   910   * adcGroupConfig.queueRequest[0].triggerConfig.gatingMode = IfxEvadc_GatingMode_always;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   911   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   912   * // Add channel to queue with refill enabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   913   *  IfxEvadc_Adc_addToQueue(&adcChannel, IFXEVADC_QUEUE_REFILL, IfxEvadc_RequestSource_queue0);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   914   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   915   *  // start the Queue
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   916   *  IfxEvadc_Adc_startQueue(&adcGroup, IfxEvadc_RequestSource_queue0);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   917   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   918   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   919   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   920   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   921   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   922   * Ifx_EVADC_GLOB.RES result;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   923   * result = IfxVadc_getGlobalResult (evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   924   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   925   * \endcode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   926   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   927   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   928  IFX_INLINE Ifx_EVADC_GLOB_RES IfxEvadc_getGlobalResult(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   929  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   930  /** \brief Get Sample Time in sec
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   931   * \param evadc Pointer to EVADC Module
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   932   * \param inputClassNum ADC Input Class Number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   933   * \param analogFrequency ADC module analog frequency in Hz
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   934   * \return ADC input class channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   935   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   936  IFX_INLINE float32 IfxEvadc_getGlobalSampleTime(Ifx_EVADC *evadc, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   937  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   938  /** \brief Get conversion result (Function does not care about the alignment)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   939   * value = raw * gain + offset.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   940   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   941   * \param resultIdx result register index
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   942   * \return scaled Conversion result
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   943   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   944   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   945   * Ifx_EVADC_G* group = &MODULE_EVADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   946   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   947   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   948   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   949   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   950   * IfxEvadc_configureWaitForReadMode(group,IfxEvadc_ChannelResult0, TRUE);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   951   * IfxEvadc_configureWaitForReadMode(group,IfxEvadc_ChannelResult1, TRUE);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   952   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   953   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   954   * // Add channel to queue with refill enabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   955   *  IfxEvadc_Adc_addToQueue(&adcChannel, IfxEvadc_RequestSource_queue0, IFXEVADC_QUEUE_REFILL);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   956   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   957   * // start the Queue
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   958   *  IfxEvadc_Adc_startQueue(&adcGroup, IfxEvadc_RequestSource_queue0);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   959   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   960   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   961   * // wait for conversion to finish
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   962   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   963   * // fetch the result of conversion from result register 0 for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   964   * Ifx_EVADC_G_RES result;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   965   * result = IfxEvadc_getResult(group, IfxEvadc_ChannelResult0);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   966   * \endcode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   967   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   968   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   969  IFX_INLINE Ifx_EVADC_G_RES IfxEvadc_getResult(Ifx_EVADC_G *group, uint32 resultIdx);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   970  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   971  /** \brief Sets the sample time in sec of ADC global class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   972   * \param evadc pointer to EVADC module registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   973   * \param groupInputClassNum group input class  number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   974   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   975   * \param sampleTime the requested sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   976   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   977   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   978  IFX_INLINE void IfxEvadc_setGlobalSampleTime(Ifx_EVADC *evadc, uint8 groupInputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   979  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   980  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   981  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   982  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   983  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   984  /** \brief Get conversion result (Function does not care about the alignment)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   985   * value = raw * gain + offset.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   986   * \param evadc EVADC module pointer
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   987   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   988   * \param channel channel Id
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   989   * \param sourceType type of request source
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   990   * \return scaled Conversion result
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   991   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   992   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   993   * Ifx_EVADC evadc;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   994   * evadc.evadc = &MODULE_EVADC;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   995   * Ifx_EVADC_G* group = &MODULE_EVADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   996   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   997   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   998   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   999   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1000   * IfxEvadc_configureWaitForReadMode(group,IfxEvadc_ChannelResult0, TRUE);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1001   * IfxEvadc_configureWaitForReadMode(group,IfxEvadc_ChannelResult1, TRUE);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1002   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1003   * // Add channel to queue with refill enabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1004   *  IfxEvadc_Adc_addToQueue(&adcChannel, IfxEvadc_RequestSource_queue0, IFXEVADC_QUEUE_REFILL);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1005   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1006   * // start the Queue
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1007   *  IfxEvadc_Adc_startQueue(&adcGroup, IfxEvadc_RequestSource_queue0);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1008   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1009   * // fetch the result of conversion for channel 2 of group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1010   * Ifx_EVADC_G_RESresult2;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1011   * result = IfxEvadc_getResultBasedOnRequestSource(&evadc, group, IfxVadc_ChannelId2,IfxEvadc_RequestSource_queue0 );
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1012   * Ifx_EVADC_G_RESresult5;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1013   * result = IfxEvadc_getResultBasedOnRequestSource(&evadc, group, IfxEvadc_ChannelId5,IfxEvadc_RequestSource_queue0 );
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1014   * \endcode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1015   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1016   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1017  IFX_EXTERN Ifx_EVADC_G_RES IfxEvadc_getResultBasedOnRequestSource(Ifx_EVADC *evadc, Ifx_EVADC_G *group, IfxEvadc_ChannelId channel, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1018  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1019  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1020  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1021  /** \addtogroup IfxLld_Evadc_Std_QueueRequest
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1022   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1023  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1024  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1025  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1026  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1027  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1028  /** \brief Clears all the queue entries including backup stage.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1029   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1030   * \param flushQueue Whether queue is cleared or not.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1031   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1032   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1033   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1034  IFX_INLINE void IfxEvadc_clearQueue(Ifx_EVADC_G *evadcG, boolean flushQueue, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1035  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1036  /** \brief Starts a queue of a group by generating a trigger event through software
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1037   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1038   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1039   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1040   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1041  IFX_INLINE void IfxEvadc_startQueue(Ifx_EVADC_G *group, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1042  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1043  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1044  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1045  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1046  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1047  /** \brief Add an entry to the queue of a group for the specified channel with the following options set:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1048   * refill incase of aborted conversion
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1049   * source interrupt enable/disable
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1050   * external trigger control of the aborted conversion
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1051   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1052   * \param channel specifies channel Id
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1053   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1054   * \param options specifies the refill, source interrupt enable/disable and external trigger control selection
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1055   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1056   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1057   * For coding example see: \ref IfxEvadc_Adc_getResult
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1058   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1059   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1060  IFX_EXTERN void IfxEvadc_addToQueue(Ifx_EVADC_G *group, IfxEvadc_ChannelId channel, IfxEvadc_RequestSource sourceType, uint32 options);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1061  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1062  /** \brief Disables the external trigger.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1063   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1064   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1065   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1066   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1067  IFX_EXTERN void IfxEvadc_disableQueueSlotExternalTrigger(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1068  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1069  /** \brief Enables the external trigger.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1070   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1071   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1072   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1073   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1074  IFX_EXTERN void IfxEvadc_enableQueueSlotExternalTrigger(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1075  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1076  /** \brief Gets the requested queue slot gating mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1077   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1078   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1079   * \return requested queue0 slot gating mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1080   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1081  IFX_EXTERN IfxEvadc_GatingMode IfxEvadc_getQueueSlotGatingMode(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1082  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1083  /** \brief Gets the requested queue slot gating input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1084   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1085   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1086   * \return requested queue0 slot gating input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1087   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1088  IFX_EXTERN IfxEvadc_GatingSource IfxEvadc_getQueueSlotGatingSource(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1089  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1090  /** \brief Gets the request queue slot priority.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1091   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1092   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1093   * \return requested queue0 slot priority.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1094   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1095  IFX_EXTERN IfxEvadc_RequestSlotPriority IfxEvadc_getQueueSlotPriority(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1096  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1097  /** \brief Gets the requested queue slot start mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1098   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1099   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1100   * \return requested queue slot start mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1101   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1102  IFX_EXTERN IfxEvadc_RequestSlotStartMode IfxEvadc_getQueueSlotStartMode(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1103  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1104  /** \brief Gets the requested queue slot trigger input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1105   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1106   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1107   * \return requested queue slot trigger input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1108   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1109  IFX_EXTERN IfxEvadc_TriggerSource IfxEvadc_getQueueSlotTriggerInput(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1110  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1111  /** \brief Gets the requested queue slot trigger mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1112   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1113   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1114   * \return requested queue slot trigger mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1115   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1116  IFX_EXTERN IfxEvadc_TriggerMode IfxEvadc_getQueueSlotTriggerMode(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1117  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1118  /** \brief Gives the status of the Queue of a group by returning non zero value if the Queue is full
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1119   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1120   * \param sourceType sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1121   * \return status of the Queue
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1122   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1123   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1124   * Ifx_EVADC_G* group = &MODULE_EVADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1125   * boolean queueFull = (IfxEvadc_getQueueStatus(group)==IfxEvadc_Status_queueFull)?TRUE:FALSE; // get Queue status for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1126   * \endcode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1127   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1128   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1129  IFX_EXTERN IfxEvadc_Status IfxEvadc_getQueueStatus(Ifx_EVADC_G *group, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1130  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1131  /** \brief Returns the queue slot requested status.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1132   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1133   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1134   * \return TRUE if queue slot request enabled otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1135   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1136  IFX_EXTERN boolean IfxEvadc_isRequestQueueSlotEnabled(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1137  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1138  /** \brief Sets the gating configurations.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1139   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1140   * \param gatingSource gate input for group.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1141   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1142   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1143   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1144   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1145  IFX_EXTERN void IfxEvadc_setQueueSlotGatingConfig(Ifx_EVADC_G *evadcG, IfxEvadc_GatingSource gatingSource, IfxEvadc_GatingMode gatingMode, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1146  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1147  /** \brief Sets the trigger operating configurations.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1148   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1149   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1150   * \param triggerSource trigger input for group.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1151   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1152   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1153   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1154  IFX_EXTERN void IfxEvadc_setQueueSlotTriggerOperatingConfig(Ifx_EVADC_G *evadcG, IfxEvadc_TriggerMode triggerMode, IfxEvadc_TriggerSource triggerSource, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1155  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1156  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1157  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1158  /** \addtogroup IfxLld_Evadc_Std_IO
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1159   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1160  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1161  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1162  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1163  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1164  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1165  /** \brief Initializes a EMUX output
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1166   * \param emux the Emux Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1167   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1168   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1169   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1170   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1171  IFX_INLINE void IfxEvadc_initEmuxPin(const IfxEvadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1172  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1173  /** \brief Initializes a GxBFL output
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1174   * \param gxBfl the GxBFL Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1175   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1176   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1177   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1178   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1179  IFX_INLINE void IfxEvadc_initGxBflPin(const IfxEvadc_GxBfl_Out *gxBfl, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1180  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1181  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1182  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1183  /** \addtogroup IfxLld_Evadc_Std_Frequency
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1184   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1185  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1186  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1187  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1188  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1189  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1190  /** \brief Calculate the time using analog frequency.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1191   * \param analogFrequency analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1192   * \param sampleTime sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1193   * \return sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1194   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1195  IFX_INLINE uint32 IfxEvadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1196  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1197  /** \brief Returns the configured Fadci EVADC analog clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1198   * \param group pointer to the EVADC registers group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1199   * \return the configured Fadci EVADC analog clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1200   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1201  IFX_INLINE float32 IfxEvadc_getAdcAnalogFrequency(Ifx_EVADC_G *group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1202  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1203  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1204  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1205  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1206  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1207  /** \brief configured Fadcd EVADC digital clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1208   * \param evadc pointer to the base of EVADC registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1209   * \return the configured Fadcd EVADC digital clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1210   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1211  IFX_EXTERN float32 IfxEvadc_getAdcDigitalFrequency(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1212  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1213  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1214  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1215  /** \addtogroup IfxLld_Evadc_Std_Group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1216   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1217  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1218  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1219  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1220  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1221  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1222  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1223   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1224   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1225   * \param delay Selects an additional clock cycle for the conversion step of the MSB
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1228  IFX_INLINE void IfxEvadc_setAnalogClockSynchronizationDelay(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_AnalogClockSynchronizationDelay delay);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1229  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1230  /** \brief Select calibration sample time in units of t_ADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1231   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1232   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1233   * \param mode Select calibration sample time in units of t_ADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1234   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1235   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1236  IFX_INLINE void IfxEvadc_setCalibrationSampleTime(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_CalibrationSampleTimeControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1237  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1238  /** \brief Clears the all group requests.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1239   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1242  IFX_INLINE void IfxEvadc_clearAllResultRequests(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1243  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1244  /** \brief Gets the EVADC input class channel conversion mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1245   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1246   * \param inputClassNum EVADC input class number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1247   * \return EVADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1248   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1249  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1250  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1251  /** \brief Get conversion result for the group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1252   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1253   * \param results pointer to scaled conversion results
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1254   * \param resultOffset offset for the first result
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1255   * \param numResults number of results
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1256   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1257   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1258   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1259   * Here,Three channels are used for queued transfers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1260   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1261   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1262   * unsigned savedGate = adcGroup.module.evadc->G[adcGroup.groupId].Queue0.QMR0.B.ENGT;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1263   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1264   * // IMPORTANT: for deterministic results we have to disable the queue gate
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1265   * // while filling the queue, otherwise results could be output in the wrong order
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1266   * adcGroup.module.evadc->G[adcGroup.groupId].Queue0.QMR0.B.ENGT = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1267   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1268   * // create channel config
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1269   * IfxEvadc_Adc_ChannelConfig adcChannelConfig[3];
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1270   * IfxEvadc_Adc_Channel adcChannel[3];
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1271   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1272   * for(int chnIx=0; chnIx<3; ++chnIx) {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1273   * IfxEvadc_Adc_initChannelConfig(&adcChannelConfig[chnIx], &adcGroup);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1274   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1275   * adcChannelConfig[chnIx].channelId = (IfxEvadc_ChannelId)(chnIx);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1276   * adcChannelConfig[chnIx].resultRegister = IfxEvadc_ChannelResult_1; // use result register #1 for all channels
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1277   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1278   * // initialize the channel
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1279   * IfxEvadc_Adc_initChannel(&adcChannel[chnIx], &adcChannelConfig[chnIx]);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1280   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1281   * // Add channel to queue with refill enabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1282   * IfxEvadc_Adc_addToQueue(&adcChannel[chnIx], IfxEvadc_RequestSource_queue0, IFXEVADC_QUEUE_REFILL);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1283   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1284   * // restore previous gate config
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1285   * adcGroup.module.evadc->G[adcGroup.groupId].Queue0.QMR0.B.ENGT = savedGate;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1286   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1287   * // start the Queue
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1288   * IfxEvadc_Adc_startQueue(&adcGroup,IfxEvadc_RequestSource_queue0); // just for the case that somebody copy&pastes the code - the queue has already been started in previous test
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1289   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1290   * Ifx_EVADC_G_RES results[10];
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1291   * result = IfxEvadc_getGroupResult(group, results, 0, 2);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1292   * \endcode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1293   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1294   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1295  IFX_INLINE void IfxEvadc_getGroupResult(Ifx_EVADC_G *group, Ifx_EVADC_G_RES *results, uint32 resultOffset, uint32 numResults);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1296  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1297  /** \brief Gets the EVADC input class channel sample time.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1298   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1299   * \param inputClassNum ADC input class number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1300   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1301   * \return ADC input class channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1302   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1303  IFX_INLINE float32 IfxEvadc_getGroupSampleTime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1304  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1305  /** \brief Gets the configured master index.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1306   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1307   * \return configured master kernel index.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1308   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1309  IFX_INLINE uint8 IfxEvadc_getMasterIndex(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1310  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1311  /** \brief Selects the chargingmode/voltage level in idle mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1312   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1313   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1314   * \param mode 0 - No precharge, the sampling capacitor keeps the current charge
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1315   * 1 - The sampling capacitor is precharged to approx. half the reference when idle
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1316   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1317   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1318  IFX_INLINE void IfxEvadc_selectIdlePrechargeLevel(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_IdlePrecharge mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1319  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1320  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1321   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1322   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1323   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1324   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1325  IFX_INLINE void IfxEvadc_enableInputBuffer(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1326  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1327  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1328   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1329   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1330   * \param duration Selects the amount of time for reference input precharging
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1331   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1332   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1333  IFX_INLINE void IfxEvadc_setReferencePrechargeDuration(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_ReferencePrechargeControl duration);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1334  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1335  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1336   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1337   * \param group EVADC Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1338   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1339   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1340  IFX_INLINE void IfxEvadc_enableReferencePrecharge(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1341  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1342  /** \brief Resets the ADC group.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1343   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1344   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1345   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1346  IFX_INLINE void IfxEvadc_resetGroup(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1347  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1348  /** \brief Selects whether sample synchronization must be performed or not.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1349   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1350   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1351   * \param mode Sample Synchronization Options
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1352   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1353   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1354  IFX_INLINE void IfxEvadc_setSampleSynchronizationMode(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_SampleSynchronization mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1355  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1356  /** \brief Selects an additional clock cycle for the conversion step of the MSB.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1357   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1358   * \param group EVADC Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1359   * \param mode Selects an single or double clock cycle(s) for the conversion step of the MSB
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1360   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1361   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1362  IFX_INLINE void IfxEvadc_selectDoubleClockForMSBConversion(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_MsbConversionTime mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1363  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1364  /** \brief Sets analog converter group number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1365   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1366   * \param analogConverterMode group analog converter mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1367   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1368   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1369  IFX_INLINE void IfxEvadc_setAnalogConvertControl(Ifx_EVADC_G *evadcG, IfxEvadc_AnalogConverterMode analogConverterMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1370  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1371  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1372   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1373   * \param inputClassNum Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1374   * \param mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1375   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1376   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1377  IFX_INLINE void IfxEvadc_setAnalogInputPrechargeControlEMUX(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_AnalogInputPrechargeControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1378  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1379  /** \brief Analog Input Precharge Control for Standard Conversions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1380   * Buffer must be enabled by GxANCFG.B.BE = 1
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1381   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1382   * \param inputClassNum Class No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1383   * \param mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1384   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1385   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1386  IFX_INLINE void IfxEvadc_setAnalogInputPrechargeControlStandard(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_AnalogInputPrechargeControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1387  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1388  /** \brief Sets the ADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1389   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1390   * \param inputClassNum input class number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1391   * \param conversionMode ADC input class channel Conversion Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1392   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1393   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1394  IFX_INLINE void IfxEvadc_setGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_ChannelNoiseReduction conversionMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1395  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1396  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1397   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1398   * \param inputClassNum Class No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1399   * \param conversionMode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1400   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1401   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1402  IFX_INLINE void IfxEvadc_setGroupConversionModeEMUX(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_ChannelNoiseReductionEMUX conversionMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1403  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1404  /** \brief Sets the ADC input class sample time ticks.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1405   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1406   * \param inputClassNum input class number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1407   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1408   * \param sampleTime request sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1409   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1410   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1411  IFX_INLINE void IfxEvadc_setGroupSampleTime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1412  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1413  /** \brief Set the additional number of cycles(in addition to 2) in sample time.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1414   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1415   * \param inputClassNum Class No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1416   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1417   * \param sampleTime request sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1418   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1419   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1420  IFX_INLINE void IfxEvadc_setGroupSampleTimeEMUX(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1421  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1422  /** \brief Sets the master index.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1423   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1424   * \param masterIndex master index.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1425   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1426   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1427  IFX_INLINE void IfxEvadc_setMasterIndex(Ifx_EVADC_G *evadcG, uint8 masterIndex);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1428  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1429  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1430   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1431   * \param inputClassNum Class No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1432   * \param mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1433   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1434   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1435  IFX_INLINE void IfxEvadc_spreadEarlySamplePointEMUXConversions(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_SpreadEarlySamplePointEMUXConversionsMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1436  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1437  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1438   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1439   * \param inputClassNum Class No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1440   * \param mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1441   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1442   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1443  IFX_INLINE void IfxEvadc_spreadEarlySamplePointStandardConversions(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_SpreadEarlySamplePointStandardConversionsMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1444  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1445  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1446  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1447  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1448  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1449  /** \brief Sets the Arbiter slot configurations.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1450   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1451   * \param slotEnable enable/disable of slot.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1452   * \param prio channel request priority.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1453   * \param mode Channel Slot start mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1454   * \param slot channel slot Request source.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1455   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1456   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1457  IFX_EXTERN void IfxEvadc_setArbiterPriority(Ifx_EVADC_G *evadcG, boolean slotEnable, IfxEvadc_RequestSlotPriority prio, IfxEvadc_RequestSlotStartMode mode, IfxEvadc_RequestSource slot);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1458  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1459  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1460  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1461  /** \addtogroup IfxLld_Evadc_Std_Module
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1462   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1463  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1464  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1465  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1466  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1467  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1468  /** \brief Disable EVADC kernel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1469   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1470   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1471   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1472  IFX_INLINE void IfxEvadc_disableModule(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1473  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1474  /** \brief Disables the post calibration.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1475   * \param evadcG pointer to the base of EVADC Grroup registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1476   * \param group Index of the group.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1477   * \param enabled disable or not.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1478   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1479   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1480  IFX_INLINE void IfxEvadc_disablePostCalibration(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1481  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1482  /** \brief Enable EVADC kernel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1483   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1484   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1485   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1486  IFX_INLINE void IfxEvadc_enableModule(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1487  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1488  /** \brief gets ADC Calibration Flag CAL status.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1489   * \param evadc pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1490   * \param adcCalGroupNum ADC CAL group number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1491   * \return CAL group status.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1492   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1493  IFX_INLINE uint8 IfxEvadc_getAdcCalibrationActiveState(Ifx_EVADC *evadc, uint8 adcCalGroupNum);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1494  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1495  /** \brief Gets the global control configuration value.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1496   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1497   * \return global control configuration value.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1498   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1499  IFX_INLINE Ifx_EVADC_GLOBCFG IfxEvadc_getGlobalConfigValue(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1500  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1501  /** \brief Gives the SRC source address.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1502   * \param group Index of the group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1503   * \param index SRC number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1504   * \return SRC source address
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1505   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1506  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEvadc_getSrcAddress(IfxEvadc_GroupId group, IfxEvadc_SrcNr index);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1507  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1508  /** \brief get status of GLOBCFG.SUCAL Bit field
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1509   * \param evadc Pointer to EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1510   * \return status of GLOBCFG.SUCAL Bit field
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1511   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1512  IFX_INLINE boolean IfxEvadc_getStartupCalibrationStatus(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1513  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1514  /** \brief Initialises ADC converter clock.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1515   * \param evadc Pointer to EVADC  SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1516   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1517   * \param converterClockDivider ADC converter clock divider.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1518   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1519   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1520  IFX_INLINE void IfxEvadc_initialiseAdcConverterClock(Ifx_EVADC *evadc, Ifx_EVADC_G *evadcG, IfxEvadc_ClockDividerFactor converterClockDivider);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1521  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1522  /** \brief initiates the calibration pulse phase.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1523   * \param evadc pointer to the base of EVADC registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1524   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1525   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1526  IFX_INLINE void IfxEvadc_initiateStartupCalibration(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1527  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1528  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1529   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1530   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1531   * \param evadc Pointer to EVADC module registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1532   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1533   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1534  IFX_INLINE boolean IfxEvadc_isModuleSuspended(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1535  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1536  /** \brief Sets the channel conversion mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1537   * \param evadc pointer to EVADC module registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1538   * \param InputClassNum input class  number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1539   * \param conversionMode ADC conversion Mode. Improves the precision of conversion
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1540   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1541   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1542  IFX_INLINE void IfxEvadc_setGlobalConversionMode(Ifx_EVADC *evadc, uint8 InputClassNum, IfxEvadc_ChannelNoiseReduction conversionMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1543  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1544  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1545   * \param evadc pointer to EVADC registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1546   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1547   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1548   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1549  IFX_INLINE void IfxEvadc_setSleepMode(Ifx_EVADC *evadc, IfxEvadc_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1550  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1551  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1552   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1553   * \param evadc Pointer to EVADC module registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1554   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1555   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1556   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1557  IFX_INLINE void IfxEvadc_setSuspendMode(Ifx_EVADC *evadc, IfxEvadc_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1558  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1559  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1560  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1561  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1562  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1563  /** \brief Disable write access to the EVADC config/control registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1564   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1565   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be disabled.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1566   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1567   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1568  IFX_EXTERN void IfxEvadc_disableAccess(Ifx_EVADC *evadc, IfxEvadc_Protection protectionSet);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1569  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1570  /** \brief Enable write access to the EVADC config/control registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1571   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1572   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be enabled.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1573   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1574   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1575  IFX_EXTERN void IfxEvadc_enableAccess(Ifx_EVADC *evadc, IfxEvadc_Protection protectionSet);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1576  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1577  /** \brief ADC Module Frequency in Hz
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1578   * \param evadc Pointer to EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1579   * \return module frequency
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1580   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1581  IFX_EXTERN float32 IfxEvadc_getAdcModuleFrequency(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1582  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1583  /** \brief Configure the ADC analog clock.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1584   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1585   * \param fAdcI ADC analog clock clock frequency in Hz. Range = [5000000, 10000000].
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1586   * \param group Pointer to EVADC Group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1587   * \return ADC analog clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1588   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1589  IFX_EXTERN uint32 IfxEvadc_initializeFAdcI(Ifx_EVADC *evadc, uint32 fAdcI, Ifx_EVADC_G *group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1590  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1591  /** \brief Resets the kernel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1592   * \param evadc pointer to the  EVADC Module
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1593   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1594   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1595  IFX_EXTERN void IfxEvadc_resetModule(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1596  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1597  /** \brief Starts ADC calibration and wait for the end of the calibration process.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1598   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1599   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1600   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1601  IFX_EXTERN void IfxEvadc_startupCalibration(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1602  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1603  /** \brief SW workaround of EVADC Master/Slave conversion jitter issue(MCMETILLD-910)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1604   * \param evadc Pointer to EVADC module registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1605   * \return Used for detecting failure in either OCDS Debug Active State Activation or Trigger Line TL1 Activation or both.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1606   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1607  IFX_EXTERN boolean IfxEvadc_syncConvWorkAround(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1608  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1609  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1610  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1611  /** \addtogroup IfxLld_Evadc_Std_Channel
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1612   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1613  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1614  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1615  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1616  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1617  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1618  /** \brief Clears the channel request.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1619   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1620   * \param channelId channel id whose request to be cleared.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1621   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1622   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1623  IFX_INLINE void IfxEvadc_clearChannelRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelId);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1624  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1625  /** \brief Enables the FIFO mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1626   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1627   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1628   * \param fifoMode FIFO mode .
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1629   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1630   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1631  IFX_INLINE void IfxEvadc_enableFifoMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, IfxEvadc_FifoMode fifoMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1632  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1633  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1634   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1635   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1636   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1637   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1638  IFX_INLINE void IfxEvadc_enableServiceRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1639  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1640  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1641   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1642   * \param resultRegister
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1643   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1644   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1645  IFX_INLINE void IfxEvadc_disableServiceRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1646  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1647  /** \brief Gets the current ADC channel control configurations.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1648   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1649   * \param channelIndex EVADC channel number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1650   * \return current ADC channel control configuration.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1651   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1652  IFX_INLINE Ifx_EVADC_G_CHCTR IfxEvadc_getChannelControlConfig(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1653  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1654  /** \brief get channel Input class
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1655   * \param evadcG Pointer to EVADC Group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1656   * \param channelIndex Specifies channel Id
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1657   * \return Input class
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1658   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1659  IFX_INLINE IfxEvadc_InputClasses IfxEvadc_getChannelInputclass(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1660  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1661  /** \brief Gets the channel result service request node pointer 0.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1662   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1663   * \return channel result service request node pointer 0.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1664   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1665  IFX_INLINE Ifx_EVADC_G_REVNP0 IfxEvadc_getChannelResultServiceRequestNodePointer0(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1666  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1667  /** \brief Gets the channel result service request node pointer 1.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1668   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1669   * \return channel result service request node pointer 1.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1670   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1671  IFX_INLINE Ifx_EVADC_G_REVNP1 IfxEvadc_getChannelResultServiceRequestNodePointer1(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1672  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1673  /** \brief Gets the channel service request node pointer.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1674   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1675   * \return channel service request node pointer.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1676   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1677  IFX_INLINE Ifx_EVADC_G_CEVNP0 IfxEvadc_getChannelServiceRequestNodePointer0(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1678  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1679  /** \brief get the channel service request node pointer (CH8--CH15)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1680   * \param evadcG pointer to EVADC Group register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1681   * \return Channel service request node pointer for CH8 to CH15
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1682   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1683  IFX_INLINE Ifx_EVADC_G_CEVNP1 IfxEvadc_getChannelServiceRequestNodePointer1(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1684  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1685  /** \brief Selects boundary extension.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1686   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1687   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1688   * \param boundaryMode boundary extension mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1689   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1690   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1691  IFX_INLINE void IfxEvadc_setBoundaryMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_BoundaryExtension boundaryMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1692  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1693  /** \brief Sets the channel event service request line.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1694   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1695   * \param channelSrcNr channel event Service Node.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1696   * \param channel channel number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1697   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1698   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1699  IFX_INLINE void IfxEvadc_setChannelEventNodePointer0(Ifx_EVADC_G *evadcG, IfxEvadc_SrcNr channelSrcNr, IfxEvadc_ChannelId channel);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1700  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1701  /** \brief set channel event node pointer(channel 8- channel 15)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1702   * \param evadcG pointer to the EVADC Group register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1703   * \param channelSrcNr service Request
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1704   * \param channel specifies channel ID
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1705   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1706   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1707  IFX_INLINE void IfxEvadc_setChannelEventNodePointer1(Ifx_EVADC_G *evadcG, IfxEvadc_SrcNr channelSrcNr, IfxEvadc_ChannelId channel);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1708  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1709  /** \brief Sets the channel input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1710   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1711   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1712   * \param inputClass channel input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1713   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1714   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1715  IFX_INLINE void IfxEvadc_setChannelInputClass(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_InputClasses inputClass);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1716  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1717  /** \brief Sets the channel event mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1718   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1719   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1720   * \param limitCheck channel event mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1721   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1722   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1723  IFX_INLINE void IfxEvadc_setChannelLimitCheckMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_LimitCheck limitCheck);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1724  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1725  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1726   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1727   * \param resultRegister
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1728   * \param mode 0b00 Standard data reduction (accumulation)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1729   * 0b01 Result filtering mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1730   * 0b10 Difference mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1731   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1732   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1733  IFX_INLINE void IfxEvadc_setDataModificationMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, IfxEvadc_DataModificationMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1734  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1735  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1736   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1737   * \param resultRegister Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1738   * \param mode Defines result values stored/accumulated for the final result.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1739   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1740   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1741  IFX_INLINE void IfxEvadc_setDataReductionControlMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, uint32 mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1742  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1743  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1744   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1745   * \param resultRegister
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1746   * \param mode 0b00 - Separate result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1747   * 0b01 - Part of a FIFO structure: copy each new valid result
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1748   * 0b10 - Maximum mode: copy new result if bigger
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1749   * 0b11 - Minimum mode: copy new result if smaller
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1750   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1751   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1752  IFX_INLINE void IfxEvadc_setFifoMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, IfxEvadc_FifoMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1753  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1754  /** \brief Sets group's lower boundary.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1755   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1756   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1757   * \param lowerBoundary group lower boundary.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1758   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1759   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1760  IFX_INLINE void IfxEvadc_setLowerBoundary(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_BoundarySelection lowerBoundary);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1761  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1762  /** \brief Selects the refernce input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1763   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1764   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1765   * \param reference reference input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1766   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1767   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1768  IFX_INLINE void IfxEvadc_setReferenceInput(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_ChannelReference reference);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1769  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1770  /** \brief Sets result event node pointer 0.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1771   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1772   * \param resultSrcNr channel result event service node.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1773   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1774   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1775   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1776  IFX_INLINE void IfxEvadc_setResultNodeEventPointer0(Ifx_EVADC_G *evadcG, IfxEvadc_SrcNr resultSrcNr, IfxEvadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1777  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1778  /** \brief Sets result event node pointer 1.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1779   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1780   * \param resultSrcNr channel result event service node.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1781   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1782   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1783   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1784  IFX_INLINE void IfxEvadc_setResultNodeEventPointer1(Ifx_EVADC_G *evadcG, IfxEvadc_SrcNr resultSrcNr, IfxEvadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1785  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1786  /** \brief Sets result store position.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1787   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1788   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1789   * \param rightAlignedStorage result store position.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1790   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1791   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1792  IFX_INLINE void IfxEvadc_setResultPosition(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, boolean rightAlignedStorage);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1793  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1794  /** \brief Sets channel synchronization request.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1795   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1796   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1797   * \param synchonize whether channel synchronize or stand alone operation.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1798   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1799   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1800  IFX_INLINE void IfxEvadc_setSyncRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, boolean synchonize);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1801  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1802  /** \brief Sets group's upper boundary.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1803   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1804   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1805   * \param upperBoundary group upper boundary.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1806   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1807   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1808  IFX_INLINE void IfxEvadc_setUpperBoundary(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_BoundarySelection upperBoundary);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1809  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1810  /** \brief Sets the group result register.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1811   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1812   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1813   * \param resultRegister result register for group result storage.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1814   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1815   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1816  IFX_INLINE void IfxEvadc_storeGroupResult(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1817  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1818  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1819  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1820  /** \addtogroup IfxLld_Evadc_Std_Emux
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1821   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1822  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1823  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1824  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1825  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1826  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1827  /** \brief get global input class conversion mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1828   * \param evadc Pointer to EVADC Module space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1829   * \param inputClassNum global input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1830   * \return External channel resolution for global input class
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1831   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1832  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getEmuxGlobalConversionMode(Ifx_EVADC *evadc, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1833  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1834  /** \brief get the external conversion mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1835   * \param evadcG Pointer to EVADC group register space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1836   * \param inputClassNum Adc input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1837   * \return Adc input class External channel conversion mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1838   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1839  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getEmuxGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1840  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1841  /** \brief Gets the ADC input class sample time of external channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1842   * \param evadcG Pointer to Register Group space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1843   * \param inputClassNum ADC input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1844   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1845   * \return ADC input class external channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1846   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1847  IFX_INLINE float32 IfxEvadc_getEmuxGroupSampleTime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1848  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1849  /** \brief set the external conversion mode of Global class
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1850   * \param evadc pointer to EVADC Module space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1851   * \param inputClassNum Global Input Class Number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1852   * \param conversionMode External Channel resolution
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1853   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1854   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1855  IFX_INLINE void IfxEvadc_setEmuxGlobalConversionMode(Ifx_EVADC *evadc, uint8 inputClassNum, IfxEvadc_ChannelNoiseReduction conversionMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1856  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1857  /** \brief Sets the sample time of ADC global class for external channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1858   * \param evadc Pointer to EVADC Module space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1859   * \param inputClassNum Adc input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1860   * \param analogFrequency ADC analog Frequency in HZ
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1861   * \param sampleTime the requested sample time for input class in sec
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1862   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1863   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1864  IFX_INLINE void IfxEvadc_setEmuxGlobalSampleTime(Ifx_EVADC *evadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1865  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1866  /** \brief set the external channel conversion mode of ADC input class
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1867   * \param evadcG pointer to EVADC Group Register space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1868   * \param inputClassNum input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1869   * \param conversionMode input class external channel resolution
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1870   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1871   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1872  IFX_INLINE void IfxEvadc_setEmuxGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_ChannelNoiseReduction conversionMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1873  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1874  /** \brief Sets the ADC input class sample time for external channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1875   * \param evadcG Pointer to EVADC Group Register Space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1876   * \param inputClassNum input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1877   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1878   * \param sampleTime request sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1879   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1880   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1881  IFX_INLINE void IfxEvadc_setEmuxGroupSampletime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1882  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1883  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1884  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1885  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1886  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1887  /** \brief Configure external multiplexer mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1888   * \param evadc pointer to Module space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1889   * \param evadcG Pointer to EVADC group register space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1890   * \param mode External Multiplexer mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1891   * \param channels Specifies channel Id
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1892   * \param startChannel specifies the external channel value from which conversion to be carried out
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1893   * \param code Output the channel number in binary code/gray code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1894   * \param sampleTimeControl specifies when to use a sample time for external channel
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1895   * \param channelSelectionStyle External Multiplexer Channel Selection Style
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1896   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1897   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1898  IFX_EXTERN void IfxEvadc_configExternalMultiplexerMode(Ifx_EVADC *evadc, Ifx_EVADC_G *evadcG, IfxEvadc_ExternalMultiplexerMode mode, uint8 channels, IfxEvadc_EmuxSelectValue startChannel, IfxEvadc_EmuxCodingScheme code, IfxEvadc_EmuxSampleTimeControl sampleTimeControl, IfxEvadc_ChannelSelectionStyle channelSelectionStyle);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1899  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1900  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1901  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1902  /** \addtogroup IfxLld_Evadc_Std_FastCompare
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1903   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1904  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1905  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1906  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1907  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1908  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1909  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1910   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1911   * \param control Action to be taken on the BoundaryFlag(FCM.B.BFL)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1912   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1913   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1914  IFX_INLINE void IfxEvadc_setFastCompareBoundaryFlagSwControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagSwControl control);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1915  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1916  /** \brief Sets in FCM.B.BFI whether to use Boundary Flag(FCM.B.BFL) directly or in a inverted format
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1917   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1918   * \param mode Invert or not to invert the Boundary Flag(BFL)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1919   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1920   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1921  IFX_INLINE void IfxEvadc_setFastCompareBoundaryFlagInversion(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagInversionControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1922  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1923  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1924   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1925   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1926   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1927  IFX_INLINE void IfxEvadc_disableFastCompareBoundaryFlag(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1928  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1929  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1930   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1931   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1932   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1933  IFX_INLINE void IfxEvadc_enableFastCompareBoundaryFlag(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1934  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1935  /** \brief Enable/Disable sample timing synchronization
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1936   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1937   * \param mode Sample synchronization mode select
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1938   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1939   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1940  IFX_INLINE void IfxEvadc_enableFastCompareSampleSynchronization(Ifx_EVADC_FC *evadcFC, IfxEvadc_SampleSynchronization mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1941  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1942  /** \brief Setting the Reference Precharge Control for Fast Compare Channels in FCCTRL.B.RPC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1943   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1944   * \param duration Reference Precharge Control Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1945   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1946   * 0 - Precharge the reference input for 1 clock phase
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1947   * 1 - Precharge the reference input for 1 clock period (2 phases)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1948   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1949   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1950  IFX_INLINE void IfxEvadc_setFastCompareReferencePrechargeDuration(Ifx_EVADC_FC *evadcFC, IfxEvadc_ReferencePrechargeControl duration);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1951  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1952  /** \brief Get boundary flag status.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1953   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1954   * \return 0(FALSE) - Passive state : Result has not yet crossed the activation boundary, or selected gate signal is inactive, or this boundary flag is disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1955   * 1(TRUE) - Active state:result has crossed the activation boundary
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1956   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1957  IFX_INLINE boolean IfxEvadc_getFastCompareBoundaryFlagStatus(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1958  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1959  /** \brief Returns current level of the selected trigger input
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1960   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1961   * \return Current level of the selected trigger input
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1962   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1963  IFX_INLINE boolean IfxEvadc_getFastCompareExternalTriggerLevelStatus(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1964  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1965  /** \brief Returns result for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1966   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1967   * \return Result for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1968   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1969  IFX_INLINE boolean IfxEvadc_getFastCompareResultStatus(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1970  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1971  /** \brief Indicates availability of a new result in bit FCM.B.FCR
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1972   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1973   * \return Returns value Indicating availability of a new result in bit FCM.B.FCR
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1974   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1975  IFX_INLINE boolean IfxEvadc_isFastCompareNewResultAvailable(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1976  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1977  /** \brief Selects behaviour of Boundary Flag(BFL) wih respect to the value of FCR.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1978   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1979   * \param mode 0 - Set boundary flag BFL if result FCR = 1 (input above the defined band or compare value), clear if FCR = 0 (input below)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1980   * 1 - Set boundary flag BFL if result FCR = 0 (input below the defined band or compare value), clear if FCR = 1 (input above)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1981   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1982   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1983  IFX_INLINE void IfxEvadc_selectFastCompareBoundaryFlagActivationMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagActivationMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1984  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1985  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1986   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1987   * \param nodePointer Bounday Flag Node Pointers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1988   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1989   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1990  IFX_INLINE void IfxEvadc_selectFastCompareBoundaryFlagNodePointer(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagNodePointer nodePointer);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1991  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1992  /** \brief Sets the delay of the analog clock(in clock cycles) after the sync signal.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1993   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1994   * \param delay Defines the delay of the analog clock in clocks after the sync signal.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1995   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1996   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1997  IFX_INLINE void IfxEvadc_setFastCompareAnalogClockSynchronizationDelay(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareAnalogClockSynchronizationDelay delay);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1998  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1999  /** \brief Set Analog Converter Control modes
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2000   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2001   * \param mode Analog Converter Control modes
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2002   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2003   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2004  IFX_INLINE void IfxEvadc_setFastCompareAnalogConverter(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareAnalogConverterControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2005  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2006  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2007   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2008   * \param mode Analog Input Precharge Enable for Fast Comparisons
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2009   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2010   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2011  IFX_INLINE void IfxEvadc_setFastCompareAnalogInputPrechargeControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_AnalogInputPrechargeControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2012  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2013  /** \brief Defines the frequency of the analog converter clock fADCI (base clock for
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2014   * conversion steps), derived from the peripheral clock: fADCI = fADC / divider
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2015   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2016   * \param divider Fast Compare Analog Internal Clock Divider factor
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2017   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2018   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2019  IFX_INLINE void IfxEvadc_setFastCompareAnalogInternalClockDivider(Ifx_EVADC_FC *evadcFC, IfxEvadc_ClockDividerFactor divider);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2020  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2021  /** \brief Sets the source of the value(s) in bitfield FCREF.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2022   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2023   * \param mode Defines the source of the value(s) in bitfield FCREF.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2024   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2025   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2026  IFX_INLINE void IfxEvadc_setFastCompareAutomaticUpdateMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareAutomaticUpdate mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2027  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2028  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2029   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2030   * \param mode Mode/criteria for generation of service requests
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2031   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2032   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2033  IFX_INLINE void IfxEvadc_setFastCompareChannelEventMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_ChannelEventMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2034  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2035  /** \brief Set external trigger polarity in FCCTRL.B.XTPOL
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2036   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2037   * \param mode 0 - Use selected input signal directly
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2038   * 1 - Invert selected input signal
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2039   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2040   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2041  IFX_INLINE void IfxEvadc_setFastCompareExternalTriggerPolarity(Ifx_EVADC_FC *evadcFC, IfxEvadc_ExternalTriggerPolarity mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2042  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2043  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2044   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2045   * \param mode Fast Compare Gate Operating Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2046   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2047   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2048  IFX_INLINE void IfxEvadc_setFastCompareGateOperatingMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_GateOperatingMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2049  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2050  /** \brief Ramp direction(up or down) settings
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2051   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2052   * \param rampDirection Ramp direction(up or down) settings
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2053   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2054   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2055  IFX_INLINE void IfxEvadc_setFastCompareRampDirection(Ifx_EVADC_FC *evadcFC, IfxEvadc_RampDirection rampDirection);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2056  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2057  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2058   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2059   * \param referenceValue The input level is compared to this value.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2060   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2061   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2062  IFX_INLINE void IfxEvadc_setFastCompareReferenceValue(Ifx_EVADC_FC *evadcFC, uint16 referenceValue);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2063  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2064  /** \brief Defines the basic run conditions of the fast compare channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2065   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2066   * \param mode Run mode of the fast compare channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2067   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2068   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2069  IFX_INLINE void IfxEvadc_setFastCompareRunControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareRunControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2070  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2071  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2072   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2073   * \param rampStartMode Defines the run conditions for the ramp generation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2074   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2075   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2076  IFX_INLINE void IfxEvadc_setFastCompareRunRampControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_RampRunControl rampStartMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2077  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2078  /** \brief Setting additional sample time in FCCTRL.B.STCF
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2079   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2080   * \param additionalCycles Number of additional clock cycles to be added to the minimum sample phase of 2 analog clock cycles
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2081   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2082   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2083  IFX_INLINE void IfxEvadc_setFastCompareSampleTimeControl(Ifx_EVADC_FC *evadcFC, uint8 additionalCycles);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2084  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2085  /** \brief Sets when to generate service requests
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2086   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2087   * \param mode Defines when to generate service requests
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2088   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2089   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2090  IFX_INLINE void IfxEvadc_setFastCompareServiceRequestGeneration(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareServiceRequestGeneration mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2091  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2092  /** \brief Sets the interval at which fast compare operations are triggered in steps of 16 * 1/fADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2093   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2094   * \param interval Defines the interval at which fast compare operations are triggered in steps of 16 * 1/f_ADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2095   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2096   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2097  IFX_INLINE void IfxEvadc_setFastCompareTriggerInterval(Ifx_EVADC_FC *evadcFC, uint8 interval);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2098  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2099  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2100   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2101   * \param mode External Trigger Operating Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2102   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2103   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2104  IFX_INLINE void IfxEvadc_setFastCompareTriggerOperatingMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_TriggerOperatingMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2105  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2106  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2107  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2108  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2109  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2110  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2111  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2112  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2113   * \param evadcG Pointer to EVADC group register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2114   * \return analog function configuration value
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2115   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2116  IFX_INLINE Ifx_EVADC_G_ANCFG IfxEvadc_getAnalogFunctionConfiguration(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2117  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2118  /** \brief Get the sample time of ADC global class for external channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2119   * \param evadc pointer to EVADC Module space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2120   * \param inputClassNum Adc input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2121   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2122   * \return ADC input class external channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2123   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2124  IFX_INLINE float32 IfxEvadc_getEmuxGlobalSampleTime(Ifx_EVADC *evadc, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2125  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2126  /** \brief Sets the Emux Interface for a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2127   * \param evadc Pointer to EVADC Module Space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2128   * \param emuxInterface specifies the EmuxInterface
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2129   * \param group specifies the group ID
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2130   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2131   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2132  IFX_INLINE void IfxEvadc_setEmuxInterfaceForGroup(Ifx_EVADC *evadc, IfxEvadc_EmuxInterface emuxInterface, IfxEvadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2133  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2134  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2135   * \param evadcG Pointer to EVADC Group Registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2136   * \param group EVADC Group Number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2137   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2138   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2139  IFX_INLINE void IfxEvadc_disableReferencePrecharge(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2140  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2141  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2142   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2143   * \param group EVADC Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2144   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2145   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2146  IFX_INLINE void IfxEvadc_disableInputBuffer(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2147  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2148  /** \brief Return if the clock for EVADC modules is enabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2149   * \param evadc Pointer to EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2150   * \return Status (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2151   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2152  IFX_INLINE boolean IfxEvadc_isModuleEnabled(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2153  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2154  /** \brief Enable the startup calibaration phase
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2155   * \param evadc Pointer to EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2156   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2157   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2158  IFX_INLINE void IfxEvadc_enableStartupCalibration(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2159  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2160  /** \brief Enable the Queue Gating Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2161   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2162   * \param queue Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2163   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2164   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2165   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2166  IFX_INLINE void IfxEvadc_selectQueueGatingMode(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource queue, IfxEvadc_GatingMode gatingMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2167  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2168  /** \brief Defines the channel number to be converted
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2169   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2170   * \param queue Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2171   * \param channel Channel number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2172   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2173   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2174  IFX_INLINE void IfxEvadc_setChannelRequest(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource queue, IfxEvadc_ChannelId channel);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2175  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2176  /** \brief Sets the global input class registers, define the sample time and data conversion mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2177   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2178   * \param inputClassNum Input Class Number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2179   * \param value Value to be written
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2180   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2181   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2182  IFX_INLINE void IfxEvadc_configureIclass(Ifx_EVADC_G *evadcG, uint8 inputClassNum, uint32 value);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2183  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2184  /** \brief Returns the pointer to the result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2185   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2186   * \param channel Channel Number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2187   * \return The address to the result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2188   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2189  IFX_INLINE volatile uint32 *IfxEvadc_getResultRegisterAddress(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channel);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2190  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2191  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2192  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2193  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2194  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2195  IFX_INLINE void IfxEvadc_setAnalogClockSynchronizationDelay(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_AnalogClockSynchronizationDelay delay)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2196  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2197      IFX_UNUSED_PARAMETER(group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2198      evadcG->ANCFG.B.ACSD = delay;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2199  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2200  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2201  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2202  IFX_INLINE uint32 IfxEvadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2203  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2204      uint32 ticks = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2205  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2206      ticks = (uint32)(sampleTime * analogFrequency) - 2;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2207  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2208      if (ticks > 31)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2209      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2210          ticks = (ticks / 16) + 15;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2211      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2212  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2213      ticks = __minu(ticks, 0xFFu);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2214  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2215      return ticks;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2216  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2217  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2218  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2219  IFX_INLINE void IfxEvadc_setCalibrationSampleTime(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_CalibrationSampleTimeControl mode)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2220  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2221      IFX_UNUSED_PARAMETER(group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2222      evadcG->ANCFG.B.CALSTC = mode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2223  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2224  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2225  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2226  IFX_INLINE void IfxEvadc_clearAllResultRequests(Ifx_EVADC_G *evadcG)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2227  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2228      evadcG->REFCLR.U = 0x0000FFFFu;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2229  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2230  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2231  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2232  IFX_INLINE void IfxEvadc_clearChannelRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelId)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2233  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2234      evadcG->CEFCLR.U = 1 << channelId;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2235  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2236  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2237  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2238  IFX_INLINE void IfxEvadc_clearQueue(Ifx_EVADC_G *evadcG, boolean flushQueue, IfxEvadc_RequestSource sourceType)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2239  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2240      switch (sourceType)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2241      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2242      case IfxEvadc_RequestSource_queue0:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2243          evadcG->Q[0].QMR.B.FLUSH = flushQueue;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2244          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2245      case IfxEvadc_RequestSource_queue1:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2246          evadcG->Q[1].QMR.B.FLUSH = flushQueue;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2247          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2248      case IfxEvadc_RequestSource_queue2:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2249          evadcG->Q[2].QMR.B.FLUSH = flushQueue;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2250          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2251      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2252  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2253  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2254  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2255  IFX_INLINE void IfxEvadc_configureWaitForReadMode(Ifx_EVADC_G *group, uint32 resultIdx, boolean enabled)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2256  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2257      group->RCR[resultIdx].B.WFR = enabled;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2258  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2259  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2260  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2261  IFX_INLINE void IfxEvadc_configureWaitForReadModeForGlobalResultRegister(Ifx_EVADC *evadc, boolean enabled)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2262  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2263      evadc->GLOB.RCR.B.WFR = enabled;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2264  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2265  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2266  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2267  IFX_INLINE void IfxEvadc_setFastCompareBoundaryFlagSwControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagSwControl control)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2268  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2269      evadcFC->FCBFL.B.BFS = control;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2270  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2271  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2272  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2273  IFX_INLINE void IfxEvadc_setFastCompareBoundaryFlagInversion(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagInversionControl mode)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2274  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2275      evadcFC->FCBFL.B.BFI = mode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2276  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2277  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2278  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2279  IFX_INLINE void IfxEvadc_disableFastCompareBoundaryFlag(Ifx_EVADC_FC *evadcFC)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2280  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2281      evadcFC->FCBFL.B.BFM = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2282  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2283  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2284  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2285  IFX_INLINE void IfxEvadc_disableModule(Ifx_EVADC *evadc)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2286  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2287      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2288  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2289      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2290      evadc->CLC.B.DISR = 1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2291      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2292  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2293  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2294  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2295  IFX_INLINE void IfxEvadc_disablePostCalibration(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, boolean enabled)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2296  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2297      IFX_UNUSED_PARAMETER(group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2298      evadcG->ANCFG.B.DPCAL = enabled;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2299  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2300  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2301  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2302  IFX_INLINE void IfxEvadc_enableFastCompareBoundaryFlag(Ifx_EVADC_FC *evadcFC)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2303  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2304      evadcFC->FCBFL.B.BFM = 1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2305  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2306  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2307  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2308  IFX_INLINE void IfxEvadc_enableFastCompareSampleSynchronization(Ifx_EVADC_FC *evadcFC, IfxEvadc_SampleSynchronization mode)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2309  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2310      Ifx_EVADC_FC_FCM tempFCM;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2311      tempFCM.U       = evadcFC->FCM.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2312      tempFCM.B.FCMWC = 1;  /*Enabling write permission to FCM.B.SSE*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2313      tempFCM.B.SSE   = mode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2314      evadcFC->FCM.U  = tempFCM.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2315  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2316  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2317  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2318  IFX_INLINE void IfxEvadc_enableFifoMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, IfxEvadc_FifoMode fifoMode)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2319  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2320      evadcG->RCR[resultRegister].B.FEN = fifoMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2321  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2322  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2323  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2324  IFX_INLINE void IfxEvadc_enableModule(Ifx_EVADC *evadc)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2325  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2326      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2327  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2328      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2329      evadc->CLC.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2330      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2331  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2332  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2333  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2334  IFX_INLINE void IfxEvadc_enableServiceRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2335  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2336      evadcG->RCR[resultRegister].B.SRGEN = 1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2337  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2338  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2339  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2340  IFX_INLINE void IfxEvadc_disableServiceRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2341  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2342      evadcG->RCR[resultRegister].B.SRGEN = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2343  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2344  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2345  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2346  IFX_INLINE void IfxEvadc_setFastCompareReferencePrechargeDuration(Ifx_EVADC_FC *evadcFC, IfxEvadc_ReferencePrechargeControl duration)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2347  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2348      Ifx_EVADC_FC_FCCTRL tempFCCTRL;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2349      tempFCCTRL.U      = evadcFC->FCCTRL.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2350      tempFCCTRL.B.CPWC = 1; /*Enabling write permission to FCCTRL.B.RPC*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2351      tempFCCTRL.B.RPE  = duration;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2352      evadcFC->FCCTRL.U = tempFCCTRL.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2353  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2354  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2355  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2356  IFX_INLINE float32 IfxEvadc_getAdcAnalogFrequency(Ifx_EVADC_G *group)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2357  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2358  #ifdef IFX_CFG_AURIX_SCUCCU_USED
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2359      return IfxScuCcu_getSpbFrequency() / (1U + group->ANCFG.B.DIVA);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2360  #else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2361      return IfxScuCcu_getAdcFrequency() / (1U + group->ANCFG.B.DIVA);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2362  #endif
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2363  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2364  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2365  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2366  IFX_INLINE uint8 IfxEvadc_getAdcCalibrationActiveState(Ifx_EVADC *evadc, uint8 adcCalGroupNum)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2367  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2368      uint8 status = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2369      status = evadc->G[adcCalGroupNum].ARBCFG.B.CAL;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2370      return status;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2371  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2372  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2373  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2374  IFX_INLINE Ifx_EVADC_G_ANCFG IfxEvadc_getAnalogFunctionConfiguration(Ifx_EVADC_G *evadcG)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2375  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2376      Ifx_EVADC_G_ANCFG analogCfg;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2377      analogCfg.U = evadcG->ANCFG.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2378      return analogCfg;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2379  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2380  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2381  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2382  IFX_INLINE Ifx_EVADC_G_CHCTR IfxEvadc_getChannelControlConfig(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2383  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2384      Ifx_EVADC_G_CHCTR tempChctr;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2385      tempChctr.U = evadcG->CHCTR[channelIndex].U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2386      return tempChctr;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2387  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2388  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2389  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2390  IFX_INLINE IfxEvadc_InputClasses IfxEvadc_getChannelInputclass(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2391  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2392      return (IfxEvadc_InputClasses)evadcG->CHCTR[channelIndex].B.ICLSEL;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2393  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2394  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2395  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2396  IFX_INLINE Ifx_EVADC_G_REVNP0 IfxEvadc_getChannelResultServiceRequestNodePointer0(Ifx_EVADC_G *evadcG)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2397  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2398      Ifx_EVADC_G_REVNP0 resultServiceRequestNodePtr0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2399      resultServiceRequestNodePtr0.U = evadcG->REVNP0.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2400      return resultServiceRequestNodePtr0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2401  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2402  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2403  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2404  IFX_INLINE Ifx_EVADC_G_REVNP1 IfxEvadc_getChannelResultServiceRequestNodePointer1(Ifx_EVADC_G *evadcG)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2405  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2406      Ifx_EVADC_G_REVNP1 resultServiceRequestNodePtr1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2407      resultServiceRequestNodePtr1.U = evadcG->REVNP1.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2408      return resultServiceRequestNodePtr1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2409  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2410  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2411  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2412  IFX_INLINE Ifx_EVADC_G_CEVNP0 IfxEvadc_getChannelServiceRequestNodePointer0(Ifx_EVADC_G *evadcG)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2413  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2414      Ifx_EVADC_G_CEVNP0 serviceRequestNodePtr;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2415      serviceRequestNodePtr.U = evadcG->CEVNP0.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2416      return serviceRequestNodePtr;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2417  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2418  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2419  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2420  IFX_INLINE Ifx_EVADC_G_CEVNP1 IfxEvadc_getChannelServiceRequestNodePointer1(Ifx_EVADC_G *evadcG)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2421  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2422      Ifx_EVADC_G_CEVNP1 serviceRequestNodePtr;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2423      serviceRequestNodePtr.U = evadcG->CEVNP1.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2424      return serviceRequestNodePtr;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2425  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2426  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2427  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2428  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getEmuxGlobalConversionMode(Ifx_EVADC *evadc, uint8 inputClassNum)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2429  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2430      return (IfxEvadc_ChannelNoiseReduction)evadc->GLOB.ICLASS[inputClassNum].B.CME;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2431  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2432  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2433  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2434  IFX_INLINE float32 IfxEvadc_getEmuxGlobalSampleTime(Ifx_EVADC *evadc, uint8 inputClassNum, float32 analogFrequency)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2435  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2436      return (float32)(IFXEVADC_SAMPLETIME_MIN + evadc->GLOB.ICLASS[inputClassNum].B.STCE) / analogFrequency;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2437  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2438  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2439  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2440  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getEmuxGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2441  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2442      return (IfxEvadc_ChannelNoiseReduction)evadcG->ICLASS[inputClassNum].B.CME;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2443  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2444  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2445  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2446  IFX_INLINE float32 IfxEvadc_getEmuxGroupSampleTime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2447  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2448      return (float32)(IFXEVADC_SAMPLETIME_MIN + evadcG->ICLASS[inputClassNum].B.STCE) / analogFrequency;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2449  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2450  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2451  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2452  IFX_INLINE boolean IfxEvadc_getFastCompareBoundaryFlagStatus(Ifx_EVADC_FC *evadcFC)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2453  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2454      boolean status;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2455  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2456      if (evadcFC->FCBFL.B.BFL == 1)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2457      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2458          status = TRUE;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2459      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2460      else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2461      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2462          status = FALSE;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2463      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2464  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2465      return status;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2466  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2467  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2468  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2469  IFX_INLINE boolean IfxEvadc_getFastCompareExternalTriggerLevelStatus(Ifx_EVADC_FC *evadcFC)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2470  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2471      boolean extTrigLevel;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2472  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2473      if (evadcFC->FCCTRL.B.XTLVL == 1)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2474      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2475          extTrigLevel = TRUE;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2476      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2477      else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2478      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2479          extTrigLevel = FALSE;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2480      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2481  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2482      return extTrigLevel;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2483  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2484  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2485  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2486  IFX_INLINE boolean IfxEvadc_getFastCompareResultStatus(Ifx_EVADC_FC *evadcFC)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2487  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2488      boolean result;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2489  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2490      if (evadcFC->FCBFL.B.FCR == 1)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2491      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2492          result = TRUE;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2493      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2494      else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2495      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2496          result = FALSE;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2497      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2498  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2499      return result;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2500  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2501  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2502  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2503  IFX_INLINE Ifx_EVADC_GLOBCFG IfxEvadc_getGlobalConfigValue(Ifx_EVADC *evadc)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2504  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2505      Ifx_EVADC_GLOBCFG globCfg;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2506      globCfg.U = evadc->GLOBCFG.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2507      return globCfg;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2508  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2509  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2510  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2511  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getGlobalConversionMode(Ifx_EVADC *evadc, uint8 inputClassNum)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2512  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2513      return (IfxEvadc_ChannelNoiseReduction)evadc->GLOB.ICLASS[inputClassNum].B.CMS;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2514  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2515  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2516  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2517  IFX_INLINE Ifx_EVADC_GLOB_RES IfxEvadc_getGlobalResult(Ifx_EVADC *evadc)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2518  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2519      Ifx_EVADC_GLOB_RES tmpGlobalResult;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2520  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2521      tmpGlobalResult.U = evadc->GLOB.RES.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2522  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2523      return tmpGlobalResult;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2524  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2525  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2526  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2527  IFX_INLINE float32 IfxEvadc_getGlobalSampleTime(Ifx_EVADC *evadc, uint8 inputClassNum, float32 analogFrequency)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2528  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2529      uint32 sampleTime = evadc->GLOB.ICLASS[inputClassNum].B.STCS;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2530  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2531      if (sampleTime > 16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2532      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2533          sampleTime = (sampleTime - 15) * 16;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2534      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2535  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2536      return (float32)(IFXEVADC_SAMPLETIME_MIN + sampleTime) / analogFrequency;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2537  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2538  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2539  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2540  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2541  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2542      return (IfxEvadc_ChannelNoiseReduction)evadcG->ICLASS[inputClassNum].B.CMS;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2543  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2544  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2545  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2546  IFX_INLINE void IfxEvadc_getGroupResult(Ifx_EVADC_G *group, Ifx_EVADC_G_RES *results, uint32 resultOffset, uint32 numResults)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2547  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2548      uint32 idx = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2549  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2550      for (idx = 0; idx < numResults; idx++)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2551      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2552          results[idx].U = group->RES[resultOffset + idx].U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2553      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2554  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2555  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2556  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2557  IFX_INLINE float32 IfxEvadc_getGroupSampleTime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2558  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2559      uint32 sampleTime = evadcG->ICLASS[inputClassNum].B.STCS;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2560  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2561      if (sampleTime > 16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2562      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2563          sampleTime = (sampleTime - 15) * 16;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2564      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2565  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2566      return (float32)(IFXEVADC_SAMPLETIME_MIN + sampleTime) / analogFrequency;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2567  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2568  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2569  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2570  IFX_INLINE uint8 IfxEvadc_getMasterIndex(Ifx_EVADC_G *evadcG)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2571  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2572      uint8 masterIndex = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2573      masterIndex = evadcG->SYNCTR.B.STSEL;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2574      return masterIndex;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2575  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2576  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2577  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2578  IFX_INLINE Ifx_EVADC_G_RES IfxEvadc_getResult(Ifx_EVADC_G *group, uint32 resultIdx)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2579  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2580      Ifx_EVADC_G_RES tmpResult;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2581      tmpResult.U = group->RES[resultIdx].U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2582  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2583      return tmpResult;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2584  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2585  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2586  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2587  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEvadc_getSrcAddress(IfxEvadc_GroupId group, IfxEvadc_SrcNr index)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2588  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2589      if ((group >= IfxEvadc_GroupId_12) && (group < IfxEvadc_GroupId_global0)) //Condition for Fast Compare groups
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2590      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2591          IFX_ASSERT(IFX_VERBOSE_LEVEL_WARNING, index == 0);                    /* For Fast Compare group, only SR0 is available.So only index = 0 is valid.So asserting warning in case index!=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2592      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2593  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2594  /*This is being done because the enum IfxEvadc_GroupId has count equal to group number and this count may not be continuous for different derivatives whereas IfxEvadc_cfg_srcAddresses[] has continuous positioning according to number of groups of each type available*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2595      if ((group > 7) && (group < 12))
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2596      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2597          group = (IfxEvadc_GroupId)(group - (8 - IFXEVADC_NUM_ADC_PRIMARY_GROUPS));
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2598      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2599      else if ((group > 11) && (group < 20))
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2600      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2601          group = (IfxEvadc_GroupId)(group - (12 - IFXEVADC_NUM_ADC_PRIMARY_GROUPS - IFXEVADC_NUM_ADC_SECONDARY_GROUPS));
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2602      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2603      else if ((group == 20) || (group == 21))
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2604      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2605          group = (IfxEvadc_GroupId)(group - (20 - IFXEVADC_NUM_ADC_PRIMARY_GROUPS - IFXEVADC_NUM_ADC_SECONDARY_GROUPS - IFXEVADC_NUM_FAST_COMPARE_CHANNELS));
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2606      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2607  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2608      volatile Ifx_SRC_SRCR *base = IfxEvadc_cfg_srcAddresses[(group << 2) + index];
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2609  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2610      return base;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2611  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2612  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2613  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2614  IFX_INLINE boolean IfxEvadc_getStartupCalibrationStatus(Ifx_EVADC *evadc)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2615  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2616      return (boolean)evadc->GLOBCFG.B.SUCAL;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2617  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2618  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2619  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2620  IFX_INLINE void IfxEvadc_selectIdlePrechargeLevel(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_IdlePrecharge mode)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2621  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2622      IFX_UNUSED_PARAMETER(group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2623  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2624      evadcG->ANCFG.B.IPE = mode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2625  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2626  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2627  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2628  IFX_INLINE void IfxEvadc_initEmuxPin(const IfxEvadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2629  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2630      IfxPort_setPinModeOutput(emux->pin.port, emux->pin.pinIndex, outputMode, emux->select);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2631      IfxPort_setPinPadDriver(emux->pin.port, emux->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2632  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2633  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2634  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2635  IFX_INLINE void IfxEvadc_initGxBflPin(const IfxEvadc_GxBfl_Out *gxBfl, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2636  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2637      IfxPort_setPinModeOutput(gxBfl->pin.port, gxBfl->pin.pinIndex, outputMode, gxBfl->select);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2638      IfxPort_setPinPadDriver(gxBfl->pin.port, gxBfl->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2639  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2640  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2641  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2642  IFX_INLINE void IfxEvadc_initialiseAdcConverterClock(Ifx_EVADC *evadc, Ifx_EVADC_G *evadcG, IfxEvadc_ClockDividerFactor converterClockDivider)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2643  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2644      IFX_UNUSED_PARAMETER(evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2645      evadcG->ANCFG.B.DIVA = converterClockDivider;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2646  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2647  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2648  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2649  IFX_INLINE void IfxEvadc_initiateStartupCalibration(Ifx_EVADC *evadc)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2650  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2651      evadc->GLOBCFG.B.SUCAL = 1;
	ld.bu	d15,[a15]131
.L470:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   604      /* Set SUCAL bit */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   605      IfxEvadc_initiateStartupCalibration(evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   606      IfxEvadc_disableAccess(evadc, IfxEvadc_Protection_globalConfig);
	mov	d4,#80
	mov.aa	a4,a15
.L475:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     2   * \file IfxEvadc.h
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     3   * \brief EVADC  basic functionality
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     4   * \ingroup IfxLld_Evadc
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     5   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     8   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     9   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    11   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    16   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    18   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    25   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    32   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    40   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    41   * \defgroup IfxLld_Evadc_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    42   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    43   * \defgroup IfxLld_Evadc_Std_Global Global Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    44   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    45   * \defgroup IfxLld_Evadc_Std_QueueRequest Queue Request Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    46   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    47   * \defgroup IfxLld_Evadc_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    48   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    49   * \defgroup IfxLld_Evadc_Std_Frequency Frequency Calculation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    50   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    51   * \defgroup IfxLld_Evadc_Std_Group Group Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    52   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    53   * \defgroup IfxLld_Evadc_Std_Module Module Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    54   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    55   * \defgroup IfxLld_Evadc_Std_Channel Channel Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    56   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    57   * \defgroup IfxLld_Evadc_Std_Emux Emux Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    58   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    59   * \defgroup IfxLld_Evadc_Std_FastCompare Fast Compare functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    60   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    61   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    62  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    63  #ifndef IFXEVADC_H
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    64  #define IFXEVADC_H 1
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    65  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    66  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    67  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    68  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    69  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    70  #include "_Impl/IfxEvadc_cfg.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    71  #include "_PinMap/IfxEvadc_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    72  #include "IfxEvadc_bf.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    73  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    74  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    75  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    76  #include "IfxCbs_reg.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    77  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    78  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    79  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    80  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    81  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    82  /** \addtogroup IfxLld_Evadc_Std_Enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    83   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    84  /** \brief Defined in MODULE_EVADC.G[x].ARBCFG.B.ANONS and ANONC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    85   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    86  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    87  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    88      IfxEvadc_AnalogConverterMode_off             = 0, /**< \brief Analog Converter off */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    89      IfxEvadc_AnalogConverterMode_slowStandby     = 1, /**< \brief Slow Standby Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    90      IfxEvadc_AnalogConverterMode_fastStandby     = 2, /**< \brief Fast Standby Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    91      IfxEvadc_AnalogConverterMode_normalOperation = 3  /**< \brief Normal operation mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    92  } IfxEvadc_AnalogConverterMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    93  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    94  /** \brief Arbitration round length defined in MODULE_EVADC.G[x].ARBCFG.ARBRND(x=0,1,..,11)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    95   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    96  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    97  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    98      IfxEvadc_ArbitrationRounds_4_slots  = 0,  /**< \brief An arbitration round contains 4 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    99      IfxEvadc_ArbitrationRounds_8_slots  = 1,  /**< \brief An arbitration round contains 8 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   100      IfxEvadc_ArbitrationRounds_16_slots = 2,  /**< \brief An arbitration round contains 16 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   101      IfxEvadc_ArbitrationRounds_20_slots = 3   /**< \brief An arbitration round contains 20 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   102  } IfxEvadc_ArbitrationRounds;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   103  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   104  /** \brief Boundary Extension defined in MODULE_EVADC.G[x].CHCTR[y].B.BNDSELX(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   105   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   106  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   107  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   108      IfxEvadc_BoundaryExtension_standard            = 0,   /**< \brief Boundary Standard mode. BNDSELU/BNDSELL as Boundaries */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   109      IfxEvadc_BoundaryExtension_fastCompareResult1  = 1,   /**< \brief Fast compare mode use as upper boundary  Channel result   1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   110      IfxEvadc_BoundaryExtension_fastCompareResult2  = 2,   /**< \brief Fast compare mode use as upper boundary  Channel result   2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   111      IfxEvadc_BoundaryExtension_fastCompareResult3  = 3,   /**< \brief Fast compare mode use as upper boundary  Channel result   3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   112      IfxEvadc_BoundaryExtension_fastCompareResult4  = 4,   /**< \brief Fast compare mode use as upper boundary  Channel result   4 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   113      IfxEvadc_BoundaryExtension_fastCompareResult5  = 5,   /**< \brief Fast compare mode use as upper boundary  Channel result   5 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   114      IfxEvadc_BoundaryExtension_fastCompareResult6  = 6,   /**< \brief Fast compare mode use as upper boundary  Channel result   6 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   115      IfxEvadc_BoundaryExtension_fastCompareResult7  = 7,   /**< \brief Fast compare mode use as upper boundary  Channel result   7 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   116      IfxEvadc_BoundaryExtension_fastCompareResult8  = 8,   /**< \brief Fast compare mode use as upper boundary  Channel result   8 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   117      IfxEvadc_BoundaryExtension_fastCompareResult9  = 9,   /**< \brief Fast compare mode use as upper boundary  Channel result   9 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   118      IfxEvadc_BoundaryExtension_fastCompareResult10 = 10,  /**< \brief Fast compare mode use as upper boundary  Channel result  10 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   119      IfxEvadc_BoundaryExtension_fastCompareResult11 = 11,  /**< \brief Fast compare mode use as upper boundary  Channel result  11 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   120      IfxEvadc_BoundaryExtension_fastCompareResult12 = 12,  /**< \brief Fast compare mode use as upper boundary  Channel result  12 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   121      IfxEvadc_BoundaryExtension_fastCompareResult13 = 13,  /**< \brief Fast compare mode use as upper boundary  Channel result  13 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   122      IfxEvadc_BoundaryExtension_fastCompareResult14 = 14,  /**< \brief Fast compare mode use as upper boundary  Channel result  14 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   123      IfxEvadc_BoundaryExtension_fastCompareResult15 = 15   /**< \brief Fast compare mode use as upper boundary  Channel result  15 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   124  } IfxEvadc_BoundaryExtension;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   125  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   126  /** \brief BoundarySel defined in MODULE_EVADC.G[x].CHCTR[y].B.BNDSELL(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   127   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   128  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   129  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   130      IfxEvadc_BoundarySelection_group0  = 0,  /**< \brief Use group class 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   131      IfxEvadc_BoundarySelection_group1  = 1,  /**< \brief Use group class 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   132      IfxEvadc_BoundarySelection_global0 = 2,  /**< \brief Use global class 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   133      IfxEvadc_BoundarySelection_global1 = 3   /**< \brief Use global class 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   134  } IfxEvadc_BoundarySelection;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   135  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   136  /** \brief EVADC Channels
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   137   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   138  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   139  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   140      IfxEvadc_ChannelId_none = -1,  /**< \brief None of EVADC channels */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   141      IfxEvadc_ChannelId_0    = 0,   /**< \brief Channel 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   142      IfxEvadc_ChannelId_1    = 1,   /**< \brief Channel 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   143      IfxEvadc_ChannelId_2    = 2,   /**< \brief Channel 2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   144      IfxEvadc_ChannelId_3    = 3,   /**< \brief Channel 3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   145      IfxEvadc_ChannelId_4    = 4,   /**< \brief Channel 4 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   146      IfxEvadc_ChannelId_5    = 5,   /**< \brief Channel 5 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   147      IfxEvadc_ChannelId_6    = 6,   /**< \brief Channel 6 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   148      IfxEvadc_ChannelId_7    = 7,   /**< \brief Channel 7 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   149      IfxEvadc_ChannelId_8    = 8,   /**< \brief Channel 8 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   150      IfxEvadc_ChannelId_9    = 9,   /**< \brief Channel 9 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   151      IfxEvadc_ChannelId_10   = 10,  /**< \brief Channel 10 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   152      IfxEvadc_ChannelId_11   = 11,  /**< \brief Channel 11 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   153      IfxEvadc_ChannelId_12   = 12,  /**< \brief Channel 12 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   154      IfxEvadc_ChannelId_13   = 13,  /**< \brief Channel 13 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   155      IfxEvadc_ChannelId_14   = 14,  /**< \brief Channel 14 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   156      IfxEvadc_ChannelId_15   = 15   /**< \brief Channel 15 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   157  } IfxEvadc_ChannelId;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   158  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   159  /** \brief ADC channel reference defined in MODULE_EVADC.G[x].CHCTR[y].B.REFSEL(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   160   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   161  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   162  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   163      IfxEvadc_ChannelReference_standard = 0,  /**< \brief use Varef as reference */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   164      IfxEvadc_ChannelReference_channel0 = 1   /**< \brief use CH0 as reference */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   165  } IfxEvadc_ChannelReference;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   166  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   167  /** \brief Channel Result defined in MODULE_EVADC.G[x].CHCTR[y].B.RESREG(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   168   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   169  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   170  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   171      IfxEvadc_ChannelResult_0 = 0,      /**< \brief Use Channel result 0  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   172      IfxEvadc_ChannelResult_1,          /**< \brief Use Channel result 1  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   173      IfxEvadc_ChannelResult_2,          /**< \brief Use Channel result 2  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   174      IfxEvadc_ChannelResult_3,          /**< \brief Use Channel result 3  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   175      IfxEvadc_ChannelResult_4,          /**< \brief Use Channel result 4  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   176      IfxEvadc_ChannelResult_5,          /**< \brief Use Channel result 5  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   177      IfxEvadc_ChannelResult_6,          /**< \brief Use Channel result 6  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   178      IfxEvadc_ChannelResult_7,          /**< \brief Use Channel result 7  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   179      IfxEvadc_ChannelResult_8,          /**< \brief Use Channel result 8  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   180      IfxEvadc_ChannelResult_9,          /**< \brief Use Channel result 9  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   181      IfxEvadc_ChannelResult_10,         /**< \brief Use Channel result 10  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   182      IfxEvadc_ChannelResult_11,         /**< \brief Use Channel result 11  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   183      IfxEvadc_ChannelResult_12,         /**< \brief Use Channel result 12  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   184      IfxEvadc_ChannelResult_13,         /**< \brief Use Channel result 13  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   185      IfxEvadc_ChannelResult_14,         /**< \brief Use Channel result 14  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   186      IfxEvadc_ChannelResult_15          /**< \brief Use Channel result 15  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   187  } IfxEvadc_ChannelResult;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   188  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   189  /** \brief External Multiplexer Channel Selection Style as defined in
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   190   * Ifx_EVADC.G[x].EMUXCTR.B.EMXCSS
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   191   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   192  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   193  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   194      IfxEvadc_ChannelSelectionStyle_channelNumber = 0,  /**< \brief selects an arbitrary channel */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   195      IfxEvadc_ChannelSelectionStyle_binary        = 1   /**< \brief Each bit of bitfield EMUXCH selects the
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   196                                                          * associated channel for EMUX control */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   197  } IfxEvadc_ChannelSelectionStyle;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   198  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   199  /** \brief Specifies the External Coding scheme(binary/gray)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   200   * defined in Ifx_EVADC.G[x].EMUXCTR.B.EMXCOD
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   201   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   202  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   203  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   204      IfxEvadc_EmuxCodingScheme_binary = 0,  /**< \brief Output the Channel Number in Binary code */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   205      IfxEvadc_EmuxCodingScheme_gray   = 1   /**< \brief Output the channel number in gray code */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   206  } IfxEvadc_EmuxCodingScheme;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   207  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   208  /** \brief Specifies the Emux interface
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   209   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   210  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   211  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   212      IfxEvadc_EmuxInterface_0 = 0,  /**< \brief Emux Interface 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   213      IfxEvadc_EmuxInterface_1 = 1   /**< \brief Emux Interface 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   214  } IfxEvadc_EmuxInterface;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   215  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   216  /** \brief External Multiplexer sample time control
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   217   * defined in Ifx_EVADC.G[x].EMUXCTR.B.EMXST
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   218   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   219  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   220  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   221      IfxEvadc_EmuxSampleTimeControl_settingChanges = 0,  /**< \brief Use STCE Whenever Setting Changes */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   222      IfxEvadc_EmuxSampleTimeControl_always         = 1   /**< \brief Use STCE for each conversion of an external channel */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   223  } IfxEvadc_EmuxSampleTimeControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   224  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   225  /** \brief specifies the External Channel Start select value
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   226   * defined in Ifx_EVADC.G[x].EMUXCTR.B.EMUXSET
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   227   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   228  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   229  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   230      IfxEvadc_EmuxSelectValue_0 = 0,      /**< \brief Start Selection Value 0  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   231      IfxEvadc_EmuxSelectValue_1,          /**< \brief Start Selection Value 1  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   232      IfxEvadc_EmuxSelectValue_2,          /**< \brief Start Selection Value 2  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   233      IfxEvadc_EmuxSelectValue_3,          /**< \brief Start Selection Value 3  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   234      IfxEvadc_EmuxSelectValue_4,          /**< \brief Start Selection Value 4  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   235      IfxEvadc_EmuxSelectValue_5,          /**< \brief Start Selection Value 5  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   236      IfxEvadc_EmuxSelectValue_6,          /**< \brief Start Selection Value 6  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   237      IfxEvadc_EmuxSelectValue_7           /**< \brief Start Selection Value 7  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   238  } IfxEvadc_EmuxSelectValue;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   239  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   240  /** \brief Specifies External Multiplexer Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   241   * define in Ifx_EVADC.G[x].EMUXCTR.B.EMUXMODE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   242   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   243  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   244  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   245      IfxEvadc_ExternalMultiplexerMode_softwareControl = 0,  /**< \brief Disable The Emux Control */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   246      IfxEvadc_ExternalMultiplexerMode_steady          = 1,  /**< \brief select steady mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   247      IfxEvadc_ExternalMultiplexerMode_singleStep      = 2,  /**< \brief Select single step mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   248      IfxEvadc_ExternalMultiplexerMode_sequence        = 3   /**< \brief Select Sequence Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   249  } IfxEvadc_ExternalMultiplexerMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   250  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   251  /** \brief FIFO mode enable
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   252   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   253  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   254  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   255      IfxEvadc_FifoMode_seperateResultRegister = 0,  /**< \brief seperate Result Register */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   256      IfxEvadc_FifoMode_fifoStructure          = 1,  /**< \brief Part of FIFO structure: copy each new valid result */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   257      IfxEvadc_FifoMode_maximumMode            = 2,  /**< \brief copy new result if bigger */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   258      IfxEvadc_FifoMode_minimumMode            = 3   /**< \brief copy new result if it is smaller */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   259  } IfxEvadc_FifoMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   260  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   261  /** \brief gating mode defined in MODULE_EVADC.QMR0.ENGT
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   262   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   263  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   264  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   265      IfxEvadc_GatingMode_disabled   = 0,  /**< \brief Gating is disabled, no conversion request are issued */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   266      IfxEvadc_GatingMode_always     = 1,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   267      IfxEvadc_GatingMode_gatingHigh = 2,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is high */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   268      IfxEvadc_GatingMode_gatingLow  = 3   /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is low */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   269  } IfxEvadc_GatingMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   270  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   271  /** \brief External trigger gating defined in MODULE_EVADC.G[x].QCTRLy.GTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   272   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   273  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   274  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   275      IfxEvadc_GatingSource_0 = 0,      /**< \brief Input signal REQGTx_0  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   276      IfxEvadc_GatingSource_1,          /**< \brief Input signal REQGTx_1  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   277      IfxEvadc_GatingSource_2,          /**< \brief Input signal REQGTx_2  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   278      IfxEvadc_GatingSource_3,          /**< \brief Input signal REQGTx_3  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   279      IfxEvadc_GatingSource_4,          /**< \brief Input signal REQGTx_4  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   280      IfxEvadc_GatingSource_5,          /**< \brief Input signal REQGTx_5  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   281      IfxEvadc_GatingSource_6,          /**< \brief Input signal REQGTx_6  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   282      IfxEvadc_GatingSource_7,          /**< \brief Input signal REQGTx_7  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   283      IfxEvadc_GatingSource_8,          /**< \brief Input signal REQGTx_8  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   284      IfxEvadc_GatingSource_9,          /**< \brief Input signal REQGTx_9  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   285      IfxEvadc_GatingSource_10,         /**< \brief Input signal REQGTx_10  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   286      IfxEvadc_GatingSource_11,         /**< \brief Input signal REQGTx_11  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   287      IfxEvadc_GatingSource_12,         /**< \brief Input signal REQGTx_12  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   288      IfxEvadc_GatingSource_13,         /**< \brief Input signal REQGTx_13  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   289      IfxEvadc_GatingSource_14,         /**< \brief Input signal REQGTx_14  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   290      IfxEvadc_GatingSource_15          /**< \brief Input signal REQGTx_15  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   291  } IfxEvadc_GatingSource;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   292  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   293  /** \brief inputClass defined in MODULE_EVADC.G[x].CHCTR[y].B.ICLSEL(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   294   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   295  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   296  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   297      IfxEvadc_InputClasses_group0  = 0,  /**< \brief Use group class 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   298      IfxEvadc_InputClasses_group1  = 1,  /**< \brief Use group class 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   299      IfxEvadc_InputClasses_global0 = 2,  /**< \brief Use global class 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   300      IfxEvadc_InputClasses_global1 = 3   /**< \brief Use global class 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   301  } IfxEvadc_InputClasses;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   302  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   303  /** \brief ADC channel limit check defined in MODULE_EVADC.G[x].CHCTR[y].B.CHEVMODE(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   304   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   305  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   306  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   307      IfxEvadc_LimitCheck_noCheck            = 0,  /**< \brief Normal compare mode Event Never Fast Compare mode Event Never */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   308      IfxEvadc_LimitCheck_eventIfInArea      = 1,  /**< \brief Normal compare mode Event If result is inside the boundary band    Fast Compare mode Event If result switches to high (above comp. value) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   309      IfxEvadc_LimitCheck_eventIfOutsideArea = 2,  /**< \brief Normal compare mode Event If result is outside the boundary band   Fast Compare mode Event If result switches to low (below comp. value) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   310      IfxEvadc_LimitCheck_always             = 3   /**< \brief Normal compare mode Event Always   Fast Compare mode Event Always */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   311  } IfxEvadc_LimitCheck;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   312  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   313  /** \brief Access protection for Group registers defined in MODULE_EVADC.ACCPROT0.U
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   314   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   315  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   316  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   317      IfxEvadc_Protection_channelControl0         = 0,   /**< \brief Access control for GxCHCTR0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   318      IfxEvadc_Protection_channelControl1         = 1,   /**< \brief Access control for GxCHCTR1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   319      IfxEvadc_Protection_channelControl2         = 2,   /**< \brief Access control for GxCHCTR2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   320      IfxEvadc_Protection_channelControl3         = 3,   /**< \brief Access control for GxCHCTR3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   321      IfxEvadc_Protection_channelControl4         = 4,   /**< \brief Access control for GxCHCTR4 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   322      IfxEvadc_Protection_channelControl5         = 5,   /**< \brief Access control for GxCHCTR5 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   323      IfxEvadc_Protection_channelControl6         = 6,   /**< \brief Access control for GxCHCTR6 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   324      IfxEvadc_Protection_channelControl7         = 7,   /**< \brief Access control for GxCHCTR7 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   325      IfxEvadc_Protection_channelControl8         = 8,   /**< \brief Access control for GxCHCTR8 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   326      IfxEvadc_Protection_channelControl9         = 9,   /**< \brief Access control for GxCHCTR9 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   327      IfxEvadc_Protection_channelControl10        = 10,  /**< \brief Access control for GxCHCTR10 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   328      IfxEvadc_Protection_channelControl11        = 11,  /**< \brief Access control for GxCHCTR11 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   329      IfxEvadc_Protection_channelControl12        = 12,  /**< \brief Access control for GxCHCTR12 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   330      IfxEvadc_Protection_channelControl13        = 13,  /**< \brief Access control for GxCHCTR13 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   331      IfxEvadc_Protection_channelControl14        = 14,  /**< \brief Access control for GxCHCTR14 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   332      IfxEvadc_Protection_initGroup0              = 16,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   333      IfxEvadc_Protection_initGroup1              = 17,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   334      IfxEvadc_Protection_initGroup2              = 18,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   335      IfxEvadc_Protection_initGroup3              = 19,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   336      IfxEvadc_Protection_initGroup4              = 20,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   337      IfxEvadc_Protection_initGroup5              = 21,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   338      IfxEvadc_Protection_initGroup6              = 22,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   339      IfxEvadc_Protection_initGroup7              = 23,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   340      IfxEvadc_Protection_initGroup8              = 24,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   341      IfxEvadc_Protection_initGroup9              = 25,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   342      IfxEvadc_Protection_initGroup10             = 26,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   343      IfxEvadc_Protection_initGroup11             = 27,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   344      IfxEvadc_Protection_initGroup12             = 28,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   345      IfxEvadc_Protection_initGroup13             = 29,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   346      IfxEvadc_Protection_initGroup14             = 30,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   347      IfxEvadc_Protection_serviceGroup0           = 32,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   348      IfxEvadc_Protection_serviceGroup1           = 33,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   349      IfxEvadc_Protection_serviceGroup2           = 34,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   350      IfxEvadc_Protection_serviceGroup3           = 35,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   351      IfxEvadc_Protection_serviceGroup4           = 36,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   352      IfxEvadc_Protection_serviceGroup5           = 37,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   353      IfxEvadc_Protection_serviceGroup6           = 38,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   354      IfxEvadc_Protection_serviceGroup7           = 39,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   355      IfxEvadc_Protection_serviceGroup8           = 40,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   356      IfxEvadc_Protection_serviceGroup9           = 41,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   357      IfxEvadc_Protection_serviceGroup10          = 42,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   358      IfxEvadc_Protection_serviceGroup11          = 43,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   359      IfxEvadc_Protection_serviceGroup12          = 44,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   360      IfxEvadc_Protection_serviceGroup13          = 45,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   361      IfxEvadc_Protection_serviceGroup14          = 46,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   362      IfxEvadc_Protection_resultRegisterGroup0    = 48,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   363      IfxEvadc_Protection_resultRegisterGroup1    = 49,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   364      IfxEvadc_Protection_resultRegisterGroup2    = 50,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   365      IfxEvadc_Protection_resultRegisterGroup3    = 51,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   366      IfxEvadc_Protection_resultRegisterGroup4    = 52,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   367      IfxEvadc_Protection_resultRegisterGroup5    = 53,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   368      IfxEvadc_Protection_resultRegisterGroup6    = 54,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   369      IfxEvadc_Protection_resultRegisterGroup7    = 55,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   370      IfxEvadc_Protection_resultRegisterGroup8    = 56,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   371      IfxEvadc_Protection_resultRegisterGroup9    = 57,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   372      IfxEvadc_Protection_resultRegisterGroup10   = 58,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   373      IfxEvadc_Protection_resultRegisterGroup11   = 59,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   374      IfxEvadc_Protection_resultRegisterGroup12   = 60,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   375      IfxEvadc_Protection_resultRegisterGroup13   = 61,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   376      IfxEvadc_Protection_resultRegisterGroup14   = 62,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   377      IfxEvadc_Protection_initFastCompareChannel0 = 64,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   378                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   379      IfxEvadc_Protection_initFastCompareChannel1 = 65,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   380                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   381      IfxEvadc_Protection_initFastCompareChannel2 = 66,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   382                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   383      IfxEvadc_Protection_initFastCompareChannel3 = 67,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   384                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   385      IfxEvadc_Protection_initFastCompareChannel4 = 68,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   386                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   387      IfxEvadc_Protection_initFastCompareChannel5 = 69,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   388                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   389      IfxEvadc_Protection_initFastCompareChannel6 = 70,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   390                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   391      IfxEvadc_Protection_initFastCompareChannel7 = 71,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   392                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   393      IfxEvadc_Protection_globalConfig            = 80,  /**< \brief Access control for GLOBCFG */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   394      IfxEvadc_Protection_externalMultiplexer     = 81,  /**< \brief Access control for EMUXSEL, GxEMUXCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   395      IfxEvadc_Protection_testFunction            = 82   /**< \brief Access control for GLOBTF */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   396  } IfxEvadc_Protection;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   397  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   398  /** \brief Arbitration priority, Group x,defined in MODULE_EVADC.G[x].ARBPR.PRIOy(x=0,1,...,11;y=0,1,2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   399   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   400  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   401  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   402      IfxEvadc_RequestSlotPriority_lowest  = 0, /**< \brief Lowest priority */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   403      IfxEvadc_RequestSlotPriority_low     = 1, /**< \brief Lowpriority */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   404      IfxEvadc_RequestSlotPriority_high    = 2, /**< \brief High priority */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   405      IfxEvadc_RequestSlotPriority_highest = 3  /**< \brief Highest priority */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   406  } IfxEvadc_RequestSlotPriority;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   407  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   408  /** \brief Request source start mode defined in MODULE_EVADC.G[x].ARBPR.CSMy(x=0,1,...,11;y=0,1,2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   409   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   410  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   411  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   412      IfxEvadc_RequestSlotStartMode_waitForStart       = 0, /**< \brief Wait for start */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   413      IfxEvadc_RequestSlotStartMode_cancelInjectRepeat = 1  /**< \brief Cancel-Inject-Repeat */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   414  } IfxEvadc_RequestSlotStartMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   415  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   416  /** \brief Request sources
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   417   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   418  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   419  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   420      IfxEvadc_RequestSource_queue0 = 0,  /**< \brief 8 stage Queue0 request */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   421      IfxEvadc_RequestSource_queue1 = 1,  /**< \brief 8 stage Queue1 request */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   422      IfxEvadc_RequestSource_queue2 = 2   /**< \brief 8 stage Queue2 request */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   423  } IfxEvadc_RequestSource;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   424  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   425  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   426   * Definition in Ifx_EVADC.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   427   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   428  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   429  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   430      IfxEvadc_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   431      IfxEvadc_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   432  } IfxEvadc_SleepMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   433  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   434  /** \brief Service Node defined in MODULE_EVADC.G[x].SRACT.U(x= 0,1,..,11)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   435   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   436  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   437  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   438      IfxEvadc_SrcNr_group0  = 0,  /**< \brief service request line 0 of group */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   439      IfxEvadc_SrcNr_group1  = 1,  /**< \brief service request line 1 of group */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   440      IfxEvadc_SrcNr_group2  = 2,  /**< \brief service request line 2 of group */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   441      IfxEvadc_SrcNr_group3  = 3,  /**< \brief service request line 3 of group */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   442      IfxEvadc_SrcNr_shared0 = 4,  /**< \brief Select shared service request line 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   443      IfxEvadc_SrcNr_shared1 = 5,  /**< \brief Select shared service request line 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   444      IfxEvadc_SrcNr_shared2 = 6,  /**< \brief Select shared service request line 2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   445      IfxEvadc_SrcNr_shared3 = 7   /**< \brief Select shared service request line 3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   446  } IfxEvadc_SrcNr;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   447  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   448  /** \brief API return values defined in
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   449   * MODULE_EVADC.G[x].QSR0.U,MODULE_EVADC.G[x].QSR1.U,MODULE_EVADC.G[x].QSR2.U(x=0,1,...,11)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   450   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   451  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   452  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   453      IfxEvadc_Status_noError              = 0, /**< \brief No error during api execution */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   454      IfxEvadc_Status_notInitialised       = 1, /**< \brief Appropriate initialisation not done */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   455      IfxEvadc_Status_invalidGroup         = 2, /**< \brief Invalid group number */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   456      IfxEvadc_Status_invalidChannel       = 3, /**< \brief Invalid channel number */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   457      IfxEvadc_Status_queueFull            = 4, /**< \brief Queue is full */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   458      IfxEvadc_Status_noAccess             = 5, /**< \brief Access to the group/channel is disabled */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   459      IfxEvadc_Status_channelsStillPending = 6  /**< \brief Conversion for some of the channels are still pending */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   460  } IfxEvadc_Status;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   461  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   462  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   463   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   464  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   465  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   466      IfxEvadc_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   467      IfxEvadc_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   468      IfxEvadc_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   469  } IfxEvadc_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   470  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   471  /** \brief trigger definition defined in MODULE_EVADC.G[x].QCTRL0.XTMODE(x=0,1,..,11)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   472   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   473  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   474  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   475      IfxEvadc_TriggerMode_noExternalTrigger = 0,  /**< \brief No external trigger */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   476      IfxEvadc_TriggerMode_uponFallingEdge   = 1,  /**< \brief Trigger event upon a falling edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   477      IfxEvadc_TriggerMode_uponRisingEdge    = 2,  /**< \brief Trigger event upon a rising edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   478      IfxEvadc_TriggerMode_uponAnyEdge       = 3   /**< \brief Trigger event upon any edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   479  } IfxEvadc_TriggerMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   480  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   481  /** \brief Trigger request source defined in MODULE_EVADC.G[x].QCTRLy.XTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   482   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   483  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   484  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   485      IfxEvadc_TriggerSource_0 = 0,      /**< \brief Input signal REQTRx_0  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   486      IfxEvadc_TriggerSource_1,          /**< \brief Input signal REQTRx_1  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   487      IfxEvadc_TriggerSource_2,          /**< \brief Input signal REQTRx_2  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   488      IfxEvadc_TriggerSource_3,          /**< \brief Input signal REQTRx_3  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   489      IfxEvadc_TriggerSource_4,          /**< \brief Input signal REQTRx_4  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   490      IfxEvadc_TriggerSource_5,          /**< \brief Input signal REQTRx_5  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   491      IfxEvadc_TriggerSource_6,          /**< \brief Input signal REQTRx_6  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   492      IfxEvadc_TriggerSource_7,          /**< \brief Input signal REQTRx_7  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   493      IfxEvadc_TriggerSource_8,          /**< \brief Input signal REQTRx_8  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   494      IfxEvadc_TriggerSource_9,          /**< \brief Input signal REQTRx_9  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   495      IfxEvadc_TriggerSource_10,         /**< \brief Input signal REQTRx_10  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   496      IfxEvadc_TriggerSource_11,         /**< \brief Input signal REQTRx_11  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   497      IfxEvadc_TriggerSource_12,         /**< \brief Input signal REQTRx_12  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   498      IfxEvadc_TriggerSource_13,         /**< \brief Input signal REQTRx_13  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   499      IfxEvadc_TriggerSource_14,         /**< \brief Input signal REQTRx_14  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   500      IfxEvadc_TriggerSource_15          /**< \brief Input signal REQTRx_15  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   501  } IfxEvadc_TriggerSource;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   502  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   503  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   504  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   505  /** \addtogroup IfxLld_Evadc_Std_FastCompare
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   506   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   507  /** \brief Selects the behaviour of BoundaryFlag in FCBFL.B.BFA
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   508   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   509  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   510  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   511      IfxEvadc_BoundaryFlagActivationMode_0 = 0,  /**< \brief Set boundary flag BFL if result FCR = 1 (input above the defined
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   512                                                   * band or compare value), clear if FCR = 0 (input below) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   513      IfxEvadc_BoundaryFlagActivationMode_1 = 1   /**< \brief Set boundary flag BFL if result FCR = 0 (input below the defined
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   514                                                   * band or compare value), clear if FCR = 1 (input above) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   515  } IfxEvadc_BoundaryFlagActivationMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   516  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   517  /** \brief Controls in in FCBFL.B.BFI options for whether to use Boundary Flag(FCM.B.BFL) directly or in a inverted format.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   518   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   519  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   520  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   521      IfxEvadc_BoundaryFlagInversionControl_direct = 0,  /**< \brief Use BFL directly */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   522      IfxEvadc_BoundaryFlagInversionControl_invert = 1   /**< \brief Use inverted BFL */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   523  } IfxEvadc_BoundaryFlagInversionControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   524  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   525  /** \brief Options for FCBFL.B.BFLNP to select Boundary Flag Node Pointer
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   526   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   527  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   528  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   529      IfxEvadc_BoundaryFlagNodePointer_commonBoundaryFlagOutput0 = 0,  /**< \brief Select common boundary flag output 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   530      IfxEvadc_BoundaryFlagNodePointer_commonBoundaryFlagOutput1 = 1,  /**< \brief Select common boundary flag output 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   531      IfxEvadc_BoundaryFlagNodePointer_commonBoundaryFlagOutput2 = 2,  /**< \brief Select common boundary flag output 2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   532      IfxEvadc_BoundaryFlagNodePointer_commonBoundaryFlagOutput3 = 3,  /**< \brief Select common boundary flag output 3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   533      IfxEvadc_BoundaryFlagNodePointer_sharedServiceRequestLine0 = 4,  /**< \brief Select shared service request line 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   534      IfxEvadc_BoundaryFlagNodePointer_sharedServiceRequestLine1 = 5,  /**< \brief Select shared service request line 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   535      IfxEvadc_BoundaryFlagNodePointer_sharedServiceRequestLine2 = 6,  /**< \brief Select shared service request line 2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   536      IfxEvadc_BoundaryFlagNodePointer_sharedServiceRequestLine3 = 7,  /**< \brief Select shared service request line 3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   537      IfxEvadc_BoundaryFlagNodePointer_disabled                  = 16  /**< \brief Disabled, no common output signal */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   538  } IfxEvadc_BoundaryFlagNodePointer;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   539  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   540  /** \brief Options for FCBFL.B.BFS to modify the Boundary Flag(FCM.B.BFL)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   541   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   542  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   543  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   544      IfxEvadc_BoundaryFlagSwControl_noAction = 0,  /**< \brief No Action */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   545      IfxEvadc_BoundaryFlagSwControl_clear    = 1,  /**< \brief Clear BFL */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   546      IfxEvadc_BoundaryFlagSwControl_set      = 2,  /**< \brief Set BFL */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   547      IfxEvadc_BoundaryFlagSwControl_toggle   = 3   /**< \brief Toggle BFL */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   548  } IfxEvadc_BoundaryFlagSwControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   549  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   550  /** \brief Channel Event Mode for configuring generation of events for Fast Compare channels in FCCTRL.B.CHEVMODE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   551   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   552  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   553  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   554      IfxEvadc_ChannelEventMode_never                    = 0, /**< \brief Never generate a service request */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   555      IfxEvadc_ChannelEventMode_aboveCompareValue        = 1, /**< \brief Generate a service request in case the result is above compare value */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   556      IfxEvadc_ChannelEventMode_belowCompareValue        = 2, /**< \brief Generate a service request in case the result is below compare value */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   557      IfxEvadc_ChannelEventMode_aboveOrBelowCompareValue = 3  /**< \brief Generate a service request in case the result switches to either level(above or below the compare value) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   558  } IfxEvadc_ChannelEventMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   559  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   560  /** \brief Defines the frequency of the analog converter clock f_ADCI (base clock for
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   561   * conversion steps), derived from the peripheral clock: f_ADCI = fADC / CP.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   562   * To be filled in FCCTRL.B.DIVA for Fast Compare channels & ANCFG.B.DIVA for other groups
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   563   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   564  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   565  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   566      IfxEvadc_ClockDividerFactor_maxFrequency = 0,  /**< \brief Max. frequency */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   567      IfxEvadc_ClockDividerFactor_2            = 1,  /**< \brief Frequency Divided by 2  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   568      IfxEvadc_ClockDividerFactor_3,                 /**< \brief Frequency Divided by 3  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   569      IfxEvadc_ClockDividerFactor_4,                 /**< \brief Frequency Divided by 4  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   570      IfxEvadc_ClockDividerFactor_5,                 /**< \brief Frequency Divided by 5  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   571      IfxEvadc_ClockDividerFactor_6,                 /**< \brief Frequency Divided by 6  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   572      IfxEvadc_ClockDividerFactor_7,                 /**< \brief Frequency Divided by 7  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   573      IfxEvadc_ClockDividerFactor_8,                 /**< \brief Frequency Divided by 8  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   574      IfxEvadc_ClockDividerFactor_9,                 /**< \brief Frequency Divided by 9  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   575      IfxEvadc_ClockDividerFactor_10,                /**< \brief Frequency Divided by 10  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   576      IfxEvadc_ClockDividerFactor_11,                /**< \brief Frequency Divided by 11  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   577      IfxEvadc_ClockDividerFactor_12,                /**< \brief Frequency Divided by 12  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   578      IfxEvadc_ClockDividerFactor_13,                /**< \brief Frequency Divided by 13  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   579      IfxEvadc_ClockDividerFactor_14,                /**< \brief Frequency Divided by 14  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   580      IfxEvadc_ClockDividerFactor_15,                /**< \brief Frequency Divided by 15  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   581      IfxEvadc_ClockDividerFactor_16,                /**< \brief Frequency Divided by 16  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   582      IfxEvadc_ClockDividerFactor_17,                /**< \brief Frequency Divided by 17  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   583      IfxEvadc_ClockDividerFactor_18,                /**< \brief Frequency Divided by 18  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   584      IfxEvadc_ClockDividerFactor_19,                /**< \brief Frequency Divided by 19  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   585      IfxEvadc_ClockDividerFactor_20,                /**< \brief Frequency Divided by 20  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   586      IfxEvadc_ClockDividerFactor_21,                /**< \brief Frequency Divided by 21  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   587      IfxEvadc_ClockDividerFactor_22,                /**< \brief Frequency Divided by 22  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   588      IfxEvadc_ClockDividerFactor_23,                /**< \brief Frequency Divided by 23  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   589      IfxEvadc_ClockDividerFactor_24,                /**< \brief Frequency Divided by 24  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   590      IfxEvadc_ClockDividerFactor_25,                /**< \brief Frequency Divided by 25  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   591      IfxEvadc_ClockDividerFactor_26,                /**< \brief Frequency Divided by 26  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   592      IfxEvadc_ClockDividerFactor_27,                /**< \brief Frequency Divided by 27  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   593      IfxEvadc_ClockDividerFactor_28,                /**< \brief Frequency Divided by 28  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   594      IfxEvadc_ClockDividerFactor_29,                /**< \brief Frequency Divided by 29  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   595      IfxEvadc_ClockDividerFactor_30,                /**< \brief Frequency Divided by 30  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   596      IfxEvadc_ClockDividerFactor_31,                /**< \brief Frequency Divided by 31  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   597      IfxEvadc_ClockDividerFactor_32                 /**< \brief Frequency Divided by 32  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   598  } IfxEvadc_ClockDividerFactor;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   599  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   600  /** \brief External Trigger Polarity to be set in FCCTRL.B.XTPOL
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   601   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   602  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   603  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   604      IfxEvadc_ExternalTriggerPolarity_direct   = 0, /**< \brief Use selected input signal directly */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   605      IfxEvadc_ExternalTriggerPolarity_inverted = 1  /**< \brief Invert selected input signal */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   606  } IfxEvadc_ExternalTriggerPolarity;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   607  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   608  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   609  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   610      IfxEvadc_FastCompareAnalogClockSynchronizationDelay_0 = 0,  /**< \brief No delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   611      IfxEvadc_FastCompareAnalogClockSynchronizationDelay_1 = 1,  /**< \brief 1 clock cycle delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   612      IfxEvadc_FastCompareAnalogClockSynchronizationDelay_2 = 2,  /**< \brief 2 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   613      IfxEvadc_FastCompareAnalogClockSynchronizationDelay_3 = 3   /**< \brief 3 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   614  } IfxEvadc_FastCompareAnalogClockSynchronizationDelay;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   615  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   616  /** \brief Settings for Analog Coverter Controller to be done in FCM.B.ANON
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   617   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   618  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   619  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   620      IfxEvadc_FastCompareAnalogConverterControl_off    = 0, /**< \brief Analog converter off */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   621      IfxEvadc_FastCompareAnalogConverterControl_normal = 1  /**< \brief Normal operation */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   622  } IfxEvadc_FastCompareAnalogConverterControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   623  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   624  /** \brief Defines the source of the value(s) in bitfield FCM.B.FCREF
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   625   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   626   * Note: Software can only write to bitfield FCM.B.FCREF, while AUE = 00B.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   627   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   628  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   629  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   630      IfxEvadc_FastCompareAutomaticUpdate_sw             = 0,  /**< \brief No automatic update.Value(s) written by software. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   631      IfxEvadc_FastCompareAutomaticUpdate_alternateValue = 1,  /**< \brief While gate is active (high), value is copied from bitfield FCM.B.FCRCOMPA and while gate is inactive (low), value is copied from bitfield FCM.B.FCRCOMPB */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   632      IfxEvadc_FastCompareAutomaticUpdate_rampCounter    = 2,  /**< \brief Value(s) copied from ramp counter on ramp start or counter
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   633                                                                * update. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   634      IfxEvadc_FastCompareAutomaticUpdate_analogSource   = 3   /**< \brief Value(s) written by the associated converter */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   635  } IfxEvadc_FastCompareAutomaticUpdate;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   636  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   637  /** \brief Defines the basic run conditions of the fast compare channel in FCM.B.RUNCOMP
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   638   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   639  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   640  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   641      IfxEvadc_FastCompareRunControl_stop      = 0, /**< \brief Stop, no operation */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   642      IfxEvadc_FastCompareRunControl_alwaysRun = 1  /**< \brief Always run */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   643  } IfxEvadc_FastCompareRunControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   644  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   645  /** \brief Criteria/mode settings for service request generation in FCM.B.SRG
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   646   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   647  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   648  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   649      IfxEvadc_FastCompareServiceRequestGeneration_off       = 0, /**< \brief No service requests are generated */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   650      IfxEvadc_FastCompareServiceRequestGeneration_rampEnd   = 1, /**< \brief Issue service request when the ramp counter stops */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   651      IfxEvadc_FastCompareServiceRequestGeneration_newValue  = 2, /**< \brief Issue service request when a value is written to FCREF */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   652      IfxEvadc_FastCompareServiceRequestGeneration_newResult = 3  /**< \brief Issue service request when a new result available */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   653  } IfxEvadc_FastCompareServiceRequestGeneration;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   654  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   655  /** \brief Gate Operating Mode to be filled in FCCTRL.B.GTMODE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   656   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   657  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   658  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   659      IfxEvadc_GateOperatingMode_noGateFunction     = 0,  /**< \brief No gate function */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   660      IfxEvadc_GateOperatingMode_alternateValueMode = 1,  /**< \brief Alternate value mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   661      IfxEvadc_GateOperatingMode_lockBoundaryFlag   = 2   /**< \brief Lock boundary flag */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   662  } IfxEvadc_GateOperatingMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   663  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   664  /** \brief Ramp direction setting in FCM.B.FCRDIR
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   665   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   666  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   667  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   668      IfxEvadc_RampDirection_down = 0,  /**< \brief Decrement ramp counter and stop when counter <= FCRCOMPB */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   669      IfxEvadc_RampDirection_up   = 1   /**< \brief Increment ramp counter and stop when counter >= FCRCOMPB */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   670  } IfxEvadc_RampDirection;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   671  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   672  /** \brief Defines the run conditions for the ramp generation in FCM.B.RUNRAMP
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   673   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   674  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   675  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   676      IfxEvadc_RampRunControl_stop = 0,  /**< \brief Stop, no operation */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   677      IfxEvadc_RampRunControl_1    = 1,  /**< \brief Start immediately when GxFCRAMP0/1 is written */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   678      IfxEvadc_RampRunControl_2    = 2,  /**< \brief Start upon the selected trigger event of signal REQTRx */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   679      IfxEvadc_RampRunControl_3    = 3   /**< \brief Start immediately when GxFCRAMP0/1 is written and
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   680                                          * stop upon the selected trigger event of signal REQTRx */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   681  } IfxEvadc_RampRunControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   682  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   683  /** \brief Sample timing sync settings for FCM.B.SSE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   684   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   685  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   686  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   687      IfxEvadc_SampleSynchronization_off                     = 0, /**< \brief No synchronization */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   688      IfxEvadc_SampleSynchronization_synchronizeSampleTiming = 1  /**< \brief Sample timing is synchronized.This is recommended for operation of several ADCs. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   689  } IfxEvadc_SampleSynchronization;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   690  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   691  /** \brief Trigger operating mode in Fast Compare channels, to be entered in FCCTRL.B.XTMODE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   692   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   693  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   694  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   695      IfxEvadc_TriggerOperatingMode_noExternalTrigger = 0,  /**< \brief No external trigger */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   696      IfxEvadc_TriggerOperatingMode_fallingEdge       = 1,  /**< \brief Trigger event upon a falling edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   697      IfxEvadc_TriggerOperatingMode_risingEdge        = 2,  /**< \brief Trigger event upon a rising edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   698      IfxEvadc_TriggerOperatingMode_anyEdge           = 3   /**< \brief Trigger event upon any edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   699  } IfxEvadc_TriggerOperatingMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   700  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   701  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   702  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   703  /** \brief Defines the way the analog clock is generated.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   704   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   705  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   706  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   707      IfxEvadc_AnalogClockGenerationMode_synchronized   = 0, /**< \brief Synchronized mode: Initial clock pulse is defined by the phase synchronizer */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   708      IfxEvadc_AnalogClockGenerationMode_unsynchronized = 1  /**< \brief Unsynchronized mode: The analog clock is generated independently. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   709  } IfxEvadc_AnalogClockGenerationMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   710  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   711  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   712  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   713      IfxEvadc_AnalogClockSynchronizationDelay_0 = 0,  /**< \brief No Delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   714      IfxEvadc_AnalogClockSynchronizationDelay_1 = 1,  /**< \brief 1 clock cycle delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   715      IfxEvadc_AnalogClockSynchronizationDelay_2 = 2,  /**< \brief 2 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   716      IfxEvadc_AnalogClockSynchronizationDelay_3 = 3,  /**< \brief 3 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   717      IfxEvadc_AnalogClockSynchronizationDelay_4 = 4,  /**< \brief 4 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   718      IfxEvadc_AnalogClockSynchronizationDelay_5 = 5,  /**< \brief 5 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   719      IfxEvadc_AnalogClockSynchronizationDelay_6 = 6,  /**< \brief 6 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   720      IfxEvadc_AnalogClockSynchronizationDelay_7 = 7   /**< \brief 7 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   721  } IfxEvadc_AnalogClockSynchronizationDelay;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   722  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   723  /** \brief Analog Input Precharge Control for Standard Conversions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   724   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   725  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   726  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   727      IfxEvadc_AnalogInputPrechargeControl_noPrecharge = 0,  /**< \brief No Precharge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   728      IfxEvadc_AnalogInputPrechargeControl_8Cycles     = 1,  /**< \brief Precharge for 8 clock cycles */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   729      IfxEvadc_AnalogInputPrechargeControl_16Cycles    = 2,  /**< \brief Precharge for 16 clock cycles */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   730      IfxEvadc_AnalogInputPrechargeControl_32cycles    = 3   /**< \brief Precharge for 32 clock cycles */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   731  } IfxEvadc_AnalogInputPrechargeControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   732  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   733  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   734  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   735      IfxEvadc_ArbitrationMode_0 = 0,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   736      IfxEvadc_ArbitrationMode_1 = 1
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   737  } IfxEvadc_ArbitrationMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   738  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   739  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   740  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   741      IfxEvadc_CalibrationSampleTimeControl_2 = 0,  /**< \brief 2*t_ADCI */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   742      IfxEvadc_CalibrationSampleTimeControl_4 = 1,  /**< \brief 4*t_ADCI */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   743      IfxEvadc_CalibrationSampleTimeControl_6 = 2,  /**< \brief 6*t_ADCI */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   744      IfxEvadc_CalibrationSampleTimeControl_8 = 3   /**< \brief 8*t_ADCI */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   745  } IfxEvadc_CalibrationSampleTimeControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   746  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   747  /** \brief Conversion Mode for standard Conversion
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   748   *  channel precision defined in MODULE_EVADC.G[x].CHCTR[y].B.ICLASS[y].B.CMS(x=0,1,...,11;y=0,1)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   749   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   750  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   751  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   752      IfxEvadc_ChannelNoiseReduction_standardConversion = 0,  /**< \brief Standard Conversions mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   753      IfxEvadc_ChannelNoiseReduction_level1             = 1,  /**< \brief Noise reduction conversion level 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   754      IfxEvadc_ChannelNoiseReduction_level2             = 2,  /**< \brief Noise reduction conversion level 2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   755      IfxEvadc_ChannelNoiseReduction_level3             = 3   /**< \brief Noise reduction conversion level 3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   756  } IfxEvadc_ChannelNoiseReduction;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   757  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   758  /** \brief Conversion Mode for EMUX Conversions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   759   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   760  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   761  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   762      IfxEvadc_ChannelNoiseReductionEMUX_standardConversion = 0,  /**< \brief Standard conversion */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   763      IfxEvadc_ChannelNoiseReductionEMUX_level1             = 1,  /**< \brief Noise reduction conversion level 1, 1 additional conversion step */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   764      IfxEvadc_ChannelNoiseReductionEMUX_level2             = 2,  /**< \brief Noise reduction conversion level 2, 3 additional conversion steps */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   765      IfxEvadc_ChannelNoiseReductionEMUX_level3             = 3   /**< \brief Noise reduction conversion level 3, 7 additional conversion steps */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   766  } IfxEvadc_ChannelNoiseReductionEMUX;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   767  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   768  /** \brief Data Modification Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   769   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   770  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   771  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   772      IfxEvadc_DataModificationMode_standardDataReduction = 0,  /**< \brief Standard Data Reduction */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   773      IfxEvadc_DataModificationMode_resultFilteringMode   = 1,  /**< \brief Result Filtering Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   774      IfxEvadc_DataModificationMode_differenceMode        = 2   /**< \brief Difference Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   775  } IfxEvadc_DataModificationMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   776  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   777  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   778  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   779      IfxEvadc_DataReductionControlMode_0  = 0,   /**< \brief If DMM=0b00, Data reduction disabled,if DMM=0b01, FIR:a=2,b=1,c=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   780      IfxEvadc_DataReductionControlMode_1  = 1,   /**< \brief If DMM=0b00, Accumulate 2 result values,if DMM=0b01, FIR:a=1,b=2,c=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   781      IfxEvadc_DataReductionControlMode_2  = 2,   /**< \brief If DMM=0b00, Accumulate 3 result values,if DMM=0b01, FIR:a=2,b=0,c=1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   782      IfxEvadc_DataReductionControlMode_3  = 3,   /**< \brief If DMM=0b00, Accumulate 4 result values,if DMM=0b01, FIR:a=1,b=1,c=1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   783      IfxEvadc_DataReductionControlMode_4  = 4,   /**< \brief If DMM=0b00, Accumulate 5 result values,if DMM=0b01, FIR:a=1,b=0,c=2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   784      IfxEvadc_DataReductionControlMode_5  = 5,   /**< \brief If DMM=0b00, Accumulate 6 result values,if DMM=0b01, FIR:a=3,b=1,c=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   785      IfxEvadc_DataReductionControlMode_6  = 6,   /**< \brief If DMM=0b00, Accumulate 7 result values,if DMM=0b01, FIR:a=2,b=2,c=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   786      IfxEvadc_DataReductionControlMode_7  = 7,   /**< \brief If DMM=0b00, Accumulate 8 result values,if DMM=0b01, FIR:a=1,b=3,c=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   787      IfxEvadc_DataReductionControlMode_8  = 8,   /**< \brief If DMM=0b00, Accumulate 9 result values,if DMM=0b01, FIR:a=3,b=0,c=1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   788      IfxEvadc_DataReductionControlMode_9  = 9,   /**< \brief If DMM=0b00, Accumulate 10 result values,if DMM=0b01, FIR:a=2,b=1,c=1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   789      IfxEvadc_DataReductionControlMode_10 = 10,  /**< \brief If DMM=0b00, Accumulate 11 result values,if DMM=0b01, FIR:a=1,b=2,c=1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   790      IfxEvadc_DataReductionControlMode_11 = 11,  /**< \brief If DMM=0b00, Accumulate 12 result values,if DMM=0b01, FIR:a=2,b=0,c=2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   791      IfxEvadc_DataReductionControlMode_12 = 12,  /**< \brief If DMM=0b00, Accumulate 13 result values,if DMM=0b01, FIR:a=1,b=1,c=2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   792      IfxEvadc_DataReductionControlMode_13 = 13,  /**< \brief If DMM=0b00, Accumulate 14 result values,if DMM=0b01, FIR:a=1,b=0,c=3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   793      IfxEvadc_DataReductionControlMode_14 = 14,  /**< \brief If DMM=0b00, Accumulate 15 result values,if DMM=0b01, IIR:a=2,b=2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   794      IfxEvadc_DataReductionControlMode_15 = 15   /**< \brief If DMM=0b00, Accumulate 16 result values,if DMM=0b01, IIR:a=3,b=4 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   795  } IfxEvadc_DataReductionControlMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   796  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   797  /** \brief Contains options for Idle Precharge levels
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   798   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   799  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   800  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   801      IfxEvadc_IdlePrecharge_currentLevel = 0,  /**< \brief The sampling capacitor keeps the current charge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   802      IfxEvadc_IdlePrecharge_referenceBy2 = 1   /**< \brief ThSampling capacitor is precharged to approx. half the reference when idle */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   803  } IfxEvadc_IdlePrecharge;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   804  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   805  /** \brief Selects the MSB conversion time(in terms of t_ADC)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   806   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   807  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   808  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   809      IfxEvadc_MsbConversionTime_singleClockCycle = 0,  /**< \brief 1 clock cycle for the MSB (standard) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   810      IfxEvadc_MsbConversionTime_doubleClockCycle = 1   /**< \brief 2 clock cycle for the MSB */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   811  } IfxEvadc_MsbConversionTime;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   812  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   813  /** \brief Reference Precharge Control
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   814   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   815  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   816  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   817      IfxEvadc_ReferencePrechargeControl_singleClockPhase  = 0, /**< \brief Precharge the reference input for 1 clock phase */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   818      IfxEvadc_ReferencePrechargeControl_singleClockPeriod = 1  /**< \brief Precharge the reference input for 1 clock period */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   819  } IfxEvadc_ReferencePrechargeControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   820  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   821  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   822  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   823      IfxEvadc_SpreadEarlySamplePointEMUXConversionsMode_nominal = 0,  /**< \brief Nominal sample timing */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   824      IfxEvadc_SpreadEarlySamplePointEMUXConversionsMode_spread  = 1   /**< \brief Spread sample timing, end of sample phase is varied */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   825  } IfxEvadc_SpreadEarlySamplePointEMUXConversionsMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   826  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   827  /** \brief Spread Early Sample Point for Standard Conversions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   828   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   829  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   830  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   831      IfxEvadc_SpreadEarlySamplePointStandardConversionsMode_nominal = 0,  /**< \brief Nominal sample timing */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   832      IfxEvadc_SpreadEarlySamplePointStandardConversionsMode_spread  = 1   /**< \brief Spread sample timing, end of sample phase is varied */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   833  } IfxEvadc_SpreadEarlySamplePointStandardConversionsMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   834  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   835  /** \brief The 0-1 transition of bit SUCAL initiates the start-up calibrationphase of
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   836   * all analog converters (except for the fast compare channels).
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   837   * Note: The start-up calibration will abort any running conversion
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   838   * and cannot be stopped before it is complete.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   839   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   840  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   841  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   842      IfxEvadc_StartupCalibration_noAction = 0,  /**< \brief No action */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   843      IfxEvadc_StartupCalibration_initiate = 1   /**< \brief Initiate the start-up calibration phase
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   844                                                  * (indication in bit GxARBCFG.CAL) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   845  } IfxEvadc_StartupCalibration;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   846  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   847  /** \brief Adjusts the analog circuitry to the supply voltage used in the application
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   848   * system. Make sure to keep SUPLEV = 0b00 or 0b01 in the case of a 5 V supply.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   849   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   850  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   851  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   852      IfxEvadc_SupplyVoltageLevelControl_automaticControl = 0,  /**< \brief Automatic control: voltage range is controlled by the power supply */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   853      IfxEvadc_SupplyVoltageLevelControl_upperVoltage     = 1,  /**< \brief Upper voltage range: assume a 5 V power supply is connected */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   854      IfxEvadc_SupplyVoltageLevelControl_lowerVoltage     = 2   /**< \brief Lower voltage range: assume a 3.3 V power supply is connected */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   855  } IfxEvadc_SupplyVoltageLevelControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   856  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   857  /** \brief Wait-for-Read Mode Enable
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   858   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   859  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   860  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   861      IfxEvadc_WaitForRead_overwriteMode = 0,  /**< \brief Overwrite Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   862      IfxEvadc_WaitForRead_enabled       = 1   /**< \brief Wait-for-read mode enabled for this register */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   863  } IfxEvadc_WaitForRead;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   864  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   865  /** \addtogroup IfxLld_Evadc_Std_Global
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   866   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   867  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   868  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   869  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   870  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   871  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   872  /** \brief access function to enable/disable  wait for read mode for result registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   873   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   874   * \param resultIdx result register index
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   875   * \param enabled wait for read mode enabled/disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   876   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   877   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   878  IFX_INLINE void IfxEvadc_configureWaitForReadMode(Ifx_EVADC_G *group, uint32 resultIdx, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   879  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   880  /** \brief access function to enable/disable  wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   881   * \param evadc pointer to the EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   882   * \param enabled wait for read mode enabled/disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   883   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   884   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   885  IFX_INLINE void IfxEvadc_configureWaitForReadModeForGlobalResultRegister(Ifx_EVADC *evadc, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   886  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   887  /** \brief get the ADC Module  noise reduction level
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   888   * \param evadc pointer to EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   889   * \param inputClassNum Adc Module input Class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   890   * \return Adc input class noise reduction level
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   891   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   892  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getGlobalConversionMode(Ifx_EVADC *evadc, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   893  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   894  /** \brief return conversion result stored in the Global result Register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   895   * \param evadc pointer to the EVADC module
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   896   * \return global result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   897   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   898   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   899   * Ifx_EVADC* evadc = &MODULE_EVADC; // module pointer
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   900   * IfxEvadc_GroupId groupId = IfxEvadc_GroupId0; // for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   901   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   902   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   903   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   904   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   905   * IfxEvadc_configureWaitForReadModeForGlobalResultRegister(evadc, TRUE);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   906   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   907   * // enable all arbiter request sources
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   908   * adcGroupConfig.arbiter.requestSlotQueue0Enabled           = TRUE; // enable Queue0 mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   909   * // enable all gates in "always" mode (no edge detection)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   910   * adcGroupConfig.queueRequest[0].triggerConfig.gatingMode = IfxEvadc_GatingMode_always;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   911   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   912   * // Add channel to queue with refill enabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   913   *  IfxEvadc_Adc_addToQueue(&adcChannel, IFXEVADC_QUEUE_REFILL, IfxEvadc_RequestSource_queue0);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   914   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   915   *  // start the Queue
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   916   *  IfxEvadc_Adc_startQueue(&adcGroup, IfxEvadc_RequestSource_queue0);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   917   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   918   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   919   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   920   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   921   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   922   * Ifx_EVADC_GLOB.RES result;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   923   * result = IfxVadc_getGlobalResult (evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   924   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   925   * \endcode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   926   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   927   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   928  IFX_INLINE Ifx_EVADC_GLOB_RES IfxEvadc_getGlobalResult(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   929  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   930  /** \brief Get Sample Time in sec
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   931   * \param evadc Pointer to EVADC Module
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   932   * \param inputClassNum ADC Input Class Number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   933   * \param analogFrequency ADC module analog frequency in Hz
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   934   * \return ADC input class channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   935   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   936  IFX_INLINE float32 IfxEvadc_getGlobalSampleTime(Ifx_EVADC *evadc, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   937  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   938  /** \brief Get conversion result (Function does not care about the alignment)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   939   * value = raw * gain + offset.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   940   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   941   * \param resultIdx result register index
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   942   * \return scaled Conversion result
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   943   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   944   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   945   * Ifx_EVADC_G* group = &MODULE_EVADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   946   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   947   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   948   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   949   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   950   * IfxEvadc_configureWaitForReadMode(group,IfxEvadc_ChannelResult0, TRUE);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   951   * IfxEvadc_configureWaitForReadMode(group,IfxEvadc_ChannelResult1, TRUE);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   952   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   953   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   954   * // Add channel to queue with refill enabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   955   *  IfxEvadc_Adc_addToQueue(&adcChannel, IfxEvadc_RequestSource_queue0, IFXEVADC_QUEUE_REFILL);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   956   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   957   * // start the Queue
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   958   *  IfxEvadc_Adc_startQueue(&adcGroup, IfxEvadc_RequestSource_queue0);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   959   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   960   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   961   * // wait for conversion to finish
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   962   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   963   * // fetch the result of conversion from result register 0 for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   964   * Ifx_EVADC_G_RES result;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   965   * result = IfxEvadc_getResult(group, IfxEvadc_ChannelResult0);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   966   * \endcode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   967   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   968   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   969  IFX_INLINE Ifx_EVADC_G_RES IfxEvadc_getResult(Ifx_EVADC_G *group, uint32 resultIdx);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   970  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   971  /** \brief Sets the sample time in sec of ADC global class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   972   * \param evadc pointer to EVADC module registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   973   * \param groupInputClassNum group input class  number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   974   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   975   * \param sampleTime the requested sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   976   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   977   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   978  IFX_INLINE void IfxEvadc_setGlobalSampleTime(Ifx_EVADC *evadc, uint8 groupInputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   979  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   980  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   981  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   982  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   983  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   984  /** \brief Get conversion result (Function does not care about the alignment)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   985   * value = raw * gain + offset.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   986   * \param evadc EVADC module pointer
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   987   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   988   * \param channel channel Id
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   989   * \param sourceType type of request source
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   990   * \return scaled Conversion result
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   991   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   992   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   993   * Ifx_EVADC evadc;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   994   * evadc.evadc = &MODULE_EVADC;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   995   * Ifx_EVADC_G* group = &MODULE_EVADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   996   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   997   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   998   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   999   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1000   * IfxEvadc_configureWaitForReadMode(group,IfxEvadc_ChannelResult0, TRUE);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1001   * IfxEvadc_configureWaitForReadMode(group,IfxEvadc_ChannelResult1, TRUE);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1002   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1003   * // Add channel to queue with refill enabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1004   *  IfxEvadc_Adc_addToQueue(&adcChannel, IfxEvadc_RequestSource_queue0, IFXEVADC_QUEUE_REFILL);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1005   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1006   * // start the Queue
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1007   *  IfxEvadc_Adc_startQueue(&adcGroup, IfxEvadc_RequestSource_queue0);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1008   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1009   * // fetch the result of conversion for channel 2 of group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1010   * Ifx_EVADC_G_RESresult2;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1011   * result = IfxEvadc_getResultBasedOnRequestSource(&evadc, group, IfxVadc_ChannelId2,IfxEvadc_RequestSource_queue0 );
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1012   * Ifx_EVADC_G_RESresult5;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1013   * result = IfxEvadc_getResultBasedOnRequestSource(&evadc, group, IfxEvadc_ChannelId5,IfxEvadc_RequestSource_queue0 );
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1014   * \endcode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1015   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1016   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1017  IFX_EXTERN Ifx_EVADC_G_RES IfxEvadc_getResultBasedOnRequestSource(Ifx_EVADC *evadc, Ifx_EVADC_G *group, IfxEvadc_ChannelId channel, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1018  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1019  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1020  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1021  /** \addtogroup IfxLld_Evadc_Std_QueueRequest
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1022   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1023  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1024  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1025  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1026  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1027  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1028  /** \brief Clears all the queue entries including backup stage.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1029   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1030   * \param flushQueue Whether queue is cleared or not.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1031   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1032   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1033   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1034  IFX_INLINE void IfxEvadc_clearQueue(Ifx_EVADC_G *evadcG, boolean flushQueue, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1035  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1036  /** \brief Starts a queue of a group by generating a trigger event through software
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1037   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1038   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1039   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1040   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1041  IFX_INLINE void IfxEvadc_startQueue(Ifx_EVADC_G *group, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1042  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1043  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1044  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1045  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1046  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1047  /** \brief Add an entry to the queue of a group for the specified channel with the following options set:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1048   * refill incase of aborted conversion
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1049   * source interrupt enable/disable
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1050   * external trigger control of the aborted conversion
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1051   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1052   * \param channel specifies channel Id
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1053   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1054   * \param options specifies the refill, source interrupt enable/disable and external trigger control selection
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1055   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1056   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1057   * For coding example see: \ref IfxEvadc_Adc_getResult
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1058   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1059   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1060  IFX_EXTERN void IfxEvadc_addToQueue(Ifx_EVADC_G *group, IfxEvadc_ChannelId channel, IfxEvadc_RequestSource sourceType, uint32 options);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1061  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1062  /** \brief Disables the external trigger.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1063   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1064   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1065   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1066   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1067  IFX_EXTERN void IfxEvadc_disableQueueSlotExternalTrigger(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1068  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1069  /** \brief Enables the external trigger.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1070   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1071   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1072   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1073   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1074  IFX_EXTERN void IfxEvadc_enableQueueSlotExternalTrigger(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1075  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1076  /** \brief Gets the requested queue slot gating mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1077   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1078   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1079   * \return requested queue0 slot gating mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1080   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1081  IFX_EXTERN IfxEvadc_GatingMode IfxEvadc_getQueueSlotGatingMode(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1082  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1083  /** \brief Gets the requested queue slot gating input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1084   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1085   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1086   * \return requested queue0 slot gating input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1087   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1088  IFX_EXTERN IfxEvadc_GatingSource IfxEvadc_getQueueSlotGatingSource(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1089  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1090  /** \brief Gets the request queue slot priority.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1091   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1092   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1093   * \return requested queue0 slot priority.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1094   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1095  IFX_EXTERN IfxEvadc_RequestSlotPriority IfxEvadc_getQueueSlotPriority(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1096  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1097  /** \brief Gets the requested queue slot start mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1098   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1099   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1100   * \return requested queue slot start mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1101   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1102  IFX_EXTERN IfxEvadc_RequestSlotStartMode IfxEvadc_getQueueSlotStartMode(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1103  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1104  /** \brief Gets the requested queue slot trigger input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1105   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1106   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1107   * \return requested queue slot trigger input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1108   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1109  IFX_EXTERN IfxEvadc_TriggerSource IfxEvadc_getQueueSlotTriggerInput(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1110  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1111  /** \brief Gets the requested queue slot trigger mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1112   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1113   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1114   * \return requested queue slot trigger mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1115   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1116  IFX_EXTERN IfxEvadc_TriggerMode IfxEvadc_getQueueSlotTriggerMode(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1117  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1118  /** \brief Gives the status of the Queue of a group by returning non zero value if the Queue is full
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1119   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1120   * \param sourceType sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1121   * \return status of the Queue
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1122   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1123   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1124   * Ifx_EVADC_G* group = &MODULE_EVADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1125   * boolean queueFull = (IfxEvadc_getQueueStatus(group)==IfxEvadc_Status_queueFull)?TRUE:FALSE; // get Queue status for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1126   * \endcode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1127   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1128   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1129  IFX_EXTERN IfxEvadc_Status IfxEvadc_getQueueStatus(Ifx_EVADC_G *group, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1130  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1131  /** \brief Returns the queue slot requested status.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1132   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1133   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1134   * \return TRUE if queue slot request enabled otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1135   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1136  IFX_EXTERN boolean IfxEvadc_isRequestQueueSlotEnabled(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1137  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1138  /** \brief Sets the gating configurations.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1139   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1140   * \param gatingSource gate input for group.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1141   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1142   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1143   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1144   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1145  IFX_EXTERN void IfxEvadc_setQueueSlotGatingConfig(Ifx_EVADC_G *evadcG, IfxEvadc_GatingSource gatingSource, IfxEvadc_GatingMode gatingMode, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1146  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1147  /** \brief Sets the trigger operating configurations.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1148   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1149   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1150   * \param triggerSource trigger input for group.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1151   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1152   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1153   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1154  IFX_EXTERN void IfxEvadc_setQueueSlotTriggerOperatingConfig(Ifx_EVADC_G *evadcG, IfxEvadc_TriggerMode triggerMode, IfxEvadc_TriggerSource triggerSource, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1155  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1156  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1157  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1158  /** \addtogroup IfxLld_Evadc_Std_IO
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1159   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1160  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1161  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1162  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1163  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1164  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1165  /** \brief Initializes a EMUX output
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1166   * \param emux the Emux Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1167   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1168   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1169   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1170   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1171  IFX_INLINE void IfxEvadc_initEmuxPin(const IfxEvadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1172  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1173  /** \brief Initializes a GxBFL output
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1174   * \param gxBfl the GxBFL Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1175   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1176   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1177   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1178   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1179  IFX_INLINE void IfxEvadc_initGxBflPin(const IfxEvadc_GxBfl_Out *gxBfl, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1180  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1181  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1182  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1183  /** \addtogroup IfxLld_Evadc_Std_Frequency
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1184   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1185  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1186  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1187  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1188  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1189  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1190  /** \brief Calculate the time using analog frequency.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1191   * \param analogFrequency analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1192   * \param sampleTime sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1193   * \return sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1194   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1195  IFX_INLINE uint32 IfxEvadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1196  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1197  /** \brief Returns the configured Fadci EVADC analog clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1198   * \param group pointer to the EVADC registers group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1199   * \return the configured Fadci EVADC analog clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1200   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1201  IFX_INLINE float32 IfxEvadc_getAdcAnalogFrequency(Ifx_EVADC_G *group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1202  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1203  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1204  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1205  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1206  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1207  /** \brief configured Fadcd EVADC digital clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1208   * \param evadc pointer to the base of EVADC registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1209   * \return the configured Fadcd EVADC digital clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1210   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1211  IFX_EXTERN float32 IfxEvadc_getAdcDigitalFrequency(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1212  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1213  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1214  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1215  /** \addtogroup IfxLld_Evadc_Std_Group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1216   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1217  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1218  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1219  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1220  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1221  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1222  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1223   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1224   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1225   * \param delay Selects an additional clock cycle for the conversion step of the MSB
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1228  IFX_INLINE void IfxEvadc_setAnalogClockSynchronizationDelay(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_AnalogClockSynchronizationDelay delay);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1229  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1230  /** \brief Select calibration sample time in units of t_ADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1231   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1232   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1233   * \param mode Select calibration sample time in units of t_ADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1234   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1235   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1236  IFX_INLINE void IfxEvadc_setCalibrationSampleTime(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_CalibrationSampleTimeControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1237  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1238  /** \brief Clears the all group requests.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1239   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1242  IFX_INLINE void IfxEvadc_clearAllResultRequests(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1243  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1244  /** \brief Gets the EVADC input class channel conversion mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1245   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1246   * \param inputClassNum EVADC input class number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1247   * \return EVADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1248   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1249  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1250  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1251  /** \brief Get conversion result for the group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1252   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1253   * \param results pointer to scaled conversion results
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1254   * \param resultOffset offset for the first result
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1255   * \param numResults number of results
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1256   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1257   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1258   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1259   * Here,Three channels are used for queued transfers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1260   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1261   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1262   * unsigned savedGate = adcGroup.module.evadc->G[adcGroup.groupId].Queue0.QMR0.B.ENGT;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1263   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1264   * // IMPORTANT: for deterministic results we have to disable the queue gate
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1265   * // while filling the queue, otherwise results could be output in the wrong order
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1266   * adcGroup.module.evadc->G[adcGroup.groupId].Queue0.QMR0.B.ENGT = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1267   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1268   * // create channel config
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1269   * IfxEvadc_Adc_ChannelConfig adcChannelConfig[3];
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1270   * IfxEvadc_Adc_Channel adcChannel[3];
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1271   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1272   * for(int chnIx=0; chnIx<3; ++chnIx) {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1273   * IfxEvadc_Adc_initChannelConfig(&adcChannelConfig[chnIx], &adcGroup);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1274   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1275   * adcChannelConfig[chnIx].channelId = (IfxEvadc_ChannelId)(chnIx);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1276   * adcChannelConfig[chnIx].resultRegister = IfxEvadc_ChannelResult_1; // use result register #1 for all channels
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1277   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1278   * // initialize the channel
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1279   * IfxEvadc_Adc_initChannel(&adcChannel[chnIx], &adcChannelConfig[chnIx]);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1280   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1281   * // Add channel to queue with refill enabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1282   * IfxEvadc_Adc_addToQueue(&adcChannel[chnIx], IfxEvadc_RequestSource_queue0, IFXEVADC_QUEUE_REFILL);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1283   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1284   * // restore previous gate config
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1285   * adcGroup.module.evadc->G[adcGroup.groupId].Queue0.QMR0.B.ENGT = savedGate;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1286   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1287   * // start the Queue
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1288   * IfxEvadc_Adc_startQueue(&adcGroup,IfxEvadc_RequestSource_queue0); // just for the case that somebody copy&pastes the code - the queue has already been started in previous test
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1289   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1290   * Ifx_EVADC_G_RES results[10];
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1291   * result = IfxEvadc_getGroupResult(group, results, 0, 2);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1292   * \endcode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1293   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1294   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1295  IFX_INLINE void IfxEvadc_getGroupResult(Ifx_EVADC_G *group, Ifx_EVADC_G_RES *results, uint32 resultOffset, uint32 numResults);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1296  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1297  /** \brief Gets the EVADC input class channel sample time.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1298   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1299   * \param inputClassNum ADC input class number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1300   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1301   * \return ADC input class channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1302   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1303  IFX_INLINE float32 IfxEvadc_getGroupSampleTime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1304  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1305  /** \brief Gets the configured master index.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1306   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1307   * \return configured master kernel index.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1308   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1309  IFX_INLINE uint8 IfxEvadc_getMasterIndex(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1310  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1311  /** \brief Selects the chargingmode/voltage level in idle mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1312   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1313   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1314   * \param mode 0 - No precharge, the sampling capacitor keeps the current charge
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1315   * 1 - The sampling capacitor is precharged to approx. half the reference when idle
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1316   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1317   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1318  IFX_INLINE void IfxEvadc_selectIdlePrechargeLevel(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_IdlePrecharge mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1319  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1320  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1321   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1322   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1323   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1324   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1325  IFX_INLINE void IfxEvadc_enableInputBuffer(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1326  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1327  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1328   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1329   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1330   * \param duration Selects the amount of time for reference input precharging
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1331   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1332   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1333  IFX_INLINE void IfxEvadc_setReferencePrechargeDuration(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_ReferencePrechargeControl duration);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1334  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1335  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1336   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1337   * \param group EVADC Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1338   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1339   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1340  IFX_INLINE void IfxEvadc_enableReferencePrecharge(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1341  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1342  /** \brief Resets the ADC group.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1343   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1344   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1345   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1346  IFX_INLINE void IfxEvadc_resetGroup(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1347  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1348  /** \brief Selects whether sample synchronization must be performed or not.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1349   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1350   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1351   * \param mode Sample Synchronization Options
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1352   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1353   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1354  IFX_INLINE void IfxEvadc_setSampleSynchronizationMode(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_SampleSynchronization mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1355  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1356  /** \brief Selects an additional clock cycle for the conversion step of the MSB.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1357   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1358   * \param group EVADC Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1359   * \param mode Selects an single or double clock cycle(s) for the conversion step of the MSB
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1360   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1361   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1362  IFX_INLINE void IfxEvadc_selectDoubleClockForMSBConversion(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_MsbConversionTime mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1363  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1364  /** \brief Sets analog converter group number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1365   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1366   * \param analogConverterMode group analog converter mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1367   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1368   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1369  IFX_INLINE void IfxEvadc_setAnalogConvertControl(Ifx_EVADC_G *evadcG, IfxEvadc_AnalogConverterMode analogConverterMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1370  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1371  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1372   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1373   * \param inputClassNum Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1374   * \param mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1375   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1376   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1377  IFX_INLINE void IfxEvadc_setAnalogInputPrechargeControlEMUX(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_AnalogInputPrechargeControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1378  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1379  /** \brief Analog Input Precharge Control for Standard Conversions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1380   * Buffer must be enabled by GxANCFG.B.BE = 1
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1381   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1382   * \param inputClassNum Class No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1383   * \param mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1384   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1385   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1386  IFX_INLINE void IfxEvadc_setAnalogInputPrechargeControlStandard(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_AnalogInputPrechargeControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1387  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1388  /** \brief Sets the ADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1389   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1390   * \param inputClassNum input class number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1391   * \param conversionMode ADC input class channel Conversion Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1392   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1393   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1394  IFX_INLINE void IfxEvadc_setGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_ChannelNoiseReduction conversionMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1395  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1396  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1397   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1398   * \param inputClassNum Class No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1399   * \param conversionMode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1400   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1401   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1402  IFX_INLINE void IfxEvadc_setGroupConversionModeEMUX(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_ChannelNoiseReductionEMUX conversionMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1403  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1404  /** \brief Sets the ADC input class sample time ticks.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1405   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1406   * \param inputClassNum input class number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1407   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1408   * \param sampleTime request sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1409   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1410   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1411  IFX_INLINE void IfxEvadc_setGroupSampleTime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1412  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1413  /** \brief Set the additional number of cycles(in addition to 2) in sample time.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1414   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1415   * \param inputClassNum Class No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1416   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1417   * \param sampleTime request sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1418   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1419   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1420  IFX_INLINE void IfxEvadc_setGroupSampleTimeEMUX(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1421  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1422  /** \brief Sets the master index.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1423   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1424   * \param masterIndex master index.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1425   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1426   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1427  IFX_INLINE void IfxEvadc_setMasterIndex(Ifx_EVADC_G *evadcG, uint8 masterIndex);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1428  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1429  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1430   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1431   * \param inputClassNum Class No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1432   * \param mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1433   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1434   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1435  IFX_INLINE void IfxEvadc_spreadEarlySamplePointEMUXConversions(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_SpreadEarlySamplePointEMUXConversionsMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1436  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1437  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1438   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1439   * \param inputClassNum Class No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1440   * \param mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1441   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1442   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1443  IFX_INLINE void IfxEvadc_spreadEarlySamplePointStandardConversions(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_SpreadEarlySamplePointStandardConversionsMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1444  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1445  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1446  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1447  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1448  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1449  /** \brief Sets the Arbiter slot configurations.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1450   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1451   * \param slotEnable enable/disable of slot.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1452   * \param prio channel request priority.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1453   * \param mode Channel Slot start mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1454   * \param slot channel slot Request source.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1455   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1456   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1457  IFX_EXTERN void IfxEvadc_setArbiterPriority(Ifx_EVADC_G *evadcG, boolean slotEnable, IfxEvadc_RequestSlotPriority prio, IfxEvadc_RequestSlotStartMode mode, IfxEvadc_RequestSource slot);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1458  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1459  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1460  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1461  /** \addtogroup IfxLld_Evadc_Std_Module
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1462   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1463  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1464  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1465  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1466  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1467  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1468  /** \brief Disable EVADC kernel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1469   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1470   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1471   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1472  IFX_INLINE void IfxEvadc_disableModule(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1473  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1474  /** \brief Disables the post calibration.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1475   * \param evadcG pointer to the base of EVADC Grroup registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1476   * \param group Index of the group.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1477   * \param enabled disable or not.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1478   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1479   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1480  IFX_INLINE void IfxEvadc_disablePostCalibration(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1481  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1482  /** \brief Enable EVADC kernel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1483   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1484   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1485   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1486  IFX_INLINE void IfxEvadc_enableModule(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1487  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1488  /** \brief gets ADC Calibration Flag CAL status.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1489   * \param evadc pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1490   * \param adcCalGroupNum ADC CAL group number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1491   * \return CAL group status.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1492   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1493  IFX_INLINE uint8 IfxEvadc_getAdcCalibrationActiveState(Ifx_EVADC *evadc, uint8 adcCalGroupNum);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1494  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1495  /** \brief Gets the global control configuration value.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1496   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1497   * \return global control configuration value.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1498   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1499  IFX_INLINE Ifx_EVADC_GLOBCFG IfxEvadc_getGlobalConfigValue(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1500  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1501  /** \brief Gives the SRC source address.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1502   * \param group Index of the group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1503   * \param index SRC number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1504   * \return SRC source address
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1505   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1506  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEvadc_getSrcAddress(IfxEvadc_GroupId group, IfxEvadc_SrcNr index);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1507  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1508  /** \brief get status of GLOBCFG.SUCAL Bit field
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1509   * \param evadc Pointer to EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1510   * \return status of GLOBCFG.SUCAL Bit field
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1511   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1512  IFX_INLINE boolean IfxEvadc_getStartupCalibrationStatus(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1513  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1514  /** \brief Initialises ADC converter clock.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1515   * \param evadc Pointer to EVADC  SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1516   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1517   * \param converterClockDivider ADC converter clock divider.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1518   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1519   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1520  IFX_INLINE void IfxEvadc_initialiseAdcConverterClock(Ifx_EVADC *evadc, Ifx_EVADC_G *evadcG, IfxEvadc_ClockDividerFactor converterClockDivider);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1521  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1522  /** \brief initiates the calibration pulse phase.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1523   * \param evadc pointer to the base of EVADC registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1524   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1525   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1526  IFX_INLINE void IfxEvadc_initiateStartupCalibration(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1527  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1528  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1529   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1530   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1531   * \param evadc Pointer to EVADC module registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1532   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1533   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1534  IFX_INLINE boolean IfxEvadc_isModuleSuspended(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1535  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1536  /** \brief Sets the channel conversion mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1537   * \param evadc pointer to EVADC module registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1538   * \param InputClassNum input class  number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1539   * \param conversionMode ADC conversion Mode. Improves the precision of conversion
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1540   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1541   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1542  IFX_INLINE void IfxEvadc_setGlobalConversionMode(Ifx_EVADC *evadc, uint8 InputClassNum, IfxEvadc_ChannelNoiseReduction conversionMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1543  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1544  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1545   * \param evadc pointer to EVADC registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1546   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1547   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1548   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1549  IFX_INLINE void IfxEvadc_setSleepMode(Ifx_EVADC *evadc, IfxEvadc_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1550  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1551  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1552   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1553   * \param evadc Pointer to EVADC module registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1554   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1555   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1556   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1557  IFX_INLINE void IfxEvadc_setSuspendMode(Ifx_EVADC *evadc, IfxEvadc_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1558  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1559  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1560  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1561  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1562  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1563  /** \brief Disable write access to the EVADC config/control registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1564   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1565   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be disabled.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1566   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1567   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1568  IFX_EXTERN void IfxEvadc_disableAccess(Ifx_EVADC *evadc, IfxEvadc_Protection protectionSet);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1569  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1570  /** \brief Enable write access to the EVADC config/control registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1571   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1572   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be enabled.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1573   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1574   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1575  IFX_EXTERN void IfxEvadc_enableAccess(Ifx_EVADC *evadc, IfxEvadc_Protection protectionSet);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1576  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1577  /** \brief ADC Module Frequency in Hz
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1578   * \param evadc Pointer to EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1579   * \return module frequency
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1580   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1581  IFX_EXTERN float32 IfxEvadc_getAdcModuleFrequency(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1582  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1583  /** \brief Configure the ADC analog clock.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1584   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1585   * \param fAdcI ADC analog clock clock frequency in Hz. Range = [5000000, 10000000].
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1586   * \param group Pointer to EVADC Group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1587   * \return ADC analog clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1588   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1589  IFX_EXTERN uint32 IfxEvadc_initializeFAdcI(Ifx_EVADC *evadc, uint32 fAdcI, Ifx_EVADC_G *group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1590  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1591  /** \brief Resets the kernel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1592   * \param evadc pointer to the  EVADC Module
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1593   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1594   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1595  IFX_EXTERN void IfxEvadc_resetModule(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1596  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1597  /** \brief Starts ADC calibration and wait for the end of the calibration process.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1598   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1599   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1600   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1601  IFX_EXTERN void IfxEvadc_startupCalibration(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1602  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1603  /** \brief SW workaround of EVADC Master/Slave conversion jitter issue(MCMETILLD-910)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1604   * \param evadc Pointer to EVADC module registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1605   * \return Used for detecting failure in either OCDS Debug Active State Activation or Trigger Line TL1 Activation or both.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1606   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1607  IFX_EXTERN boolean IfxEvadc_syncConvWorkAround(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1608  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1609  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1610  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1611  /** \addtogroup IfxLld_Evadc_Std_Channel
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1612   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1613  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1614  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1615  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1616  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1617  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1618  /** \brief Clears the channel request.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1619   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1620   * \param channelId channel id whose request to be cleared.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1621   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1622   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1623  IFX_INLINE void IfxEvadc_clearChannelRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelId);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1624  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1625  /** \brief Enables the FIFO mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1626   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1627   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1628   * \param fifoMode FIFO mode .
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1629   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1630   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1631  IFX_INLINE void IfxEvadc_enableFifoMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, IfxEvadc_FifoMode fifoMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1632  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1633  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1634   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1635   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1636   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1637   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1638  IFX_INLINE void IfxEvadc_enableServiceRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1639  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1640  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1641   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1642   * \param resultRegister
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1643   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1644   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1645  IFX_INLINE void IfxEvadc_disableServiceRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1646  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1647  /** \brief Gets the current ADC channel control configurations.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1648   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1649   * \param channelIndex EVADC channel number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1650   * \return current ADC channel control configuration.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1651   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1652  IFX_INLINE Ifx_EVADC_G_CHCTR IfxEvadc_getChannelControlConfig(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1653  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1654  /** \brief get channel Input class
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1655   * \param evadcG Pointer to EVADC Group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1656   * \param channelIndex Specifies channel Id
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1657   * \return Input class
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1658   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1659  IFX_INLINE IfxEvadc_InputClasses IfxEvadc_getChannelInputclass(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1660  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1661  /** \brief Gets the channel result service request node pointer 0.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1662   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1663   * \return channel result service request node pointer 0.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1664   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1665  IFX_INLINE Ifx_EVADC_G_REVNP0 IfxEvadc_getChannelResultServiceRequestNodePointer0(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1666  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1667  /** \brief Gets the channel result service request node pointer 1.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1668   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1669   * \return channel result service request node pointer 1.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1670   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1671  IFX_INLINE Ifx_EVADC_G_REVNP1 IfxEvadc_getChannelResultServiceRequestNodePointer1(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1672  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1673  /** \brief Gets the channel service request node pointer.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1674   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1675   * \return channel service request node pointer.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1676   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1677  IFX_INLINE Ifx_EVADC_G_CEVNP0 IfxEvadc_getChannelServiceRequestNodePointer0(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1678  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1679  /** \brief get the channel service request node pointer (CH8--CH15)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1680   * \param evadcG pointer to EVADC Group register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1681   * \return Channel service request node pointer for CH8 to CH15
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1682   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1683  IFX_INLINE Ifx_EVADC_G_CEVNP1 IfxEvadc_getChannelServiceRequestNodePointer1(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1684  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1685  /** \brief Selects boundary extension.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1686   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1687   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1688   * \param boundaryMode boundary extension mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1689   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1690   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1691  IFX_INLINE void IfxEvadc_setBoundaryMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_BoundaryExtension boundaryMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1692  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1693  /** \brief Sets the channel event service request line.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1694   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1695   * \param channelSrcNr channel event Service Node.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1696   * \param channel channel number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1697   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1698   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1699  IFX_INLINE void IfxEvadc_setChannelEventNodePointer0(Ifx_EVADC_G *evadcG, IfxEvadc_SrcNr channelSrcNr, IfxEvadc_ChannelId channel);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1700  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1701  /** \brief set channel event node pointer(channel 8- channel 15)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1702   * \param evadcG pointer to the EVADC Group register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1703   * \param channelSrcNr service Request
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1704   * \param channel specifies channel ID
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1705   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1706   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1707  IFX_INLINE void IfxEvadc_setChannelEventNodePointer1(Ifx_EVADC_G *evadcG, IfxEvadc_SrcNr channelSrcNr, IfxEvadc_ChannelId channel);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1708  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1709  /** \brief Sets the channel input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1710   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1711   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1712   * \param inputClass channel input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1713   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1714   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1715  IFX_INLINE void IfxEvadc_setChannelInputClass(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_InputClasses inputClass);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1716  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1717  /** \brief Sets the channel event mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1718   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1719   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1720   * \param limitCheck channel event mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1721   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1722   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1723  IFX_INLINE void IfxEvadc_setChannelLimitCheckMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_LimitCheck limitCheck);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1724  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1725  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1726   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1727   * \param resultRegister
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1728   * \param mode 0b00 Standard data reduction (accumulation)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1729   * 0b01 Result filtering mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1730   * 0b10 Difference mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1731   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1732   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1733  IFX_INLINE void IfxEvadc_setDataModificationMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, IfxEvadc_DataModificationMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1734  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1735  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1736   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1737   * \param resultRegister Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1738   * \param mode Defines result values stored/accumulated for the final result.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1739   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1740   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1741  IFX_INLINE void IfxEvadc_setDataReductionControlMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, uint32 mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1742  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1743  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1744   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1745   * \param resultRegister
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1746   * \param mode 0b00 - Separate result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1747   * 0b01 - Part of a FIFO structure: copy each new valid result
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1748   * 0b10 - Maximum mode: copy new result if bigger
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1749   * 0b11 - Minimum mode: copy new result if smaller
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1750   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1751   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1752  IFX_INLINE void IfxEvadc_setFifoMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, IfxEvadc_FifoMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1753  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1754  /** \brief Sets group's lower boundary.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1755   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1756   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1757   * \param lowerBoundary group lower boundary.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1758   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1759   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1760  IFX_INLINE void IfxEvadc_setLowerBoundary(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_BoundarySelection lowerBoundary);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1761  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1762  /** \brief Selects the refernce input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1763   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1764   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1765   * \param reference reference input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1766   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1767   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1768  IFX_INLINE void IfxEvadc_setReferenceInput(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_ChannelReference reference);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1769  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1770  /** \brief Sets result event node pointer 0.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1771   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1772   * \param resultSrcNr channel result event service node.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1773   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1774   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1775   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1776  IFX_INLINE void IfxEvadc_setResultNodeEventPointer0(Ifx_EVADC_G *evadcG, IfxEvadc_SrcNr resultSrcNr, IfxEvadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1777  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1778  /** \brief Sets result event node pointer 1.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1779   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1780   * \param resultSrcNr channel result event service node.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1781   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1782   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1783   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1784  IFX_INLINE void IfxEvadc_setResultNodeEventPointer1(Ifx_EVADC_G *evadcG, IfxEvadc_SrcNr resultSrcNr, IfxEvadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1785  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1786  /** \brief Sets result store position.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1787   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1788   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1789   * \param rightAlignedStorage result store position.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1790   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1791   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1792  IFX_INLINE void IfxEvadc_setResultPosition(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, boolean rightAlignedStorage);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1793  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1794  /** \brief Sets channel synchronization request.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1795   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1796   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1797   * \param synchonize whether channel synchronize or stand alone operation.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1798   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1799   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1800  IFX_INLINE void IfxEvadc_setSyncRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, boolean synchonize);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1801  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1802  /** \brief Sets group's upper boundary.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1803   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1804   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1805   * \param upperBoundary group upper boundary.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1806   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1807   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1808  IFX_INLINE void IfxEvadc_setUpperBoundary(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_BoundarySelection upperBoundary);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1809  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1810  /** \brief Sets the group result register.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1811   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1812   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1813   * \param resultRegister result register for group result storage.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1814   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1815   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1816  IFX_INLINE void IfxEvadc_storeGroupResult(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1817  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1818  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1819  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1820  /** \addtogroup IfxLld_Evadc_Std_Emux
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1821   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1822  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1823  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1824  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1825  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1826  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1827  /** \brief get global input class conversion mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1828   * \param evadc Pointer to EVADC Module space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1829   * \param inputClassNum global input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1830   * \return External channel resolution for global input class
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1831   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1832  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getEmuxGlobalConversionMode(Ifx_EVADC *evadc, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1833  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1834  /** \brief get the external conversion mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1835   * \param evadcG Pointer to EVADC group register space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1836   * \param inputClassNum Adc input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1837   * \return Adc input class External channel conversion mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1838   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1839  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getEmuxGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1840  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1841  /** \brief Gets the ADC input class sample time of external channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1842   * \param evadcG Pointer to Register Group space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1843   * \param inputClassNum ADC input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1844   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1845   * \return ADC input class external channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1846   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1847  IFX_INLINE float32 IfxEvadc_getEmuxGroupSampleTime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1848  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1849  /** \brief set the external conversion mode of Global class
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1850   * \param evadc pointer to EVADC Module space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1851   * \param inputClassNum Global Input Class Number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1852   * \param conversionMode External Channel resolution
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1853   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1854   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1855  IFX_INLINE void IfxEvadc_setEmuxGlobalConversionMode(Ifx_EVADC *evadc, uint8 inputClassNum, IfxEvadc_ChannelNoiseReduction conversionMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1856  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1857  /** \brief Sets the sample time of ADC global class for external channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1858   * \param evadc Pointer to EVADC Module space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1859   * \param inputClassNum Adc input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1860   * \param analogFrequency ADC analog Frequency in HZ
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1861   * \param sampleTime the requested sample time for input class in sec
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1862   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1863   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1864  IFX_INLINE void IfxEvadc_setEmuxGlobalSampleTime(Ifx_EVADC *evadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1865  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1866  /** \brief set the external channel conversion mode of ADC input class
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1867   * \param evadcG pointer to EVADC Group Register space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1868   * \param inputClassNum input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1869   * \param conversionMode input class external channel resolution
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1870   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1871   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1872  IFX_INLINE void IfxEvadc_setEmuxGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_ChannelNoiseReduction conversionMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1873  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1874  /** \brief Sets the ADC input class sample time for external channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1875   * \param evadcG Pointer to EVADC Group Register Space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1876   * \param inputClassNum input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1877   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1878   * \param sampleTime request sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1879   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1880   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1881  IFX_INLINE void IfxEvadc_setEmuxGroupSampletime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1882  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1883  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1884  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1885  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1886  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1887  /** \brief Configure external multiplexer mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1888   * \param evadc pointer to Module space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1889   * \param evadcG Pointer to EVADC group register space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1890   * \param mode External Multiplexer mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1891   * \param channels Specifies channel Id
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1892   * \param startChannel specifies the external channel value from which conversion to be carried out
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1893   * \param code Output the channel number in binary code/gray code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1894   * \param sampleTimeControl specifies when to use a sample time for external channel
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1895   * \param channelSelectionStyle External Multiplexer Channel Selection Style
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1896   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1897   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1898  IFX_EXTERN void IfxEvadc_configExternalMultiplexerMode(Ifx_EVADC *evadc, Ifx_EVADC_G *evadcG, IfxEvadc_ExternalMultiplexerMode mode, uint8 channels, IfxEvadc_EmuxSelectValue startChannel, IfxEvadc_EmuxCodingScheme code, IfxEvadc_EmuxSampleTimeControl sampleTimeControl, IfxEvadc_ChannelSelectionStyle channelSelectionStyle);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1899  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1900  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1901  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1902  /** \addtogroup IfxLld_Evadc_Std_FastCompare
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1903   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1904  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1905  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1906  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1907  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1908  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1909  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1910   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1911   * \param control Action to be taken on the BoundaryFlag(FCM.B.BFL)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1912   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1913   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1914  IFX_INLINE void IfxEvadc_setFastCompareBoundaryFlagSwControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagSwControl control);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1915  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1916  /** \brief Sets in FCM.B.BFI whether to use Boundary Flag(FCM.B.BFL) directly or in a inverted format
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1917   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1918   * \param mode Invert or not to invert the Boundary Flag(BFL)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1919   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1920   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1921  IFX_INLINE void IfxEvadc_setFastCompareBoundaryFlagInversion(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagInversionControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1922  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1923  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1924   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1925   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1926   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1927  IFX_INLINE void IfxEvadc_disableFastCompareBoundaryFlag(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1928  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1929  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1930   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1931   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1932   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1933  IFX_INLINE void IfxEvadc_enableFastCompareBoundaryFlag(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1934  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1935  /** \brief Enable/Disable sample timing synchronization
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1936   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1937   * \param mode Sample synchronization mode select
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1938   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1939   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1940  IFX_INLINE void IfxEvadc_enableFastCompareSampleSynchronization(Ifx_EVADC_FC *evadcFC, IfxEvadc_SampleSynchronization mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1941  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1942  /** \brief Setting the Reference Precharge Control for Fast Compare Channels in FCCTRL.B.RPC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1943   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1944   * \param duration Reference Precharge Control Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1945   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1946   * 0 - Precharge the reference input for 1 clock phase
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1947   * 1 - Precharge the reference input for 1 clock period (2 phases)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1948   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1949   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1950  IFX_INLINE void IfxEvadc_setFastCompareReferencePrechargeDuration(Ifx_EVADC_FC *evadcFC, IfxEvadc_ReferencePrechargeControl duration);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1951  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1952  /** \brief Get boundary flag status.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1953   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1954   * \return 0(FALSE) - Passive state : Result has not yet crossed the activation boundary, or selected gate signal is inactive, or this boundary flag is disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1955   * 1(TRUE) - Active state:result has crossed the activation boundary
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1956   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1957  IFX_INLINE boolean IfxEvadc_getFastCompareBoundaryFlagStatus(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1958  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1959  /** \brief Returns current level of the selected trigger input
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1960   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1961   * \return Current level of the selected trigger input
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1962   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1963  IFX_INLINE boolean IfxEvadc_getFastCompareExternalTriggerLevelStatus(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1964  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1965  /** \brief Returns result for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1966   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1967   * \return Result for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1968   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1969  IFX_INLINE boolean IfxEvadc_getFastCompareResultStatus(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1970  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1971  /** \brief Indicates availability of a new result in bit FCM.B.FCR
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1972   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1973   * \return Returns value Indicating availability of a new result in bit FCM.B.FCR
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1974   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1975  IFX_INLINE boolean IfxEvadc_isFastCompareNewResultAvailable(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1976  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1977  /** \brief Selects behaviour of Boundary Flag(BFL) wih respect to the value of FCR.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1978   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1979   * \param mode 0 - Set boundary flag BFL if result FCR = 1 (input above the defined band or compare value), clear if FCR = 0 (input below)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1980   * 1 - Set boundary flag BFL if result FCR = 0 (input below the defined band or compare value), clear if FCR = 1 (input above)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1981   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1982   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1983  IFX_INLINE void IfxEvadc_selectFastCompareBoundaryFlagActivationMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagActivationMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1984  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1985  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1986   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1987   * \param nodePointer Bounday Flag Node Pointers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1988   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1989   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1990  IFX_INLINE void IfxEvadc_selectFastCompareBoundaryFlagNodePointer(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagNodePointer nodePointer);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1991  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1992  /** \brief Sets the delay of the analog clock(in clock cycles) after the sync signal.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1993   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1994   * \param delay Defines the delay of the analog clock in clocks after the sync signal.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1995   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1996   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1997  IFX_INLINE void IfxEvadc_setFastCompareAnalogClockSynchronizationDelay(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareAnalogClockSynchronizationDelay delay);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1998  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1999  /** \brief Set Analog Converter Control modes
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2000   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2001   * \param mode Analog Converter Control modes
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2002   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2003   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2004  IFX_INLINE void IfxEvadc_setFastCompareAnalogConverter(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareAnalogConverterControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2005  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2006  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2007   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2008   * \param mode Analog Input Precharge Enable for Fast Comparisons
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2009   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2010   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2011  IFX_INLINE void IfxEvadc_setFastCompareAnalogInputPrechargeControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_AnalogInputPrechargeControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2012  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2013  /** \brief Defines the frequency of the analog converter clock fADCI (base clock for
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2014   * conversion steps), derived from the peripheral clock: fADCI = fADC / divider
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2015   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2016   * \param divider Fast Compare Analog Internal Clock Divider factor
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2017   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2018   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2019  IFX_INLINE void IfxEvadc_setFastCompareAnalogInternalClockDivider(Ifx_EVADC_FC *evadcFC, IfxEvadc_ClockDividerFactor divider);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2020  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2021  /** \brief Sets the source of the value(s) in bitfield FCREF.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2022   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2023   * \param mode Defines the source of the value(s) in bitfield FCREF.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2024   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2025   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2026  IFX_INLINE void IfxEvadc_setFastCompareAutomaticUpdateMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareAutomaticUpdate mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2027  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2028  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2029   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2030   * \param mode Mode/criteria for generation of service requests
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2031   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2032   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2033  IFX_INLINE void IfxEvadc_setFastCompareChannelEventMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_ChannelEventMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2034  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2035  /** \brief Set external trigger polarity in FCCTRL.B.XTPOL
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2036   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2037   * \param mode 0 - Use selected input signal directly
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2038   * 1 - Invert selected input signal
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2039   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2040   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2041  IFX_INLINE void IfxEvadc_setFastCompareExternalTriggerPolarity(Ifx_EVADC_FC *evadcFC, IfxEvadc_ExternalTriggerPolarity mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2042  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2043  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2044   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2045   * \param mode Fast Compare Gate Operating Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2046   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2047   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2048  IFX_INLINE void IfxEvadc_setFastCompareGateOperatingMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_GateOperatingMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2049  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2050  /** \brief Ramp direction(up or down) settings
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2051   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2052   * \param rampDirection Ramp direction(up or down) settings
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2053   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2054   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2055  IFX_INLINE void IfxEvadc_setFastCompareRampDirection(Ifx_EVADC_FC *evadcFC, IfxEvadc_RampDirection rampDirection);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2056  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2057  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2058   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2059   * \param referenceValue The input level is compared to this value.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2060   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2061   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2062  IFX_INLINE void IfxEvadc_setFastCompareReferenceValue(Ifx_EVADC_FC *evadcFC, uint16 referenceValue);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2063  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2064  /** \brief Defines the basic run conditions of the fast compare channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2065   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2066   * \param mode Run mode of the fast compare channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2067   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2068   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2069  IFX_INLINE void IfxEvadc_setFastCompareRunControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareRunControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2070  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2071  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2072   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2073   * \param rampStartMode Defines the run conditions for the ramp generation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2074   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2075   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2076  IFX_INLINE void IfxEvadc_setFastCompareRunRampControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_RampRunControl rampStartMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2077  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2078  /** \brief Setting additional sample time in FCCTRL.B.STCF
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2079   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2080   * \param additionalCycles Number of additional clock cycles to be added to the minimum sample phase of 2 analog clock cycles
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2081   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2082   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2083  IFX_INLINE void IfxEvadc_setFastCompareSampleTimeControl(Ifx_EVADC_FC *evadcFC, uint8 additionalCycles);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2084  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2085  /** \brief Sets when to generate service requests
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2086   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2087   * \param mode Defines when to generate service requests
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2088   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2089   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2090  IFX_INLINE void IfxEvadc_setFastCompareServiceRequestGeneration(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareServiceRequestGeneration mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2091  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2092  /** \brief Sets the interval at which fast compare operations are triggered in steps of 16 * 1/fADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2093   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2094   * \param interval Defines the interval at which fast compare operations are triggered in steps of 16 * 1/f_ADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2095   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2096   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2097  IFX_INLINE void IfxEvadc_setFastCompareTriggerInterval(Ifx_EVADC_FC *evadcFC, uint8 interval);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2098  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2099  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2100   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2101   * \param mode External Trigger Operating Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2102   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2103   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2104  IFX_INLINE void IfxEvadc_setFastCompareTriggerOperatingMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_TriggerOperatingMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2105  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2106  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2107  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2108  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2109  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2110  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2111  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2112  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2113   * \param evadcG Pointer to EVADC group register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2114   * \return analog function configuration value
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2115   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2116  IFX_INLINE Ifx_EVADC_G_ANCFG IfxEvadc_getAnalogFunctionConfiguration(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2117  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2118  /** \brief Get the sample time of ADC global class for external channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2119   * \param evadc pointer to EVADC Module space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2120   * \param inputClassNum Adc input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2121   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2122   * \return ADC input class external channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2123   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2124  IFX_INLINE float32 IfxEvadc_getEmuxGlobalSampleTime(Ifx_EVADC *evadc, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2125  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2126  /** \brief Sets the Emux Interface for a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2127   * \param evadc Pointer to EVADC Module Space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2128   * \param emuxInterface specifies the EmuxInterface
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2129   * \param group specifies the group ID
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2130   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2131   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2132  IFX_INLINE void IfxEvadc_setEmuxInterfaceForGroup(Ifx_EVADC *evadc, IfxEvadc_EmuxInterface emuxInterface, IfxEvadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2133  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2134  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2135   * \param evadcG Pointer to EVADC Group Registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2136   * \param group EVADC Group Number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2137   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2138   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2139  IFX_INLINE void IfxEvadc_disableReferencePrecharge(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2140  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2141  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2142   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2143   * \param group EVADC Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2144   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2145   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2146  IFX_INLINE void IfxEvadc_disableInputBuffer(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2147  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2148  /** \brief Return if the clock for EVADC modules is enabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2149   * \param evadc Pointer to EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2150   * \return Status (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2151   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2152  IFX_INLINE boolean IfxEvadc_isModuleEnabled(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2153  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2154  /** \brief Enable the startup calibaration phase
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2155   * \param evadc Pointer to EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2156   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2157   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2158  IFX_INLINE void IfxEvadc_enableStartupCalibration(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2159  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2160  /** \brief Enable the Queue Gating Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2161   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2162   * \param queue Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2163   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2164   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2165   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2166  IFX_INLINE void IfxEvadc_selectQueueGatingMode(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource queue, IfxEvadc_GatingMode gatingMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2167  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2168  /** \brief Defines the channel number to be converted
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2169   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2170   * \param queue Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2171   * \param channel Channel number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2172   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2173   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2174  IFX_INLINE void IfxEvadc_setChannelRequest(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource queue, IfxEvadc_ChannelId channel);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2175  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2176  /** \brief Sets the global input class registers, define the sample time and data conversion mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2177   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2178   * \param inputClassNum Input Class Number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2179   * \param value Value to be written
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2180   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2181   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2182  IFX_INLINE void IfxEvadc_configureIclass(Ifx_EVADC_G *evadcG, uint8 inputClassNum, uint32 value);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2183  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2184  /** \brief Returns the pointer to the result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2185   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2186   * \param channel Channel Number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2187   * \return The address to the result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2188   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2189  IFX_INLINE volatile uint32 *IfxEvadc_getResultRegisterAddress(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channel);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2190  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2191  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2192  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2193  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2194  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2195  IFX_INLINE void IfxEvadc_setAnalogClockSynchronizationDelay(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_AnalogClockSynchronizationDelay delay)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2196  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2197      IFX_UNUSED_PARAMETER(group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2198      evadcG->ANCFG.B.ACSD = delay;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2199  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2200  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2201  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2202  IFX_INLINE uint32 IfxEvadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2203  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2204      uint32 ticks = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2205  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2206      ticks = (uint32)(sampleTime * analogFrequency) - 2;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2207  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2208      if (ticks > 31)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2209      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2210          ticks = (ticks / 16) + 15;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2211      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2212  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2213      ticks = __minu(ticks, 0xFFu);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2214  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2215      return ticks;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2216  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2217  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2218  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2219  IFX_INLINE void IfxEvadc_setCalibrationSampleTime(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_CalibrationSampleTimeControl mode)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2220  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2221      IFX_UNUSED_PARAMETER(group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2222      evadcG->ANCFG.B.CALSTC = mode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2223  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2224  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2225  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2226  IFX_INLINE void IfxEvadc_clearAllResultRequests(Ifx_EVADC_G *evadcG)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2227  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2228      evadcG->REFCLR.U = 0x0000FFFFu;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2229  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2230  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2231  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2232  IFX_INLINE void IfxEvadc_clearChannelRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelId)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2233  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2234      evadcG->CEFCLR.U = 1 << channelId;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2235  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2236  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2237  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2238  IFX_INLINE void IfxEvadc_clearQueue(Ifx_EVADC_G *evadcG, boolean flushQueue, IfxEvadc_RequestSource sourceType)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2239  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2240      switch (sourceType)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2241      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2242      case IfxEvadc_RequestSource_queue0:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2243          evadcG->Q[0].QMR.B.FLUSH = flushQueue;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2244          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2245      case IfxEvadc_RequestSource_queue1:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2246          evadcG->Q[1].QMR.B.FLUSH = flushQueue;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2247          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2248      case IfxEvadc_RequestSource_queue2:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2249          evadcG->Q[2].QMR.B.FLUSH = flushQueue;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2250          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2251      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2252  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2253  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2254  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2255  IFX_INLINE void IfxEvadc_configureWaitForReadMode(Ifx_EVADC_G *group, uint32 resultIdx, boolean enabled)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2256  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2257      group->RCR[resultIdx].B.WFR = enabled;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2258  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2259  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2260  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2261  IFX_INLINE void IfxEvadc_configureWaitForReadModeForGlobalResultRegister(Ifx_EVADC *evadc, boolean enabled)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2262  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2263      evadc->GLOB.RCR.B.WFR = enabled;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2264  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2265  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2266  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2267  IFX_INLINE void IfxEvadc_setFastCompareBoundaryFlagSwControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagSwControl control)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2268  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2269      evadcFC->FCBFL.B.BFS = control;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2270  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2271  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2272  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2273  IFX_INLINE void IfxEvadc_setFastCompareBoundaryFlagInversion(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagInversionControl mode)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2274  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2275      evadcFC->FCBFL.B.BFI = mode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2276  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2277  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2278  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2279  IFX_INLINE void IfxEvadc_disableFastCompareBoundaryFlag(Ifx_EVADC_FC *evadcFC)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2280  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2281      evadcFC->FCBFL.B.BFM = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2282  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2283  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2284  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2285  IFX_INLINE void IfxEvadc_disableModule(Ifx_EVADC *evadc)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2286  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2287      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2288  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2289      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2290      evadc->CLC.B.DISR = 1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2291      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2292  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2293  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2294  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2295  IFX_INLINE void IfxEvadc_disablePostCalibration(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, boolean enabled)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2296  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2297      IFX_UNUSED_PARAMETER(group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2298      evadcG->ANCFG.B.DPCAL = enabled;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2299  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2300  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2301  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2302  IFX_INLINE void IfxEvadc_enableFastCompareBoundaryFlag(Ifx_EVADC_FC *evadcFC)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2303  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2304      evadcFC->FCBFL.B.BFM = 1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2305  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2306  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2307  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2308  IFX_INLINE void IfxEvadc_enableFastCompareSampleSynchronization(Ifx_EVADC_FC *evadcFC, IfxEvadc_SampleSynchronization mode)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2309  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2310      Ifx_EVADC_FC_FCM tempFCM;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2311      tempFCM.U       = evadcFC->FCM.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2312      tempFCM.B.FCMWC = 1;  /*Enabling write permission to FCM.B.SSE*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2313      tempFCM.B.SSE   = mode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2314      evadcFC->FCM.U  = tempFCM.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2315  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2316  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2317  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2318  IFX_INLINE void IfxEvadc_enableFifoMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, IfxEvadc_FifoMode fifoMode)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2319  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2320      evadcG->RCR[resultRegister].B.FEN = fifoMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2321  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2322  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2323  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2324  IFX_INLINE void IfxEvadc_enableModule(Ifx_EVADC *evadc)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2325  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2326      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2327  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2328      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2329      evadc->CLC.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2330      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2331  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2332  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2333  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2334  IFX_INLINE void IfxEvadc_enableServiceRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2335  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2336      evadcG->RCR[resultRegister].B.SRGEN = 1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2337  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2338  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2339  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2340  IFX_INLINE void IfxEvadc_disableServiceRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2341  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2342      evadcG->RCR[resultRegister].B.SRGEN = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2343  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2344  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2345  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2346  IFX_INLINE void IfxEvadc_setFastCompareReferencePrechargeDuration(Ifx_EVADC_FC *evadcFC, IfxEvadc_ReferencePrechargeControl duration)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2347  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2348      Ifx_EVADC_FC_FCCTRL tempFCCTRL;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2349      tempFCCTRL.U      = evadcFC->FCCTRL.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2350      tempFCCTRL.B.CPWC = 1; /*Enabling write permission to FCCTRL.B.RPC*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2351      tempFCCTRL.B.RPE  = duration;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2352      evadcFC->FCCTRL.U = tempFCCTRL.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2353  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2354  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2355  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2356  IFX_INLINE float32 IfxEvadc_getAdcAnalogFrequency(Ifx_EVADC_G *group)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2357  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2358  #ifdef IFX_CFG_AURIX_SCUCCU_USED
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2359      return IfxScuCcu_getSpbFrequency() / (1U + group->ANCFG.B.DIVA);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2360  #else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2361      return IfxScuCcu_getAdcFrequency() / (1U + group->ANCFG.B.DIVA);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2362  #endif
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2363  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2364  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2365  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2366  IFX_INLINE uint8 IfxEvadc_getAdcCalibrationActiveState(Ifx_EVADC *evadc, uint8 adcCalGroupNum)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2367  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2368      uint8 status = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2369      status = evadc->G[adcCalGroupNum].ARBCFG.B.CAL;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2370      return status;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2371  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2372  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2373  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2374  IFX_INLINE Ifx_EVADC_G_ANCFG IfxEvadc_getAnalogFunctionConfiguration(Ifx_EVADC_G *evadcG)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2375  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2376      Ifx_EVADC_G_ANCFG analogCfg;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2377      analogCfg.U = evadcG->ANCFG.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2378      return analogCfg;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2379  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2380  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2381  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2382  IFX_INLINE Ifx_EVADC_G_CHCTR IfxEvadc_getChannelControlConfig(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2383  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2384      Ifx_EVADC_G_CHCTR tempChctr;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2385      tempChctr.U = evadcG->CHCTR[channelIndex].U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2386      return tempChctr;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2387  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2388  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2389  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2390  IFX_INLINE IfxEvadc_InputClasses IfxEvadc_getChannelInputclass(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2391  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2392      return (IfxEvadc_InputClasses)evadcG->CHCTR[channelIndex].B.ICLSEL;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2393  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2394  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2395  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2396  IFX_INLINE Ifx_EVADC_G_REVNP0 IfxEvadc_getChannelResultServiceRequestNodePointer0(Ifx_EVADC_G *evadcG)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2397  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2398      Ifx_EVADC_G_REVNP0 resultServiceRequestNodePtr0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2399      resultServiceRequestNodePtr0.U = evadcG->REVNP0.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2400      return resultServiceRequestNodePtr0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2401  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2402  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2403  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2404  IFX_INLINE Ifx_EVADC_G_REVNP1 IfxEvadc_getChannelResultServiceRequestNodePointer1(Ifx_EVADC_G *evadcG)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2405  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2406      Ifx_EVADC_G_REVNP1 resultServiceRequestNodePtr1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2407      resultServiceRequestNodePtr1.U = evadcG->REVNP1.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2408      return resultServiceRequestNodePtr1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2409  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2410  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2411  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2412  IFX_INLINE Ifx_EVADC_G_CEVNP0 IfxEvadc_getChannelServiceRequestNodePointer0(Ifx_EVADC_G *evadcG)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2413  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2414      Ifx_EVADC_G_CEVNP0 serviceRequestNodePtr;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2415      serviceRequestNodePtr.U = evadcG->CEVNP0.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2416      return serviceRequestNodePtr;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2417  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2418  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2419  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2420  IFX_INLINE Ifx_EVADC_G_CEVNP1 IfxEvadc_getChannelServiceRequestNodePointer1(Ifx_EVADC_G *evadcG)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2421  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2422      Ifx_EVADC_G_CEVNP1 serviceRequestNodePtr;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2423      serviceRequestNodePtr.U = evadcG->CEVNP1.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2424      return serviceRequestNodePtr;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2425  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2426  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2427  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2428  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getEmuxGlobalConversionMode(Ifx_EVADC *evadc, uint8 inputClassNum)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2429  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2430      return (IfxEvadc_ChannelNoiseReduction)evadc->GLOB.ICLASS[inputClassNum].B.CME;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2431  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2432  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2433  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2434  IFX_INLINE float32 IfxEvadc_getEmuxGlobalSampleTime(Ifx_EVADC *evadc, uint8 inputClassNum, float32 analogFrequency)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2435  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2436      return (float32)(IFXEVADC_SAMPLETIME_MIN + evadc->GLOB.ICLASS[inputClassNum].B.STCE) / analogFrequency;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2437  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2438  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2439  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2440  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getEmuxGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2441  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2442      return (IfxEvadc_ChannelNoiseReduction)evadcG->ICLASS[inputClassNum].B.CME;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2443  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2444  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2445  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2446  IFX_INLINE float32 IfxEvadc_getEmuxGroupSampleTime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2447  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2448      return (float32)(IFXEVADC_SAMPLETIME_MIN + evadcG->ICLASS[inputClassNum].B.STCE) / analogFrequency;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2449  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2450  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2451  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2452  IFX_INLINE boolean IfxEvadc_getFastCompareBoundaryFlagStatus(Ifx_EVADC_FC *evadcFC)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2453  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2454      boolean status;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2455  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2456      if (evadcFC->FCBFL.B.BFL == 1)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2457      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2458          status = TRUE;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2459      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2460      else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2461      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2462          status = FALSE;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2463      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2464  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2465      return status;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2466  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2467  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2468  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2469  IFX_INLINE boolean IfxEvadc_getFastCompareExternalTriggerLevelStatus(Ifx_EVADC_FC *evadcFC)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2470  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2471      boolean extTrigLevel;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2472  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2473      if (evadcFC->FCCTRL.B.XTLVL == 1)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2474      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2475          extTrigLevel = TRUE;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2476      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2477      else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2478      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2479          extTrigLevel = FALSE;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2480      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2481  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2482      return extTrigLevel;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2483  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2484  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2485  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2486  IFX_INLINE boolean IfxEvadc_getFastCompareResultStatus(Ifx_EVADC_FC *evadcFC)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2487  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2488      boolean result;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2489  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2490      if (evadcFC->FCBFL.B.FCR == 1)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2491      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2492          result = TRUE;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2493      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2494      else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2495      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2496          result = FALSE;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2497      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2498  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2499      return result;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2500  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2501  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2502  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2503  IFX_INLINE Ifx_EVADC_GLOBCFG IfxEvadc_getGlobalConfigValue(Ifx_EVADC *evadc)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2504  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2505      Ifx_EVADC_GLOBCFG globCfg;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2506      globCfg.U = evadc->GLOBCFG.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2507      return globCfg;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2508  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2509  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2510  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2511  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getGlobalConversionMode(Ifx_EVADC *evadc, uint8 inputClassNum)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2512  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2513      return (IfxEvadc_ChannelNoiseReduction)evadc->GLOB.ICLASS[inputClassNum].B.CMS;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2514  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2515  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2516  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2517  IFX_INLINE Ifx_EVADC_GLOB_RES IfxEvadc_getGlobalResult(Ifx_EVADC *evadc)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2518  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2519      Ifx_EVADC_GLOB_RES tmpGlobalResult;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2520  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2521      tmpGlobalResult.U = evadc->GLOB.RES.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2522  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2523      return tmpGlobalResult;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2524  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2525  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2526  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2527  IFX_INLINE float32 IfxEvadc_getGlobalSampleTime(Ifx_EVADC *evadc, uint8 inputClassNum, float32 analogFrequency)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2528  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2529      uint32 sampleTime = evadc->GLOB.ICLASS[inputClassNum].B.STCS;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2530  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2531      if (sampleTime > 16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2532      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2533          sampleTime = (sampleTime - 15) * 16;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2534      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2535  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2536      return (float32)(IFXEVADC_SAMPLETIME_MIN + sampleTime) / analogFrequency;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2537  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2538  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2539  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2540  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2541  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2542      return (IfxEvadc_ChannelNoiseReduction)evadcG->ICLASS[inputClassNum].B.CMS;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2543  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2544  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2545  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2546  IFX_INLINE void IfxEvadc_getGroupResult(Ifx_EVADC_G *group, Ifx_EVADC_G_RES *results, uint32 resultOffset, uint32 numResults)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2547  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2548      uint32 idx = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2549  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2550      for (idx = 0; idx < numResults; idx++)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2551      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2552          results[idx].U = group->RES[resultOffset + idx].U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2553      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2554  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2555  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2556  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2557  IFX_INLINE float32 IfxEvadc_getGroupSampleTime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2558  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2559      uint32 sampleTime = evadcG->ICLASS[inputClassNum].B.STCS;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2560  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2561      if (sampleTime > 16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2562      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2563          sampleTime = (sampleTime - 15) * 16;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2564      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2565  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2566      return (float32)(IFXEVADC_SAMPLETIME_MIN + sampleTime) / analogFrequency;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2567  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2568  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2569  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2570  IFX_INLINE uint8 IfxEvadc_getMasterIndex(Ifx_EVADC_G *evadcG)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2571  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2572      uint8 masterIndex = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2573      masterIndex = evadcG->SYNCTR.B.STSEL;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2574      return masterIndex;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2575  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2576  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2577  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2578  IFX_INLINE Ifx_EVADC_G_RES IfxEvadc_getResult(Ifx_EVADC_G *group, uint32 resultIdx)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2579  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2580      Ifx_EVADC_G_RES tmpResult;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2581      tmpResult.U = group->RES[resultIdx].U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2582  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2583      return tmpResult;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2584  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2585  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2586  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2587  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEvadc_getSrcAddress(IfxEvadc_GroupId group, IfxEvadc_SrcNr index)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2588  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2589      if ((group >= IfxEvadc_GroupId_12) && (group < IfxEvadc_GroupId_global0)) //Condition for Fast Compare groups
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2590      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2591          IFX_ASSERT(IFX_VERBOSE_LEVEL_WARNING, index == 0);                    /* For Fast Compare group, only SR0 is available.So only index = 0 is valid.So asserting warning in case index!=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2592      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2593  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2594  /*This is being done because the enum IfxEvadc_GroupId has count equal to group number and this count may not be continuous for different derivatives whereas IfxEvadc_cfg_srcAddresses[] has continuous positioning according to number of groups of each type available*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2595      if ((group > 7) && (group < 12))
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2596      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2597          group = (IfxEvadc_GroupId)(group - (8 - IFXEVADC_NUM_ADC_PRIMARY_GROUPS));
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2598      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2599      else if ((group > 11) && (group < 20))
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2600      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2601          group = (IfxEvadc_GroupId)(group - (12 - IFXEVADC_NUM_ADC_PRIMARY_GROUPS - IFXEVADC_NUM_ADC_SECONDARY_GROUPS));
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2602      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2603      else if ((group == 20) || (group == 21))
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2604      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2605          group = (IfxEvadc_GroupId)(group - (20 - IFXEVADC_NUM_ADC_PRIMARY_GROUPS - IFXEVADC_NUM_ADC_SECONDARY_GROUPS - IFXEVADC_NUM_FAST_COMPARE_CHANNELS));
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2606      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2607  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2608      volatile Ifx_SRC_SRCR *base = IfxEvadc_cfg_srcAddresses[(group << 2) + index];
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2609  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2610      return base;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2611  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2612  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2613  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2614  IFX_INLINE boolean IfxEvadc_getStartupCalibrationStatus(Ifx_EVADC *evadc)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2615  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2616      return (boolean)evadc->GLOBCFG.B.SUCAL;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2617  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2618  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2619  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2620  IFX_INLINE void IfxEvadc_selectIdlePrechargeLevel(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_IdlePrecharge mode)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2621  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2622      IFX_UNUSED_PARAMETER(group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2623  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2624      evadcG->ANCFG.B.IPE = mode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2625  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2626  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2627  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2628  IFX_INLINE void IfxEvadc_initEmuxPin(const IfxEvadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2629  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2630      IfxPort_setPinModeOutput(emux->pin.port, emux->pin.pinIndex, outputMode, emux->select);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2631      IfxPort_setPinPadDriver(emux->pin.port, emux->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2632  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2633  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2634  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2635  IFX_INLINE void IfxEvadc_initGxBflPin(const IfxEvadc_GxBfl_Out *gxBfl, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2636  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2637      IfxPort_setPinModeOutput(gxBfl->pin.port, gxBfl->pin.pinIndex, outputMode, gxBfl->select);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2638      IfxPort_setPinPadDriver(gxBfl->pin.port, gxBfl->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2639  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2640  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2641  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2642  IFX_INLINE void IfxEvadc_initialiseAdcConverterClock(Ifx_EVADC *evadc, Ifx_EVADC_G *evadcG, IfxEvadc_ClockDividerFactor converterClockDivider)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2643  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2644      IFX_UNUSED_PARAMETER(evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2645      evadcG->ANCFG.B.DIVA = converterClockDivider;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2646  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2647  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2648  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2649  IFX_INLINE void IfxEvadc_initiateStartupCalibration(Ifx_EVADC *evadc)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2650  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2651      evadc->GLOBCFG.B.SUCAL = 1;
	or	d15,#128
	st.b	[a15]131,d15
.L476:
	call	IfxEvadc_disableAccess

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   607  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   608      /* Wait for hardware self-test and calibration to complete */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   609      /* Wait until Calibration is done */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   610      do
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   611      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   612          calibrationRunning = FALSE;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   613  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   614          for (adcCalGroupNum = 0; adcCalGroupNum < IFXEVADC_NUM_ADC_GROUPS; adcCalGroupNum++)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   615          {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   616              if (adcCalGroupNum >= IFXEVADC_NUM_ADC_PRIMARY_GROUPS)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   617              {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   618                  tempAdcGroupNum = adcCalGroupNum + (8 - IFXEVADC_NUM_ADC_PRIMARY_GROUPS);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   619              }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   620              else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   621              {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   622                  tempAdcGroupNum = adcCalGroupNum;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   623              }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   624  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   625              if (IfxEvadc_getAdcCalibrationActiveState(evadc, tempAdcGroupNum) != 0)     /* Check ADC Calibration Flag CAL */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   626              {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   627                  calibrationRunning = TRUE;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   628              }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   629              else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   630              {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   631                  /* do nothing */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   632              }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   633          }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   634      } while (calibrationRunning == TRUE); /* wait until calibration of all calibrated kernels are done */
.L121:
	mov	d0,#0

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     2   * \file IfxEvadc.h
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     3   * \brief EVADC  basic functionality
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     4   * \ingroup IfxLld_Evadc
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     5   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     8   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     9   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    11   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    16   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    18   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    25   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    32   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    40   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    41   * \defgroup IfxLld_Evadc_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    42   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    43   * \defgroup IfxLld_Evadc_Std_Global Global Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    44   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    45   * \defgroup IfxLld_Evadc_Std_QueueRequest Queue Request Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    46   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    47   * \defgroup IfxLld_Evadc_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    48   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    49   * \defgroup IfxLld_Evadc_Std_Frequency Frequency Calculation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    50   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    51   * \defgroup IfxLld_Evadc_Std_Group Group Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    52   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    53   * \defgroup IfxLld_Evadc_Std_Module Module Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    54   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    55   * \defgroup IfxLld_Evadc_Std_Channel Channel Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    56   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    57   * \defgroup IfxLld_Evadc_Std_Emux Emux Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    58   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    59   * \defgroup IfxLld_Evadc_Std_FastCompare Fast Compare functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    60   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    61   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    62  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    63  #ifndef IFXEVADC_H
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    64  #define IFXEVADC_H 1
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    65  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    66  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    67  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    68  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    69  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    70  #include "_Impl/IfxEvadc_cfg.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    71  #include "_PinMap/IfxEvadc_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    72  #include "IfxEvadc_bf.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    73  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    74  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    75  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    76  #include "IfxCbs_reg.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    77  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    78  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    79  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    80  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    81  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    82  /** \addtogroup IfxLld_Evadc_Std_Enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    83   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    84  /** \brief Defined in MODULE_EVADC.G[x].ARBCFG.B.ANONS and ANONC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    85   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    86  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    87  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    88      IfxEvadc_AnalogConverterMode_off             = 0, /**< \brief Analog Converter off */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    89      IfxEvadc_AnalogConverterMode_slowStandby     = 1, /**< \brief Slow Standby Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    90      IfxEvadc_AnalogConverterMode_fastStandby     = 2, /**< \brief Fast Standby Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    91      IfxEvadc_AnalogConverterMode_normalOperation = 3  /**< \brief Normal operation mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    92  } IfxEvadc_AnalogConverterMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    93  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    94  /** \brief Arbitration round length defined in MODULE_EVADC.G[x].ARBCFG.ARBRND(x=0,1,..,11)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    95   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    96  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    97  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    98      IfxEvadc_ArbitrationRounds_4_slots  = 0,  /**< \brief An arbitration round contains 4 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    99      IfxEvadc_ArbitrationRounds_8_slots  = 1,  /**< \brief An arbitration round contains 8 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   100      IfxEvadc_ArbitrationRounds_16_slots = 2,  /**< \brief An arbitration round contains 16 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   101      IfxEvadc_ArbitrationRounds_20_slots = 3   /**< \brief An arbitration round contains 20 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   102  } IfxEvadc_ArbitrationRounds;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   103  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   104  /** \brief Boundary Extension defined in MODULE_EVADC.G[x].CHCTR[y].B.BNDSELX(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   105   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   106  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   107  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   108      IfxEvadc_BoundaryExtension_standard            = 0,   /**< \brief Boundary Standard mode. BNDSELU/BNDSELL as Boundaries */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   109      IfxEvadc_BoundaryExtension_fastCompareResult1  = 1,   /**< \brief Fast compare mode use as upper boundary  Channel result   1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   110      IfxEvadc_BoundaryExtension_fastCompareResult2  = 2,   /**< \brief Fast compare mode use as upper boundary  Channel result   2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   111      IfxEvadc_BoundaryExtension_fastCompareResult3  = 3,   /**< \brief Fast compare mode use as upper boundary  Channel result   3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   112      IfxEvadc_BoundaryExtension_fastCompareResult4  = 4,   /**< \brief Fast compare mode use as upper boundary  Channel result   4 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   113      IfxEvadc_BoundaryExtension_fastCompareResult5  = 5,   /**< \brief Fast compare mode use as upper boundary  Channel result   5 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   114      IfxEvadc_BoundaryExtension_fastCompareResult6  = 6,   /**< \brief Fast compare mode use as upper boundary  Channel result   6 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   115      IfxEvadc_BoundaryExtension_fastCompareResult7  = 7,   /**< \brief Fast compare mode use as upper boundary  Channel result   7 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   116      IfxEvadc_BoundaryExtension_fastCompareResult8  = 8,   /**< \brief Fast compare mode use as upper boundary  Channel result   8 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   117      IfxEvadc_BoundaryExtension_fastCompareResult9  = 9,   /**< \brief Fast compare mode use as upper boundary  Channel result   9 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   118      IfxEvadc_BoundaryExtension_fastCompareResult10 = 10,  /**< \brief Fast compare mode use as upper boundary  Channel result  10 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   119      IfxEvadc_BoundaryExtension_fastCompareResult11 = 11,  /**< \brief Fast compare mode use as upper boundary  Channel result  11 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   120      IfxEvadc_BoundaryExtension_fastCompareResult12 = 12,  /**< \brief Fast compare mode use as upper boundary  Channel result  12 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   121      IfxEvadc_BoundaryExtension_fastCompareResult13 = 13,  /**< \brief Fast compare mode use as upper boundary  Channel result  13 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   122      IfxEvadc_BoundaryExtension_fastCompareResult14 = 14,  /**< \brief Fast compare mode use as upper boundary  Channel result  14 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   123      IfxEvadc_BoundaryExtension_fastCompareResult15 = 15   /**< \brief Fast compare mode use as upper boundary  Channel result  15 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   124  } IfxEvadc_BoundaryExtension;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   125  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   126  /** \brief BoundarySel defined in MODULE_EVADC.G[x].CHCTR[y].B.BNDSELL(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   127   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   128  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   129  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   130      IfxEvadc_BoundarySelection_group0  = 0,  /**< \brief Use group class 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   131      IfxEvadc_BoundarySelection_group1  = 1,  /**< \brief Use group class 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   132      IfxEvadc_BoundarySelection_global0 = 2,  /**< \brief Use global class 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   133      IfxEvadc_BoundarySelection_global1 = 3   /**< \brief Use global class 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   134  } IfxEvadc_BoundarySelection;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   135  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   136  /** \brief EVADC Channels
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   137   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   138  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   139  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   140      IfxEvadc_ChannelId_none = -1,  /**< \brief None of EVADC channels */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   141      IfxEvadc_ChannelId_0    = 0,   /**< \brief Channel 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   142      IfxEvadc_ChannelId_1    = 1,   /**< \brief Channel 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   143      IfxEvadc_ChannelId_2    = 2,   /**< \brief Channel 2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   144      IfxEvadc_ChannelId_3    = 3,   /**< \brief Channel 3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   145      IfxEvadc_ChannelId_4    = 4,   /**< \brief Channel 4 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   146      IfxEvadc_ChannelId_5    = 5,   /**< \brief Channel 5 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   147      IfxEvadc_ChannelId_6    = 6,   /**< \brief Channel 6 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   148      IfxEvadc_ChannelId_7    = 7,   /**< \brief Channel 7 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   149      IfxEvadc_ChannelId_8    = 8,   /**< \brief Channel 8 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   150      IfxEvadc_ChannelId_9    = 9,   /**< \brief Channel 9 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   151      IfxEvadc_ChannelId_10   = 10,  /**< \brief Channel 10 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   152      IfxEvadc_ChannelId_11   = 11,  /**< \brief Channel 11 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   153      IfxEvadc_ChannelId_12   = 12,  /**< \brief Channel 12 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   154      IfxEvadc_ChannelId_13   = 13,  /**< \brief Channel 13 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   155      IfxEvadc_ChannelId_14   = 14,  /**< \brief Channel 14 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   156      IfxEvadc_ChannelId_15   = 15   /**< \brief Channel 15 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   157  } IfxEvadc_ChannelId;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   158  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   159  /** \brief ADC channel reference defined in MODULE_EVADC.G[x].CHCTR[y].B.REFSEL(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   160   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   161  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   162  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   163      IfxEvadc_ChannelReference_standard = 0,  /**< \brief use Varef as reference */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   164      IfxEvadc_ChannelReference_channel0 = 1   /**< \brief use CH0 as reference */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   165  } IfxEvadc_ChannelReference;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   166  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   167  /** \brief Channel Result defined in MODULE_EVADC.G[x].CHCTR[y].B.RESREG(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   168   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   169  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   170  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   171      IfxEvadc_ChannelResult_0 = 0,      /**< \brief Use Channel result 0  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   172      IfxEvadc_ChannelResult_1,          /**< \brief Use Channel result 1  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   173      IfxEvadc_ChannelResult_2,          /**< \brief Use Channel result 2  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   174      IfxEvadc_ChannelResult_3,          /**< \brief Use Channel result 3  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   175      IfxEvadc_ChannelResult_4,          /**< \brief Use Channel result 4  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   176      IfxEvadc_ChannelResult_5,          /**< \brief Use Channel result 5  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   177      IfxEvadc_ChannelResult_6,          /**< \brief Use Channel result 6  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   178      IfxEvadc_ChannelResult_7,          /**< \brief Use Channel result 7  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   179      IfxEvadc_ChannelResult_8,          /**< \brief Use Channel result 8  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   180      IfxEvadc_ChannelResult_9,          /**< \brief Use Channel result 9  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   181      IfxEvadc_ChannelResult_10,         /**< \brief Use Channel result 10  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   182      IfxEvadc_ChannelResult_11,         /**< \brief Use Channel result 11  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   183      IfxEvadc_ChannelResult_12,         /**< \brief Use Channel result 12  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   184      IfxEvadc_ChannelResult_13,         /**< \brief Use Channel result 13  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   185      IfxEvadc_ChannelResult_14,         /**< \brief Use Channel result 14  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   186      IfxEvadc_ChannelResult_15          /**< \brief Use Channel result 15  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   187  } IfxEvadc_ChannelResult;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   188  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   189  /** \brief External Multiplexer Channel Selection Style as defined in
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   190   * Ifx_EVADC.G[x].EMUXCTR.B.EMXCSS
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   191   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   192  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   193  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   194      IfxEvadc_ChannelSelectionStyle_channelNumber = 0,  /**< \brief selects an arbitrary channel */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   195      IfxEvadc_ChannelSelectionStyle_binary        = 1   /**< \brief Each bit of bitfield EMUXCH selects the
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   196                                                          * associated channel for EMUX control */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   197  } IfxEvadc_ChannelSelectionStyle;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   198  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   199  /** \brief Specifies the External Coding scheme(binary/gray)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   200   * defined in Ifx_EVADC.G[x].EMUXCTR.B.EMXCOD
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   201   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   202  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   203  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   204      IfxEvadc_EmuxCodingScheme_binary = 0,  /**< \brief Output the Channel Number in Binary code */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   205      IfxEvadc_EmuxCodingScheme_gray   = 1   /**< \brief Output the channel number in gray code */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   206  } IfxEvadc_EmuxCodingScheme;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   207  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   208  /** \brief Specifies the Emux interface
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   209   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   210  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   211  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   212      IfxEvadc_EmuxInterface_0 = 0,  /**< \brief Emux Interface 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   213      IfxEvadc_EmuxInterface_1 = 1   /**< \brief Emux Interface 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   214  } IfxEvadc_EmuxInterface;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   215  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   216  /** \brief External Multiplexer sample time control
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   217   * defined in Ifx_EVADC.G[x].EMUXCTR.B.EMXST
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   218   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   219  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   220  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   221      IfxEvadc_EmuxSampleTimeControl_settingChanges = 0,  /**< \brief Use STCE Whenever Setting Changes */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   222      IfxEvadc_EmuxSampleTimeControl_always         = 1   /**< \brief Use STCE for each conversion of an external channel */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   223  } IfxEvadc_EmuxSampleTimeControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   224  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   225  /** \brief specifies the External Channel Start select value
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   226   * defined in Ifx_EVADC.G[x].EMUXCTR.B.EMUXSET
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   227   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   228  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   229  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   230      IfxEvadc_EmuxSelectValue_0 = 0,      /**< \brief Start Selection Value 0  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   231      IfxEvadc_EmuxSelectValue_1,          /**< \brief Start Selection Value 1  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   232      IfxEvadc_EmuxSelectValue_2,          /**< \brief Start Selection Value 2  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   233      IfxEvadc_EmuxSelectValue_3,          /**< \brief Start Selection Value 3  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   234      IfxEvadc_EmuxSelectValue_4,          /**< \brief Start Selection Value 4  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   235      IfxEvadc_EmuxSelectValue_5,          /**< \brief Start Selection Value 5  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   236      IfxEvadc_EmuxSelectValue_6,          /**< \brief Start Selection Value 6  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   237      IfxEvadc_EmuxSelectValue_7           /**< \brief Start Selection Value 7  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   238  } IfxEvadc_EmuxSelectValue;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   239  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   240  /** \brief Specifies External Multiplexer Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   241   * define in Ifx_EVADC.G[x].EMUXCTR.B.EMUXMODE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   242   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   243  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   244  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   245      IfxEvadc_ExternalMultiplexerMode_softwareControl = 0,  /**< \brief Disable The Emux Control */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   246      IfxEvadc_ExternalMultiplexerMode_steady          = 1,  /**< \brief select steady mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   247      IfxEvadc_ExternalMultiplexerMode_singleStep      = 2,  /**< \brief Select single step mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   248      IfxEvadc_ExternalMultiplexerMode_sequence        = 3   /**< \brief Select Sequence Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   249  } IfxEvadc_ExternalMultiplexerMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   250  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   251  /** \brief FIFO mode enable
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   252   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   253  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   254  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   255      IfxEvadc_FifoMode_seperateResultRegister = 0,  /**< \brief seperate Result Register */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   256      IfxEvadc_FifoMode_fifoStructure          = 1,  /**< \brief Part of FIFO structure: copy each new valid result */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   257      IfxEvadc_FifoMode_maximumMode            = 2,  /**< \brief copy new result if bigger */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   258      IfxEvadc_FifoMode_minimumMode            = 3   /**< \brief copy new result if it is smaller */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   259  } IfxEvadc_FifoMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   260  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   261  /** \brief gating mode defined in MODULE_EVADC.QMR0.ENGT
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   262   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   263  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   264  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   265      IfxEvadc_GatingMode_disabled   = 0,  /**< \brief Gating is disabled, no conversion request are issued */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   266      IfxEvadc_GatingMode_always     = 1,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   267      IfxEvadc_GatingMode_gatingHigh = 2,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is high */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   268      IfxEvadc_GatingMode_gatingLow  = 3   /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is low */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   269  } IfxEvadc_GatingMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   270  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   271  /** \brief External trigger gating defined in MODULE_EVADC.G[x].QCTRLy.GTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   272   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   273  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   274  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   275      IfxEvadc_GatingSource_0 = 0,      /**< \brief Input signal REQGTx_0  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   276      IfxEvadc_GatingSource_1,          /**< \brief Input signal REQGTx_1  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   277      IfxEvadc_GatingSource_2,          /**< \brief Input signal REQGTx_2  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   278      IfxEvadc_GatingSource_3,          /**< \brief Input signal REQGTx_3  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   279      IfxEvadc_GatingSource_4,          /**< \brief Input signal REQGTx_4  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   280      IfxEvadc_GatingSource_5,          /**< \brief Input signal REQGTx_5  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   281      IfxEvadc_GatingSource_6,          /**< \brief Input signal REQGTx_6  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   282      IfxEvadc_GatingSource_7,          /**< \brief Input signal REQGTx_7  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   283      IfxEvadc_GatingSource_8,          /**< \brief Input signal REQGTx_8  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   284      IfxEvadc_GatingSource_9,          /**< \brief Input signal REQGTx_9  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   285      IfxEvadc_GatingSource_10,         /**< \brief Input signal REQGTx_10  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   286      IfxEvadc_GatingSource_11,         /**< \brief Input signal REQGTx_11  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   287      IfxEvadc_GatingSource_12,         /**< \brief Input signal REQGTx_12  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   288      IfxEvadc_GatingSource_13,         /**< \brief Input signal REQGTx_13  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   289      IfxEvadc_GatingSource_14,         /**< \brief Input signal REQGTx_14  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   290      IfxEvadc_GatingSource_15          /**< \brief Input signal REQGTx_15  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   291  } IfxEvadc_GatingSource;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   292  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   293  /** \brief inputClass defined in MODULE_EVADC.G[x].CHCTR[y].B.ICLSEL(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   294   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   295  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   296  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   297      IfxEvadc_InputClasses_group0  = 0,  /**< \brief Use group class 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   298      IfxEvadc_InputClasses_group1  = 1,  /**< \brief Use group class 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   299      IfxEvadc_InputClasses_global0 = 2,  /**< \brief Use global class 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   300      IfxEvadc_InputClasses_global1 = 3   /**< \brief Use global class 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   301  } IfxEvadc_InputClasses;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   302  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   303  /** \brief ADC channel limit check defined in MODULE_EVADC.G[x].CHCTR[y].B.CHEVMODE(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   304   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   305  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   306  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   307      IfxEvadc_LimitCheck_noCheck            = 0,  /**< \brief Normal compare mode Event Never Fast Compare mode Event Never */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   308      IfxEvadc_LimitCheck_eventIfInArea      = 1,  /**< \brief Normal compare mode Event If result is inside the boundary band    Fast Compare mode Event If result switches to high (above comp. value) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   309      IfxEvadc_LimitCheck_eventIfOutsideArea = 2,  /**< \brief Normal compare mode Event If result is outside the boundary band   Fast Compare mode Event If result switches to low (below comp. value) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   310      IfxEvadc_LimitCheck_always             = 3   /**< \brief Normal compare mode Event Always   Fast Compare mode Event Always */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   311  } IfxEvadc_LimitCheck;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   312  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   313  /** \brief Access protection for Group registers defined in MODULE_EVADC.ACCPROT0.U
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   314   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   315  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   316  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   317      IfxEvadc_Protection_channelControl0         = 0,   /**< \brief Access control for GxCHCTR0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   318      IfxEvadc_Protection_channelControl1         = 1,   /**< \brief Access control for GxCHCTR1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   319      IfxEvadc_Protection_channelControl2         = 2,   /**< \brief Access control for GxCHCTR2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   320      IfxEvadc_Protection_channelControl3         = 3,   /**< \brief Access control for GxCHCTR3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   321      IfxEvadc_Protection_channelControl4         = 4,   /**< \brief Access control for GxCHCTR4 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   322      IfxEvadc_Protection_channelControl5         = 5,   /**< \brief Access control for GxCHCTR5 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   323      IfxEvadc_Protection_channelControl6         = 6,   /**< \brief Access control for GxCHCTR6 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   324      IfxEvadc_Protection_channelControl7         = 7,   /**< \brief Access control for GxCHCTR7 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   325      IfxEvadc_Protection_channelControl8         = 8,   /**< \brief Access control for GxCHCTR8 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   326      IfxEvadc_Protection_channelControl9         = 9,   /**< \brief Access control for GxCHCTR9 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   327      IfxEvadc_Protection_channelControl10        = 10,  /**< \brief Access control for GxCHCTR10 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   328      IfxEvadc_Protection_channelControl11        = 11,  /**< \brief Access control for GxCHCTR11 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   329      IfxEvadc_Protection_channelControl12        = 12,  /**< \brief Access control for GxCHCTR12 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   330      IfxEvadc_Protection_channelControl13        = 13,  /**< \brief Access control for GxCHCTR13 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   331      IfxEvadc_Protection_channelControl14        = 14,  /**< \brief Access control for GxCHCTR14 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   332      IfxEvadc_Protection_initGroup0              = 16,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   333      IfxEvadc_Protection_initGroup1              = 17,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   334      IfxEvadc_Protection_initGroup2              = 18,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   335      IfxEvadc_Protection_initGroup3              = 19,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   336      IfxEvadc_Protection_initGroup4              = 20,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   337      IfxEvadc_Protection_initGroup5              = 21,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   338      IfxEvadc_Protection_initGroup6              = 22,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   339      IfxEvadc_Protection_initGroup7              = 23,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   340      IfxEvadc_Protection_initGroup8              = 24,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   341      IfxEvadc_Protection_initGroup9              = 25,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   342      IfxEvadc_Protection_initGroup10             = 26,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   343      IfxEvadc_Protection_initGroup11             = 27,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   344      IfxEvadc_Protection_initGroup12             = 28,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   345      IfxEvadc_Protection_initGroup13             = 29,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   346      IfxEvadc_Protection_initGroup14             = 30,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   347      IfxEvadc_Protection_serviceGroup0           = 32,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   348      IfxEvadc_Protection_serviceGroup1           = 33,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   349      IfxEvadc_Protection_serviceGroup2           = 34,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   350      IfxEvadc_Protection_serviceGroup3           = 35,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   351      IfxEvadc_Protection_serviceGroup4           = 36,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   352      IfxEvadc_Protection_serviceGroup5           = 37,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   353      IfxEvadc_Protection_serviceGroup6           = 38,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   354      IfxEvadc_Protection_serviceGroup7           = 39,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   355      IfxEvadc_Protection_serviceGroup8           = 40,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   356      IfxEvadc_Protection_serviceGroup9           = 41,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   357      IfxEvadc_Protection_serviceGroup10          = 42,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   358      IfxEvadc_Protection_serviceGroup11          = 43,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   359      IfxEvadc_Protection_serviceGroup12          = 44,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   360      IfxEvadc_Protection_serviceGroup13          = 45,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   361      IfxEvadc_Protection_serviceGroup14          = 46,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   362      IfxEvadc_Protection_resultRegisterGroup0    = 48,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   363      IfxEvadc_Protection_resultRegisterGroup1    = 49,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   364      IfxEvadc_Protection_resultRegisterGroup2    = 50,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   365      IfxEvadc_Protection_resultRegisterGroup3    = 51,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   366      IfxEvadc_Protection_resultRegisterGroup4    = 52,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   367      IfxEvadc_Protection_resultRegisterGroup5    = 53,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   368      IfxEvadc_Protection_resultRegisterGroup6    = 54,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   369      IfxEvadc_Protection_resultRegisterGroup7    = 55,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   370      IfxEvadc_Protection_resultRegisterGroup8    = 56,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   371      IfxEvadc_Protection_resultRegisterGroup9    = 57,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   372      IfxEvadc_Protection_resultRegisterGroup10   = 58,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   373      IfxEvadc_Protection_resultRegisterGroup11   = 59,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   374      IfxEvadc_Protection_resultRegisterGroup12   = 60,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   375      IfxEvadc_Protection_resultRegisterGroup13   = 61,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   376      IfxEvadc_Protection_resultRegisterGroup14   = 62,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   377      IfxEvadc_Protection_initFastCompareChannel0 = 64,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   378                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   379      IfxEvadc_Protection_initFastCompareChannel1 = 65,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   380                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   381      IfxEvadc_Protection_initFastCompareChannel2 = 66,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   382                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   383      IfxEvadc_Protection_initFastCompareChannel3 = 67,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   384                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   385      IfxEvadc_Protection_initFastCompareChannel4 = 68,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   386                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   387      IfxEvadc_Protection_initFastCompareChannel5 = 69,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   388                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   389      IfxEvadc_Protection_initFastCompareChannel6 = 70,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   390                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   391      IfxEvadc_Protection_initFastCompareChannel7 = 71,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   392                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   393      IfxEvadc_Protection_globalConfig            = 80,  /**< \brief Access control for GLOBCFG */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   394      IfxEvadc_Protection_externalMultiplexer     = 81,  /**< \brief Access control for EMUXSEL, GxEMUXCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   395      IfxEvadc_Protection_testFunction            = 82   /**< \brief Access control for GLOBTF */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   396  } IfxEvadc_Protection;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   397  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   398  /** \brief Arbitration priority, Group x,defined in MODULE_EVADC.G[x].ARBPR.PRIOy(x=0,1,...,11;y=0,1,2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   399   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   400  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   401  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   402      IfxEvadc_RequestSlotPriority_lowest  = 0, /**< \brief Lowest priority */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   403      IfxEvadc_RequestSlotPriority_low     = 1, /**< \brief Lowpriority */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   404      IfxEvadc_RequestSlotPriority_high    = 2, /**< \brief High priority */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   405      IfxEvadc_RequestSlotPriority_highest = 3  /**< \brief Highest priority */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   406  } IfxEvadc_RequestSlotPriority;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   407  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   408  /** \brief Request source start mode defined in MODULE_EVADC.G[x].ARBPR.CSMy(x=0,1,...,11;y=0,1,2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   409   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   410  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   411  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   412      IfxEvadc_RequestSlotStartMode_waitForStart       = 0, /**< \brief Wait for start */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   413      IfxEvadc_RequestSlotStartMode_cancelInjectRepeat = 1  /**< \brief Cancel-Inject-Repeat */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   414  } IfxEvadc_RequestSlotStartMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   415  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   416  /** \brief Request sources
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   417   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   418  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   419  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   420      IfxEvadc_RequestSource_queue0 = 0,  /**< \brief 8 stage Queue0 request */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   421      IfxEvadc_RequestSource_queue1 = 1,  /**< \brief 8 stage Queue1 request */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   422      IfxEvadc_RequestSource_queue2 = 2   /**< \brief 8 stage Queue2 request */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   423  } IfxEvadc_RequestSource;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   424  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   425  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   426   * Definition in Ifx_EVADC.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   427   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   428  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   429  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   430      IfxEvadc_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   431      IfxEvadc_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   432  } IfxEvadc_SleepMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   433  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   434  /** \brief Service Node defined in MODULE_EVADC.G[x].SRACT.U(x= 0,1,..,11)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   435   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   436  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   437  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   438      IfxEvadc_SrcNr_group0  = 0,  /**< \brief service request line 0 of group */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   439      IfxEvadc_SrcNr_group1  = 1,  /**< \brief service request line 1 of group */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   440      IfxEvadc_SrcNr_group2  = 2,  /**< \brief service request line 2 of group */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   441      IfxEvadc_SrcNr_group3  = 3,  /**< \brief service request line 3 of group */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   442      IfxEvadc_SrcNr_shared0 = 4,  /**< \brief Select shared service request line 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   443      IfxEvadc_SrcNr_shared1 = 5,  /**< \brief Select shared service request line 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   444      IfxEvadc_SrcNr_shared2 = 6,  /**< \brief Select shared service request line 2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   445      IfxEvadc_SrcNr_shared3 = 7   /**< \brief Select shared service request line 3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   446  } IfxEvadc_SrcNr;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   447  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   448  /** \brief API return values defined in
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   449   * MODULE_EVADC.G[x].QSR0.U,MODULE_EVADC.G[x].QSR1.U,MODULE_EVADC.G[x].QSR2.U(x=0,1,...,11)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   450   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   451  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   452  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   453      IfxEvadc_Status_noError              = 0, /**< \brief No error during api execution */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   454      IfxEvadc_Status_notInitialised       = 1, /**< \brief Appropriate initialisation not done */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   455      IfxEvadc_Status_invalidGroup         = 2, /**< \brief Invalid group number */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   456      IfxEvadc_Status_invalidChannel       = 3, /**< \brief Invalid channel number */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   457      IfxEvadc_Status_queueFull            = 4, /**< \brief Queue is full */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   458      IfxEvadc_Status_noAccess             = 5, /**< \brief Access to the group/channel is disabled */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   459      IfxEvadc_Status_channelsStillPending = 6  /**< \brief Conversion for some of the channels are still pending */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   460  } IfxEvadc_Status;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   461  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   462  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   463   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   464  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   465  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   466      IfxEvadc_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   467      IfxEvadc_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   468      IfxEvadc_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   469  } IfxEvadc_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   470  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   471  /** \brief trigger definition defined in MODULE_EVADC.G[x].QCTRL0.XTMODE(x=0,1,..,11)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   472   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   473  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   474  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   475      IfxEvadc_TriggerMode_noExternalTrigger = 0,  /**< \brief No external trigger */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   476      IfxEvadc_TriggerMode_uponFallingEdge   = 1,  /**< \brief Trigger event upon a falling edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   477      IfxEvadc_TriggerMode_uponRisingEdge    = 2,  /**< \brief Trigger event upon a rising edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   478      IfxEvadc_TriggerMode_uponAnyEdge       = 3   /**< \brief Trigger event upon any edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   479  } IfxEvadc_TriggerMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   480  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   481  /** \brief Trigger request source defined in MODULE_EVADC.G[x].QCTRLy.XTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   482   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   483  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   484  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   485      IfxEvadc_TriggerSource_0 = 0,      /**< \brief Input signal REQTRx_0  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   486      IfxEvadc_TriggerSource_1,          /**< \brief Input signal REQTRx_1  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   487      IfxEvadc_TriggerSource_2,          /**< \brief Input signal REQTRx_2  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   488      IfxEvadc_TriggerSource_3,          /**< \brief Input signal REQTRx_3  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   489      IfxEvadc_TriggerSource_4,          /**< \brief Input signal REQTRx_4  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   490      IfxEvadc_TriggerSource_5,          /**< \brief Input signal REQTRx_5  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   491      IfxEvadc_TriggerSource_6,          /**< \brief Input signal REQTRx_6  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   492      IfxEvadc_TriggerSource_7,          /**< \brief Input signal REQTRx_7  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   493      IfxEvadc_TriggerSource_8,          /**< \brief Input signal REQTRx_8  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   494      IfxEvadc_TriggerSource_9,          /**< \brief Input signal REQTRx_9  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   495      IfxEvadc_TriggerSource_10,         /**< \brief Input signal REQTRx_10  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   496      IfxEvadc_TriggerSource_11,         /**< \brief Input signal REQTRx_11  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   497      IfxEvadc_TriggerSource_12,         /**< \brief Input signal REQTRx_12  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   498      IfxEvadc_TriggerSource_13,         /**< \brief Input signal REQTRx_13  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   499      IfxEvadc_TriggerSource_14,         /**< \brief Input signal REQTRx_14  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   500      IfxEvadc_TriggerSource_15          /**< \brief Input signal REQTRx_15  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   501  } IfxEvadc_TriggerSource;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   502  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   503  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   504  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   505  /** \addtogroup IfxLld_Evadc_Std_FastCompare
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   506   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   507  /** \brief Selects the behaviour of BoundaryFlag in FCBFL.B.BFA
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   508   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   509  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   510  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   511      IfxEvadc_BoundaryFlagActivationMode_0 = 0,  /**< \brief Set boundary flag BFL if result FCR = 1 (input above the defined
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   512                                                   * band or compare value), clear if FCR = 0 (input below) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   513      IfxEvadc_BoundaryFlagActivationMode_1 = 1   /**< \brief Set boundary flag BFL if result FCR = 0 (input below the defined
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   514                                                   * band or compare value), clear if FCR = 1 (input above) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   515  } IfxEvadc_BoundaryFlagActivationMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   516  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   517  /** \brief Controls in in FCBFL.B.BFI options for whether to use Boundary Flag(FCM.B.BFL) directly or in a inverted format.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   518   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   519  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   520  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   521      IfxEvadc_BoundaryFlagInversionControl_direct = 0,  /**< \brief Use BFL directly */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   522      IfxEvadc_BoundaryFlagInversionControl_invert = 1   /**< \brief Use inverted BFL */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   523  } IfxEvadc_BoundaryFlagInversionControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   524  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   525  /** \brief Options for FCBFL.B.BFLNP to select Boundary Flag Node Pointer
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   526   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   527  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   528  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   529      IfxEvadc_BoundaryFlagNodePointer_commonBoundaryFlagOutput0 = 0,  /**< \brief Select common boundary flag output 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   530      IfxEvadc_BoundaryFlagNodePointer_commonBoundaryFlagOutput1 = 1,  /**< \brief Select common boundary flag output 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   531      IfxEvadc_BoundaryFlagNodePointer_commonBoundaryFlagOutput2 = 2,  /**< \brief Select common boundary flag output 2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   532      IfxEvadc_BoundaryFlagNodePointer_commonBoundaryFlagOutput3 = 3,  /**< \brief Select common boundary flag output 3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   533      IfxEvadc_BoundaryFlagNodePointer_sharedServiceRequestLine0 = 4,  /**< \brief Select shared service request line 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   534      IfxEvadc_BoundaryFlagNodePointer_sharedServiceRequestLine1 = 5,  /**< \brief Select shared service request line 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   535      IfxEvadc_BoundaryFlagNodePointer_sharedServiceRequestLine2 = 6,  /**< \brief Select shared service request line 2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   536      IfxEvadc_BoundaryFlagNodePointer_sharedServiceRequestLine3 = 7,  /**< \brief Select shared service request line 3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   537      IfxEvadc_BoundaryFlagNodePointer_disabled                  = 16  /**< \brief Disabled, no common output signal */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   538  } IfxEvadc_BoundaryFlagNodePointer;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   539  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   540  /** \brief Options for FCBFL.B.BFS to modify the Boundary Flag(FCM.B.BFL)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   541   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   542  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   543  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   544      IfxEvadc_BoundaryFlagSwControl_noAction = 0,  /**< \brief No Action */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   545      IfxEvadc_BoundaryFlagSwControl_clear    = 1,  /**< \brief Clear BFL */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   546      IfxEvadc_BoundaryFlagSwControl_set      = 2,  /**< \brief Set BFL */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   547      IfxEvadc_BoundaryFlagSwControl_toggle   = 3   /**< \brief Toggle BFL */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   548  } IfxEvadc_BoundaryFlagSwControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   549  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   550  /** \brief Channel Event Mode for configuring generation of events for Fast Compare channels in FCCTRL.B.CHEVMODE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   551   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   552  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   553  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   554      IfxEvadc_ChannelEventMode_never                    = 0, /**< \brief Never generate a service request */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   555      IfxEvadc_ChannelEventMode_aboveCompareValue        = 1, /**< \brief Generate a service request in case the result is above compare value */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   556      IfxEvadc_ChannelEventMode_belowCompareValue        = 2, /**< \brief Generate a service request in case the result is below compare value */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   557      IfxEvadc_ChannelEventMode_aboveOrBelowCompareValue = 3  /**< \brief Generate a service request in case the result switches to either level(above or below the compare value) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   558  } IfxEvadc_ChannelEventMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   559  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   560  /** \brief Defines the frequency of the analog converter clock f_ADCI (base clock for
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   561   * conversion steps), derived from the peripheral clock: f_ADCI = fADC / CP.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   562   * To be filled in FCCTRL.B.DIVA for Fast Compare channels & ANCFG.B.DIVA for other groups
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   563   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   564  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   565  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   566      IfxEvadc_ClockDividerFactor_maxFrequency = 0,  /**< \brief Max. frequency */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   567      IfxEvadc_ClockDividerFactor_2            = 1,  /**< \brief Frequency Divided by 2  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   568      IfxEvadc_ClockDividerFactor_3,                 /**< \brief Frequency Divided by 3  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   569      IfxEvadc_ClockDividerFactor_4,                 /**< \brief Frequency Divided by 4  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   570      IfxEvadc_ClockDividerFactor_5,                 /**< \brief Frequency Divided by 5  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   571      IfxEvadc_ClockDividerFactor_6,                 /**< \brief Frequency Divided by 6  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   572      IfxEvadc_ClockDividerFactor_7,                 /**< \brief Frequency Divided by 7  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   573      IfxEvadc_ClockDividerFactor_8,                 /**< \brief Frequency Divided by 8  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   574      IfxEvadc_ClockDividerFactor_9,                 /**< \brief Frequency Divided by 9  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   575      IfxEvadc_ClockDividerFactor_10,                /**< \brief Frequency Divided by 10  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   576      IfxEvadc_ClockDividerFactor_11,                /**< \brief Frequency Divided by 11  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   577      IfxEvadc_ClockDividerFactor_12,                /**< \brief Frequency Divided by 12  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   578      IfxEvadc_ClockDividerFactor_13,                /**< \brief Frequency Divided by 13  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   579      IfxEvadc_ClockDividerFactor_14,                /**< \brief Frequency Divided by 14  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   580      IfxEvadc_ClockDividerFactor_15,                /**< \brief Frequency Divided by 15  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   581      IfxEvadc_ClockDividerFactor_16,                /**< \brief Frequency Divided by 16  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   582      IfxEvadc_ClockDividerFactor_17,                /**< \brief Frequency Divided by 17  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   583      IfxEvadc_ClockDividerFactor_18,                /**< \brief Frequency Divided by 18  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   584      IfxEvadc_ClockDividerFactor_19,                /**< \brief Frequency Divided by 19  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   585      IfxEvadc_ClockDividerFactor_20,                /**< \brief Frequency Divided by 20  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   586      IfxEvadc_ClockDividerFactor_21,                /**< \brief Frequency Divided by 21  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   587      IfxEvadc_ClockDividerFactor_22,                /**< \brief Frequency Divided by 22  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   588      IfxEvadc_ClockDividerFactor_23,                /**< \brief Frequency Divided by 23  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   589      IfxEvadc_ClockDividerFactor_24,                /**< \brief Frequency Divided by 24  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   590      IfxEvadc_ClockDividerFactor_25,                /**< \brief Frequency Divided by 25  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   591      IfxEvadc_ClockDividerFactor_26,                /**< \brief Frequency Divided by 26  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   592      IfxEvadc_ClockDividerFactor_27,                /**< \brief Frequency Divided by 27  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   593      IfxEvadc_ClockDividerFactor_28,                /**< \brief Frequency Divided by 28  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   594      IfxEvadc_ClockDividerFactor_29,                /**< \brief Frequency Divided by 29  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   595      IfxEvadc_ClockDividerFactor_30,                /**< \brief Frequency Divided by 30  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   596      IfxEvadc_ClockDividerFactor_31,                /**< \brief Frequency Divided by 31  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   597      IfxEvadc_ClockDividerFactor_32                 /**< \brief Frequency Divided by 32  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   598  } IfxEvadc_ClockDividerFactor;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   599  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   600  /** \brief External Trigger Polarity to be set in FCCTRL.B.XTPOL
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   601   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   602  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   603  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   604      IfxEvadc_ExternalTriggerPolarity_direct   = 0, /**< \brief Use selected input signal directly */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   605      IfxEvadc_ExternalTriggerPolarity_inverted = 1  /**< \brief Invert selected input signal */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   606  } IfxEvadc_ExternalTriggerPolarity;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   607  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   608  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   609  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   610      IfxEvadc_FastCompareAnalogClockSynchronizationDelay_0 = 0,  /**< \brief No delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   611      IfxEvadc_FastCompareAnalogClockSynchronizationDelay_1 = 1,  /**< \brief 1 clock cycle delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   612      IfxEvadc_FastCompareAnalogClockSynchronizationDelay_2 = 2,  /**< \brief 2 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   613      IfxEvadc_FastCompareAnalogClockSynchronizationDelay_3 = 3   /**< \brief 3 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   614  } IfxEvadc_FastCompareAnalogClockSynchronizationDelay;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   615  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   616  /** \brief Settings for Analog Coverter Controller to be done in FCM.B.ANON
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   617   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   618  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   619  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   620      IfxEvadc_FastCompareAnalogConverterControl_off    = 0, /**< \brief Analog converter off */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   621      IfxEvadc_FastCompareAnalogConverterControl_normal = 1  /**< \brief Normal operation */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   622  } IfxEvadc_FastCompareAnalogConverterControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   623  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   624  /** \brief Defines the source of the value(s) in bitfield FCM.B.FCREF
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   625   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   626   * Note: Software can only write to bitfield FCM.B.FCREF, while AUE = 00B.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   627   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   628  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   629  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   630      IfxEvadc_FastCompareAutomaticUpdate_sw             = 0,  /**< \brief No automatic update.Value(s) written by software. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   631      IfxEvadc_FastCompareAutomaticUpdate_alternateValue = 1,  /**< \brief While gate is active (high), value is copied from bitfield FCM.B.FCRCOMPA and while gate is inactive (low), value is copied from bitfield FCM.B.FCRCOMPB */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   632      IfxEvadc_FastCompareAutomaticUpdate_rampCounter    = 2,  /**< \brief Value(s) copied from ramp counter on ramp start or counter
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   633                                                                * update. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   634      IfxEvadc_FastCompareAutomaticUpdate_analogSource   = 3   /**< \brief Value(s) written by the associated converter */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   635  } IfxEvadc_FastCompareAutomaticUpdate;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   636  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   637  /** \brief Defines the basic run conditions of the fast compare channel in FCM.B.RUNCOMP
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   638   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   639  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   640  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   641      IfxEvadc_FastCompareRunControl_stop      = 0, /**< \brief Stop, no operation */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   642      IfxEvadc_FastCompareRunControl_alwaysRun = 1  /**< \brief Always run */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   643  } IfxEvadc_FastCompareRunControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   644  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   645  /** \brief Criteria/mode settings for service request generation in FCM.B.SRG
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   646   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   647  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   648  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   649      IfxEvadc_FastCompareServiceRequestGeneration_off       = 0, /**< \brief No service requests are generated */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   650      IfxEvadc_FastCompareServiceRequestGeneration_rampEnd   = 1, /**< \brief Issue service request when the ramp counter stops */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   651      IfxEvadc_FastCompareServiceRequestGeneration_newValue  = 2, /**< \brief Issue service request when a value is written to FCREF */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   652      IfxEvadc_FastCompareServiceRequestGeneration_newResult = 3  /**< \brief Issue service request when a new result available */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   653  } IfxEvadc_FastCompareServiceRequestGeneration;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   654  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   655  /** \brief Gate Operating Mode to be filled in FCCTRL.B.GTMODE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   656   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   657  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   658  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   659      IfxEvadc_GateOperatingMode_noGateFunction     = 0,  /**< \brief No gate function */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   660      IfxEvadc_GateOperatingMode_alternateValueMode = 1,  /**< \brief Alternate value mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   661      IfxEvadc_GateOperatingMode_lockBoundaryFlag   = 2   /**< \brief Lock boundary flag */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   662  } IfxEvadc_GateOperatingMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   663  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   664  /** \brief Ramp direction setting in FCM.B.FCRDIR
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   665   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   666  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   667  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   668      IfxEvadc_RampDirection_down = 0,  /**< \brief Decrement ramp counter and stop when counter <= FCRCOMPB */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   669      IfxEvadc_RampDirection_up   = 1   /**< \brief Increment ramp counter and stop when counter >= FCRCOMPB */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   670  } IfxEvadc_RampDirection;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   671  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   672  /** \brief Defines the run conditions for the ramp generation in FCM.B.RUNRAMP
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   673   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   674  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   675  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   676      IfxEvadc_RampRunControl_stop = 0,  /**< \brief Stop, no operation */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   677      IfxEvadc_RampRunControl_1    = 1,  /**< \brief Start immediately when GxFCRAMP0/1 is written */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   678      IfxEvadc_RampRunControl_2    = 2,  /**< \brief Start upon the selected trigger event of signal REQTRx */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   679      IfxEvadc_RampRunControl_3    = 3   /**< \brief Start immediately when GxFCRAMP0/1 is written and
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   680                                          * stop upon the selected trigger event of signal REQTRx */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   681  } IfxEvadc_RampRunControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   682  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   683  /** \brief Sample timing sync settings for FCM.B.SSE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   684   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   685  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   686  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   687      IfxEvadc_SampleSynchronization_off                     = 0, /**< \brief No synchronization */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   688      IfxEvadc_SampleSynchronization_synchronizeSampleTiming = 1  /**< \brief Sample timing is synchronized.This is recommended for operation of several ADCs. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   689  } IfxEvadc_SampleSynchronization;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   690  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   691  /** \brief Trigger operating mode in Fast Compare channels, to be entered in FCCTRL.B.XTMODE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   692   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   693  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   694  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   695      IfxEvadc_TriggerOperatingMode_noExternalTrigger = 0,  /**< \brief No external trigger */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   696      IfxEvadc_TriggerOperatingMode_fallingEdge       = 1,  /**< \brief Trigger event upon a falling edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   697      IfxEvadc_TriggerOperatingMode_risingEdge        = 2,  /**< \brief Trigger event upon a rising edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   698      IfxEvadc_TriggerOperatingMode_anyEdge           = 3   /**< \brief Trigger event upon any edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   699  } IfxEvadc_TriggerOperatingMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   700  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   701  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   702  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   703  /** \brief Defines the way the analog clock is generated.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   704   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   705  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   706  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   707      IfxEvadc_AnalogClockGenerationMode_synchronized   = 0, /**< \brief Synchronized mode: Initial clock pulse is defined by the phase synchronizer */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   708      IfxEvadc_AnalogClockGenerationMode_unsynchronized = 1  /**< \brief Unsynchronized mode: The analog clock is generated independently. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   709  } IfxEvadc_AnalogClockGenerationMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   710  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   711  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   712  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   713      IfxEvadc_AnalogClockSynchronizationDelay_0 = 0,  /**< \brief No Delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   714      IfxEvadc_AnalogClockSynchronizationDelay_1 = 1,  /**< \brief 1 clock cycle delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   715      IfxEvadc_AnalogClockSynchronizationDelay_2 = 2,  /**< \brief 2 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   716      IfxEvadc_AnalogClockSynchronizationDelay_3 = 3,  /**< \brief 3 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   717      IfxEvadc_AnalogClockSynchronizationDelay_4 = 4,  /**< \brief 4 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   718      IfxEvadc_AnalogClockSynchronizationDelay_5 = 5,  /**< \brief 5 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   719      IfxEvadc_AnalogClockSynchronizationDelay_6 = 6,  /**< \brief 6 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   720      IfxEvadc_AnalogClockSynchronizationDelay_7 = 7   /**< \brief 7 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   721  } IfxEvadc_AnalogClockSynchronizationDelay;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   722  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   723  /** \brief Analog Input Precharge Control for Standard Conversions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   724   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   725  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   726  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   727      IfxEvadc_AnalogInputPrechargeControl_noPrecharge = 0,  /**< \brief No Precharge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   728      IfxEvadc_AnalogInputPrechargeControl_8Cycles     = 1,  /**< \brief Precharge for 8 clock cycles */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   729      IfxEvadc_AnalogInputPrechargeControl_16Cycles    = 2,  /**< \brief Precharge for 16 clock cycles */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   730      IfxEvadc_AnalogInputPrechargeControl_32cycles    = 3   /**< \brief Precharge for 32 clock cycles */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   731  } IfxEvadc_AnalogInputPrechargeControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   732  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   733  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   734  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   735      IfxEvadc_ArbitrationMode_0 = 0,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   736      IfxEvadc_ArbitrationMode_1 = 1
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   737  } IfxEvadc_ArbitrationMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   738  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   739  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   740  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   741      IfxEvadc_CalibrationSampleTimeControl_2 = 0,  /**< \brief 2*t_ADCI */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   742      IfxEvadc_CalibrationSampleTimeControl_4 = 1,  /**< \brief 4*t_ADCI */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   743      IfxEvadc_CalibrationSampleTimeControl_6 = 2,  /**< \brief 6*t_ADCI */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   744      IfxEvadc_CalibrationSampleTimeControl_8 = 3   /**< \brief 8*t_ADCI */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   745  } IfxEvadc_CalibrationSampleTimeControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   746  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   747  /** \brief Conversion Mode for standard Conversion
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   748   *  channel precision defined in MODULE_EVADC.G[x].CHCTR[y].B.ICLASS[y].B.CMS(x=0,1,...,11;y=0,1)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   749   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   750  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   751  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   752      IfxEvadc_ChannelNoiseReduction_standardConversion = 0,  /**< \brief Standard Conversions mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   753      IfxEvadc_ChannelNoiseReduction_level1             = 1,  /**< \brief Noise reduction conversion level 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   754      IfxEvadc_ChannelNoiseReduction_level2             = 2,  /**< \brief Noise reduction conversion level 2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   755      IfxEvadc_ChannelNoiseReduction_level3             = 3   /**< \brief Noise reduction conversion level 3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   756  } IfxEvadc_ChannelNoiseReduction;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   757  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   758  /** \brief Conversion Mode for EMUX Conversions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   759   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   760  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   761  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   762      IfxEvadc_ChannelNoiseReductionEMUX_standardConversion = 0,  /**< \brief Standard conversion */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   763      IfxEvadc_ChannelNoiseReductionEMUX_level1             = 1,  /**< \brief Noise reduction conversion level 1, 1 additional conversion step */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   764      IfxEvadc_ChannelNoiseReductionEMUX_level2             = 2,  /**< \brief Noise reduction conversion level 2, 3 additional conversion steps */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   765      IfxEvadc_ChannelNoiseReductionEMUX_level3             = 3   /**< \brief Noise reduction conversion level 3, 7 additional conversion steps */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   766  } IfxEvadc_ChannelNoiseReductionEMUX;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   767  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   768  /** \brief Data Modification Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   769   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   770  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   771  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   772      IfxEvadc_DataModificationMode_standardDataReduction = 0,  /**< \brief Standard Data Reduction */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   773      IfxEvadc_DataModificationMode_resultFilteringMode   = 1,  /**< \brief Result Filtering Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   774      IfxEvadc_DataModificationMode_differenceMode        = 2   /**< \brief Difference Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   775  } IfxEvadc_DataModificationMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   776  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   777  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   778  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   779      IfxEvadc_DataReductionControlMode_0  = 0,   /**< \brief If DMM=0b00, Data reduction disabled,if DMM=0b01, FIR:a=2,b=1,c=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   780      IfxEvadc_DataReductionControlMode_1  = 1,   /**< \brief If DMM=0b00, Accumulate 2 result values,if DMM=0b01, FIR:a=1,b=2,c=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   781      IfxEvadc_DataReductionControlMode_2  = 2,   /**< \brief If DMM=0b00, Accumulate 3 result values,if DMM=0b01, FIR:a=2,b=0,c=1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   782      IfxEvadc_DataReductionControlMode_3  = 3,   /**< \brief If DMM=0b00, Accumulate 4 result values,if DMM=0b01, FIR:a=1,b=1,c=1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   783      IfxEvadc_DataReductionControlMode_4  = 4,   /**< \brief If DMM=0b00, Accumulate 5 result values,if DMM=0b01, FIR:a=1,b=0,c=2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   784      IfxEvadc_DataReductionControlMode_5  = 5,   /**< \brief If DMM=0b00, Accumulate 6 result values,if DMM=0b01, FIR:a=3,b=1,c=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   785      IfxEvadc_DataReductionControlMode_6  = 6,   /**< \brief If DMM=0b00, Accumulate 7 result values,if DMM=0b01, FIR:a=2,b=2,c=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   786      IfxEvadc_DataReductionControlMode_7  = 7,   /**< \brief If DMM=0b00, Accumulate 8 result values,if DMM=0b01, FIR:a=1,b=3,c=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   787      IfxEvadc_DataReductionControlMode_8  = 8,   /**< \brief If DMM=0b00, Accumulate 9 result values,if DMM=0b01, FIR:a=3,b=0,c=1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   788      IfxEvadc_DataReductionControlMode_9  = 9,   /**< \brief If DMM=0b00, Accumulate 10 result values,if DMM=0b01, FIR:a=2,b=1,c=1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   789      IfxEvadc_DataReductionControlMode_10 = 10,  /**< \brief If DMM=0b00, Accumulate 11 result values,if DMM=0b01, FIR:a=1,b=2,c=1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   790      IfxEvadc_DataReductionControlMode_11 = 11,  /**< \brief If DMM=0b00, Accumulate 12 result values,if DMM=0b01, FIR:a=2,b=0,c=2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   791      IfxEvadc_DataReductionControlMode_12 = 12,  /**< \brief If DMM=0b00, Accumulate 13 result values,if DMM=0b01, FIR:a=1,b=1,c=2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   792      IfxEvadc_DataReductionControlMode_13 = 13,  /**< \brief If DMM=0b00, Accumulate 14 result values,if DMM=0b01, FIR:a=1,b=0,c=3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   793      IfxEvadc_DataReductionControlMode_14 = 14,  /**< \brief If DMM=0b00, Accumulate 15 result values,if DMM=0b01, IIR:a=2,b=2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   794      IfxEvadc_DataReductionControlMode_15 = 15   /**< \brief If DMM=0b00, Accumulate 16 result values,if DMM=0b01, IIR:a=3,b=4 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   795  } IfxEvadc_DataReductionControlMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   796  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   797  /** \brief Contains options for Idle Precharge levels
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   798   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   799  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   800  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   801      IfxEvadc_IdlePrecharge_currentLevel = 0,  /**< \brief The sampling capacitor keeps the current charge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   802      IfxEvadc_IdlePrecharge_referenceBy2 = 1   /**< \brief ThSampling capacitor is precharged to approx. half the reference when idle */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   803  } IfxEvadc_IdlePrecharge;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   804  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   805  /** \brief Selects the MSB conversion time(in terms of t_ADC)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   806   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   807  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   808  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   809      IfxEvadc_MsbConversionTime_singleClockCycle = 0,  /**< \brief 1 clock cycle for the MSB (standard) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   810      IfxEvadc_MsbConversionTime_doubleClockCycle = 1   /**< \brief 2 clock cycle for the MSB */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   811  } IfxEvadc_MsbConversionTime;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   812  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   813  /** \brief Reference Precharge Control
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   814   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   815  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   816  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   817      IfxEvadc_ReferencePrechargeControl_singleClockPhase  = 0, /**< \brief Precharge the reference input for 1 clock phase */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   818      IfxEvadc_ReferencePrechargeControl_singleClockPeriod = 1  /**< \brief Precharge the reference input for 1 clock period */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   819  } IfxEvadc_ReferencePrechargeControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   820  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   821  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   822  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   823      IfxEvadc_SpreadEarlySamplePointEMUXConversionsMode_nominal = 0,  /**< \brief Nominal sample timing */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   824      IfxEvadc_SpreadEarlySamplePointEMUXConversionsMode_spread  = 1   /**< \brief Spread sample timing, end of sample phase is varied */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   825  } IfxEvadc_SpreadEarlySamplePointEMUXConversionsMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   826  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   827  /** \brief Spread Early Sample Point for Standard Conversions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   828   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   829  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   830  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   831      IfxEvadc_SpreadEarlySamplePointStandardConversionsMode_nominal = 0,  /**< \brief Nominal sample timing */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   832      IfxEvadc_SpreadEarlySamplePointStandardConversionsMode_spread  = 1   /**< \brief Spread sample timing, end of sample phase is varied */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   833  } IfxEvadc_SpreadEarlySamplePointStandardConversionsMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   834  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   835  /** \brief The 0-1 transition of bit SUCAL initiates the start-up calibrationphase of
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   836   * all analog converters (except for the fast compare channels).
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   837   * Note: The start-up calibration will abort any running conversion
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   838   * and cannot be stopped before it is complete.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   839   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   840  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   841  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   842      IfxEvadc_StartupCalibration_noAction = 0,  /**< \brief No action */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   843      IfxEvadc_StartupCalibration_initiate = 1   /**< \brief Initiate the start-up calibration phase
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   844                                                  * (indication in bit GxARBCFG.CAL) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   845  } IfxEvadc_StartupCalibration;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   846  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   847  /** \brief Adjusts the analog circuitry to the supply voltage used in the application
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   848   * system. Make sure to keep SUPLEV = 0b00 or 0b01 in the case of a 5 V supply.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   849   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   850  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   851  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   852      IfxEvadc_SupplyVoltageLevelControl_automaticControl = 0,  /**< \brief Automatic control: voltage range is controlled by the power supply */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   853      IfxEvadc_SupplyVoltageLevelControl_upperVoltage     = 1,  /**< \brief Upper voltage range: assume a 5 V power supply is connected */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   854      IfxEvadc_SupplyVoltageLevelControl_lowerVoltage     = 2   /**< \brief Lower voltage range: assume a 3.3 V power supply is connected */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   855  } IfxEvadc_SupplyVoltageLevelControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   856  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   857  /** \brief Wait-for-Read Mode Enable
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   858   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   859  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   860  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   861      IfxEvadc_WaitForRead_overwriteMode = 0,  /**< \brief Overwrite Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   862      IfxEvadc_WaitForRead_enabled       = 1   /**< \brief Wait-for-read mode enabled for this register */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   863  } IfxEvadc_WaitForRead;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   864  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   865  /** \addtogroup IfxLld_Evadc_Std_Global
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   866   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   867  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   868  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   869  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   870  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   871  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   872  /** \brief access function to enable/disable  wait for read mode for result registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   873   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   874   * \param resultIdx result register index
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   875   * \param enabled wait for read mode enabled/disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   876   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   877   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   878  IFX_INLINE void IfxEvadc_configureWaitForReadMode(Ifx_EVADC_G *group, uint32 resultIdx, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   879  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   880  /** \brief access function to enable/disable  wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   881   * \param evadc pointer to the EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   882   * \param enabled wait for read mode enabled/disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   883   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   884   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   885  IFX_INLINE void IfxEvadc_configureWaitForReadModeForGlobalResultRegister(Ifx_EVADC *evadc, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   886  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   887  /** \brief get the ADC Module  noise reduction level
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   888   * \param evadc pointer to EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   889   * \param inputClassNum Adc Module input Class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   890   * \return Adc input class noise reduction level
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   891   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   892  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getGlobalConversionMode(Ifx_EVADC *evadc, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   893  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   894  /** \brief return conversion result stored in the Global result Register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   895   * \param evadc pointer to the EVADC module
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   896   * \return global result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   897   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   898   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   899   * Ifx_EVADC* evadc = &MODULE_EVADC; // module pointer
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   900   * IfxEvadc_GroupId groupId = IfxEvadc_GroupId0; // for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   901   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   902   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   903   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   904   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   905   * IfxEvadc_configureWaitForReadModeForGlobalResultRegister(evadc, TRUE);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   906   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   907   * // enable all arbiter request sources
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   908   * adcGroupConfig.arbiter.requestSlotQueue0Enabled           = TRUE; // enable Queue0 mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   909   * // enable all gates in "always" mode (no edge detection)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   910   * adcGroupConfig.queueRequest[0].triggerConfig.gatingMode = IfxEvadc_GatingMode_always;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   911   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   912   * // Add channel to queue with refill enabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   913   *  IfxEvadc_Adc_addToQueue(&adcChannel, IFXEVADC_QUEUE_REFILL, IfxEvadc_RequestSource_queue0);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   914   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   915   *  // start the Queue
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   916   *  IfxEvadc_Adc_startQueue(&adcGroup, IfxEvadc_RequestSource_queue0);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   917   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   918   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   919   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   920   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   921   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   922   * Ifx_EVADC_GLOB.RES result;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   923   * result = IfxVadc_getGlobalResult (evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   924   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   925   * \endcode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   926   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   927   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   928  IFX_INLINE Ifx_EVADC_GLOB_RES IfxEvadc_getGlobalResult(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   929  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   930  /** \brief Get Sample Time in sec
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   931   * \param evadc Pointer to EVADC Module
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   932   * \param inputClassNum ADC Input Class Number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   933   * \param analogFrequency ADC module analog frequency in Hz
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   934   * \return ADC input class channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   935   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   936  IFX_INLINE float32 IfxEvadc_getGlobalSampleTime(Ifx_EVADC *evadc, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   937  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   938  /** \brief Get conversion result (Function does not care about the alignment)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   939   * value = raw * gain + offset.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   940   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   941   * \param resultIdx result register index
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   942   * \return scaled Conversion result
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   943   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   944   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   945   * Ifx_EVADC_G* group = &MODULE_EVADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   946   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   947   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   948   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   949   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   950   * IfxEvadc_configureWaitForReadMode(group,IfxEvadc_ChannelResult0, TRUE);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   951   * IfxEvadc_configureWaitForReadMode(group,IfxEvadc_ChannelResult1, TRUE);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   952   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   953   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   954   * // Add channel to queue with refill enabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   955   *  IfxEvadc_Adc_addToQueue(&adcChannel, IfxEvadc_RequestSource_queue0, IFXEVADC_QUEUE_REFILL);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   956   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   957   * // start the Queue
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   958   *  IfxEvadc_Adc_startQueue(&adcGroup, IfxEvadc_RequestSource_queue0);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   959   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   960   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   961   * // wait for conversion to finish
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   962   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   963   * // fetch the result of conversion from result register 0 for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   964   * Ifx_EVADC_G_RES result;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   965   * result = IfxEvadc_getResult(group, IfxEvadc_ChannelResult0);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   966   * \endcode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   967   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   968   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   969  IFX_INLINE Ifx_EVADC_G_RES IfxEvadc_getResult(Ifx_EVADC_G *group, uint32 resultIdx);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   970  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   971  /** \brief Sets the sample time in sec of ADC global class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   972   * \param evadc pointer to EVADC module registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   973   * \param groupInputClassNum group input class  number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   974   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   975   * \param sampleTime the requested sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   976   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   977   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   978  IFX_INLINE void IfxEvadc_setGlobalSampleTime(Ifx_EVADC *evadc, uint8 groupInputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   979  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   980  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   981  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   982  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   983  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   984  /** \brief Get conversion result (Function does not care about the alignment)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   985   * value = raw * gain + offset.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   986   * \param evadc EVADC module pointer
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   987   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   988   * \param channel channel Id
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   989   * \param sourceType type of request source
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   990   * \return scaled Conversion result
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   991   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   992   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   993   * Ifx_EVADC evadc;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   994   * evadc.evadc = &MODULE_EVADC;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   995   * Ifx_EVADC_G* group = &MODULE_EVADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   996   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   997   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   998   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   999   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1000   * IfxEvadc_configureWaitForReadMode(group,IfxEvadc_ChannelResult0, TRUE);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1001   * IfxEvadc_configureWaitForReadMode(group,IfxEvadc_ChannelResult1, TRUE);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1002   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1003   * // Add channel to queue with refill enabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1004   *  IfxEvadc_Adc_addToQueue(&adcChannel, IfxEvadc_RequestSource_queue0, IFXEVADC_QUEUE_REFILL);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1005   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1006   * // start the Queue
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1007   *  IfxEvadc_Adc_startQueue(&adcGroup, IfxEvadc_RequestSource_queue0);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1008   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1009   * // fetch the result of conversion for channel 2 of group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1010   * Ifx_EVADC_G_RESresult2;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1011   * result = IfxEvadc_getResultBasedOnRequestSource(&evadc, group, IfxVadc_ChannelId2,IfxEvadc_RequestSource_queue0 );
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1012   * Ifx_EVADC_G_RESresult5;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1013   * result = IfxEvadc_getResultBasedOnRequestSource(&evadc, group, IfxEvadc_ChannelId5,IfxEvadc_RequestSource_queue0 );
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1014   * \endcode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1015   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1016   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1017  IFX_EXTERN Ifx_EVADC_G_RES IfxEvadc_getResultBasedOnRequestSource(Ifx_EVADC *evadc, Ifx_EVADC_G *group, IfxEvadc_ChannelId channel, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1018  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1019  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1020  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1021  /** \addtogroup IfxLld_Evadc_Std_QueueRequest
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1022   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1023  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1024  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1025  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1026  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1027  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1028  /** \brief Clears all the queue entries including backup stage.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1029   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1030   * \param flushQueue Whether queue is cleared or not.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1031   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1032   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1033   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1034  IFX_INLINE void IfxEvadc_clearQueue(Ifx_EVADC_G *evadcG, boolean flushQueue, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1035  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1036  /** \brief Starts a queue of a group by generating a trigger event through software
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1037   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1038   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1039   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1040   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1041  IFX_INLINE void IfxEvadc_startQueue(Ifx_EVADC_G *group, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1042  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1043  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1044  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1045  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1046  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1047  /** \brief Add an entry to the queue of a group for the specified channel with the following options set:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1048   * refill incase of aborted conversion
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1049   * source interrupt enable/disable
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1050   * external trigger control of the aborted conversion
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1051   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1052   * \param channel specifies channel Id
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1053   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1054   * \param options specifies the refill, source interrupt enable/disable and external trigger control selection
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1055   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1056   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1057   * For coding example see: \ref IfxEvadc_Adc_getResult
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1058   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1059   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1060  IFX_EXTERN void IfxEvadc_addToQueue(Ifx_EVADC_G *group, IfxEvadc_ChannelId channel, IfxEvadc_RequestSource sourceType, uint32 options);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1061  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1062  /** \brief Disables the external trigger.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1063   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1064   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1065   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1066   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1067  IFX_EXTERN void IfxEvadc_disableQueueSlotExternalTrigger(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1068  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1069  /** \brief Enables the external trigger.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1070   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1071   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1072   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1073   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1074  IFX_EXTERN void IfxEvadc_enableQueueSlotExternalTrigger(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1075  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1076  /** \brief Gets the requested queue slot gating mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1077   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1078   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1079   * \return requested queue0 slot gating mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1080   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1081  IFX_EXTERN IfxEvadc_GatingMode IfxEvadc_getQueueSlotGatingMode(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1082  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1083  /** \brief Gets the requested queue slot gating input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1084   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1085   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1086   * \return requested queue0 slot gating input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1087   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1088  IFX_EXTERN IfxEvadc_GatingSource IfxEvadc_getQueueSlotGatingSource(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1089  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1090  /** \brief Gets the request queue slot priority.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1091   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1092   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1093   * \return requested queue0 slot priority.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1094   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1095  IFX_EXTERN IfxEvadc_RequestSlotPriority IfxEvadc_getQueueSlotPriority(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1096  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1097  /** \brief Gets the requested queue slot start mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1098   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1099   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1100   * \return requested queue slot start mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1101   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1102  IFX_EXTERN IfxEvadc_RequestSlotStartMode IfxEvadc_getQueueSlotStartMode(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1103  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1104  /** \brief Gets the requested queue slot trigger input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1105   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1106   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1107   * \return requested queue slot trigger input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1108   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1109  IFX_EXTERN IfxEvadc_TriggerSource IfxEvadc_getQueueSlotTriggerInput(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1110  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1111  /** \brief Gets the requested queue slot trigger mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1112   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1113   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1114   * \return requested queue slot trigger mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1115   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1116  IFX_EXTERN IfxEvadc_TriggerMode IfxEvadc_getQueueSlotTriggerMode(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1117  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1118  /** \brief Gives the status of the Queue of a group by returning non zero value if the Queue is full
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1119   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1120   * \param sourceType sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1121   * \return status of the Queue
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1122   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1123   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1124   * Ifx_EVADC_G* group = &MODULE_EVADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1125   * boolean queueFull = (IfxEvadc_getQueueStatus(group)==IfxEvadc_Status_queueFull)?TRUE:FALSE; // get Queue status for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1126   * \endcode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1127   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1128   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1129  IFX_EXTERN IfxEvadc_Status IfxEvadc_getQueueStatus(Ifx_EVADC_G *group, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1130  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1131  /** \brief Returns the queue slot requested status.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1132   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1133   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1134   * \return TRUE if queue slot request enabled otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1135   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1136  IFX_EXTERN boolean IfxEvadc_isRequestQueueSlotEnabled(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1137  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1138  /** \brief Sets the gating configurations.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1139   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1140   * \param gatingSource gate input for group.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1141   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1142   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1143   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1144   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1145  IFX_EXTERN void IfxEvadc_setQueueSlotGatingConfig(Ifx_EVADC_G *evadcG, IfxEvadc_GatingSource gatingSource, IfxEvadc_GatingMode gatingMode, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1146  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1147  /** \brief Sets the trigger operating configurations.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1148   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1149   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1150   * \param triggerSource trigger input for group.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1151   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1152   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1153   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1154  IFX_EXTERN void IfxEvadc_setQueueSlotTriggerOperatingConfig(Ifx_EVADC_G *evadcG, IfxEvadc_TriggerMode triggerMode, IfxEvadc_TriggerSource triggerSource, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1155  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1156  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1157  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1158  /** \addtogroup IfxLld_Evadc_Std_IO
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1159   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1160  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1161  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1162  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1163  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1164  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1165  /** \brief Initializes a EMUX output
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1166   * \param emux the Emux Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1167   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1168   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1169   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1170   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1171  IFX_INLINE void IfxEvadc_initEmuxPin(const IfxEvadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1172  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1173  /** \brief Initializes a GxBFL output
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1174   * \param gxBfl the GxBFL Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1175   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1176   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1177   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1178   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1179  IFX_INLINE void IfxEvadc_initGxBflPin(const IfxEvadc_GxBfl_Out *gxBfl, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1180  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1181  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1182  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1183  /** \addtogroup IfxLld_Evadc_Std_Frequency
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1184   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1185  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1186  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1187  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1188  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1189  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1190  /** \brief Calculate the time using analog frequency.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1191   * \param analogFrequency analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1192   * \param sampleTime sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1193   * \return sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1194   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1195  IFX_INLINE uint32 IfxEvadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1196  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1197  /** \brief Returns the configured Fadci EVADC analog clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1198   * \param group pointer to the EVADC registers group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1199   * \return the configured Fadci EVADC analog clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1200   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1201  IFX_INLINE float32 IfxEvadc_getAdcAnalogFrequency(Ifx_EVADC_G *group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1202  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1203  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1204  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1205  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1206  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1207  /** \brief configured Fadcd EVADC digital clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1208   * \param evadc pointer to the base of EVADC registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1209   * \return the configured Fadcd EVADC digital clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1210   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1211  IFX_EXTERN float32 IfxEvadc_getAdcDigitalFrequency(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1212  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1213  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1214  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1215  /** \addtogroup IfxLld_Evadc_Std_Group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1216   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1217  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1218  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1219  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1220  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1221  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1222  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1223   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1224   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1225   * \param delay Selects an additional clock cycle for the conversion step of the MSB
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1228  IFX_INLINE void IfxEvadc_setAnalogClockSynchronizationDelay(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_AnalogClockSynchronizationDelay delay);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1229  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1230  /** \brief Select calibration sample time in units of t_ADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1231   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1232   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1233   * \param mode Select calibration sample time in units of t_ADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1234   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1235   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1236  IFX_INLINE void IfxEvadc_setCalibrationSampleTime(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_CalibrationSampleTimeControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1237  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1238  /** \brief Clears the all group requests.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1239   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1242  IFX_INLINE void IfxEvadc_clearAllResultRequests(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1243  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1244  /** \brief Gets the EVADC input class channel conversion mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1245   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1246   * \param inputClassNum EVADC input class number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1247   * \return EVADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1248   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1249  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1250  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1251  /** \brief Get conversion result for the group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1252   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1253   * \param results pointer to scaled conversion results
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1254   * \param resultOffset offset for the first result
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1255   * \param numResults number of results
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1256   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1257   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1258   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1259   * Here,Three channels are used for queued transfers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1260   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1261   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1262   * unsigned savedGate = adcGroup.module.evadc->G[adcGroup.groupId].Queue0.QMR0.B.ENGT;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1263   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1264   * // IMPORTANT: for deterministic results we have to disable the queue gate
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1265   * // while filling the queue, otherwise results could be output in the wrong order
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1266   * adcGroup.module.evadc->G[adcGroup.groupId].Queue0.QMR0.B.ENGT = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1267   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1268   * // create channel config
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1269   * IfxEvadc_Adc_ChannelConfig adcChannelConfig[3];
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1270   * IfxEvadc_Adc_Channel adcChannel[3];
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1271   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1272   * for(int chnIx=0; chnIx<3; ++chnIx) {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1273   * IfxEvadc_Adc_initChannelConfig(&adcChannelConfig[chnIx], &adcGroup);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1274   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1275   * adcChannelConfig[chnIx].channelId = (IfxEvadc_ChannelId)(chnIx);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1276   * adcChannelConfig[chnIx].resultRegister = IfxEvadc_ChannelResult_1; // use result register #1 for all channels
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1277   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1278   * // initialize the channel
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1279   * IfxEvadc_Adc_initChannel(&adcChannel[chnIx], &adcChannelConfig[chnIx]);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1280   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1281   * // Add channel to queue with refill enabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1282   * IfxEvadc_Adc_addToQueue(&adcChannel[chnIx], IfxEvadc_RequestSource_queue0, IFXEVADC_QUEUE_REFILL);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1283   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1284   * // restore previous gate config
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1285   * adcGroup.module.evadc->G[adcGroup.groupId].Queue0.QMR0.B.ENGT = savedGate;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1286   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1287   * // start the Queue
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1288   * IfxEvadc_Adc_startQueue(&adcGroup,IfxEvadc_RequestSource_queue0); // just for the case that somebody copy&pastes the code - the queue has already been started in previous test
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1289   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1290   * Ifx_EVADC_G_RES results[10];
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1291   * result = IfxEvadc_getGroupResult(group, results, 0, 2);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1292   * \endcode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1293   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1294   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1295  IFX_INLINE void IfxEvadc_getGroupResult(Ifx_EVADC_G *group, Ifx_EVADC_G_RES *results, uint32 resultOffset, uint32 numResults);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1296  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1297  /** \brief Gets the EVADC input class channel sample time.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1298   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1299   * \param inputClassNum ADC input class number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1300   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1301   * \return ADC input class channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1302   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1303  IFX_INLINE float32 IfxEvadc_getGroupSampleTime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1304  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1305  /** \brief Gets the configured master index.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1306   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1307   * \return configured master kernel index.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1308   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1309  IFX_INLINE uint8 IfxEvadc_getMasterIndex(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1310  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1311  /** \brief Selects the chargingmode/voltage level in idle mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1312   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1313   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1314   * \param mode 0 - No precharge, the sampling capacitor keeps the current charge
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1315   * 1 - The sampling capacitor is precharged to approx. half the reference when idle
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1316   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1317   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1318  IFX_INLINE void IfxEvadc_selectIdlePrechargeLevel(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_IdlePrecharge mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1319  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1320  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1321   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1322   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1323   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1324   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1325  IFX_INLINE void IfxEvadc_enableInputBuffer(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1326  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1327  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1328   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1329   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1330   * \param duration Selects the amount of time for reference input precharging
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1331   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1332   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1333  IFX_INLINE void IfxEvadc_setReferencePrechargeDuration(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_ReferencePrechargeControl duration);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1334  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1335  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1336   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1337   * \param group EVADC Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1338   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1339   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1340  IFX_INLINE void IfxEvadc_enableReferencePrecharge(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1341  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1342  /** \brief Resets the ADC group.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1343   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1344   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1345   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1346  IFX_INLINE void IfxEvadc_resetGroup(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1347  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1348  /** \brief Selects whether sample synchronization must be performed or not.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1349   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1350   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1351   * \param mode Sample Synchronization Options
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1352   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1353   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1354  IFX_INLINE void IfxEvadc_setSampleSynchronizationMode(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_SampleSynchronization mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1355  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1356  /** \brief Selects an additional clock cycle for the conversion step of the MSB.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1357   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1358   * \param group EVADC Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1359   * \param mode Selects an single or double clock cycle(s) for the conversion step of the MSB
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1360   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1361   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1362  IFX_INLINE void IfxEvadc_selectDoubleClockForMSBConversion(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_MsbConversionTime mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1363  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1364  /** \brief Sets analog converter group number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1365   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1366   * \param analogConverterMode group analog converter mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1367   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1368   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1369  IFX_INLINE void IfxEvadc_setAnalogConvertControl(Ifx_EVADC_G *evadcG, IfxEvadc_AnalogConverterMode analogConverterMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1370  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1371  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1372   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1373   * \param inputClassNum Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1374   * \param mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1375   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1376   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1377  IFX_INLINE void IfxEvadc_setAnalogInputPrechargeControlEMUX(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_AnalogInputPrechargeControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1378  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1379  /** \brief Analog Input Precharge Control for Standard Conversions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1380   * Buffer must be enabled by GxANCFG.B.BE = 1
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1381   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1382   * \param inputClassNum Class No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1383   * \param mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1384   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1385   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1386  IFX_INLINE void IfxEvadc_setAnalogInputPrechargeControlStandard(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_AnalogInputPrechargeControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1387  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1388  /** \brief Sets the ADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1389   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1390   * \param inputClassNum input class number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1391   * \param conversionMode ADC input class channel Conversion Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1392   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1393   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1394  IFX_INLINE void IfxEvadc_setGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_ChannelNoiseReduction conversionMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1395  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1396  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1397   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1398   * \param inputClassNum Class No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1399   * \param conversionMode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1400   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1401   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1402  IFX_INLINE void IfxEvadc_setGroupConversionModeEMUX(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_ChannelNoiseReductionEMUX conversionMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1403  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1404  /** \brief Sets the ADC input class sample time ticks.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1405   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1406   * \param inputClassNum input class number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1407   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1408   * \param sampleTime request sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1409   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1410   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1411  IFX_INLINE void IfxEvadc_setGroupSampleTime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1412  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1413  /** \brief Set the additional number of cycles(in addition to 2) in sample time.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1414   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1415   * \param inputClassNum Class No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1416   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1417   * \param sampleTime request sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1418   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1419   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1420  IFX_INLINE void IfxEvadc_setGroupSampleTimeEMUX(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1421  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1422  /** \brief Sets the master index.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1423   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1424   * \param masterIndex master index.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1425   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1426   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1427  IFX_INLINE void IfxEvadc_setMasterIndex(Ifx_EVADC_G *evadcG, uint8 masterIndex);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1428  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1429  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1430   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1431   * \param inputClassNum Class No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1432   * \param mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1433   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1434   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1435  IFX_INLINE void IfxEvadc_spreadEarlySamplePointEMUXConversions(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_SpreadEarlySamplePointEMUXConversionsMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1436  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1437  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1438   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1439   * \param inputClassNum Class No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1440   * \param mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1441   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1442   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1443  IFX_INLINE void IfxEvadc_spreadEarlySamplePointStandardConversions(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_SpreadEarlySamplePointStandardConversionsMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1444  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1445  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1446  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1447  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1448  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1449  /** \brief Sets the Arbiter slot configurations.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1450   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1451   * \param slotEnable enable/disable of slot.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1452   * \param prio channel request priority.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1453   * \param mode Channel Slot start mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1454   * \param slot channel slot Request source.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1455   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1456   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1457  IFX_EXTERN void IfxEvadc_setArbiterPriority(Ifx_EVADC_G *evadcG, boolean slotEnable, IfxEvadc_RequestSlotPriority prio, IfxEvadc_RequestSlotStartMode mode, IfxEvadc_RequestSource slot);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1458  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1459  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1460  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1461  /** \addtogroup IfxLld_Evadc_Std_Module
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1462   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1463  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1464  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1465  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1466  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1467  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1468  /** \brief Disable EVADC kernel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1469   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1470   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1471   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1472  IFX_INLINE void IfxEvadc_disableModule(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1473  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1474  /** \brief Disables the post calibration.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1475   * \param evadcG pointer to the base of EVADC Grroup registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1476   * \param group Index of the group.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1477   * \param enabled disable or not.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1478   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1479   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1480  IFX_INLINE void IfxEvadc_disablePostCalibration(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1481  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1482  /** \brief Enable EVADC kernel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1483   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1484   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1485   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1486  IFX_INLINE void IfxEvadc_enableModule(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1487  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1488  /** \brief gets ADC Calibration Flag CAL status.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1489   * \param evadc pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1490   * \param adcCalGroupNum ADC CAL group number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1491   * \return CAL group status.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1492   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1493  IFX_INLINE uint8 IfxEvadc_getAdcCalibrationActiveState(Ifx_EVADC *evadc, uint8 adcCalGroupNum);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1494  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1495  /** \brief Gets the global control configuration value.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1496   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1497   * \return global control configuration value.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1498   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1499  IFX_INLINE Ifx_EVADC_GLOBCFG IfxEvadc_getGlobalConfigValue(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1500  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1501  /** \brief Gives the SRC source address.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1502   * \param group Index of the group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1503   * \param index SRC number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1504   * \return SRC source address
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1505   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1506  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEvadc_getSrcAddress(IfxEvadc_GroupId group, IfxEvadc_SrcNr index);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1507  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1508  /** \brief get status of GLOBCFG.SUCAL Bit field
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1509   * \param evadc Pointer to EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1510   * \return status of GLOBCFG.SUCAL Bit field
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1511   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1512  IFX_INLINE boolean IfxEvadc_getStartupCalibrationStatus(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1513  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1514  /** \brief Initialises ADC converter clock.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1515   * \param evadc Pointer to EVADC  SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1516   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1517   * \param converterClockDivider ADC converter clock divider.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1518   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1519   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1520  IFX_INLINE void IfxEvadc_initialiseAdcConverterClock(Ifx_EVADC *evadc, Ifx_EVADC_G *evadcG, IfxEvadc_ClockDividerFactor converterClockDivider);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1521  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1522  /** \brief initiates the calibration pulse phase.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1523   * \param evadc pointer to the base of EVADC registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1524   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1525   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1526  IFX_INLINE void IfxEvadc_initiateStartupCalibration(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1527  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1528  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1529   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1530   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1531   * \param evadc Pointer to EVADC module registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1532   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1533   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1534  IFX_INLINE boolean IfxEvadc_isModuleSuspended(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1535  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1536  /** \brief Sets the channel conversion mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1537   * \param evadc pointer to EVADC module registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1538   * \param InputClassNum input class  number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1539   * \param conversionMode ADC conversion Mode. Improves the precision of conversion
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1540   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1541   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1542  IFX_INLINE void IfxEvadc_setGlobalConversionMode(Ifx_EVADC *evadc, uint8 InputClassNum, IfxEvadc_ChannelNoiseReduction conversionMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1543  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1544  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1545   * \param evadc pointer to EVADC registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1546   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1547   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1548   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1549  IFX_INLINE void IfxEvadc_setSleepMode(Ifx_EVADC *evadc, IfxEvadc_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1550  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1551  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1552   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1553   * \param evadc Pointer to EVADC module registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1554   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1555   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1556   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1557  IFX_INLINE void IfxEvadc_setSuspendMode(Ifx_EVADC *evadc, IfxEvadc_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1558  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1559  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1560  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1561  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1562  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1563  /** \brief Disable write access to the EVADC config/control registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1564   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1565   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be disabled.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1566   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1567   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1568  IFX_EXTERN void IfxEvadc_disableAccess(Ifx_EVADC *evadc, IfxEvadc_Protection protectionSet);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1569  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1570  /** \brief Enable write access to the EVADC config/control registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1571   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1572   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be enabled.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1573   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1574   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1575  IFX_EXTERN void IfxEvadc_enableAccess(Ifx_EVADC *evadc, IfxEvadc_Protection protectionSet);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1576  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1577  /** \brief ADC Module Frequency in Hz
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1578   * \param evadc Pointer to EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1579   * \return module frequency
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1580   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1581  IFX_EXTERN float32 IfxEvadc_getAdcModuleFrequency(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1582  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1583  /** \brief Configure the ADC analog clock.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1584   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1585   * \param fAdcI ADC analog clock clock frequency in Hz. Range = [5000000, 10000000].
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1586   * \param group Pointer to EVADC Group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1587   * \return ADC analog clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1588   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1589  IFX_EXTERN uint32 IfxEvadc_initializeFAdcI(Ifx_EVADC *evadc, uint32 fAdcI, Ifx_EVADC_G *group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1590  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1591  /** \brief Resets the kernel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1592   * \param evadc pointer to the  EVADC Module
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1593   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1594   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1595  IFX_EXTERN void IfxEvadc_resetModule(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1596  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1597  /** \brief Starts ADC calibration and wait for the end of the calibration process.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1598   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1599   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1600   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1601  IFX_EXTERN void IfxEvadc_startupCalibration(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1602  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1603  /** \brief SW workaround of EVADC Master/Slave conversion jitter issue(MCMETILLD-910)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1604   * \param evadc Pointer to EVADC module registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1605   * \return Used for detecting failure in either OCDS Debug Active State Activation or Trigger Line TL1 Activation or both.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1606   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1607  IFX_EXTERN boolean IfxEvadc_syncConvWorkAround(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1608  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1609  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1610  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1611  /** \addtogroup IfxLld_Evadc_Std_Channel
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1612   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1613  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1614  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1615  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1616  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1617  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1618  /** \brief Clears the channel request.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1619   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1620   * \param channelId channel id whose request to be cleared.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1621   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1622   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1623  IFX_INLINE void IfxEvadc_clearChannelRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelId);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1624  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1625  /** \brief Enables the FIFO mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1626   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1627   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1628   * \param fifoMode FIFO mode .
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1629   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1630   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1631  IFX_INLINE void IfxEvadc_enableFifoMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, IfxEvadc_FifoMode fifoMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1632  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1633  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1634   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1635   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1636   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1637   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1638  IFX_INLINE void IfxEvadc_enableServiceRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1639  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1640  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1641   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1642   * \param resultRegister
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1643   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1644   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1645  IFX_INLINE void IfxEvadc_disableServiceRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1646  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1647  /** \brief Gets the current ADC channel control configurations.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1648   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1649   * \param channelIndex EVADC channel number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1650   * \return current ADC channel control configuration.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1651   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1652  IFX_INLINE Ifx_EVADC_G_CHCTR IfxEvadc_getChannelControlConfig(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1653  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1654  /** \brief get channel Input class
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1655   * \param evadcG Pointer to EVADC Group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1656   * \param channelIndex Specifies channel Id
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1657   * \return Input class
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1658   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1659  IFX_INLINE IfxEvadc_InputClasses IfxEvadc_getChannelInputclass(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1660  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1661  /** \brief Gets the channel result service request node pointer 0.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1662   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1663   * \return channel result service request node pointer 0.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1664   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1665  IFX_INLINE Ifx_EVADC_G_REVNP0 IfxEvadc_getChannelResultServiceRequestNodePointer0(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1666  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1667  /** \brief Gets the channel result service request node pointer 1.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1668   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1669   * \return channel result service request node pointer 1.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1670   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1671  IFX_INLINE Ifx_EVADC_G_REVNP1 IfxEvadc_getChannelResultServiceRequestNodePointer1(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1672  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1673  /** \brief Gets the channel service request node pointer.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1674   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1675   * \return channel service request node pointer.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1676   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1677  IFX_INLINE Ifx_EVADC_G_CEVNP0 IfxEvadc_getChannelServiceRequestNodePointer0(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1678  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1679  /** \brief get the channel service request node pointer (CH8--CH15)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1680   * \param evadcG pointer to EVADC Group register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1681   * \return Channel service request node pointer for CH8 to CH15
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1682   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1683  IFX_INLINE Ifx_EVADC_G_CEVNP1 IfxEvadc_getChannelServiceRequestNodePointer1(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1684  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1685  /** \brief Selects boundary extension.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1686   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1687   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1688   * \param boundaryMode boundary extension mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1689   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1690   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1691  IFX_INLINE void IfxEvadc_setBoundaryMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_BoundaryExtension boundaryMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1692  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1693  /** \brief Sets the channel event service request line.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1694   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1695   * \param channelSrcNr channel event Service Node.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1696   * \param channel channel number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1697   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1698   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1699  IFX_INLINE void IfxEvadc_setChannelEventNodePointer0(Ifx_EVADC_G *evadcG, IfxEvadc_SrcNr channelSrcNr, IfxEvadc_ChannelId channel);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1700  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1701  /** \brief set channel event node pointer(channel 8- channel 15)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1702   * \param evadcG pointer to the EVADC Group register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1703   * \param channelSrcNr service Request
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1704   * \param channel specifies channel ID
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1705   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1706   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1707  IFX_INLINE void IfxEvadc_setChannelEventNodePointer1(Ifx_EVADC_G *evadcG, IfxEvadc_SrcNr channelSrcNr, IfxEvadc_ChannelId channel);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1708  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1709  /** \brief Sets the channel input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1710   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1711   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1712   * \param inputClass channel input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1713   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1714   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1715  IFX_INLINE void IfxEvadc_setChannelInputClass(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_InputClasses inputClass);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1716  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1717  /** \brief Sets the channel event mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1718   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1719   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1720   * \param limitCheck channel event mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1721   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1722   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1723  IFX_INLINE void IfxEvadc_setChannelLimitCheckMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_LimitCheck limitCheck);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1724  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1725  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1726   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1727   * \param resultRegister
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1728   * \param mode 0b00 Standard data reduction (accumulation)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1729   * 0b01 Result filtering mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1730   * 0b10 Difference mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1731   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1732   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1733  IFX_INLINE void IfxEvadc_setDataModificationMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, IfxEvadc_DataModificationMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1734  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1735  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1736   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1737   * \param resultRegister Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1738   * \param mode Defines result values stored/accumulated for the final result.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1739   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1740   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1741  IFX_INLINE void IfxEvadc_setDataReductionControlMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, uint32 mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1742  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1743  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1744   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1745   * \param resultRegister
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1746   * \param mode 0b00 - Separate result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1747   * 0b01 - Part of a FIFO structure: copy each new valid result
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1748   * 0b10 - Maximum mode: copy new result if bigger
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1749   * 0b11 - Minimum mode: copy new result if smaller
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1750   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1751   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1752  IFX_INLINE void IfxEvadc_setFifoMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, IfxEvadc_FifoMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1753  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1754  /** \brief Sets group's lower boundary.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1755   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1756   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1757   * \param lowerBoundary group lower boundary.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1758   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1759   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1760  IFX_INLINE void IfxEvadc_setLowerBoundary(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_BoundarySelection lowerBoundary);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1761  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1762  /** \brief Selects the refernce input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1763   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1764   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1765   * \param reference reference input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1766   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1767   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1768  IFX_INLINE void IfxEvadc_setReferenceInput(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_ChannelReference reference);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1769  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1770  /** \brief Sets result event node pointer 0.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1771   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1772   * \param resultSrcNr channel result event service node.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1773   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1774   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1775   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1776  IFX_INLINE void IfxEvadc_setResultNodeEventPointer0(Ifx_EVADC_G *evadcG, IfxEvadc_SrcNr resultSrcNr, IfxEvadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1777  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1778  /** \brief Sets result event node pointer 1.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1779   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1780   * \param resultSrcNr channel result event service node.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1781   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1782   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1783   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1784  IFX_INLINE void IfxEvadc_setResultNodeEventPointer1(Ifx_EVADC_G *evadcG, IfxEvadc_SrcNr resultSrcNr, IfxEvadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1785  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1786  /** \brief Sets result store position.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1787   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1788   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1789   * \param rightAlignedStorage result store position.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1790   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1791   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1792  IFX_INLINE void IfxEvadc_setResultPosition(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, boolean rightAlignedStorage);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1793  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1794  /** \brief Sets channel synchronization request.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1795   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1796   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1797   * \param synchonize whether channel synchronize or stand alone operation.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1798   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1799   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1800  IFX_INLINE void IfxEvadc_setSyncRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, boolean synchonize);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1801  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1802  /** \brief Sets group's upper boundary.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1803   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1804   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1805   * \param upperBoundary group upper boundary.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1806   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1807   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1808  IFX_INLINE void IfxEvadc_setUpperBoundary(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_BoundarySelection upperBoundary);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1809  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1810  /** \brief Sets the group result register.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1811   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1812   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1813   * \param resultRegister result register for group result storage.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1814   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1815   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1816  IFX_INLINE void IfxEvadc_storeGroupResult(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1817  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1818  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1819  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1820  /** \addtogroup IfxLld_Evadc_Std_Emux
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1821   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1822  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1823  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1824  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1825  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1826  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1827  /** \brief get global input class conversion mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1828   * \param evadc Pointer to EVADC Module space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1829   * \param inputClassNum global input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1830   * \return External channel resolution for global input class
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1831   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1832  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getEmuxGlobalConversionMode(Ifx_EVADC *evadc, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1833  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1834  /** \brief get the external conversion mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1835   * \param evadcG Pointer to EVADC group register space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1836   * \param inputClassNum Adc input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1837   * \return Adc input class External channel conversion mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1838   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1839  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getEmuxGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1840  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1841  /** \brief Gets the ADC input class sample time of external channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1842   * \param evadcG Pointer to Register Group space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1843   * \param inputClassNum ADC input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1844   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1845   * \return ADC input class external channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1846   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1847  IFX_INLINE float32 IfxEvadc_getEmuxGroupSampleTime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1848  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1849  /** \brief set the external conversion mode of Global class
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1850   * \param evadc pointer to EVADC Module space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1851   * \param inputClassNum Global Input Class Number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1852   * \param conversionMode External Channel resolution
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1853   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1854   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1855  IFX_INLINE void IfxEvadc_setEmuxGlobalConversionMode(Ifx_EVADC *evadc, uint8 inputClassNum, IfxEvadc_ChannelNoiseReduction conversionMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1856  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1857  /** \brief Sets the sample time of ADC global class for external channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1858   * \param evadc Pointer to EVADC Module space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1859   * \param inputClassNum Adc input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1860   * \param analogFrequency ADC analog Frequency in HZ
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1861   * \param sampleTime the requested sample time for input class in sec
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1862   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1863   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1864  IFX_INLINE void IfxEvadc_setEmuxGlobalSampleTime(Ifx_EVADC *evadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1865  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1866  /** \brief set the external channel conversion mode of ADC input class
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1867   * \param evadcG pointer to EVADC Group Register space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1868   * \param inputClassNum input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1869   * \param conversionMode input class external channel resolution
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1870   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1871   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1872  IFX_INLINE void IfxEvadc_setEmuxGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_ChannelNoiseReduction conversionMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1873  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1874  /** \brief Sets the ADC input class sample time for external channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1875   * \param evadcG Pointer to EVADC Group Register Space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1876   * \param inputClassNum input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1877   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1878   * \param sampleTime request sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1879   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1880   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1881  IFX_INLINE void IfxEvadc_setEmuxGroupSampletime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1882  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1883  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1884  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1885  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1886  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1887  /** \brief Configure external multiplexer mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1888   * \param evadc pointer to Module space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1889   * \param evadcG Pointer to EVADC group register space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1890   * \param mode External Multiplexer mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1891   * \param channels Specifies channel Id
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1892   * \param startChannel specifies the external channel value from which conversion to be carried out
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1893   * \param code Output the channel number in binary code/gray code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1894   * \param sampleTimeControl specifies when to use a sample time for external channel
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1895   * \param channelSelectionStyle External Multiplexer Channel Selection Style
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1896   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1897   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1898  IFX_EXTERN void IfxEvadc_configExternalMultiplexerMode(Ifx_EVADC *evadc, Ifx_EVADC_G *evadcG, IfxEvadc_ExternalMultiplexerMode mode, uint8 channels, IfxEvadc_EmuxSelectValue startChannel, IfxEvadc_EmuxCodingScheme code, IfxEvadc_EmuxSampleTimeControl sampleTimeControl, IfxEvadc_ChannelSelectionStyle channelSelectionStyle);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1899  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1900  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1901  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1902  /** \addtogroup IfxLld_Evadc_Std_FastCompare
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1903   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1904  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1905  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1906  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1907  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1908  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1909  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1910   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1911   * \param control Action to be taken on the BoundaryFlag(FCM.B.BFL)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1912   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1913   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1914  IFX_INLINE void IfxEvadc_setFastCompareBoundaryFlagSwControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagSwControl control);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1915  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1916  /** \brief Sets in FCM.B.BFI whether to use Boundary Flag(FCM.B.BFL) directly or in a inverted format
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1917   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1918   * \param mode Invert or not to invert the Boundary Flag(BFL)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1919   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1920   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1921  IFX_INLINE void IfxEvadc_setFastCompareBoundaryFlagInversion(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagInversionControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1922  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1923  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1924   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1925   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1926   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1927  IFX_INLINE void IfxEvadc_disableFastCompareBoundaryFlag(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1928  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1929  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1930   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1931   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1932   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1933  IFX_INLINE void IfxEvadc_enableFastCompareBoundaryFlag(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1934  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1935  /** \brief Enable/Disable sample timing synchronization
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1936   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1937   * \param mode Sample synchronization mode select
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1938   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1939   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1940  IFX_INLINE void IfxEvadc_enableFastCompareSampleSynchronization(Ifx_EVADC_FC *evadcFC, IfxEvadc_SampleSynchronization mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1941  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1942  /** \brief Setting the Reference Precharge Control for Fast Compare Channels in FCCTRL.B.RPC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1943   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1944   * \param duration Reference Precharge Control Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1945   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1946   * 0 - Precharge the reference input for 1 clock phase
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1947   * 1 - Precharge the reference input for 1 clock period (2 phases)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1948   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1949   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1950  IFX_INLINE void IfxEvadc_setFastCompareReferencePrechargeDuration(Ifx_EVADC_FC *evadcFC, IfxEvadc_ReferencePrechargeControl duration);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1951  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1952  /** \brief Get boundary flag status.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1953   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1954   * \return 0(FALSE) - Passive state : Result has not yet crossed the activation boundary, or selected gate signal is inactive, or this boundary flag is disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1955   * 1(TRUE) - Active state:result has crossed the activation boundary
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1956   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1957  IFX_INLINE boolean IfxEvadc_getFastCompareBoundaryFlagStatus(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1958  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1959  /** \brief Returns current level of the selected trigger input
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1960   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1961   * \return Current level of the selected trigger input
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1962   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1963  IFX_INLINE boolean IfxEvadc_getFastCompareExternalTriggerLevelStatus(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1964  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1965  /** \brief Returns result for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1966   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1967   * \return Result for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1968   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1969  IFX_INLINE boolean IfxEvadc_getFastCompareResultStatus(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1970  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1971  /** \brief Indicates availability of a new result in bit FCM.B.FCR
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1972   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1973   * \return Returns value Indicating availability of a new result in bit FCM.B.FCR
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1974   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1975  IFX_INLINE boolean IfxEvadc_isFastCompareNewResultAvailable(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1976  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1977  /** \brief Selects behaviour of Boundary Flag(BFL) wih respect to the value of FCR.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1978   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1979   * \param mode 0 - Set boundary flag BFL if result FCR = 1 (input above the defined band or compare value), clear if FCR = 0 (input below)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1980   * 1 - Set boundary flag BFL if result FCR = 0 (input below the defined band or compare value), clear if FCR = 1 (input above)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1981   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1982   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1983  IFX_INLINE void IfxEvadc_selectFastCompareBoundaryFlagActivationMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagActivationMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1984  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1985  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1986   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1987   * \param nodePointer Bounday Flag Node Pointers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1988   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1989   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1990  IFX_INLINE void IfxEvadc_selectFastCompareBoundaryFlagNodePointer(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagNodePointer nodePointer);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1991  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1992  /** \brief Sets the delay of the analog clock(in clock cycles) after the sync signal.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1993   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1994   * \param delay Defines the delay of the analog clock in clocks after the sync signal.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1995   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1996   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1997  IFX_INLINE void IfxEvadc_setFastCompareAnalogClockSynchronizationDelay(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareAnalogClockSynchronizationDelay delay);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1998  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1999  /** \brief Set Analog Converter Control modes
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2000   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2001   * \param mode Analog Converter Control modes
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2002   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2003   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2004  IFX_INLINE void IfxEvadc_setFastCompareAnalogConverter(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareAnalogConverterControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2005  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2006  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2007   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2008   * \param mode Analog Input Precharge Enable for Fast Comparisons
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2009   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2010   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2011  IFX_INLINE void IfxEvadc_setFastCompareAnalogInputPrechargeControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_AnalogInputPrechargeControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2012  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2013  /** \brief Defines the frequency of the analog converter clock fADCI (base clock for
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2014   * conversion steps), derived from the peripheral clock: fADCI = fADC / divider
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2015   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2016   * \param divider Fast Compare Analog Internal Clock Divider factor
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2017   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2018   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2019  IFX_INLINE void IfxEvadc_setFastCompareAnalogInternalClockDivider(Ifx_EVADC_FC *evadcFC, IfxEvadc_ClockDividerFactor divider);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2020  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2021  /** \brief Sets the source of the value(s) in bitfield FCREF.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2022   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2023   * \param mode Defines the source of the value(s) in bitfield FCREF.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2024   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2025   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2026  IFX_INLINE void IfxEvadc_setFastCompareAutomaticUpdateMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareAutomaticUpdate mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2027  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2028  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2029   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2030   * \param mode Mode/criteria for generation of service requests
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2031   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2032   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2033  IFX_INLINE void IfxEvadc_setFastCompareChannelEventMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_ChannelEventMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2034  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2035  /** \brief Set external trigger polarity in FCCTRL.B.XTPOL
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2036   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2037   * \param mode 0 - Use selected input signal directly
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2038   * 1 - Invert selected input signal
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2039   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2040   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2041  IFX_INLINE void IfxEvadc_setFastCompareExternalTriggerPolarity(Ifx_EVADC_FC *evadcFC, IfxEvadc_ExternalTriggerPolarity mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2042  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2043  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2044   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2045   * \param mode Fast Compare Gate Operating Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2046   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2047   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2048  IFX_INLINE void IfxEvadc_setFastCompareGateOperatingMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_GateOperatingMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2049  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2050  /** \brief Ramp direction(up or down) settings
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2051   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2052   * \param rampDirection Ramp direction(up or down) settings
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2053   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2054   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2055  IFX_INLINE void IfxEvadc_setFastCompareRampDirection(Ifx_EVADC_FC *evadcFC, IfxEvadc_RampDirection rampDirection);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2056  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2057  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2058   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2059   * \param referenceValue The input level is compared to this value.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2060   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2061   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2062  IFX_INLINE void IfxEvadc_setFastCompareReferenceValue(Ifx_EVADC_FC *evadcFC, uint16 referenceValue);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2063  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2064  /** \brief Defines the basic run conditions of the fast compare channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2065   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2066   * \param mode Run mode of the fast compare channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2067   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2068   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2069  IFX_INLINE void IfxEvadc_setFastCompareRunControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareRunControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2070  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2071  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2072   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2073   * \param rampStartMode Defines the run conditions for the ramp generation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2074   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2075   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2076  IFX_INLINE void IfxEvadc_setFastCompareRunRampControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_RampRunControl rampStartMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2077  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2078  /** \brief Setting additional sample time in FCCTRL.B.STCF
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2079   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2080   * \param additionalCycles Number of additional clock cycles to be added to the minimum sample phase of 2 analog clock cycles
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2081   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2082   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2083  IFX_INLINE void IfxEvadc_setFastCompareSampleTimeControl(Ifx_EVADC_FC *evadcFC, uint8 additionalCycles);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2084  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2085  /** \brief Sets when to generate service requests
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2086   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2087   * \param mode Defines when to generate service requests
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2088   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2089   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2090  IFX_INLINE void IfxEvadc_setFastCompareServiceRequestGeneration(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareServiceRequestGeneration mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2091  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2092  /** \brief Sets the interval at which fast compare operations are triggered in steps of 16 * 1/fADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2093   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2094   * \param interval Defines the interval at which fast compare operations are triggered in steps of 16 * 1/f_ADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2095   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2096   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2097  IFX_INLINE void IfxEvadc_setFastCompareTriggerInterval(Ifx_EVADC_FC *evadcFC, uint8 interval);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2098  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2099  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2100   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2101   * \param mode External Trigger Operating Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2102   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2103   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2104  IFX_INLINE void IfxEvadc_setFastCompareTriggerOperatingMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_TriggerOperatingMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2105  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2106  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2107  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2108  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2109  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2110  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2111  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2112  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2113   * \param evadcG Pointer to EVADC group register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2114   * \return analog function configuration value
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2115   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2116  IFX_INLINE Ifx_EVADC_G_ANCFG IfxEvadc_getAnalogFunctionConfiguration(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2117  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2118  /** \brief Get the sample time of ADC global class for external channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2119   * \param evadc pointer to EVADC Module space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2120   * \param inputClassNum Adc input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2121   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2122   * \return ADC input class external channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2123   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2124  IFX_INLINE float32 IfxEvadc_getEmuxGlobalSampleTime(Ifx_EVADC *evadc, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2125  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2126  /** \brief Sets the Emux Interface for a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2127   * \param evadc Pointer to EVADC Module Space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2128   * \param emuxInterface specifies the EmuxInterface
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2129   * \param group specifies the group ID
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2130   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2131   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2132  IFX_INLINE void IfxEvadc_setEmuxInterfaceForGroup(Ifx_EVADC *evadc, IfxEvadc_EmuxInterface emuxInterface, IfxEvadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2133  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2134  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2135   * \param evadcG Pointer to EVADC Group Registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2136   * \param group EVADC Group Number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2137   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2138   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2139  IFX_INLINE void IfxEvadc_disableReferencePrecharge(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2140  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2141  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2142   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2143   * \param group EVADC Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2144   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2145   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2146  IFX_INLINE void IfxEvadc_disableInputBuffer(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2147  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2148  /** \brief Return if the clock for EVADC modules is enabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2149   * \param evadc Pointer to EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2150   * \return Status (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2151   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2152  IFX_INLINE boolean IfxEvadc_isModuleEnabled(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2153  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2154  /** \brief Enable the startup calibaration phase
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2155   * \param evadc Pointer to EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2156   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2157   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2158  IFX_INLINE void IfxEvadc_enableStartupCalibration(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2159  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2160  /** \brief Enable the Queue Gating Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2161   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2162   * \param queue Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2163   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2164   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2165   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2166  IFX_INLINE void IfxEvadc_selectQueueGatingMode(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource queue, IfxEvadc_GatingMode gatingMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2167  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2168  /** \brief Defines the channel number to be converted
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2169   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2170   * \param queue Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2171   * \param channel Channel number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2172   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2173   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2174  IFX_INLINE void IfxEvadc_setChannelRequest(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource queue, IfxEvadc_ChannelId channel);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2175  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2176  /** \brief Sets the global input class registers, define the sample time and data conversion mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2177   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2178   * \param inputClassNum Input Class Number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2179   * \param value Value to be written
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2180   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2181   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2182  IFX_INLINE void IfxEvadc_configureIclass(Ifx_EVADC_G *evadcG, uint8 inputClassNum, uint32 value);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2183  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2184  /** \brief Returns the pointer to the result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2185   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2186   * \param channel Channel Number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2187   * \return The address to the result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2188   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2189  IFX_INLINE volatile uint32 *IfxEvadc_getResultRegisterAddress(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channel);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2190  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2191  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2192  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2193  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2194  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2195  IFX_INLINE void IfxEvadc_setAnalogClockSynchronizationDelay(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_AnalogClockSynchronizationDelay delay)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2196  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2197      IFX_UNUSED_PARAMETER(group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2198      evadcG->ANCFG.B.ACSD = delay;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2199  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2200  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2201  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2202  IFX_INLINE uint32 IfxEvadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2203  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2204      uint32 ticks = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2205  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2206      ticks = (uint32)(sampleTime * analogFrequency) - 2;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2207  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2208      if (ticks > 31)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2209      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2210          ticks = (ticks / 16) + 15;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2211      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2212  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2213      ticks = __minu(ticks, 0xFFu);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2214  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2215      return ticks;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2216  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2217  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2218  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2219  IFX_INLINE void IfxEvadc_setCalibrationSampleTime(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_CalibrationSampleTimeControl mode)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2220  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2221      IFX_UNUSED_PARAMETER(group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2222      evadcG->ANCFG.B.CALSTC = mode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2223  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2224  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2225  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2226  IFX_INLINE void IfxEvadc_clearAllResultRequests(Ifx_EVADC_G *evadcG)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2227  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2228      evadcG->REFCLR.U = 0x0000FFFFu;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2229  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2230  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2231  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2232  IFX_INLINE void IfxEvadc_clearChannelRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelId)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2233  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2234      evadcG->CEFCLR.U = 1 << channelId;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2235  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2236  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2237  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2238  IFX_INLINE void IfxEvadc_clearQueue(Ifx_EVADC_G *evadcG, boolean flushQueue, IfxEvadc_RequestSource sourceType)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2239  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2240      switch (sourceType)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2241      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2242      case IfxEvadc_RequestSource_queue0:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2243          evadcG->Q[0].QMR.B.FLUSH = flushQueue;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2244          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2245      case IfxEvadc_RequestSource_queue1:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2246          evadcG->Q[1].QMR.B.FLUSH = flushQueue;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2247          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2248      case IfxEvadc_RequestSource_queue2:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2249          evadcG->Q[2].QMR.B.FLUSH = flushQueue;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2250          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2251      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2252  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2253  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2254  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2255  IFX_INLINE void IfxEvadc_configureWaitForReadMode(Ifx_EVADC_G *group, uint32 resultIdx, boolean enabled)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2256  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2257      group->RCR[resultIdx].B.WFR = enabled;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2258  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2259  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2260  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2261  IFX_INLINE void IfxEvadc_configureWaitForReadModeForGlobalResultRegister(Ifx_EVADC *evadc, boolean enabled)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2262  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2263      evadc->GLOB.RCR.B.WFR = enabled;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2264  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2265  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2266  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2267  IFX_INLINE void IfxEvadc_setFastCompareBoundaryFlagSwControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagSwControl control)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2268  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2269      evadcFC->FCBFL.B.BFS = control;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2270  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2271  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2272  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2273  IFX_INLINE void IfxEvadc_setFastCompareBoundaryFlagInversion(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagInversionControl mode)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2274  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2275      evadcFC->FCBFL.B.BFI = mode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2276  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2277  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2278  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2279  IFX_INLINE void IfxEvadc_disableFastCompareBoundaryFlag(Ifx_EVADC_FC *evadcFC)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2280  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2281      evadcFC->FCBFL.B.BFM = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2282  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2283  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2284  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2285  IFX_INLINE void IfxEvadc_disableModule(Ifx_EVADC *evadc)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2286  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2287      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2288  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2289      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2290      evadc->CLC.B.DISR = 1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2291      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2292  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2293  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2294  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2295  IFX_INLINE void IfxEvadc_disablePostCalibration(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, boolean enabled)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2296  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2297      IFX_UNUSED_PARAMETER(group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2298      evadcG->ANCFG.B.DPCAL = enabled;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2299  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2300  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2301  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2302  IFX_INLINE void IfxEvadc_enableFastCompareBoundaryFlag(Ifx_EVADC_FC *evadcFC)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2303  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2304      evadcFC->FCBFL.B.BFM = 1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2305  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2306  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2307  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2308  IFX_INLINE void IfxEvadc_enableFastCompareSampleSynchronization(Ifx_EVADC_FC *evadcFC, IfxEvadc_SampleSynchronization mode)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2309  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2310      Ifx_EVADC_FC_FCM tempFCM;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2311      tempFCM.U       = evadcFC->FCM.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2312      tempFCM.B.FCMWC = 1;  /*Enabling write permission to FCM.B.SSE*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2313      tempFCM.B.SSE   = mode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2314      evadcFC->FCM.U  = tempFCM.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2315  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2316  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2317  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2318  IFX_INLINE void IfxEvadc_enableFifoMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, IfxEvadc_FifoMode fifoMode)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2319  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2320      evadcG->RCR[resultRegister].B.FEN = fifoMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2321  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2322  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2323  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2324  IFX_INLINE void IfxEvadc_enableModule(Ifx_EVADC *evadc)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2325  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2326      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2327  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2328      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2329      evadc->CLC.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2330      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2331  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2332  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2333  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2334  IFX_INLINE void IfxEvadc_enableServiceRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2335  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2336      evadcG->RCR[resultRegister].B.SRGEN = 1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2337  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2338  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2339  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2340  IFX_INLINE void IfxEvadc_disableServiceRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2341  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2342      evadcG->RCR[resultRegister].B.SRGEN = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2343  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2344  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2345  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2346  IFX_INLINE void IfxEvadc_setFastCompareReferencePrechargeDuration(Ifx_EVADC_FC *evadcFC, IfxEvadc_ReferencePrechargeControl duration)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2347  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2348      Ifx_EVADC_FC_FCCTRL tempFCCTRL;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2349      tempFCCTRL.U      = evadcFC->FCCTRL.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2350      tempFCCTRL.B.CPWC = 1; /*Enabling write permission to FCCTRL.B.RPC*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2351      tempFCCTRL.B.RPE  = duration;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2352      evadcFC->FCCTRL.U = tempFCCTRL.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2353  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2354  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2355  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2356  IFX_INLINE float32 IfxEvadc_getAdcAnalogFrequency(Ifx_EVADC_G *group)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2357  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2358  #ifdef IFX_CFG_AURIX_SCUCCU_USED
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2359      return IfxScuCcu_getSpbFrequency() / (1U + group->ANCFG.B.DIVA);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2360  #else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2361      return IfxScuCcu_getAdcFrequency() / (1U + group->ANCFG.B.DIVA);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2362  #endif
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2363  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2364  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2365  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2366  IFX_INLINE uint8 IfxEvadc_getAdcCalibrationActiveState(Ifx_EVADC *evadc, uint8 adcCalGroupNum)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2367  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2368      uint8 status = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2369      status = evadc->G[adcCalGroupNum].ARBCFG.B.CAL;
	lea	a2,[a15]1155
.L576:
	mov.a	a4,#11
.L122:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     2   * \file IfxEvadc.h
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     3   * \brief EVADC  basic functionality
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     4   * \ingroup IfxLld_Evadc
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     5   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     8   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     9   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    11   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    16   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    18   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    25   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    32   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    40   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    41   * \defgroup IfxLld_Evadc_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    42   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    43   * \defgroup IfxLld_Evadc_Std_Global Global Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    44   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    45   * \defgroup IfxLld_Evadc_Std_QueueRequest Queue Request Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    46   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    47   * \defgroup IfxLld_Evadc_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    48   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    49   * \defgroup IfxLld_Evadc_Std_Frequency Frequency Calculation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    50   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    51   * \defgroup IfxLld_Evadc_Std_Group Group Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    52   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    53   * \defgroup IfxLld_Evadc_Std_Module Module Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    54   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    55   * \defgroup IfxLld_Evadc_Std_Channel Channel Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    56   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    57   * \defgroup IfxLld_Evadc_Std_Emux Emux Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    58   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    59   * \defgroup IfxLld_Evadc_Std_FastCompare Fast Compare functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    60   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    61   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    62  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    63  #ifndef IFXEVADC_H
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    64  #define IFXEVADC_H 1
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    65  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    66  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    67  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    68  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    69  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    70  #include "_Impl/IfxEvadc_cfg.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    71  #include "_PinMap/IfxEvadc_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    72  #include "IfxEvadc_bf.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    73  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    74  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    75  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    76  #include "IfxCbs_reg.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    77  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    78  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    79  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    80  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    81  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    82  /** \addtogroup IfxLld_Evadc_Std_Enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    83   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    84  /** \brief Defined in MODULE_EVADC.G[x].ARBCFG.B.ANONS and ANONC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    85   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    86  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    87  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    88      IfxEvadc_AnalogConverterMode_off             = 0, /**< \brief Analog Converter off */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    89      IfxEvadc_AnalogConverterMode_slowStandby     = 1, /**< \brief Slow Standby Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    90      IfxEvadc_AnalogConverterMode_fastStandby     = 2, /**< \brief Fast Standby Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    91      IfxEvadc_AnalogConverterMode_normalOperation = 3  /**< \brief Normal operation mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    92  } IfxEvadc_AnalogConverterMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    93  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    94  /** \brief Arbitration round length defined in MODULE_EVADC.G[x].ARBCFG.ARBRND(x=0,1,..,11)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    95   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    96  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    97  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    98      IfxEvadc_ArbitrationRounds_4_slots  = 0,  /**< \brief An arbitration round contains 4 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    99      IfxEvadc_ArbitrationRounds_8_slots  = 1,  /**< \brief An arbitration round contains 8 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   100      IfxEvadc_ArbitrationRounds_16_slots = 2,  /**< \brief An arbitration round contains 16 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   101      IfxEvadc_ArbitrationRounds_20_slots = 3   /**< \brief An arbitration round contains 20 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   102  } IfxEvadc_ArbitrationRounds;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   103  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   104  /** \brief Boundary Extension defined in MODULE_EVADC.G[x].CHCTR[y].B.BNDSELX(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   105   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   106  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   107  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   108      IfxEvadc_BoundaryExtension_standard            = 0,   /**< \brief Boundary Standard mode. BNDSELU/BNDSELL as Boundaries */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   109      IfxEvadc_BoundaryExtension_fastCompareResult1  = 1,   /**< \brief Fast compare mode use as upper boundary  Channel result   1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   110      IfxEvadc_BoundaryExtension_fastCompareResult2  = 2,   /**< \brief Fast compare mode use as upper boundary  Channel result   2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   111      IfxEvadc_BoundaryExtension_fastCompareResult3  = 3,   /**< \brief Fast compare mode use as upper boundary  Channel result   3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   112      IfxEvadc_BoundaryExtension_fastCompareResult4  = 4,   /**< \brief Fast compare mode use as upper boundary  Channel result   4 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   113      IfxEvadc_BoundaryExtension_fastCompareResult5  = 5,   /**< \brief Fast compare mode use as upper boundary  Channel result   5 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   114      IfxEvadc_BoundaryExtension_fastCompareResult6  = 6,   /**< \brief Fast compare mode use as upper boundary  Channel result   6 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   115      IfxEvadc_BoundaryExtension_fastCompareResult7  = 7,   /**< \brief Fast compare mode use as upper boundary  Channel result   7 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   116      IfxEvadc_BoundaryExtension_fastCompareResult8  = 8,   /**< \brief Fast compare mode use as upper boundary  Channel result   8 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   117      IfxEvadc_BoundaryExtension_fastCompareResult9  = 9,   /**< \brief Fast compare mode use as upper boundary  Channel result   9 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   118      IfxEvadc_BoundaryExtension_fastCompareResult10 = 10,  /**< \brief Fast compare mode use as upper boundary  Channel result  10 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   119      IfxEvadc_BoundaryExtension_fastCompareResult11 = 11,  /**< \brief Fast compare mode use as upper boundary  Channel result  11 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   120      IfxEvadc_BoundaryExtension_fastCompareResult12 = 12,  /**< \brief Fast compare mode use as upper boundary  Channel result  12 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   121      IfxEvadc_BoundaryExtension_fastCompareResult13 = 13,  /**< \brief Fast compare mode use as upper boundary  Channel result  13 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   122      IfxEvadc_BoundaryExtension_fastCompareResult14 = 14,  /**< \brief Fast compare mode use as upper boundary  Channel result  14 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   123      IfxEvadc_BoundaryExtension_fastCompareResult15 = 15   /**< \brief Fast compare mode use as upper boundary  Channel result  15 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   124  } IfxEvadc_BoundaryExtension;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   125  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   126  /** \brief BoundarySel defined in MODULE_EVADC.G[x].CHCTR[y].B.BNDSELL(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   127   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   128  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   129  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   130      IfxEvadc_BoundarySelection_group0  = 0,  /**< \brief Use group class 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   131      IfxEvadc_BoundarySelection_group1  = 1,  /**< \brief Use group class 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   132      IfxEvadc_BoundarySelection_global0 = 2,  /**< \brief Use global class 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   133      IfxEvadc_BoundarySelection_global1 = 3   /**< \brief Use global class 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   134  } IfxEvadc_BoundarySelection;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   135  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   136  /** \brief EVADC Channels
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   137   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   138  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   139  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   140      IfxEvadc_ChannelId_none = -1,  /**< \brief None of EVADC channels */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   141      IfxEvadc_ChannelId_0    = 0,   /**< \brief Channel 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   142      IfxEvadc_ChannelId_1    = 1,   /**< \brief Channel 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   143      IfxEvadc_ChannelId_2    = 2,   /**< \brief Channel 2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   144      IfxEvadc_ChannelId_3    = 3,   /**< \brief Channel 3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   145      IfxEvadc_ChannelId_4    = 4,   /**< \brief Channel 4 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   146      IfxEvadc_ChannelId_5    = 5,   /**< \brief Channel 5 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   147      IfxEvadc_ChannelId_6    = 6,   /**< \brief Channel 6 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   148      IfxEvadc_ChannelId_7    = 7,   /**< \brief Channel 7 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   149      IfxEvadc_ChannelId_8    = 8,   /**< \brief Channel 8 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   150      IfxEvadc_ChannelId_9    = 9,   /**< \brief Channel 9 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   151      IfxEvadc_ChannelId_10   = 10,  /**< \brief Channel 10 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   152      IfxEvadc_ChannelId_11   = 11,  /**< \brief Channel 11 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   153      IfxEvadc_ChannelId_12   = 12,  /**< \brief Channel 12 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   154      IfxEvadc_ChannelId_13   = 13,  /**< \brief Channel 13 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   155      IfxEvadc_ChannelId_14   = 14,  /**< \brief Channel 14 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   156      IfxEvadc_ChannelId_15   = 15   /**< \brief Channel 15 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   157  } IfxEvadc_ChannelId;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   158  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   159  /** \brief ADC channel reference defined in MODULE_EVADC.G[x].CHCTR[y].B.REFSEL(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   160   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   161  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   162  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   163      IfxEvadc_ChannelReference_standard = 0,  /**< \brief use Varef as reference */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   164      IfxEvadc_ChannelReference_channel0 = 1   /**< \brief use CH0 as reference */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   165  } IfxEvadc_ChannelReference;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   166  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   167  /** \brief Channel Result defined in MODULE_EVADC.G[x].CHCTR[y].B.RESREG(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   168   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   169  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   170  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   171      IfxEvadc_ChannelResult_0 = 0,      /**< \brief Use Channel result 0  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   172      IfxEvadc_ChannelResult_1,          /**< \brief Use Channel result 1  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   173      IfxEvadc_ChannelResult_2,          /**< \brief Use Channel result 2  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   174      IfxEvadc_ChannelResult_3,          /**< \brief Use Channel result 3  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   175      IfxEvadc_ChannelResult_4,          /**< \brief Use Channel result 4  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   176      IfxEvadc_ChannelResult_5,          /**< \brief Use Channel result 5  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   177      IfxEvadc_ChannelResult_6,          /**< \brief Use Channel result 6  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   178      IfxEvadc_ChannelResult_7,          /**< \brief Use Channel result 7  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   179      IfxEvadc_ChannelResult_8,          /**< \brief Use Channel result 8  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   180      IfxEvadc_ChannelResult_9,          /**< \brief Use Channel result 9  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   181      IfxEvadc_ChannelResult_10,         /**< \brief Use Channel result 10  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   182      IfxEvadc_ChannelResult_11,         /**< \brief Use Channel result 11  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   183      IfxEvadc_ChannelResult_12,         /**< \brief Use Channel result 12  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   184      IfxEvadc_ChannelResult_13,         /**< \brief Use Channel result 13  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   185      IfxEvadc_ChannelResult_14,         /**< \brief Use Channel result 14  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   186      IfxEvadc_ChannelResult_15          /**< \brief Use Channel result 15  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   187  } IfxEvadc_ChannelResult;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   188  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   189  /** \brief External Multiplexer Channel Selection Style as defined in
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   190   * Ifx_EVADC.G[x].EMUXCTR.B.EMXCSS
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   191   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   192  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   193  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   194      IfxEvadc_ChannelSelectionStyle_channelNumber = 0,  /**< \brief selects an arbitrary channel */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   195      IfxEvadc_ChannelSelectionStyle_binary        = 1   /**< \brief Each bit of bitfield EMUXCH selects the
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   196                                                          * associated channel for EMUX control */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   197  } IfxEvadc_ChannelSelectionStyle;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   198  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   199  /** \brief Specifies the External Coding scheme(binary/gray)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   200   * defined in Ifx_EVADC.G[x].EMUXCTR.B.EMXCOD
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   201   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   202  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   203  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   204      IfxEvadc_EmuxCodingScheme_binary = 0,  /**< \brief Output the Channel Number in Binary code */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   205      IfxEvadc_EmuxCodingScheme_gray   = 1   /**< \brief Output the channel number in gray code */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   206  } IfxEvadc_EmuxCodingScheme;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   207  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   208  /** \brief Specifies the Emux interface
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   209   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   210  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   211  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   212      IfxEvadc_EmuxInterface_0 = 0,  /**< \brief Emux Interface 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   213      IfxEvadc_EmuxInterface_1 = 1   /**< \brief Emux Interface 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   214  } IfxEvadc_EmuxInterface;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   215  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   216  /** \brief External Multiplexer sample time control
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   217   * defined in Ifx_EVADC.G[x].EMUXCTR.B.EMXST
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   218   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   219  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   220  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   221      IfxEvadc_EmuxSampleTimeControl_settingChanges = 0,  /**< \brief Use STCE Whenever Setting Changes */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   222      IfxEvadc_EmuxSampleTimeControl_always         = 1   /**< \brief Use STCE for each conversion of an external channel */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   223  } IfxEvadc_EmuxSampleTimeControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   224  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   225  /** \brief specifies the External Channel Start select value
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   226   * defined in Ifx_EVADC.G[x].EMUXCTR.B.EMUXSET
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   227   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   228  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   229  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   230      IfxEvadc_EmuxSelectValue_0 = 0,      /**< \brief Start Selection Value 0  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   231      IfxEvadc_EmuxSelectValue_1,          /**< \brief Start Selection Value 1  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   232      IfxEvadc_EmuxSelectValue_2,          /**< \brief Start Selection Value 2  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   233      IfxEvadc_EmuxSelectValue_3,          /**< \brief Start Selection Value 3  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   234      IfxEvadc_EmuxSelectValue_4,          /**< \brief Start Selection Value 4  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   235      IfxEvadc_EmuxSelectValue_5,          /**< \brief Start Selection Value 5  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   236      IfxEvadc_EmuxSelectValue_6,          /**< \brief Start Selection Value 6  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   237      IfxEvadc_EmuxSelectValue_7           /**< \brief Start Selection Value 7  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   238  } IfxEvadc_EmuxSelectValue;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   239  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   240  /** \brief Specifies External Multiplexer Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   241   * define in Ifx_EVADC.G[x].EMUXCTR.B.EMUXMODE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   242   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   243  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   244  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   245      IfxEvadc_ExternalMultiplexerMode_softwareControl = 0,  /**< \brief Disable The Emux Control */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   246      IfxEvadc_ExternalMultiplexerMode_steady          = 1,  /**< \brief select steady mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   247      IfxEvadc_ExternalMultiplexerMode_singleStep      = 2,  /**< \brief Select single step mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   248      IfxEvadc_ExternalMultiplexerMode_sequence        = 3   /**< \brief Select Sequence Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   249  } IfxEvadc_ExternalMultiplexerMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   250  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   251  /** \brief FIFO mode enable
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   252   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   253  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   254  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   255      IfxEvadc_FifoMode_seperateResultRegister = 0,  /**< \brief seperate Result Register */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   256      IfxEvadc_FifoMode_fifoStructure          = 1,  /**< \brief Part of FIFO structure: copy each new valid result */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   257      IfxEvadc_FifoMode_maximumMode            = 2,  /**< \brief copy new result if bigger */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   258      IfxEvadc_FifoMode_minimumMode            = 3   /**< \brief copy new result if it is smaller */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   259  } IfxEvadc_FifoMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   260  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   261  /** \brief gating mode defined in MODULE_EVADC.QMR0.ENGT
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   262   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   263  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   264  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   265      IfxEvadc_GatingMode_disabled   = 0,  /**< \brief Gating is disabled, no conversion request are issued */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   266      IfxEvadc_GatingMode_always     = 1,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   267      IfxEvadc_GatingMode_gatingHigh = 2,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is high */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   268      IfxEvadc_GatingMode_gatingLow  = 3   /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is low */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   269  } IfxEvadc_GatingMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   270  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   271  /** \brief External trigger gating defined in MODULE_EVADC.G[x].QCTRLy.GTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   272   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   273  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   274  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   275      IfxEvadc_GatingSource_0 = 0,      /**< \brief Input signal REQGTx_0  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   276      IfxEvadc_GatingSource_1,          /**< \brief Input signal REQGTx_1  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   277      IfxEvadc_GatingSource_2,          /**< \brief Input signal REQGTx_2  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   278      IfxEvadc_GatingSource_3,          /**< \brief Input signal REQGTx_3  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   279      IfxEvadc_GatingSource_4,          /**< \brief Input signal REQGTx_4  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   280      IfxEvadc_GatingSource_5,          /**< \brief Input signal REQGTx_5  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   281      IfxEvadc_GatingSource_6,          /**< \brief Input signal REQGTx_6  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   282      IfxEvadc_GatingSource_7,          /**< \brief Input signal REQGTx_7  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   283      IfxEvadc_GatingSource_8,          /**< \brief Input signal REQGTx_8  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   284      IfxEvadc_GatingSource_9,          /**< \brief Input signal REQGTx_9  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   285      IfxEvadc_GatingSource_10,         /**< \brief Input signal REQGTx_10  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   286      IfxEvadc_GatingSource_11,         /**< \brief Input signal REQGTx_11  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   287      IfxEvadc_GatingSource_12,         /**< \brief Input signal REQGTx_12  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   288      IfxEvadc_GatingSource_13,         /**< \brief Input signal REQGTx_13  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   289      IfxEvadc_GatingSource_14,         /**< \brief Input signal REQGTx_14  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   290      IfxEvadc_GatingSource_15          /**< \brief Input signal REQGTx_15  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   291  } IfxEvadc_GatingSource;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   292  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   293  /** \brief inputClass defined in MODULE_EVADC.G[x].CHCTR[y].B.ICLSEL(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   294   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   295  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   296  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   297      IfxEvadc_InputClasses_group0  = 0,  /**< \brief Use group class 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   298      IfxEvadc_InputClasses_group1  = 1,  /**< \brief Use group class 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   299      IfxEvadc_InputClasses_global0 = 2,  /**< \brief Use global class 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   300      IfxEvadc_InputClasses_global1 = 3   /**< \brief Use global class 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   301  } IfxEvadc_InputClasses;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   302  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   303  /** \brief ADC channel limit check defined in MODULE_EVADC.G[x].CHCTR[y].B.CHEVMODE(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   304   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   305  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   306  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   307      IfxEvadc_LimitCheck_noCheck            = 0,  /**< \brief Normal compare mode Event Never Fast Compare mode Event Never */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   308      IfxEvadc_LimitCheck_eventIfInArea      = 1,  /**< \brief Normal compare mode Event If result is inside the boundary band    Fast Compare mode Event If result switches to high (above comp. value) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   309      IfxEvadc_LimitCheck_eventIfOutsideArea = 2,  /**< \brief Normal compare mode Event If result is outside the boundary band   Fast Compare mode Event If result switches to low (below comp. value) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   310      IfxEvadc_LimitCheck_always             = 3   /**< \brief Normal compare mode Event Always   Fast Compare mode Event Always */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   311  } IfxEvadc_LimitCheck;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   312  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   313  /** \brief Access protection for Group registers defined in MODULE_EVADC.ACCPROT0.U
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   314   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   315  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   316  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   317      IfxEvadc_Protection_channelControl0         = 0,   /**< \brief Access control for GxCHCTR0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   318      IfxEvadc_Protection_channelControl1         = 1,   /**< \brief Access control for GxCHCTR1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   319      IfxEvadc_Protection_channelControl2         = 2,   /**< \brief Access control for GxCHCTR2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   320      IfxEvadc_Protection_channelControl3         = 3,   /**< \brief Access control for GxCHCTR3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   321      IfxEvadc_Protection_channelControl4         = 4,   /**< \brief Access control for GxCHCTR4 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   322      IfxEvadc_Protection_channelControl5         = 5,   /**< \brief Access control for GxCHCTR5 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   323      IfxEvadc_Protection_channelControl6         = 6,   /**< \brief Access control for GxCHCTR6 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   324      IfxEvadc_Protection_channelControl7         = 7,   /**< \brief Access control for GxCHCTR7 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   325      IfxEvadc_Protection_channelControl8         = 8,   /**< \brief Access control for GxCHCTR8 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   326      IfxEvadc_Protection_channelControl9         = 9,   /**< \brief Access control for GxCHCTR9 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   327      IfxEvadc_Protection_channelControl10        = 10,  /**< \brief Access control for GxCHCTR10 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   328      IfxEvadc_Protection_channelControl11        = 11,  /**< \brief Access control for GxCHCTR11 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   329      IfxEvadc_Protection_channelControl12        = 12,  /**< \brief Access control for GxCHCTR12 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   330      IfxEvadc_Protection_channelControl13        = 13,  /**< \brief Access control for GxCHCTR13 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   331      IfxEvadc_Protection_channelControl14        = 14,  /**< \brief Access control for GxCHCTR14 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   332      IfxEvadc_Protection_initGroup0              = 16,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   333      IfxEvadc_Protection_initGroup1              = 17,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   334      IfxEvadc_Protection_initGroup2              = 18,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   335      IfxEvadc_Protection_initGroup3              = 19,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   336      IfxEvadc_Protection_initGroup4              = 20,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   337      IfxEvadc_Protection_initGroup5              = 21,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   338      IfxEvadc_Protection_initGroup6              = 22,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   339      IfxEvadc_Protection_initGroup7              = 23,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   340      IfxEvadc_Protection_initGroup8              = 24,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   341      IfxEvadc_Protection_initGroup9              = 25,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   342      IfxEvadc_Protection_initGroup10             = 26,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   343      IfxEvadc_Protection_initGroup11             = 27,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   344      IfxEvadc_Protection_initGroup12             = 28,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   345      IfxEvadc_Protection_initGroup13             = 29,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   346      IfxEvadc_Protection_initGroup14             = 30,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   347      IfxEvadc_Protection_serviceGroup0           = 32,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   348      IfxEvadc_Protection_serviceGroup1           = 33,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   349      IfxEvadc_Protection_serviceGroup2           = 34,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   350      IfxEvadc_Protection_serviceGroup3           = 35,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   351      IfxEvadc_Protection_serviceGroup4           = 36,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   352      IfxEvadc_Protection_serviceGroup5           = 37,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   353      IfxEvadc_Protection_serviceGroup6           = 38,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   354      IfxEvadc_Protection_serviceGroup7           = 39,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   355      IfxEvadc_Protection_serviceGroup8           = 40,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   356      IfxEvadc_Protection_serviceGroup9           = 41,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   357      IfxEvadc_Protection_serviceGroup10          = 42,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   358      IfxEvadc_Protection_serviceGroup11          = 43,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   359      IfxEvadc_Protection_serviceGroup12          = 44,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   360      IfxEvadc_Protection_serviceGroup13          = 45,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   361      IfxEvadc_Protection_serviceGroup14          = 46,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   362      IfxEvadc_Protection_resultRegisterGroup0    = 48,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   363      IfxEvadc_Protection_resultRegisterGroup1    = 49,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   364      IfxEvadc_Protection_resultRegisterGroup2    = 50,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   365      IfxEvadc_Protection_resultRegisterGroup3    = 51,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   366      IfxEvadc_Protection_resultRegisterGroup4    = 52,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   367      IfxEvadc_Protection_resultRegisterGroup5    = 53,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   368      IfxEvadc_Protection_resultRegisterGroup6    = 54,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   369      IfxEvadc_Protection_resultRegisterGroup7    = 55,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   370      IfxEvadc_Protection_resultRegisterGroup8    = 56,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   371      IfxEvadc_Protection_resultRegisterGroup9    = 57,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   372      IfxEvadc_Protection_resultRegisterGroup10   = 58,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   373      IfxEvadc_Protection_resultRegisterGroup11   = 59,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   374      IfxEvadc_Protection_resultRegisterGroup12   = 60,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   375      IfxEvadc_Protection_resultRegisterGroup13   = 61,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   376      IfxEvadc_Protection_resultRegisterGroup14   = 62,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   377      IfxEvadc_Protection_initFastCompareChannel0 = 64,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   378                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   379      IfxEvadc_Protection_initFastCompareChannel1 = 65,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   380                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   381      IfxEvadc_Protection_initFastCompareChannel2 = 66,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   382                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   383      IfxEvadc_Protection_initFastCompareChannel3 = 67,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   384                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   385      IfxEvadc_Protection_initFastCompareChannel4 = 68,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   386                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   387      IfxEvadc_Protection_initFastCompareChannel5 = 69,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   388                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   389      IfxEvadc_Protection_initFastCompareChannel6 = 70,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   390                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   391      IfxEvadc_Protection_initFastCompareChannel7 = 71,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   392                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   393      IfxEvadc_Protection_globalConfig            = 80,  /**< \brief Access control for GLOBCFG */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   394      IfxEvadc_Protection_externalMultiplexer     = 81,  /**< \brief Access control for EMUXSEL, GxEMUXCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   395      IfxEvadc_Protection_testFunction            = 82   /**< \brief Access control for GLOBTF */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   396  } IfxEvadc_Protection;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   397  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   398  /** \brief Arbitration priority, Group x,defined in MODULE_EVADC.G[x].ARBPR.PRIOy(x=0,1,...,11;y=0,1,2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   399   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   400  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   401  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   402      IfxEvadc_RequestSlotPriority_lowest  = 0, /**< \brief Lowest priority */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   403      IfxEvadc_RequestSlotPriority_low     = 1, /**< \brief Lowpriority */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   404      IfxEvadc_RequestSlotPriority_high    = 2, /**< \brief High priority */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   405      IfxEvadc_RequestSlotPriority_highest = 3  /**< \brief Highest priority */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   406  } IfxEvadc_RequestSlotPriority;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   407  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   408  /** \brief Request source start mode defined in MODULE_EVADC.G[x].ARBPR.CSMy(x=0,1,...,11;y=0,1,2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   409   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   410  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   411  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   412      IfxEvadc_RequestSlotStartMode_waitForStart       = 0, /**< \brief Wait for start */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   413      IfxEvadc_RequestSlotStartMode_cancelInjectRepeat = 1  /**< \brief Cancel-Inject-Repeat */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   414  } IfxEvadc_RequestSlotStartMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   415  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   416  /** \brief Request sources
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   417   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   418  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   419  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   420      IfxEvadc_RequestSource_queue0 = 0,  /**< \brief 8 stage Queue0 request */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   421      IfxEvadc_RequestSource_queue1 = 1,  /**< \brief 8 stage Queue1 request */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   422      IfxEvadc_RequestSource_queue2 = 2   /**< \brief 8 stage Queue2 request */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   423  } IfxEvadc_RequestSource;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   424  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   425  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   426   * Definition in Ifx_EVADC.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   427   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   428  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   429  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   430      IfxEvadc_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   431      IfxEvadc_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   432  } IfxEvadc_SleepMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   433  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   434  /** \brief Service Node defined in MODULE_EVADC.G[x].SRACT.U(x= 0,1,..,11)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   435   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   436  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   437  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   438      IfxEvadc_SrcNr_group0  = 0,  /**< \brief service request line 0 of group */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   439      IfxEvadc_SrcNr_group1  = 1,  /**< \brief service request line 1 of group */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   440      IfxEvadc_SrcNr_group2  = 2,  /**< \brief service request line 2 of group */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   441      IfxEvadc_SrcNr_group3  = 3,  /**< \brief service request line 3 of group */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   442      IfxEvadc_SrcNr_shared0 = 4,  /**< \brief Select shared service request line 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   443      IfxEvadc_SrcNr_shared1 = 5,  /**< \brief Select shared service request line 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   444      IfxEvadc_SrcNr_shared2 = 6,  /**< \brief Select shared service request line 2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   445      IfxEvadc_SrcNr_shared3 = 7   /**< \brief Select shared service request line 3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   446  } IfxEvadc_SrcNr;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   447  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   448  /** \brief API return values defined in
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   449   * MODULE_EVADC.G[x].QSR0.U,MODULE_EVADC.G[x].QSR1.U,MODULE_EVADC.G[x].QSR2.U(x=0,1,...,11)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   450   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   451  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   452  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   453      IfxEvadc_Status_noError              = 0, /**< \brief No error during api execution */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   454      IfxEvadc_Status_notInitialised       = 1, /**< \brief Appropriate initialisation not done */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   455      IfxEvadc_Status_invalidGroup         = 2, /**< \brief Invalid group number */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   456      IfxEvadc_Status_invalidChannel       = 3, /**< \brief Invalid channel number */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   457      IfxEvadc_Status_queueFull            = 4, /**< \brief Queue is full */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   458      IfxEvadc_Status_noAccess             = 5, /**< \brief Access to the group/channel is disabled */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   459      IfxEvadc_Status_channelsStillPending = 6  /**< \brief Conversion for some of the channels are still pending */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   460  } IfxEvadc_Status;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   461  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   462  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   463   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   464  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   465  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   466      IfxEvadc_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   467      IfxEvadc_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   468      IfxEvadc_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   469  } IfxEvadc_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   470  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   471  /** \brief trigger definition defined in MODULE_EVADC.G[x].QCTRL0.XTMODE(x=0,1,..,11)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   472   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   473  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   474  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   475      IfxEvadc_TriggerMode_noExternalTrigger = 0,  /**< \brief No external trigger */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   476      IfxEvadc_TriggerMode_uponFallingEdge   = 1,  /**< \brief Trigger event upon a falling edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   477      IfxEvadc_TriggerMode_uponRisingEdge    = 2,  /**< \brief Trigger event upon a rising edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   478      IfxEvadc_TriggerMode_uponAnyEdge       = 3   /**< \brief Trigger event upon any edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   479  } IfxEvadc_TriggerMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   480  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   481  /** \brief Trigger request source defined in MODULE_EVADC.G[x].QCTRLy.XTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   482   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   483  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   484  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   485      IfxEvadc_TriggerSource_0 = 0,      /**< \brief Input signal REQTRx_0  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   486      IfxEvadc_TriggerSource_1,          /**< \brief Input signal REQTRx_1  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   487      IfxEvadc_TriggerSource_2,          /**< \brief Input signal REQTRx_2  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   488      IfxEvadc_TriggerSource_3,          /**< \brief Input signal REQTRx_3  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   489      IfxEvadc_TriggerSource_4,          /**< \brief Input signal REQTRx_4  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   490      IfxEvadc_TriggerSource_5,          /**< \brief Input signal REQTRx_5  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   491      IfxEvadc_TriggerSource_6,          /**< \brief Input signal REQTRx_6  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   492      IfxEvadc_TriggerSource_7,          /**< \brief Input signal REQTRx_7  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   493      IfxEvadc_TriggerSource_8,          /**< \brief Input signal REQTRx_8  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   494      IfxEvadc_TriggerSource_9,          /**< \brief Input signal REQTRx_9  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   495      IfxEvadc_TriggerSource_10,         /**< \brief Input signal REQTRx_10  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   496      IfxEvadc_TriggerSource_11,         /**< \brief Input signal REQTRx_11  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   497      IfxEvadc_TriggerSource_12,         /**< \brief Input signal REQTRx_12  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   498      IfxEvadc_TriggerSource_13,         /**< \brief Input signal REQTRx_13  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   499      IfxEvadc_TriggerSource_14,         /**< \brief Input signal REQTRx_14  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   500      IfxEvadc_TriggerSource_15          /**< \brief Input signal REQTRx_15  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   501  } IfxEvadc_TriggerSource;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   502  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   503  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   504  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   505  /** \addtogroup IfxLld_Evadc_Std_FastCompare
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   506   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   507  /** \brief Selects the behaviour of BoundaryFlag in FCBFL.B.BFA
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   508   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   509  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   510  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   511      IfxEvadc_BoundaryFlagActivationMode_0 = 0,  /**< \brief Set boundary flag BFL if result FCR = 1 (input above the defined
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   512                                                   * band or compare value), clear if FCR = 0 (input below) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   513      IfxEvadc_BoundaryFlagActivationMode_1 = 1   /**< \brief Set boundary flag BFL if result FCR = 0 (input below the defined
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   514                                                   * band or compare value), clear if FCR = 1 (input above) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   515  } IfxEvadc_BoundaryFlagActivationMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   516  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   517  /** \brief Controls in in FCBFL.B.BFI options for whether to use Boundary Flag(FCM.B.BFL) directly or in a inverted format.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   518   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   519  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   520  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   521      IfxEvadc_BoundaryFlagInversionControl_direct = 0,  /**< \brief Use BFL directly */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   522      IfxEvadc_BoundaryFlagInversionControl_invert = 1   /**< \brief Use inverted BFL */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   523  } IfxEvadc_BoundaryFlagInversionControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   524  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   525  /** \brief Options for FCBFL.B.BFLNP to select Boundary Flag Node Pointer
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   526   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   527  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   528  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   529      IfxEvadc_BoundaryFlagNodePointer_commonBoundaryFlagOutput0 = 0,  /**< \brief Select common boundary flag output 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   530      IfxEvadc_BoundaryFlagNodePointer_commonBoundaryFlagOutput1 = 1,  /**< \brief Select common boundary flag output 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   531      IfxEvadc_BoundaryFlagNodePointer_commonBoundaryFlagOutput2 = 2,  /**< \brief Select common boundary flag output 2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   532      IfxEvadc_BoundaryFlagNodePointer_commonBoundaryFlagOutput3 = 3,  /**< \brief Select common boundary flag output 3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   533      IfxEvadc_BoundaryFlagNodePointer_sharedServiceRequestLine0 = 4,  /**< \brief Select shared service request line 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   534      IfxEvadc_BoundaryFlagNodePointer_sharedServiceRequestLine1 = 5,  /**< \brief Select shared service request line 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   535      IfxEvadc_BoundaryFlagNodePointer_sharedServiceRequestLine2 = 6,  /**< \brief Select shared service request line 2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   536      IfxEvadc_BoundaryFlagNodePointer_sharedServiceRequestLine3 = 7,  /**< \brief Select shared service request line 3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   537      IfxEvadc_BoundaryFlagNodePointer_disabled                  = 16  /**< \brief Disabled, no common output signal */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   538  } IfxEvadc_BoundaryFlagNodePointer;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   539  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   540  /** \brief Options for FCBFL.B.BFS to modify the Boundary Flag(FCM.B.BFL)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   541   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   542  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   543  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   544      IfxEvadc_BoundaryFlagSwControl_noAction = 0,  /**< \brief No Action */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   545      IfxEvadc_BoundaryFlagSwControl_clear    = 1,  /**< \brief Clear BFL */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   546      IfxEvadc_BoundaryFlagSwControl_set      = 2,  /**< \brief Set BFL */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   547      IfxEvadc_BoundaryFlagSwControl_toggle   = 3   /**< \brief Toggle BFL */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   548  } IfxEvadc_BoundaryFlagSwControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   549  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   550  /** \brief Channel Event Mode for configuring generation of events for Fast Compare channels in FCCTRL.B.CHEVMODE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   551   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   552  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   553  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   554      IfxEvadc_ChannelEventMode_never                    = 0, /**< \brief Never generate a service request */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   555      IfxEvadc_ChannelEventMode_aboveCompareValue        = 1, /**< \brief Generate a service request in case the result is above compare value */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   556      IfxEvadc_ChannelEventMode_belowCompareValue        = 2, /**< \brief Generate a service request in case the result is below compare value */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   557      IfxEvadc_ChannelEventMode_aboveOrBelowCompareValue = 3  /**< \brief Generate a service request in case the result switches to either level(above or below the compare value) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   558  } IfxEvadc_ChannelEventMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   559  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   560  /** \brief Defines the frequency of the analog converter clock f_ADCI (base clock for
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   561   * conversion steps), derived from the peripheral clock: f_ADCI = fADC / CP.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   562   * To be filled in FCCTRL.B.DIVA for Fast Compare channels & ANCFG.B.DIVA for other groups
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   563   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   564  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   565  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   566      IfxEvadc_ClockDividerFactor_maxFrequency = 0,  /**< \brief Max. frequency */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   567      IfxEvadc_ClockDividerFactor_2            = 1,  /**< \brief Frequency Divided by 2  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   568      IfxEvadc_ClockDividerFactor_3,                 /**< \brief Frequency Divided by 3  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   569      IfxEvadc_ClockDividerFactor_4,                 /**< \brief Frequency Divided by 4  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   570      IfxEvadc_ClockDividerFactor_5,                 /**< \brief Frequency Divided by 5  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   571      IfxEvadc_ClockDividerFactor_6,                 /**< \brief Frequency Divided by 6  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   572      IfxEvadc_ClockDividerFactor_7,                 /**< \brief Frequency Divided by 7  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   573      IfxEvadc_ClockDividerFactor_8,                 /**< \brief Frequency Divided by 8  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   574      IfxEvadc_ClockDividerFactor_9,                 /**< \brief Frequency Divided by 9  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   575      IfxEvadc_ClockDividerFactor_10,                /**< \brief Frequency Divided by 10  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   576      IfxEvadc_ClockDividerFactor_11,                /**< \brief Frequency Divided by 11  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   577      IfxEvadc_ClockDividerFactor_12,                /**< \brief Frequency Divided by 12  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   578      IfxEvadc_ClockDividerFactor_13,                /**< \brief Frequency Divided by 13  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   579      IfxEvadc_ClockDividerFactor_14,                /**< \brief Frequency Divided by 14  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   580      IfxEvadc_ClockDividerFactor_15,                /**< \brief Frequency Divided by 15  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   581      IfxEvadc_ClockDividerFactor_16,                /**< \brief Frequency Divided by 16  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   582      IfxEvadc_ClockDividerFactor_17,                /**< \brief Frequency Divided by 17  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   583      IfxEvadc_ClockDividerFactor_18,                /**< \brief Frequency Divided by 18  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   584      IfxEvadc_ClockDividerFactor_19,                /**< \brief Frequency Divided by 19  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   585      IfxEvadc_ClockDividerFactor_20,                /**< \brief Frequency Divided by 20  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   586      IfxEvadc_ClockDividerFactor_21,                /**< \brief Frequency Divided by 21  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   587      IfxEvadc_ClockDividerFactor_22,                /**< \brief Frequency Divided by 22  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   588      IfxEvadc_ClockDividerFactor_23,                /**< \brief Frequency Divided by 23  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   589      IfxEvadc_ClockDividerFactor_24,                /**< \brief Frequency Divided by 24  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   590      IfxEvadc_ClockDividerFactor_25,                /**< \brief Frequency Divided by 25  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   591      IfxEvadc_ClockDividerFactor_26,                /**< \brief Frequency Divided by 26  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   592      IfxEvadc_ClockDividerFactor_27,                /**< \brief Frequency Divided by 27  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   593      IfxEvadc_ClockDividerFactor_28,                /**< \brief Frequency Divided by 28  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   594      IfxEvadc_ClockDividerFactor_29,                /**< \brief Frequency Divided by 29  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   595      IfxEvadc_ClockDividerFactor_30,                /**< \brief Frequency Divided by 30  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   596      IfxEvadc_ClockDividerFactor_31,                /**< \brief Frequency Divided by 31  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   597      IfxEvadc_ClockDividerFactor_32                 /**< \brief Frequency Divided by 32  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   598  } IfxEvadc_ClockDividerFactor;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   599  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   600  /** \brief External Trigger Polarity to be set in FCCTRL.B.XTPOL
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   601   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   602  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   603  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   604      IfxEvadc_ExternalTriggerPolarity_direct   = 0, /**< \brief Use selected input signal directly */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   605      IfxEvadc_ExternalTriggerPolarity_inverted = 1  /**< \brief Invert selected input signal */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   606  } IfxEvadc_ExternalTriggerPolarity;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   607  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   608  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   609  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   610      IfxEvadc_FastCompareAnalogClockSynchronizationDelay_0 = 0,  /**< \brief No delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   611      IfxEvadc_FastCompareAnalogClockSynchronizationDelay_1 = 1,  /**< \brief 1 clock cycle delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   612      IfxEvadc_FastCompareAnalogClockSynchronizationDelay_2 = 2,  /**< \brief 2 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   613      IfxEvadc_FastCompareAnalogClockSynchronizationDelay_3 = 3   /**< \brief 3 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   614  } IfxEvadc_FastCompareAnalogClockSynchronizationDelay;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   615  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   616  /** \brief Settings for Analog Coverter Controller to be done in FCM.B.ANON
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   617   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   618  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   619  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   620      IfxEvadc_FastCompareAnalogConverterControl_off    = 0, /**< \brief Analog converter off */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   621      IfxEvadc_FastCompareAnalogConverterControl_normal = 1  /**< \brief Normal operation */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   622  } IfxEvadc_FastCompareAnalogConverterControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   623  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   624  /** \brief Defines the source of the value(s) in bitfield FCM.B.FCREF
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   625   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   626   * Note: Software can only write to bitfield FCM.B.FCREF, while AUE = 00B.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   627   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   628  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   629  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   630      IfxEvadc_FastCompareAutomaticUpdate_sw             = 0,  /**< \brief No automatic update.Value(s) written by software. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   631      IfxEvadc_FastCompareAutomaticUpdate_alternateValue = 1,  /**< \brief While gate is active (high), value is copied from bitfield FCM.B.FCRCOMPA and while gate is inactive (low), value is copied from bitfield FCM.B.FCRCOMPB */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   632      IfxEvadc_FastCompareAutomaticUpdate_rampCounter    = 2,  /**< \brief Value(s) copied from ramp counter on ramp start or counter
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   633                                                                * update. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   634      IfxEvadc_FastCompareAutomaticUpdate_analogSource   = 3   /**< \brief Value(s) written by the associated converter */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   635  } IfxEvadc_FastCompareAutomaticUpdate;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   636  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   637  /** \brief Defines the basic run conditions of the fast compare channel in FCM.B.RUNCOMP
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   638   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   639  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   640  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   641      IfxEvadc_FastCompareRunControl_stop      = 0, /**< \brief Stop, no operation */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   642      IfxEvadc_FastCompareRunControl_alwaysRun = 1  /**< \brief Always run */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   643  } IfxEvadc_FastCompareRunControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   644  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   645  /** \brief Criteria/mode settings for service request generation in FCM.B.SRG
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   646   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   647  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   648  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   649      IfxEvadc_FastCompareServiceRequestGeneration_off       = 0, /**< \brief No service requests are generated */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   650      IfxEvadc_FastCompareServiceRequestGeneration_rampEnd   = 1, /**< \brief Issue service request when the ramp counter stops */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   651      IfxEvadc_FastCompareServiceRequestGeneration_newValue  = 2, /**< \brief Issue service request when a value is written to FCREF */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   652      IfxEvadc_FastCompareServiceRequestGeneration_newResult = 3  /**< \brief Issue service request when a new result available */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   653  } IfxEvadc_FastCompareServiceRequestGeneration;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   654  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   655  /** \brief Gate Operating Mode to be filled in FCCTRL.B.GTMODE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   656   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   657  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   658  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   659      IfxEvadc_GateOperatingMode_noGateFunction     = 0,  /**< \brief No gate function */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   660      IfxEvadc_GateOperatingMode_alternateValueMode = 1,  /**< \brief Alternate value mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   661      IfxEvadc_GateOperatingMode_lockBoundaryFlag   = 2   /**< \brief Lock boundary flag */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   662  } IfxEvadc_GateOperatingMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   663  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   664  /** \brief Ramp direction setting in FCM.B.FCRDIR
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   665   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   666  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   667  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   668      IfxEvadc_RampDirection_down = 0,  /**< \brief Decrement ramp counter and stop when counter <= FCRCOMPB */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   669      IfxEvadc_RampDirection_up   = 1   /**< \brief Increment ramp counter and stop when counter >= FCRCOMPB */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   670  } IfxEvadc_RampDirection;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   671  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   672  /** \brief Defines the run conditions for the ramp generation in FCM.B.RUNRAMP
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   673   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   674  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   675  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   676      IfxEvadc_RampRunControl_stop = 0,  /**< \brief Stop, no operation */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   677      IfxEvadc_RampRunControl_1    = 1,  /**< \brief Start immediately when GxFCRAMP0/1 is written */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   678      IfxEvadc_RampRunControl_2    = 2,  /**< \brief Start upon the selected trigger event of signal REQTRx */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   679      IfxEvadc_RampRunControl_3    = 3   /**< \brief Start immediately when GxFCRAMP0/1 is written and
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   680                                          * stop upon the selected trigger event of signal REQTRx */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   681  } IfxEvadc_RampRunControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   682  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   683  /** \brief Sample timing sync settings for FCM.B.SSE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   684   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   685  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   686  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   687      IfxEvadc_SampleSynchronization_off                     = 0, /**< \brief No synchronization */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   688      IfxEvadc_SampleSynchronization_synchronizeSampleTiming = 1  /**< \brief Sample timing is synchronized.This is recommended for operation of several ADCs. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   689  } IfxEvadc_SampleSynchronization;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   690  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   691  /** \brief Trigger operating mode in Fast Compare channels, to be entered in FCCTRL.B.XTMODE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   692   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   693  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   694  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   695      IfxEvadc_TriggerOperatingMode_noExternalTrigger = 0,  /**< \brief No external trigger */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   696      IfxEvadc_TriggerOperatingMode_fallingEdge       = 1,  /**< \brief Trigger event upon a falling edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   697      IfxEvadc_TriggerOperatingMode_risingEdge        = 2,  /**< \brief Trigger event upon a rising edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   698      IfxEvadc_TriggerOperatingMode_anyEdge           = 3   /**< \brief Trigger event upon any edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   699  } IfxEvadc_TriggerOperatingMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   700  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   701  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   702  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   703  /** \brief Defines the way the analog clock is generated.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   704   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   705  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   706  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   707      IfxEvadc_AnalogClockGenerationMode_synchronized   = 0, /**< \brief Synchronized mode: Initial clock pulse is defined by the phase synchronizer */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   708      IfxEvadc_AnalogClockGenerationMode_unsynchronized = 1  /**< \brief Unsynchronized mode: The analog clock is generated independently. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   709  } IfxEvadc_AnalogClockGenerationMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   710  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   711  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   712  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   713      IfxEvadc_AnalogClockSynchronizationDelay_0 = 0,  /**< \brief No Delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   714      IfxEvadc_AnalogClockSynchronizationDelay_1 = 1,  /**< \brief 1 clock cycle delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   715      IfxEvadc_AnalogClockSynchronizationDelay_2 = 2,  /**< \brief 2 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   716      IfxEvadc_AnalogClockSynchronizationDelay_3 = 3,  /**< \brief 3 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   717      IfxEvadc_AnalogClockSynchronizationDelay_4 = 4,  /**< \brief 4 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   718      IfxEvadc_AnalogClockSynchronizationDelay_5 = 5,  /**< \brief 5 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   719      IfxEvadc_AnalogClockSynchronizationDelay_6 = 6,  /**< \brief 6 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   720      IfxEvadc_AnalogClockSynchronizationDelay_7 = 7   /**< \brief 7 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   721  } IfxEvadc_AnalogClockSynchronizationDelay;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   722  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   723  /** \brief Analog Input Precharge Control for Standard Conversions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   724   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   725  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   726  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   727      IfxEvadc_AnalogInputPrechargeControl_noPrecharge = 0,  /**< \brief No Precharge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   728      IfxEvadc_AnalogInputPrechargeControl_8Cycles     = 1,  /**< \brief Precharge for 8 clock cycles */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   729      IfxEvadc_AnalogInputPrechargeControl_16Cycles    = 2,  /**< \brief Precharge for 16 clock cycles */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   730      IfxEvadc_AnalogInputPrechargeControl_32cycles    = 3   /**< \brief Precharge for 32 clock cycles */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   731  } IfxEvadc_AnalogInputPrechargeControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   732  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   733  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   734  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   735      IfxEvadc_ArbitrationMode_0 = 0,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   736      IfxEvadc_ArbitrationMode_1 = 1
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   737  } IfxEvadc_ArbitrationMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   738  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   739  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   740  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   741      IfxEvadc_CalibrationSampleTimeControl_2 = 0,  /**< \brief 2*t_ADCI */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   742      IfxEvadc_CalibrationSampleTimeControl_4 = 1,  /**< \brief 4*t_ADCI */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   743      IfxEvadc_CalibrationSampleTimeControl_6 = 2,  /**< \brief 6*t_ADCI */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   744      IfxEvadc_CalibrationSampleTimeControl_8 = 3   /**< \brief 8*t_ADCI */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   745  } IfxEvadc_CalibrationSampleTimeControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   746  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   747  /** \brief Conversion Mode for standard Conversion
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   748   *  channel precision defined in MODULE_EVADC.G[x].CHCTR[y].B.ICLASS[y].B.CMS(x=0,1,...,11;y=0,1)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   749   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   750  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   751  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   752      IfxEvadc_ChannelNoiseReduction_standardConversion = 0,  /**< \brief Standard Conversions mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   753      IfxEvadc_ChannelNoiseReduction_level1             = 1,  /**< \brief Noise reduction conversion level 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   754      IfxEvadc_ChannelNoiseReduction_level2             = 2,  /**< \brief Noise reduction conversion level 2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   755      IfxEvadc_ChannelNoiseReduction_level3             = 3   /**< \brief Noise reduction conversion level 3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   756  } IfxEvadc_ChannelNoiseReduction;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   757  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   758  /** \brief Conversion Mode for EMUX Conversions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   759   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   760  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   761  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   762      IfxEvadc_ChannelNoiseReductionEMUX_standardConversion = 0,  /**< \brief Standard conversion */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   763      IfxEvadc_ChannelNoiseReductionEMUX_level1             = 1,  /**< \brief Noise reduction conversion level 1, 1 additional conversion step */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   764      IfxEvadc_ChannelNoiseReductionEMUX_level2             = 2,  /**< \brief Noise reduction conversion level 2, 3 additional conversion steps */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   765      IfxEvadc_ChannelNoiseReductionEMUX_level3             = 3   /**< \brief Noise reduction conversion level 3, 7 additional conversion steps */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   766  } IfxEvadc_ChannelNoiseReductionEMUX;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   767  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   768  /** \brief Data Modification Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   769   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   770  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   771  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   772      IfxEvadc_DataModificationMode_standardDataReduction = 0,  /**< \brief Standard Data Reduction */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   773      IfxEvadc_DataModificationMode_resultFilteringMode   = 1,  /**< \brief Result Filtering Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   774      IfxEvadc_DataModificationMode_differenceMode        = 2   /**< \brief Difference Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   775  } IfxEvadc_DataModificationMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   776  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   777  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   778  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   779      IfxEvadc_DataReductionControlMode_0  = 0,   /**< \brief If DMM=0b00, Data reduction disabled,if DMM=0b01, FIR:a=2,b=1,c=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   780      IfxEvadc_DataReductionControlMode_1  = 1,   /**< \brief If DMM=0b00, Accumulate 2 result values,if DMM=0b01, FIR:a=1,b=2,c=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   781      IfxEvadc_DataReductionControlMode_2  = 2,   /**< \brief If DMM=0b00, Accumulate 3 result values,if DMM=0b01, FIR:a=2,b=0,c=1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   782      IfxEvadc_DataReductionControlMode_3  = 3,   /**< \brief If DMM=0b00, Accumulate 4 result values,if DMM=0b01, FIR:a=1,b=1,c=1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   783      IfxEvadc_DataReductionControlMode_4  = 4,   /**< \brief If DMM=0b00, Accumulate 5 result values,if DMM=0b01, FIR:a=1,b=0,c=2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   784      IfxEvadc_DataReductionControlMode_5  = 5,   /**< \brief If DMM=0b00, Accumulate 6 result values,if DMM=0b01, FIR:a=3,b=1,c=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   785      IfxEvadc_DataReductionControlMode_6  = 6,   /**< \brief If DMM=0b00, Accumulate 7 result values,if DMM=0b01, FIR:a=2,b=2,c=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   786      IfxEvadc_DataReductionControlMode_7  = 7,   /**< \brief If DMM=0b00, Accumulate 8 result values,if DMM=0b01, FIR:a=1,b=3,c=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   787      IfxEvadc_DataReductionControlMode_8  = 8,   /**< \brief If DMM=0b00, Accumulate 9 result values,if DMM=0b01, FIR:a=3,b=0,c=1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   788      IfxEvadc_DataReductionControlMode_9  = 9,   /**< \brief If DMM=0b00, Accumulate 10 result values,if DMM=0b01, FIR:a=2,b=1,c=1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   789      IfxEvadc_DataReductionControlMode_10 = 10,  /**< \brief If DMM=0b00, Accumulate 11 result values,if DMM=0b01, FIR:a=1,b=2,c=1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   790      IfxEvadc_DataReductionControlMode_11 = 11,  /**< \brief If DMM=0b00, Accumulate 12 result values,if DMM=0b01, FIR:a=2,b=0,c=2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   791      IfxEvadc_DataReductionControlMode_12 = 12,  /**< \brief If DMM=0b00, Accumulate 13 result values,if DMM=0b01, FIR:a=1,b=1,c=2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   792      IfxEvadc_DataReductionControlMode_13 = 13,  /**< \brief If DMM=0b00, Accumulate 14 result values,if DMM=0b01, FIR:a=1,b=0,c=3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   793      IfxEvadc_DataReductionControlMode_14 = 14,  /**< \brief If DMM=0b00, Accumulate 15 result values,if DMM=0b01, IIR:a=2,b=2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   794      IfxEvadc_DataReductionControlMode_15 = 15   /**< \brief If DMM=0b00, Accumulate 16 result values,if DMM=0b01, IIR:a=3,b=4 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   795  } IfxEvadc_DataReductionControlMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   796  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   797  /** \brief Contains options for Idle Precharge levels
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   798   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   799  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   800  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   801      IfxEvadc_IdlePrecharge_currentLevel = 0,  /**< \brief The sampling capacitor keeps the current charge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   802      IfxEvadc_IdlePrecharge_referenceBy2 = 1   /**< \brief ThSampling capacitor is precharged to approx. half the reference when idle */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   803  } IfxEvadc_IdlePrecharge;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   804  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   805  /** \brief Selects the MSB conversion time(in terms of t_ADC)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   806   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   807  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   808  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   809      IfxEvadc_MsbConversionTime_singleClockCycle = 0,  /**< \brief 1 clock cycle for the MSB (standard) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   810      IfxEvadc_MsbConversionTime_doubleClockCycle = 1   /**< \brief 2 clock cycle for the MSB */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   811  } IfxEvadc_MsbConversionTime;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   812  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   813  /** \brief Reference Precharge Control
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   814   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   815  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   816  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   817      IfxEvadc_ReferencePrechargeControl_singleClockPhase  = 0, /**< \brief Precharge the reference input for 1 clock phase */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   818      IfxEvadc_ReferencePrechargeControl_singleClockPeriod = 1  /**< \brief Precharge the reference input for 1 clock period */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   819  } IfxEvadc_ReferencePrechargeControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   820  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   821  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   822  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   823      IfxEvadc_SpreadEarlySamplePointEMUXConversionsMode_nominal = 0,  /**< \brief Nominal sample timing */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   824      IfxEvadc_SpreadEarlySamplePointEMUXConversionsMode_spread  = 1   /**< \brief Spread sample timing, end of sample phase is varied */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   825  } IfxEvadc_SpreadEarlySamplePointEMUXConversionsMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   826  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   827  /** \brief Spread Early Sample Point for Standard Conversions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   828   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   829  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   830  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   831      IfxEvadc_SpreadEarlySamplePointStandardConversionsMode_nominal = 0,  /**< \brief Nominal sample timing */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   832      IfxEvadc_SpreadEarlySamplePointStandardConversionsMode_spread  = 1   /**< \brief Spread sample timing, end of sample phase is varied */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   833  } IfxEvadc_SpreadEarlySamplePointStandardConversionsMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   834  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   835  /** \brief The 0-1 transition of bit SUCAL initiates the start-up calibrationphase of
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   836   * all analog converters (except for the fast compare channels).
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   837   * Note: The start-up calibration will abort any running conversion
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   838   * and cannot be stopped before it is complete.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   839   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   840  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   841  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   842      IfxEvadc_StartupCalibration_noAction = 0,  /**< \brief No action */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   843      IfxEvadc_StartupCalibration_initiate = 1   /**< \brief Initiate the start-up calibration phase
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   844                                                  * (indication in bit GxARBCFG.CAL) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   845  } IfxEvadc_StartupCalibration;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   846  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   847  /** \brief Adjusts the analog circuitry to the supply voltage used in the application
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   848   * system. Make sure to keep SUPLEV = 0b00 or 0b01 in the case of a 5 V supply.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   849   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   850  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   851  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   852      IfxEvadc_SupplyVoltageLevelControl_automaticControl = 0,  /**< \brief Automatic control: voltage range is controlled by the power supply */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   853      IfxEvadc_SupplyVoltageLevelControl_upperVoltage     = 1,  /**< \brief Upper voltage range: assume a 5 V power supply is connected */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   854      IfxEvadc_SupplyVoltageLevelControl_lowerVoltage     = 2   /**< \brief Lower voltage range: assume a 3.3 V power supply is connected */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   855  } IfxEvadc_SupplyVoltageLevelControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   856  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   857  /** \brief Wait-for-Read Mode Enable
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   858   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   859  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   860  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   861      IfxEvadc_WaitForRead_overwriteMode = 0,  /**< \brief Overwrite Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   862      IfxEvadc_WaitForRead_enabled       = 1   /**< \brief Wait-for-read mode enabled for this register */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   863  } IfxEvadc_WaitForRead;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   864  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   865  /** \addtogroup IfxLld_Evadc_Std_Global
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   866   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   867  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   868  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   869  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   870  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   871  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   872  /** \brief access function to enable/disable  wait for read mode for result registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   873   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   874   * \param resultIdx result register index
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   875   * \param enabled wait for read mode enabled/disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   876   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   877   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   878  IFX_INLINE void IfxEvadc_configureWaitForReadMode(Ifx_EVADC_G *group, uint32 resultIdx, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   879  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   880  /** \brief access function to enable/disable  wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   881   * \param evadc pointer to the EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   882   * \param enabled wait for read mode enabled/disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   883   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   884   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   885  IFX_INLINE void IfxEvadc_configureWaitForReadModeForGlobalResultRegister(Ifx_EVADC *evadc, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   886  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   887  /** \brief get the ADC Module  noise reduction level
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   888   * \param evadc pointer to EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   889   * \param inputClassNum Adc Module input Class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   890   * \return Adc input class noise reduction level
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   891   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   892  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getGlobalConversionMode(Ifx_EVADC *evadc, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   893  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   894  /** \brief return conversion result stored in the Global result Register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   895   * \param evadc pointer to the EVADC module
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   896   * \return global result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   897   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   898   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   899   * Ifx_EVADC* evadc = &MODULE_EVADC; // module pointer
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   900   * IfxEvadc_GroupId groupId = IfxEvadc_GroupId0; // for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   901   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   902   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   903   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   904   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   905   * IfxEvadc_configureWaitForReadModeForGlobalResultRegister(evadc, TRUE);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   906   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   907   * // enable all arbiter request sources
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   908   * adcGroupConfig.arbiter.requestSlotQueue0Enabled           = TRUE; // enable Queue0 mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   909   * // enable all gates in "always" mode (no edge detection)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   910   * adcGroupConfig.queueRequest[0].triggerConfig.gatingMode = IfxEvadc_GatingMode_always;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   911   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   912   * // Add channel to queue with refill enabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   913   *  IfxEvadc_Adc_addToQueue(&adcChannel, IFXEVADC_QUEUE_REFILL, IfxEvadc_RequestSource_queue0);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   914   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   915   *  // start the Queue
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   916   *  IfxEvadc_Adc_startQueue(&adcGroup, IfxEvadc_RequestSource_queue0);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   917   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   918   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   919   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   920   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   921   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   922   * Ifx_EVADC_GLOB.RES result;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   923   * result = IfxVadc_getGlobalResult (evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   924   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   925   * \endcode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   926   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   927   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   928  IFX_INLINE Ifx_EVADC_GLOB_RES IfxEvadc_getGlobalResult(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   929  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   930  /** \brief Get Sample Time in sec
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   931   * \param evadc Pointer to EVADC Module
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   932   * \param inputClassNum ADC Input Class Number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   933   * \param analogFrequency ADC module analog frequency in Hz
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   934   * \return ADC input class channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   935   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   936  IFX_INLINE float32 IfxEvadc_getGlobalSampleTime(Ifx_EVADC *evadc, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   937  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   938  /** \brief Get conversion result (Function does not care about the alignment)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   939   * value = raw * gain + offset.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   940   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   941   * \param resultIdx result register index
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   942   * \return scaled Conversion result
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   943   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   944   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   945   * Ifx_EVADC_G* group = &MODULE_EVADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   946   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   947   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   948   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   949   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   950   * IfxEvadc_configureWaitForReadMode(group,IfxEvadc_ChannelResult0, TRUE);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   951   * IfxEvadc_configureWaitForReadMode(group,IfxEvadc_ChannelResult1, TRUE);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   952   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   953   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   954   * // Add channel to queue with refill enabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   955   *  IfxEvadc_Adc_addToQueue(&adcChannel, IfxEvadc_RequestSource_queue0, IFXEVADC_QUEUE_REFILL);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   956   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   957   * // start the Queue
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   958   *  IfxEvadc_Adc_startQueue(&adcGroup, IfxEvadc_RequestSource_queue0);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   959   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   960   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   961   * // wait for conversion to finish
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   962   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   963   * // fetch the result of conversion from result register 0 for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   964   * Ifx_EVADC_G_RES result;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   965   * result = IfxEvadc_getResult(group, IfxEvadc_ChannelResult0);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   966   * \endcode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   967   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   968   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   969  IFX_INLINE Ifx_EVADC_G_RES IfxEvadc_getResult(Ifx_EVADC_G *group, uint32 resultIdx);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   970  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   971  /** \brief Sets the sample time in sec of ADC global class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   972   * \param evadc pointer to EVADC module registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   973   * \param groupInputClassNum group input class  number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   974   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   975   * \param sampleTime the requested sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   976   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   977   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   978  IFX_INLINE void IfxEvadc_setGlobalSampleTime(Ifx_EVADC *evadc, uint8 groupInputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   979  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   980  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   981  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   982  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   983  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   984  /** \brief Get conversion result (Function does not care about the alignment)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   985   * value = raw * gain + offset.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   986   * \param evadc EVADC module pointer
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   987   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   988   * \param channel channel Id
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   989   * \param sourceType type of request source
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   990   * \return scaled Conversion result
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   991   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   992   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   993   * Ifx_EVADC evadc;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   994   * evadc.evadc = &MODULE_EVADC;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   995   * Ifx_EVADC_G* group = &MODULE_EVADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   996   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   997   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   998   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   999   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1000   * IfxEvadc_configureWaitForReadMode(group,IfxEvadc_ChannelResult0, TRUE);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1001   * IfxEvadc_configureWaitForReadMode(group,IfxEvadc_ChannelResult1, TRUE);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1002   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1003   * // Add channel to queue with refill enabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1004   *  IfxEvadc_Adc_addToQueue(&adcChannel, IfxEvadc_RequestSource_queue0, IFXEVADC_QUEUE_REFILL);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1005   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1006   * // start the Queue
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1007   *  IfxEvadc_Adc_startQueue(&adcGroup, IfxEvadc_RequestSource_queue0);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1008   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1009   * // fetch the result of conversion for channel 2 of group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1010   * Ifx_EVADC_G_RESresult2;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1011   * result = IfxEvadc_getResultBasedOnRequestSource(&evadc, group, IfxVadc_ChannelId2,IfxEvadc_RequestSource_queue0 );
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1012   * Ifx_EVADC_G_RESresult5;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1013   * result = IfxEvadc_getResultBasedOnRequestSource(&evadc, group, IfxEvadc_ChannelId5,IfxEvadc_RequestSource_queue0 );
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1014   * \endcode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1015   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1016   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1017  IFX_EXTERN Ifx_EVADC_G_RES IfxEvadc_getResultBasedOnRequestSource(Ifx_EVADC *evadc, Ifx_EVADC_G *group, IfxEvadc_ChannelId channel, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1018  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1019  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1020  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1021  /** \addtogroup IfxLld_Evadc_Std_QueueRequest
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1022   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1023  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1024  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1025  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1026  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1027  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1028  /** \brief Clears all the queue entries including backup stage.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1029   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1030   * \param flushQueue Whether queue is cleared or not.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1031   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1032   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1033   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1034  IFX_INLINE void IfxEvadc_clearQueue(Ifx_EVADC_G *evadcG, boolean flushQueue, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1035  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1036  /** \brief Starts a queue of a group by generating a trigger event through software
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1037   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1038   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1039   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1040   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1041  IFX_INLINE void IfxEvadc_startQueue(Ifx_EVADC_G *group, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1042  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1043  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1044  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1045  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1046  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1047  /** \brief Add an entry to the queue of a group for the specified channel with the following options set:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1048   * refill incase of aborted conversion
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1049   * source interrupt enable/disable
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1050   * external trigger control of the aborted conversion
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1051   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1052   * \param channel specifies channel Id
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1053   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1054   * \param options specifies the refill, source interrupt enable/disable and external trigger control selection
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1055   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1056   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1057   * For coding example see: \ref IfxEvadc_Adc_getResult
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1058   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1059   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1060  IFX_EXTERN void IfxEvadc_addToQueue(Ifx_EVADC_G *group, IfxEvadc_ChannelId channel, IfxEvadc_RequestSource sourceType, uint32 options);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1061  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1062  /** \brief Disables the external trigger.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1063   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1064   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1065   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1066   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1067  IFX_EXTERN void IfxEvadc_disableQueueSlotExternalTrigger(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1068  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1069  /** \brief Enables the external trigger.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1070   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1071   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1072   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1073   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1074  IFX_EXTERN void IfxEvadc_enableQueueSlotExternalTrigger(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1075  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1076  /** \brief Gets the requested queue slot gating mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1077   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1078   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1079   * \return requested queue0 slot gating mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1080   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1081  IFX_EXTERN IfxEvadc_GatingMode IfxEvadc_getQueueSlotGatingMode(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1082  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1083  /** \brief Gets the requested queue slot gating input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1084   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1085   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1086   * \return requested queue0 slot gating input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1087   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1088  IFX_EXTERN IfxEvadc_GatingSource IfxEvadc_getQueueSlotGatingSource(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1089  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1090  /** \brief Gets the request queue slot priority.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1091   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1092   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1093   * \return requested queue0 slot priority.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1094   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1095  IFX_EXTERN IfxEvadc_RequestSlotPriority IfxEvadc_getQueueSlotPriority(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1096  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1097  /** \brief Gets the requested queue slot start mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1098   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1099   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1100   * \return requested queue slot start mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1101   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1102  IFX_EXTERN IfxEvadc_RequestSlotStartMode IfxEvadc_getQueueSlotStartMode(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1103  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1104  /** \brief Gets the requested queue slot trigger input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1105   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1106   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1107   * \return requested queue slot trigger input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1108   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1109  IFX_EXTERN IfxEvadc_TriggerSource IfxEvadc_getQueueSlotTriggerInput(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1110  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1111  /** \brief Gets the requested queue slot trigger mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1112   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1113   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1114   * \return requested queue slot trigger mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1115   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1116  IFX_EXTERN IfxEvadc_TriggerMode IfxEvadc_getQueueSlotTriggerMode(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1117  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1118  /** \brief Gives the status of the Queue of a group by returning non zero value if the Queue is full
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1119   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1120   * \param sourceType sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1121   * \return status of the Queue
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1122   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1123   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1124   * Ifx_EVADC_G* group = &MODULE_EVADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1125   * boolean queueFull = (IfxEvadc_getQueueStatus(group)==IfxEvadc_Status_queueFull)?TRUE:FALSE; // get Queue status for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1126   * \endcode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1127   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1128   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1129  IFX_EXTERN IfxEvadc_Status IfxEvadc_getQueueStatus(Ifx_EVADC_G *group, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1130  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1131  /** \brief Returns the queue slot requested status.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1132   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1133   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1134   * \return TRUE if queue slot request enabled otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1135   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1136  IFX_EXTERN boolean IfxEvadc_isRequestQueueSlotEnabled(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1137  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1138  /** \brief Sets the gating configurations.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1139   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1140   * \param gatingSource gate input for group.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1141   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1142   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1143   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1144   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1145  IFX_EXTERN void IfxEvadc_setQueueSlotGatingConfig(Ifx_EVADC_G *evadcG, IfxEvadc_GatingSource gatingSource, IfxEvadc_GatingMode gatingMode, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1146  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1147  /** \brief Sets the trigger operating configurations.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1148   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1149   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1150   * \param triggerSource trigger input for group.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1151   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1152   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1153   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1154  IFX_EXTERN void IfxEvadc_setQueueSlotTriggerOperatingConfig(Ifx_EVADC_G *evadcG, IfxEvadc_TriggerMode triggerMode, IfxEvadc_TriggerSource triggerSource, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1155  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1156  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1157  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1158  /** \addtogroup IfxLld_Evadc_Std_IO
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1159   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1160  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1161  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1162  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1163  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1164  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1165  /** \brief Initializes a EMUX output
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1166   * \param emux the Emux Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1167   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1168   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1169   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1170   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1171  IFX_INLINE void IfxEvadc_initEmuxPin(const IfxEvadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1172  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1173  /** \brief Initializes a GxBFL output
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1174   * \param gxBfl the GxBFL Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1175   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1176   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1177   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1178   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1179  IFX_INLINE void IfxEvadc_initGxBflPin(const IfxEvadc_GxBfl_Out *gxBfl, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1180  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1181  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1182  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1183  /** \addtogroup IfxLld_Evadc_Std_Frequency
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1184   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1185  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1186  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1187  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1188  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1189  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1190  /** \brief Calculate the time using analog frequency.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1191   * \param analogFrequency analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1192   * \param sampleTime sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1193   * \return sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1194   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1195  IFX_INLINE uint32 IfxEvadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1196  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1197  /** \brief Returns the configured Fadci EVADC analog clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1198   * \param group pointer to the EVADC registers group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1199   * \return the configured Fadci EVADC analog clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1200   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1201  IFX_INLINE float32 IfxEvadc_getAdcAnalogFrequency(Ifx_EVADC_G *group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1202  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1203  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1204  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1205  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1206  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1207  /** \brief configured Fadcd EVADC digital clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1208   * \param evadc pointer to the base of EVADC registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1209   * \return the configured Fadcd EVADC digital clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1210   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1211  IFX_EXTERN float32 IfxEvadc_getAdcDigitalFrequency(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1212  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1213  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1214  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1215  /** \addtogroup IfxLld_Evadc_Std_Group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1216   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1217  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1218  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1219  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1220  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1221  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1222  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1223   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1224   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1225   * \param delay Selects an additional clock cycle for the conversion step of the MSB
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1228  IFX_INLINE void IfxEvadc_setAnalogClockSynchronizationDelay(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_AnalogClockSynchronizationDelay delay);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1229  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1230  /** \brief Select calibration sample time in units of t_ADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1231   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1232   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1233   * \param mode Select calibration sample time in units of t_ADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1234   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1235   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1236  IFX_INLINE void IfxEvadc_setCalibrationSampleTime(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_CalibrationSampleTimeControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1237  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1238  /** \brief Clears the all group requests.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1239   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1242  IFX_INLINE void IfxEvadc_clearAllResultRequests(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1243  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1244  /** \brief Gets the EVADC input class channel conversion mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1245   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1246   * \param inputClassNum EVADC input class number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1247   * \return EVADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1248   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1249  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1250  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1251  /** \brief Get conversion result for the group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1252   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1253   * \param results pointer to scaled conversion results
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1254   * \param resultOffset offset for the first result
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1255   * \param numResults number of results
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1256   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1257   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1258   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1259   * Here,Three channels are used for queued transfers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1260   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1261   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1262   * unsigned savedGate = adcGroup.module.evadc->G[adcGroup.groupId].Queue0.QMR0.B.ENGT;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1263   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1264   * // IMPORTANT: for deterministic results we have to disable the queue gate
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1265   * // while filling the queue, otherwise results could be output in the wrong order
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1266   * adcGroup.module.evadc->G[adcGroup.groupId].Queue0.QMR0.B.ENGT = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1267   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1268   * // create channel config
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1269   * IfxEvadc_Adc_ChannelConfig adcChannelConfig[3];
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1270   * IfxEvadc_Adc_Channel adcChannel[3];
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1271   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1272   * for(int chnIx=0; chnIx<3; ++chnIx) {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1273   * IfxEvadc_Adc_initChannelConfig(&adcChannelConfig[chnIx], &adcGroup);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1274   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1275   * adcChannelConfig[chnIx].channelId = (IfxEvadc_ChannelId)(chnIx);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1276   * adcChannelConfig[chnIx].resultRegister = IfxEvadc_ChannelResult_1; // use result register #1 for all channels
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1277   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1278   * // initialize the channel
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1279   * IfxEvadc_Adc_initChannel(&adcChannel[chnIx], &adcChannelConfig[chnIx]);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1280   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1281   * // Add channel to queue with refill enabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1282   * IfxEvadc_Adc_addToQueue(&adcChannel[chnIx], IfxEvadc_RequestSource_queue0, IFXEVADC_QUEUE_REFILL);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1283   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1284   * // restore previous gate config
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1285   * adcGroup.module.evadc->G[adcGroup.groupId].Queue0.QMR0.B.ENGT = savedGate;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1286   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1287   * // start the Queue
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1288   * IfxEvadc_Adc_startQueue(&adcGroup,IfxEvadc_RequestSource_queue0); // just for the case that somebody copy&pastes the code - the queue has already been started in previous test
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1289   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1290   * Ifx_EVADC_G_RES results[10];
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1291   * result = IfxEvadc_getGroupResult(group, results, 0, 2);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1292   * \endcode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1293   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1294   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1295  IFX_INLINE void IfxEvadc_getGroupResult(Ifx_EVADC_G *group, Ifx_EVADC_G_RES *results, uint32 resultOffset, uint32 numResults);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1296  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1297  /** \brief Gets the EVADC input class channel sample time.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1298   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1299   * \param inputClassNum ADC input class number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1300   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1301   * \return ADC input class channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1302   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1303  IFX_INLINE float32 IfxEvadc_getGroupSampleTime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1304  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1305  /** \brief Gets the configured master index.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1306   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1307   * \return configured master kernel index.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1308   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1309  IFX_INLINE uint8 IfxEvadc_getMasterIndex(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1310  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1311  /** \brief Selects the chargingmode/voltage level in idle mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1312   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1313   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1314   * \param mode 0 - No precharge, the sampling capacitor keeps the current charge
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1315   * 1 - The sampling capacitor is precharged to approx. half the reference when idle
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1316   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1317   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1318  IFX_INLINE void IfxEvadc_selectIdlePrechargeLevel(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_IdlePrecharge mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1319  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1320  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1321   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1322   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1323   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1324   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1325  IFX_INLINE void IfxEvadc_enableInputBuffer(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1326  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1327  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1328   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1329   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1330   * \param duration Selects the amount of time for reference input precharging
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1331   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1332   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1333  IFX_INLINE void IfxEvadc_setReferencePrechargeDuration(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_ReferencePrechargeControl duration);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1334  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1335  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1336   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1337   * \param group EVADC Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1338   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1339   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1340  IFX_INLINE void IfxEvadc_enableReferencePrecharge(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1341  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1342  /** \brief Resets the ADC group.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1343   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1344   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1345   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1346  IFX_INLINE void IfxEvadc_resetGroup(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1347  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1348  /** \brief Selects whether sample synchronization must be performed or not.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1349   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1350   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1351   * \param mode Sample Synchronization Options
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1352   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1353   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1354  IFX_INLINE void IfxEvadc_setSampleSynchronizationMode(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_SampleSynchronization mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1355  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1356  /** \brief Selects an additional clock cycle for the conversion step of the MSB.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1357   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1358   * \param group EVADC Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1359   * \param mode Selects an single or double clock cycle(s) for the conversion step of the MSB
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1360   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1361   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1362  IFX_INLINE void IfxEvadc_selectDoubleClockForMSBConversion(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_MsbConversionTime mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1363  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1364  /** \brief Sets analog converter group number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1365   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1366   * \param analogConverterMode group analog converter mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1367   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1368   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1369  IFX_INLINE void IfxEvadc_setAnalogConvertControl(Ifx_EVADC_G *evadcG, IfxEvadc_AnalogConverterMode analogConverterMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1370  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1371  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1372   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1373   * \param inputClassNum Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1374   * \param mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1375   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1376   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1377  IFX_INLINE void IfxEvadc_setAnalogInputPrechargeControlEMUX(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_AnalogInputPrechargeControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1378  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1379  /** \brief Analog Input Precharge Control for Standard Conversions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1380   * Buffer must be enabled by GxANCFG.B.BE = 1
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1381   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1382   * \param inputClassNum Class No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1383   * \param mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1384   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1385   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1386  IFX_INLINE void IfxEvadc_setAnalogInputPrechargeControlStandard(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_AnalogInputPrechargeControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1387  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1388  /** \brief Sets the ADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1389   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1390   * \param inputClassNum input class number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1391   * \param conversionMode ADC input class channel Conversion Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1392   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1393   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1394  IFX_INLINE void IfxEvadc_setGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_ChannelNoiseReduction conversionMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1395  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1396  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1397   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1398   * \param inputClassNum Class No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1399   * \param conversionMode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1400   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1401   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1402  IFX_INLINE void IfxEvadc_setGroupConversionModeEMUX(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_ChannelNoiseReductionEMUX conversionMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1403  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1404  /** \brief Sets the ADC input class sample time ticks.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1405   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1406   * \param inputClassNum input class number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1407   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1408   * \param sampleTime request sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1409   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1410   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1411  IFX_INLINE void IfxEvadc_setGroupSampleTime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1412  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1413  /** \brief Set the additional number of cycles(in addition to 2) in sample time.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1414   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1415   * \param inputClassNum Class No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1416   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1417   * \param sampleTime request sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1418   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1419   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1420  IFX_INLINE void IfxEvadc_setGroupSampleTimeEMUX(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1421  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1422  /** \brief Sets the master index.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1423   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1424   * \param masterIndex master index.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1425   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1426   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1427  IFX_INLINE void IfxEvadc_setMasterIndex(Ifx_EVADC_G *evadcG, uint8 masterIndex);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1428  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1429  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1430   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1431   * \param inputClassNum Class No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1432   * \param mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1433   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1434   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1435  IFX_INLINE void IfxEvadc_spreadEarlySamplePointEMUXConversions(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_SpreadEarlySamplePointEMUXConversionsMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1436  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1437  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1438   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1439   * \param inputClassNum Class No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1440   * \param mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1441   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1442   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1443  IFX_INLINE void IfxEvadc_spreadEarlySamplePointStandardConversions(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_SpreadEarlySamplePointStandardConversionsMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1444  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1445  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1446  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1447  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1448  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1449  /** \brief Sets the Arbiter slot configurations.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1450   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1451   * \param slotEnable enable/disable of slot.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1452   * \param prio channel request priority.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1453   * \param mode Channel Slot start mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1454   * \param slot channel slot Request source.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1455   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1456   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1457  IFX_EXTERN void IfxEvadc_setArbiterPriority(Ifx_EVADC_G *evadcG, boolean slotEnable, IfxEvadc_RequestSlotPriority prio, IfxEvadc_RequestSlotStartMode mode, IfxEvadc_RequestSource slot);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1458  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1459  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1460  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1461  /** \addtogroup IfxLld_Evadc_Std_Module
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1462   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1463  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1464  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1465  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1466  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1467  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1468  /** \brief Disable EVADC kernel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1469   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1470   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1471   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1472  IFX_INLINE void IfxEvadc_disableModule(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1473  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1474  /** \brief Disables the post calibration.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1475   * \param evadcG pointer to the base of EVADC Grroup registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1476   * \param group Index of the group.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1477   * \param enabled disable or not.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1478   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1479   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1480  IFX_INLINE void IfxEvadc_disablePostCalibration(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1481  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1482  /** \brief Enable EVADC kernel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1483   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1484   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1485   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1486  IFX_INLINE void IfxEvadc_enableModule(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1487  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1488  /** \brief gets ADC Calibration Flag CAL status.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1489   * \param evadc pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1490   * \param adcCalGroupNum ADC CAL group number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1491   * \return CAL group status.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1492   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1493  IFX_INLINE uint8 IfxEvadc_getAdcCalibrationActiveState(Ifx_EVADC *evadc, uint8 adcCalGroupNum);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1494  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1495  /** \brief Gets the global control configuration value.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1496   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1497   * \return global control configuration value.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1498   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1499  IFX_INLINE Ifx_EVADC_GLOBCFG IfxEvadc_getGlobalConfigValue(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1500  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1501  /** \brief Gives the SRC source address.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1502   * \param group Index of the group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1503   * \param index SRC number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1504   * \return SRC source address
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1505   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1506  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEvadc_getSrcAddress(IfxEvadc_GroupId group, IfxEvadc_SrcNr index);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1507  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1508  /** \brief get status of GLOBCFG.SUCAL Bit field
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1509   * \param evadc Pointer to EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1510   * \return status of GLOBCFG.SUCAL Bit field
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1511   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1512  IFX_INLINE boolean IfxEvadc_getStartupCalibrationStatus(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1513  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1514  /** \brief Initialises ADC converter clock.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1515   * \param evadc Pointer to EVADC  SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1516   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1517   * \param converterClockDivider ADC converter clock divider.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1518   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1519   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1520  IFX_INLINE void IfxEvadc_initialiseAdcConverterClock(Ifx_EVADC *evadc, Ifx_EVADC_G *evadcG, IfxEvadc_ClockDividerFactor converterClockDivider);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1521  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1522  /** \brief initiates the calibration pulse phase.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1523   * \param evadc pointer to the base of EVADC registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1524   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1525   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1526  IFX_INLINE void IfxEvadc_initiateStartupCalibration(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1527  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1528  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1529   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1530   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1531   * \param evadc Pointer to EVADC module registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1532   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1533   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1534  IFX_INLINE boolean IfxEvadc_isModuleSuspended(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1535  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1536  /** \brief Sets the channel conversion mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1537   * \param evadc pointer to EVADC module registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1538   * \param InputClassNum input class  number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1539   * \param conversionMode ADC conversion Mode. Improves the precision of conversion
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1540   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1541   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1542  IFX_INLINE void IfxEvadc_setGlobalConversionMode(Ifx_EVADC *evadc, uint8 InputClassNum, IfxEvadc_ChannelNoiseReduction conversionMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1543  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1544  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1545   * \param evadc pointer to EVADC registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1546   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1547   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1548   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1549  IFX_INLINE void IfxEvadc_setSleepMode(Ifx_EVADC *evadc, IfxEvadc_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1550  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1551  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1552   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1553   * \param evadc Pointer to EVADC module registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1554   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1555   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1556   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1557  IFX_INLINE void IfxEvadc_setSuspendMode(Ifx_EVADC *evadc, IfxEvadc_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1558  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1559  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1560  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1561  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1562  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1563  /** \brief Disable write access to the EVADC config/control registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1564   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1565   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be disabled.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1566   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1567   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1568  IFX_EXTERN void IfxEvadc_disableAccess(Ifx_EVADC *evadc, IfxEvadc_Protection protectionSet);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1569  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1570  /** \brief Enable write access to the EVADC config/control registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1571   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1572   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be enabled.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1573   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1574   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1575  IFX_EXTERN void IfxEvadc_enableAccess(Ifx_EVADC *evadc, IfxEvadc_Protection protectionSet);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1576  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1577  /** \brief ADC Module Frequency in Hz
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1578   * \param evadc Pointer to EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1579   * \return module frequency
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1580   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1581  IFX_EXTERN float32 IfxEvadc_getAdcModuleFrequency(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1582  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1583  /** \brief Configure the ADC analog clock.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1584   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1585   * \param fAdcI ADC analog clock clock frequency in Hz. Range = [5000000, 10000000].
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1586   * \param group Pointer to EVADC Group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1587   * \return ADC analog clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1588   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1589  IFX_EXTERN uint32 IfxEvadc_initializeFAdcI(Ifx_EVADC *evadc, uint32 fAdcI, Ifx_EVADC_G *group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1590  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1591  /** \brief Resets the kernel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1592   * \param evadc pointer to the  EVADC Module
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1593   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1594   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1595  IFX_EXTERN void IfxEvadc_resetModule(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1596  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1597  /** \brief Starts ADC calibration and wait for the end of the calibration process.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1598   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1599   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1600   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1601  IFX_EXTERN void IfxEvadc_startupCalibration(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1602  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1603  /** \brief SW workaround of EVADC Master/Slave conversion jitter issue(MCMETILLD-910)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1604   * \param evadc Pointer to EVADC module registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1605   * \return Used for detecting failure in either OCDS Debug Active State Activation or Trigger Line TL1 Activation or both.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1606   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1607  IFX_EXTERN boolean IfxEvadc_syncConvWorkAround(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1608  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1609  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1610  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1611  /** \addtogroup IfxLld_Evadc_Std_Channel
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1612   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1613  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1614  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1615  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1616  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1617  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1618  /** \brief Clears the channel request.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1619   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1620   * \param channelId channel id whose request to be cleared.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1621   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1622   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1623  IFX_INLINE void IfxEvadc_clearChannelRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelId);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1624  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1625  /** \brief Enables the FIFO mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1626   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1627   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1628   * \param fifoMode FIFO mode .
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1629   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1630   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1631  IFX_INLINE void IfxEvadc_enableFifoMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, IfxEvadc_FifoMode fifoMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1632  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1633  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1634   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1635   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1636   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1637   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1638  IFX_INLINE void IfxEvadc_enableServiceRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1639  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1640  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1641   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1642   * \param resultRegister
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1643   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1644   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1645  IFX_INLINE void IfxEvadc_disableServiceRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1646  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1647  /** \brief Gets the current ADC channel control configurations.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1648   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1649   * \param channelIndex EVADC channel number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1650   * \return current ADC channel control configuration.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1651   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1652  IFX_INLINE Ifx_EVADC_G_CHCTR IfxEvadc_getChannelControlConfig(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1653  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1654  /** \brief get channel Input class
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1655   * \param evadcG Pointer to EVADC Group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1656   * \param channelIndex Specifies channel Id
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1657   * \return Input class
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1658   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1659  IFX_INLINE IfxEvadc_InputClasses IfxEvadc_getChannelInputclass(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1660  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1661  /** \brief Gets the channel result service request node pointer 0.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1662   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1663   * \return channel result service request node pointer 0.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1664   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1665  IFX_INLINE Ifx_EVADC_G_REVNP0 IfxEvadc_getChannelResultServiceRequestNodePointer0(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1666  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1667  /** \brief Gets the channel result service request node pointer 1.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1668   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1669   * \return channel result service request node pointer 1.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1670   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1671  IFX_INLINE Ifx_EVADC_G_REVNP1 IfxEvadc_getChannelResultServiceRequestNodePointer1(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1672  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1673  /** \brief Gets the channel service request node pointer.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1674   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1675   * \return channel service request node pointer.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1676   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1677  IFX_INLINE Ifx_EVADC_G_CEVNP0 IfxEvadc_getChannelServiceRequestNodePointer0(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1678  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1679  /** \brief get the channel service request node pointer (CH8--CH15)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1680   * \param evadcG pointer to EVADC Group register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1681   * \return Channel service request node pointer for CH8 to CH15
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1682   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1683  IFX_INLINE Ifx_EVADC_G_CEVNP1 IfxEvadc_getChannelServiceRequestNodePointer1(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1684  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1685  /** \brief Selects boundary extension.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1686   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1687   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1688   * \param boundaryMode boundary extension mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1689   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1690   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1691  IFX_INLINE void IfxEvadc_setBoundaryMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_BoundaryExtension boundaryMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1692  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1693  /** \brief Sets the channel event service request line.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1694   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1695   * \param channelSrcNr channel event Service Node.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1696   * \param channel channel number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1697   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1698   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1699  IFX_INLINE void IfxEvadc_setChannelEventNodePointer0(Ifx_EVADC_G *evadcG, IfxEvadc_SrcNr channelSrcNr, IfxEvadc_ChannelId channel);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1700  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1701  /** \brief set channel event node pointer(channel 8- channel 15)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1702   * \param evadcG pointer to the EVADC Group register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1703   * \param channelSrcNr service Request
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1704   * \param channel specifies channel ID
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1705   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1706   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1707  IFX_INLINE void IfxEvadc_setChannelEventNodePointer1(Ifx_EVADC_G *evadcG, IfxEvadc_SrcNr channelSrcNr, IfxEvadc_ChannelId channel);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1708  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1709  /** \brief Sets the channel input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1710   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1711   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1712   * \param inputClass channel input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1713   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1714   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1715  IFX_INLINE void IfxEvadc_setChannelInputClass(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_InputClasses inputClass);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1716  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1717  /** \brief Sets the channel event mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1718   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1719   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1720   * \param limitCheck channel event mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1721   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1722   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1723  IFX_INLINE void IfxEvadc_setChannelLimitCheckMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_LimitCheck limitCheck);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1724  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1725  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1726   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1727   * \param resultRegister
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1728   * \param mode 0b00 Standard data reduction (accumulation)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1729   * 0b01 Result filtering mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1730   * 0b10 Difference mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1731   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1732   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1733  IFX_INLINE void IfxEvadc_setDataModificationMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, IfxEvadc_DataModificationMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1734  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1735  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1736   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1737   * \param resultRegister Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1738   * \param mode Defines result values stored/accumulated for the final result.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1739   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1740   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1741  IFX_INLINE void IfxEvadc_setDataReductionControlMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, uint32 mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1742  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1743  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1744   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1745   * \param resultRegister
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1746   * \param mode 0b00 - Separate result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1747   * 0b01 - Part of a FIFO structure: copy each new valid result
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1748   * 0b10 - Maximum mode: copy new result if bigger
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1749   * 0b11 - Minimum mode: copy new result if smaller
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1750   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1751   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1752  IFX_INLINE void IfxEvadc_setFifoMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, IfxEvadc_FifoMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1753  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1754  /** \brief Sets group's lower boundary.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1755   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1756   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1757   * \param lowerBoundary group lower boundary.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1758   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1759   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1760  IFX_INLINE void IfxEvadc_setLowerBoundary(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_BoundarySelection lowerBoundary);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1761  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1762  /** \brief Selects the refernce input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1763   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1764   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1765   * \param reference reference input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1766   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1767   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1768  IFX_INLINE void IfxEvadc_setReferenceInput(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_ChannelReference reference);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1769  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1770  /** \brief Sets result event node pointer 0.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1771   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1772   * \param resultSrcNr channel result event service node.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1773   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1774   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1775   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1776  IFX_INLINE void IfxEvadc_setResultNodeEventPointer0(Ifx_EVADC_G *evadcG, IfxEvadc_SrcNr resultSrcNr, IfxEvadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1777  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1778  /** \brief Sets result event node pointer 1.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1779   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1780   * \param resultSrcNr channel result event service node.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1781   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1782   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1783   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1784  IFX_INLINE void IfxEvadc_setResultNodeEventPointer1(Ifx_EVADC_G *evadcG, IfxEvadc_SrcNr resultSrcNr, IfxEvadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1785  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1786  /** \brief Sets result store position.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1787   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1788   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1789   * \param rightAlignedStorage result store position.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1790   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1791   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1792  IFX_INLINE void IfxEvadc_setResultPosition(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, boolean rightAlignedStorage);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1793  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1794  /** \brief Sets channel synchronization request.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1795   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1796   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1797   * \param synchonize whether channel synchronize or stand alone operation.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1798   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1799   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1800  IFX_INLINE void IfxEvadc_setSyncRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, boolean synchonize);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1801  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1802  /** \brief Sets group's upper boundary.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1803   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1804   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1805   * \param upperBoundary group upper boundary.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1806   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1807   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1808  IFX_INLINE void IfxEvadc_setUpperBoundary(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_BoundarySelection upperBoundary);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1809  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1810  /** \brief Sets the group result register.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1811   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1812   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1813   * \param resultRegister result register for group result storage.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1814   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1815   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1816  IFX_INLINE void IfxEvadc_storeGroupResult(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1817  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1818  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1819  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1820  /** \addtogroup IfxLld_Evadc_Std_Emux
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1821   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1822  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1823  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1824  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1825  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1826  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1827  /** \brief get global input class conversion mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1828   * \param evadc Pointer to EVADC Module space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1829   * \param inputClassNum global input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1830   * \return External channel resolution for global input class
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1831   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1832  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getEmuxGlobalConversionMode(Ifx_EVADC *evadc, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1833  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1834  /** \brief get the external conversion mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1835   * \param evadcG Pointer to EVADC group register space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1836   * \param inputClassNum Adc input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1837   * \return Adc input class External channel conversion mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1838   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1839  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getEmuxGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1840  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1841  /** \brief Gets the ADC input class sample time of external channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1842   * \param evadcG Pointer to Register Group space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1843   * \param inputClassNum ADC input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1844   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1845   * \return ADC input class external channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1846   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1847  IFX_INLINE float32 IfxEvadc_getEmuxGroupSampleTime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1848  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1849  /** \brief set the external conversion mode of Global class
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1850   * \param evadc pointer to EVADC Module space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1851   * \param inputClassNum Global Input Class Number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1852   * \param conversionMode External Channel resolution
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1853   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1854   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1855  IFX_INLINE void IfxEvadc_setEmuxGlobalConversionMode(Ifx_EVADC *evadc, uint8 inputClassNum, IfxEvadc_ChannelNoiseReduction conversionMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1856  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1857  /** \brief Sets the sample time of ADC global class for external channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1858   * \param evadc Pointer to EVADC Module space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1859   * \param inputClassNum Adc input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1860   * \param analogFrequency ADC analog Frequency in HZ
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1861   * \param sampleTime the requested sample time for input class in sec
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1862   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1863   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1864  IFX_INLINE void IfxEvadc_setEmuxGlobalSampleTime(Ifx_EVADC *evadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1865  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1866  /** \brief set the external channel conversion mode of ADC input class
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1867   * \param evadcG pointer to EVADC Group Register space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1868   * \param inputClassNum input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1869   * \param conversionMode input class external channel resolution
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1870   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1871   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1872  IFX_INLINE void IfxEvadc_setEmuxGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_ChannelNoiseReduction conversionMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1873  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1874  /** \brief Sets the ADC input class sample time for external channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1875   * \param evadcG Pointer to EVADC Group Register Space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1876   * \param inputClassNum input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1877   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1878   * \param sampleTime request sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1879   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1880   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1881  IFX_INLINE void IfxEvadc_setEmuxGroupSampletime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1882  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1883  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1884  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1885  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1886  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1887  /** \brief Configure external multiplexer mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1888   * \param evadc pointer to Module space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1889   * \param evadcG Pointer to EVADC group register space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1890   * \param mode External Multiplexer mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1891   * \param channels Specifies channel Id
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1892   * \param startChannel specifies the external channel value from which conversion to be carried out
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1893   * \param code Output the channel number in binary code/gray code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1894   * \param sampleTimeControl specifies when to use a sample time for external channel
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1895   * \param channelSelectionStyle External Multiplexer Channel Selection Style
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1896   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1897   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1898  IFX_EXTERN void IfxEvadc_configExternalMultiplexerMode(Ifx_EVADC *evadc, Ifx_EVADC_G *evadcG, IfxEvadc_ExternalMultiplexerMode mode, uint8 channels, IfxEvadc_EmuxSelectValue startChannel, IfxEvadc_EmuxCodingScheme code, IfxEvadc_EmuxSampleTimeControl sampleTimeControl, IfxEvadc_ChannelSelectionStyle channelSelectionStyle);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1899  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1900  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1901  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1902  /** \addtogroup IfxLld_Evadc_Std_FastCompare
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1903   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1904  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1905  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1906  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1907  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1908  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1909  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1910   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1911   * \param control Action to be taken on the BoundaryFlag(FCM.B.BFL)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1912   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1913   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1914  IFX_INLINE void IfxEvadc_setFastCompareBoundaryFlagSwControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagSwControl control);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1915  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1916  /** \brief Sets in FCM.B.BFI whether to use Boundary Flag(FCM.B.BFL) directly or in a inverted format
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1917   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1918   * \param mode Invert or not to invert the Boundary Flag(BFL)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1919   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1920   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1921  IFX_INLINE void IfxEvadc_setFastCompareBoundaryFlagInversion(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagInversionControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1922  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1923  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1924   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1925   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1926   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1927  IFX_INLINE void IfxEvadc_disableFastCompareBoundaryFlag(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1928  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1929  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1930   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1931   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1932   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1933  IFX_INLINE void IfxEvadc_enableFastCompareBoundaryFlag(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1934  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1935  /** \brief Enable/Disable sample timing synchronization
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1936   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1937   * \param mode Sample synchronization mode select
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1938   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1939   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1940  IFX_INLINE void IfxEvadc_enableFastCompareSampleSynchronization(Ifx_EVADC_FC *evadcFC, IfxEvadc_SampleSynchronization mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1941  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1942  /** \brief Setting the Reference Precharge Control for Fast Compare Channels in FCCTRL.B.RPC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1943   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1944   * \param duration Reference Precharge Control Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1945   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1946   * 0 - Precharge the reference input for 1 clock phase
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1947   * 1 - Precharge the reference input for 1 clock period (2 phases)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1948   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1949   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1950  IFX_INLINE void IfxEvadc_setFastCompareReferencePrechargeDuration(Ifx_EVADC_FC *evadcFC, IfxEvadc_ReferencePrechargeControl duration);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1951  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1952  /** \brief Get boundary flag status.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1953   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1954   * \return 0(FALSE) - Passive state : Result has not yet crossed the activation boundary, or selected gate signal is inactive, or this boundary flag is disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1955   * 1(TRUE) - Active state:result has crossed the activation boundary
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1956   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1957  IFX_INLINE boolean IfxEvadc_getFastCompareBoundaryFlagStatus(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1958  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1959  /** \brief Returns current level of the selected trigger input
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1960   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1961   * \return Current level of the selected trigger input
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1962   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1963  IFX_INLINE boolean IfxEvadc_getFastCompareExternalTriggerLevelStatus(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1964  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1965  /** \brief Returns result for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1966   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1967   * \return Result for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1968   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1969  IFX_INLINE boolean IfxEvadc_getFastCompareResultStatus(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1970  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1971  /** \brief Indicates availability of a new result in bit FCM.B.FCR
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1972   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1973   * \return Returns value Indicating availability of a new result in bit FCM.B.FCR
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1974   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1975  IFX_INLINE boolean IfxEvadc_isFastCompareNewResultAvailable(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1976  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1977  /** \brief Selects behaviour of Boundary Flag(BFL) wih respect to the value of FCR.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1978   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1979   * \param mode 0 - Set boundary flag BFL if result FCR = 1 (input above the defined band or compare value), clear if FCR = 0 (input below)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1980   * 1 - Set boundary flag BFL if result FCR = 0 (input below the defined band or compare value), clear if FCR = 1 (input above)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1981   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1982   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1983  IFX_INLINE void IfxEvadc_selectFastCompareBoundaryFlagActivationMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagActivationMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1984  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1985  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1986   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1987   * \param nodePointer Bounday Flag Node Pointers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1988   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1989   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1990  IFX_INLINE void IfxEvadc_selectFastCompareBoundaryFlagNodePointer(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagNodePointer nodePointer);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1991  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1992  /** \brief Sets the delay of the analog clock(in clock cycles) after the sync signal.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1993   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1994   * \param delay Defines the delay of the analog clock in clocks after the sync signal.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1995   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1996   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1997  IFX_INLINE void IfxEvadc_setFastCompareAnalogClockSynchronizationDelay(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareAnalogClockSynchronizationDelay delay);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1998  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1999  /** \brief Set Analog Converter Control modes
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2000   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2001   * \param mode Analog Converter Control modes
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2002   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2003   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2004  IFX_INLINE void IfxEvadc_setFastCompareAnalogConverter(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareAnalogConverterControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2005  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2006  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2007   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2008   * \param mode Analog Input Precharge Enable for Fast Comparisons
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2009   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2010   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2011  IFX_INLINE void IfxEvadc_setFastCompareAnalogInputPrechargeControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_AnalogInputPrechargeControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2012  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2013  /** \brief Defines the frequency of the analog converter clock fADCI (base clock for
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2014   * conversion steps), derived from the peripheral clock: fADCI = fADC / divider
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2015   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2016   * \param divider Fast Compare Analog Internal Clock Divider factor
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2017   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2018   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2019  IFX_INLINE void IfxEvadc_setFastCompareAnalogInternalClockDivider(Ifx_EVADC_FC *evadcFC, IfxEvadc_ClockDividerFactor divider);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2020  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2021  /** \brief Sets the source of the value(s) in bitfield FCREF.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2022   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2023   * \param mode Defines the source of the value(s) in bitfield FCREF.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2024   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2025   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2026  IFX_INLINE void IfxEvadc_setFastCompareAutomaticUpdateMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareAutomaticUpdate mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2027  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2028  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2029   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2030   * \param mode Mode/criteria for generation of service requests
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2031   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2032   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2033  IFX_INLINE void IfxEvadc_setFastCompareChannelEventMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_ChannelEventMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2034  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2035  /** \brief Set external trigger polarity in FCCTRL.B.XTPOL
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2036   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2037   * \param mode 0 - Use selected input signal directly
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2038   * 1 - Invert selected input signal
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2039   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2040   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2041  IFX_INLINE void IfxEvadc_setFastCompareExternalTriggerPolarity(Ifx_EVADC_FC *evadcFC, IfxEvadc_ExternalTriggerPolarity mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2042  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2043  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2044   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2045   * \param mode Fast Compare Gate Operating Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2046   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2047   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2048  IFX_INLINE void IfxEvadc_setFastCompareGateOperatingMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_GateOperatingMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2049  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2050  /** \brief Ramp direction(up or down) settings
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2051   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2052   * \param rampDirection Ramp direction(up or down) settings
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2053   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2054   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2055  IFX_INLINE void IfxEvadc_setFastCompareRampDirection(Ifx_EVADC_FC *evadcFC, IfxEvadc_RampDirection rampDirection);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2056  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2057  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2058   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2059   * \param referenceValue The input level is compared to this value.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2060   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2061   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2062  IFX_INLINE void IfxEvadc_setFastCompareReferenceValue(Ifx_EVADC_FC *evadcFC, uint16 referenceValue);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2063  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2064  /** \brief Defines the basic run conditions of the fast compare channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2065   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2066   * \param mode Run mode of the fast compare channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2067   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2068   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2069  IFX_INLINE void IfxEvadc_setFastCompareRunControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareRunControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2070  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2071  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2072   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2073   * \param rampStartMode Defines the run conditions for the ramp generation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2074   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2075   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2076  IFX_INLINE void IfxEvadc_setFastCompareRunRampControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_RampRunControl rampStartMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2077  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2078  /** \brief Setting additional sample time in FCCTRL.B.STCF
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2079   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2080   * \param additionalCycles Number of additional clock cycles to be added to the minimum sample phase of 2 analog clock cycles
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2081   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2082   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2083  IFX_INLINE void IfxEvadc_setFastCompareSampleTimeControl(Ifx_EVADC_FC *evadcFC, uint8 additionalCycles);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2084  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2085  /** \brief Sets when to generate service requests
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2086   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2087   * \param mode Defines when to generate service requests
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2088   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2089   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2090  IFX_INLINE void IfxEvadc_setFastCompareServiceRequestGeneration(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareServiceRequestGeneration mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2091  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2092  /** \brief Sets the interval at which fast compare operations are triggered in steps of 16 * 1/fADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2093   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2094   * \param interval Defines the interval at which fast compare operations are triggered in steps of 16 * 1/f_ADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2095   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2096   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2097  IFX_INLINE void IfxEvadc_setFastCompareTriggerInterval(Ifx_EVADC_FC *evadcFC, uint8 interval);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2098  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2099  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2100   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2101   * \param mode External Trigger Operating Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2102   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2103   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2104  IFX_INLINE void IfxEvadc_setFastCompareTriggerOperatingMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_TriggerOperatingMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2105  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2106  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2107  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2108  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2109  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2110  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2111  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2112  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2113   * \param evadcG Pointer to EVADC group register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2114   * \return analog function configuration value
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2115   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2116  IFX_INLINE Ifx_EVADC_G_ANCFG IfxEvadc_getAnalogFunctionConfiguration(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2117  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2118  /** \brief Get the sample time of ADC global class for external channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2119   * \param evadc pointer to EVADC Module space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2120   * \param inputClassNum Adc input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2121   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2122   * \return ADC input class external channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2123   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2124  IFX_INLINE float32 IfxEvadc_getEmuxGlobalSampleTime(Ifx_EVADC *evadc, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2125  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2126  /** \brief Sets the Emux Interface for a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2127   * \param evadc Pointer to EVADC Module Space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2128   * \param emuxInterface specifies the EmuxInterface
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2129   * \param group specifies the group ID
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2130   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2131   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2132  IFX_INLINE void IfxEvadc_setEmuxInterfaceForGroup(Ifx_EVADC *evadc, IfxEvadc_EmuxInterface emuxInterface, IfxEvadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2133  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2134  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2135   * \param evadcG Pointer to EVADC Group Registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2136   * \param group EVADC Group Number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2137   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2138   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2139  IFX_INLINE void IfxEvadc_disableReferencePrecharge(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2140  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2141  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2142   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2143   * \param group EVADC Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2144   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2145   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2146  IFX_INLINE void IfxEvadc_disableInputBuffer(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2147  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2148  /** \brief Return if the clock for EVADC modules is enabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2149   * \param evadc Pointer to EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2150   * \return Status (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2151   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2152  IFX_INLINE boolean IfxEvadc_isModuleEnabled(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2153  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2154  /** \brief Enable the startup calibaration phase
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2155   * \param evadc Pointer to EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2156   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2157   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2158  IFX_INLINE void IfxEvadc_enableStartupCalibration(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2159  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2160  /** \brief Enable the Queue Gating Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2161   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2162   * \param queue Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2163   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2164   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2165   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2166  IFX_INLINE void IfxEvadc_selectQueueGatingMode(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource queue, IfxEvadc_GatingMode gatingMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2167  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2168  /** \brief Defines the channel number to be converted
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2169   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2170   * \param queue Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2171   * \param channel Channel number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2172   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2173   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2174  IFX_INLINE void IfxEvadc_setChannelRequest(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource queue, IfxEvadc_ChannelId channel);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2175  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2176  /** \brief Sets the global input class registers, define the sample time and data conversion mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2177   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2178   * \param inputClassNum Input Class Number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2179   * \param value Value to be written
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2180   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2181   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2182  IFX_INLINE void IfxEvadc_configureIclass(Ifx_EVADC_G *evadcG, uint8 inputClassNum, uint32 value);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2183  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2184  /** \brief Returns the pointer to the result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2185   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2186   * \param channel Channel Number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2187   * \return The address to the result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2188   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2189  IFX_INLINE volatile uint32 *IfxEvadc_getResultRegisterAddress(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channel);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2190  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2191  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2192  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2193  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2194  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2195  IFX_INLINE void IfxEvadc_setAnalogClockSynchronizationDelay(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_AnalogClockSynchronizationDelay delay)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2196  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2197      IFX_UNUSED_PARAMETER(group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2198      evadcG->ANCFG.B.ACSD = delay;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2199  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2200  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2201  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2202  IFX_INLINE uint32 IfxEvadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2203  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2204      uint32 ticks = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2205  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2206      ticks = (uint32)(sampleTime * analogFrequency) - 2;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2207  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2208      if (ticks > 31)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2209      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2210          ticks = (ticks / 16) + 15;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2211      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2212  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2213      ticks = __minu(ticks, 0xFFu);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2214  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2215      return ticks;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2216  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2217  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2218  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2219  IFX_INLINE void IfxEvadc_setCalibrationSampleTime(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_CalibrationSampleTimeControl mode)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2220  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2221      IFX_UNUSED_PARAMETER(group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2222      evadcG->ANCFG.B.CALSTC = mode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2223  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2224  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2225  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2226  IFX_INLINE void IfxEvadc_clearAllResultRequests(Ifx_EVADC_G *evadcG)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2227  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2228      evadcG->REFCLR.U = 0x0000FFFFu;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2229  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2230  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2231  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2232  IFX_INLINE void IfxEvadc_clearChannelRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelId)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2233  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2234      evadcG->CEFCLR.U = 1 << channelId;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2235  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2236  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2237  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2238  IFX_INLINE void IfxEvadc_clearQueue(Ifx_EVADC_G *evadcG, boolean flushQueue, IfxEvadc_RequestSource sourceType)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2239  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2240      switch (sourceType)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2241      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2242      case IfxEvadc_RequestSource_queue0:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2243          evadcG->Q[0].QMR.B.FLUSH = flushQueue;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2244          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2245      case IfxEvadc_RequestSource_queue1:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2246          evadcG->Q[1].QMR.B.FLUSH = flushQueue;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2247          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2248      case IfxEvadc_RequestSource_queue2:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2249          evadcG->Q[2].QMR.B.FLUSH = flushQueue;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2250          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2251      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2252  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2253  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2254  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2255  IFX_INLINE void IfxEvadc_configureWaitForReadMode(Ifx_EVADC_G *group, uint32 resultIdx, boolean enabled)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2256  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2257      group->RCR[resultIdx].B.WFR = enabled;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2258  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2259  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2260  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2261  IFX_INLINE void IfxEvadc_configureWaitForReadModeForGlobalResultRegister(Ifx_EVADC *evadc, boolean enabled)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2262  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2263      evadc->GLOB.RCR.B.WFR = enabled;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2264  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2265  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2266  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2267  IFX_INLINE void IfxEvadc_setFastCompareBoundaryFlagSwControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagSwControl control)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2268  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2269      evadcFC->FCBFL.B.BFS = control;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2270  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2271  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2272  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2273  IFX_INLINE void IfxEvadc_setFastCompareBoundaryFlagInversion(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagInversionControl mode)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2274  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2275      evadcFC->FCBFL.B.BFI = mode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2276  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2277  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2278  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2279  IFX_INLINE void IfxEvadc_disableFastCompareBoundaryFlag(Ifx_EVADC_FC *evadcFC)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2280  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2281      evadcFC->FCBFL.B.BFM = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2282  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2283  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2284  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2285  IFX_INLINE void IfxEvadc_disableModule(Ifx_EVADC *evadc)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2286  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2287      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2288  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2289      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2290      evadc->CLC.B.DISR = 1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2291      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2292  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2293  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2294  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2295  IFX_INLINE void IfxEvadc_disablePostCalibration(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, boolean enabled)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2296  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2297      IFX_UNUSED_PARAMETER(group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2298      evadcG->ANCFG.B.DPCAL = enabled;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2299  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2300  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2301  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2302  IFX_INLINE void IfxEvadc_enableFastCompareBoundaryFlag(Ifx_EVADC_FC *evadcFC)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2303  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2304      evadcFC->FCBFL.B.BFM = 1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2305  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2306  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2307  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2308  IFX_INLINE void IfxEvadc_enableFastCompareSampleSynchronization(Ifx_EVADC_FC *evadcFC, IfxEvadc_SampleSynchronization mode)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2309  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2310      Ifx_EVADC_FC_FCM tempFCM;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2311      tempFCM.U       = evadcFC->FCM.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2312      tempFCM.B.FCMWC = 1;  /*Enabling write permission to FCM.B.SSE*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2313      tempFCM.B.SSE   = mode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2314      evadcFC->FCM.U  = tempFCM.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2315  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2316  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2317  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2318  IFX_INLINE void IfxEvadc_enableFifoMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, IfxEvadc_FifoMode fifoMode)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2319  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2320      evadcG->RCR[resultRegister].B.FEN = fifoMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2321  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2322  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2323  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2324  IFX_INLINE void IfxEvadc_enableModule(Ifx_EVADC *evadc)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2325  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2326      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2327  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2328      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2329      evadc->CLC.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2330      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2331  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2332  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2333  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2334  IFX_INLINE void IfxEvadc_enableServiceRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2335  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2336      evadcG->RCR[resultRegister].B.SRGEN = 1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2337  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2338  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2339  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2340  IFX_INLINE void IfxEvadc_disableServiceRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2341  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2342      evadcG->RCR[resultRegister].B.SRGEN = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2343  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2344  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2345  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2346  IFX_INLINE void IfxEvadc_setFastCompareReferencePrechargeDuration(Ifx_EVADC_FC *evadcFC, IfxEvadc_ReferencePrechargeControl duration)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2347  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2348      Ifx_EVADC_FC_FCCTRL tempFCCTRL;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2349      tempFCCTRL.U      = evadcFC->FCCTRL.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2350      tempFCCTRL.B.CPWC = 1; /*Enabling write permission to FCCTRL.B.RPC*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2351      tempFCCTRL.B.RPE  = duration;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2352      evadcFC->FCCTRL.U = tempFCCTRL.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2353  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2354  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2355  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2356  IFX_INLINE float32 IfxEvadc_getAdcAnalogFrequency(Ifx_EVADC_G *group)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2357  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2358  #ifdef IFX_CFG_AURIX_SCUCCU_USED
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2359      return IfxScuCcu_getSpbFrequency() / (1U + group->ANCFG.B.DIVA);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2360  #else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2361      return IfxScuCcu_getAdcFrequency() / (1U + group->ANCFG.B.DIVA);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2362  #endif
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2363  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2364  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2365  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2366  IFX_INLINE uint8 IfxEvadc_getAdcCalibrationActiveState(Ifx_EVADC *evadc, uint8 adcCalGroupNum)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2367  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2368      uint8 status = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2369      status = evadc->G[adcCalGroupNum].ARBCFG.B.CAL;
	ld.bu	d15,[a2]
.L830:
	lea	a2,[a2]1024
.L831:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     2   * \file IfxEvadc.h
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     3   * \brief EVADC  basic functionality
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     4   * \ingroup IfxLld_Evadc
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     5   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     8   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	     9   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    11   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    16   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    18   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    25   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    32   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    40   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    41   * \defgroup IfxLld_Evadc_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    42   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    43   * \defgroup IfxLld_Evadc_Std_Global Global Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    44   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    45   * \defgroup IfxLld_Evadc_Std_QueueRequest Queue Request Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    46   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    47   * \defgroup IfxLld_Evadc_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    48   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    49   * \defgroup IfxLld_Evadc_Std_Frequency Frequency Calculation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    50   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    51   * \defgroup IfxLld_Evadc_Std_Group Group Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    52   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    53   * \defgroup IfxLld_Evadc_Std_Module Module Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    54   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    55   * \defgroup IfxLld_Evadc_Std_Channel Channel Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    56   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    57   * \defgroup IfxLld_Evadc_Std_Emux Emux Functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    58   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    59   * \defgroup IfxLld_Evadc_Std_FastCompare Fast Compare functions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    60   * \ingroup IfxLld_Evadc_Std
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    61   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    62  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    63  #ifndef IFXEVADC_H
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    64  #define IFXEVADC_H 1
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    65  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    66  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    67  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    68  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    69  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    70  #include "_Impl/IfxEvadc_cfg.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    71  #include "_PinMap/IfxEvadc_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    72  #include "IfxEvadc_bf.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    73  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    74  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    75  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    76  #include "IfxCbs_reg.h"
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    77  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    78  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    79  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    80  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    81  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    82  /** \addtogroup IfxLld_Evadc_Std_Enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    83   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    84  /** \brief Defined in MODULE_EVADC.G[x].ARBCFG.B.ANONS and ANONC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    85   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    86  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    87  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    88      IfxEvadc_AnalogConverterMode_off             = 0, /**< \brief Analog Converter off */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    89      IfxEvadc_AnalogConverterMode_slowStandby     = 1, /**< \brief Slow Standby Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    90      IfxEvadc_AnalogConverterMode_fastStandby     = 2, /**< \brief Fast Standby Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    91      IfxEvadc_AnalogConverterMode_normalOperation = 3  /**< \brief Normal operation mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    92  } IfxEvadc_AnalogConverterMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    93  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    94  /** \brief Arbitration round length defined in MODULE_EVADC.G[x].ARBCFG.ARBRND(x=0,1,..,11)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    95   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    96  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    97  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    98      IfxEvadc_ArbitrationRounds_4_slots  = 0,  /**< \brief An arbitration round contains 4 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	    99      IfxEvadc_ArbitrationRounds_8_slots  = 1,  /**< \brief An arbitration round contains 8 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   100      IfxEvadc_ArbitrationRounds_16_slots = 2,  /**< \brief An arbitration round contains 16 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   101      IfxEvadc_ArbitrationRounds_20_slots = 3   /**< \brief An arbitration round contains 20 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   102  } IfxEvadc_ArbitrationRounds;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   103  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   104  /** \brief Boundary Extension defined in MODULE_EVADC.G[x].CHCTR[y].B.BNDSELX(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   105   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   106  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   107  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   108      IfxEvadc_BoundaryExtension_standard            = 0,   /**< \brief Boundary Standard mode. BNDSELU/BNDSELL as Boundaries */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   109      IfxEvadc_BoundaryExtension_fastCompareResult1  = 1,   /**< \brief Fast compare mode use as upper boundary  Channel result   1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   110      IfxEvadc_BoundaryExtension_fastCompareResult2  = 2,   /**< \brief Fast compare mode use as upper boundary  Channel result   2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   111      IfxEvadc_BoundaryExtension_fastCompareResult3  = 3,   /**< \brief Fast compare mode use as upper boundary  Channel result   3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   112      IfxEvadc_BoundaryExtension_fastCompareResult4  = 4,   /**< \brief Fast compare mode use as upper boundary  Channel result   4 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   113      IfxEvadc_BoundaryExtension_fastCompareResult5  = 5,   /**< \brief Fast compare mode use as upper boundary  Channel result   5 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   114      IfxEvadc_BoundaryExtension_fastCompareResult6  = 6,   /**< \brief Fast compare mode use as upper boundary  Channel result   6 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   115      IfxEvadc_BoundaryExtension_fastCompareResult7  = 7,   /**< \brief Fast compare mode use as upper boundary  Channel result   7 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   116      IfxEvadc_BoundaryExtension_fastCompareResult8  = 8,   /**< \brief Fast compare mode use as upper boundary  Channel result   8 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   117      IfxEvadc_BoundaryExtension_fastCompareResult9  = 9,   /**< \brief Fast compare mode use as upper boundary  Channel result   9 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   118      IfxEvadc_BoundaryExtension_fastCompareResult10 = 10,  /**< \brief Fast compare mode use as upper boundary  Channel result  10 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   119      IfxEvadc_BoundaryExtension_fastCompareResult11 = 11,  /**< \brief Fast compare mode use as upper boundary  Channel result  11 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   120      IfxEvadc_BoundaryExtension_fastCompareResult12 = 12,  /**< \brief Fast compare mode use as upper boundary  Channel result  12 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   121      IfxEvadc_BoundaryExtension_fastCompareResult13 = 13,  /**< \brief Fast compare mode use as upper boundary  Channel result  13 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   122      IfxEvadc_BoundaryExtension_fastCompareResult14 = 14,  /**< \brief Fast compare mode use as upper boundary  Channel result  14 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   123      IfxEvadc_BoundaryExtension_fastCompareResult15 = 15   /**< \brief Fast compare mode use as upper boundary  Channel result  15 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   124  } IfxEvadc_BoundaryExtension;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   125  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   126  /** \brief BoundarySel defined in MODULE_EVADC.G[x].CHCTR[y].B.BNDSELL(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   127   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   128  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   129  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   130      IfxEvadc_BoundarySelection_group0  = 0,  /**< \brief Use group class 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   131      IfxEvadc_BoundarySelection_group1  = 1,  /**< \brief Use group class 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   132      IfxEvadc_BoundarySelection_global0 = 2,  /**< \brief Use global class 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   133      IfxEvadc_BoundarySelection_global1 = 3   /**< \brief Use global class 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   134  } IfxEvadc_BoundarySelection;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   135  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   136  /** \brief EVADC Channels
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   137   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   138  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   139  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   140      IfxEvadc_ChannelId_none = -1,  /**< \brief None of EVADC channels */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   141      IfxEvadc_ChannelId_0    = 0,   /**< \brief Channel 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   142      IfxEvadc_ChannelId_1    = 1,   /**< \brief Channel 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   143      IfxEvadc_ChannelId_2    = 2,   /**< \brief Channel 2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   144      IfxEvadc_ChannelId_3    = 3,   /**< \brief Channel 3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   145      IfxEvadc_ChannelId_4    = 4,   /**< \brief Channel 4 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   146      IfxEvadc_ChannelId_5    = 5,   /**< \brief Channel 5 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   147      IfxEvadc_ChannelId_6    = 6,   /**< \brief Channel 6 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   148      IfxEvadc_ChannelId_7    = 7,   /**< \brief Channel 7 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   149      IfxEvadc_ChannelId_8    = 8,   /**< \brief Channel 8 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   150      IfxEvadc_ChannelId_9    = 9,   /**< \brief Channel 9 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   151      IfxEvadc_ChannelId_10   = 10,  /**< \brief Channel 10 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   152      IfxEvadc_ChannelId_11   = 11,  /**< \brief Channel 11 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   153      IfxEvadc_ChannelId_12   = 12,  /**< \brief Channel 12 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   154      IfxEvadc_ChannelId_13   = 13,  /**< \brief Channel 13 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   155      IfxEvadc_ChannelId_14   = 14,  /**< \brief Channel 14 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   156      IfxEvadc_ChannelId_15   = 15   /**< \brief Channel 15 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   157  } IfxEvadc_ChannelId;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   158  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   159  /** \brief ADC channel reference defined in MODULE_EVADC.G[x].CHCTR[y].B.REFSEL(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   160   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   161  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   162  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   163      IfxEvadc_ChannelReference_standard = 0,  /**< \brief use Varef as reference */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   164      IfxEvadc_ChannelReference_channel0 = 1   /**< \brief use CH0 as reference */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   165  } IfxEvadc_ChannelReference;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   166  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   167  /** \brief Channel Result defined in MODULE_EVADC.G[x].CHCTR[y].B.RESREG(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   168   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   169  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   170  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   171      IfxEvadc_ChannelResult_0 = 0,      /**< \brief Use Channel result 0  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   172      IfxEvadc_ChannelResult_1,          /**< \brief Use Channel result 1  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   173      IfxEvadc_ChannelResult_2,          /**< \brief Use Channel result 2  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   174      IfxEvadc_ChannelResult_3,          /**< \brief Use Channel result 3  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   175      IfxEvadc_ChannelResult_4,          /**< \brief Use Channel result 4  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   176      IfxEvadc_ChannelResult_5,          /**< \brief Use Channel result 5  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   177      IfxEvadc_ChannelResult_6,          /**< \brief Use Channel result 6  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   178      IfxEvadc_ChannelResult_7,          /**< \brief Use Channel result 7  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   179      IfxEvadc_ChannelResult_8,          /**< \brief Use Channel result 8  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   180      IfxEvadc_ChannelResult_9,          /**< \brief Use Channel result 9  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   181      IfxEvadc_ChannelResult_10,         /**< \brief Use Channel result 10  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   182      IfxEvadc_ChannelResult_11,         /**< \brief Use Channel result 11  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   183      IfxEvadc_ChannelResult_12,         /**< \brief Use Channel result 12  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   184      IfxEvadc_ChannelResult_13,         /**< \brief Use Channel result 13  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   185      IfxEvadc_ChannelResult_14,         /**< \brief Use Channel result 14  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   186      IfxEvadc_ChannelResult_15          /**< \brief Use Channel result 15  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   187  } IfxEvadc_ChannelResult;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   188  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   189  /** \brief External Multiplexer Channel Selection Style as defined in
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   190   * Ifx_EVADC.G[x].EMUXCTR.B.EMXCSS
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   191   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   192  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   193  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   194      IfxEvadc_ChannelSelectionStyle_channelNumber = 0,  /**< \brief selects an arbitrary channel */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   195      IfxEvadc_ChannelSelectionStyle_binary        = 1   /**< \brief Each bit of bitfield EMUXCH selects the
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   196                                                          * associated channel for EMUX control */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   197  } IfxEvadc_ChannelSelectionStyle;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   198  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   199  /** \brief Specifies the External Coding scheme(binary/gray)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   200   * defined in Ifx_EVADC.G[x].EMUXCTR.B.EMXCOD
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   201   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   202  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   203  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   204      IfxEvadc_EmuxCodingScheme_binary = 0,  /**< \brief Output the Channel Number in Binary code */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   205      IfxEvadc_EmuxCodingScheme_gray   = 1   /**< \brief Output the channel number in gray code */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   206  } IfxEvadc_EmuxCodingScheme;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   207  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   208  /** \brief Specifies the Emux interface
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   209   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   210  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   211  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   212      IfxEvadc_EmuxInterface_0 = 0,  /**< \brief Emux Interface 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   213      IfxEvadc_EmuxInterface_1 = 1   /**< \brief Emux Interface 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   214  } IfxEvadc_EmuxInterface;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   215  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   216  /** \brief External Multiplexer sample time control
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   217   * defined in Ifx_EVADC.G[x].EMUXCTR.B.EMXST
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   218   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   219  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   220  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   221      IfxEvadc_EmuxSampleTimeControl_settingChanges = 0,  /**< \brief Use STCE Whenever Setting Changes */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   222      IfxEvadc_EmuxSampleTimeControl_always         = 1   /**< \brief Use STCE for each conversion of an external channel */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   223  } IfxEvadc_EmuxSampleTimeControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   224  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   225  /** \brief specifies the External Channel Start select value
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   226   * defined in Ifx_EVADC.G[x].EMUXCTR.B.EMUXSET
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   227   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   228  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   229  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   230      IfxEvadc_EmuxSelectValue_0 = 0,      /**< \brief Start Selection Value 0  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   231      IfxEvadc_EmuxSelectValue_1,          /**< \brief Start Selection Value 1  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   232      IfxEvadc_EmuxSelectValue_2,          /**< \brief Start Selection Value 2  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   233      IfxEvadc_EmuxSelectValue_3,          /**< \brief Start Selection Value 3  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   234      IfxEvadc_EmuxSelectValue_4,          /**< \brief Start Selection Value 4  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   235      IfxEvadc_EmuxSelectValue_5,          /**< \brief Start Selection Value 5  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   236      IfxEvadc_EmuxSelectValue_6,          /**< \brief Start Selection Value 6  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   237      IfxEvadc_EmuxSelectValue_7           /**< \brief Start Selection Value 7  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   238  } IfxEvadc_EmuxSelectValue;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   239  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   240  /** \brief Specifies External Multiplexer Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   241   * define in Ifx_EVADC.G[x].EMUXCTR.B.EMUXMODE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   242   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   243  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   244  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   245      IfxEvadc_ExternalMultiplexerMode_softwareControl = 0,  /**< \brief Disable The Emux Control */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   246      IfxEvadc_ExternalMultiplexerMode_steady          = 1,  /**< \brief select steady mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   247      IfxEvadc_ExternalMultiplexerMode_singleStep      = 2,  /**< \brief Select single step mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   248      IfxEvadc_ExternalMultiplexerMode_sequence        = 3   /**< \brief Select Sequence Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   249  } IfxEvadc_ExternalMultiplexerMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   250  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   251  /** \brief FIFO mode enable
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   252   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   253  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   254  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   255      IfxEvadc_FifoMode_seperateResultRegister = 0,  /**< \brief seperate Result Register */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   256      IfxEvadc_FifoMode_fifoStructure          = 1,  /**< \brief Part of FIFO structure: copy each new valid result */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   257      IfxEvadc_FifoMode_maximumMode            = 2,  /**< \brief copy new result if bigger */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   258      IfxEvadc_FifoMode_minimumMode            = 3   /**< \brief copy new result if it is smaller */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   259  } IfxEvadc_FifoMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   260  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   261  /** \brief gating mode defined in MODULE_EVADC.QMR0.ENGT
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   262   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   263  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   264  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   265      IfxEvadc_GatingMode_disabled   = 0,  /**< \brief Gating is disabled, no conversion request are issued */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   266      IfxEvadc_GatingMode_always     = 1,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   267      IfxEvadc_GatingMode_gatingHigh = 2,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is high */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   268      IfxEvadc_GatingMode_gatingLow  = 3   /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is low */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   269  } IfxEvadc_GatingMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   270  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   271  /** \brief External trigger gating defined in MODULE_EVADC.G[x].QCTRLy.GTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   272   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   273  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   274  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   275      IfxEvadc_GatingSource_0 = 0,      /**< \brief Input signal REQGTx_0  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   276      IfxEvadc_GatingSource_1,          /**< \brief Input signal REQGTx_1  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   277      IfxEvadc_GatingSource_2,          /**< \brief Input signal REQGTx_2  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   278      IfxEvadc_GatingSource_3,          /**< \brief Input signal REQGTx_3  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   279      IfxEvadc_GatingSource_4,          /**< \brief Input signal REQGTx_4  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   280      IfxEvadc_GatingSource_5,          /**< \brief Input signal REQGTx_5  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   281      IfxEvadc_GatingSource_6,          /**< \brief Input signal REQGTx_6  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   282      IfxEvadc_GatingSource_7,          /**< \brief Input signal REQGTx_7  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   283      IfxEvadc_GatingSource_8,          /**< \brief Input signal REQGTx_8  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   284      IfxEvadc_GatingSource_9,          /**< \brief Input signal REQGTx_9  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   285      IfxEvadc_GatingSource_10,         /**< \brief Input signal REQGTx_10  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   286      IfxEvadc_GatingSource_11,         /**< \brief Input signal REQGTx_11  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   287      IfxEvadc_GatingSource_12,         /**< \brief Input signal REQGTx_12  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   288      IfxEvadc_GatingSource_13,         /**< \brief Input signal REQGTx_13  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   289      IfxEvadc_GatingSource_14,         /**< \brief Input signal REQGTx_14  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   290      IfxEvadc_GatingSource_15          /**< \brief Input signal REQGTx_15  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   291  } IfxEvadc_GatingSource;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   292  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   293  /** \brief inputClass defined in MODULE_EVADC.G[x].CHCTR[y].B.ICLSEL(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   294   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   295  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   296  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   297      IfxEvadc_InputClasses_group0  = 0,  /**< \brief Use group class 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   298      IfxEvadc_InputClasses_group1  = 1,  /**< \brief Use group class 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   299      IfxEvadc_InputClasses_global0 = 2,  /**< \brief Use global class 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   300      IfxEvadc_InputClasses_global1 = 3   /**< \brief Use global class 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   301  } IfxEvadc_InputClasses;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   302  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   303  /** \brief ADC channel limit check defined in MODULE_EVADC.G[x].CHCTR[y].B.CHEVMODE(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   304   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   305  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   306  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   307      IfxEvadc_LimitCheck_noCheck            = 0,  /**< \brief Normal compare mode Event Never Fast Compare mode Event Never */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   308      IfxEvadc_LimitCheck_eventIfInArea      = 1,  /**< \brief Normal compare mode Event If result is inside the boundary band    Fast Compare mode Event If result switches to high (above comp. value) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   309      IfxEvadc_LimitCheck_eventIfOutsideArea = 2,  /**< \brief Normal compare mode Event If result is outside the boundary band   Fast Compare mode Event If result switches to low (below comp. value) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   310      IfxEvadc_LimitCheck_always             = 3   /**< \brief Normal compare mode Event Always   Fast Compare mode Event Always */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   311  } IfxEvadc_LimitCheck;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   312  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   313  /** \brief Access protection for Group registers defined in MODULE_EVADC.ACCPROT0.U
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   314   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   315  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   316  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   317      IfxEvadc_Protection_channelControl0         = 0,   /**< \brief Access control for GxCHCTR0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   318      IfxEvadc_Protection_channelControl1         = 1,   /**< \brief Access control for GxCHCTR1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   319      IfxEvadc_Protection_channelControl2         = 2,   /**< \brief Access control for GxCHCTR2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   320      IfxEvadc_Protection_channelControl3         = 3,   /**< \brief Access control for GxCHCTR3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   321      IfxEvadc_Protection_channelControl4         = 4,   /**< \brief Access control for GxCHCTR4 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   322      IfxEvadc_Protection_channelControl5         = 5,   /**< \brief Access control for GxCHCTR5 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   323      IfxEvadc_Protection_channelControl6         = 6,   /**< \brief Access control for GxCHCTR6 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   324      IfxEvadc_Protection_channelControl7         = 7,   /**< \brief Access control for GxCHCTR7 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   325      IfxEvadc_Protection_channelControl8         = 8,   /**< \brief Access control for GxCHCTR8 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   326      IfxEvadc_Protection_channelControl9         = 9,   /**< \brief Access control for GxCHCTR9 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   327      IfxEvadc_Protection_channelControl10        = 10,  /**< \brief Access control for GxCHCTR10 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   328      IfxEvadc_Protection_channelControl11        = 11,  /**< \brief Access control for GxCHCTR11 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   329      IfxEvadc_Protection_channelControl12        = 12,  /**< \brief Access control for GxCHCTR12 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   330      IfxEvadc_Protection_channelControl13        = 13,  /**< \brief Access control for GxCHCTR13 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   331      IfxEvadc_Protection_channelControl14        = 14,  /**< \brief Access control for GxCHCTR14 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   332      IfxEvadc_Protection_initGroup0              = 16,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   333      IfxEvadc_Protection_initGroup1              = 17,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   334      IfxEvadc_Protection_initGroup2              = 18,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   335      IfxEvadc_Protection_initGroup3              = 19,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   336      IfxEvadc_Protection_initGroup4              = 20,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   337      IfxEvadc_Protection_initGroup5              = 21,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   338      IfxEvadc_Protection_initGroup6              = 22,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   339      IfxEvadc_Protection_initGroup7              = 23,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   340      IfxEvadc_Protection_initGroup8              = 24,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   341      IfxEvadc_Protection_initGroup9              = 25,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   342      IfxEvadc_Protection_initGroup10             = 26,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   343      IfxEvadc_Protection_initGroup11             = 27,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   344      IfxEvadc_Protection_initGroup12             = 28,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   345      IfxEvadc_Protection_initGroup13             = 29,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   346      IfxEvadc_Protection_initGroup14             = 30,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   347      IfxEvadc_Protection_serviceGroup0           = 32,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   348      IfxEvadc_Protection_serviceGroup1           = 33,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   349      IfxEvadc_Protection_serviceGroup2           = 34,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   350      IfxEvadc_Protection_serviceGroup3           = 35,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   351      IfxEvadc_Protection_serviceGroup4           = 36,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   352      IfxEvadc_Protection_serviceGroup5           = 37,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   353      IfxEvadc_Protection_serviceGroup6           = 38,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   354      IfxEvadc_Protection_serviceGroup7           = 39,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   355      IfxEvadc_Protection_serviceGroup8           = 40,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   356      IfxEvadc_Protection_serviceGroup9           = 41,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   357      IfxEvadc_Protection_serviceGroup10          = 42,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   358      IfxEvadc_Protection_serviceGroup11          = 43,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   359      IfxEvadc_Protection_serviceGroup12          = 44,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   360      IfxEvadc_Protection_serviceGroup13          = 45,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   361      IfxEvadc_Protection_serviceGroup14          = 46,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   362      IfxEvadc_Protection_resultRegisterGroup0    = 48,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   363      IfxEvadc_Protection_resultRegisterGroup1    = 49,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   364      IfxEvadc_Protection_resultRegisterGroup2    = 50,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   365      IfxEvadc_Protection_resultRegisterGroup3    = 51,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   366      IfxEvadc_Protection_resultRegisterGroup4    = 52,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   367      IfxEvadc_Protection_resultRegisterGroup5    = 53,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   368      IfxEvadc_Protection_resultRegisterGroup6    = 54,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   369      IfxEvadc_Protection_resultRegisterGroup7    = 55,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   370      IfxEvadc_Protection_resultRegisterGroup8    = 56,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   371      IfxEvadc_Protection_resultRegisterGroup9    = 57,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   372      IfxEvadc_Protection_resultRegisterGroup10   = 58,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   373      IfxEvadc_Protection_resultRegisterGroup11   = 59,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   374      IfxEvadc_Protection_resultRegisterGroup12   = 60,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   375      IfxEvadc_Protection_resultRegisterGroup13   = 61,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   376      IfxEvadc_Protection_resultRegisterGroup14   = 62,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   377      IfxEvadc_Protection_initFastCompareChannel0 = 64,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   378                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   379      IfxEvadc_Protection_initFastCompareChannel1 = 65,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   380                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   381      IfxEvadc_Protection_initFastCompareChannel2 = 66,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   382                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   383      IfxEvadc_Protection_initFastCompareChannel3 = 67,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   384                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   385      IfxEvadc_Protection_initFastCompareChannel4 = 68,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   386                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   387      IfxEvadc_Protection_initFastCompareChannel5 = 69,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   388                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   389      IfxEvadc_Protection_initFastCompareChannel6 = 70,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   390                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   391      IfxEvadc_Protection_initFastCompareChannel7 = 71,  /**< \brief Access control for GyFCBFL, GyFCHYST, GyFCCTR, GyFCM,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   392                                                          * GyFCRAMP */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   393      IfxEvadc_Protection_globalConfig            = 80,  /**< \brief Access control for GLOBCFG */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   394      IfxEvadc_Protection_externalMultiplexer     = 81,  /**< \brief Access control for EMUXSEL, GxEMUXCTR */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   395      IfxEvadc_Protection_testFunction            = 82   /**< \brief Access control for GLOBTF */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   396  } IfxEvadc_Protection;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   397  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   398  /** \brief Arbitration priority, Group x,defined in MODULE_EVADC.G[x].ARBPR.PRIOy(x=0,1,...,11;y=0,1,2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   399   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   400  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   401  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   402      IfxEvadc_RequestSlotPriority_lowest  = 0, /**< \brief Lowest priority */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   403      IfxEvadc_RequestSlotPriority_low     = 1, /**< \brief Lowpriority */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   404      IfxEvadc_RequestSlotPriority_high    = 2, /**< \brief High priority */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   405      IfxEvadc_RequestSlotPriority_highest = 3  /**< \brief Highest priority */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   406  } IfxEvadc_RequestSlotPriority;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   407  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   408  /** \brief Request source start mode defined in MODULE_EVADC.G[x].ARBPR.CSMy(x=0,1,...,11;y=0,1,2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   409   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   410  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   411  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   412      IfxEvadc_RequestSlotStartMode_waitForStart       = 0, /**< \brief Wait for start */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   413      IfxEvadc_RequestSlotStartMode_cancelInjectRepeat = 1  /**< \brief Cancel-Inject-Repeat */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   414  } IfxEvadc_RequestSlotStartMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   415  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   416  /** \brief Request sources
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   417   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   418  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   419  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   420      IfxEvadc_RequestSource_queue0 = 0,  /**< \brief 8 stage Queue0 request */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   421      IfxEvadc_RequestSource_queue1 = 1,  /**< \brief 8 stage Queue1 request */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   422      IfxEvadc_RequestSource_queue2 = 2   /**< \brief 8 stage Queue2 request */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   423  } IfxEvadc_RequestSource;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   424  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   425  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   426   * Definition in Ifx_EVADC.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   427   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   428  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   429  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   430      IfxEvadc_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   431      IfxEvadc_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   432  } IfxEvadc_SleepMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   433  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   434  /** \brief Service Node defined in MODULE_EVADC.G[x].SRACT.U(x= 0,1,..,11)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   435   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   436  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   437  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   438      IfxEvadc_SrcNr_group0  = 0,  /**< \brief service request line 0 of group */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   439      IfxEvadc_SrcNr_group1  = 1,  /**< \brief service request line 1 of group */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   440      IfxEvadc_SrcNr_group2  = 2,  /**< \brief service request line 2 of group */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   441      IfxEvadc_SrcNr_group3  = 3,  /**< \brief service request line 3 of group */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   442      IfxEvadc_SrcNr_shared0 = 4,  /**< \brief Select shared service request line 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   443      IfxEvadc_SrcNr_shared1 = 5,  /**< \brief Select shared service request line 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   444      IfxEvadc_SrcNr_shared2 = 6,  /**< \brief Select shared service request line 2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   445      IfxEvadc_SrcNr_shared3 = 7   /**< \brief Select shared service request line 3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   446  } IfxEvadc_SrcNr;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   447  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   448  /** \brief API return values defined in
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   449   * MODULE_EVADC.G[x].QSR0.U,MODULE_EVADC.G[x].QSR1.U,MODULE_EVADC.G[x].QSR2.U(x=0,1,...,11)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   450   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   451  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   452  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   453      IfxEvadc_Status_noError              = 0, /**< \brief No error during api execution */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   454      IfxEvadc_Status_notInitialised       = 1, /**< \brief Appropriate initialisation not done */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   455      IfxEvadc_Status_invalidGroup         = 2, /**< \brief Invalid group number */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   456      IfxEvadc_Status_invalidChannel       = 3, /**< \brief Invalid channel number */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   457      IfxEvadc_Status_queueFull            = 4, /**< \brief Queue is full */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   458      IfxEvadc_Status_noAccess             = 5, /**< \brief Access to the group/channel is disabled */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   459      IfxEvadc_Status_channelsStillPending = 6  /**< \brief Conversion for some of the channels are still pending */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   460  } IfxEvadc_Status;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   461  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   462  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   463   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   464  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   465  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   466      IfxEvadc_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   467      IfxEvadc_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   468      IfxEvadc_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   469  } IfxEvadc_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   470  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   471  /** \brief trigger definition defined in MODULE_EVADC.G[x].QCTRL0.XTMODE(x=0,1,..,11)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   472   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   473  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   474  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   475      IfxEvadc_TriggerMode_noExternalTrigger = 0,  /**< \brief No external trigger */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   476      IfxEvadc_TriggerMode_uponFallingEdge   = 1,  /**< \brief Trigger event upon a falling edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   477      IfxEvadc_TriggerMode_uponRisingEdge    = 2,  /**< \brief Trigger event upon a rising edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   478      IfxEvadc_TriggerMode_uponAnyEdge       = 3   /**< \brief Trigger event upon any edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   479  } IfxEvadc_TriggerMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   480  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   481  /** \brief Trigger request source defined in MODULE_EVADC.G[x].QCTRLy.XTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   482   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   483  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   484  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   485      IfxEvadc_TriggerSource_0 = 0,      /**< \brief Input signal REQTRx_0  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   486      IfxEvadc_TriggerSource_1,          /**< \brief Input signal REQTRx_1  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   487      IfxEvadc_TriggerSource_2,          /**< \brief Input signal REQTRx_2  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   488      IfxEvadc_TriggerSource_3,          /**< \brief Input signal REQTRx_3  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   489      IfxEvadc_TriggerSource_4,          /**< \brief Input signal REQTRx_4  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   490      IfxEvadc_TriggerSource_5,          /**< \brief Input signal REQTRx_5  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   491      IfxEvadc_TriggerSource_6,          /**< \brief Input signal REQTRx_6  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   492      IfxEvadc_TriggerSource_7,          /**< \brief Input signal REQTRx_7  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   493      IfxEvadc_TriggerSource_8,          /**< \brief Input signal REQTRx_8  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   494      IfxEvadc_TriggerSource_9,          /**< \brief Input signal REQTRx_9  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   495      IfxEvadc_TriggerSource_10,         /**< \brief Input signal REQTRx_10  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   496      IfxEvadc_TriggerSource_11,         /**< \brief Input signal REQTRx_11  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   497      IfxEvadc_TriggerSource_12,         /**< \brief Input signal REQTRx_12  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   498      IfxEvadc_TriggerSource_13,         /**< \brief Input signal REQTRx_13  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   499      IfxEvadc_TriggerSource_14,         /**< \brief Input signal REQTRx_14  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   500      IfxEvadc_TriggerSource_15          /**< \brief Input signal REQTRx_15  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   501  } IfxEvadc_TriggerSource;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   502  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   503  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   504  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   505  /** \addtogroup IfxLld_Evadc_Std_FastCompare
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   506   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   507  /** \brief Selects the behaviour of BoundaryFlag in FCBFL.B.BFA
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   508   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   509  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   510  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   511      IfxEvadc_BoundaryFlagActivationMode_0 = 0,  /**< \brief Set boundary flag BFL if result FCR = 1 (input above the defined
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   512                                                   * band or compare value), clear if FCR = 0 (input below) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   513      IfxEvadc_BoundaryFlagActivationMode_1 = 1   /**< \brief Set boundary flag BFL if result FCR = 0 (input below the defined
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   514                                                   * band or compare value), clear if FCR = 1 (input above) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   515  } IfxEvadc_BoundaryFlagActivationMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   516  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   517  /** \brief Controls in in FCBFL.B.BFI options for whether to use Boundary Flag(FCM.B.BFL) directly or in a inverted format.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   518   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   519  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   520  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   521      IfxEvadc_BoundaryFlagInversionControl_direct = 0,  /**< \brief Use BFL directly */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   522      IfxEvadc_BoundaryFlagInversionControl_invert = 1   /**< \brief Use inverted BFL */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   523  } IfxEvadc_BoundaryFlagInversionControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   524  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   525  /** \brief Options for FCBFL.B.BFLNP to select Boundary Flag Node Pointer
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   526   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   527  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   528  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   529      IfxEvadc_BoundaryFlagNodePointer_commonBoundaryFlagOutput0 = 0,  /**< \brief Select common boundary flag output 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   530      IfxEvadc_BoundaryFlagNodePointer_commonBoundaryFlagOutput1 = 1,  /**< \brief Select common boundary flag output 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   531      IfxEvadc_BoundaryFlagNodePointer_commonBoundaryFlagOutput2 = 2,  /**< \brief Select common boundary flag output 2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   532      IfxEvadc_BoundaryFlagNodePointer_commonBoundaryFlagOutput3 = 3,  /**< \brief Select common boundary flag output 3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   533      IfxEvadc_BoundaryFlagNodePointer_sharedServiceRequestLine0 = 4,  /**< \brief Select shared service request line 0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   534      IfxEvadc_BoundaryFlagNodePointer_sharedServiceRequestLine1 = 5,  /**< \brief Select shared service request line 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   535      IfxEvadc_BoundaryFlagNodePointer_sharedServiceRequestLine2 = 6,  /**< \brief Select shared service request line 2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   536      IfxEvadc_BoundaryFlagNodePointer_sharedServiceRequestLine3 = 7,  /**< \brief Select shared service request line 3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   537      IfxEvadc_BoundaryFlagNodePointer_disabled                  = 16  /**< \brief Disabled, no common output signal */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   538  } IfxEvadc_BoundaryFlagNodePointer;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   539  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   540  /** \brief Options for FCBFL.B.BFS to modify the Boundary Flag(FCM.B.BFL)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   541   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   542  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   543  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   544      IfxEvadc_BoundaryFlagSwControl_noAction = 0,  /**< \brief No Action */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   545      IfxEvadc_BoundaryFlagSwControl_clear    = 1,  /**< \brief Clear BFL */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   546      IfxEvadc_BoundaryFlagSwControl_set      = 2,  /**< \brief Set BFL */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   547      IfxEvadc_BoundaryFlagSwControl_toggle   = 3   /**< \brief Toggle BFL */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   548  } IfxEvadc_BoundaryFlagSwControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   549  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   550  /** \brief Channel Event Mode for configuring generation of events for Fast Compare channels in FCCTRL.B.CHEVMODE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   551   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   552  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   553  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   554      IfxEvadc_ChannelEventMode_never                    = 0, /**< \brief Never generate a service request */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   555      IfxEvadc_ChannelEventMode_aboveCompareValue        = 1, /**< \brief Generate a service request in case the result is above compare value */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   556      IfxEvadc_ChannelEventMode_belowCompareValue        = 2, /**< \brief Generate a service request in case the result is below compare value */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   557      IfxEvadc_ChannelEventMode_aboveOrBelowCompareValue = 3  /**< \brief Generate a service request in case the result switches to either level(above or below the compare value) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   558  } IfxEvadc_ChannelEventMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   559  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   560  /** \brief Defines the frequency of the analog converter clock f_ADCI (base clock for
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   561   * conversion steps), derived from the peripheral clock: f_ADCI = fADC / CP.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   562   * To be filled in FCCTRL.B.DIVA for Fast Compare channels & ANCFG.B.DIVA for other groups
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   563   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   564  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   565  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   566      IfxEvadc_ClockDividerFactor_maxFrequency = 0,  /**< \brief Max. frequency */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   567      IfxEvadc_ClockDividerFactor_2            = 1,  /**< \brief Frequency Divided by 2  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   568      IfxEvadc_ClockDividerFactor_3,                 /**< \brief Frequency Divided by 3  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   569      IfxEvadc_ClockDividerFactor_4,                 /**< \brief Frequency Divided by 4  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   570      IfxEvadc_ClockDividerFactor_5,                 /**< \brief Frequency Divided by 5  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   571      IfxEvadc_ClockDividerFactor_6,                 /**< \brief Frequency Divided by 6  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   572      IfxEvadc_ClockDividerFactor_7,                 /**< \brief Frequency Divided by 7  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   573      IfxEvadc_ClockDividerFactor_8,                 /**< \brief Frequency Divided by 8  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   574      IfxEvadc_ClockDividerFactor_9,                 /**< \brief Frequency Divided by 9  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   575      IfxEvadc_ClockDividerFactor_10,                /**< \brief Frequency Divided by 10  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   576      IfxEvadc_ClockDividerFactor_11,                /**< \brief Frequency Divided by 11  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   577      IfxEvadc_ClockDividerFactor_12,                /**< \brief Frequency Divided by 12  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   578      IfxEvadc_ClockDividerFactor_13,                /**< \brief Frequency Divided by 13  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   579      IfxEvadc_ClockDividerFactor_14,                /**< \brief Frequency Divided by 14  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   580      IfxEvadc_ClockDividerFactor_15,                /**< \brief Frequency Divided by 15  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   581      IfxEvadc_ClockDividerFactor_16,                /**< \brief Frequency Divided by 16  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   582      IfxEvadc_ClockDividerFactor_17,                /**< \brief Frequency Divided by 17  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   583      IfxEvadc_ClockDividerFactor_18,                /**< \brief Frequency Divided by 18  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   584      IfxEvadc_ClockDividerFactor_19,                /**< \brief Frequency Divided by 19  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   585      IfxEvadc_ClockDividerFactor_20,                /**< \brief Frequency Divided by 20  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   586      IfxEvadc_ClockDividerFactor_21,                /**< \brief Frequency Divided by 21  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   587      IfxEvadc_ClockDividerFactor_22,                /**< \brief Frequency Divided by 22  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   588      IfxEvadc_ClockDividerFactor_23,                /**< \brief Frequency Divided by 23  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   589      IfxEvadc_ClockDividerFactor_24,                /**< \brief Frequency Divided by 24  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   590      IfxEvadc_ClockDividerFactor_25,                /**< \brief Frequency Divided by 25  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   591      IfxEvadc_ClockDividerFactor_26,                /**< \brief Frequency Divided by 26  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   592      IfxEvadc_ClockDividerFactor_27,                /**< \brief Frequency Divided by 27  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   593      IfxEvadc_ClockDividerFactor_28,                /**< \brief Frequency Divided by 28  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   594      IfxEvadc_ClockDividerFactor_29,                /**< \brief Frequency Divided by 29  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   595      IfxEvadc_ClockDividerFactor_30,                /**< \brief Frequency Divided by 30  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   596      IfxEvadc_ClockDividerFactor_31,                /**< \brief Frequency Divided by 31  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   597      IfxEvadc_ClockDividerFactor_32                 /**< \brief Frequency Divided by 32  */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   598  } IfxEvadc_ClockDividerFactor;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   599  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   600  /** \brief External Trigger Polarity to be set in FCCTRL.B.XTPOL
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   601   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   602  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   603  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   604      IfxEvadc_ExternalTriggerPolarity_direct   = 0, /**< \brief Use selected input signal directly */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   605      IfxEvadc_ExternalTriggerPolarity_inverted = 1  /**< \brief Invert selected input signal */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   606  } IfxEvadc_ExternalTriggerPolarity;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   607  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   608  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   609  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   610      IfxEvadc_FastCompareAnalogClockSynchronizationDelay_0 = 0,  /**< \brief No delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   611      IfxEvadc_FastCompareAnalogClockSynchronizationDelay_1 = 1,  /**< \brief 1 clock cycle delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   612      IfxEvadc_FastCompareAnalogClockSynchronizationDelay_2 = 2,  /**< \brief 2 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   613      IfxEvadc_FastCompareAnalogClockSynchronizationDelay_3 = 3   /**< \brief 3 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   614  } IfxEvadc_FastCompareAnalogClockSynchronizationDelay;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   615  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   616  /** \brief Settings for Analog Coverter Controller to be done in FCM.B.ANON
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   617   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   618  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   619  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   620      IfxEvadc_FastCompareAnalogConverterControl_off    = 0, /**< \brief Analog converter off */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   621      IfxEvadc_FastCompareAnalogConverterControl_normal = 1  /**< \brief Normal operation */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   622  } IfxEvadc_FastCompareAnalogConverterControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   623  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   624  /** \brief Defines the source of the value(s) in bitfield FCM.B.FCREF
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   625   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   626   * Note: Software can only write to bitfield FCM.B.FCREF, while AUE = 00B.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   627   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   628  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   629  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   630      IfxEvadc_FastCompareAutomaticUpdate_sw             = 0,  /**< \brief No automatic update.Value(s) written by software. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   631      IfxEvadc_FastCompareAutomaticUpdate_alternateValue = 1,  /**< \brief While gate is active (high), value is copied from bitfield FCM.B.FCRCOMPA and while gate is inactive (low), value is copied from bitfield FCM.B.FCRCOMPB */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   632      IfxEvadc_FastCompareAutomaticUpdate_rampCounter    = 2,  /**< \brief Value(s) copied from ramp counter on ramp start or counter
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   633                                                                * update. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   634      IfxEvadc_FastCompareAutomaticUpdate_analogSource   = 3   /**< \brief Value(s) written by the associated converter */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   635  } IfxEvadc_FastCompareAutomaticUpdate;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   636  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   637  /** \brief Defines the basic run conditions of the fast compare channel in FCM.B.RUNCOMP
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   638   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   639  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   640  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   641      IfxEvadc_FastCompareRunControl_stop      = 0, /**< \brief Stop, no operation */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   642      IfxEvadc_FastCompareRunControl_alwaysRun = 1  /**< \brief Always run */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   643  } IfxEvadc_FastCompareRunControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   644  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   645  /** \brief Criteria/mode settings for service request generation in FCM.B.SRG
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   646   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   647  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   648  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   649      IfxEvadc_FastCompareServiceRequestGeneration_off       = 0, /**< \brief No service requests are generated */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   650      IfxEvadc_FastCompareServiceRequestGeneration_rampEnd   = 1, /**< \brief Issue service request when the ramp counter stops */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   651      IfxEvadc_FastCompareServiceRequestGeneration_newValue  = 2, /**< \brief Issue service request when a value is written to FCREF */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   652      IfxEvadc_FastCompareServiceRequestGeneration_newResult = 3  /**< \brief Issue service request when a new result available */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   653  } IfxEvadc_FastCompareServiceRequestGeneration;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   654  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   655  /** \brief Gate Operating Mode to be filled in FCCTRL.B.GTMODE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   656   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   657  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   658  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   659      IfxEvadc_GateOperatingMode_noGateFunction     = 0,  /**< \brief No gate function */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   660      IfxEvadc_GateOperatingMode_alternateValueMode = 1,  /**< \brief Alternate value mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   661      IfxEvadc_GateOperatingMode_lockBoundaryFlag   = 2   /**< \brief Lock boundary flag */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   662  } IfxEvadc_GateOperatingMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   663  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   664  /** \brief Ramp direction setting in FCM.B.FCRDIR
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   665   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   666  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   667  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   668      IfxEvadc_RampDirection_down = 0,  /**< \brief Decrement ramp counter and stop when counter <= FCRCOMPB */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   669      IfxEvadc_RampDirection_up   = 1   /**< \brief Increment ramp counter and stop when counter >= FCRCOMPB */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   670  } IfxEvadc_RampDirection;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   671  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   672  /** \brief Defines the run conditions for the ramp generation in FCM.B.RUNRAMP
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   673   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   674  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   675  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   676      IfxEvadc_RampRunControl_stop = 0,  /**< \brief Stop, no operation */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   677      IfxEvadc_RampRunControl_1    = 1,  /**< \brief Start immediately when GxFCRAMP0/1 is written */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   678      IfxEvadc_RampRunControl_2    = 2,  /**< \brief Start upon the selected trigger event of signal REQTRx */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   679      IfxEvadc_RampRunControl_3    = 3   /**< \brief Start immediately when GxFCRAMP0/1 is written and
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   680                                          * stop upon the selected trigger event of signal REQTRx */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   681  } IfxEvadc_RampRunControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   682  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   683  /** \brief Sample timing sync settings for FCM.B.SSE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   684   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   685  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   686  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   687      IfxEvadc_SampleSynchronization_off                     = 0, /**< \brief No synchronization */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   688      IfxEvadc_SampleSynchronization_synchronizeSampleTiming = 1  /**< \brief Sample timing is synchronized.This is recommended for operation of several ADCs. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   689  } IfxEvadc_SampleSynchronization;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   690  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   691  /** \brief Trigger operating mode in Fast Compare channels, to be entered in FCCTRL.B.XTMODE
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   692   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   693  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   694  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   695      IfxEvadc_TriggerOperatingMode_noExternalTrigger = 0,  /**< \brief No external trigger */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   696      IfxEvadc_TriggerOperatingMode_fallingEdge       = 1,  /**< \brief Trigger event upon a falling edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   697      IfxEvadc_TriggerOperatingMode_risingEdge        = 2,  /**< \brief Trigger event upon a rising edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   698      IfxEvadc_TriggerOperatingMode_anyEdge           = 3   /**< \brief Trigger event upon any edge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   699  } IfxEvadc_TriggerOperatingMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   700  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   701  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   702  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   703  /** \brief Defines the way the analog clock is generated.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   704   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   705  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   706  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   707      IfxEvadc_AnalogClockGenerationMode_synchronized   = 0, /**< \brief Synchronized mode: Initial clock pulse is defined by the phase synchronizer */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   708      IfxEvadc_AnalogClockGenerationMode_unsynchronized = 1  /**< \brief Unsynchronized mode: The analog clock is generated independently. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   709  } IfxEvadc_AnalogClockGenerationMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   710  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   711  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   712  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   713      IfxEvadc_AnalogClockSynchronizationDelay_0 = 0,  /**< \brief No Delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   714      IfxEvadc_AnalogClockSynchronizationDelay_1 = 1,  /**< \brief 1 clock cycle delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   715      IfxEvadc_AnalogClockSynchronizationDelay_2 = 2,  /**< \brief 2 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   716      IfxEvadc_AnalogClockSynchronizationDelay_3 = 3,  /**< \brief 3 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   717      IfxEvadc_AnalogClockSynchronizationDelay_4 = 4,  /**< \brief 4 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   718      IfxEvadc_AnalogClockSynchronizationDelay_5 = 5,  /**< \brief 5 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   719      IfxEvadc_AnalogClockSynchronizationDelay_6 = 6,  /**< \brief 6 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   720      IfxEvadc_AnalogClockSynchronizationDelay_7 = 7   /**< \brief 7 clock cycles delay */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   721  } IfxEvadc_AnalogClockSynchronizationDelay;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   722  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   723  /** \brief Analog Input Precharge Control for Standard Conversions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   724   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   725  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   726  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   727      IfxEvadc_AnalogInputPrechargeControl_noPrecharge = 0,  /**< \brief No Precharge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   728      IfxEvadc_AnalogInputPrechargeControl_8Cycles     = 1,  /**< \brief Precharge for 8 clock cycles */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   729      IfxEvadc_AnalogInputPrechargeControl_16Cycles    = 2,  /**< \brief Precharge for 16 clock cycles */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   730      IfxEvadc_AnalogInputPrechargeControl_32cycles    = 3   /**< \brief Precharge for 32 clock cycles */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   731  } IfxEvadc_AnalogInputPrechargeControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   732  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   733  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   734  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   735      IfxEvadc_ArbitrationMode_0 = 0,
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   736      IfxEvadc_ArbitrationMode_1 = 1
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   737  } IfxEvadc_ArbitrationMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   738  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   739  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   740  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   741      IfxEvadc_CalibrationSampleTimeControl_2 = 0,  /**< \brief 2*t_ADCI */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   742      IfxEvadc_CalibrationSampleTimeControl_4 = 1,  /**< \brief 4*t_ADCI */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   743      IfxEvadc_CalibrationSampleTimeControl_6 = 2,  /**< \brief 6*t_ADCI */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   744      IfxEvadc_CalibrationSampleTimeControl_8 = 3   /**< \brief 8*t_ADCI */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   745  } IfxEvadc_CalibrationSampleTimeControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   746  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   747  /** \brief Conversion Mode for standard Conversion
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   748   *  channel precision defined in MODULE_EVADC.G[x].CHCTR[y].B.ICLASS[y].B.CMS(x=0,1,...,11;y=0,1)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   749   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   750  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   751  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   752      IfxEvadc_ChannelNoiseReduction_standardConversion = 0,  /**< \brief Standard Conversions mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   753      IfxEvadc_ChannelNoiseReduction_level1             = 1,  /**< \brief Noise reduction conversion level 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   754      IfxEvadc_ChannelNoiseReduction_level2             = 2,  /**< \brief Noise reduction conversion level 2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   755      IfxEvadc_ChannelNoiseReduction_level3             = 3   /**< \brief Noise reduction conversion level 3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   756  } IfxEvadc_ChannelNoiseReduction;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   757  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   758  /** \brief Conversion Mode for EMUX Conversions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   759   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   760  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   761  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   762      IfxEvadc_ChannelNoiseReductionEMUX_standardConversion = 0,  /**< \brief Standard conversion */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   763      IfxEvadc_ChannelNoiseReductionEMUX_level1             = 1,  /**< \brief Noise reduction conversion level 1, 1 additional conversion step */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   764      IfxEvadc_ChannelNoiseReductionEMUX_level2             = 2,  /**< \brief Noise reduction conversion level 2, 3 additional conversion steps */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   765      IfxEvadc_ChannelNoiseReductionEMUX_level3             = 3   /**< \brief Noise reduction conversion level 3, 7 additional conversion steps */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   766  } IfxEvadc_ChannelNoiseReductionEMUX;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   767  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   768  /** \brief Data Modification Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   769   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   770  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   771  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   772      IfxEvadc_DataModificationMode_standardDataReduction = 0,  /**< \brief Standard Data Reduction */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   773      IfxEvadc_DataModificationMode_resultFilteringMode   = 1,  /**< \brief Result Filtering Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   774      IfxEvadc_DataModificationMode_differenceMode        = 2   /**< \brief Difference Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   775  } IfxEvadc_DataModificationMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   776  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   777  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   778  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   779      IfxEvadc_DataReductionControlMode_0  = 0,   /**< \brief If DMM=0b00, Data reduction disabled,if DMM=0b01, FIR:a=2,b=1,c=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   780      IfxEvadc_DataReductionControlMode_1  = 1,   /**< \brief If DMM=0b00, Accumulate 2 result values,if DMM=0b01, FIR:a=1,b=2,c=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   781      IfxEvadc_DataReductionControlMode_2  = 2,   /**< \brief If DMM=0b00, Accumulate 3 result values,if DMM=0b01, FIR:a=2,b=0,c=1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   782      IfxEvadc_DataReductionControlMode_3  = 3,   /**< \brief If DMM=0b00, Accumulate 4 result values,if DMM=0b01, FIR:a=1,b=1,c=1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   783      IfxEvadc_DataReductionControlMode_4  = 4,   /**< \brief If DMM=0b00, Accumulate 5 result values,if DMM=0b01, FIR:a=1,b=0,c=2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   784      IfxEvadc_DataReductionControlMode_5  = 5,   /**< \brief If DMM=0b00, Accumulate 6 result values,if DMM=0b01, FIR:a=3,b=1,c=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   785      IfxEvadc_DataReductionControlMode_6  = 6,   /**< \brief If DMM=0b00, Accumulate 7 result values,if DMM=0b01, FIR:a=2,b=2,c=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   786      IfxEvadc_DataReductionControlMode_7  = 7,   /**< \brief If DMM=0b00, Accumulate 8 result values,if DMM=0b01, FIR:a=1,b=3,c=0 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   787      IfxEvadc_DataReductionControlMode_8  = 8,   /**< \brief If DMM=0b00, Accumulate 9 result values,if DMM=0b01, FIR:a=3,b=0,c=1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   788      IfxEvadc_DataReductionControlMode_9  = 9,   /**< \brief If DMM=0b00, Accumulate 10 result values,if DMM=0b01, FIR:a=2,b=1,c=1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   789      IfxEvadc_DataReductionControlMode_10 = 10,  /**< \brief If DMM=0b00, Accumulate 11 result values,if DMM=0b01, FIR:a=1,b=2,c=1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   790      IfxEvadc_DataReductionControlMode_11 = 11,  /**< \brief If DMM=0b00, Accumulate 12 result values,if DMM=0b01, FIR:a=2,b=0,c=2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   791      IfxEvadc_DataReductionControlMode_12 = 12,  /**< \brief If DMM=0b00, Accumulate 13 result values,if DMM=0b01, FIR:a=1,b=1,c=2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   792      IfxEvadc_DataReductionControlMode_13 = 13,  /**< \brief If DMM=0b00, Accumulate 14 result values,if DMM=0b01, FIR:a=1,b=0,c=3 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   793      IfxEvadc_DataReductionControlMode_14 = 14,  /**< \brief If DMM=0b00, Accumulate 15 result values,if DMM=0b01, IIR:a=2,b=2 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   794      IfxEvadc_DataReductionControlMode_15 = 15   /**< \brief If DMM=0b00, Accumulate 16 result values,if DMM=0b01, IIR:a=3,b=4 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   795  } IfxEvadc_DataReductionControlMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   796  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   797  /** \brief Contains options for Idle Precharge levels
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   798   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   799  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   800  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   801      IfxEvadc_IdlePrecharge_currentLevel = 0,  /**< \brief The sampling capacitor keeps the current charge */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   802      IfxEvadc_IdlePrecharge_referenceBy2 = 1   /**< \brief ThSampling capacitor is precharged to approx. half the reference when idle */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   803  } IfxEvadc_IdlePrecharge;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   804  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   805  /** \brief Selects the MSB conversion time(in terms of t_ADC)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   806   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   807  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   808  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   809      IfxEvadc_MsbConversionTime_singleClockCycle = 0,  /**< \brief 1 clock cycle for the MSB (standard) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   810      IfxEvadc_MsbConversionTime_doubleClockCycle = 1   /**< \brief 2 clock cycle for the MSB */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   811  } IfxEvadc_MsbConversionTime;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   812  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   813  /** \brief Reference Precharge Control
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   814   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   815  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   816  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   817      IfxEvadc_ReferencePrechargeControl_singleClockPhase  = 0, /**< \brief Precharge the reference input for 1 clock phase */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   818      IfxEvadc_ReferencePrechargeControl_singleClockPeriod = 1  /**< \brief Precharge the reference input for 1 clock period */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   819  } IfxEvadc_ReferencePrechargeControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   820  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   821  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   822  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   823      IfxEvadc_SpreadEarlySamplePointEMUXConversionsMode_nominal = 0,  /**< \brief Nominal sample timing */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   824      IfxEvadc_SpreadEarlySamplePointEMUXConversionsMode_spread  = 1   /**< \brief Spread sample timing, end of sample phase is varied */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   825  } IfxEvadc_SpreadEarlySamplePointEMUXConversionsMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   826  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   827  /** \brief Spread Early Sample Point for Standard Conversions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   828   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   829  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   830  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   831      IfxEvadc_SpreadEarlySamplePointStandardConversionsMode_nominal = 0,  /**< \brief Nominal sample timing */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   832      IfxEvadc_SpreadEarlySamplePointStandardConversionsMode_spread  = 1   /**< \brief Spread sample timing, end of sample phase is varied */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   833  } IfxEvadc_SpreadEarlySamplePointStandardConversionsMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   834  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   835  /** \brief The 0-1 transition of bit SUCAL initiates the start-up calibrationphase of
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   836   * all analog converters (except for the fast compare channels).
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   837   * Note: The start-up calibration will abort any running conversion
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   838   * and cannot be stopped before it is complete.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   839   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   840  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   841  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   842      IfxEvadc_StartupCalibration_noAction = 0,  /**< \brief No action */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   843      IfxEvadc_StartupCalibration_initiate = 1   /**< \brief Initiate the start-up calibration phase
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   844                                                  * (indication in bit GxARBCFG.CAL) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   845  } IfxEvadc_StartupCalibration;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   846  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   847  /** \brief Adjusts the analog circuitry to the supply voltage used in the application
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   848   * system. Make sure to keep SUPLEV = 0b00 or 0b01 in the case of a 5 V supply.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   849   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   850  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   851  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   852      IfxEvadc_SupplyVoltageLevelControl_automaticControl = 0,  /**< \brief Automatic control: voltage range is controlled by the power supply */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   853      IfxEvadc_SupplyVoltageLevelControl_upperVoltage     = 1,  /**< \brief Upper voltage range: assume a 5 V power supply is connected */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   854      IfxEvadc_SupplyVoltageLevelControl_lowerVoltage     = 2   /**< \brief Lower voltage range: assume a 3.3 V power supply is connected */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   855  } IfxEvadc_SupplyVoltageLevelControl;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   856  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   857  /** \brief Wait-for-Read Mode Enable
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   858   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   859  typedef enum
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   860  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   861      IfxEvadc_WaitForRead_overwriteMode = 0,  /**< \brief Overwrite Mode */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   862      IfxEvadc_WaitForRead_enabled       = 1   /**< \brief Wait-for-read mode enabled for this register */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   863  } IfxEvadc_WaitForRead;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   864  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   865  /** \addtogroup IfxLld_Evadc_Std_Global
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   866   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   867  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   868  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   869  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   870  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   871  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   872  /** \brief access function to enable/disable  wait for read mode for result registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   873   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   874   * \param resultIdx result register index
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   875   * \param enabled wait for read mode enabled/disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   876   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   877   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   878  IFX_INLINE void IfxEvadc_configureWaitForReadMode(Ifx_EVADC_G *group, uint32 resultIdx, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   879  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   880  /** \brief access function to enable/disable  wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   881   * \param evadc pointer to the EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   882   * \param enabled wait for read mode enabled/disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   883   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   884   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   885  IFX_INLINE void IfxEvadc_configureWaitForReadModeForGlobalResultRegister(Ifx_EVADC *evadc, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   886  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   887  /** \brief get the ADC Module  noise reduction level
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   888   * \param evadc pointer to EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   889   * \param inputClassNum Adc Module input Class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   890   * \return Adc input class noise reduction level
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   891   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   892  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getGlobalConversionMode(Ifx_EVADC *evadc, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   893  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   894  /** \brief return conversion result stored in the Global result Register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   895   * \param evadc pointer to the EVADC module
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   896   * \return global result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   897   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   898   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   899   * Ifx_EVADC* evadc = &MODULE_EVADC; // module pointer
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   900   * IfxEvadc_GroupId groupId = IfxEvadc_GroupId0; // for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   901   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   902   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   903   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   904   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   905   * IfxEvadc_configureWaitForReadModeForGlobalResultRegister(evadc, TRUE);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   906   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   907   * // enable all arbiter request sources
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   908   * adcGroupConfig.arbiter.requestSlotQueue0Enabled           = TRUE; // enable Queue0 mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   909   * // enable all gates in "always" mode (no edge detection)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   910   * adcGroupConfig.queueRequest[0].triggerConfig.gatingMode = IfxEvadc_GatingMode_always;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   911   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   912   * // Add channel to queue with refill enabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   913   *  IfxEvadc_Adc_addToQueue(&adcChannel, IFXEVADC_QUEUE_REFILL, IfxEvadc_RequestSource_queue0);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   914   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   915   *  // start the Queue
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   916   *  IfxEvadc_Adc_startQueue(&adcGroup, IfxEvadc_RequestSource_queue0);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   917   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   918   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   919   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   920   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   921   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   922   * Ifx_EVADC_GLOB.RES result;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   923   * result = IfxVadc_getGlobalResult (evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   924   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   925   * \endcode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   926   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   927   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   928  IFX_INLINE Ifx_EVADC_GLOB_RES IfxEvadc_getGlobalResult(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   929  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   930  /** \brief Get Sample Time in sec
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   931   * \param evadc Pointer to EVADC Module
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   932   * \param inputClassNum ADC Input Class Number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   933   * \param analogFrequency ADC module analog frequency in Hz
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   934   * \return ADC input class channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   935   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   936  IFX_INLINE float32 IfxEvadc_getGlobalSampleTime(Ifx_EVADC *evadc, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   937  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   938  /** \brief Get conversion result (Function does not care about the alignment)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   939   * value = raw * gain + offset.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   940   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   941   * \param resultIdx result register index
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   942   * \return scaled Conversion result
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   943   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   944   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   945   * Ifx_EVADC_G* group = &MODULE_EVADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   946   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   947   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   948   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   949   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   950   * IfxEvadc_configureWaitForReadMode(group,IfxEvadc_ChannelResult0, TRUE);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   951   * IfxEvadc_configureWaitForReadMode(group,IfxEvadc_ChannelResult1, TRUE);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   952   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   953   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   954   * // Add channel to queue with refill enabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   955   *  IfxEvadc_Adc_addToQueue(&adcChannel, IfxEvadc_RequestSource_queue0, IFXEVADC_QUEUE_REFILL);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   956   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   957   * // start the Queue
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   958   *  IfxEvadc_Adc_startQueue(&adcGroup, IfxEvadc_RequestSource_queue0);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   959   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   960   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   961   * // wait for conversion to finish
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   962   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   963   * // fetch the result of conversion from result register 0 for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   964   * Ifx_EVADC_G_RES result;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   965   * result = IfxEvadc_getResult(group, IfxEvadc_ChannelResult0);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   966   * \endcode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   967   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   968   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   969  IFX_INLINE Ifx_EVADC_G_RES IfxEvadc_getResult(Ifx_EVADC_G *group, uint32 resultIdx);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   970  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   971  /** \brief Sets the sample time in sec of ADC global class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   972   * \param evadc pointer to EVADC module registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   973   * \param groupInputClassNum group input class  number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   974   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   975   * \param sampleTime the requested sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   976   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   977   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   978  IFX_INLINE void IfxEvadc_setGlobalSampleTime(Ifx_EVADC *evadc, uint8 groupInputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   979  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   980  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   981  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   982  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   983  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   984  /** \brief Get conversion result (Function does not care about the alignment)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   985   * value = raw * gain + offset.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   986   * \param evadc EVADC module pointer
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   987   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   988   * \param channel channel Id
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   989   * \param sourceType type of request source
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   990   * \return scaled Conversion result
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   991   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   992   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   993   * Ifx_EVADC evadc;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   994   * evadc.evadc = &MODULE_EVADC;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   995   * Ifx_EVADC_G* group = &MODULE_EVADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   996   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   997   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   998   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	   999   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1000   * IfxEvadc_configureWaitForReadMode(group,IfxEvadc_ChannelResult0, TRUE);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1001   * IfxEvadc_configureWaitForReadMode(group,IfxEvadc_ChannelResult1, TRUE);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1002   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1003   * // Add channel to queue with refill enabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1004   *  IfxEvadc_Adc_addToQueue(&adcChannel, IfxEvadc_RequestSource_queue0, IFXEVADC_QUEUE_REFILL);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1005   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1006   * // start the Queue
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1007   *  IfxEvadc_Adc_startQueue(&adcGroup, IfxEvadc_RequestSource_queue0);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1008   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1009   * // fetch the result of conversion for channel 2 of group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1010   * Ifx_EVADC_G_RESresult2;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1011   * result = IfxEvadc_getResultBasedOnRequestSource(&evadc, group, IfxVadc_ChannelId2,IfxEvadc_RequestSource_queue0 );
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1012   * Ifx_EVADC_G_RESresult5;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1013   * result = IfxEvadc_getResultBasedOnRequestSource(&evadc, group, IfxEvadc_ChannelId5,IfxEvadc_RequestSource_queue0 );
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1014   * \endcode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1015   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1016   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1017  IFX_EXTERN Ifx_EVADC_G_RES IfxEvadc_getResultBasedOnRequestSource(Ifx_EVADC *evadc, Ifx_EVADC_G *group, IfxEvadc_ChannelId channel, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1018  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1019  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1020  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1021  /** \addtogroup IfxLld_Evadc_Std_QueueRequest
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1022   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1023  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1024  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1025  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1026  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1027  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1028  /** \brief Clears all the queue entries including backup stage.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1029   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1030   * \param flushQueue Whether queue is cleared or not.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1031   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1032   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1033   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1034  IFX_INLINE void IfxEvadc_clearQueue(Ifx_EVADC_G *evadcG, boolean flushQueue, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1035  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1036  /** \brief Starts a queue of a group by generating a trigger event through software
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1037   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1038   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1039   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1040   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1041  IFX_INLINE void IfxEvadc_startQueue(Ifx_EVADC_G *group, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1042  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1043  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1044  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1045  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1046  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1047  /** \brief Add an entry to the queue of a group for the specified channel with the following options set:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1048   * refill incase of aborted conversion
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1049   * source interrupt enable/disable
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1050   * external trigger control of the aborted conversion
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1051   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1052   * \param channel specifies channel Id
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1053   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1054   * \param options specifies the refill, source interrupt enable/disable and external trigger control selection
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1055   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1056   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1057   * For coding example see: \ref IfxEvadc_Adc_getResult
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1058   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1059   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1060  IFX_EXTERN void IfxEvadc_addToQueue(Ifx_EVADC_G *group, IfxEvadc_ChannelId channel, IfxEvadc_RequestSource sourceType, uint32 options);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1061  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1062  /** \brief Disables the external trigger.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1063   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1064   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1065   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1066   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1067  IFX_EXTERN void IfxEvadc_disableQueueSlotExternalTrigger(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1068  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1069  /** \brief Enables the external trigger.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1070   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1071   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1072   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1073   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1074  IFX_EXTERN void IfxEvadc_enableQueueSlotExternalTrigger(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1075  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1076  /** \brief Gets the requested queue slot gating mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1077   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1078   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1079   * \return requested queue0 slot gating mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1080   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1081  IFX_EXTERN IfxEvadc_GatingMode IfxEvadc_getQueueSlotGatingMode(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1082  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1083  /** \brief Gets the requested queue slot gating input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1084   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1085   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1086   * \return requested queue0 slot gating input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1087   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1088  IFX_EXTERN IfxEvadc_GatingSource IfxEvadc_getQueueSlotGatingSource(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1089  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1090  /** \brief Gets the request queue slot priority.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1091   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1092   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1093   * \return requested queue0 slot priority.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1094   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1095  IFX_EXTERN IfxEvadc_RequestSlotPriority IfxEvadc_getQueueSlotPriority(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1096  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1097  /** \brief Gets the requested queue slot start mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1098   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1099   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1100   * \return requested queue slot start mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1101   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1102  IFX_EXTERN IfxEvadc_RequestSlotStartMode IfxEvadc_getQueueSlotStartMode(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1103  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1104  /** \brief Gets the requested queue slot trigger input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1105   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1106   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1107   * \return requested queue slot trigger input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1108   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1109  IFX_EXTERN IfxEvadc_TriggerSource IfxEvadc_getQueueSlotTriggerInput(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1110  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1111  /** \brief Gets the requested queue slot trigger mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1112   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1113   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1114   * \return requested queue slot trigger mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1115   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1116  IFX_EXTERN IfxEvadc_TriggerMode IfxEvadc_getQueueSlotTriggerMode(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1117  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1118  /** \brief Gives the status of the Queue of a group by returning non zero value if the Queue is full
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1119   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1120   * \param sourceType sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1121   * \return status of the Queue
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1122   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1123   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1124   * Ifx_EVADC_G* group = &MODULE_EVADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1125   * boolean queueFull = (IfxEvadc_getQueueStatus(group)==IfxEvadc_Status_queueFull)?TRUE:FALSE; // get Queue status for group 0
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1126   * \endcode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1127   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1128   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1129  IFX_EXTERN IfxEvadc_Status IfxEvadc_getQueueStatus(Ifx_EVADC_G *group, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1130  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1131  /** \brief Returns the queue slot requested status.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1132   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1133   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1134   * \return TRUE if queue slot request enabled otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1135   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1136  IFX_EXTERN boolean IfxEvadc_isRequestQueueSlotEnabled(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1137  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1138  /** \brief Sets the gating configurations.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1139   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1140   * \param gatingSource gate input for group.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1141   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1142   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1143   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1144   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1145  IFX_EXTERN void IfxEvadc_setQueueSlotGatingConfig(Ifx_EVADC_G *evadcG, IfxEvadc_GatingSource gatingSource, IfxEvadc_GatingMode gatingMode, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1146  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1147  /** \brief Sets the trigger operating configurations.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1148   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1149   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1150   * \param triggerSource trigger input for group.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1151   * \param sourceType Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1152   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1153   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1154  IFX_EXTERN void IfxEvadc_setQueueSlotTriggerOperatingConfig(Ifx_EVADC_G *evadcG, IfxEvadc_TriggerMode triggerMode, IfxEvadc_TriggerSource triggerSource, IfxEvadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1155  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1156  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1157  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1158  /** \addtogroup IfxLld_Evadc_Std_IO
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1159   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1160  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1161  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1162  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1163  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1164  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1165  /** \brief Initializes a EMUX output
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1166   * \param emux the Emux Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1167   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1168   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1169   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1170   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1171  IFX_INLINE void IfxEvadc_initEmuxPin(const IfxEvadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1172  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1173  /** \brief Initializes a GxBFL output
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1174   * \param gxBfl the GxBFL Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1175   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1176   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1177   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1178   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1179  IFX_INLINE void IfxEvadc_initGxBflPin(const IfxEvadc_GxBfl_Out *gxBfl, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1180  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1181  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1182  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1183  /** \addtogroup IfxLld_Evadc_Std_Frequency
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1184   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1185  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1186  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1187  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1188  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1189  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1190  /** \brief Calculate the time using analog frequency.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1191   * \param analogFrequency analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1192   * \param sampleTime sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1193   * \return sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1194   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1195  IFX_INLINE uint32 IfxEvadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1196  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1197  /** \brief Returns the configured Fadci EVADC analog clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1198   * \param group pointer to the EVADC registers group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1199   * \return the configured Fadci EVADC analog clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1200   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1201  IFX_INLINE float32 IfxEvadc_getAdcAnalogFrequency(Ifx_EVADC_G *group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1202  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1203  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1204  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1205  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1206  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1207  /** \brief configured Fadcd EVADC digital clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1208   * \param evadc pointer to the base of EVADC registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1209   * \return the configured Fadcd EVADC digital clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1210   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1211  IFX_EXTERN float32 IfxEvadc_getAdcDigitalFrequency(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1212  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1213  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1214  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1215  /** \addtogroup IfxLld_Evadc_Std_Group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1216   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1217  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1218  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1219  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1220  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1221  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1222  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1223   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1224   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1225   * \param delay Selects an additional clock cycle for the conversion step of the MSB
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1228  IFX_INLINE void IfxEvadc_setAnalogClockSynchronizationDelay(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_AnalogClockSynchronizationDelay delay);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1229  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1230  /** \brief Select calibration sample time in units of t_ADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1231   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1232   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1233   * \param mode Select calibration sample time in units of t_ADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1234   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1235   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1236  IFX_INLINE void IfxEvadc_setCalibrationSampleTime(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_CalibrationSampleTimeControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1237  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1238  /** \brief Clears the all group requests.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1239   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1242  IFX_INLINE void IfxEvadc_clearAllResultRequests(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1243  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1244  /** \brief Gets the EVADC input class channel conversion mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1245   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1246   * \param inputClassNum EVADC input class number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1247   * \return EVADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1248   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1249  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1250  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1251  /** \brief Get conversion result for the group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1252   * \param group pointer to the EVADC group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1253   * \param results pointer to scaled conversion results
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1254   * \param resultOffset offset for the first result
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1255   * \param numResults number of results
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1256   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1257   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1258   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1259   * Here,Three channels are used for queued transfers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1260   * \code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1261   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1262   * unsigned savedGate = adcGroup.module.evadc->G[adcGroup.groupId].Queue0.QMR0.B.ENGT;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1263   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1264   * // IMPORTANT: for deterministic results we have to disable the queue gate
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1265   * // while filling the queue, otherwise results could be output in the wrong order
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1266   * adcGroup.module.evadc->G[adcGroup.groupId].Queue0.QMR0.B.ENGT = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1267   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1268   * // create channel config
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1269   * IfxEvadc_Adc_ChannelConfig adcChannelConfig[3];
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1270   * IfxEvadc_Adc_Channel adcChannel[3];
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1271   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1272   * for(int chnIx=0; chnIx<3; ++chnIx) {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1273   * IfxEvadc_Adc_initChannelConfig(&adcChannelConfig[chnIx], &adcGroup);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1274   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1275   * adcChannelConfig[chnIx].channelId = (IfxEvadc_ChannelId)(chnIx);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1276   * adcChannelConfig[chnIx].resultRegister = IfxEvadc_ChannelResult_1; // use result register #1 for all channels
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1277   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1278   * // initialize the channel
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1279   * IfxEvadc_Adc_initChannel(&adcChannel[chnIx], &adcChannelConfig[chnIx]);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1280   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1281   * // Add channel to queue with refill enabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1282   * IfxEvadc_Adc_addToQueue(&adcChannel[chnIx], IfxEvadc_RequestSource_queue0, IFXEVADC_QUEUE_REFILL);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1283   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1284   * // restore previous gate config
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1285   * adcGroup.module.evadc->G[adcGroup.groupId].Queue0.QMR0.B.ENGT = savedGate;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1286   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1287   * // start the Queue
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1288   * IfxEvadc_Adc_startQueue(&adcGroup,IfxEvadc_RequestSource_queue0); // just for the case that somebody copy&pastes the code - the queue has already been started in previous test
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1289   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1290   * Ifx_EVADC_G_RES results[10];
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1291   * result = IfxEvadc_getGroupResult(group, results, 0, 2);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1292   * \endcode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1293   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1294   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1295  IFX_INLINE void IfxEvadc_getGroupResult(Ifx_EVADC_G *group, Ifx_EVADC_G_RES *results, uint32 resultOffset, uint32 numResults);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1296  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1297  /** \brief Gets the EVADC input class channel sample time.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1298   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1299   * \param inputClassNum ADC input class number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1300   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1301   * \return ADC input class channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1302   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1303  IFX_INLINE float32 IfxEvadc_getGroupSampleTime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1304  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1305  /** \brief Gets the configured master index.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1306   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1307   * \return configured master kernel index.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1308   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1309  IFX_INLINE uint8 IfxEvadc_getMasterIndex(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1310  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1311  /** \brief Selects the chargingmode/voltage level in idle mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1312   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1313   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1314   * \param mode 0 - No precharge, the sampling capacitor keeps the current charge
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1315   * 1 - The sampling capacitor is precharged to approx. half the reference when idle
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1316   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1317   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1318  IFX_INLINE void IfxEvadc_selectIdlePrechargeLevel(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_IdlePrecharge mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1319  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1320  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1321   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1322   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1323   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1324   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1325  IFX_INLINE void IfxEvadc_enableInputBuffer(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1326  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1327  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1328   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1329   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1330   * \param duration Selects the amount of time for reference input precharging
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1331   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1332   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1333  IFX_INLINE void IfxEvadc_setReferencePrechargeDuration(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_ReferencePrechargeControl duration);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1334  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1335  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1336   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1337   * \param group EVADC Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1338   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1339   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1340  IFX_INLINE void IfxEvadc_enableReferencePrecharge(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1341  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1342  /** \brief Resets the ADC group.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1343   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1344   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1345   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1346  IFX_INLINE void IfxEvadc_resetGroup(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1347  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1348  /** \brief Selects whether sample synchronization must be performed or not.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1349   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1350   * \param group Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1351   * \param mode Sample Synchronization Options
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1352   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1353   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1354  IFX_INLINE void IfxEvadc_setSampleSynchronizationMode(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_SampleSynchronization mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1355  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1356  /** \brief Selects an additional clock cycle for the conversion step of the MSB.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1357   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1358   * \param group EVADC Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1359   * \param mode Selects an single or double clock cycle(s) for the conversion step of the MSB
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1360   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1361   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1362  IFX_INLINE void IfxEvadc_selectDoubleClockForMSBConversion(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_MsbConversionTime mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1363  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1364  /** \brief Sets analog converter group number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1365   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1366   * \param analogConverterMode group analog converter mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1367   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1368   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1369  IFX_INLINE void IfxEvadc_setAnalogConvertControl(Ifx_EVADC_G *evadcG, IfxEvadc_AnalogConverterMode analogConverterMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1370  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1371  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1372   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1373   * \param inputClassNum Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1374   * \param mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1375   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1376   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1377  IFX_INLINE void IfxEvadc_setAnalogInputPrechargeControlEMUX(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_AnalogInputPrechargeControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1378  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1379  /** \brief Analog Input Precharge Control for Standard Conversions
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1380   * Buffer must be enabled by GxANCFG.B.BE = 1
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1381   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1382   * \param inputClassNum Class No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1383   * \param mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1384   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1385   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1386  IFX_INLINE void IfxEvadc_setAnalogInputPrechargeControlStandard(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_AnalogInputPrechargeControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1387  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1388  /** \brief Sets the ADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1389   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1390   * \param inputClassNum input class number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1391   * \param conversionMode ADC input class channel Conversion Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1392   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1393   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1394  IFX_INLINE void IfxEvadc_setGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_ChannelNoiseReduction conversionMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1395  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1396  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1397   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1398   * \param inputClassNum Class No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1399   * \param conversionMode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1400   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1401   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1402  IFX_INLINE void IfxEvadc_setGroupConversionModeEMUX(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_ChannelNoiseReductionEMUX conversionMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1403  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1404  /** \brief Sets the ADC input class sample time ticks.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1405   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1406   * \param inputClassNum input class number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1407   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1408   * \param sampleTime request sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1409   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1410   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1411  IFX_INLINE void IfxEvadc_setGroupSampleTime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1412  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1413  /** \brief Set the additional number of cycles(in addition to 2) in sample time.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1414   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1415   * \param inputClassNum Class No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1416   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1417   * \param sampleTime request sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1418   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1419   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1420  IFX_INLINE void IfxEvadc_setGroupSampleTimeEMUX(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1421  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1422  /** \brief Sets the master index.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1423   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1424   * \param masterIndex master index.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1425   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1426   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1427  IFX_INLINE void IfxEvadc_setMasterIndex(Ifx_EVADC_G *evadcG, uint8 masterIndex);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1428  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1429  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1430   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1431   * \param inputClassNum Class No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1432   * \param mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1433   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1434   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1435  IFX_INLINE void IfxEvadc_spreadEarlySamplePointEMUXConversions(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_SpreadEarlySamplePointEMUXConversionsMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1436  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1437  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1438   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1439   * \param inputClassNum Class No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1440   * \param mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1441   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1442   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1443  IFX_INLINE void IfxEvadc_spreadEarlySamplePointStandardConversions(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_SpreadEarlySamplePointStandardConversionsMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1444  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1445  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1446  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1447  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1448  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1449  /** \brief Sets the Arbiter slot configurations.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1450   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1451   * \param slotEnable enable/disable of slot.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1452   * \param prio channel request priority.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1453   * \param mode Channel Slot start mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1454   * \param slot channel slot Request source.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1455   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1456   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1457  IFX_EXTERN void IfxEvadc_setArbiterPriority(Ifx_EVADC_G *evadcG, boolean slotEnable, IfxEvadc_RequestSlotPriority prio, IfxEvadc_RequestSlotStartMode mode, IfxEvadc_RequestSource slot);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1458  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1459  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1460  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1461  /** \addtogroup IfxLld_Evadc_Std_Module
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1462   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1463  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1464  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1465  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1466  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1467  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1468  /** \brief Disable EVADC kernel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1469   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1470   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1471   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1472  IFX_INLINE void IfxEvadc_disableModule(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1473  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1474  /** \brief Disables the post calibration.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1475   * \param evadcG pointer to the base of EVADC Grroup registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1476   * \param group Index of the group.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1477   * \param enabled disable or not.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1478   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1479   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1480  IFX_INLINE void IfxEvadc_disablePostCalibration(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1481  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1482  /** \brief Enable EVADC kernel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1483   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1484   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1485   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1486  IFX_INLINE void IfxEvadc_enableModule(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1487  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1488  /** \brief gets ADC Calibration Flag CAL status.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1489   * \param evadc pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1490   * \param adcCalGroupNum ADC CAL group number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1491   * \return CAL group status.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1492   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1493  IFX_INLINE uint8 IfxEvadc_getAdcCalibrationActiveState(Ifx_EVADC *evadc, uint8 adcCalGroupNum);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1494  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1495  /** \brief Gets the global control configuration value.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1496   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1497   * \return global control configuration value.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1498   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1499  IFX_INLINE Ifx_EVADC_GLOBCFG IfxEvadc_getGlobalConfigValue(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1500  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1501  /** \brief Gives the SRC source address.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1502   * \param group Index of the group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1503   * \param index SRC number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1504   * \return SRC source address
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1505   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1506  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEvadc_getSrcAddress(IfxEvadc_GroupId group, IfxEvadc_SrcNr index);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1507  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1508  /** \brief get status of GLOBCFG.SUCAL Bit field
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1509   * \param evadc Pointer to EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1510   * \return status of GLOBCFG.SUCAL Bit field
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1511   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1512  IFX_INLINE boolean IfxEvadc_getStartupCalibrationStatus(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1513  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1514  /** \brief Initialises ADC converter clock.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1515   * \param evadc Pointer to EVADC  SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1516   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1517   * \param converterClockDivider ADC converter clock divider.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1518   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1519   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1520  IFX_INLINE void IfxEvadc_initialiseAdcConverterClock(Ifx_EVADC *evadc, Ifx_EVADC_G *evadcG, IfxEvadc_ClockDividerFactor converterClockDivider);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1521  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1522  /** \brief initiates the calibration pulse phase.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1523   * \param evadc pointer to the base of EVADC registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1524   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1525   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1526  IFX_INLINE void IfxEvadc_initiateStartupCalibration(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1527  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1528  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1529   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1530   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1531   * \param evadc Pointer to EVADC module registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1532   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1533   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1534  IFX_INLINE boolean IfxEvadc_isModuleSuspended(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1535  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1536  /** \brief Sets the channel conversion mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1537   * \param evadc pointer to EVADC module registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1538   * \param InputClassNum input class  number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1539   * \param conversionMode ADC conversion Mode. Improves the precision of conversion
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1540   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1541   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1542  IFX_INLINE void IfxEvadc_setGlobalConversionMode(Ifx_EVADC *evadc, uint8 InputClassNum, IfxEvadc_ChannelNoiseReduction conversionMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1543  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1544  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1545   * \param evadc pointer to EVADC registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1546   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1547   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1548   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1549  IFX_INLINE void IfxEvadc_setSleepMode(Ifx_EVADC *evadc, IfxEvadc_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1550  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1551  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1552   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1553   * \param evadc Pointer to EVADC module registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1554   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1555   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1556   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1557  IFX_INLINE void IfxEvadc_setSuspendMode(Ifx_EVADC *evadc, IfxEvadc_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1558  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1559  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1560  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1561  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1562  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1563  /** \brief Disable write access to the EVADC config/control registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1564   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1565   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be disabled.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1566   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1567   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1568  IFX_EXTERN void IfxEvadc_disableAccess(Ifx_EVADC *evadc, IfxEvadc_Protection protectionSet);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1569  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1570  /** \brief Enable write access to the EVADC config/control registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1571   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1572   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be enabled.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1573   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1574   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1575  IFX_EXTERN void IfxEvadc_enableAccess(Ifx_EVADC *evadc, IfxEvadc_Protection protectionSet);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1576  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1577  /** \brief ADC Module Frequency in Hz
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1578   * \param evadc Pointer to EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1579   * \return module frequency
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1580   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1581  IFX_EXTERN float32 IfxEvadc_getAdcModuleFrequency(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1582  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1583  /** \brief Configure the ADC analog clock.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1584   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1585   * \param fAdcI ADC analog clock clock frequency in Hz. Range = [5000000, 10000000].
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1586   * \param group Pointer to EVADC Group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1587   * \return ADC analog clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1588   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1589  IFX_EXTERN uint32 IfxEvadc_initializeFAdcI(Ifx_EVADC *evadc, uint32 fAdcI, Ifx_EVADC_G *group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1590  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1591  /** \brief Resets the kernel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1592   * \param evadc pointer to the  EVADC Module
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1593   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1594   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1595  IFX_EXTERN void IfxEvadc_resetModule(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1596  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1597  /** \brief Starts ADC calibration and wait for the end of the calibration process.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1598   * \param evadc pointer to the base of EVADC registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1599   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1600   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1601  IFX_EXTERN void IfxEvadc_startupCalibration(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1602  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1603  /** \brief SW workaround of EVADC Master/Slave conversion jitter issue(MCMETILLD-910)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1604   * \param evadc Pointer to EVADC module registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1605   * \return Used for detecting failure in either OCDS Debug Active State Activation or Trigger Line TL1 Activation or both.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1606   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1607  IFX_EXTERN boolean IfxEvadc_syncConvWorkAround(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1608  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1609  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1610  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1611  /** \addtogroup IfxLld_Evadc_Std_Channel
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1612   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1613  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1614  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1615  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1616  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1617  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1618  /** \brief Clears the channel request.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1619   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1620   * \param channelId channel id whose request to be cleared.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1621   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1622   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1623  IFX_INLINE void IfxEvadc_clearChannelRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelId);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1624  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1625  /** \brief Enables the FIFO mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1626   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1627   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1628   * \param fifoMode FIFO mode .
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1629   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1630   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1631  IFX_INLINE void IfxEvadc_enableFifoMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, IfxEvadc_FifoMode fifoMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1632  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1633  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1634   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1635   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1636   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1637   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1638  IFX_INLINE void IfxEvadc_enableServiceRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1639  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1640  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1641   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1642   * \param resultRegister
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1643   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1644   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1645  IFX_INLINE void IfxEvadc_disableServiceRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1646  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1647  /** \brief Gets the current ADC channel control configurations.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1648   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1649   * \param channelIndex EVADC channel number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1650   * \return current ADC channel control configuration.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1651   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1652  IFX_INLINE Ifx_EVADC_G_CHCTR IfxEvadc_getChannelControlConfig(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1653  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1654  /** \brief get channel Input class
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1655   * \param evadcG Pointer to EVADC Group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1656   * \param channelIndex Specifies channel Id
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1657   * \return Input class
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1658   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1659  IFX_INLINE IfxEvadc_InputClasses IfxEvadc_getChannelInputclass(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1660  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1661  /** \brief Gets the channel result service request node pointer 0.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1662   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1663   * \return channel result service request node pointer 0.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1664   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1665  IFX_INLINE Ifx_EVADC_G_REVNP0 IfxEvadc_getChannelResultServiceRequestNodePointer0(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1666  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1667  /** \brief Gets the channel result service request node pointer 1.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1668   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1669   * \return channel result service request node pointer 1.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1670   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1671  IFX_INLINE Ifx_EVADC_G_REVNP1 IfxEvadc_getChannelResultServiceRequestNodePointer1(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1672  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1673  /** \brief Gets the channel service request node pointer.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1674   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1675   * \return channel service request node pointer.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1676   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1677  IFX_INLINE Ifx_EVADC_G_CEVNP0 IfxEvadc_getChannelServiceRequestNodePointer0(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1678  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1679  /** \brief get the channel service request node pointer (CH8--CH15)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1680   * \param evadcG pointer to EVADC Group register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1681   * \return Channel service request node pointer for CH8 to CH15
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1682   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1683  IFX_INLINE Ifx_EVADC_G_CEVNP1 IfxEvadc_getChannelServiceRequestNodePointer1(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1684  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1685  /** \brief Selects boundary extension.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1686   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1687   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1688   * \param boundaryMode boundary extension mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1689   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1690   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1691  IFX_INLINE void IfxEvadc_setBoundaryMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_BoundaryExtension boundaryMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1692  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1693  /** \brief Sets the channel event service request line.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1694   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1695   * \param channelSrcNr channel event Service Node.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1696   * \param channel channel number.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1697   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1698   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1699  IFX_INLINE void IfxEvadc_setChannelEventNodePointer0(Ifx_EVADC_G *evadcG, IfxEvadc_SrcNr channelSrcNr, IfxEvadc_ChannelId channel);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1700  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1701  /** \brief set channel event node pointer(channel 8- channel 15)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1702   * \param evadcG pointer to the EVADC Group register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1703   * \param channelSrcNr service Request
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1704   * \param channel specifies channel ID
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1705   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1706   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1707  IFX_INLINE void IfxEvadc_setChannelEventNodePointer1(Ifx_EVADC_G *evadcG, IfxEvadc_SrcNr channelSrcNr, IfxEvadc_ChannelId channel);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1708  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1709  /** \brief Sets the channel input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1710   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1711   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1712   * \param inputClass channel input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1713   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1714   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1715  IFX_INLINE void IfxEvadc_setChannelInputClass(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_InputClasses inputClass);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1716  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1717  /** \brief Sets the channel event mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1718   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1719   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1720   * \param limitCheck channel event mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1721   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1722   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1723  IFX_INLINE void IfxEvadc_setChannelLimitCheckMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_LimitCheck limitCheck);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1724  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1725  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1726   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1727   * \param resultRegister
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1728   * \param mode 0b00 Standard data reduction (accumulation)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1729   * 0b01 Result filtering mode.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1730   * 0b10 Difference mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1731   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1732   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1733  IFX_INLINE void IfxEvadc_setDataModificationMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, IfxEvadc_DataModificationMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1734  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1735  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1736   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1737   * \param resultRegister Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1738   * \param mode Defines result values stored/accumulated for the final result.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1739   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1740   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1741  IFX_INLINE void IfxEvadc_setDataReductionControlMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, uint32 mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1742  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1743  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1744   * \param evadcG Pointer to EVADC SFRs of a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1745   * \param resultRegister
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1746   * \param mode 0b00 - Separate result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1747   * 0b01 - Part of a FIFO structure: copy each new valid result
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1748   * 0b10 - Maximum mode: copy new result if bigger
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1749   * 0b11 - Minimum mode: copy new result if smaller
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1750   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1751   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1752  IFX_INLINE void IfxEvadc_setFifoMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, IfxEvadc_FifoMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1753  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1754  /** \brief Sets group's lower boundary.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1755   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1756   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1757   * \param lowerBoundary group lower boundary.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1758   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1759   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1760  IFX_INLINE void IfxEvadc_setLowerBoundary(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_BoundarySelection lowerBoundary);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1761  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1762  /** \brief Selects the refernce input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1763   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1764   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1765   * \param reference reference input.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1766   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1767   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1768  IFX_INLINE void IfxEvadc_setReferenceInput(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_ChannelReference reference);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1769  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1770  /** \brief Sets result event node pointer 0.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1771   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1772   * \param resultSrcNr channel result event service node.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1773   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1774   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1775   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1776  IFX_INLINE void IfxEvadc_setResultNodeEventPointer0(Ifx_EVADC_G *evadcG, IfxEvadc_SrcNr resultSrcNr, IfxEvadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1777  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1778  /** \brief Sets result event node pointer 1.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1779   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1780   * \param resultSrcNr channel result event service node.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1781   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1782   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1783   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1784  IFX_INLINE void IfxEvadc_setResultNodeEventPointer1(Ifx_EVADC_G *evadcG, IfxEvadc_SrcNr resultSrcNr, IfxEvadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1785  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1786  /** \brief Sets result store position.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1787   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1788   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1789   * \param rightAlignedStorage result store position.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1790   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1791   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1792  IFX_INLINE void IfxEvadc_setResultPosition(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, boolean rightAlignedStorage);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1793  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1794  /** \brief Sets channel synchronization request.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1795   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1796   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1797   * \param synchonize whether channel synchronize or stand alone operation.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1798   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1799   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1800  IFX_INLINE void IfxEvadc_setSyncRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, boolean synchonize);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1801  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1802  /** \brief Sets group's upper boundary.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1803   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1804   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1805   * \param upperBoundary group upper boundary.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1806   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1807   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1808  IFX_INLINE void IfxEvadc_setUpperBoundary(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_BoundarySelection upperBoundary);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1809  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1810  /** \brief Sets the group result register.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1811   * \param evadcG pointer to EVADC group registers.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1812   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1813   * \param resultRegister result register for group result storage.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1814   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1815   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1816  IFX_INLINE void IfxEvadc_storeGroupResult(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1817  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1818  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1819  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1820  /** \addtogroup IfxLld_Evadc_Std_Emux
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1821   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1822  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1823  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1824  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1825  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1826  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1827  /** \brief get global input class conversion mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1828   * \param evadc Pointer to EVADC Module space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1829   * \param inputClassNum global input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1830   * \return External channel resolution for global input class
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1831   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1832  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getEmuxGlobalConversionMode(Ifx_EVADC *evadc, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1833  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1834  /** \brief get the external conversion mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1835   * \param evadcG Pointer to EVADC group register space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1836   * \param inputClassNum Adc input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1837   * \return Adc input class External channel conversion mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1838   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1839  IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getEmuxGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1840  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1841  /** \brief Gets the ADC input class sample time of external channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1842   * \param evadcG Pointer to Register Group space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1843   * \param inputClassNum ADC input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1844   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1845   * \return ADC input class external channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1846   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1847  IFX_INLINE float32 IfxEvadc_getEmuxGroupSampleTime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1848  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1849  /** \brief set the external conversion mode of Global class
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1850   * \param evadc pointer to EVADC Module space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1851   * \param inputClassNum Global Input Class Number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1852   * \param conversionMode External Channel resolution
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1853   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1854   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1855  IFX_INLINE void IfxEvadc_setEmuxGlobalConversionMode(Ifx_EVADC *evadc, uint8 inputClassNum, IfxEvadc_ChannelNoiseReduction conversionMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1856  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1857  /** \brief Sets the sample time of ADC global class for external channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1858   * \param evadc Pointer to EVADC Module space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1859   * \param inputClassNum Adc input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1860   * \param analogFrequency ADC analog Frequency in HZ
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1861   * \param sampleTime the requested sample time for input class in sec
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1862   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1863   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1864  IFX_INLINE void IfxEvadc_setEmuxGlobalSampleTime(Ifx_EVADC *evadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1865  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1866  /** \brief set the external channel conversion mode of ADC input class
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1867   * \param evadcG pointer to EVADC Group Register space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1868   * \param inputClassNum input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1869   * \param conversionMode input class external channel resolution
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1870   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1871   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1872  IFX_INLINE void IfxEvadc_setEmuxGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_ChannelNoiseReduction conversionMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1873  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1874  /** \brief Sets the ADC input class sample time for external channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1875   * \param evadcG Pointer to EVADC Group Register Space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1876   * \param inputClassNum input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1877   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1878   * \param sampleTime request sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1879   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1880   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1881  IFX_INLINE void IfxEvadc_setEmuxGroupSampletime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1882  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1883  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1884  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1885  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1886  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1887  /** \brief Configure external multiplexer mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1888   * \param evadc pointer to Module space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1889   * \param evadcG Pointer to EVADC group register space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1890   * \param mode External Multiplexer mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1891   * \param channels Specifies channel Id
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1892   * \param startChannel specifies the external channel value from which conversion to be carried out
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1893   * \param code Output the channel number in binary code/gray code
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1894   * \param sampleTimeControl specifies when to use a sample time for external channel
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1895   * \param channelSelectionStyle External Multiplexer Channel Selection Style
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1896   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1897   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1898  IFX_EXTERN void IfxEvadc_configExternalMultiplexerMode(Ifx_EVADC *evadc, Ifx_EVADC_G *evadcG, IfxEvadc_ExternalMultiplexerMode mode, uint8 channels, IfxEvadc_EmuxSelectValue startChannel, IfxEvadc_EmuxCodingScheme code, IfxEvadc_EmuxSampleTimeControl sampleTimeControl, IfxEvadc_ChannelSelectionStyle channelSelectionStyle);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1899  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1900  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1901  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1902  /** \addtogroup IfxLld_Evadc_Std_FastCompare
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1903   * \{ */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1904  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1905  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1906  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1907  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1908  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1909  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1910   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1911   * \param control Action to be taken on the BoundaryFlag(FCM.B.BFL)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1912   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1913   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1914  IFX_INLINE void IfxEvadc_setFastCompareBoundaryFlagSwControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagSwControl control);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1915  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1916  /** \brief Sets in FCM.B.BFI whether to use Boundary Flag(FCM.B.BFL) directly or in a inverted format
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1917   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1918   * \param mode Invert or not to invert the Boundary Flag(BFL)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1919   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1920   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1921  IFX_INLINE void IfxEvadc_setFastCompareBoundaryFlagInversion(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagInversionControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1922  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1923  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1924   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1925   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1926   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1927  IFX_INLINE void IfxEvadc_disableFastCompareBoundaryFlag(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1928  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1929  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1930   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1931   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1932   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1933  IFX_INLINE void IfxEvadc_enableFastCompareBoundaryFlag(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1934  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1935  /** \brief Enable/Disable sample timing synchronization
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1936   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1937   * \param mode Sample synchronization mode select
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1938   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1939   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1940  IFX_INLINE void IfxEvadc_enableFastCompareSampleSynchronization(Ifx_EVADC_FC *evadcFC, IfxEvadc_SampleSynchronization mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1941  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1942  /** \brief Setting the Reference Precharge Control for Fast Compare Channels in FCCTRL.B.RPC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1943   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1944   * \param duration Reference Precharge Control Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1945   *
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1946   * 0 - Precharge the reference input for 1 clock phase
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1947   * 1 - Precharge the reference input for 1 clock period (2 phases)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1948   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1949   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1950  IFX_INLINE void IfxEvadc_setFastCompareReferencePrechargeDuration(Ifx_EVADC_FC *evadcFC, IfxEvadc_ReferencePrechargeControl duration);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1951  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1952  /** \brief Get boundary flag status.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1953   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1954   * \return 0(FALSE) - Passive state : Result has not yet crossed the activation boundary, or selected gate signal is inactive, or this boundary flag is disabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1955   * 1(TRUE) - Active state:result has crossed the activation boundary
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1956   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1957  IFX_INLINE boolean IfxEvadc_getFastCompareBoundaryFlagStatus(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1958  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1959  /** \brief Returns current level of the selected trigger input
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1960   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1961   * \return Current level of the selected trigger input
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1962   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1963  IFX_INLINE boolean IfxEvadc_getFastCompareExternalTriggerLevelStatus(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1964  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1965  /** \brief Returns result for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1966   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1967   * \return Result for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1968   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1969  IFX_INLINE boolean IfxEvadc_getFastCompareResultStatus(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1970  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1971  /** \brief Indicates availability of a new result in bit FCM.B.FCR
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1972   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1973   * \return Returns value Indicating availability of a new result in bit FCM.B.FCR
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1974   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1975  IFX_INLINE boolean IfxEvadc_isFastCompareNewResultAvailable(Ifx_EVADC_FC *evadcFC);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1976  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1977  /** \brief Selects behaviour of Boundary Flag(BFL) wih respect to the value of FCR.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1978   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1979   * \param mode 0 - Set boundary flag BFL if result FCR = 1 (input above the defined band or compare value), clear if FCR = 0 (input below)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1980   * 1 - Set boundary flag BFL if result FCR = 0 (input below the defined band or compare value), clear if FCR = 1 (input above)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1981   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1982   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1983  IFX_INLINE void IfxEvadc_selectFastCompareBoundaryFlagActivationMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagActivationMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1984  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1985  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1986   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1987   * \param nodePointer Bounday Flag Node Pointers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1988   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1989   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1990  IFX_INLINE void IfxEvadc_selectFastCompareBoundaryFlagNodePointer(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagNodePointer nodePointer);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1991  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1992  /** \brief Sets the delay of the analog clock(in clock cycles) after the sync signal.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1993   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1994   * \param delay Defines the delay of the analog clock in clocks after the sync signal.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1995   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1996   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1997  IFX_INLINE void IfxEvadc_setFastCompareAnalogClockSynchronizationDelay(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareAnalogClockSynchronizationDelay delay);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1998  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  1999  /** \brief Set Analog Converter Control modes
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2000   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2001   * \param mode Analog Converter Control modes
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2002   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2003   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2004  IFX_INLINE void IfxEvadc_setFastCompareAnalogConverter(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareAnalogConverterControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2005  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2006  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2007   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2008   * \param mode Analog Input Precharge Enable for Fast Comparisons
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2009   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2010   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2011  IFX_INLINE void IfxEvadc_setFastCompareAnalogInputPrechargeControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_AnalogInputPrechargeControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2012  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2013  /** \brief Defines the frequency of the analog converter clock fADCI (base clock for
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2014   * conversion steps), derived from the peripheral clock: fADCI = fADC / divider
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2015   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2016   * \param divider Fast Compare Analog Internal Clock Divider factor
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2017   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2018   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2019  IFX_INLINE void IfxEvadc_setFastCompareAnalogInternalClockDivider(Ifx_EVADC_FC *evadcFC, IfxEvadc_ClockDividerFactor divider);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2020  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2021  /** \brief Sets the source of the value(s) in bitfield FCREF.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2022   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2023   * \param mode Defines the source of the value(s) in bitfield FCREF.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2024   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2025   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2026  IFX_INLINE void IfxEvadc_setFastCompareAutomaticUpdateMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareAutomaticUpdate mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2027  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2028  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2029   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2030   * \param mode Mode/criteria for generation of service requests
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2031   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2032   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2033  IFX_INLINE void IfxEvadc_setFastCompareChannelEventMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_ChannelEventMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2034  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2035  /** \brief Set external trigger polarity in FCCTRL.B.XTPOL
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2036   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2037   * \param mode 0 - Use selected input signal directly
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2038   * 1 - Invert selected input signal
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2039   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2040   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2041  IFX_INLINE void IfxEvadc_setFastCompareExternalTriggerPolarity(Ifx_EVADC_FC *evadcFC, IfxEvadc_ExternalTriggerPolarity mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2042  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2043  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2044   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2045   * \param mode Fast Compare Gate Operating Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2046   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2047   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2048  IFX_INLINE void IfxEvadc_setFastCompareGateOperatingMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_GateOperatingMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2049  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2050  /** \brief Ramp direction(up or down) settings
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2051   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2052   * \param rampDirection Ramp direction(up or down) settings
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2053   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2054   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2055  IFX_INLINE void IfxEvadc_setFastCompareRampDirection(Ifx_EVADC_FC *evadcFC, IfxEvadc_RampDirection rampDirection);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2056  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2057  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2058   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2059   * \param referenceValue The input level is compared to this value.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2060   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2061   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2062  IFX_INLINE void IfxEvadc_setFastCompareReferenceValue(Ifx_EVADC_FC *evadcFC, uint16 referenceValue);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2063  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2064  /** \brief Defines the basic run conditions of the fast compare channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2065   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2066   * \param mode Run mode of the fast compare channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2067   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2068   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2069  IFX_INLINE void IfxEvadc_setFastCompareRunControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareRunControl mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2070  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2071  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2072   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2073   * \param rampStartMode Defines the run conditions for the ramp generation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2074   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2075   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2076  IFX_INLINE void IfxEvadc_setFastCompareRunRampControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_RampRunControl rampStartMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2077  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2078  /** \brief Setting additional sample time in FCCTRL.B.STCF
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2079   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2080   * \param additionalCycles Number of additional clock cycles to be added to the minimum sample phase of 2 analog clock cycles
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2081   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2082   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2083  IFX_INLINE void IfxEvadc_setFastCompareSampleTimeControl(Ifx_EVADC_FC *evadcFC, uint8 additionalCycles);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2084  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2085  /** \brief Sets when to generate service requests
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2086   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2087   * \param mode Defines when to generate service requests
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2088   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2089   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2090  IFX_INLINE void IfxEvadc_setFastCompareServiceRequestGeneration(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareServiceRequestGeneration mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2091  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2092  /** \brief Sets the interval at which fast compare operations are triggered in steps of 16 * 1/fADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2093   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2094   * \param interval Defines the interval at which fast compare operations are triggered in steps of 16 * 1/f_ADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2095   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2096   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2097  IFX_INLINE void IfxEvadc_setFastCompareTriggerInterval(Ifx_EVADC_FC *evadcFC, uint8 interval);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2098  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2099  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2100   * \param evadcFC Pointer to EVADC register set for Fast Compare operation
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2101   * \param mode External Trigger Operating Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2102   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2103   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2104  IFX_INLINE void IfxEvadc_setFastCompareTriggerOperatingMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_TriggerOperatingMode mode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2105  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2106  /** \} */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2107  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2108  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2109  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2110  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2111  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2112  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2113   * \param evadcG Pointer to EVADC group register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2114   * \return analog function configuration value
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2115   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2116  IFX_INLINE Ifx_EVADC_G_ANCFG IfxEvadc_getAnalogFunctionConfiguration(Ifx_EVADC_G *evadcG);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2117  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2118  /** \brief Get the sample time of ADC global class for external channel.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2119   * \param evadc pointer to EVADC Module space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2120   * \param inputClassNum Adc input class number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2121   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2122   * \return ADC input class external channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2123   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2124  IFX_INLINE float32 IfxEvadc_getEmuxGlobalSampleTime(Ifx_EVADC *evadc, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2125  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2126  /** \brief Sets the Emux Interface for a particular group
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2127   * \param evadc Pointer to EVADC Module Space
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2128   * \param emuxInterface specifies the EmuxInterface
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2129   * \param group specifies the group ID
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2130   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2131   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2132  IFX_INLINE void IfxEvadc_setEmuxInterfaceForGroup(Ifx_EVADC *evadc, IfxEvadc_EmuxInterface emuxInterface, IfxEvadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2133  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2134  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2135   * \param evadcG Pointer to EVADC Group Registers
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2136   * \param group EVADC Group Number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2137   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2138   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2139  IFX_INLINE void IfxEvadc_disableReferencePrecharge(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2140  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2141  /**
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2142   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2143   * \param group EVADC Group No.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2144   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2145   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2146  IFX_INLINE void IfxEvadc_disableInputBuffer(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2147  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2148  /** \brief Return if the clock for EVADC modules is enabled
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2149   * \param evadc Pointer to EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2150   * \return Status (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2151   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2152  IFX_INLINE boolean IfxEvadc_isModuleEnabled(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2153  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2154  /** \brief Enable the startup calibaration phase
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2155   * \param evadc Pointer to EVADC
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2156   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2157   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2158  IFX_INLINE void IfxEvadc_enableStartupCalibration(Ifx_EVADC *evadc);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2159  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2160  /** \brief Enable the Queue Gating Mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2161   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2162   * \param queue Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2163   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2164   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2165   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2166  IFX_INLINE void IfxEvadc_selectQueueGatingMode(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource queue, IfxEvadc_GatingMode gatingMode);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2167  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2168  /** \brief Defines the channel number to be converted
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2169   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2170   * \param queue Request source Type(Queue 0,Queue 1,Queue 2)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2171   * \param channel Channel number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2172   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2173   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2174  IFX_INLINE void IfxEvadc_setChannelRequest(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource queue, IfxEvadc_ChannelId channel);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2175  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2176  /** \brief Sets the global input class registers, define the sample time and data conversion mode
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2177   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2178   * \param inputClassNum Input Class Number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2179   * \param value Value to be written
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2180   * \return None
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2181   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2182  IFX_INLINE void IfxEvadc_configureIclass(Ifx_EVADC_G *evadcG, uint8 inputClassNum, uint32 value);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2183  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2184  /** \brief Returns the pointer to the result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2185   * \param evadcG Pointer to EVADC Group SFRs
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2186   * \param channel Channel Number
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2187   * \return The address to the result register
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2188   */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2189  IFX_INLINE volatile uint32 *IfxEvadc_getResultRegisterAddress(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channel);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2190  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2191  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2192  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2193  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2194  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2195  IFX_INLINE void IfxEvadc_setAnalogClockSynchronizationDelay(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_AnalogClockSynchronizationDelay delay)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2196  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2197      IFX_UNUSED_PARAMETER(group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2198      evadcG->ANCFG.B.ACSD = delay;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2199  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2200  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2201  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2202  IFX_INLINE uint32 IfxEvadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2203  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2204      uint32 ticks = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2205  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2206      ticks = (uint32)(sampleTime * analogFrequency) - 2;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2207  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2208      if (ticks > 31)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2209      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2210          ticks = (ticks / 16) + 15;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2211      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2212  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2213      ticks = __minu(ticks, 0xFFu);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2214  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2215      return ticks;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2216  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2217  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2218  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2219  IFX_INLINE void IfxEvadc_setCalibrationSampleTime(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_CalibrationSampleTimeControl mode)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2220  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2221      IFX_UNUSED_PARAMETER(group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2222      evadcG->ANCFG.B.CALSTC = mode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2223  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2224  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2225  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2226  IFX_INLINE void IfxEvadc_clearAllResultRequests(Ifx_EVADC_G *evadcG)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2227  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2228      evadcG->REFCLR.U = 0x0000FFFFu;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2229  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2230  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2231  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2232  IFX_INLINE void IfxEvadc_clearChannelRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelId)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2233  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2234      evadcG->CEFCLR.U = 1 << channelId;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2235  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2236  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2237  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2238  IFX_INLINE void IfxEvadc_clearQueue(Ifx_EVADC_G *evadcG, boolean flushQueue, IfxEvadc_RequestSource sourceType)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2239  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2240      switch (sourceType)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2241      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2242      case IfxEvadc_RequestSource_queue0:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2243          evadcG->Q[0].QMR.B.FLUSH = flushQueue;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2244          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2245      case IfxEvadc_RequestSource_queue1:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2246          evadcG->Q[1].QMR.B.FLUSH = flushQueue;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2247          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2248      case IfxEvadc_RequestSource_queue2:
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2249          evadcG->Q[2].QMR.B.FLUSH = flushQueue;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2250          break;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2251      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2252  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2253  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2254  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2255  IFX_INLINE void IfxEvadc_configureWaitForReadMode(Ifx_EVADC_G *group, uint32 resultIdx, boolean enabled)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2256  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2257      group->RCR[resultIdx].B.WFR = enabled;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2258  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2259  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2260  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2261  IFX_INLINE void IfxEvadc_configureWaitForReadModeForGlobalResultRegister(Ifx_EVADC *evadc, boolean enabled)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2262  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2263      evadc->GLOB.RCR.B.WFR = enabled;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2264  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2265  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2266  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2267  IFX_INLINE void IfxEvadc_setFastCompareBoundaryFlagSwControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagSwControl control)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2268  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2269      evadcFC->FCBFL.B.BFS = control;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2270  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2271  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2272  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2273  IFX_INLINE void IfxEvadc_setFastCompareBoundaryFlagInversion(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagInversionControl mode)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2274  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2275      evadcFC->FCBFL.B.BFI = mode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2276  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2277  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2278  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2279  IFX_INLINE void IfxEvadc_disableFastCompareBoundaryFlag(Ifx_EVADC_FC *evadcFC)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2280  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2281      evadcFC->FCBFL.B.BFM = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2282  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2283  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2284  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2285  IFX_INLINE void IfxEvadc_disableModule(Ifx_EVADC *evadc)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2286  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2287      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2288  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2289      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2290      evadc->CLC.B.DISR = 1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2291      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2292  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2293  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2294  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2295  IFX_INLINE void IfxEvadc_disablePostCalibration(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, boolean enabled)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2296  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2297      IFX_UNUSED_PARAMETER(group);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2298      evadcG->ANCFG.B.DPCAL = enabled;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2299  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2300  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2301  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2302  IFX_INLINE void IfxEvadc_enableFastCompareBoundaryFlag(Ifx_EVADC_FC *evadcFC)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2303  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2304      evadcFC->FCBFL.B.BFM = 1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2305  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2306  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2307  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2308  IFX_INLINE void IfxEvadc_enableFastCompareSampleSynchronization(Ifx_EVADC_FC *evadcFC, IfxEvadc_SampleSynchronization mode)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2309  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2310      Ifx_EVADC_FC_FCM tempFCM;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2311      tempFCM.U       = evadcFC->FCM.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2312      tempFCM.B.FCMWC = 1;  /*Enabling write permission to FCM.B.SSE*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2313      tempFCM.B.SSE   = mode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2314      evadcFC->FCM.U  = tempFCM.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2315  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2316  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2317  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2318  IFX_INLINE void IfxEvadc_enableFifoMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, IfxEvadc_FifoMode fifoMode)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2319  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2320      evadcG->RCR[resultRegister].B.FEN = fifoMode;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2321  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2322  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2323  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2324  IFX_INLINE void IfxEvadc_enableModule(Ifx_EVADC *evadc)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2325  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2326      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2327  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2328      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2329      evadc->CLC.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2330      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2331  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2332  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2333  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2334  IFX_INLINE void IfxEvadc_enableServiceRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2335  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2336      evadcG->RCR[resultRegister].B.SRGEN = 1;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2337  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2338  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2339  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2340  IFX_INLINE void IfxEvadc_disableServiceRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2341  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2342      evadcG->RCR[resultRegister].B.SRGEN = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2343  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2344  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2345  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2346  IFX_INLINE void IfxEvadc_setFastCompareReferencePrechargeDuration(Ifx_EVADC_FC *evadcFC, IfxEvadc_ReferencePrechargeControl duration)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2347  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2348      Ifx_EVADC_FC_FCCTRL tempFCCTRL;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2349      tempFCCTRL.U      = evadcFC->FCCTRL.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2350      tempFCCTRL.B.CPWC = 1; /*Enabling write permission to FCCTRL.B.RPC*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2351      tempFCCTRL.B.RPE  = duration;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2352      evadcFC->FCCTRL.U = tempFCCTRL.U;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2353  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2354  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2355  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2356  IFX_INLINE float32 IfxEvadc_getAdcAnalogFrequency(Ifx_EVADC_G *group)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2357  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2358  #ifdef IFX_CFG_AURIX_SCUCCU_USED
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2359      return IfxScuCcu_getSpbFrequency() / (1U + group->ANCFG.B.DIVA);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2360  #else
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2361      return IfxScuCcu_getAdcFrequency() / (1U + group->ANCFG.B.DIVA);
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2362  #endif
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2363  }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2364  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2365  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2366  IFX_INLINE uint8 IfxEvadc_getAdcCalibrationActiveState(Ifx_EVADC *evadc, uint8 adcCalGroupNum)
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2367  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2368      uint8 status = 0;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.h	  2369      status = evadc->G[adcCalGroupNum].ARBCFG.B.CAL;
	extr.u	d15,d15,#4,#1
.L577:
	cmov	d0,d15,#1
	loop	a4,.L122
.L478:
	jne	d0,#0,.L121
.L832:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   635  }
	ret
.L464:
	
__IfxEvadc_startupCalibration_function_end:
	.size	IfxEvadc_startupCalibration,__IfxEvadc_startupCalibration_function_end-IfxEvadc_startupCalibration
.L308:
	; End of function
	
	.sdecl	'.text.IfxEvadc.IfxEvadc_syncConvWorkAround',code,cluster('IfxEvadc_syncConvWorkAround')
	.sect	'.text.IfxEvadc.IfxEvadc_syncConvWorkAround'
	.align	2
	
	.global	IfxEvadc_syncConvWorkAround

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   636  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   637  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   638  boolean IfxEvadc_syncConvWorkAround(Ifx_EVADC *evadc)
; Function IfxEvadc_syncConvWorkAround
.L194:
IfxEvadc_syncConvWorkAround:	.type	func

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   639  {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   640      volatile uint32 timeOut = 0;
	mov	d15,#0
	sub.a	a10,#8
.L578:
	st.w	[a10],d15
.L837:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   641  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   642      boolean         status  = 1; /* 0 = Operation failed.Used for detecting OCDS Debug Active State Activation failure & Trigger Line TL1 Activation failure. */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   643  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   644  /* get status of OCDS and trigger line TL1 by reading corresponding OCDS */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   645      if (MODULE_CBS.OSTATE.B.OEN == 0)
	lea	a15,0xf0000480
	ld.bu	d15,[a15]
.L838:
	mov	d2,#1
.L579:
	jnz.t	d15:0,.L124
.L839:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   646      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   647          MODULE_CBS.OEC.B.PAT = 0xA1;
	lea	a2,0xf0000478
	ld.w	d0,[a2]
.L840:
	mov	d15,#161
.L841:
	insert	d0,d0,d15,#0,#8
	st.w	[a2],d0
.L842:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   648          MODULE_CBS.OEC.B.PAT = 0x5E;
	ld.w	d0,[a2]
.L843:
	mov	d1,#94
.L844:
	insert	d0,d0,d1,#0,#8
	st.w	[a2],d0
.L845:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   649          MODULE_CBS.OEC.B.PAT = 0xA1;
	ld.w	d0,[a2]
.L846:
	insert	d15,d0,d15,#0,#8
	st.w	[a2],d15
.L847:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   650          MODULE_CBS.OEC.B.PAT = 0x5E;
	ld.w	d15,[a2]
.L848:
	insert	d15,d15,d1,#0,#8
	st.w	[a2],d15
.L124:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   651      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   652  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   653      timeOut = 20;
	mov	d15,#20
	st.w	[a10],d15
.L849:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   654  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   655      while (MODULE_CBS.OSTATE.B.OEN == 0 && (timeOut--) == 0)
	j	.L125
.L126:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   656      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   657          status = 0;
	mov	d2,#0
.L125:
	ld.bu	d15,[a15]
.L850:
	jnz.t	d15:0,.L127
.L851:
	ld.w	d15,[a10]
	ld.w	d0,[a10]
.L852:
	add	d0,#-1
	st.w	[a10],d0
.L853:
	jeq	d15,#0,.L126
.L127:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   658      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   659  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   660      evadc->OCS.U = 1 << IFX_EVADC_OCS_SUS_P_OFF |
	movh	d15,#4864
	st.w	[a4]40,d15
.L854:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   661                     3 << IFX_EVADC_OCS_SUS_OFF;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   662  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   663      timeOut = 20;
	mov	d15,#20
	st.w	[a10],d15
.L855:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   664  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   665      while (MODULE_CBS.TLS.B.TL1 == 0 && (timeOut--) == 0)
	lea	a2,0xf0000470
.L856:
	j	.L128
.L129:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   666      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   667          MODULE_CBS.TLC.B.TLSP1 = 0x3;         /* trigger line TL1 forced to active */
	ld.w	d15,0xf0000490
.L857:
	insert	d15,d15,#3,#4,#4
	st.w	0xf0000490,d15
.L128:
	ld.bu	d15,[a2]
.L858:
	jnz.t	d15:1,.L130
.L859:
	ld.w	d15,[a10]
	ld.w	d0,[a10]
.L860:
	add	d0,#-1
	st.w	[a10],d0
.L861:
	jeq	d15,#0,.L129
.L130:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   668      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   669  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   670      timeOut = 20;
	mov	d15,#20
	st.w	[a10],d15
.L862:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   671  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   672      while (MODULE_CBS.TLS.B.TL1 == 0 && (timeOut--) == 0)
	j	.L131
.L132:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   673      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   674          status = 0;
	mov	d2,#0
.L131:
	ld.bu	d15,[a2]
.L863:
	jnz.t	d15:1,.L133
.L864:
	ld.w	d15,[a10]
	ld.w	d0,[a10]
.L865:
	add	d0,#-1
	st.w	[a10],d0
.L866:
	jeq	d15,#0,.L132
.L133:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   675      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   676  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   677      timeOut = 200;
	mov	d15,#200
	st.w	[a10],d15

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   678  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   679      while (evadc->OCS.B.SUSSTA == 1 && (timeOut--) == 0)
.L134:
	ld.bu	d15,[a4]43
.L867:
	jz.t	d15:5,.L135
.L868:
	ld.w	d15,[a10]
	ld.w	d0,[a10]
.L869:
	add	d0,#-1
	st.w	[a10],d0
.L870:
	jeq	d15,#0,.L134
.L135:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   680      {}
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   681  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   682      /* For EVADC deactivate Soft Suspend Mode 1 */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   683      evadc->OCS.U = 1 << IFX_EVADC_OCS_SUS_P_OFF |
	movh	d15,#4096
	st.w	[a4]40,d15
.L871:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   684                     0 << IFX_EVADC_OCS_SUS_OFF;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   685  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   686      /* Recover status (the status before entering this routine) */
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   687  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   688      if (MODULE_CBS.TLS.B.TL1 == 0)            /* trigger line TL1 was not active */
	ld.bu	d15,[a2]
.L872:
	jnz.t	d15:1,.L136
.L873:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   689      {
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   690          MODULE_CBS.TLC.B.TLSP1 = 0x2;         /* trigger line TL1 forced inactive*/
	lea	a2,0xf0000490
	ld.w	d15,[a2]
.L874:
	insert	d15,d15,#2,#4,#4
	st.w	[a2],d15
.L875:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   691          MODULE_CBS.TLC.B.TLSP1 = 0x0;         /* trigger line TL1 unchanged (release forced inactive)*/
	ld.w	d15,[a2]
.L876:
	insert	d15,d15,#0,#4,#4
	st.w	[a2],d15
.L136:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   692      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   693  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   694      if (MODULE_CBS.OSTATE.B.OEN == 1)         /* OCDS is enabled*/
	ld.bu	d15,[a15]
.L877:
	jz.t	d15:0,.L137
.L878:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   695      {           /*disable OCDS*/
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   696          MODULE_CBS.OEC.B.DS = 1;
	ld.w	d15,0xf0000478
.L879:
	or	d15,d15,#256
	st.w	0xf0000478,d15
.L137:

; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   697      }
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   698  
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   699      return status;
; ..\0_Src\4_McHal\Tricore\Evadc\Std\IfxEvadc.c	   700  }
	ret
.L485:
	
__IfxEvadc_syncConvWorkAround_function_end:
	.size	IfxEvadc_syncConvWorkAround,__IfxEvadc_syncConvWorkAround_function_end-IfxEvadc_syncConvWorkAround
.L313:
	; End of function
	
	.calls	'IfxEvadc_configExternalMultiplexerMode','IfxEvadc_enableAccess'
	.calls	'IfxEvadc_configExternalMultiplexerMode','IfxEvadc_disableAccess'
	.calls	'IfxEvadc_disableAccess','IfxScuWdt_getSafetyWatchdogPassword'
	.calls	'IfxEvadc_disableAccess','IfxScuWdt_clearSafetyEndinit'
	.calls	'IfxEvadc_disableAccess','IfxScuWdt_setSafetyEndinit'
	.calls	'IfxEvadc_enableAccess','IfxScuWdt_getSafetyWatchdogPassword'
	.calls	'IfxEvadc_enableAccess','IfxScuWdt_clearSafetyEndinit'
	.calls	'IfxEvadc_enableAccess','IfxScuWdt_setSafetyEndinit'
	.calls	'IfxEvadc_getAdcDigitalFrequency','IfxScuCcu_getSourceFrequency'
	.calls	'IfxEvadc_getAdcModuleFrequency','IfxScuCcu_getSourceFrequency'
	.calls	'IfxEvadc_initializeFAdcI','IfxScuCcu_getSourceFrequency'
	.calls	'IfxEvadc_resetModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxEvadc_resetModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxEvadc_resetModule','IfxEvadc_enableAccess'
	.calls	'IfxEvadc_resetModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxEvadc_resetModule','IfxEvadc_disableAccess'
	.calls	'IfxEvadc_startupCalibration','IfxEvadc_enableAccess'
	.calls	'IfxEvadc_startupCalibration','IfxEvadc_disableAccess'
	.calls	'IfxEvadc_disableAccess','.cocofun_7'
	.calls	'IfxEvadc_disableAccess','.cocofun_8'
	.calls	'IfxEvadc_enableAccess','.cocofun_7'
	.calls	'IfxEvadc_enableAccess','.cocofun_8'
	.calls	'IfxEvadc_setQueueSlotGatingConfig','.cocofun_6'
	.calls	'IfxEvadc_setQueueSlotTriggerOperatingConfig','.cocofun_5'
	.calls	'IfxEvadc_addToQueue','',0
	.calls	'IfxEvadc_configExternalMultiplexerMode','',0
	.calls	'IfxEvadc_disableAccess','',0
	.calls	'.cocofun_8','',0
	.calls	'.cocofun_7','',0
	.calls	'IfxEvadc_disableQueueSlotExternalTrigger','',0
	.calls	'IfxEvadc_enableAccess','',0
	.calls	'IfxEvadc_enableQueueSlotExternalTrigger','',0
	.calls	'IfxEvadc_getAdcDigitalFrequency','',0
	.calls	'IfxEvadc_getAdcModuleFrequency','',0
	.calls	'IfxEvadc_getQueueSlotGatingMode','',0
	.calls	'IfxEvadc_getQueueSlotGatingSource','',0
	.calls	'IfxEvadc_getQueueSlotPriority','',0
	.calls	'IfxEvadc_getQueueSlotStartMode','',0
	.calls	'IfxEvadc_getQueueSlotTriggerInput','',0
	.calls	'IfxEvadc_getQueueSlotTriggerMode','',0
	.calls	'IfxEvadc_getQueueStatus','',0
	.calls	'IfxEvadc_getResultBasedOnRequestSource','',0
	.calls	'IfxEvadc_initializeFAdcI','',0
	.calls	'IfxEvadc_isRequestQueueSlotEnabled','',0
	.calls	'IfxEvadc_resetModule','',0
	.calls	'IfxEvadc_setArbiterPriority','',0
	.calls	'IfxEvadc_setQueueSlotGatingConfig','',0
	.calls	'.cocofun_6','',0
	.calls	'IfxEvadc_setQueueSlotTriggerOperatingConfig','',0
	.calls	'.cocofun_5','',0
	.calls	'IfxEvadc_startupCalibration','',0
	.extern	IfxScuWdt_clearCpuEndinit
	.extern	IfxScuWdt_clearSafetyEndinit
	.extern	IfxScuWdt_setCpuEndinit
	.extern	IfxScuWdt_setSafetyEndinit
	.extern	IfxScuWdt_getCpuWatchdogPassword
	.extern	IfxScuWdt_getSafetyWatchdogPassword
	.extern	IfxScuCcu_getSourceFrequency
	.calls	'IfxEvadc_syncConvWorkAround','',8
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L196:
	.word	146154
	.half	3
	.word	.L197
	.byte	4
.L195:
	.byte	1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L198
	.byte	2,1,1,3
	.word	168
	.byte	4
	.byte	'Ifx__jump_and_link',0,3,1,58,17,1,1,5
	.byte	'fun',0,1,58,43
	.word	171
	.byte	6,0,7
	.byte	'__fract',0,4,128,1
.L419:
	.byte	7
	.byte	'float',0,4,4,8
	.byte	'Ifx__float_to_fract',0,3,1,149,2,18
	.word	216
	.byte	1,1,5
	.byte	'a',0,1,149,2,44
	.word	228
	.byte	6,0,4
	.byte	'Ifx__stopPerfCounters',0,3,1,169,2,17,1,1,6,0,7
	.byte	'unsigned long long int',0,8,7,9
	.byte	'void',0,3
	.word	340
	.byte	8
	.byte	'__ld64',0,3,2,132,1,19
	.word	314
	.byte	1,1,5
	.byte	'addr',0,2,132,1,32
	.word	346
	.byte	6,0,4
	.byte	'__st64',0,3,2,140,1,17,1,1,5
	.byte	'addr',0,2,140,1,30
	.word	346
	.byte	5
	.byte	'value',0,2,140,1,43
	.word	314
	.byte	6,0,7
	.byte	'unsigned int',0,4,7,7
	.byte	'int',0,4,5
.L368:
	.byte	7
	.byte	'unsigned char',0,1,8,10
	.byte	'_Ifx_SRC_SRCR_Bits',0,4,68,16,4,11
	.byte	'SRPN',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	455
	.byte	2,6,2,35,1,11
	.byte	'SRE',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'TOS',0,1
	.word	455
	.byte	3,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	455
	.byte	2,0,2,35,1,11
	.byte	'ECC',0,1
	.word	455
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	455
	.byte	3,0,2,35,2,11
	.byte	'SRR',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'CLRR',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'SETR',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'IOV',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'IOVCLR',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'SWS',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'SWSCLR',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	455
	.byte	1,0,2,35,3,0,12,4,93,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	472
	.byte	4,2,35,0,0,14
	.word	762
	.byte	3
	.word	801
	.byte	4
	.byte	'IfxSrc_clearRequest',0,3,3,247,1,17,1,1,5
	.byte	'src',0,3,247,1,60
	.word	806
	.byte	6,0,7
	.byte	'unsigned int',0,4,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,6,238,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	854
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	854
	.byte	16,0,2,35,0,0,12,6,189,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	870
	.byte	4,2,35,0,0
.L435:
	.byte	7
	.byte	'unsigned short int',0,2,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,6,247,9,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	455
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1006
	.byte	16,0,2,35,2,0,12,6,197,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1028
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,6,135,10,16,4,11
	.byte	'AE',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	455
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	1006
	.byte	16,0,2,35,2,0,12,6,205,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1294
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU',0,6,136,17,25,12,13
	.byte	'CON0',0
	.word	966
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	1254
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	1485
	.byte	4,2,35,8,0,14
	.word	1525
	.byte	3
	.word	1588
	.byte	4
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,5,164,4,17,1,1,5
	.byte	'watchdog',0,5,164,4,65
	.word	1593
	.byte	5
	.byte	'password',0,5,164,4,82
	.word	1006
	.byte	6,0,4
	.byte	'IfxScuWdt_clearSafetyEndinitInline',0,3,5,197,4,17,1,1,5
	.byte	'password',0,5,197,4,59
	.word	1006
	.byte	6,0,4
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,5,144,5,17,1,1,5
	.byte	'watchdog',0,5,144,5,63
	.word	1593
	.byte	5
	.byte	'password',0,5,144,5,80
	.word	1006
	.byte	6,0,4
	.byte	'IfxScuWdt_setSafetyEndinitInline',0,3,5,177,5,17,1,1,5
	.byte	'password',0,5,177,5,57
	.word	1006
	.byte	6,0,8
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,5,220,4,19
	.word	1006
	.byte	1,1,5
	.byte	'watchdog',0,5,220,4,74
	.word	1593
	.byte	6,0,8
	.byte	'IfxScuWdt_getSafetyWatchdogPasswordInline',0,3,5,129,5,19
	.word	1006
	.byte	1,1,6,0,10
	.byte	'_Ifx_P_OUT_Bits',0,8,145,3,16,4,11
	.byte	'P0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1006
	.byte	16,0,2,35,2,0,12,8,171,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2003
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMR_Bits',0,8,171,2,16,4,11
	.byte	'PS0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'PCL0',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	455
	.byte	1,0,2,35,3,0,12,8,251,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2319
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ID_Bits',0,8,133,1,16,4,11
	.byte	'MODREV',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	455
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	1006
	.byte	16,0,2,35,2,0,12,8,155,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2890
	.byte	4,2,35,0,0,15,4
	.word	455
	.byte	16,3,0,10
	.byte	'_Ifx_P_IOCR0_Bits',0,8,163,1,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	3,5,2,35,0,11
	.byte	'PC0',0,1
	.word	455
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	455
	.byte	3,5,2,35,1,11
	.byte	'PC1',0,1
	.word	455
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	455
	.byte	3,5,2,35,2,11
	.byte	'PC2',0,1
	.word	455
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	455
	.byte	3,5,2,35,3,11
	.byte	'PC3',0,1
	.word	455
	.byte	5,0,2,35,3,0,12,8,171,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3019
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR4_Bits',0,8,189,1,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	3,5,2,35,0,11
	.byte	'PC4',0,1
	.word	455
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	455
	.byte	3,5,2,35,1,11
	.byte	'PC5',0,1
	.word	455
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	455
	.byte	3,5,2,35,2,11
	.byte	'PC6',0,1
	.word	455
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	455
	.byte	3,5,2,35,3,11
	.byte	'PC7',0,1
	.word	455
	.byte	5,0,2,35,3,0,12,8,187,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3234
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR8_Bits',0,8,202,1,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	3,5,2,35,0,11
	.byte	'PC8',0,1
	.word	455
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	455
	.byte	3,5,2,35,1,11
	.byte	'PC9',0,1
	.word	455
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	455
	.byte	3,5,2,35,2,11
	.byte	'PC10',0,1
	.word	455
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	455
	.byte	3,5,2,35,3,11
	.byte	'PC11',0,1
	.word	455
	.byte	5,0,2,35,3,0,12,8,195,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3449
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR12_Bits',0,8,176,1,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	3,5,2,35,0,11
	.byte	'PC12',0,1
	.word	455
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	455
	.byte	3,5,2,35,1,11
	.byte	'PC13',0,1
	.word	455
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	455
	.byte	3,5,2,35,2,11
	.byte	'PC14',0,1
	.word	455
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	455
	.byte	3,5,2,35,3,11
	.byte	'PC15',0,1
	.word	455
	.byte	5,0,2,35,3,0,12,8,179,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3666
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IN_Bits',0,8,141,1,16,4,11
	.byte	'P0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1006
	.byte	16,0,2,35,2,0,12,8,163,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3886
	.byte	4,2,35,0,0,15,24
	.word	455
	.byte	16,23,0,10
	.byte	'_Ifx_P_PDR0_Bits',0,8,212,3,16,4,11
	.byte	'PD0',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	455
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	455
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	455
	.byte	2,0,2,35,0,11
	.byte	'PD2',0,1
	.word	455
	.byte	2,6,2,35,1,11
	.byte	'PL2',0,1
	.word	455
	.byte	2,4,2,35,1,11
	.byte	'PD3',0,1
	.word	455
	.byte	2,2,2,35,1,11
	.byte	'PL3',0,1
	.word	455
	.byte	2,0,2,35,1,11
	.byte	'PD4',0,1
	.word	455
	.byte	2,6,2,35,2,11
	.byte	'PL4',0,1
	.word	455
	.byte	2,4,2,35,2,11
	.byte	'PD5',0,1
	.word	455
	.byte	2,2,2,35,2,11
	.byte	'PL5',0,1
	.word	455
	.byte	2,0,2,35,2,11
	.byte	'PD6',0,1
	.word	455
	.byte	2,6,2,35,3,11
	.byte	'PL6',0,1
	.word	455
	.byte	2,4,2,35,3,11
	.byte	'PD7',0,1
	.word	455
	.byte	2,2,2,35,3,11
	.byte	'PL7',0,1
	.word	455
	.byte	2,0,2,35,3,0,12,8,195,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4210
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PDR1_Bits',0,8,233,3,16,4,11
	.byte	'PD8',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'PL8',0,1
	.word	455
	.byte	2,4,2,35,0,11
	.byte	'PD9',0,1
	.word	455
	.byte	2,2,2,35,0,11
	.byte	'PL9',0,1
	.word	455
	.byte	2,0,2,35,0,11
	.byte	'PD10',0,1
	.word	455
	.byte	2,6,2,35,1,11
	.byte	'PL10',0,1
	.word	455
	.byte	2,4,2,35,1,11
	.byte	'PD11',0,1
	.word	455
	.byte	2,2,2,35,1,11
	.byte	'PL11',0,1
	.word	455
	.byte	2,0,2,35,1,11
	.byte	'PD12',0,1
	.word	455
	.byte	2,6,2,35,2,11
	.byte	'PL12',0,1
	.word	455
	.byte	2,4,2,35,2,11
	.byte	'PD13',0,1
	.word	455
	.byte	2,2,2,35,2,11
	.byte	'PL13',0,1
	.word	455
	.byte	2,0,2,35,2,11
	.byte	'PD14',0,1
	.word	455
	.byte	2,6,2,35,3,11
	.byte	'PL14',0,1
	.word	455
	.byte	2,4,2,35,3,11
	.byte	'PD15',0,1
	.word	455
	.byte	2,2,2,35,3,11
	.byte	'PL15',0,1
	.word	455
	.byte	2,0,2,35,3,0,12,8,203,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4514
	.byte	4,2,35,0,0,15,8
	.word	455
	.byte	16,7,0,10
	.byte	'_Ifx_P_ESR_Bits',0,8,111,16,4,11
	.byte	'EN0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1006
	.byte	16,0,2,35,2,0,12,8,147,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4839
	.byte	4,2,35,0,0,15,12
	.word	455
	.byte	16,11,0,10
	.byte	'_Ifx_P_PDISC_Bits',0,8,190,3,16,4,11
	.byte	'PDIS0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'PDIS2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'PDIS3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'PDIS4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'PDIS5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'PDIS6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'PDIS7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'PDIS8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'PDIS9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'PDIS10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'PDIS11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'PDIS12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'PDIS13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'PDIS14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'PDIS15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1006
	.byte	16,0,2,35,2,0,12,8,187,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5179
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PCSR_Bits',0,8,167,3,16,4,11
	.byte	'SEL0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'SEL1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'SEL2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'SEL3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'SEL4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'SEL5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'SEL6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'SEL7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'SEL8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'SEL9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'SEL10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'SEL11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'SEL12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'SEL13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'SEL14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'SEL15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1006
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	455
	.byte	1,0,2,35,3,0,12,8,179,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5545
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR0_Bits',0,8,230,2,16,4,11
	.byte	'PS0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,12,8,139,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5909
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR4_Bits',0,8,251,2,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	4,4,2,35,0,11
	.byte	'PS4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,12,8,155,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6056
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR8_Bits',0,8,134,3,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'PS8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	432
	.byte	20,0,2,35,0,0,12,8,163,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6225
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR12_Bits',0,8,240,2,16,4,11
	.byte	'reserved_0',0,2
	.word	1006
	.byte	12,4,2,35,0,11
	.byte	'PS12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1006
	.byte	16,0,2,35,2,0,12,8,147,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6397
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR0_Bits',0,8,128,2,16,4,11
	.byte	'reserved_0',0,2
	.word	1006
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	1006
	.byte	12,0,2,35,2,0,12,8,219,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6572
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR4_Bits',0,8,149,2,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	20,12,2,35,0,11
	.byte	'PCL4',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	455
	.byte	8,0,2,35,3,0,12,8,235,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6746
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR8_Bits',0,8,160,2,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	24,8,2,35,0,11
	.byte	'PCL8',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	455
	.byte	4,0,2,35,3,0,12,8,243,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6920
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR12_Bits',0,8,139,2,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	28,4,2,35,0,11
	.byte	'PCL12',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	455
	.byte	1,0,2,35,3,0,12,8,227,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7096
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR_Bits',0,8,208,2,16,4,11
	.byte	'PS0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1006
	.byte	16,0,2,35,2,0,12,8,131,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7252
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR_Bits',0,8,234,1,16,4,11
	.byte	'reserved_0',0,2
	.word	1006
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	455
	.byte	1,0,2,35,3,0,12,8,211,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7585
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR_Bits',0,8,215,1,16,4,11
	.byte	'REN_CTRL',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'RX_EN',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'TERM',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'LRXTERM',0,1
	.word	455
	.byte	3,2,2,35,0,11
	.byte	'LVDSM',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'PS',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'TEN_CTRL',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'TX_EN',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'VDIFFADJ',0,1
	.word	455
	.byte	2,4,2,35,1,11
	.byte	'VOSDYN',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'VOSEXT',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'TX_PD',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'TX_PWDPD',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1006
	.byte	16,0,2,35,2,0,12,8,203,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7933
	.byte	4,2,35,0,0,15,32
	.word	8213
	.byte	16,7,0,15,56
	.word	455
	.byte	16,55,0,10
	.byte	'_Ifx_P_ACCEN1_Bits',0,8,105,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,8,139,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8271
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ACCEN0_Bits',0,8,68,16,4,11
	.byte	'EN0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	455
	.byte	1,0,2,35,3,0,12,8,131,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8358
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P',0,8,220,5,25,128,2,13
	.byte	'OUT',0
	.word	2279
	.byte	4,2,35,0,13
	.byte	'OMR',0
	.word	2850
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	2970
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	3010
	.byte	4,2,35,12,13
	.byte	'IOCR0',0
	.word	3194
	.byte	4,2,35,16,13
	.byte	'IOCR4',0
	.word	3409
	.byte	4,2,35,20,13
	.byte	'IOCR8',0
	.word	3626
	.byte	4,2,35,24,13
	.byte	'IOCR12',0
	.word	3846
	.byte	4,2,35,28,13
	.byte	'reserved_20',0
	.word	3010
	.byte	4,2,35,32,13
	.byte	'IN',0
	.word	4161
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	4201
	.byte	24,2,35,40,13
	.byte	'PDR0',0
	.word	4474
	.byte	4,2,35,64,13
	.byte	'PDR1',0
	.word	4790
	.byte	4,2,35,68,13
	.byte	'reserved_48',0
	.word	4830
	.byte	8,2,35,72,13
	.byte	'ESR',0
	.word	5130
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	5170
	.byte	12,2,35,84,13
	.byte	'PDISC',0
	.word	5505
	.byte	4,2,35,96,13
	.byte	'PCSR',0
	.word	5869
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	4830
	.byte	8,2,35,104,13
	.byte	'OMSR0',0
	.word	6016
	.byte	4,2,35,112,13
	.byte	'OMSR4',0
	.word	6185
	.byte	4,2,35,116,13
	.byte	'OMSR8',0
	.word	6357
	.byte	4,2,35,120,13
	.byte	'OMSR12',0
	.word	6532
	.byte	4,2,35,124,13
	.byte	'OMCR0',0
	.word	6706
	.byte	4,3,35,128,1,13
	.byte	'OMCR4',0
	.word	6880
	.byte	4,3,35,132,1,13
	.byte	'OMCR8',0
	.word	7056
	.byte	4,3,35,136,1,13
	.byte	'OMCR12',0
	.word	7212
	.byte	4,3,35,140,1,13
	.byte	'OMSR',0
	.word	7545
	.byte	4,3,35,144,1,13
	.byte	'OMCR',0
	.word	7893
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	4830
	.byte	8,3,35,152,1,13
	.byte	'LPCR',0
	.word	8253
	.byte	32,3,35,160,1,13
	.byte	'reserved_C0',0
	.word	8262
	.byte	56,3,35,192,1,13
	.byte	'ACCEN1',0
	.word	8318
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	8885
	.byte	4,3,35,252,1,0,14
	.word	8925
	.byte	3
	.word	9495
	.byte	17,7,140,1,9,1,18
	.byte	'IfxPort_OutputMode_none',0,0,18
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,18
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,17,7,126,9,1,18
	.byte	'IfxPort_OutputIdx_general',0,128,1,18
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,18
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,18
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,18
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,18
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,18
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,18
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0,4
	.byte	'IfxPort_setPinModeOutput',0,3,7,163,5,17,1,1,5
	.byte	'port',0,7,163,5,49
	.word	9500
	.byte	5
	.byte	'pinIndex',0,7,163,5,61
	.word	455
	.byte	5
	.byte	'mode',0,7,163,5,90
	.word	9505
	.byte	5
	.byte	'index',0,7,163,5,114
	.word	9601
	.byte	6,0,17,7,187,1,9,4,18
	.byte	'IfxPort_State_notChanged',0,0,18
	.byte	'IfxPort_State_high',0,1,18
	.byte	'IfxPort_State_low',0,128,128,4,18
	.byte	'IfxPort_State_toggled',0,129,128,4,0,4
	.byte	'IfxPort_setPinState',0,3,7,169,5,17,1,1,5
	.byte	'port',0,7,169,5,44
	.word	9500
	.byte	5
	.byte	'pinIndex',0,7,169,5,56
	.word	455
	.byte	5
	.byte	'action',0,7,169,5,80
	.word	9914
	.byte	6,0,17,10,161,1,9,1,18
	.byte	'IfxCpu_ResourceCpu_0',0,0,18
	.byte	'IfxCpu_ResourceCpu_1',0,1,18
	.byte	'IfxCpu_ResourceCpu_2',0,2,18
	.byte	'IfxCpu_ResourceCpu_3',0,3,18
	.byte	'IfxCpu_ResourceCpu_4',0,4,18
	.byte	'IfxCpu_ResourceCpu_5',0,5,18
	.byte	'IfxCpu_ResourceCpu_none',0,6,0,8
	.byte	'IfxCpu_getCoreIndex',0,3,9,235,6,31
	.word	10095
	.byte	1,1,6,0,8
	.byte	'IfxCpu_areInterruptsEnabled',0,3,9,233,5,20
	.word	455
	.byte	1,1,6,0
.L356:
	.byte	7
	.byte	'unsigned long int',0,4,7,8
	.byte	'IfxCpu_getPerformanceCounter',0,3,9,255,6,19
	.word	10342
	.byte	1,1,5
	.byte	'address',0,9,255,6,55
	.word	1006
	.byte	6,0,8
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,9,156,7,20
	.word	455
	.byte	1,1,5
	.byte	'address',0,9,156,7,70
	.word	1006
	.byte	6,0,4
	.byte	'IfxCpu_updatePerformanceCounter',0,3,9,138,9,17,1,1,5
	.byte	'address',0,9,138,9,56
	.word	10342
	.byte	5
	.byte	'count',0,9,138,9,72
	.word	10342
	.byte	19,6,0,0,4
	.byte	'IfxScuCcu_wait',0,3,11,157,14,17,1,1,5
	.byte	'timeSec',0,11,157,14,40
	.word	228
	.byte	19,6,0,0
.L422:
	.byte	8
	.byte	'IfxScuCcu_getAdcFrequency',0,3,11,201,12,20
	.word	228
	.byte	1,1
.L423:
	.byte	6,0,8
	.byte	'IfxScuCcu_getStmFrequency',0,3,11,188,13,20
	.word	228
	.byte	1,1,6,0,8
	.byte	'IfxEvadc_calculateSampleTime',0,3,12,154,17,19
	.word	10342
	.byte	1,1,5
	.byte	'analogFrequency',0,12,154,17,56
	.word	228
	.byte	5
	.byte	'sampleTime',0,12,154,17,81
	.word	228
	.byte	6,0,10
	.byte	'_Ifx_EVADC_CLC_Bits',0,13,138,1,16,4,11
	.byte	'DISR',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,12,13,178,7,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10785
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_ID_Bits',0,13,226,6,16,4,11
	.byte	'MOD_REV',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'MOD_TYPE',0,1
	.word	455
	.byte	8,0,2,35,1,11
	.byte	'MOD_NUMBER',0,2
	.word	1006
	.byte	16,0,2,35,2,0,12,13,218,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10944
	.byte	4,2,35,0,0,15,28
	.word	455
	.byte	16,27,0,10
	.byte	'_Ifx_EVADC_OCS_Bits',0,13,128,7,16,4,11
	.byte	'TGS',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'TGB',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'TG_P',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	20,8,2,35,0,11
	.byte	'SUS',0,1
	.word	455
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	455
	.byte	2,0,2,35,3,0,12,13,250,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11080
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_KRSTCLR_Bits',0,13,249,6,16,4,11
	.byte	'CLR',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	432
	.byte	31,0,2,35,0,0,12,13,242,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11288
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_KRST1_Bits',0,13,242,6,16,4,11
	.byte	'RST',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	432
	.byte	31,0,2,35,0,0,12,13,234,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11396
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_KRST0_Bits',0,13,234,6,16,4,11
	.byte	'RST',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	432
	.byte	30,0,2,35,0,0,12,13,226,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11502
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_ACCEN0_Bits',0,13,68,16,4,11
	.byte	'EN0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	455
	.byte	1,0,2,35,3,0,12,13,146,7,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11627
	.byte	4,2,35,0,0,15,64
	.word	455
	.byte	16,63,0,10
	.byte	'_Ifx_EVADC_GLOBCFG_Bits',0,13,237,1,16,4,11
	.byte	'reserved_0',0,2
	.word	1006
	.byte	12,4,2,35,0,11
	.byte	'USC',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'SUPLEV',0,1
	.word	455
	.byte	2,1,2,35,1,11
	.byte	'CPWC',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1006
	.byte	15,1,2,35,2,11
	.byte	'SUCAL',0,1
	.word	455
	.byte	1,0,2,35,3,0,12,13,242,7,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12207
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_ACCPROT0_Bits',0,13,105,16,4,11
	.byte	'APCP',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'APCS',0,1
	.word	455
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	455
	.byte	4,0,2,35,1,11
	.byte	'APIP',0,1
	.word	455
	.byte	8,0,2,35,2,11
	.byte	'APIS',0,1
	.word	455
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	455
	.byte	4,0,2,35,3,0,12,13,154,7,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12389
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_ACCPROT1_Bits',0,13,116,16,4,11
	.byte	'APSP',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'APSS',0,1
	.word	455
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	455
	.byte	4,0,2,35,1,11
	.byte	'APRP',0,1
	.word	455
	.byte	8,0,2,35,2,11
	.byte	'APRS',0,1
	.word	455
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	455
	.byte	4,0,2,35,3,0,12,13,162,7,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12570
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_ACCPROT2_Bits',0,13,127,16,4,11
	.byte	'APF',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	455
	.byte	8,0,2,35,1,11
	.byte	'APGC',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'APEM',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'APTF',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,2
	.word	1006
	.byte	13,0,2,35,2,0,12,13,170,7,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12751
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_GLOB_ICLASS_Bits',0,13,147,2,16,4,11
	.byte	'STCS',0,1
	.word	455
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'AIPS',0,1
	.word	455
	.byte	2,0,2,35,0,11
	.byte	'CMS',0,1
	.word	455
	.byte	2,6,2,35,1,11
	.byte	'SESPS',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	455
	.byte	5,0,2,35,1,11
	.byte	'STCE',0,1
	.word	455
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'AIPE',0,1
	.word	455
	.byte	2,0,2,35,2,11
	.byte	'CME',0,1
	.word	455
	.byte	2,6,2,35,3,11
	.byte	'SESPE',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	455
	.byte	5,0,2,35,3,0,12,13,146,8,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12930
	.byte	4,2,35,0,0,15,8
	.word	13184
	.byte	16,1,0,15,16
	.word	455
	.byte	16,15,0,10
	.byte	'_Ifx_EVADC_GLOB_BOUND_Bits',0,13,248,1,16,4,11
	.byte	'BOUNDARY0',0,2
	.word	1006
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,1
	.word	455
	.byte	4,0,2,35,1,11
	.byte	'BOUNDARY1',0,2
	.word	1006
	.byte	12,4,2,35,2,11
	.byte	'reserved_28',0,1
	.word	455
	.byte	4,0,2,35,3,0,12,13,250,7,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13242
	.byte	4,2,35,0,0,15,36
	.word	455
	.byte	16,35,0,10
	.byte	'_Ifx_EVADC_GLOB_EFLAG_Bits',0,13,129,2,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'REVGLB',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,4
	.word	432
	.byte	15,8,2,35,0,11
	.byte	'REVGLBCLR',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	455
	.byte	7,0,2,35,3,0,12,13,130,8,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13413
	.byte	4,2,35,0,0,15,92
	.word	455
	.byte	16,91,0,10
	.byte	'_Ifx_EVADC_GLOB_EVNP_Bits',0,13,139,2,16,4,11
	.byte	'reserved_0',0,2
	.word	1006
	.byte	16,0,2,35,0,11
	.byte	'REV0NP',0,1
	.word	455
	.byte	4,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	1006
	.byte	12,0,2,35,2,0,12,13,138,8,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13602
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_GLOB_TF_Bits',0,13,207,2,16,4,11
	.byte	'CDCH',0,1
	.word	455
	.byte	4,4,2,35,0,11
	.byte	'CDGR',0,1
	.word	455
	.byte	4,0,2,35,0,11
	.byte	'CDEN',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'CDSEL',0,1
	.word	455
	.byte	2,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	455
	.byte	4,1,2,35,1,11
	.byte	'CDWC',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'PDD',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'MDPD',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'MDPU',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	455
	.byte	4,1,2,35,2,11
	.byte	'MDWC',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	455
	.byte	8,0,2,35,3,0,12,13,186,8,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13738
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_GLOB_TE_Bits',0,13,199,2,16,4,11
	.byte	'TFEP',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'TFES',0,1
	.word	455
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	432
	.byte	20,0,2,35,0,0,12,13,178,8,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14022
	.byte	4,2,35,0,0,15,152,2
	.word	455
	.byte	16,151,2,0,10
	.byte	'_Ifx_EVADC_GLOB_RCR_Bits',0,13,164,2,16,4,11
	.byte	'reserved_0',0,2
	.word	1006
	.byte	16,0,2,35,0,11
	.byte	'DRCTR',0,1
	.word	455
	.byte	4,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	455
	.byte	4,0,2,35,2,11
	.byte	'WFR',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	455
	.byte	6,1,2,35,3,11
	.byte	'SRGEN',0,1
	.word	455
	.byte	1,0,2,35,3,0,12,13,154,8,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14159
	.byte	4,2,35,0,0,15,124
	.word	455
	.byte	16,123,0,10
	.byte	'_Ifx_EVADC_GLOB_RES_Bits',0,13,175,2,16,4,11
	.byte	'RESULT',0,2
	.word	1006
	.byte	16,0,2,35,0,11
	.byte	'GNR',0,1
	.word	455
	.byte	4,4,2,35,2,11
	.byte	'CHNR',0,2
	.word	1006
	.byte	5,7,2,35,2,11
	.byte	'EMUX',0,1
	.word	455
	.byte	3,4,2,35,3,11
	.byte	'CRS',0,1
	.word	455
	.byte	2,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'VF',0,1
	.word	455
	.byte	1,0,2,35,3,0,12,13,162,8,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14357
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_GLOB_RESD_Bits',0,13,187,2,16,4,11
	.byte	'RESULT',0,2
	.word	1006
	.byte	16,0,2,35,0,11
	.byte	'GNR',0,1
	.word	455
	.byte	4,4,2,35,2,11
	.byte	'CHNR',0,2
	.word	1006
	.byte	5,7,2,35,2,11
	.byte	'EMUX',0,1
	.word	455
	.byte	3,4,2,35,3,11
	.byte	'CRS',0,1
	.word	455
	.byte	2,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'VF',0,1
	.word	455
	.byte	1,0,2,35,3,0,12,13,170,8,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14546
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_GLOB',0,13,139,11,25,228,5,13
	.byte	'ICLASS',0
	.word	13224
	.byte	8,2,35,0,13
	.byte	'reserved_8',0
	.word	13233
	.byte	16,2,35,8,13
	.byte	'BOUND',0
	.word	13364
	.byte	4,2,35,24,13
	.byte	'reserved_1C',0
	.word	13404
	.byte	36,2,35,28,13
	.byte	'EFLAG',0
	.word	13553
	.byte	4,2,35,64,13
	.byte	'reserved_44',0
	.word	13593
	.byte	92,2,35,68,13
	.byte	'EVNP',0
	.word	13698
	.byte	4,3,35,160,1,13
	.byte	'reserved_A4',0
	.word	11071
	.byte	28,3,35,164,1,13
	.byte	'TF',0
	.word	13982
	.byte	4,3,35,192,1,13
	.byte	'TE',0
	.word	14108
	.byte	4,3,35,196,1,13
	.byte	'reserved_C8',0
	.word	14148
	.byte	152,2,3,35,200,1,13
	.byte	'RCR',0
	.word	14308
	.byte	4,3,35,224,3,13
	.byte	'reserved_1E4',0
	.word	14348
	.byte	124,3,35,228,3,13
	.byte	'RES',0
	.word	14506
	.byte	4,3,35,224,4,13
	.byte	'reserved_264',0
	.word	14348
	.byte	124,3,35,228,4,13
	.byte	'RESD',0
	.word	14696
	.byte	4,3,35,224,5,0,14
	.word	14736
	.byte	15,108
	.word	455
	.byte	16,107,0,10
	.byte	'_Ifx_EVADC_EMUXSEL_Bits',0,13,148,1,16,4,11
	.byte	'EMUXGRP0',0,1
	.word	455
	.byte	4,4,2,35,0,11
	.byte	'EMUXGRP1',0,1
	.word	455
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,12,13,186,7,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15057
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_G_TRCTR_Bits',0,13,188,6,16,4,11
	.byte	'TSC',0,1
	.word	455
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	1006
	.byte	8,2,2,35,0,11
	.byte	'QACT',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'OV',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'TSCSET',0,1
	.word	455
	.byte	6,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	455
	.byte	2,0,2,35,2,11
	.byte	'ITSEL',0,1
	.word	455
	.byte	2,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	455
	.byte	2,4,2,35,3,11
	.byte	'SRDIS',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	455
	.byte	2,1,2,35,3,11
	.byte	'COV',0,1
	.word	455
	.byte	1,0,2,35,3,0,12,13,202,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15190
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_G_ARBCFG_Bits',0,13,250,2,16,4,11
	.byte	'ANONC',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	1006
	.byte	14,0,2,35,0,11
	.byte	'ANONS',0,1
	.word	455
	.byte	2,6,2,35,2,11
	.byte	'CSRC',0,1
	.word	455
	.byte	2,4,2,35,2,11
	.byte	'CHNR',0,2
	.word	1006
	.byte	5,7,2,35,2,11
	.byte	'SYNRUN',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	455
	.byte	2,4,2,35,3,11
	.byte	'CAL',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'BUSY',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'SAMPLE',0,1
	.word	455
	.byte	1,0,2,35,3,0,12,13,210,8,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15464
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_G_ARBPR_Bits',0,13,138,3,16,4,11
	.byte	'PRIO0',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'CSM0',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'PRIO1',0,1
	.word	455
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'CSM1',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'PRIO2',0,1
	.word	455
	.byte	2,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'CSM2',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	432
	.byte	12,8,2,35,0,11
	.byte	'ASEN0',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'ASEN1',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'ASEN2',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	455
	.byte	5,0,2,35,3,0,12,13,218,8,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15737
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_G_ANCFG_Bits',0,13,233,2,16,4,11
	.byte	'IPE',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'BE',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'RPE',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'RPC',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'CALSTC',0,1
	.word	455
	.byte	2,2,2,35,0,11
	.byte	'DPCAL',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	1006
	.byte	9,0,2,35,0,11
	.byte	'ACSD',0,1
	.word	455
	.byte	3,5,2,35,2,11
	.byte	'SSE',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'DIVA',0,2
	.word	1006
	.byte	5,7,2,35,2,11
	.byte	'DCMSB',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	455
	.byte	6,0,2,35,3,0,12,13,202,8,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16071
	.byte	4,2,35,0,0,15,20
	.word	455
	.byte	16,19,0,10
	.byte	'_Ifx_EVADC_G_ICLASS_Bits',0,13,152,4,16,4,11
	.byte	'STCS',0,1
	.word	455
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'AIPS',0,1
	.word	455
	.byte	2,0,2,35,0,11
	.byte	'CMS',0,1
	.word	455
	.byte	2,6,2,35,1,11
	.byte	'SESPS',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	455
	.byte	5,0,2,35,1,11
	.byte	'STCE',0,1
	.word	455
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'AIPE',0,1
	.word	455
	.byte	2,0,2,35,2,11
	.byte	'CME',0,1
	.word	455
	.byte	2,6,2,35,3,11
	.byte	'SESPE',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	455
	.byte	5,0,2,35,3,0,12,13,162,9,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16354
	.byte	4,2,35,0,0,15,8
	.word	16605
	.byte	16,1,0,10
	.byte	'_Ifx_EVADC_G_ALIAS_Bits',0,13,224,2,16,4,11
	.byte	'ALIAS0',0,1
	.word	455
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	455
	.byte	3,0,2,35,0,11
	.byte	'ALIAS1',0,1
	.word	455
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	432
	.byte	19,0,2,35,0,0,12,13,194,8,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16654
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_G_BOUND_Bits',0,13,157,3,16,4,11
	.byte	'BOUNDARY0',0,2
	.word	1006
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,1
	.word	455
	.byte	4,0,2,35,1,11
	.byte	'BOUNDARY1',0,2
	.word	1006
	.byte	12,4,2,35,2,11
	.byte	'reserved_28',0,1
	.word	455
	.byte	4,0,2,35,3,0,12,13,226,8,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16806
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_G_SYNCTR_Bits',0,13,177,6,16,4,11
	.byte	'STSEL',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	2,4,2,35,0,11
	.byte	'EVALR1',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EVALR2',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EVALR3',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	432
	.byte	25,0,2,35,0,0,12,13,194,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16965
	.byte	4,2,35,0,0,15,60
	.word	455
	.byte	16,59,0,10
	.byte	'_Ifx_EVADC_G_Q_QCTRL_Bits',0,13,201,4,16,4,11
	.byte	'SRCRESREG',0,1
	.word	455
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	455
	.byte	2,2,2,35,0,11
	.byte	'TRSEL',0,1
	.word	455
	.byte	2,0,2,35,0,11
	.byte	'XTSEL',0,1
	.word	455
	.byte	4,4,2,35,1,11
	.byte	'XTLVL',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'XTMODE',0,1
	.word	455
	.byte	2,1,2,35,1,11
	.byte	'XTWC',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'GTSEL',0,1
	.word	455
	.byte	4,4,2,35,2,11
	.byte	'GTLVL',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	455
	.byte	2,1,2,35,2,11
	.byte	'GTWC',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	455
	.byte	4,4,2,35,3,11
	.byte	'TMEN',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	455
	.byte	2,1,2,35,3,11
	.byte	'TMWC',0,1
	.word	455
	.byte	1,0,2,35,3,0
.L410:
	.byte	12,13,186,9,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17161
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_G_Q_QMR_Bits',0,13,237,4,16,4,11
	.byte	'ENGT',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'ENTR',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	455
	.byte	5,0,2,35,0,11
	.byte	'CLRV',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'TREV',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'FLUSH',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'CEV',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	455
	.byte	4,0,2,35,1,11
	.byte	'RPTDIS',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	1006
	.byte	15,0,2,35,2,0,12,13,202,9,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17513
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_G_Q_QSR_Bits',0,13,252,4,16,4,11
	.byte	'FILL',0,1
	.word	455
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EMPTY',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'REQGT',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'EV',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,4
	.word	432
	.byte	23,0,2,35,0,0,12,13,210,9,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17766
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_G_Q_Q0R_Bits',0,13,169,4,16,4,11
	.byte	'REQCHNR',0,1
	.word	455
	.byte	5,3,2,35,0,11
	.byte	'RF',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'ENSI',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EXTR',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'V',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'PDD',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'MDPD',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'MDPU',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'CDEN',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'CDSEL',0,1
	.word	455
	.byte	2,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	432
	.byte	17,0,2,35,0,0,12,13,170,9,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17967
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_G_Q_QINR_Bits',0,13,221,4,16,4,11
	.byte	'REQCHNR',0,1
	.word	455
	.byte	5,3,2,35,0,11
	.byte	'RF',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'ENSI',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EXTR',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'PDD',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'MDPD',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'MDPU',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'CDEN',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'CDSEL',0,1
	.word	455
	.byte	2,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	432
	.byte	17,0,2,35,0,0,12,13,194,9,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18219
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_G_Q_QBUR_Bits',0,13,185,4,16,4,11
	.byte	'REQCHNR',0,1
	.word	455
	.byte	5,3,2,35,0,11
	.byte	'RF',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'ENSI',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EXTR',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'V',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'PDD',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'MDPD',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'MDPU',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'CDEN',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'CDSEL',0,1
	.word	455
	.byte	2,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	432
	.byte	17,0,2,35,0,0,12,13,178,9,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18481
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_G_Q_REQTM_Bits',0,13,136,5,16,4,11
	.byte	'SEQMOD',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	4,2,2,35,0,11
	.byte	'SEQTIMSET',0,2
	.word	1006
	.byte	10,0,2,35,0,11
	.byte	'REQTS',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'ENTR',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	455
	.byte	4,2,2,35,2,11
	.byte	'SEQTIMOFF',0,2
	.word	1006
	.byte	10,0,2,35,2,0,12,13,218,9,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18734
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_G_Q_REQTS_Bits',0,13,148,5,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	6,2,2,35,0,11
	.byte	'SEQTIMER',0,2
	.word	1006
	.byte	10,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1006
	.byte	16,0,2,35,2,0,12,13,226,9,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18945
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_G_Q',0,13,172,11,25,32,13
	.byte	'QCTRL',0
	.word	17473
	.byte	4,2,35,0,13
	.byte	'QMR',0
	.word	17726
	.byte	4,2,35,4,13
	.byte	'QSR',0
	.word	17927
	.byte	4,2,35,8,13
	.byte	'Q0R',0
	.word	18179
	.byte	4,2,35,12,13
	.byte	'QINR',0
	.word	18441
	.byte	4,2,35,16,13
	.byte	'QBUR',0
	.word	18694
	.byte	4,2,35,20,13
	.byte	'REQTM',0
	.word	18905
	.byte	4,2,35,24,13
	.byte	'REQTS',0
	.word	19043
	.byte	4,2,35,28,0,15,96
	.word	19083
	.byte	16,2,0,14
	.word	19217
	.byte	15,32
	.word	455
	.byte	16,31,0,10
	.byte	'_Ifx_EVADC_G_CEFLAG_Bits',0,13,188,3,16,4,11
	.byte	'CEV0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'CEV1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'CEV2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'CEV3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'CEV4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'CEV5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'CEV6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'CEV7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'CEV8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'CEV9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'CEV10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'CEV11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'CEV12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'CEV13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'CEV14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'CEV15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1006
	.byte	16,0,2,35,2,0,12,13,242,8,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19240
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_G_REFLAG_Bits',0,13,191,5,16,4,11
	.byte	'REV0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'REV1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'REV2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'REV3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'REV4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'REV5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'REV6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'REV7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'REV8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'REV9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'REV10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'REV11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'REV12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'REV13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'REV14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'REV15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1006
	.byte	16,0,2,35,2,0,12,13,250,9,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19597
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_G_SEFLAG_Bits',0,13,144,6,16,4,11
	.byte	'SEV0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'SEV1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'SEV2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	432
	.byte	29,0,2,35,0,0,12,13,170,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19954
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_G_CEFCLR_Bits',0,13,166,3,16,4,11
	.byte	'CEV0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'CEV1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'CEV2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'CEV3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'CEV4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'CEV5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'CEV6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'CEV7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'CEV8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'CEV9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'CEV10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'CEV11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'CEV12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'CEV13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'CEV14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'CEV15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1006
	.byte	16,0,2,35,2,0,12,13,234,8,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20096
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_G_REFCLR_Bits',0,13,169,5,16,4,11
	.byte	'REV0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'REV1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'REV2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'REV3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'REV4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'REV5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'REV6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'REV7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'REV8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'REV9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'REV10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'REV11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'REV12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'REV13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'REV14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'REV15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1006
	.byte	16,0,2,35,2,0,12,13,242,9,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20453
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_G_SEFCLR_Bits',0,13,135,6,16,4,11
	.byte	'SEV0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'SEV1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'SEV2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	432
	.byte	29,0,2,35,0,0,12,13,162,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20810
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_G_CEVNP0_Bits',0,13,210,3,16,4,11
	.byte	'CEV0NP',0,1
	.word	455
	.byte	4,4,2,35,0,11
	.byte	'CEV1NP',0,1
	.word	455
	.byte	4,0,2,35,0,11
	.byte	'CEV2NP',0,1
	.word	455
	.byte	4,4,2,35,1,11
	.byte	'CEV3NP',0,1
	.word	455
	.byte	4,0,2,35,1,11
	.byte	'CEV4NP',0,1
	.word	455
	.byte	4,4,2,35,2,11
	.byte	'CEV5NP',0,1
	.word	455
	.byte	4,0,2,35,2,11
	.byte	'CEV6NP',0,1
	.word	455
	.byte	4,4,2,35,3,11
	.byte	'CEV7NP',0,1
	.word	455
	.byte	4,0,2,35,3,0,12,13,250,8,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20952
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_G_CEVNP1_Bits',0,13,223,3,16,4,11
	.byte	'CEV8NP',0,1
	.word	455
	.byte	4,4,2,35,0,11
	.byte	'CEV9NP',0,1
	.word	455
	.byte	4,0,2,35,0,11
	.byte	'CEV10NP',0,1
	.word	455
	.byte	4,4,2,35,1,11
	.byte	'CEV11NP',0,1
	.word	455
	.byte	4,0,2,35,1,11
	.byte	'CEV12NP',0,1
	.word	455
	.byte	4,4,2,35,2,11
	.byte	'CEV13NP',0,1
	.word	455
	.byte	4,0,2,35,2,11
	.byte	'CEV14NP',0,1
	.word	455
	.byte	4,4,2,35,3,11
	.byte	'CEV15NP',0,1
	.word	455
	.byte	4,0,2,35,3,0,12,13,130,9,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21168
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_G_REVNP0_Bits',0,13,237,5,16,4,11
	.byte	'REV0NP',0,1
	.word	455
	.byte	4,4,2,35,0,11
	.byte	'REV1NP',0,1
	.word	455
	.byte	4,0,2,35,0,11
	.byte	'REV2NP',0,1
	.word	455
	.byte	4,4,2,35,1,11
	.byte	'REV3NP',0,1
	.word	455
	.byte	4,0,2,35,1,11
	.byte	'REV4NP',0,1
	.word	455
	.byte	4,4,2,35,2,11
	.byte	'REV5NP',0,1
	.word	455
	.byte	4,0,2,35,2,11
	.byte	'REV6NP',0,1
	.word	455
	.byte	4,4,2,35,3,11
	.byte	'REV7NP',0,1
	.word	455
	.byte	4,0,2,35,3,0,12,13,146,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21390
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_G_REVNP1_Bits',0,13,250,5,16,4,11
	.byte	'REV8NP',0,1
	.word	455
	.byte	4,4,2,35,0,11
	.byte	'REV9NP',0,1
	.word	455
	.byte	4,0,2,35,0,11
	.byte	'REV10NP',0,1
	.word	455
	.byte	4,4,2,35,1,11
	.byte	'REV11NP',0,1
	.word	455
	.byte	4,0,2,35,1,11
	.byte	'REV12NP',0,1
	.word	455
	.byte	4,4,2,35,2,11
	.byte	'REV13NP',0,1
	.word	455
	.byte	4,0,2,35,2,11
	.byte	'REV14NP',0,1
	.word	455
	.byte	4,4,2,35,3,11
	.byte	'REV15NP',0,1
	.word	455
	.byte	4,0,2,35,3,0,12,13,154,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21606
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_G_SEVNP_Bits',0,13,153,6,16,4,11
	.byte	'SEV0NP',0,1
	.word	455
	.byte	4,4,2,35,0,11
	.byte	'SEV1NP',0,1
	.word	455
	.byte	4,0,2,35,0,11
	.byte	'SEV2NP',0,1
	.word	455
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	432
	.byte	20,0,2,35,0,0,12,13,178,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21828
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_G_SRACT_Bits',0,13,162,6,16,4,11
	.byte	'AGSR0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'AGSR1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'AGSR2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'AGSR3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	455
	.byte	4,0,2,35,0,11
	.byte	'ASSR0',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'ASSR1',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'ASSR2',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'ASSR3',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	432
	.byte	20,0,2,35,0,0,12,13,186,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21976
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_G_EMUXCTR_Bits',0,13,135,4,16,4,11
	.byte	'EMUXSET',0,1
	.word	455
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EMUXMODE',0,1
	.word	455
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	1006
	.byte	5,4,2,35,0,11
	.byte	'EMXCOD',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'EMXST',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'EMXCSS',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'EMXWC',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'EMUXACT',0,1
	.word	455
	.byte	3,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'EMUXCCB',0,2
	.word	1006
	.byte	5,7,2,35,2,11
	.byte	'reserved_25',0,1
	.word	455
	.byte	7,0,2,35,3,0
.L504:
	.byte	12,13,154,9,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22228
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_G_EMUXCS_Bits',0,13,128,4,16,4,11
	.byte	'EMUXCH',0,2
	.word	1006
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1006
	.byte	16,0,2,35,2,0
.L506:
	.byte	12,13,146,9,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22538
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_G_VFR_Bits',0,13,204,6,16,4,11
	.byte	'VF0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'VF1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'VF2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'VF3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'VF4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'VF5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'VF6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'VF7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'VF8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'VF9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'VF10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'VF11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'VF12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'VF13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'VF14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'VF15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1006
	.byte	16,0,2,35,2,0,12,13,210,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22651
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_G_CHCTR_Bits',0,13,236,3,16,4,11
	.byte	'ICLSEL',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	2,4,2,35,0,11
	.byte	'BNDSELL',0,1
	.word	455
	.byte	2,2,2,35,0,11
	.byte	'BNDSELU',0,1
	.word	455
	.byte	2,0,2,35,0,11
	.byte	'CHEVMODE',0,1
	.word	455
	.byte	2,6,2,35,1,11
	.byte	'SYNC',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'REFSEL',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'BNDSELX',0,1
	.word	455
	.byte	4,0,2,35,1,11
	.byte	'RESREG',0,1
	.word	455
	.byte	4,4,2,35,2,11
	.byte	'RESTGT',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'RESPOS',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	1006
	.byte	6,4,2,35,2,11
	.byte	'BWDCH',0,1
	.word	455
	.byte	2,2,2,35,3,11
	.byte	'BWDEN',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	455
	.byte	1,0,2,35,3,0,12,13,138,9,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22989
	.byte	4,2,35,0,0,15,64
	.word	23305
	.byte	16,15,0,10
	.byte	'_Ifx_EVADC_G_RCR_Bits',0,13,156,5,16,4,11
	.byte	'reserved_0',0,2
	.word	1006
	.byte	16,0,2,35,0,11
	.byte	'DRCTR',0,1
	.word	455
	.byte	4,4,2,35,2,11
	.byte	'DMM',0,1
	.word	455
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	455
	.byte	2,0,2,35,2,11
	.byte	'WFR',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'FEN',0,1
	.word	455
	.byte	2,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	455
	.byte	4,1,2,35,3,11
	.byte	'SRGEN',0,1
	.word	455
	.byte	1,0,2,35,3,0,12,13,234,9,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23354
	.byte	4,2,35,0,0,15,64
	.word	23530
	.byte	16,15,0,10
	.byte	'_Ifx_EVADC_G_RES_Bits',0,13,213,5,16,4,11
	.byte	'RESULT',0,2
	.word	1006
	.byte	16,0,2,35,0,11
	.byte	'DRC',0,1
	.word	455
	.byte	4,4,2,35,2,11
	.byte	'CHNR',0,2
	.word	1006
	.byte	5,7,2,35,2,11
	.byte	'EMUX',0,1
	.word	455
	.byte	3,4,2,35,3,11
	.byte	'CRS',0,1
	.word	455
	.byte	2,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'VF',0,1
	.word	455
	.byte	1,0,2,35,3,0
.L339:
	.byte	12,13,130,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23579
	.byte	4,2,35,0,0,15,64
	.word	23725
	.byte	16,15,0,10
	.byte	'_Ifx_EVADC_G_RESD_Bits',0,13,225,5,16,4,11
	.byte	'RESULT',0,2
	.word	1006
	.byte	16,0,2,35,0,11
	.byte	'DRC',0,1
	.word	455
	.byte	4,4,2,35,2,11
	.byte	'CHNR',0,2
	.word	1006
	.byte	5,7,2,35,2,11
	.byte	'EMUX',0,1
	.word	455
	.byte	3,4,2,35,3,11
	.byte	'CRS',0,1
	.word	455
	.byte	2,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'VF',0,1
	.word	455
	.byte	1,0,2,35,3,0,12,13,138,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23774
	.byte	4,2,35,0,0,15,64
	.word	23921
	.byte	16,15,0,10
	.byte	'_Ifx_EVADC_G',0,13,197,11,25,128,8,13
	.byte	'reserved_0',0
	.word	13233
	.byte	16,2,35,0,13
	.byte	'TRCTR',0
	.word	15424
	.byte	4,2,35,16,13
	.byte	'reserved_14',0
	.word	15048
	.byte	108,2,35,20,13
	.byte	'ARBCFG',0
	.word	15697
	.byte	4,3,35,128,1,13
	.byte	'ARBPR',0
	.word	16031
	.byte	4,3,35,132,1,13
	.byte	'ANCFG',0
	.word	16305
	.byte	4,3,35,136,1,13
	.byte	'reserved_8C',0
	.word	16345
	.byte	20,3,35,140,1,13
	.byte	'ICLASS',0
	.word	16645
	.byte	8,3,35,160,1,13
	.byte	'reserved_A8',0
	.word	4830
	.byte	8,3,35,168,1,13
	.byte	'ALIAS',0
	.word	16766
	.byte	4,3,35,176,1,13
	.byte	'reserved_B4',0
	.word	3010
	.byte	4,3,35,180,1,13
	.byte	'BOUND',0
	.word	16925
	.byte	4,3,35,184,1,13
	.byte	'reserved_BC',0
	.word	3010
	.byte	4,3,35,188,1,13
	.byte	'SYNCTR',0
	.word	17112
	.byte	4,3,35,192,1,13
	.byte	'reserved_C4',0
	.word	17152
	.byte	60,3,35,196,1,13
	.byte	'Q',0
	.word	19226
	.byte	96,3,35,128,2,13
	.byte	'reserved_160',0
	.word	19231
	.byte	32,3,35,224,2,13
	.byte	'CEFLAG',0
	.word	19557
	.byte	4,3,35,128,3,13
	.byte	'REFLAG',0
	.word	19914
	.byte	4,3,35,132,3,13
	.byte	'SEFLAG',0
	.word	20056
	.byte	4,3,35,136,3,13
	.byte	'reserved_18C',0
	.word	3010
	.byte	4,3,35,140,3,13
	.byte	'CEFCLR',0
	.word	20413
	.byte	4,3,35,144,3,13
	.byte	'REFCLR',0
	.word	20770
	.byte	4,3,35,148,3,13
	.byte	'SEFCLR',0
	.word	20912
	.byte	4,3,35,152,3,13
	.byte	'reserved_19C',0
	.word	3010
	.byte	4,3,35,156,3,13
	.byte	'CEVNP0',0
	.word	21128
	.byte	4,3,35,160,3,13
	.byte	'CEVNP1',0
	.word	21350
	.byte	4,3,35,164,3,13
	.byte	'reserved_1A8',0
	.word	4830
	.byte	8,3,35,168,3,13
	.byte	'REVNP0',0
	.word	21566
	.byte	4,3,35,176,3,13
	.byte	'REVNP1',0
	.word	21788
	.byte	4,3,35,180,3,13
	.byte	'reserved_1B8',0
	.word	4830
	.byte	8,3,35,184,3,13
	.byte	'SEVNP',0
	.word	21936
	.byte	4,3,35,192,3,13
	.byte	'reserved_1C4',0
	.word	3010
	.byte	4,3,35,196,3,13
	.byte	'SRACT',0
	.word	22188
	.byte	4,3,35,200,3,13
	.byte	'reserved_1CC',0
	.word	13404
	.byte	36,3,35,204,3,13
	.byte	'EMUXCTR',0
	.word	22498
	.byte	4,3,35,240,3,13
	.byte	'EMUXCS',0
	.word	22611
	.byte	4,3,35,244,3,13
	.byte	'VFR',0
	.word	22949
	.byte	4,3,35,248,3,13
	.byte	'reserved_1FC',0
	.word	3010
	.byte	4,3,35,252,3,13
	.byte	'CHCTR',0
	.word	23345
	.byte	64,3,35,128,4,13
	.byte	'reserved_240',0
	.word	12198
	.byte	64,3,35,192,4,13
	.byte	'RCR',0
	.word	23570
	.byte	64,3,35,128,5,13
	.byte	'reserved_2C0',0
	.word	12198
	.byte	64,3,35,192,5,13
	.byte	'RES',0
	.word	23765
	.byte	64,3,35,128,6,13
	.byte	'reserved_340',0
	.word	12198
	.byte	64,3,35,192,6,13
	.byte	'RESD',0
	.word	23961
	.byte	64,3,35,128,7,13
	.byte	'reserved_3C0',0
	.word	12198
	.byte	64,3,35,192,7,0,15,128,96
	.word	23970
	.byte	16,11,0,14
	.word	24870
	.byte	10
	.byte	'_Ifx_EVADC_FC_FCCTRL_Bits',0,13,176,1,16,4,11
	.byte	'STCF',0,1
	.word	455
	.byte	5,3,2,35,0,11
	.byte	'RPE',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'AIPF',0,1
	.word	455
	.byte	2,0,2,35,0,11
	.byte	'CHEVMODE',0,1
	.word	455
	.byte	2,6,2,35,1,11
	.byte	'DIVA',0,1
	.word	455
	.byte	5,1,2,35,1,11
	.byte	'CPWC',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'XTSEL',0,1
	.word	455
	.byte	4,4,2,35,2,11
	.byte	'XTLVL',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'XTMODE',0,1
	.word	455
	.byte	2,1,2,35,2,11
	.byte	'XTPOL',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'GTMODE',0,1
	.word	455
	.byte	2,6,2,35,3,11
	.byte	'FCCHNR',0,1
	.word	455
	.byte	5,1,2,35,3,11
	.byte	'XTWC',0,1
	.word	455
	.byte	1,0,2,35,3,0,12,13,202,7,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24885
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_FC_FCM_Bits',0,13,204,1,16,4,11
	.byte	'RUNCOMP',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'RUNRAMP',0,1
	.word	455
	.byte	2,4,2,35,0,11
	.byte	'FCRDIR',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'ANON',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'ACSD',0,1
	.word	455
	.byte	2,0,2,35,0,11
	.byte	'FCTRIV',0,1
	.word	455
	.byte	8,0,2,35,1,11
	.byte	'SRG',0,1
	.word	455
	.byte	2,6,2,35,2,11
	.byte	'AUE',0,1
	.word	455
	.byte	2,4,2,35,2,11
	.byte	'SSE',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'FCMWC',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'FCREF',0,2
	.word	1006
	.byte	10,0,2,35,2,0,12,13,218,7,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25178
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_FC_FCRAMP0_Bits',0,13,220,1,16,4,11
	.byte	'FCRCOMPA',0,2
	.word	1006
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	455
	.byte	6,0,2,35,1,11
	.byte	'FCRSTEP',0,1
	.word	455
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	455
	.byte	7,1,2,35,3,11
	.byte	'FSWC',0,1
	.word	455
	.byte	1,0,2,35,3,0,12,13,226,7,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25433
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_FC_FCRAMP1_Bits',0,13,230,1,16,4,11
	.byte	'FCRCOMPB',0,2
	.word	1006
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,4
	.word	432
	.byte	22,0,2,35,0,0,12,13,234,7,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25608
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_FC_FCBFL_Bits',0,13,156,1,16,4,11
	.byte	'BFL',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	455
	.byte	3,4,2,35,0,11
	.byte	'BFA',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	455
	.byte	3,0,2,35,0,11
	.byte	'BFI',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	455
	.byte	3,4,2,35,1,11
	.byte	'BFS',0,1
	.word	455
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	455
	.byte	2,0,2,35,1,11
	.byte	'BFM',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'BFV',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	455
	.byte	6,0,2,35,2,11
	.byte	'BFLNP',0,1
	.word	455
	.byte	4,4,2,35,3,11
	.byte	'FCR',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	455
	.byte	2,1,2,35,3,11
	.byte	'VF',0,1
	.word	455
	.byte	1,0,2,35,3,0,12,13,194,7,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25725
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EVADC_FC_FCHYST_Bits',0,13,194,1,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'DELTAMINUS',0,2
	.word	1006
	.byte	10,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	432
	.byte	6,14,2,35,0,11
	.byte	'DELTAPLUS',0,2
	.word	1006
	.byte	10,4,2,35,2,11
	.byte	'reserved_28',0,1
	.word	455
	.byte	4,0,2,35,3,0,12,13,210,7,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26068
	.byte	4,2,35,0,0,15,216,1
	.word	455
	.byte	16,215,1,0,10
	.byte	'_Ifx_EVADC_FC',0,13,133,12,25,128,2,13
	.byte	'FCCTRL',0
	.word	25138
	.byte	4,2,35,0,13
	.byte	'FCM',0
	.word	25393
	.byte	4,2,35,4,13
	.byte	'FCRAMP0',0
	.word	25568
	.byte	4,2,35,8,13
	.byte	'FCRAMP1',0
	.word	25685
	.byte	4,2,35,12,13
	.byte	'reserved_10',0
	.word	13233
	.byte	16,2,35,16,13
	.byte	'FCBFL',0
	.word	26028
	.byte	4,2,35,32,13
	.byte	'FCHYST',0
	.word	26212
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	26252
	.byte	216,1,2,35,40,0,15,128,16
	.word	26263
	.byte	16,7,0,14
	.word	26422
	.byte	15,128,8
	.word	455
	.byte	16,255,7,0,10
	.byte	'_Ifx_EVADC',0,13,158,12,25,128,128,1,13
	.byte	'CLC',0
	.word	10904
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	3010
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	11031
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	11071
	.byte	28,2,35,12,13
	.byte	'OCS',0
	.word	11248
	.byte	4,2,35,40,13
	.byte	'KRSTCLR',0
	.word	11356
	.byte	4,2,35,44,13
	.byte	'KRST1',0
	.word	11462
	.byte	4,2,35,48,13
	.byte	'KRST0',0
	.word	11587
	.byte	4,2,35,52,13
	.byte	'reserved_38',0
	.word	3010
	.byte	4,2,35,56,13
	.byte	'ACCEN0',0
	.word	12158
	.byte	4,2,35,60,13
	.byte	'reserved_40',0
	.word	12198
	.byte	64,2,35,64,13
	.byte	'GLOBCFG',0
	.word	12349
	.byte	4,3,35,128,1,13
	.byte	'reserved_84',0
	.word	3010
	.byte	4,3,35,132,1,13
	.byte	'ACCPROT0',0
	.word	12530
	.byte	4,3,35,136,1,13
	.byte	'ACCPROT1',0
	.word	12711
	.byte	4,3,35,140,1,13
	.byte	'ACCPROT2',0
	.word	12890
	.byte	4,3,35,144,1,13
	.byte	'reserved_94',0
	.word	5170
	.byte	12,3,35,148,1,13
	.byte	'GLOB',0
	.word	15043
	.byte	228,5,3,35,160,1,13
	.byte	'reserved_384',0
	.word	15048
	.byte	108,3,35,132,7,13
	.byte	'EMUXSEL',0
	.word	15150
	.byte	4,3,35,240,7,13
	.byte	'reserved_3F4',0
	.word	5170
	.byte	12,3,35,244,7,13
	.byte	'G',0
	.word	24880
	.byte	128,96,3,35,128,8,13
	.byte	'FC',0
	.word	26432
	.byte	128,16,3,35,128,104,13
	.byte	'reserved_3C00',0
	.word	26437
	.byte	128,8,3,35,128,120,0,14
	.word	26448
.L341:
	.byte	3
	.word	26902
.L477:
	.byte	8
	.byte	'IfxEvadc_getAdcCalibrationActiveState',0,3,12,190,18,18
	.word	455
	.byte	1,1
.L479:
	.byte	5
	.byte	'evadc',0,12,190,18,67
	.word	26907
.L481:
	.byte	5
	.byte	'adcCalGroupNum',0,12,190,18,80
	.word	455
.L483:
	.byte	6,0,14
	.word	23970
.L343:
	.byte	3
	.word	27003
	.byte	17,12,180,4,9,1,18
	.byte	'IfxEvadc_ClockDividerFactor_maxFrequency',0,0,18
	.byte	'IfxEvadc_ClockDividerFactor_2',0,1,18
	.byte	'IfxEvadc_ClockDividerFactor_3',0,2,18
	.byte	'IfxEvadc_ClockDividerFactor_4',0,3,18
	.byte	'IfxEvadc_ClockDividerFactor_5',0,4,18
	.byte	'IfxEvadc_ClockDividerFactor_6',0,5,18
	.byte	'IfxEvadc_ClockDividerFactor_7',0,6,18
	.byte	'IfxEvadc_ClockDividerFactor_8',0,7,18
	.byte	'IfxEvadc_ClockDividerFactor_9',0,8,18
	.byte	'IfxEvadc_ClockDividerFactor_10',0,9,18
	.byte	'IfxEvadc_ClockDividerFactor_11',0,10,18
	.byte	'IfxEvadc_ClockDividerFactor_12',0,11,18
	.byte	'IfxEvadc_ClockDividerFactor_13',0,12,18
	.byte	'IfxEvadc_ClockDividerFactor_14',0,13,18
	.byte	'IfxEvadc_ClockDividerFactor_15',0,14,18
	.byte	'IfxEvadc_ClockDividerFactor_16',0,15,18
	.byte	'IfxEvadc_ClockDividerFactor_17',0,16,18
	.byte	'IfxEvadc_ClockDividerFactor_18',0,17,18
	.byte	'IfxEvadc_ClockDividerFactor_19',0,18,18
	.byte	'IfxEvadc_ClockDividerFactor_20',0,19,18
	.byte	'IfxEvadc_ClockDividerFactor_21',0,20,18
	.byte	'IfxEvadc_ClockDividerFactor_22',0,21,18
	.byte	'IfxEvadc_ClockDividerFactor_23',0,22,18
	.byte	'IfxEvadc_ClockDividerFactor_24',0,23,18
	.byte	'IfxEvadc_ClockDividerFactor_25',0,24,18
	.byte	'IfxEvadc_ClockDividerFactor_26',0,25,18
	.byte	'IfxEvadc_ClockDividerFactor_27',0,26,18
	.byte	'IfxEvadc_ClockDividerFactor_28',0,27,18
	.byte	'IfxEvadc_ClockDividerFactor_29',0,28,18
	.byte	'IfxEvadc_ClockDividerFactor_30',0,29,18
	.byte	'IfxEvadc_ClockDividerFactor_31',0,30,18
	.byte	'IfxEvadc_ClockDividerFactor_32',0,31,0
.L452:
	.byte	4
	.byte	'IfxEvadc_initialiseAdcConverterClock',0,3,12,210,20,17,1,1
.L454:
	.byte	5
	.byte	'evadc',0,12,210,20,65
	.word	26907
.L456:
	.byte	5
	.byte	'evadcG',0,12,210,20,85
	.word	27008
.L458:
	.byte	5
	.byte	'converterClockDivider',0,12,210,20,121
	.word	27013
.L460:
	.byte	6,0
.L468:
	.byte	4
	.byte	'IfxEvadc_initiateStartupCalibration',0,3,12,217,20,17,1,1
.L471:
	.byte	5
	.byte	'evadc',0,12,217,20,64
	.word	26907
.L473:
	.byte	6,0,20
	.word	448
	.byte	21
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,22
	.word	28248
	.byte	0,14
	.word	432
	.byte	3
	.word	432
	.byte	23
	.byte	'__cmpswapw',0
	.word	28290
	.byte	1,1,1,1,24
	.byte	'p',0
	.word	28295
	.byte	24
	.byte	'value',0
	.word	432
	.byte	24
	.byte	'compare',0
	.word	432
	.byte	0,23
	.byte	'__minu',0
	.word	432
	.byte	1,1,1,1,22
	.word	432
	.byte	22
	.word	432
	.byte	0,25
	.word	176
	.byte	26
	.word	202
	.byte	6,0,25
	.word	237
	.byte	26
	.word	269
	.byte	6,0,25
	.word	282
	.byte	6,0,25
	.word	351
	.byte	26
	.word	370
	.byte	6,0,25
	.word	386
	.byte	26
	.word	401
	.byte	26
	.word	415
	.byte	6,0,25
	.word	811
	.byte	26
	.word	839
	.byte	6,0,25
	.word	1598
	.byte	26
	.word	1638
	.byte	26
	.word	1656
	.byte	6,0,25
	.word	1676
	.byte	26
	.word	1719
	.byte	6,0,25
	.word	1739
	.byte	26
	.word	1777
	.byte	26
	.word	1795
	.byte	6,0,25
	.word	1815
	.byte	26
	.word	1856
	.byte	6,0,27
	.byte	'IfxScuWdt_clearCpuEndinit',0,5,237,1,17,1,1,1,1,5
	.byte	'password',0,5,237,1,50
	.word	1006
	.byte	0,27
	.byte	'IfxScuWdt_clearSafetyEndinit',0,5,147,2,17,1,1,1,1,5
	.byte	'password',0,5,147,2,53
	.word	1006
	.byte	0,27
	.byte	'IfxScuWdt_setCpuEndinit',0,5,157,2,17,1,1,1,1,5
	.byte	'password',0,5,157,2,48
	.word	1006
	.byte	0,27
	.byte	'IfxScuWdt_setSafetyEndinit',0,5,187,2,17,1,1,1,1,5
	.byte	'password',0,5,187,2,51
	.word	1006
	.byte	0,25
	.word	1876
	.byte	26
	.word	1927
	.byte	6,0,25
	.word	1947
	.byte	6,0,28
	.byte	'IfxScuWdt_getCpuWatchdogPassword',0,5,215,3,19
	.word	1006
	.byte	1,1,1,1,28
	.byte	'IfxScuWdt_getSafetyWatchdogPassword',0,5,249,3,19
	.word	1006
	.byte	1,1,1,1,25
	.word	9818
	.byte	26
	.word	9851
	.byte	26
	.word	9865
	.byte	26
	.word	9883
	.byte	26
	.word	9897
	.byte	6,0,25
	.word	10017
	.byte	26
	.word	10045
	.byte	26
	.word	10059
	.byte	26
	.word	10077
	.byte	6,0,25
	.word	10266
	.byte	6,0,25
	.word	10300
	.byte	6,0,25
	.word	10363
	.byte	26
	.word	10404
	.byte	6,0,25
	.word	10423
	.byte	26
	.word	10478
	.byte	6,0,25
	.word	10497
	.byte	26
	.word	10537
	.byte	26
	.word	10554
	.byte	19,6,0,0,25
	.word	10573
	.byte	26
	.word	10596
	.byte	19,29
	.word	10657
	.byte	30
	.word	10695
	.byte	0,6,0,0,25
	.word	10617
	.byte	6,0,25
	.word	10657
	.byte	6,0,17,11,172,2,9,1,18
	.byte	'IfxScuCcu_Fsource_0',0,0,18
	.byte	'IfxScuCcu_Fsource_1',0,1,18
	.byte	'IfxScuCcu_Fsource_2',0,2,0,31
	.byte	'IfxScuCcu_getSourceFrequency',0,11,138,7,20
	.word	228
	.byte	1,1,1,1,5
	.byte	'fsource',0,11,138,7,67
	.word	28986
	.byte	0
.L345:
	.byte	17,12,138,1,9,1,18
	.byte	'IfxEvadc_ChannelId_none',0,127,18
	.byte	'IfxEvadc_ChannelId_0',0,0,18
	.byte	'IfxEvadc_ChannelId_1',0,1,18
	.byte	'IfxEvadc_ChannelId_2',0,2,18
	.byte	'IfxEvadc_ChannelId_3',0,3,18
	.byte	'IfxEvadc_ChannelId_4',0,4,18
	.byte	'IfxEvadc_ChannelId_5',0,5,18
	.byte	'IfxEvadc_ChannelId_6',0,6,18
	.byte	'IfxEvadc_ChannelId_7',0,7,18
	.byte	'IfxEvadc_ChannelId_8',0,8,18
	.byte	'IfxEvadc_ChannelId_9',0,9,18
	.byte	'IfxEvadc_ChannelId_10',0,10,18
	.byte	'IfxEvadc_ChannelId_11',0,11,18
	.byte	'IfxEvadc_ChannelId_12',0,12,18
	.byte	'IfxEvadc_ChannelId_13',0,13,18
	.byte	'IfxEvadc_ChannelId_14',0,14,18
	.byte	'IfxEvadc_ChannelId_15',0,15,0
.L347:
	.byte	17,12,162,3,9,1,18
	.byte	'IfxEvadc_RequestSource_queue0',0,0,18
	.byte	'IfxEvadc_RequestSource_queue1',0,1,18
	.byte	'IfxEvadc_RequestSource_queue2',0,2,0
.L349:
	.byte	7
	.byte	'long int',0,4,5
.L364:
	.byte	17,12,135,2,9,1,18
	.byte	'IfxEvadc_GatingMode_disabled',0,0,18
	.byte	'IfxEvadc_GatingMode_always',0,1,18
	.byte	'IfxEvadc_GatingMode_gatingHigh',0,2,18
	.byte	'IfxEvadc_GatingMode_gatingLow',0,3,0
.L370:
	.byte	17,12,145,2,9,1,18
	.byte	'IfxEvadc_GatingSource_0',0,0,18
	.byte	'IfxEvadc_GatingSource_1',0,1,18
	.byte	'IfxEvadc_GatingSource_2',0,2,18
	.byte	'IfxEvadc_GatingSource_3',0,3,18
	.byte	'IfxEvadc_GatingSource_4',0,4,18
	.byte	'IfxEvadc_GatingSource_5',0,5,18
	.byte	'IfxEvadc_GatingSource_6',0,6,18
	.byte	'IfxEvadc_GatingSource_7',0,7,18
	.byte	'IfxEvadc_GatingSource_8',0,8,18
	.byte	'IfxEvadc_GatingSource_9',0,9,18
	.byte	'IfxEvadc_GatingSource_10',0,10,18
	.byte	'IfxEvadc_GatingSource_11',0,11,18
	.byte	'IfxEvadc_GatingSource_12',0,12,18
	.byte	'IfxEvadc_GatingSource_13',0,13,18
	.byte	'IfxEvadc_GatingSource_14',0,14,18
	.byte	'IfxEvadc_GatingSource_15',0,15,0
.L375:
	.byte	17,12,144,3,9,1,18
	.byte	'IfxEvadc_RequestSlotPriority_lowest',0,0,18
	.byte	'IfxEvadc_RequestSlotPriority_low',0,1,18
	.byte	'IfxEvadc_RequestSlotPriority_high',0,2,18
	.byte	'IfxEvadc_RequestSlotPriority_highest',0,3,0
.L380:
	.byte	17,12,154,3,9,1,18
	.byte	'IfxEvadc_RequestSlotStartMode_waitForStart',0,0,18
	.byte	'IfxEvadc_RequestSlotStartMode_cancelInjectRepeat',0,1,0
.L385:
	.byte	17,12,227,3,9,1,18
	.byte	'IfxEvadc_TriggerSource_0',0,0,18
	.byte	'IfxEvadc_TriggerSource_1',0,1,18
	.byte	'IfxEvadc_TriggerSource_2',0,2,18
	.byte	'IfxEvadc_TriggerSource_3',0,3,18
	.byte	'IfxEvadc_TriggerSource_4',0,4,18
	.byte	'IfxEvadc_TriggerSource_5',0,5,18
	.byte	'IfxEvadc_TriggerSource_6',0,6,18
	.byte	'IfxEvadc_TriggerSource_7',0,7,18
	.byte	'IfxEvadc_TriggerSource_8',0,8,18
	.byte	'IfxEvadc_TriggerSource_9',0,9,18
	.byte	'IfxEvadc_TriggerSource_10',0,10,18
	.byte	'IfxEvadc_TriggerSource_11',0,11,18
	.byte	'IfxEvadc_TriggerSource_12',0,12,18
	.byte	'IfxEvadc_TriggerSource_13',0,13,18
	.byte	'IfxEvadc_TriggerSource_14',0,14,18
	.byte	'IfxEvadc_TriggerSource_15',0,15,0
.L390:
	.byte	17,12,217,3,9,1,18
	.byte	'IfxEvadc_TriggerMode_noExternalTrigger',0,0,18
	.byte	'IfxEvadc_TriggerMode_uponFallingEdge',0,1,18
	.byte	'IfxEvadc_TriggerMode_uponRisingEdge',0,2,18
	.byte	'IfxEvadc_TriggerMode_uponAnyEdge',0,3,0
.L395:
	.byte	17,12,195,3,9,1,18
	.byte	'IfxEvadc_Status_noError',0,0,18
	.byte	'IfxEvadc_Status_notInitialised',0,1,18
	.byte	'IfxEvadc_Status_invalidGroup',0,2,18
	.byte	'IfxEvadc_Status_invalidChannel',0,3,18
	.byte	'IfxEvadc_Status_queueFull',0,4,18
	.byte	'IfxEvadc_Status_noAccess',0,5,18
	.byte	'IfxEvadc_Status_channelsStillPending',0,6,0,25
	.word	10697
	.byte	26
	.word	10738
	.byte	26
	.word	10763
	.byte	6,0,25
	.word	26912
	.byte	26
	.word	26962
	.byte	26
	.word	26977
	.byte	6,0,25
	.word	28078
	.byte	26
	.word	28123
	.byte	26
	.word	28138
	.byte	26
	.word	28154
	.byte	6,0,25
	.word	28187
	.byte	26
	.word	28231
	.byte	6,0
.L432:
	.byte	17,12,187,2,9,1,18
	.byte	'IfxEvadc_Protection_channelControl0',0,0,18
	.byte	'IfxEvadc_Protection_channelControl1',0,1,18
	.byte	'IfxEvadc_Protection_channelControl2',0,2,18
	.byte	'IfxEvadc_Protection_channelControl3',0,3,18
	.byte	'IfxEvadc_Protection_channelControl4',0,4,18
	.byte	'IfxEvadc_Protection_channelControl5',0,5,18
	.byte	'IfxEvadc_Protection_channelControl6',0,6,18
	.byte	'IfxEvadc_Protection_channelControl7',0,7,18
	.byte	'IfxEvadc_Protection_channelControl8',0,8,18
	.byte	'IfxEvadc_Protection_channelControl9',0,9,18
	.byte	'IfxEvadc_Protection_channelControl10',0,10,18
	.byte	'IfxEvadc_Protection_channelControl11',0,11,18
	.byte	'IfxEvadc_Protection_channelControl12',0,12,18
	.byte	'IfxEvadc_Protection_channelControl13',0,13,18
	.byte	'IfxEvadc_Protection_channelControl14',0,14,18
	.byte	'IfxEvadc_Protection_initGroup0',0,16,18
	.byte	'IfxEvadc_Protection_initGroup1',0,17,18
	.byte	'IfxEvadc_Protection_initGroup2',0,18,18
	.byte	'IfxEvadc_Protection_initGroup3',0,19,18
	.byte	'IfxEvadc_Protection_initGroup4',0,20,18
	.byte	'IfxEvadc_Protection_initGroup5',0,21,18
	.byte	'IfxEvadc_Protection_initGroup6',0,22,18
	.byte	'IfxEvadc_Protection_initGroup7',0,23,18
	.byte	'IfxEvadc_Protection_initGroup8',0,24,18
	.byte	'IfxEvadc_Protection_initGroup9',0,25,18
	.byte	'IfxEvadc_Protection_initGroup10',0,26,18
	.byte	'IfxEvadc_Protection_initGroup11',0,27,18
	.byte	'IfxEvadc_Protection_initGroup12',0,28,18
	.byte	'IfxEvadc_Protection_initGroup13',0,29,18
	.byte	'IfxEvadc_Protection_initGroup14',0,30,18
	.byte	'IfxEvadc_Protection_serviceGroup0',0,32,18
	.byte	'IfxEvadc_Protection_serviceGroup1',0,33,18
	.byte	'IfxEvadc_Protection_serviceGroup2',0,34,18
	.byte	'IfxEvadc_Protection_serviceGroup3',0,35,18
	.byte	'IfxEvadc_Protection_serviceGroup4',0,36,18
	.byte	'IfxEvadc_Protection_serviceGroup5',0,37,18
	.byte	'IfxEvadc_Protection_serviceGroup6',0,38,18
	.byte	'IfxEvadc_Protection_serviceGroup7',0,39,18
	.byte	'IfxEvadc_Protection_serviceGroup8',0,40,18
	.byte	'IfxEvadc_Protection_serviceGroup9',0,41,18
	.byte	'IfxEvadc_Protection_serviceGroup10',0,42,18
	.byte	'IfxEvadc_Protection_serviceGroup11',0,43,18
	.byte	'IfxEvadc_Protection_serviceGroup12',0,44,18
	.byte	'IfxEvadc_Protection_serviceGroup13',0,45,18
	.byte	'IfxEvadc_Protection_serviceGroup14',0,46,18
	.byte	'IfxEvadc_Protection_resultRegisterGroup0',0,48,18
	.byte	'IfxEvadc_Protection_resultRegisterGroup1',0,49,18
	.byte	'IfxEvadc_Protection_resultRegisterGroup2',0,50,18
	.byte	'IfxEvadc_Protection_resultRegisterGroup3',0,51,18
	.byte	'IfxEvadc_Protection_resultRegisterGroup4',0,52,18
	.byte	'IfxEvadc_Protection_resultRegisterGroup5',0,53,18
	.byte	'IfxEvadc_Protection_resultRegisterGroup6',0,54,18
	.byte	'IfxEvadc_Protection_resultRegisterGroup7',0,55,18
	.byte	'IfxEvadc_Protection_resultRegisterGroup8',0,56,18
	.byte	'IfxEvadc_Protection_resultRegisterGroup9',0,57,18
	.byte	'IfxEvadc_Protection_resultRegisterGroup10',0,58,18
	.byte	'IfxEvadc_Protection_resultRegisterGroup11',0,59,18
	.byte	'IfxEvadc_Protection_resultRegisterGroup12',0,60,18
	.byte	'IfxEvadc_Protection_resultRegisterGroup13',0,61,18
	.byte	'IfxEvadc_Protection_resultRegisterGroup14',0,62,18
	.byte	'IfxEvadc_Protection_initFastCompareChannel0',0,192,0,18
	.byte	'IfxEvadc_Protection_initFastCompareChannel1',0,193,0,18
	.byte	'IfxEvadc_Protection_initFastCompareChannel2',0,194,0,18
	.byte	'IfxEvadc_Protection_initFastCompareChannel3',0,195,0,18
	.byte	'IfxEvadc_Protection_initFastCompareChannel4',0,196,0,18
	.byte	'IfxEvadc_Protection_initFastCompareChannel5',0,197,0,18
	.byte	'IfxEvadc_Protection_initFastCompareChannel6',0,198,0,18
	.byte	'IfxEvadc_Protection_initFastCompareChannel7',0,199,0,18
	.byte	'IfxEvadc_Protection_globalConfig',0,208,0,18
	.byte	'IfxEvadc_Protection_externalMultiplexer',0,209,0,18
	.byte	'IfxEvadc_Protection_testFunction',0,210,0,0
.L487:
	.byte	14
	.word	10342
.L493:
	.byte	17,12,243,1,9,1,18
	.byte	'IfxEvadc_ExternalMultiplexerMode_softwareControl',0,0,18
	.byte	'IfxEvadc_ExternalMultiplexerMode_steady',0,1,18
	.byte	'IfxEvadc_ExternalMultiplexerMode_singleStep',0,2,18
	.byte	'IfxEvadc_ExternalMultiplexerMode_sequence',0,3,0
.L496:
	.byte	17,12,228,1,9,1,18
	.byte	'IfxEvadc_EmuxSelectValue_0',0,0,18
	.byte	'IfxEvadc_EmuxSelectValue_1',0,1,18
	.byte	'IfxEvadc_EmuxSelectValue_2',0,2,18
	.byte	'IfxEvadc_EmuxSelectValue_3',0,3,18
	.byte	'IfxEvadc_EmuxSelectValue_4',0,4,18
	.byte	'IfxEvadc_EmuxSelectValue_5',0,5,18
	.byte	'IfxEvadc_EmuxSelectValue_6',0,6,18
	.byte	'IfxEvadc_EmuxSelectValue_7',0,7,0
.L498:
	.byte	17,12,202,1,9,1,18
	.byte	'IfxEvadc_EmuxCodingScheme_binary',0,0,18
	.byte	'IfxEvadc_EmuxCodingScheme_gray',0,1,0
.L500:
	.byte	17,12,219,1,9,1,18
	.byte	'IfxEvadc_EmuxSampleTimeControl_settingChanges',0,0,18
	.byte	'IfxEvadc_EmuxSampleTimeControl_always',0,1,0
.L502:
	.byte	17,12,192,1,9,1,18
	.byte	'IfxEvadc_ChannelSelectionStyle_channelNumber',0,0,18
	.byte	'IfxEvadc_ChannelSelectionStyle_binary',0,1,0,7
	.byte	'short int',0,2,5,32
	.byte	'__wchar_t',0,14,1,1
	.word	34823
	.byte	32
	.byte	'__size_t',0,14,1,1
	.word	432
	.byte	32
	.byte	'__ptrdiff_t',0,14,1,1
	.word	448
	.byte	33,1,3
	.word	34891
	.byte	32
	.byte	'__codeptr',0,14,1,1
	.word	34893
	.byte	17,15,66,9,1,18
	.byte	'IfxSrc_Tos_cpu0',0,0,18
	.byte	'IfxSrc_Tos_dma',0,1,18
	.byte	'IfxSrc_Tos_cpu1',0,2,18
	.byte	'IfxSrc_Tos_cpu2',0,3,18
	.byte	'IfxSrc_Tos_cpu3',0,4,18
	.byte	'IfxSrc_Tos_cpu4',0,5,18
	.byte	'IfxSrc_Tos_cpu5',0,6,0,32
	.byte	'IfxSrc_Tos',0,15,75,3
	.word	34916
	.byte	32
	.byte	'boolean',0,16,104,29
	.word	455
	.byte	32
	.byte	'uint8',0,16,108,29
	.word	455
	.byte	32
	.byte	'uint16',0,16,112,29
	.word	1006
	.byte	32
	.byte	'uint32',0,16,116,29
	.word	10342
	.byte	32
	.byte	'uint64',0,16,121,29
	.word	314
	.byte	32
	.byte	'sint16',0,16,129,1,29
	.word	34823
	.byte	32
	.byte	'sint32',0,16,134,1,29
	.word	29629
	.byte	7
	.byte	'long long int',0,8,5,32
	.byte	'sint64',0,16,141,1,29
	.word	35173
	.byte	32
	.byte	'float32',0,16,170,1,29
	.word	228
	.byte	32
	.byte	'pvoid',0,17,54,28
	.word	346
	.byte	32
	.byte	'Ifx_TickTime',0,17,76,28
	.word	35173
	.byte	32
	.byte	'Ifx_Priority',0,17,100,16
	.word	1006
	.byte	17,17,127,9,1,18
	.byte	'Ifx_RxSel_a',0,0,18
	.byte	'Ifx_RxSel_b',0,1,18
	.byte	'Ifx_RxSel_c',0,2,18
	.byte	'Ifx_RxSel_d',0,3,18
	.byte	'Ifx_RxSel_e',0,4,18
	.byte	'Ifx_RxSel_f',0,5,18
	.byte	'Ifx_RxSel_g',0,6,18
	.byte	'Ifx_RxSel_h',0,7,0,32
	.byte	'Ifx_RxSel',0,17,137,1,3
	.word	35279
	.byte	32
	.byte	'Ifx_UReg_8Bit',0,18,96,24
	.word	455
	.byte	32
	.byte	'Ifx_UReg_32Bit',0,18,98,24
	.word	432
	.byte	32
	.byte	'Ifx_SReg_32Bit',0,18,101,24
	.word	448
	.byte	32
	.byte	'Ifx_SRC_SRCR_Bits',0,4,85,3
	.word	472
	.byte	32
	.byte	'Ifx_SRC_SRCR',0,4,98,3
	.word	762
	.byte	10
	.byte	'_Ifx_SRC_CPU_CPU',0,4,110,25,4,13
	.byte	'SB',0
	.word	762
	.byte	4,2,35,0,0,14
	.word	35531
	.byte	32
	.byte	'Ifx_SRC_CPU_CPU',0,4,113,3
	.word	35566
	.byte	15,24
	.word	35531
	.byte	16,5,0,14
	.word	35595
	.byte	10
	.byte	'_Ifx_SRC_CPU',0,4,128,1,25,24,13
	.byte	'CPU',0
	.word	35604
	.byte	24,2,35,0,0,14
	.word	35609
	.byte	32
	.byte	'Ifx_SRC_CPU',0,4,131,1,3
	.word	35642
	.byte	10
	.byte	'_Ifx_SRC_AGBT_AGBT',0,4,146,1,25,4,13
	.byte	'SR',0
	.word	762
	.byte	4,2,35,0,0,14
	.word	35668
	.byte	32
	.byte	'Ifx_SRC_AGBT_AGBT',0,4,149,1,3
	.word	35706
	.byte	15,4
	.word	35668
	.byte	16,0,0,14
	.word	35738
	.byte	10
	.byte	'_Ifx_SRC_AGBT',0,4,164,1,25,4,13
	.byte	'AGBT',0
	.word	35747
	.byte	4,2,35,0,0,14
	.word	35752
	.byte	32
	.byte	'Ifx_SRC_AGBT',0,4,167,1,3
	.word	35787
	.byte	10
	.byte	'_Ifx_SRC_XBAR_XBAR',0,4,182,1,25,4,13
	.byte	'SR',0
	.word	762
	.byte	4,2,35,0,0,14
	.word	35814
	.byte	32
	.byte	'Ifx_SRC_XBAR_XBAR',0,4,185,1,3
	.word	35852
	.byte	15,12
	.word	35814
	.byte	16,2,0,14
	.word	35884
	.byte	10
	.byte	'_Ifx_SRC_XBAR',0,4,200,1,25,12,13
	.byte	'XBAR',0
	.word	35893
	.byte	12,2,35,0,0,14
	.word	35898
	.byte	32
	.byte	'Ifx_SRC_XBAR',0,4,203,1,3
	.word	35933
	.byte	15,8
	.word	762
	.byte	16,1,0,10
	.byte	'_Ifx_SRC_CERBERUS_CERBERUS',0,4,218,1,25,8,13
	.byte	'SR',0
	.word	35960
	.byte	8,2,35,0,0,14
	.word	35969
	.byte	32
	.byte	'Ifx_SRC_CERBERUS_CERBERUS',0,4,221,1,3
	.word	36015
	.byte	14
	.word	35969
	.byte	10
	.byte	'_Ifx_SRC_CERBERUS',0,4,236,1,25,8,13
	.byte	'CERBERUS',0
	.word	36055
	.byte	8,2,35,0,0,14
	.word	36060
	.byte	32
	.byte	'Ifx_SRC_CERBERUS',0,4,239,1,3
	.word	36103
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN_ASCLIN',0,4,254,1,25,12,13
	.byte	'TX',0
	.word	762
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	762
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	762
	.byte	4,2,35,8,0,14
	.word	36134
	.byte	32
	.byte	'Ifx_SRC_ASCLIN_ASCLIN',0,4,131,2,3
	.word	36201
	.byte	15,144,1
	.word	36134
	.byte	16,11,0,14
	.word	36237
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN',0,4,146,2,25,144,1,13
	.byte	'ASCLIN',0
	.word	36247
	.byte	144,1,2,35,0,0,14
	.word	36252
	.byte	32
	.byte	'Ifx_SRC_ASCLIN',0,4,149,2,3
	.word	36293
	.byte	10
	.byte	'_Ifx_SRC_QSPI_QSPI',0,4,164,2,25,20,13
	.byte	'TX',0
	.word	762
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	762
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	762
	.byte	4,2,35,8,13
	.byte	'PT',0
	.word	762
	.byte	4,2,35,12,13
	.byte	'U',0
	.word	762
	.byte	4,2,35,16,0,14
	.word	36322
	.byte	32
	.byte	'Ifx_SRC_QSPI_QSPI',0,4,171,2,3
	.word	36408
	.byte	15,120
	.word	36322
	.byte	16,5,0,14
	.word	36440
	.byte	10
	.byte	'_Ifx_SRC_QSPI',0,4,186,2,25,120,13
	.byte	'QSPI',0
	.word	36449
	.byte	120,2,35,0,0,14
	.word	36454
	.byte	32
	.byte	'Ifx_SRC_QSPI',0,4,189,2,3
	.word	36489
	.byte	10
	.byte	'_Ifx_SRC_HSCT_HSCT',0,4,204,2,25,4,13
	.byte	'SR',0
	.word	762
	.byte	4,2,35,0,0,14
	.word	36516
	.byte	32
	.byte	'Ifx_SRC_HSCT_HSCT',0,4,207,2,3
	.word	36554
	.byte	15,8
	.word	36516
	.byte	16,1,0,14
	.word	36586
	.byte	10
	.byte	'_Ifx_SRC_HSCT',0,4,222,2,25,8,13
	.byte	'HSCT',0
	.word	36595
	.byte	8,2,35,0,0,14
	.word	36600
	.byte	32
	.byte	'Ifx_SRC_HSCT',0,4,225,2,3
	.word	36635
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL_CH',0,4,240,2,25,16,13
	.byte	'COK',0
	.word	762
	.byte	4,2,35,0,13
	.byte	'RDI',0
	.word	762
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	762
	.byte	4,2,35,8,13
	.byte	'TRG',0
	.word	762
	.byte	4,2,35,12,0,14
	.word	36662
	.byte	32
	.byte	'Ifx_SRC_HSSL_HSSL_CH',0,4,246,2,3
	.word	36743
	.byte	15,64
	.word	36662
	.byte	16,3,0,14
	.word	36778
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL',0,4,133,3,25,68,13
	.byte	'CH',0
	.word	36787
	.byte	64,2,35,0,13
	.byte	'EXI',0
	.word	762
	.byte	4,2,35,64,0,14
	.word	36792
	.byte	32
	.byte	'Ifx_SRC_HSSL_HSSL',0,4,137,3,3
	.word	36843
	.byte	15,136,1
	.word	36792
	.byte	16,1,0,14
	.word	36875
	.byte	10
	.byte	'_Ifx_SRC_HSSL',0,4,152,3,25,136,1,13
	.byte	'HSSL',0
	.word	36885
	.byte	136,1,2,35,0,0,14
	.word	36890
	.byte	32
	.byte	'Ifx_SRC_HSSL',0,4,155,3,3
	.word	36927
	.byte	10
	.byte	'_Ifx_SRC_I2C_I2C',0,4,170,3,25,16,13
	.byte	'DTR',0
	.word	762
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	762
	.byte	4,2,35,4,13
	.byte	'P',0
	.word	762
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	3010
	.byte	4,2,35,12,0,14
	.word	36954
	.byte	32
	.byte	'Ifx_SRC_I2C_I2C',0,4,176,3,3
	.word	37035
	.byte	15,32
	.word	36954
	.byte	16,1,0,14
	.word	37065
	.byte	10
	.byte	'_Ifx_SRC_I2C',0,4,191,3,25,32,13
	.byte	'I2C',0
	.word	37074
	.byte	32,2,35,0,0,14
	.word	37079
	.byte	32
	.byte	'Ifx_SRC_I2C',0,4,194,3,3
	.word	37112
	.byte	10
	.byte	'_Ifx_SRC_SENT_SENT',0,4,209,3,25,4,13
	.byte	'SR',0
	.word	762
	.byte	4,2,35,0,0,14
	.word	37138
	.byte	32
	.byte	'Ifx_SRC_SENT_SENT',0,4,212,3,3
	.word	37176
	.byte	15,40
	.word	37138
	.byte	16,9,0,14
	.word	37208
	.byte	10
	.byte	'_Ifx_SRC_SENT',0,4,227,3,25,40,13
	.byte	'SENT',0
	.word	37217
	.byte	40,2,35,0,0,14
	.word	37222
	.byte	32
	.byte	'Ifx_SRC_SENT',0,4,230,3,3
	.word	37257
	.byte	15,20
	.word	762
	.byte	16,4,0,10
	.byte	'_Ifx_SRC_MSC_MSC',0,4,245,3,25,20,13
	.byte	'SR',0
	.word	37284
	.byte	20,2,35,0,0,14
	.word	37293
	.byte	32
	.byte	'Ifx_SRC_MSC_MSC',0,4,248,3,3
	.word	37329
	.byte	15,80
	.word	37293
	.byte	16,3,0,14
	.word	37359
	.byte	10
	.byte	'_Ifx_SRC_MSC',0,4,135,4,25,80,13
	.byte	'MSC',0
	.word	37368
	.byte	80,2,35,0,0,14
	.word	37373
	.byte	32
	.byte	'Ifx_SRC_MSC',0,4,138,4,3
	.word	37406
	.byte	15,16
	.word	762
	.byte	16,3,0,10
	.byte	'_Ifx_SRC_CCU6_CCU',0,4,153,4,25,16,13
	.byte	'SR',0
	.word	37432
	.byte	16,2,35,0,0,14
	.word	37441
	.byte	32
	.byte	'Ifx_SRC_CCU6_CCU',0,4,156,4,3
	.word	37478
	.byte	15,32
	.word	37441
	.byte	16,1,0,14
	.word	37509
	.byte	10
	.byte	'_Ifx_SRC_CCU6',0,4,171,4,25,32,13
	.byte	'CCU',0
	.word	37518
	.byte	32,2,35,0,0,14
	.word	37523
	.byte	32
	.byte	'Ifx_SRC_CCU6',0,4,174,4,3
	.word	37557
	.byte	10
	.byte	'_Ifx_SRC_GPT12_GPT12',0,4,189,4,25,24,13
	.byte	'CIRQ',0
	.word	762
	.byte	4,2,35,0,13
	.byte	'T2',0
	.word	762
	.byte	4,2,35,4,13
	.byte	'T3',0
	.word	762
	.byte	4,2,35,8,13
	.byte	'T4',0
	.word	762
	.byte	4,2,35,12,13
	.byte	'T5',0
	.word	762
	.byte	4,2,35,16,13
	.byte	'T6',0
	.word	762
	.byte	4,2,35,20,0,14
	.word	37584
	.byte	32
	.byte	'Ifx_SRC_GPT12_GPT12',0,4,197,4,3
	.word	37686
	.byte	15,24
	.word	37584
	.byte	16,0,0,14
	.word	37720
	.byte	10
	.byte	'_Ifx_SRC_GPT12',0,4,212,4,25,24,13
	.byte	'GPT12',0
	.word	37729
	.byte	24,2,35,0,0,14
	.word	37734
	.byte	32
	.byte	'Ifx_SRC_GPT12',0,4,215,4,3
	.word	37771
	.byte	10
	.byte	'_Ifx_SRC_STM_STM',0,4,230,4,25,8,13
	.byte	'SR',0
	.word	35960
	.byte	8,2,35,0,0,14
	.word	37799
	.byte	32
	.byte	'Ifx_SRC_STM_STM',0,4,233,4,3
	.word	37835
	.byte	15,48
	.word	37799
	.byte	16,5,0,14
	.word	37865
	.byte	10
	.byte	'_Ifx_SRC_STM',0,4,248,4,25,48,13
	.byte	'STM',0
	.word	37874
	.byte	48,2,35,0,0,14
	.word	37879
	.byte	32
	.byte	'Ifx_SRC_STM',0,4,251,4,3
	.word	37912
	.byte	10
	.byte	'_Ifx_SRC_FCE_FCE0',0,4,138,5,25,4,13
	.byte	'SR',0
	.word	762
	.byte	4,2,35,0,0,14
	.word	37938
	.byte	32
	.byte	'Ifx_SRC_FCE_FCE0',0,4,141,5,3
	.word	37975
	.byte	14
	.word	37938
	.byte	10
	.byte	'_Ifx_SRC_FCE',0,4,156,5,25,4,13
	.byte	'FCE0',0
	.word	38006
	.byte	4,2,35,0,0,14
	.word	38011
	.byte	32
	.byte	'Ifx_SRC_FCE',0,4,159,5,3
	.word	38045
	.byte	15,128,4
	.word	762
	.byte	16,127,0,10
	.byte	'_Ifx_SRC_DMA_DMA',0,4,174,5,25,176,4,13
	.byte	'ERR',0
	.word	37432
	.byte	16,2,35,0,13
	.byte	'reserved_10',0
	.word	19231
	.byte	32,2,35,16,13
	.byte	'CH',0
	.word	38071
	.byte	128,4,2,35,48,0,14
	.word	38081
	.byte	32
	.byte	'Ifx_SRC_DMA_DMA',0,4,179,5,3
	.word	38153
	.byte	15,176,4
	.word	38081
	.byte	16,0,0,14
	.word	38183
	.byte	10
	.byte	'_Ifx_SRC_DMA',0,4,194,5,25,176,4,13
	.byte	'DMA',0
	.word	38193
	.byte	176,4,2,35,0,0,14
	.word	38198
	.byte	32
	.byte	'Ifx_SRC_DMA',0,4,197,5,3
	.word	38233
	.byte	10
	.byte	'_Ifx_SRC_SDMMC_SDMMC',0,4,212,5,25,8,13
	.byte	'ERR',0
	.word	762
	.byte	4,2,35,0,13
	.byte	'DMA',0
	.word	762
	.byte	4,2,35,4,0,14
	.word	38259
	.byte	32
	.byte	'Ifx_SRC_SDMMC_SDMMC',0,4,216,5,3
	.word	38313
	.byte	15,8
	.word	38259
	.byte	16,0,0,14
	.word	38347
	.byte	10
	.byte	'_Ifx_SRC_SDMMC',0,4,231,5,25,8,13
	.byte	'SDMMC',0
	.word	38356
	.byte	8,2,35,0,0,14
	.word	38361
	.byte	32
	.byte	'Ifx_SRC_SDMMC',0,4,234,5,3
	.word	38398
	.byte	15,40
	.word	762
	.byte	16,9,0,10
	.byte	'_Ifx_SRC_GETH_GETH',0,4,249,5,25,40,13
	.byte	'SR',0
	.word	38426
	.byte	40,2,35,0,0,14
	.word	38435
	.byte	32
	.byte	'Ifx_SRC_GETH_GETH',0,4,252,5,3
	.word	38473
	.byte	15,40
	.word	38435
	.byte	16,0,0,14
	.word	38505
	.byte	10
	.byte	'_Ifx_SRC_GETH',0,4,139,6,25,40,13
	.byte	'GETH',0
	.word	38514
	.byte	40,2,35,0,0,14
	.word	38519
	.byte	32
	.byte	'Ifx_SRC_GETH',0,4,142,6,3
	.word	38554
	.byte	15,64
	.word	762
	.byte	16,15,0,10
	.byte	'_Ifx_SRC_CAN_CAN',0,4,157,6,25,64,13
	.byte	'INT',0
	.word	38581
	.byte	64,2,35,0,0,14
	.word	38590
	.byte	32
	.byte	'Ifx_SRC_CAN_CAN',0,4,160,6,3
	.word	38627
	.byte	15,192,1
	.word	38590
	.byte	16,2,0,14
	.word	38657
	.byte	10
	.byte	'_Ifx_SRC_CAN',0,4,175,6,25,192,1,13
	.byte	'CAN',0
	.word	38667
	.byte	192,1,2,35,0,0,14
	.word	38672
	.byte	32
	.byte	'Ifx_SRC_CAN',0,4,178,6,3
	.word	38707
	.byte	10
	.byte	'_Ifx_SRC_VADC_G',0,4,193,6,25,16,13
	.byte	'SR0',0
	.word	762
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	762
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	762
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	762
	.byte	4,2,35,12,0,14
	.word	38733
	.byte	32
	.byte	'Ifx_SRC_VADC_G',0,4,199,6,3
	.word	38808
	.byte	10
	.byte	'_Ifx_SRC_VADC_FC',0,4,214,6,25,4,13
	.byte	'SR0',0
	.word	762
	.byte	4,2,35,0,0,14
	.word	38837
	.byte	32
	.byte	'Ifx_SRC_VADC_FC',0,4,217,6,3
	.word	38874
	.byte	15,192,1
	.word	38733
	.byte	16,11,0,14
	.word	38904
	.byte	15,32
	.word	38837
	.byte	16,7,0,14
	.word	38919
	.byte	15,32
	.word	38733
	.byte	16,1,0,14
	.word	38933
	.byte	10
	.byte	'_Ifx_SRC_VADC',0,4,233,6,25,128,2,13
	.byte	'G',0
	.word	38914
	.byte	192,1,2,35,0,13
	.byte	'FC',0
	.word	38928
	.byte	32,3,35,192,1,13
	.byte	'CG',0
	.word	38942
	.byte	32,3,35,224,1,0,14
	.word	38947
	.byte	32
	.byte	'Ifx_SRC_VADC',0,4,238,6,3
	.word	39007
	.byte	10
	.byte	'_Ifx_SRC_DSADC_DSADC',0,4,253,6,25,8,13
	.byte	'SRM',0
	.word	762
	.byte	4,2,35,0,13
	.byte	'SRA',0
	.word	762
	.byte	4,2,35,4,0,14
	.word	39034
	.byte	32
	.byte	'Ifx_SRC_DSADC_DSADC',0,4,129,7,3
	.word	39088
	.byte	15,112
	.word	39034
	.byte	16,13,0,14
	.word	39122
	.byte	10
	.byte	'_Ifx_SRC_DSADC',0,4,144,7,25,112,13
	.byte	'DSADC',0
	.word	39131
	.byte	112,2,35,0,0,14
	.word	39136
	.byte	32
	.byte	'Ifx_SRC_DSADC',0,4,147,7,3
	.word	39173
	.byte	10
	.byte	'_Ifx_SRC_ERAY_ERAY',0,4,162,7,25,48,13
	.byte	'INT0',0
	.word	762
	.byte	4,2,35,0,13
	.byte	'INT1',0
	.word	762
	.byte	4,2,35,4,13
	.byte	'TINT0',0
	.word	762
	.byte	4,2,35,8,13
	.byte	'TINT1',0
	.word	762
	.byte	4,2,35,12,13
	.byte	'NDAT0',0
	.word	762
	.byte	4,2,35,16,13
	.byte	'NDAT1',0
	.word	762
	.byte	4,2,35,20,13
	.byte	'MBSC0',0
	.word	762
	.byte	4,2,35,24,13
	.byte	'MBSC1',0
	.word	762
	.byte	4,2,35,28,13
	.byte	'OBUSY',0
	.word	762
	.byte	4,2,35,32,13
	.byte	'IBUSY',0
	.word	762
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	4830
	.byte	8,2,35,40,0,14
	.word	39201
	.byte	32
	.byte	'Ifx_SRC_ERAY_ERAY',0,4,175,7,3
	.word	39396
	.byte	15,96
	.word	39201
	.byte	16,1,0,14
	.word	39428
	.byte	10
	.byte	'_Ifx_SRC_ERAY',0,4,190,7,25,96,13
	.byte	'ERAY',0
	.word	39437
	.byte	96,2,35,0,0,14
	.word	39442
	.byte	32
	.byte	'Ifx_SRC_ERAY',0,4,193,7,3
	.word	39477
	.byte	10
	.byte	'_Ifx_SRC_HSM_HSM',0,4,208,7,25,8,13
	.byte	'HSM',0
	.word	35960
	.byte	8,2,35,0,0,14
	.word	39504
	.byte	32
	.byte	'Ifx_SRC_HSM_HSM',0,4,211,7,3
	.word	39541
	.byte	15,8
	.word	39504
	.byte	16,0,0,14
	.word	39571
	.byte	10
	.byte	'_Ifx_SRC_HSM',0,4,226,7,25,8,13
	.byte	'HSM',0
	.word	39580
	.byte	8,2,35,0,0,14
	.word	39585
	.byte	32
	.byte	'Ifx_SRC_HSM',0,4,229,7,3
	.word	39618
	.byte	10
	.byte	'_Ifx_SRC_SCU',0,4,244,7,25,16,13
	.byte	'SCUERU',0
	.word	37432
	.byte	16,2,35,0,0,14
	.word	39644
	.byte	32
	.byte	'Ifx_SRC_SCU',0,4,247,7,3
	.word	39680
	.byte	10
	.byte	'_Ifx_SRC_PMS_PMS',0,4,134,8,25,4,13
	.byte	'SR',0
	.word	762
	.byte	4,2,35,0,0,14
	.word	39706
	.byte	32
	.byte	'Ifx_SRC_PMS_PMS',0,4,137,8,3
	.word	39742
	.byte	15,16
	.word	39706
	.byte	16,3,0,14
	.word	39772
	.byte	10
	.byte	'_Ifx_SRC_PMS',0,4,152,8,25,16,13
	.byte	'PMS',0
	.word	39781
	.byte	16,2,35,0,0,14
	.word	39786
	.byte	32
	.byte	'Ifx_SRC_PMS',0,4,155,8,3
	.word	39819
	.byte	15,12
	.word	762
	.byte	16,2,0,10
	.byte	'_Ifx_SRC_SMU_SMU',0,4,170,8,25,12,13
	.byte	'SR',0
	.word	39845
	.byte	12,2,35,0,0,14
	.word	39854
	.byte	32
	.byte	'Ifx_SRC_SMU_SMU',0,4,173,8,3
	.word	39890
	.byte	15,12
	.word	39854
	.byte	16,0,0,14
	.word	39920
	.byte	10
	.byte	'_Ifx_SRC_SMU',0,4,188,8,25,12,13
	.byte	'SMU',0
	.word	39929
	.byte	12,2,35,0,0,14
	.word	39934
	.byte	32
	.byte	'Ifx_SRC_SMU',0,4,191,8,3
	.word	39967
	.byte	15,32
	.word	762
	.byte	16,7,0,10
	.byte	'_Ifx_SRC_PSI5_PSI5',0,4,206,8,25,32,13
	.byte	'SR',0
	.word	39993
	.byte	32,2,35,0,0,14
	.word	40002
	.byte	32
	.byte	'Ifx_SRC_PSI5_PSI5',0,4,209,8,3
	.word	40040
	.byte	15,32
	.word	40002
	.byte	16,0,0,14
	.word	40072
	.byte	10
	.byte	'_Ifx_SRC_PSI5',0,4,224,8,25,32,13
	.byte	'PSI5',0
	.word	40081
	.byte	32,2,35,0,0,14
	.word	40086
	.byte	32
	.byte	'Ifx_SRC_PSI5',0,4,227,8,3
	.word	40121
	.byte	10
	.byte	'_Ifx_SRC_HSPDM_HSPDM0',0,4,242,8,25,12,13
	.byte	'BFR',0
	.word	762
	.byte	4,2,35,0,13
	.byte	'RAMP',0
	.word	762
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	762
	.byte	4,2,35,8,0,14
	.word	40148
	.byte	32
	.byte	'Ifx_SRC_HSPDM_HSPDM0',0,4,247,8,3
	.word	40217
	.byte	14
	.word	40148
	.byte	10
	.byte	'_Ifx_SRC_HSPDM',0,4,134,9,25,12,13
	.byte	'HSPDM0',0
	.word	40252
	.byte	12,2,35,0,0,14
	.word	40257
	.byte	32
	.byte	'Ifx_SRC_HSPDM',0,4,137,9,3
	.word	40295
	.byte	10
	.byte	'_Ifx_SRC_DAM_DAM',0,4,152,9,25,24,13
	.byte	'LI0',0
	.word	762
	.byte	4,2,35,0,13
	.byte	'RI0',0
	.word	762
	.byte	4,2,35,4,13
	.byte	'LI1',0
	.word	762
	.byte	4,2,35,8,13
	.byte	'RI1',0
	.word	762
	.byte	4,2,35,12,13
	.byte	'DR',0
	.word	762
	.byte	4,2,35,16,13
	.byte	'ERR',0
	.word	762
	.byte	4,2,35,20,0,14
	.word	40323
	.byte	32
	.byte	'Ifx_SRC_DAM_DAM',0,4,160,9,3
	.word	40424
	.byte	15,48
	.word	40323
	.byte	16,1,0,14
	.word	40454
	.byte	10
	.byte	'_Ifx_SRC_DAM',0,4,175,9,25,48,13
	.byte	'DAM',0
	.word	40463
	.byte	48,2,35,0,0,14
	.word	40468
	.byte	32
	.byte	'Ifx_SRC_DAM',0,4,178,9,3
	.word	40501
	.byte	10
	.byte	'_Ifx_SRC_PSI5S_PSI5S',0,4,193,9,25,32,13
	.byte	'SR',0
	.word	39993
	.byte	32,2,35,0,0,14
	.word	40527
	.byte	32
	.byte	'Ifx_SRC_PSI5S_PSI5S',0,4,196,9,3
	.word	40567
	.byte	15,32
	.word	40527
	.byte	16,0,0,14
	.word	40601
	.byte	10
	.byte	'_Ifx_SRC_PSI5S',0,4,211,9,25,32,13
	.byte	'PSI5S',0
	.word	40610
	.byte	32,2,35,0,0,14
	.word	40615
	.byte	32
	.byte	'Ifx_SRC_PSI5S',0,4,214,9,3
	.word	40652
	.byte	10
	.byte	'_Ifx_SRC_RIF_RIF',0,4,229,9,25,8,13
	.byte	'ERR',0
	.word	762
	.byte	4,2,35,0,13
	.byte	'INT',0
	.word	762
	.byte	4,2,35,4,0,14
	.word	40680
	.byte	32
	.byte	'Ifx_SRC_RIF_RIF',0,4,233,9,3
	.word	40730
	.byte	15,16
	.word	40680
	.byte	16,1,0,14
	.word	40760
	.byte	10
	.byte	'_Ifx_SRC_RIF',0,4,248,9,25,16,13
	.byte	'RIF',0
	.word	40769
	.byte	16,2,35,0,0,14
	.word	40774
	.byte	32
	.byte	'Ifx_SRC_RIF',0,4,251,9,3
	.word	40807
	.byte	10
	.byte	'_Ifx_SRC_SPU_SPU',0,4,138,10,25,8,13
	.byte	'INT',0
	.word	762
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	762
	.byte	4,2,35,4,0,14
	.word	40833
	.byte	32
	.byte	'Ifx_SRC_SPU_SPU',0,4,142,10,3
	.word	40883
	.byte	15,16
	.word	40833
	.byte	16,1,0,14
	.word	40913
	.byte	10
	.byte	'_Ifx_SRC_SPU',0,4,157,10,25,16,13
	.byte	'SPU',0
	.word	40922
	.byte	16,2,35,0,0,14
	.word	40927
	.byte	32
	.byte	'Ifx_SRC_SPU',0,4,160,10,3
	.word	40960
	.byte	10
	.byte	'_Ifx_SRC_GPSR_GPSR',0,4,175,10,25,32,13
	.byte	'SR',0
	.word	39993
	.byte	32,2,35,0,0,14
	.word	40986
	.byte	32
	.byte	'Ifx_SRC_GPSR_GPSR',0,4,178,10,3
	.word	41024
	.byte	15,192,1
	.word	40986
	.byte	16,5,0,14
	.word	41056
	.byte	10
	.byte	'_Ifx_SRC_GPSR',0,4,193,10,25,192,1,13
	.byte	'GPSR',0
	.word	41066
	.byte	192,1,2,35,0,0,14
	.word	41071
	.byte	32
	.byte	'Ifx_SRC_GPSR',0,4,196,10,3
	.word	41108
	.byte	17,19,134,1,9,1,18
	.byte	'IfxEvadc_GroupId_0',0,0,18
	.byte	'IfxEvadc_GroupId_1',0,1,18
	.byte	'IfxEvadc_GroupId_2',0,2,18
	.byte	'IfxEvadc_GroupId_3',0,3,18
	.byte	'IfxEvadc_GroupId_4',0,4,18
	.byte	'IfxEvadc_GroupId_5',0,5,18
	.byte	'IfxEvadc_GroupId_6',0,6,18
	.byte	'IfxEvadc_GroupId_7',0,7,18
	.byte	'IfxEvadc_GroupId_8',0,8,18
	.byte	'IfxEvadc_GroupId_9',0,9,18
	.byte	'IfxEvadc_GroupId_10',0,10,18
	.byte	'IfxEvadc_GroupId_11',0,11,18
	.byte	'IfxEvadc_GroupId_12',0,12,18
	.byte	'IfxEvadc_GroupId_13',0,13,18
	.byte	'IfxEvadc_GroupId_14',0,14,18
	.byte	'IfxEvadc_GroupId_15',0,15,18
	.byte	'IfxEvadc_GroupId_16',0,16,18
	.byte	'IfxEvadc_GroupId_17',0,17,18
	.byte	'IfxEvadc_GroupId_18',0,18,18
	.byte	'IfxEvadc_GroupId_19',0,19,18
	.byte	'IfxEvadc_GroupId_global0',0,20,18
	.byte	'IfxEvadc_GroupId_global1',0,21,0,32
	.byte	'IfxEvadc_GroupId',0,19,158,1,3
	.word	41135
	.byte	32
	.byte	'Ifx_EVADC_ACCEN0_Bits',0,13,102,3
	.word	11627
	.byte	32
	.byte	'Ifx_EVADC_ACCPROT0_Bits',0,13,113,3
	.word	12389
	.byte	32
	.byte	'Ifx_EVADC_ACCPROT1_Bits',0,13,124,3
	.word	12570
	.byte	32
	.byte	'Ifx_EVADC_ACCPROT2_Bits',0,13,135,1,3
	.word	12751
	.byte	32
	.byte	'Ifx_EVADC_CLC_Bits',0,13,145,1,3
	.word	10785
	.byte	32
	.byte	'Ifx_EVADC_EMUXSEL_Bits',0,13,153,1,3
	.word	15057
	.byte	32
	.byte	'Ifx_EVADC_FC_FCBFL_Bits',0,13,173,1,3
	.word	25725
	.byte	32
	.byte	'Ifx_EVADC_FC_FCCTRL_Bits',0,13,191,1,3
	.word	24885
	.byte	32
	.byte	'Ifx_EVADC_FC_FCHYST_Bits',0,13,201,1,3
	.word	26068
	.byte	32
	.byte	'Ifx_EVADC_FC_FCM_Bits',0,13,217,1,3
	.word	25178
	.byte	32
	.byte	'Ifx_EVADC_FC_FCRAMP0_Bits',0,13,227,1,3
	.word	25433
	.byte	32
	.byte	'Ifx_EVADC_FC_FCRAMP1_Bits',0,13,234,1,3
	.word	25608
	.byte	32
	.byte	'Ifx_EVADC_GLOBCFG_Bits',0,13,245,1,3
	.word	12207
	.byte	32
	.byte	'Ifx_EVADC_GLOB_BOUND_Bits',0,13,254,1,3
	.word	13242
	.byte	32
	.byte	'Ifx_EVADC_GLOB_EFLAG_Bits',0,13,136,2,3
	.word	13413
	.byte	32
	.byte	'Ifx_EVADC_GLOB_EVNP_Bits',0,13,144,2,3
	.word	13602
	.byte	32
	.byte	'Ifx_EVADC_GLOB_ICLASS_Bits',0,13,161,2,3
	.word	12930
	.byte	32
	.byte	'Ifx_EVADC_GLOB_RCR_Bits',0,13,172,2,3
	.word	14159
	.byte	32
	.byte	'Ifx_EVADC_GLOB_RES_Bits',0,13,184,2,3
	.word	14357
	.byte	32
	.byte	'Ifx_EVADC_GLOB_RESD_Bits',0,13,196,2,3
	.word	14546
	.byte	32
	.byte	'Ifx_EVADC_GLOB_TE_Bits',0,13,204,2,3
	.word	14022
	.byte	32
	.byte	'Ifx_EVADC_GLOB_TF_Bits',0,13,221,2,3
	.word	13738
	.byte	32
	.byte	'Ifx_EVADC_G_ALIAS_Bits',0,13,230,2,3
	.word	16654
	.byte	32
	.byte	'Ifx_EVADC_G_ANCFG_Bits',0,13,247,2,3
	.word	16071
	.byte	32
	.byte	'Ifx_EVADC_G_ARBCFG_Bits',0,13,135,3,3
	.word	15464
	.byte	32
	.byte	'Ifx_EVADC_G_ARBPR_Bits',0,13,154,3,3
	.word	15737
	.byte	32
	.byte	'Ifx_EVADC_G_BOUND_Bits',0,13,163,3,3
	.word	16806
	.byte	32
	.byte	'Ifx_EVADC_G_CEFCLR_Bits',0,13,185,3,3
	.word	20096
	.byte	32
	.byte	'Ifx_EVADC_G_CEFLAG_Bits',0,13,207,3,3
	.word	19240
	.byte	32
	.byte	'Ifx_EVADC_G_CEVNP0_Bits',0,13,220,3,3
	.word	20952
	.byte	32
	.byte	'Ifx_EVADC_G_CEVNP1_Bits',0,13,233,3,3
	.word	21168
	.byte	32
	.byte	'Ifx_EVADC_G_CHCTR_Bits',0,13,253,3,3
	.word	22989
	.byte	32
	.byte	'Ifx_EVADC_G_EMUXCS_Bits',0,13,132,4,3
	.word	22538
	.byte	32
	.byte	'Ifx_EVADC_G_EMUXCTR_Bits',0,13,149,4,3
	.word	22228
	.byte	32
	.byte	'Ifx_EVADC_G_ICLASS_Bits',0,13,166,4,3
	.word	16354
	.byte	32
	.byte	'Ifx_EVADC_G_Q_Q0R_Bits',0,13,182,4,3
	.word	17967
	.byte	32
	.byte	'Ifx_EVADC_G_Q_QBUR_Bits',0,13,198,4,3
	.word	18481
	.byte	32
	.byte	'Ifx_EVADC_G_Q_QCTRL_Bits',0,13,218,4,3
	.word	17161
	.byte	32
	.byte	'Ifx_EVADC_G_Q_QINR_Bits',0,13,234,4,3
	.word	18219
	.byte	32
	.byte	'Ifx_EVADC_G_Q_QMR_Bits',0,13,249,4,3
	.word	17513
	.byte	32
	.byte	'Ifx_EVADC_G_Q_QSR_Bits',0,13,133,5,3
	.word	17766
	.byte	32
	.byte	'Ifx_EVADC_G_Q_REQTM_Bits',0,13,145,5,3
	.word	18734
	.byte	32
	.byte	'Ifx_EVADC_G_Q_REQTS_Bits',0,13,153,5,3
	.word	18945
	.byte	32
	.byte	'Ifx_EVADC_G_RCR_Bits',0,13,166,5,3
	.word	23354
	.byte	32
	.byte	'Ifx_EVADC_G_REFCLR_Bits',0,13,188,5,3
	.word	20453
	.byte	32
	.byte	'Ifx_EVADC_G_REFLAG_Bits',0,13,210,5,3
	.word	19597
	.byte	32
	.byte	'Ifx_EVADC_G_RES_Bits',0,13,222,5,3
	.word	23579
	.byte	32
	.byte	'Ifx_EVADC_G_RESD_Bits',0,13,234,5,3
	.word	23774
	.byte	32
	.byte	'Ifx_EVADC_G_REVNP0_Bits',0,13,247,5,3
	.word	21390
	.byte	32
	.byte	'Ifx_EVADC_G_REVNP1_Bits',0,13,132,6,3
	.word	21606
	.byte	32
	.byte	'Ifx_EVADC_G_SEFCLR_Bits',0,13,141,6,3
	.word	20810
	.byte	32
	.byte	'Ifx_EVADC_G_SEFLAG_Bits',0,13,150,6,3
	.word	19954
	.byte	32
	.byte	'Ifx_EVADC_G_SEVNP_Bits',0,13,159,6,3
	.word	21828
	.byte	32
	.byte	'Ifx_EVADC_G_SRACT_Bits',0,13,174,6,3
	.word	21976
	.byte	32
	.byte	'Ifx_EVADC_G_SYNCTR_Bits',0,13,185,6,3
	.word	16965
	.byte	32
	.byte	'Ifx_EVADC_G_TRCTR_Bits',0,13,201,6,3
	.word	15190
	.byte	32
	.byte	'Ifx_EVADC_G_VFR_Bits',0,13,223,6,3
	.word	22651
	.byte	32
	.byte	'Ifx_EVADC_ID_Bits',0,13,231,6,3
	.word	10944
	.byte	32
	.byte	'Ifx_EVADC_KRST0_Bits',0,13,239,6,3
	.word	11502
	.byte	32
	.byte	'Ifx_EVADC_KRST1_Bits',0,13,246,6,3
	.word	11396
	.byte	32
	.byte	'Ifx_EVADC_KRSTCLR_Bits',0,13,253,6,3
	.word	11288
	.byte	32
	.byte	'Ifx_EVADC_OCS_Bits',0,13,138,7,3
	.word	11080
	.byte	32
	.byte	'Ifx_EVADC_ACCEN0',0,13,151,7,3
	.word	12158
	.byte	32
	.byte	'Ifx_EVADC_ACCPROT0',0,13,159,7,3
	.word	12530
	.byte	32
	.byte	'Ifx_EVADC_ACCPROT1',0,13,167,7,3
	.word	12711
	.byte	32
	.byte	'Ifx_EVADC_ACCPROT2',0,13,175,7,3
	.word	12890
	.byte	32
	.byte	'Ifx_EVADC_CLC',0,13,183,7,3
	.word	10904
	.byte	32
	.byte	'Ifx_EVADC_EMUXSEL',0,13,191,7,3
	.word	15150
	.byte	32
	.byte	'Ifx_EVADC_FC_FCBFL',0,13,199,7,3
	.word	26028
	.byte	32
	.byte	'Ifx_EVADC_FC_FCCTRL',0,13,207,7,3
	.word	25138
	.byte	32
	.byte	'Ifx_EVADC_FC_FCHYST',0,13,215,7,3
	.word	26212
	.byte	32
	.byte	'Ifx_EVADC_FC_FCM',0,13,223,7,3
	.word	25393
	.byte	32
	.byte	'Ifx_EVADC_FC_FCRAMP0',0,13,231,7,3
	.word	25568
	.byte	32
	.byte	'Ifx_EVADC_FC_FCRAMP1',0,13,239,7,3
	.word	25685
	.byte	32
	.byte	'Ifx_EVADC_GLOBCFG',0,13,247,7,3
	.word	12349
	.byte	32
	.byte	'Ifx_EVADC_GLOB_BOUND',0,13,255,7,3
	.word	13364
	.byte	32
	.byte	'Ifx_EVADC_GLOB_EFLAG',0,13,135,8,3
	.word	13553
	.byte	32
	.byte	'Ifx_EVADC_GLOB_EVNP',0,13,143,8,3
	.word	13698
	.byte	32
	.byte	'Ifx_EVADC_GLOB_ICLASS',0,13,151,8,3
	.word	13184
	.byte	32
	.byte	'Ifx_EVADC_GLOB_RCR',0,13,159,8,3
	.word	14308
	.byte	32
	.byte	'Ifx_EVADC_GLOB_RES',0,13,167,8,3
	.word	14506
	.byte	32
	.byte	'Ifx_EVADC_GLOB_RESD',0,13,175,8,3
	.word	14696
	.byte	32
	.byte	'Ifx_EVADC_GLOB_TE',0,13,183,8,3
	.word	14108
	.byte	32
	.byte	'Ifx_EVADC_GLOB_TF',0,13,191,8,3
	.word	13982
	.byte	32
	.byte	'Ifx_EVADC_G_ALIAS',0,13,199,8,3
	.word	16766
	.byte	32
	.byte	'Ifx_EVADC_G_ANCFG',0,13,207,8,3
	.word	16305
	.byte	32
	.byte	'Ifx_EVADC_G_ARBCFG',0,13,215,8,3
	.word	15697
	.byte	32
	.byte	'Ifx_EVADC_G_ARBPR',0,13,223,8,3
	.word	16031
	.byte	32
	.byte	'Ifx_EVADC_G_BOUND',0,13,231,8,3
	.word	16925
	.byte	32
	.byte	'Ifx_EVADC_G_CEFCLR',0,13,239,8,3
	.word	20413
	.byte	32
	.byte	'Ifx_EVADC_G_CEFLAG',0,13,247,8,3
	.word	19557
	.byte	32
	.byte	'Ifx_EVADC_G_CEVNP0',0,13,255,8,3
	.word	21128
	.byte	32
	.byte	'Ifx_EVADC_G_CEVNP1',0,13,135,9,3
	.word	21350
	.byte	32
	.byte	'Ifx_EVADC_G_CHCTR',0,13,143,9,3
	.word	23305
	.byte	32
	.byte	'Ifx_EVADC_G_EMUXCS',0,13,151,9,3
	.word	22611
	.byte	32
	.byte	'Ifx_EVADC_G_EMUXCTR',0,13,159,9,3
	.word	22498
	.byte	32
	.byte	'Ifx_EVADC_G_ICLASS',0,13,167,9,3
	.word	16605
	.byte	32
	.byte	'Ifx_EVADC_G_Q_Q0R',0,13,175,9,3
	.word	18179
	.byte	32
	.byte	'Ifx_EVADC_G_Q_QBUR',0,13,183,9,3
	.word	18694
	.byte	32
	.byte	'Ifx_EVADC_G_Q_QCTRL',0,13,191,9,3
	.word	17473
	.byte	32
	.byte	'Ifx_EVADC_G_Q_QINR',0,13,199,9,3
	.word	18441
	.byte	32
	.byte	'Ifx_EVADC_G_Q_QMR',0,13,207,9,3
	.word	17726
	.byte	32
	.byte	'Ifx_EVADC_G_Q_QSR',0,13,215,9,3
	.word	17927
	.byte	32
	.byte	'Ifx_EVADC_G_Q_REQTM',0,13,223,9,3
	.word	18905
	.byte	32
	.byte	'Ifx_EVADC_G_Q_REQTS',0,13,231,9,3
	.word	19043
	.byte	32
	.byte	'Ifx_EVADC_G_RCR',0,13,239,9,3
	.word	23530
	.byte	32
	.byte	'Ifx_EVADC_G_REFCLR',0,13,247,9,3
	.word	20770
	.byte	32
	.byte	'Ifx_EVADC_G_REFLAG',0,13,255,9,3
	.word	19914
	.byte	32
	.byte	'Ifx_EVADC_G_RES',0,13,135,10,3
	.word	23725
	.byte	32
	.byte	'Ifx_EVADC_G_RESD',0,13,143,10,3
	.word	23921
	.byte	32
	.byte	'Ifx_EVADC_G_REVNP0',0,13,151,10,3
	.word	21566
	.byte	32
	.byte	'Ifx_EVADC_G_REVNP1',0,13,159,10,3
	.word	21788
	.byte	32
	.byte	'Ifx_EVADC_G_SEFCLR',0,13,167,10,3
	.word	20912
	.byte	32
	.byte	'Ifx_EVADC_G_SEFLAG',0,13,175,10,3
	.word	20056
	.byte	32
	.byte	'Ifx_EVADC_G_SEVNP',0,13,183,10,3
	.word	21936
	.byte	32
	.byte	'Ifx_EVADC_G_SRACT',0,13,191,10,3
	.word	22188
	.byte	32
	.byte	'Ifx_EVADC_G_SYNCTR',0,13,199,10,3
	.word	17112
	.byte	32
	.byte	'Ifx_EVADC_G_TRCTR',0,13,207,10,3
	.word	15424
	.byte	32
	.byte	'Ifx_EVADC_G_VFR',0,13,215,10,3
	.word	22949
	.byte	32
	.byte	'Ifx_EVADC_ID',0,13,223,10,3
	.word	11031
	.byte	32
	.byte	'Ifx_EVADC_KRST0',0,13,231,10,3
	.word	11587
	.byte	32
	.byte	'Ifx_EVADC_KRST1',0,13,239,10,3
	.word	11462
	.byte	32
	.byte	'Ifx_EVADC_KRSTCLR',0,13,247,10,3
	.word	11356
	.byte	32
	.byte	'Ifx_EVADC_OCS',0,13,255,10,3
	.word	11248
	.byte	14
	.word	14736
	.byte	32
	.byte	'Ifx_EVADC_GLOB',0,13,157,11,3
	.word	45363
	.byte	14
	.word	19083
	.byte	32
	.byte	'Ifx_EVADC_G_Q',0,13,182,11,3
	.word	45392
	.byte	14
	.word	23970
	.byte	32
	.byte	'Ifx_EVADC_G',0,13,246,11,3
	.word	45420
	.byte	14
	.word	26263
	.byte	32
	.byte	'Ifx_EVADC_FC',0,13,143,12,3
	.word	45446
	.byte	14
	.word	26448
	.byte	32
	.byte	'Ifx_EVADC',0,13,184,12,3
	.word	45473
	.byte	32
	.byte	'Ifx_P_ACCEN0_Bits',0,8,102,3
	.word	8358
	.byte	32
	.byte	'Ifx_P_ACCEN1_Bits',0,8,108,3
	.word	8271
	.byte	32
	.byte	'Ifx_P_ESR_Bits',0,8,130,1,3
	.word	4839
	.byte	32
	.byte	'Ifx_P_ID_Bits',0,8,138,1,3
	.word	2890
	.byte	32
	.byte	'Ifx_P_IN_Bits',0,8,160,1,3
	.word	3886
	.byte	32
	.byte	'Ifx_P_IOCR0_Bits',0,8,173,1,3
	.word	3019
	.byte	32
	.byte	'Ifx_P_IOCR12_Bits',0,8,186,1,3
	.word	3666
	.byte	32
	.byte	'Ifx_P_IOCR4_Bits',0,8,199,1,3
	.word	3234
	.byte	32
	.byte	'Ifx_P_IOCR8_Bits',0,8,212,1,3
	.word	3449
	.byte	32
	.byte	'Ifx_P_LPCR_Bits',0,8,231,1,3
	.word	7933
	.byte	32
	.byte	'Ifx_P_OMCR_Bits',0,8,253,1,3
	.word	7585
	.byte	32
	.byte	'Ifx_P_OMCR0_Bits',0,8,136,2,3
	.word	6572
	.byte	32
	.byte	'Ifx_P_OMCR12_Bits',0,8,146,2,3
	.word	7096
	.byte	32
	.byte	'Ifx_P_OMCR4_Bits',0,8,157,2,3
	.word	6746
	.byte	32
	.byte	'Ifx_P_OMCR8_Bits',0,8,168,2,3
	.word	6920
	.byte	32
	.byte	'Ifx_P_OMR_Bits',0,8,205,2,3
	.word	2319
	.byte	32
	.byte	'Ifx_P_OMSR_Bits',0,8,227,2,3
	.word	7252
	.byte	32
	.byte	'Ifx_P_OMSR0_Bits',0,8,237,2,3
	.word	5909
	.byte	32
	.byte	'Ifx_P_OMSR12_Bits',0,8,248,2,3
	.word	6397
	.byte	32
	.byte	'Ifx_P_OMSR4_Bits',0,8,131,3,3
	.word	6056
	.byte	32
	.byte	'Ifx_P_OMSR8_Bits',0,8,142,3,3
	.word	6225
	.byte	32
	.byte	'Ifx_P_OUT_Bits',0,8,164,3,3
	.word	2003
	.byte	32
	.byte	'Ifx_P_PCSR_Bits',0,8,187,3,3
	.word	5545
	.byte	32
	.byte	'Ifx_P_PDISC_Bits',0,8,209,3,3
	.word	5179
	.byte	32
	.byte	'Ifx_P_PDR0_Bits',0,8,230,3,3
	.word	4210
	.byte	32
	.byte	'Ifx_P_PDR1_Bits',0,8,251,3,3
	.word	4514
	.byte	32
	.byte	'Ifx_P_ACCEN0',0,8,136,4,3
	.word	8885
	.byte	32
	.byte	'Ifx_P_ACCEN1',0,8,144,4,3
	.word	8318
	.byte	32
	.byte	'Ifx_P_ESR',0,8,152,4,3
	.word	5130
	.byte	32
	.byte	'Ifx_P_ID',0,8,160,4,3
	.word	2970
	.byte	32
	.byte	'Ifx_P_IN',0,8,168,4,3
	.word	4161
	.byte	32
	.byte	'Ifx_P_IOCR0',0,8,176,4,3
	.word	3194
	.byte	32
	.byte	'Ifx_P_IOCR12',0,8,184,4,3
	.word	3846
	.byte	32
	.byte	'Ifx_P_IOCR4',0,8,192,4,3
	.word	3409
	.byte	32
	.byte	'Ifx_P_IOCR8',0,8,200,4,3
	.word	3626
	.byte	32
	.byte	'Ifx_P_LPCR',0,8,208,4,3
	.word	8213
	.byte	32
	.byte	'Ifx_P_OMCR',0,8,216,4,3
	.word	7893
	.byte	32
	.byte	'Ifx_P_OMCR0',0,8,224,4,3
	.word	6706
	.byte	32
	.byte	'Ifx_P_OMCR12',0,8,232,4,3
	.word	7212
	.byte	32
	.byte	'Ifx_P_OMCR4',0,8,240,4,3
	.word	6880
	.byte	32
	.byte	'Ifx_P_OMCR8',0,8,248,4,3
	.word	7056
	.byte	32
	.byte	'Ifx_P_OMR',0,8,128,5,3
	.word	2850
	.byte	32
	.byte	'Ifx_P_OMSR',0,8,136,5,3
	.word	7545
	.byte	32
	.byte	'Ifx_P_OMSR0',0,8,144,5,3
	.word	6016
	.byte	32
	.byte	'Ifx_P_OMSR12',0,8,152,5,3
	.word	6532
	.byte	32
	.byte	'Ifx_P_OMSR4',0,8,160,5,3
	.word	6185
	.byte	32
	.byte	'Ifx_P_OMSR8',0,8,168,5,3
	.word	6357
	.byte	32
	.byte	'Ifx_P_OUT',0,8,176,5,3
	.word	2279
	.byte	32
	.byte	'Ifx_P_PCSR',0,8,184,5,3
	.word	5869
	.byte	32
	.byte	'Ifx_P_PDISC',0,8,192,5,3
	.word	5505
	.byte	32
	.byte	'Ifx_P_PDR0',0,8,200,5,3
	.word	4474
	.byte	32
	.byte	'Ifx_P_PDR1',0,8,208,5,3
	.word	4790
	.byte	14
	.word	8925
	.byte	32
	.byte	'Ifx_P',0,8,128,6,3
	.word	46691
	.byte	17,20,162,11,9,1,18
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,18
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,18
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,32
	.byte	'IfxScu_WDTCON1_IR',0,20,167,11,3
	.word	46711
	.byte	10
	.byte	'_Ifx_SCU_ACCEN00_Bits',0,6,68,16,4,11
	.byte	'EN0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	455
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_ACCEN00_Bits',0,6,102,3
	.word	46833
	.byte	10
	.byte	'_Ifx_SCU_ACCEN01_Bits',0,6,105,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN01_Bits',0,6,108,3
	.word	47392
	.byte	10
	.byte	'_Ifx_SCU_ACCEN10_Bits',0,6,111,16,4,11
	.byte	'EN0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	455
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_ACCEN10_Bits',0,6,145,1,3
	.word	47471
	.byte	10
	.byte	'_Ifx_SCU_ACCEN11_Bits',0,6,148,1,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN11_Bits',0,6,151,1,3
	.word	48031
	.byte	10
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,6,154,1,16,4,11
	.byte	'STM0DIS',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'STM1DIS',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'STM2DIS',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'STM3DIS',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'STM4DIS',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'STM5DIS',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	455
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,6,164,1,3
	.word	48112
	.byte	10
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,6,167,1,16,4,11
	.byte	'STMDIV',0,1
	.word	455
	.byte	4,4,2,35,0,11
	.byte	'GTMDIV',0,1
	.word	455
	.byte	4,0,2,35,0,11
	.byte	'SRIDIV',0,1
	.word	455
	.byte	4,4,2,35,1,11
	.byte	'LPDIV',0,1
	.word	455
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'SPBDIV',0,1
	.word	455
	.byte	4,4,2,35,2,11
	.byte	'BBBDIV',0,1
	.word	455
	.byte	4,0,2,35,2,11
	.byte	'FSIDIV',0,1
	.word	455
	.byte	2,6,2,35,3,11
	.byte	'FSI2DIV',0,1
	.word	455
	.byte	2,4,2,35,3,11
	.byte	'CLKSEL',0,1
	.word	455
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	455
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON0_Bits',0,6,181,1,3
	.word	48329
	.byte	10
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,6,184,1,16,4,11
	.byte	'MCANDIV',0,1
	.word	455
	.byte	4,4,2,35,0,11
	.byte	'CLKSELMCAN',0,1
	.word	455
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'PLL1DIVDIS',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'I2CDIV',0,1
	.word	455
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	455
	.byte	4,0,2,35,1,11
	.byte	'MSCDIV',0,1
	.word	455
	.byte	4,4,2,35,2,11
	.byte	'CLKSELMSC',0,1
	.word	455
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	455
	.byte	2,0,2,35,2,11
	.byte	'QSPIDIV',0,1
	.word	455
	.byte	4,4,2,35,3,11
	.byte	'CLKSELQSPI',0,1
	.word	455
	.byte	2,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	455
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON1_Bits',0,6,199,1,3
	.word	48602
	.byte	10
	.byte	'_Ifx_SCU_CCUCON10_Bits',0,6,202,1,16,4,11
	.byte	'CPU4DIV',0,1
	.word	455
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON10_Bits',0,6,206,1,3
	.word	48928
	.byte	10
	.byte	'_Ifx_SCU_CCUCON11_Bits',0,6,209,1,16,4,11
	.byte	'CPU5DIV',0,1
	.word	455
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON11_Bits',0,6,213,1,3
	.word	49030
	.byte	10
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,6,216,1,16,4,11
	.byte	'ASCLINFDIV',0,1
	.word	455
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	455
	.byte	4,0,2,35,0,11
	.byte	'ASCLINSDIV',0,1
	.word	455
	.byte	4,4,2,35,1,11
	.byte	'CLKSELASCLINS',0,1
	.word	455
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	432
	.byte	10,8,2,35,0,11
	.byte	'EBUPERON',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'ERAYPERON',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'HSPDMPERON',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	455
	.byte	4,1,2,35,3,11
	.byte	'LCK',0,1
	.word	455
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON2_Bits',0,6,228,1,3
	.word	49132
	.byte	10
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,6,231,1,16,4,11
	.byte	'PLL0MONEN',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'PLL1MONEN',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'PLL2MONEN',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'SPBMONEN',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'BACKMONEN',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	455
	.byte	3,0,2,35,0,11
	.byte	'PLL0MONTST',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'PLL1MONTST',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'PLL2MONTST',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'SPBMONTST',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'BACKMONTST',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	432
	.byte	11,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	455
	.byte	6,2,2,35,3,11
	.byte	'UP',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	455
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON3_Bits',0,6,248,1,3
	.word	49406
	.byte	10
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,6,251,1,16,4,11
	.byte	'LOTHR',0,2
	.word	1006
	.byte	12,4,2,35,0,11
	.byte	'UPTHR',0,4
	.word	432
	.byte	12,8,2,35,0,11
	.byte	'MONEN',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'MONTST',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	455
	.byte	4,2,2,35,3,11
	.byte	'UP',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	455
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON4_Bits',0,6,132,2,3
	.word	49775
	.byte	10
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,6,135,2,16,4,11
	.byte	'GETHDIV',0,1
	.word	455
	.byte	4,4,2,35,0,11
	.byte	'MCANHDIV',0,1
	.word	455
	.byte	4,0,2,35,0,11
	.byte	'ADASDIV',0,1
	.word	455
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	432
	.byte	18,2,2,35,0,11
	.byte	'UP',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	455
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON5_Bits',0,6,143,2,3
	.word	49955
	.byte	10
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,6,146,2,16,4,11
	.byte	'CPU0DIV',0,1
	.word	455
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON6_Bits',0,6,150,2,3
	.word	50124
	.byte	10
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,6,153,2,16,4,11
	.byte	'CPU1DIV',0,1
	.word	455
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON7_Bits',0,6,157,2,3
	.word	50224
	.byte	10
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,6,160,2,16,4,11
	.byte	'CPU2DIV',0,1
	.word	455
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON8_Bits',0,6,164,2,3
	.word	50324
	.byte	10
	.byte	'_Ifx_SCU_CCUCON9_Bits',0,6,167,2,16,4,11
	.byte	'CPU3DIV',0,1
	.word	455
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON9_Bits',0,6,171,2,3
	.word	50424
	.byte	10
	.byte	'_Ifx_SCU_CHIPID_Bits',0,6,174,2,16,4,11
	.byte	'CHREV',0,1
	.word	455
	.byte	6,2,2,35,0,11
	.byte	'CHTEC',0,1
	.word	455
	.byte	2,0,2,35,0,11
	.byte	'CHPK',0,1
	.word	455
	.byte	4,4,2,35,1,11
	.byte	'CHID',0,1
	.word	455
	.byte	4,0,2,35,1,11
	.byte	'EEA',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'UCODE',0,1
	.word	455
	.byte	7,0,2,35,2,11
	.byte	'FSIZE',0,1
	.word	455
	.byte	4,4,2,35,3,11
	.byte	'VART',0,1
	.word	455
	.byte	3,1,2,35,3,11
	.byte	'SEC',0,1
	.word	455
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CHIPID_Bits',0,6,185,2,3
	.word	50524
	.byte	10
	.byte	'_Ifx_SCU_DTSCLIM_Bits',0,6,188,2,16,4,11
	.byte	'LOWER',0,2
	.word	1006
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'BGPOK',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'EN',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'LLU',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'UPPER',0,2
	.word	1006
	.byte	12,4,2,35,2,11
	.byte	'INTEN',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'INT',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'UOF',0,1
	.word	455
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_DTSCLIM_Bits',0,6,200,2,3
	.word	50727
	.byte	10
	.byte	'_Ifx_SCU_DTSCSTAT_Bits',0,6,203,2,16,4,11
	.byte	'RESULT',0,2
	.word	1006
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	432
	.byte	20,0,2,35,0,0,32
	.byte	'Ifx_SCU_DTSCSTAT_Bits',0,6,207,2,3
	.word	50959
	.byte	10
	.byte	'_Ifx_SCU_EICON0_Bits',0,6,210,2,16,4,11
	.byte	'reserved_0',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	854
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	854
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_SCU_EICON0_Bits',0,6,216,2,3
	.word	51061
	.byte	10
	.byte	'_Ifx_SCU_EICON1_Bits',0,6,219,2,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_EICON1_Bits',0,6,228,2,3
	.word	51189
	.byte	10
	.byte	'_Ifx_SCU_EICR_Bits',0,6,231,2,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	4,4,2,35,0,11
	.byte	'EXIS0',0,1
	.word	455
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'FEN0',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'REN0',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'LDEN0',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'EIEN0',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'INP0',0,1
	.word	455
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	432
	.byte	5,12,2,35,0,11
	.byte	'EXIS1',0,1
	.word	455
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'FEN1',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'REN1',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'LDEN1',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'EIEN1',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'INP1',0,1
	.word	455
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	455
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EICR_Bits',0,6,250,2,3
	.word	51378
	.byte	10
	.byte	'_Ifx_SCU_EIFILT_Bits',0,6,253,2,16,4,11
	.byte	'FILRQ0A',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'FILRQ5A',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'FILRQ2A',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'FILRQ3A',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'FILRQ0C',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'FILRQ1C',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'FILRQ3C',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'FILRQ2C',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'FILRQ4A',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'FILRQ6A',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'FILRQ1A',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'FILRQ7A',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'FILRQ6D',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'FILRQ4D',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'FILRQ2B',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'FILRQ3B',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'FILRQ7C',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	455
	.byte	7,0,2,35,2,11
	.byte	'FILTDIV',0,1
	.word	455
	.byte	4,4,2,35,3,11
	.byte	'DEPTH',0,1
	.word	455
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_EIFILT_Bits',0,6,147,3,3
	.word	51742
	.byte	10
	.byte	'_Ifx_SCU_EIFR_Bits',0,6,150,3,16,4,11
	.byte	'INTF0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'INTF1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'INTF2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'INTF3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'INTF4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'INTF5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'INTF6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'INTF7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_EIFR_Bits',0,6,161,3,3
	.word	52181
	.byte	10
	.byte	'_Ifx_SCU_EISR_Bits',0,6,164,3,16,4,11
	.byte	'AE',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	1006
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	1006
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_EISR_Bits',0,6,174,3,3
	.word	52392
	.byte	10
	.byte	'_Ifx_SCU_EMSR_Bits',0,6,177,3,16,4,11
	.byte	'POL',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'MODE',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'ENON',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'PSEL',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	1006
	.byte	12,0,2,35,0,11
	.byte	'EMSF',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'SEMSF',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	1006
	.byte	14,0,2,35,2,0,32
	.byte	'Ifx_SCU_EMSR_Bits',0,6,187,3,3
	.word	52568
	.byte	10
	.byte	'_Ifx_SCU_EMSSW_Bits',0,6,190,3,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	24,8,2,35,0,11
	.byte	'EMSFM',0,1
	.word	455
	.byte	2,6,2,35,3,11
	.byte	'SEMSFM',0,1
	.word	455
	.byte	2,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	455
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_EMSSW_Bits',0,6,196,3,3
	.word	52762
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,6,199,3,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	7,1,2,35,0,11
	.byte	'EDCON',0,2
	.word	1006
	.byte	2,7,2,35,0,11
	.byte	'reserved_9',0,4
	.word	432
	.byte	23,0,2,35,0,0,32
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,6,204,3,3
	.word	52897
	.byte	10
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,6,207,3,16,4,11
	.byte	'ARI',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'ARC',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	432
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_ESROCFG_Bits',0,6,212,3,3
	.word	53033
	.byte	10
	.byte	'_Ifx_SCU_EXTCON_Bits',0,6,215,3,16,4,11
	.byte	'EN0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'SEL0',0,1
	.word	455
	.byte	4,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	1006
	.byte	10,0,2,35,0,11
	.byte	'EN1',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'NSEL',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'SEL1',0,1
	.word	455
	.byte	4,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	455
	.byte	2,0,2,35,2,11
	.byte	'DIV1',0,1
	.word	455
	.byte	8,0,2,35,3,0,32
	.byte	'Ifx_SCU_EXTCON_Bits',0,6,226,3,3
	.word	53144
	.byte	10
	.byte	'_Ifx_SCU_FDR_Bits',0,6,229,3,16,4,11
	.byte	'STEP',0,2
	.word	1006
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	455
	.byte	4,2,2,35,1,11
	.byte	'DM',0,1
	.word	455
	.byte	2,0,2,35,1,11
	.byte	'RESULT',0,2
	.word	1006
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	455
	.byte	5,1,2,35,3,11
	.byte	'DISCLK',0,1
	.word	455
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_FDR_Bits',0,6,237,3,3
	.word	53362
	.byte	10
	.byte	'_Ifx_SCU_FMR_Bits',0,6,240,3,16,4,11
	.byte	'FS0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'FS1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'FS2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'FS3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'FS4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'FS5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'FS6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'FS7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	455
	.byte	8,0,2,35,1,11
	.byte	'FC0',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'FC1',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'FC2',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'FC3',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'FC4',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'FC5',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'FC6',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'FC7',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	455
	.byte	8,0,2,35,3,0,32
	.byte	'Ifx_SCU_FMR_Bits',0,6,132,4,3
	.word	53525
	.byte	10
	.byte	'_Ifx_SCU_ID_Bits',0,6,135,4,16,4,11
	.byte	'MODREV',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	455
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	1006
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_ID_Bits',0,6,140,4,3
	.word	53861
	.byte	10
	.byte	'_Ifx_SCU_IGCR_Bits',0,6,143,4,16,4,11
	.byte	'IPEN00',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'IPEN01',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'IPEN02',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'IPEN03',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'IPEN04',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'IPEN05',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'IPEN06',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'IPEN07',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	455
	.byte	5,3,2,35,1,11
	.byte	'GEEN0',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'IGP0',0,1
	.word	455
	.byte	2,0,2,35,1,11
	.byte	'IPEN10',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'IPEN11',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'IPEN12',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'IPEN13',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'IPEN14',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'IPEN15',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'IPEN16',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'IPEN17',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	455
	.byte	5,3,2,35,3,11
	.byte	'GEEN1',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'IGP1',0,1
	.word	455
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_SCU_IGCR_Bits',0,6,167,4,3
	.word	53968
	.byte	10
	.byte	'_Ifx_SCU_IN_Bits',0,6,170,4,16,4,11
	.byte	'P0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	432
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_IN_Bits',0,6,175,4,3
	.word	54420
	.byte	10
	.byte	'_Ifx_SCU_IOCR_Bits',0,6,178,4,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	4,4,2,35,0,11
	.byte	'PC0',0,1
	.word	455
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	455
	.byte	4,4,2,35,1,11
	.byte	'PC1',0,1
	.word	455
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1006
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_IOCR_Bits',0,6,185,4,3
	.word	54519
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,6,188,4,16,4,11
	.byte	'LBISTREQ',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'LBISTRES',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'PATTERNS',0,4
	.word	432
	.byte	18,12,2,35,0,11
	.byte	'reserved_20',0,2
	.word	1006
	.byte	8,4,2,35,2,11
	.byte	'LBISTDONE',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'LBISTERRINJ',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'LBISTREQRED',0,1
	.word	455
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,6,198,4,3
	.word	54669
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,6,201,4,16,4,11
	.byte	'SEED',0,4
	.word	432
	.byte	19,13,2,35,0,11
	.byte	'reserved_19',0,1
	.word	455
	.byte	5,0,2,35,2,11
	.byte	'SPLITSH',0,1
	.word	455
	.byte	3,5,2,35,3,11
	.byte	'BODY',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'LBISTFREQU',0,1
	.word	455
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,6,208,4,3
	.word	54907
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,6,211,4,16,4,11
	.byte	'LENGTH',0,2
	.word	1006
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	432
	.byte	20,0,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,6,215,4,3
	.word	55068
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL3_Bits',0,6,218,4,16,4,11
	.byte	'SIGNATURE',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL3_Bits',0,6,221,4,3
	.word	55174
	.byte	10
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,6,224,4,16,4,11
	.byte	'LS2',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	1006
	.byte	14,1,2,35,0,11
	.byte	'LSEN2',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'LS0',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	1006
	.byte	14,1,2,35,2,11
	.byte	'LSEN0',0,1
	.word	455
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_LCLCON0_Bits',0,6,232,4,3
	.word	55260
	.byte	10
	.byte	'_Ifx_SCU_LCLCON1_Bits',0,6,235,4,16,4,11
	.byte	'LS3',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	1006
	.byte	14,1,2,35,0,11
	.byte	'LSEN3',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'LS1',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	1006
	.byte	14,1,2,35,2,11
	.byte	'LSEN1',0,1
	.word	455
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_LCLCON1_Bits',0,6,243,4,3
	.word	55428
	.byte	10
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,6,246,4,16,4,11
	.byte	'LCLT0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'LCLT1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'LCLT2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'LCLT3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'LCLT4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'LCLT5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	1006
	.byte	10,0,2,35,0,11
	.byte	'PLCLT0',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'PLCLT1',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'PLCLT2',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'PLCLT3',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'PLCLT4',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'PLCLT5',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	1006
	.byte	10,0,2,35,2,0,32
	.byte	'Ifx_SCU_LCLTEST_Bits',0,6,134,5,3
	.word	55596
	.byte	10
	.byte	'_Ifx_SCU_MANID_Bits',0,6,137,5,16,4,11
	.byte	'DEPT',0,1
	.word	455
	.byte	5,3,2,35,0,11
	.byte	'MANUF',0,2
	.word	1006
	.byte	11,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1006
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_MANID_Bits',0,6,142,5,3
	.word	55910
	.byte	10
	.byte	'_Ifx_SCU_OMR_Bits',0,6,145,5,16,4,11
	.byte	'PS0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	1006
	.byte	14,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	1006
	.byte	14,0,2,35,2,0,32
	.byte	'Ifx_SCU_OMR_Bits',0,6,153,5,3
	.word	56021
	.byte	10
	.byte	'_Ifx_SCU_OSCCON_Bits',0,6,156,5,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'PLLLV',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'OSCRES',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'GAINSEL',0,1
	.word	455
	.byte	2,3,2,35,0,11
	.byte	'MODE',0,1
	.word	455
	.byte	2,1,2,35,0,11
	.byte	'SHBY',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'PLLHV',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'HYSEN',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'HYSCTL',0,1
	.word	455
	.byte	2,4,2,35,1,11
	.byte	'AMPCTL',0,1
	.word	455
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	455
	.byte	2,0,2,35,1,11
	.byte	'OSCVAL',0,1
	.word	455
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	455
	.byte	2,1,2,35,2,11
	.byte	'APREN',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'CAP0EN',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'CAP1EN',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'CAP2EN',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'CAP3EN',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	455
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_OSCCON_Bits',0,6,177,5,3
	.word	56179
	.byte	10
	.byte	'_Ifx_SCU_OUT_Bits',0,6,180,5,16,4,11
	.byte	'P0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	432
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_OUT_Bits',0,6,185,5,3
	.word	56590
	.byte	10
	.byte	'_Ifx_SCU_OVCCON_Bits',0,6,188,5,16,4,11
	.byte	'CSEL0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'CSEL1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'CSEL2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'CSEL3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'CSEL4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'CSEL5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	1006
	.byte	10,0,2,35,0,11
	.byte	'OVSTRT',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'OVSTP',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'DCINVAL',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	455
	.byte	5,0,2,35,2,11
	.byte	'OVCONF',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'POVCONF',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	455
	.byte	6,0,2,35,3,0,32
	.byte	'Ifx_SCU_OVCCON_Bits',0,6,204,5,3
	.word	56691
	.byte	10
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,6,207,5,16,4,11
	.byte	'OVEN0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'OVEN1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'OVEN2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'OVEN3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'OVEN4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'OVEN5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,6,216,5,3
	.word	57009
	.byte	10
	.byte	'_Ifx_SCU_PDISC_Bits',0,6,219,5,16,4,11
	.byte	'PDIS0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	432
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_PDISC_Bits',0,6,224,5,3
	.word	57196
	.byte	10
	.byte	'_Ifx_SCU_PDR_Bits',0,6,227,5,16,4,11
	.byte	'PD0',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	455
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	455
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	455
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_PDR_Bits',0,6,234,5,3
	.word	57307
	.byte	10
	.byte	'_Ifx_SCU_PDRR_Bits',0,6,237,5,16,4,11
	.byte	'PDR0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'PDR1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'PDR2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'PDR3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'PDR4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'PDR5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'PDR6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'PDR7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_PDRR_Bits',0,6,248,5,3
	.word	57440
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON0_Bits',0,6,251,5,16,4,11
	.byte	'DIVBY',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	1006
	.byte	8,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	455
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	455
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	455
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	455
	.byte	5,0,2,35,3,0,32
	.byte	'Ifx_SCU_PERPLLCON0_Bits',0,6,134,6,3
	.word	57643
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON1_Bits',0,6,137,6,16,4,11
	.byte	'K2DIV',0,1
	.word	455
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	455
	.byte	5,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	455
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	432
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLCON1_Bits',0,6,143,6,3
	.word	57883
	.byte	10
	.byte	'_Ifx_SCU_PERPLLSTAT_Bits',0,6,146,6,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'K3RDY',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	432
	.byte	25,0,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLSTAT_Bits',0,6,156,6,3
	.word	58027
	.byte	10
	.byte	'_Ifx_SCU_PMCSR0_Bits',0,6,159,6,16,4,11
	.byte	'REQSLP',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	455
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	432
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR0_Bits',0,6,165,6,3
	.word	58249
	.byte	10
	.byte	'_Ifx_SCU_PMCSR1_Bits',0,6,168,6,16,4,11
	.byte	'REQSLP',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	455
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	432
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR1_Bits',0,6,174,6,3
	.word	58385
	.byte	10
	.byte	'_Ifx_SCU_PMCSR2_Bits',0,6,177,6,16,4,11
	.byte	'REQSLP',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	455
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	432
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR2_Bits',0,6,183,6,3
	.word	58521
	.byte	10
	.byte	'_Ifx_SCU_PMCSR3_Bits',0,6,186,6,16,4,11
	.byte	'REQSLP',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	455
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	432
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR3_Bits',0,6,192,6,3
	.word	58657
	.byte	10
	.byte	'_Ifx_SCU_PMCSR4_Bits',0,6,195,6,16,4,11
	.byte	'REQSLP',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	455
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	432
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR4_Bits',0,6,201,6,3
	.word	58793
	.byte	10
	.byte	'_Ifx_SCU_PMCSR5_Bits',0,6,204,6,16,4,11
	.byte	'REQSLP',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	455
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	432
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR5_Bits',0,6,210,6,3
	.word	58929
	.byte	10
	.byte	'_Ifx_SCU_PMSTAT0_Bits',0,6,213,6,16,4,11
	.byte	'CPU0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'CPU1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'CPU2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'CPU3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'CPU4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'CPU5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	1006
	.byte	10,0,2,35,0,11
	.byte	'CPU0LS',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'CPU1LS',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'CPU2LS',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'CPU3LS',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	1006
	.byte	12,0,2,35,2,0,32
	.byte	'Ifx_SCU_PMSTAT0_Bits',0,6,227,6,3
	.word	59065
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,6,230,6,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'CPUIDLSEL',0,1
	.word	455
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'IRADIS',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	432
	.byte	11,8,2,35,0,11
	.byte	'CPUSEL',0,1
	.word	455
	.byte	3,5,2,35,3,11
	.byte	'STBYEVEN',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'STBYEV',0,1
	.word	455
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	455
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,6,241,6,3
	.word	59337
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR0_Bits',0,6,244,6,16,4,11
	.byte	'LJTEN',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'LJTOVEN',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'LJTOVIEN',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'LJTSTRT',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'LJTSTP',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'LJTCLR',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	1006
	.byte	6,4,2,35,0,11
	.byte	'SDSTEP',0,1
	.word	455
	.byte	4,0,2,35,1,11
	.byte	'VDTEN',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'VDTOVEN',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'VDTOVIEN',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'VDTSTRT',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'VDTSTP',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'VDTCLR',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	1006
	.byte	7,3,2,35,2,11
	.byte	'LPSLPEN',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	455
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMTRCSR0_Bits',0,6,135,7,3
	.word	59582
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR1_Bits',0,6,138,7,16,4,11
	.byte	'LJTCV',0,2
	.word	1006
	.byte	16,0,2,35,0,11
	.byte	'VDTCV',0,2
	.word	1006
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	455
	.byte	6,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMTRCSR1_Bits',0,6,143,7,3
	.word	59970
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR2_Bits',0,6,146,7,16,4,11
	.byte	'LDJMPREQ',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	2,4,2,35,0,11
	.byte	'LJTRUN',0,1
	.word	455
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	455
	.byte	2,0,2,35,0,11
	.byte	'LJTOV',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	455
	.byte	3,4,2,35,1,11
	.byte	'LJTOVCLR',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	455
	.byte	3,0,2,35,1,11
	.byte	'LJTCNT',0,2
	.word	1006
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_PMTRCSR2_Bits',0,6,157,7,3
	.word	60088
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR3_Bits',0,6,160,7,16,4,11
	.byte	'VDROOPREQ',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	2,4,2,35,0,11
	.byte	'VDTRUN',0,1
	.word	455
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	455
	.byte	2,0,2,35,0,11
	.byte	'VDTOV',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	455
	.byte	3,4,2,35,1,11
	.byte	'VDTOVCLR',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	455
	.byte	3,0,2,35,1,11
	.byte	'VDTCNT',0,2
	.word	1006
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	455
	.byte	6,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMTRCSR3_Bits',0,6,172,7,3
	.word	60331
	.byte	10
	.byte	'_Ifx_SCU_RSTCON_Bits',0,6,175,7,16,4,11
	.byte	'ESR0',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'ESR1',0,1
	.word	455
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	455
	.byte	2,2,2,35,0,11
	.byte	'SMU',0,1
	.word	455
	.byte	2,0,2,35,0,11
	.byte	'SW',0,1
	.word	455
	.byte	2,6,2,35,1,11
	.byte	'STM0',0,1
	.word	455
	.byte	2,4,2,35,1,11
	.byte	'STM1',0,1
	.word	455
	.byte	2,2,2,35,1,11
	.byte	'STM2',0,1
	.word	455
	.byte	2,0,2,35,1,11
	.byte	'STM3',0,1
	.word	455
	.byte	2,6,2,35,2,11
	.byte	'STM4',0,1
	.word	455
	.byte	2,4,2,35,2,11
	.byte	'STM5',0,1
	.word	455
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	1006
	.byte	10,0,2,35,2,0,32
	.byte	'Ifx_SCU_RSTCON_Bits',0,6,189,7,3
	.word	60598
	.byte	10
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,6,192,7,16,4,11
	.byte	'FRTO',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'CLRC',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'CSSX',0,2
	.word	1006
	.byte	6,3,2,35,0,11
	.byte	'reserved_13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'USRINFO',0,2
	.word	1006
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_RSTCON2_Bits',0,6,206,7,3
	.word	60857
	.byte	10
	.byte	'_Ifx_SCU_RSTCON3_Bits',0,6,209,7,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON3_Bits',0,6,212,7,3
	.word	61162
	.byte	10
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,6,215,7,16,4,11
	.byte	'ESR0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'ESR1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'SMU',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'SW',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'STM0',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'STM1',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'STM2',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'STM3',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'STM4',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'STM5',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	455
	.byte	5,0,2,35,1,11
	.byte	'PORST',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'CB0',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'CB1',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'CB3',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'EVRC',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'EVR33',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'SWD',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'HSMS',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'HSMA',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'STBYR',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'LBPORST',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'LBTERM',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	455
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,6,245,7,3
	.word	61243
	.byte	10
	.byte	'_Ifx_SCU_SEICON0_Bits',0,6,248,7,16,4,11
	.byte	'reserved_0',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	854
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	854
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_SCU_SEICON0_Bits',0,6,254,7,3
	.word	61792
	.byte	10
	.byte	'_Ifx_SCU_SEICON1_Bits',0,6,129,8,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_SEICON1_Bits',0,6,138,8,3
	.word	61922
	.byte	10
	.byte	'_Ifx_SCU_SEISR_Bits',0,6,141,8,16,4,11
	.byte	'AE',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	1006
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	1006
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SEISR_Bits',0,6,151,8,3
	.word	62113
	.byte	10
	.byte	'_Ifx_SCU_STCON_Bits',0,6,154,8,16,4,11
	.byte	'reserved_0',0,2
	.word	1006
	.byte	13,3,2,35,0,11
	.byte	'SFCBAE',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'CFCBAE',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'STP',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1006
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_STCON_Bits',0,6,161,8,3
	.word	62291
	.byte	10
	.byte	'_Ifx_SCU_STMEM1_Bits',0,6,164,8,16,4,11
	.byte	'MEM',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM1_Bits',0,6,167,8,3
	.word	62442
	.byte	10
	.byte	'_Ifx_SCU_STMEM2_Bits',0,6,170,8,16,4,11
	.byte	'MEM',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM2_Bits',0,6,173,8,3
	.word	62514
	.byte	10
	.byte	'_Ifx_SCU_STMEM3_Bits',0,6,176,8,16,4,11
	.byte	'MEM',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM3_Bits',0,6,179,8,3
	.word	62586
	.byte	10
	.byte	'_Ifx_SCU_STMEM4_Bits',0,6,182,8,16,4,11
	.byte	'MEM',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM4_Bits',0,6,185,8,3
	.word	62658
	.byte	10
	.byte	'_Ifx_SCU_STMEM5_Bits',0,6,188,8,16,4,11
	.byte	'MEM',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM5_Bits',0,6,191,8,3
	.word	62730
	.byte	10
	.byte	'_Ifx_SCU_STMEM6_Bits',0,6,194,8,16,4,11
	.byte	'MEM',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM6_Bits',0,6,197,8,3
	.word	62802
	.byte	10
	.byte	'_Ifx_SCU_STSTAT_Bits',0,6,200,8,16,4,11
	.byte	'HWCFG',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'FTM',0,1
	.word	455
	.byte	7,1,2,35,1,11
	.byte	'MODE',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'FCBAE',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'LUDIS',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'TRSTL',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'SPDEN',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'RAMINT',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	455
	.byte	3,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	455
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_STSTAT_Bits',0,6,216,8,3
	.word	62874
	.byte	10
	.byte	'_Ifx_SCU_SWAPCTRL_Bits',0,6,219,8,16,4,11
	.byte	'ADDRCFG',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'SPARE',0,2
	.word	1006
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1006
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SWAPCTRL_Bits',0,6,224,8,3
	.word	63203
	.byte	10
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,6,227,8,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'SWRSTREQ',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	6,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	455
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1006
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,6,234,8,3
	.word	63323
	.byte	10
	.byte	'_Ifx_SCU_SYSCON_Bits',0,6,237,8,16,4,11
	.byte	'CCTRIG0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'RAMINTM',0,1
	.word	455
	.byte	2,4,2,35,0,11
	.byte	'SETLUDIS',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'DDC',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	455
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1006
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SYSCON_Bits',0,6,249,8,3
	.word	63493
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON0_Bits',0,6,252,8,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'MODEN',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	1006
	.byte	6,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	455
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	455
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	455
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	455
	.byte	3,2,2,35,3,11
	.byte	'INSEL',0,1
	.word	455
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_SCU_SYSPLLCON0_Bits',0,6,137,9,3
	.word	63756
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON1_Bits',0,6,140,9,16,4,11
	.byte	'K2DIV',0,1
	.word	455
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	432
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLCON1_Bits',0,6,144,9,3
	.word	64035
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON2_Bits',0,6,147,9,16,4,11
	.byte	'MODCFG',0,2
	.word	1006
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1006
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SYSPLLCON2_Bits',0,6,151,9,3
	.word	64139
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLSTAT_Bits',0,6,154,9,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	455
	.byte	2,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'MODRUN',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLSTAT_Bits',0,6,164,9,3
	.word	64245
	.byte	10
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,6,167,9,16,4,11
	.byte	'ESR0T',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,6,174,9,3
	.word	64468
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS0_Bits',0,6,177,9,16,4,11
	.byte	'CPU0ESR0T',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'CPU0ESR1T',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'CPU0TRAP2T',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'CPU0SMUT',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	455
	.byte	4,0,2,35,0,11
	.byte	'CPU1ESR0T',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'CPU1ESR1T',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'CPU1TRAP2T',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'CPU1SMUT',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	455
	.byte	4,0,2,35,1,11
	.byte	'CPU2ESR0T',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'CPU2ESR1T',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'CPU2TRAP2T',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'CPU2SMUT',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	455
	.byte	4,0,2,35,2,11
	.byte	'CPU3ESR0T',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'CPU3ESR1T',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'CPU3TRAP2T',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'CPU3SMUT',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	455
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_TRAPDIS0_Bits',0,6,199,9,3
	.word	64616
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS1_Bits',0,6,202,9,16,4,11
	.byte	'CPU4ESR0T',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'CPU4ESR1T',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'CPU4TRAP2T',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'CPU4SMUT',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	455
	.byte	4,0,2,35,0,11
	.byte	'CPU5ESR0T',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'CPU5ESR1T',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'CPU5TRAP2T',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'CPU5SMUT',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	455
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1006
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_TRAPDIS1_Bits',0,6,215,9,3
	.word	65104
	.byte	10
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,6,218,9,16,4,11
	.byte	'ESR0T',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSET_Bits',0,6,225,9,3
	.word	65401
	.byte	10
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,6,228,9,16,4,11
	.byte	'ESR0T',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,6,235,9,3
	.word	65549
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,6,244,9,3
	.word	870
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,6,132,10,3
	.word	1028
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,6,148,10,3
	.word	1294
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,6,151,10,16,4,11
	.byte	'ENDINIT',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	854
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	854
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,6,157,10,3
	.word	65799
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,6,160,10,16,4,11
	.byte	'CLRIRF',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	455
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1006
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,6,173,10,3
	.word	65925
	.byte	10
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,6,176,10,16,4,11
	.byte	'AE',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	455
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	1006
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,6,189,10,3
	.word	66177
	.byte	12,6,197,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46833
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN00',0,6,202,10,3
	.word	66396
	.byte	12,6,205,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47392
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN01',0,6,210,10,3
	.word	66461
	.byte	12,6,213,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47471
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN10',0,6,218,10,3
	.word	66526
	.byte	12,6,221,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48031
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN11',0,6,226,10,3
	.word	66591
	.byte	12,6,229,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48112
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ARSTDIS',0,6,234,10,3
	.word	66656
	.byte	12,6,237,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48329
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON0',0,6,242,10,3
	.word	66721
	.byte	12,6,245,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48602
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON1',0,6,250,10,3
	.word	66786
	.byte	12,6,253,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48928
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON10',0,6,130,11,3
	.word	66851
	.byte	12,6,133,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49030
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON11',0,6,138,11,3
	.word	66917
	.byte	12,6,141,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49132
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON2',0,6,146,11,3
	.word	66983
	.byte	12,6,149,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49406
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON3',0,6,154,11,3
	.word	67048
	.byte	12,6,157,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49775
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON4',0,6,162,11,3
	.word	67113
	.byte	12,6,165,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49955
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON5',0,6,170,11,3
	.word	67178
	.byte	12,6,173,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50124
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON6',0,6,178,11,3
	.word	67243
	.byte	12,6,181,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50224
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON7',0,6,186,11,3
	.word	67308
	.byte	12,6,189,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50324
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON8',0,6,194,11,3
	.word	67373
	.byte	12,6,197,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50424
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON9',0,6,202,11,3
	.word	67438
	.byte	12,6,205,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50524
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CHIPID',0,6,210,11,3
	.word	67503
	.byte	12,6,213,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50727
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_DTSCLIM',0,6,218,11,3
	.word	67567
	.byte	12,6,221,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50959
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_DTSCSTAT',0,6,226,11,3
	.word	67632
	.byte	12,6,229,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51061
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EICON0',0,6,234,11,3
	.word	67698
	.byte	12,6,237,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51189
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EICON1',0,6,242,11,3
	.word	67762
	.byte	12,6,245,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51378
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EICR',0,6,250,11,3
	.word	67826
	.byte	12,6,253,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51742
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EIFILT',0,6,130,12,3
	.word	67888
	.byte	12,6,133,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52181
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EIFR',0,6,138,12,3
	.word	67952
	.byte	12,6,141,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52392
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EISR',0,6,146,12,3
	.word	68014
	.byte	12,6,149,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52568
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EMSR',0,6,154,12,3
	.word	68076
	.byte	12,6,157,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52762
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EMSSW',0,6,162,12,3
	.word	68138
	.byte	12,6,165,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52897
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX',0,6,170,12,3
	.word	68201
	.byte	12,6,173,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53033
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ESROCFG',0,6,178,12,3
	.word	68274
	.byte	12,6,181,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53144
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EXTCON',0,6,186,12,3
	.word	68339
	.byte	12,6,189,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53362
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_FDR',0,6,194,12,3
	.word	68403
	.byte	12,6,197,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53525
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_FMR',0,6,202,12,3
	.word	68464
	.byte	12,6,205,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53861
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ID',0,6,210,12,3
	.word	68525
	.byte	12,6,213,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53968
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_IGCR',0,6,218,12,3
	.word	68585
	.byte	12,6,221,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54420
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_IN',0,6,226,12,3
	.word	68647
	.byte	12,6,229,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54519
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_IOCR',0,6,234,12,3
	.word	68707
	.byte	12,6,237,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54669
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL0',0,6,242,12,3
	.word	68769
	.byte	12,6,245,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54907
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL1',0,6,250,12,3
	.word	68837
	.byte	12,6,253,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55068
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL2',0,6,130,13,3
	.word	68905
	.byte	12,6,133,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55174
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL3',0,6,138,13,3
	.word	68973
	.byte	12,6,141,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55260
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LCLCON0',0,6,146,13,3
	.word	69041
	.byte	12,6,149,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55428
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LCLCON1',0,6,154,13,3
	.word	69106
	.byte	12,6,157,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55596
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LCLTEST',0,6,162,13,3
	.word	69171
	.byte	12,6,165,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55910
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_MANID',0,6,170,13,3
	.word	69236
	.byte	12,6,173,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56021
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OMR',0,6,178,13,3
	.word	69299
	.byte	12,6,181,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56179
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OSCCON',0,6,186,13,3
	.word	69360
	.byte	12,6,189,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56590
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OUT',0,6,194,13,3
	.word	69424
	.byte	12,6,197,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56691
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OVCCON',0,6,202,13,3
	.word	69485
	.byte	12,6,205,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57009
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OVCENABLE',0,6,210,13,3
	.word	69549
	.byte	12,6,213,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57196
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PDISC',0,6,218,13,3
	.word	69616
	.byte	12,6,221,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57307
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PDR',0,6,226,13,3
	.word	69679
	.byte	12,6,229,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57440
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PDRR',0,6,234,13,3
	.word	69740
	.byte	12,6,237,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57643
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLCON0',0,6,242,13,3
	.word	69802
	.byte	12,6,245,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57883
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLCON1',0,6,250,13,3
	.word	69870
	.byte	12,6,253,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58027
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLSTAT',0,6,130,14,3
	.word	69938
	.byte	12,6,133,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58249
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR0',0,6,138,14,3
	.word	70006
	.byte	12,6,141,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58385
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR1',0,6,146,14,3
	.word	70070
	.byte	12,6,149,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58521
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR2',0,6,154,14,3
	.word	70134
	.byte	12,6,157,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58657
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR3',0,6,162,14,3
	.word	70198
	.byte	12,6,165,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58793
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR4',0,6,170,14,3
	.word	70262
	.byte	12,6,173,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58929
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR5',0,6,178,14,3
	.word	70326
	.byte	12,6,181,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59065
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMSTAT0',0,6,186,14,3
	.word	70390
	.byte	12,6,189,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59337
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMSWCR1',0,6,194,14,3
	.word	70455
	.byte	12,6,197,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59582
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMTRCSR0',0,6,202,14,3
	.word	70520
	.byte	12,6,205,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59970
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMTRCSR1',0,6,210,14,3
	.word	70586
	.byte	12,6,213,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60088
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMTRCSR2',0,6,218,14,3
	.word	70652
	.byte	12,6,221,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60331
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMTRCSR3',0,6,226,14,3
	.word	70718
	.byte	12,6,229,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60598
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON',0,6,234,14,3
	.word	70784
	.byte	12,6,237,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60857
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON2',0,6,242,14,3
	.word	70848
	.byte	12,6,245,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61162
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON3',0,6,250,14,3
	.word	70913
	.byte	12,6,253,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61243
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTSTAT',0,6,130,15,3
	.word	70978
	.byte	12,6,133,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61792
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SEICON0',0,6,138,15,3
	.word	71043
	.byte	12,6,141,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61922
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SEICON1',0,6,146,15,3
	.word	71108
	.byte	12,6,149,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62113
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SEISR',0,6,154,15,3
	.word	71173
	.byte	12,6,157,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62291
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STCON',0,6,162,15,3
	.word	71236
	.byte	12,6,165,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62442
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM1',0,6,170,15,3
	.word	71299
	.byte	12,6,173,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62514
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM2',0,6,178,15,3
	.word	71363
	.byte	12,6,181,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62586
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM3',0,6,186,15,3
	.word	71427
	.byte	12,6,189,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62658
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM4',0,6,194,15,3
	.word	71491
	.byte	12,6,197,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62730
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM5',0,6,202,15,3
	.word	71555
	.byte	12,6,205,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62802
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM6',0,6,210,15,3
	.word	71619
	.byte	12,6,213,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62874
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STSTAT',0,6,218,15,3
	.word	71683
	.byte	12,6,221,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63203
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SWAPCTRL',0,6,226,15,3
	.word	71747
	.byte	12,6,229,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63323
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SWRSTCON',0,6,234,15,3
	.word	71813
	.byte	12,6,237,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63493
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSCON',0,6,242,15,3
	.word	71879
	.byte	12,6,245,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63756
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLCON0',0,6,250,15,3
	.word	71943
	.byte	12,6,253,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64035
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLCON1',0,6,130,16,3
	.word	72011
	.byte	12,6,133,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64139
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLCON2',0,6,138,16,3
	.word	72079
	.byte	12,6,141,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64245
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLSTAT',0,6,146,16,3
	.word	72147
	.byte	12,6,149,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64468
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPCLR',0,6,154,16,3
	.word	72215
	.byte	12,6,157,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64616
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPDIS0',0,6,162,16,3
	.word	72280
	.byte	12,6,165,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65104
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPDIS1',0,6,170,16,3
	.word	72346
	.byte	12,6,173,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65401
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSET',0,6,178,16,3
	.word	72412
	.byte	12,6,181,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65549
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSTAT',0,6,186,16,3
	.word	72477
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON0',0,6,194,16,3
	.word	966
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON1',0,6,202,16,3
	.word	1254
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_SR',0,6,210,16,3
	.word	1485
	.byte	12,6,213,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65799
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_CON0',0,6,218,16,3
	.word	72628
	.byte	12,6,221,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65925
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_CON1',0,6,226,16,3
	.word	72695
	.byte	12,6,229,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66177
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_SR',0,6,234,16,3
	.word	72762
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX',0,6,246,16,25,4,13
	.byte	'ESRCFGX',0
	.word	68201
	.byte	4,2,35,0,0,14
	.word	72827
	.byte	32
	.byte	'Ifx_SCU_ESRCFGX',0,6,249,16,3
	.word	72868
	.byte	14
	.word	1525
	.byte	32
	.byte	'Ifx_SCU_WDTCPU',0,6,141,17,3
	.word	72898
	.byte	10
	.byte	'_Ifx_SCU_WDTS',0,6,156,17,25,12,13
	.byte	'CON0',0
	.word	72628
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	72695
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	72762
	.byte	4,2,35,8,0,14
	.word	72927
	.byte	32
	.byte	'Ifx_SCU_WDTS',0,6,161,17,3
	.word	72988
	.byte	15,8
	.word	72827
	.byte	16,1,0,14
	.word	73015
	.byte	15,16
	.word	67826
	.byte	16,3,0,15,16
	.word	68585
	.byte	16,3,0,15,72
	.word	1525
	.byte	16,5,0,14
	.word	73047
	.byte	14
	.word	72927
	.byte	15,176,2
	.word	455
	.byte	16,175,2,0,10
	.byte	'_Ifx_SCU',0,6,176,17,25,128,8,13
	.byte	'reserved_0',0
	.word	4830
	.byte	8,2,35,0,13
	.byte	'ID',0
	.word	68525
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	3010
	.byte	4,2,35,12,13
	.byte	'OSCCON',0
	.word	69360
	.byte	4,2,35,16,13
	.byte	'SYSPLLSTAT',0
	.word	72147
	.byte	4,2,35,20,13
	.byte	'SYSPLLCON0',0
	.word	71943
	.byte	4,2,35,24,13
	.byte	'SYSPLLCON1',0
	.word	72011
	.byte	4,2,35,28,13
	.byte	'SYSPLLCON2',0
	.word	72079
	.byte	4,2,35,32,13
	.byte	'PERPLLSTAT',0
	.word	69938
	.byte	4,2,35,36,13
	.byte	'PERPLLCON0',0
	.word	69802
	.byte	4,2,35,40,13
	.byte	'PERPLLCON1',0
	.word	69870
	.byte	4,2,35,44,13
	.byte	'CCUCON0',0
	.word	66721
	.byte	4,2,35,48,13
	.byte	'CCUCON1',0
	.word	66786
	.byte	4,2,35,52,13
	.byte	'FDR',0
	.word	68403
	.byte	4,2,35,56,13
	.byte	'EXTCON',0
	.word	68339
	.byte	4,2,35,60,13
	.byte	'CCUCON2',0
	.word	66983
	.byte	4,2,35,64,13
	.byte	'CCUCON3',0
	.word	67048
	.byte	4,2,35,68,13
	.byte	'CCUCON4',0
	.word	67113
	.byte	4,2,35,72,13
	.byte	'CCUCON5',0
	.word	67178
	.byte	4,2,35,76,13
	.byte	'RSTSTAT',0
	.word	70978
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	3010
	.byte	4,2,35,84,13
	.byte	'RSTCON',0
	.word	70784
	.byte	4,2,35,88,13
	.byte	'ARSTDIS',0
	.word	66656
	.byte	4,2,35,92,13
	.byte	'SWRSTCON',0
	.word	71813
	.byte	4,2,35,96,13
	.byte	'RSTCON2',0
	.word	70848
	.byte	4,2,35,100,13
	.byte	'RSTCON3',0
	.word	70913
	.byte	4,2,35,104,13
	.byte	'reserved_6C',0
	.word	3010
	.byte	4,2,35,108,13
	.byte	'ESRCFGX',0
	.word	73024
	.byte	8,2,35,112,13
	.byte	'ESROCFG',0
	.word	68274
	.byte	4,2,35,120,13
	.byte	'SYSCON',0
	.word	71879
	.byte	4,2,35,124,13
	.byte	'CCUCON6',0
	.word	67243
	.byte	4,3,35,128,1,13
	.byte	'CCUCON7',0
	.word	67308
	.byte	4,3,35,132,1,13
	.byte	'CCUCON8',0
	.word	67373
	.byte	4,3,35,136,1,13
	.byte	'CCUCON9',0
	.word	67438
	.byte	4,3,35,140,1,13
	.byte	'CCUCON10',0
	.word	66851
	.byte	4,3,35,144,1,13
	.byte	'CCUCON11',0
	.word	66917
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	3010
	.byte	4,3,35,152,1,13
	.byte	'PDR',0
	.word	69679
	.byte	4,3,35,156,1,13
	.byte	'IOCR',0
	.word	68707
	.byte	4,3,35,160,1,13
	.byte	'OUT',0
	.word	69424
	.byte	4,3,35,164,1,13
	.byte	'OMR',0
	.word	69299
	.byte	4,3,35,168,1,13
	.byte	'IN',0
	.word	68647
	.byte	4,3,35,172,1,13
	.byte	'reserved_B0',0
	.word	13233
	.byte	16,3,35,176,1,13
	.byte	'STSTAT',0
	.word	71683
	.byte	4,3,35,192,1,13
	.byte	'STCON',0
	.word	71236
	.byte	4,3,35,196,1,13
	.byte	'PMCSR0',0
	.word	70006
	.byte	4,3,35,200,1,13
	.byte	'PMCSR1',0
	.word	70070
	.byte	4,3,35,204,1,13
	.byte	'PMCSR2',0
	.word	70134
	.byte	4,3,35,208,1,13
	.byte	'PMCSR3',0
	.word	70198
	.byte	4,3,35,212,1,13
	.byte	'PMCSR4',0
	.word	70262
	.byte	4,3,35,216,1,13
	.byte	'PMCSR5',0
	.word	70326
	.byte	4,3,35,220,1,13
	.byte	'reserved_E0',0
	.word	3010
	.byte	4,3,35,224,1,13
	.byte	'PMSTAT0',0
	.word	70390
	.byte	4,3,35,228,1,13
	.byte	'PMSWCR1',0
	.word	70455
	.byte	4,3,35,232,1,13
	.byte	'reserved_EC',0
	.word	13233
	.byte	16,3,35,236,1,13
	.byte	'EMSR',0
	.word	68076
	.byte	4,3,35,252,1,13
	.byte	'EMSSW',0
	.word	68138
	.byte	4,3,35,128,2,13
	.byte	'DTSCSTAT',0
	.word	67632
	.byte	4,3,35,132,2,13
	.byte	'DTSCLIM',0
	.word	67567
	.byte	4,3,35,136,2,13
	.byte	'reserved_10C',0
	.word	16345
	.byte	20,3,35,140,2,13
	.byte	'TRAPDIS1',0
	.word	72346
	.byte	4,3,35,160,2,13
	.byte	'TRAPSTAT',0
	.word	72477
	.byte	4,3,35,164,2,13
	.byte	'TRAPSET',0
	.word	72412
	.byte	4,3,35,168,2,13
	.byte	'TRAPCLR',0
	.word	72215
	.byte	4,3,35,172,2,13
	.byte	'TRAPDIS0',0
	.word	72280
	.byte	4,3,35,176,2,13
	.byte	'LCLCON0',0
	.word	69041
	.byte	4,3,35,180,2,13
	.byte	'LCLCON1',0
	.word	69106
	.byte	4,3,35,184,2,13
	.byte	'LCLTEST',0
	.word	69171
	.byte	4,3,35,188,2,13
	.byte	'CHIPID',0
	.word	67503
	.byte	4,3,35,192,2,13
	.byte	'MANID',0
	.word	69236
	.byte	4,3,35,196,2,13
	.byte	'reserved_148',0
	.word	3010
	.byte	4,3,35,200,2,13
	.byte	'SWAPCTRL',0
	.word	71747
	.byte	4,3,35,204,2,13
	.byte	'reserved_150',0
	.word	16345
	.byte	20,3,35,208,2,13
	.byte	'LBISTCTRL0',0
	.word	68769
	.byte	4,3,35,228,2,13
	.byte	'LBISTCTRL1',0
	.word	68837
	.byte	4,3,35,232,2,13
	.byte	'LBISTCTRL2',0
	.word	68905
	.byte	4,3,35,236,2,13
	.byte	'LBISTCTRL3',0
	.word	68973
	.byte	4,3,35,240,2,13
	.byte	'reserved_174',0
	.word	13233
	.byte	16,3,35,244,2,13
	.byte	'STMEM1',0
	.word	71299
	.byte	4,3,35,132,3,13
	.byte	'STMEM2',0
	.word	71363
	.byte	4,3,35,136,3,13
	.byte	'PDISC',0
	.word	69616
	.byte	4,3,35,140,3,13
	.byte	'reserved_190',0
	.word	4830
	.byte	8,3,35,144,3,13
	.byte	'PMTRCSR0',0
	.word	70520
	.byte	4,3,35,152,3,13
	.byte	'PMTRCSR1',0
	.word	70586
	.byte	4,3,35,156,3,13
	.byte	'PMTRCSR2',0
	.word	70652
	.byte	4,3,35,160,3,13
	.byte	'PMTRCSR3',0
	.word	70718
	.byte	4,3,35,164,3,13
	.byte	'reserved_1A8',0
	.word	4201
	.byte	24,3,35,168,3,13
	.byte	'STMEM3',0
	.word	71427
	.byte	4,3,35,192,3,13
	.byte	'STMEM4',0
	.word	71491
	.byte	4,3,35,196,3,13
	.byte	'STMEM5',0
	.word	71555
	.byte	4,3,35,200,3,13
	.byte	'STMEM6',0
	.word	71619
	.byte	4,3,35,204,3,13
	.byte	'reserved_1D0',0
	.word	13233
	.byte	16,3,35,208,3,13
	.byte	'OVCENABLE',0
	.word	69549
	.byte	4,3,35,224,3,13
	.byte	'OVCCON',0
	.word	69485
	.byte	4,3,35,228,3,13
	.byte	'reserved_1E8',0
	.word	13404
	.byte	36,3,35,232,3,13
	.byte	'EIFILT',0
	.word	67888
	.byte	4,3,35,140,4,13
	.byte	'EICR',0
	.word	73029
	.byte	16,3,35,144,4,13
	.byte	'EIFR',0
	.word	67952
	.byte	4,3,35,160,4,13
	.byte	'FMR',0
	.word	68464
	.byte	4,3,35,164,4,13
	.byte	'PDRR',0
	.word	69740
	.byte	4,3,35,168,4,13
	.byte	'IGCR',0
	.word	73038
	.byte	16,3,35,172,4,13
	.byte	'reserved_23C',0
	.word	13233
	.byte	16,3,35,188,4,13
	.byte	'WDTCPU',0
	.word	73056
	.byte	72,3,35,204,4,13
	.byte	'reserved_294',0
	.word	4830
	.byte	8,3,35,148,5,13
	.byte	'EICON0',0
	.word	67698
	.byte	4,3,35,156,5,13
	.byte	'EICON1',0
	.word	67762
	.byte	4,3,35,160,5,13
	.byte	'EISR',0
	.word	68014
	.byte	4,3,35,164,5,13
	.byte	'WDTS',0
	.word	73061
	.byte	12,3,35,168,5,13
	.byte	'SEICON0',0
	.word	71043
	.byte	4,3,35,180,5,13
	.byte	'SEICON1',0
	.word	71108
	.byte	4,3,35,184,5,13
	.byte	'SEISR',0
	.word	71173
	.byte	4,3,35,188,5,13
	.byte	'reserved_2C0',0
	.word	73066
	.byte	176,2,3,35,192,5,13
	.byte	'ACCEN11',0
	.word	66591
	.byte	4,3,35,240,7,13
	.byte	'ACCEN10',0
	.word	66526
	.byte	4,3,35,244,7,13
	.byte	'ACCEN01',0
	.word	66461
	.byte	4,3,35,248,7,13
	.byte	'ACCEN00',0
	.word	66396
	.byte	4,3,35,252,7,0,14
	.word	73077
	.byte	32
	.byte	'Ifx_SCU',0,6,166,18,3
	.word	75198
	.byte	17,7,73,9,1,18
	.byte	'IfxPort_ControlledBy_port',0,0,18
	.byte	'IfxPort_ControlledBy_hsct',0,1,0,32
	.byte	'IfxPort_ControlledBy',0,7,77,3
	.word	75220
	.byte	17,7,81,9,1,18
	.byte	'IfxPort_InputMode_undefined',0,127,18
	.byte	'IfxPort_InputMode_noPullDevice',0,0,18
	.byte	'IfxPort_InputMode_pullDown',0,8,18
	.byte	'IfxPort_InputMode_pullUp',0,16,0,32
	.byte	'IfxPort_InputMode',0,7,87,3
	.word	75311
	.byte	17,7,91,9,1,18
	.byte	'IfxPort_LvdsMode_high',0,0,18
	.byte	'IfxPort_LvdsMode_medium',0,1,0,32
	.byte	'IfxPort_LvdsMode',0,7,95,3
	.word	75462
	.byte	32
	.byte	'IfxPort_OutputIdx',0,7,136,1,3
	.word	9601
	.byte	32
	.byte	'IfxPort_OutputMode',0,7,145,1,3
	.word	9505
	.byte	17,7,151,1,9,1,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,18
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,18
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,18
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,18
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed1',0,12,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed2',0,13,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed3',0,14,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed4',0,15,0,32
	.byte	'IfxPort_PadDriver',0,7,165,1,3
	.word	75598
	.byte	17,7,169,1,9,1,18
	.byte	'IfxPort_PadSupply_3v',0,0,18
	.byte	'IfxPort_PadSupply_5v',0,1,0,32
	.byte	'IfxPort_PadSupply',0,7,173,1,3
	.word	76048
	.byte	17,7,177,1,9,1,18
	.byte	'IfxPort_PinFunctionMode_digital',0,0,18
	.byte	'IfxPort_PinFunctionMode_analog',0,1,0,32
	.byte	'IfxPort_PinFunctionMode',0,7,181,1,3
	.word	76128
	.byte	32
	.byte	'IfxPort_State',0,7,193,1,3
	.word	9914
	.byte	34,7,246,1,9,8,13
	.byte	'port',0
	.word	9500
	.byte	4,2,35,0,13
	.byte	'pinIndex',0
	.word	455
	.byte	1,2,35,4,0,32
	.byte	'IfxPort_Pin',0,7,250,1,3
	.word	76258
	.byte	34,21,56,15,20,13
	.byte	'module',0
	.word	26907
	.byte	4,2,35,0,13
	.byte	'groupId',0
	.word	41135
	.byte	1,2,35,4,13
	.byte	'pin',0
	.word	76258
	.byte	8,2,35,8,13
	.byte	'select',0
	.word	9601
	.byte	1,2,35,16,0,20
	.word	76318
	.byte	32
	.byte	'IfxEvadc_GxBfl_Out',0,21,62,3
	.word	76386
	.byte	34,21,65,15,16,13
	.byte	'module',0
	.word	26907
	.byte	4,2,35,0,13
	.byte	'pin',0
	.word	76258
	.byte	8,2,35,4,13
	.byte	'select',0
	.word	9601
	.byte	1,2,35,12,0,20
	.word	76418
	.byte	32
	.byte	'IfxEvadc_Emux_Out',0,21,70,3
	.word	76469
	.byte	10
	.byte	'_Ifx_CPU_A_Bits',0,22,68,16,4,11
	.byte	'ADDR',0,4
	.word	854
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_A_Bits',0,22,71,3
	.word	76500
	.byte	10
	.byte	'_Ifx_CPU_BIV_Bits',0,22,74,16,4,11
	.byte	'VSS',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'BIV',0,4
	.word	854
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_BIV_Bits',0,22,78,3
	.word	76561
	.byte	10
	.byte	'_Ifx_CPU_BLK_OMASK_Bits',0,22,81,16,4,11
	.byte	'reserved_0',0,4
	.word	854
	.byte	5,27,2,35,0,11
	.byte	'OMASK',0,4
	.word	854
	.byte	12,15,2,35,0,11
	.byte	'ONE',0,4
	.word	854
	.byte	11,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	854
	.byte	4,0,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_OMASK_Bits',0,22,87,3
	.word	76640
	.byte	10
	.byte	'_Ifx_CPU_BLK_OTAR_Bits',0,22,90,16,4,11
	.byte	'reserved_0',0,4
	.word	854
	.byte	5,27,2,35,0,11
	.byte	'TBASE',0,4
	.word	854
	.byte	23,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	854
	.byte	4,0,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_OTAR_Bits',0,22,95,3
	.word	76778
	.byte	10
	.byte	'_Ifx_CPU_BLK_RABR_Bits',0,22,98,16,4,11
	.byte	'reserved_0',0,4
	.word	854
	.byte	5,27,2,35,0,11
	.byte	'OBASE',0,4
	.word	854
	.byte	17,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	854
	.byte	2,8,2,35,0,11
	.byte	'OMEM',0,4
	.word	854
	.byte	4,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	854
	.byte	3,1,2,35,0,11
	.byte	'OVEN',0,4
	.word	854
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_RABR_Bits',0,22,106,3
	.word	76899
	.byte	10
	.byte	'_Ifx_CPU_BTV_Bits',0,22,109,16,4,11
	.byte	'reserved_0',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'BTV',0,4
	.word	854
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_BTV_Bits',0,22,113,3
	.word	77075
	.byte	10
	.byte	'_Ifx_CPU_CCNT_Bits',0,22,116,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	854
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	854
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_CCNT_Bits',0,22,120,3
	.word	77161
	.byte	10
	.byte	'_Ifx_CPU_CCTRL_Bits',0,22,123,16,4,11
	.byte	'CM',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'CE',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'M1',0,4
	.word	854
	.byte	3,27,2,35,0,11
	.byte	'M2',0,4
	.word	854
	.byte	3,24,2,35,0,11
	.byte	'M3',0,4
	.word	854
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	854
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_CPU_CCTRL_Bits',0,22,131,1,3
	.word	77250
	.byte	10
	.byte	'_Ifx_CPU_COMPAT_Bits',0,22,134,1,16,4,11
	.byte	'reserved_0',0,4
	.word	854
	.byte	3,29,2,35,0,11
	.byte	'RM',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'SP',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	854
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_COMPAT_Bits',0,22,140,1,3
	.word	77397
	.byte	10
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,22,143,1,16,4,11
	.byte	'CORE_ID',0,4
	.word	854
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	854
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_CORE_ID_Bits',0,22,147,1,3
	.word	77526
	.byte	10
	.byte	'_Ifx_CPU_CPR_L_Bits',0,22,150,1,16,4,11
	.byte	'reserved_0',0,4
	.word	854
	.byte	5,27,2,35,0,11
	.byte	'LOWBND',0,4
	.word	854
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_L_Bits',0,22,154,1,3
	.word	77626
	.byte	10
	.byte	'_Ifx_CPU_CPR_U_Bits',0,22,157,1,16,4,11
	.byte	'reserved_0',0,4
	.word	854
	.byte	5,27,2,35,0,11
	.byte	'UPPBND',0,4
	.word	854
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_U_Bits',0,22,161,1,3
	.word	77721
	.byte	10
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,22,164,1,16,4,11
	.byte	'MOD_REV',0,4
	.word	854
	.byte	8,24,2,35,0,11
	.byte	'MOD_32B',0,4
	.word	854
	.byte	8,16,2,35,0,11
	.byte	'MOD',0,4
	.word	854
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPU_ID_Bits',0,22,169,1,3
	.word	77816
	.byte	10
	.byte	'_Ifx_CPU_CPXE_Bits',0,22,172,1,16,4,11
	.byte	'XE_N',0,4
	.word	854
	.byte	10,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	854
	.byte	22,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPXE_Bits',0,22,176,1,3
	.word	77926
	.byte	10
	.byte	'_Ifx_CPU_CREVT_Bits',0,22,179,1,16,4,11
	.byte	'EVTA',0,4
	.word	854
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	854
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	854
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_CREVT_Bits',0,22,187,1,3
	.word	78018
	.byte	10
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,22,190,1,16,4,11
	.byte	'CID',0,4
	.word	854
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	854
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_CUS_ID_Bits',0,22,194,1,3
	.word	78172
	.byte	10
	.byte	'_Ifx_CPU_D_Bits',0,22,197,1,16,4,11
	.byte	'DATA',0,4
	.word	854
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_D_Bits',0,22,200,1,3
	.word	78266
	.byte	10
	.byte	'_Ifx_CPU_DATR_Bits',0,22,203,1,16,4,11
	.byte	'reserved_0',0,4
	.word	854
	.byte	3,29,2,35,0,11
	.byte	'SBE',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	854
	.byte	5,23,2,35,0,11
	.byte	'CWE',0,4
	.word	854
	.byte	1,22,2,35,0,11
	.byte	'CFE',0,4
	.word	854
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	854
	.byte	3,18,2,35,0,11
	.byte	'SOE',0,4
	.word	854
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	854
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	854
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_DATR_Bits',0,22,214,1,3
	.word	78329
	.byte	10
	.byte	'_Ifx_CPU_DBGSR_Bits',0,22,217,1,16,4,11
	.byte	'DE',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'HALT',0,4
	.word	854
	.byte	2,29,2,35,0,11
	.byte	'SIH',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'SUSP',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'PREVSUSP',0,4
	.word	854
	.byte	1,25,2,35,0,11
	.byte	'PEVT',0,4
	.word	854
	.byte	1,24,2,35,0,11
	.byte	'EVTSRC',0,4
	.word	854
	.byte	5,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	854
	.byte	19,0,2,35,0,0,32
	.byte	'Ifx_CPU_DBGSR_Bits',0,22,228,1,3
	.word	78555
	.byte	10
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,22,231,1,16,4,11
	.byte	'DTA',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	854
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_DBGTCR_Bits',0,22,235,1,3
	.word	78770
	.byte	10
	.byte	'_Ifx_CPU_DCON0_Bits',0,22,238,1,16,4,11
	.byte	'reserved_0',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'DCBYP',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	854
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_CPU_DCON0_Bits',0,22,243,1,3
	.word	78864
	.byte	10
	.byte	'_Ifx_CPU_DCON2_Bits',0,22,246,1,16,4,11
	.byte	'DCACHE_SZE',0,4
	.word	854
	.byte	16,16,2,35,0,11
	.byte	'DSCRATCH_SZE',0,4
	.word	854
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_DCON2_Bits',0,22,250,1,3
	.word	78980
	.byte	10
	.byte	'_Ifx_CPU_DCX_Bits',0,22,253,1,16,4,11
	.byte	'reserved_0',0,4
	.word	854
	.byte	6,26,2,35,0,11
	.byte	'DCXVALUE',0,4
	.word	854
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_CPU_DCX_Bits',0,22,129,2,3
	.word	79081
	.byte	10
	.byte	'_Ifx_CPU_DEADD_Bits',0,22,132,2,16,4,11
	.byte	'ERROR_ADDRESS',0,4
	.word	854
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_DEADD_Bits',0,22,135,2,3
	.word	79174
	.byte	10
	.byte	'_Ifx_CPU_DIEAR_Bits',0,22,138,2,16,4,11
	.byte	'TA',0,4
	.word	854
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_DIEAR_Bits',0,22,141,2,3
	.word	79254
	.byte	10
	.byte	'_Ifx_CPU_DIETR_Bits',0,22,144,2,16,4,11
	.byte	'IED',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	854
	.byte	6,21,2,35,0,11
	.byte	'IE_UNC',0,4
	.word	854
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	854
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	854
	.byte	1,18,2,35,0,11
	.byte	'IE_DLMU',0,4
	.word	854
	.byte	1,17,2,35,0,11
	.byte	'IE_LPB',0,4
	.word	854
	.byte	1,16,2,35,0,11
	.byte	'IE_MTMV',0,4
	.word	854
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	854
	.byte	15,0,2,35,0,0,32
	.byte	'Ifx_CPU_DIETR_Bits',0,22,159,2,3
	.word	79323
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,22,162,2,16,4,11
	.byte	'EN0',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	854
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	854
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	854
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	854
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	854
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	854
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	854
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	854
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	854
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	854
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	854
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	854
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	854
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	854
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	854
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	854
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	854
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	854
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	854
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	854
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	854
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	854
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	854
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	854
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	854
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	854
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,22,196,2,3
	.word	79607
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,22,199,2,16,4,11
	.byte	'EN0',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	854
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	854
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	854
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	854
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	854
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	854
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	854
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	854
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	854
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	854
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	854
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	854
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	854
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	854
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	854
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	854
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	854
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	854
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	854
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	854
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	854
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	854
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	854
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	854
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	854
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	854
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,22,233,2,3
	.word	80198
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,22,236,2,16,4,11
	.byte	'EN32',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	854
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	854
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	854
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	854
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	854
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	854
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	854
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	854
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	854
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	854
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	854
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	854
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	854
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	854
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	854
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	854
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	854
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	854
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	854
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	854
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	854
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	854
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	854
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	854
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	854
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	854
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,22,142,3,3
	.word	80789
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,22,145,3,16,4,11
	.byte	'EN32',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	854
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	854
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	854
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	854
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	854
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	854
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	854
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	854
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	854
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	854
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	854
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	854
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	854
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	854
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	854
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	854
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	854
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	854
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	854
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	854
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	854
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	854
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	854
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	854
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	854
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	854
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,22,179,3,3
	.word	81390
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,22,182,3,16,4,11
	.byte	'reserved_0',0,4
	.word	854
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	854
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,22,186,3,3
	.word	81991
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,22,189,3,16,4,11
	.byte	'reserved_0',0,4
	.word	854
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	854
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,22,193,3,3
	.word	82106
	.byte	10
	.byte	'_Ifx_CPU_DMS_Bits',0,22,196,3,16,4,11
	.byte	'reserved_0',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'DMSVALUE',0,4
	.word	854
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_DMS_Bits',0,22,200,3,3
	.word	82221
	.byte	10
	.byte	'_Ifx_CPU_DPRE_Bits',0,22,203,3,16,4,11
	.byte	'RE_N',0,4
	.word	854
	.byte	18,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	854
	.byte	14,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPRE_Bits',0,22,207,3,3
	.word	82314
	.byte	10
	.byte	'_Ifx_CPU_DPR_L_Bits',0,22,210,3,16,4,11
	.byte	'reserved_0',0,4
	.word	854
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	854
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_L_Bits',0,22,214,3,3
	.word	82406
	.byte	10
	.byte	'_Ifx_CPU_DPR_U_Bits',0,22,217,3,16,4,11
	.byte	'reserved_0',0,4
	.word	854
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	854
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_U_Bits',0,22,221,3,3
	.word	82501
	.byte	10
	.byte	'_Ifx_CPU_DPWE_Bits',0,22,224,3,16,4,11
	.byte	'WE_N',0,4
	.word	854
	.byte	18,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	854
	.byte	14,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPWE_Bits',0,22,228,3,3
	.word	82596
	.byte	10
	.byte	'_Ifx_CPU_DSTR_Bits',0,22,231,3,16,4,11
	.byte	'SRE',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'GAE',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'LBE',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'DRE',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	854
	.byte	2,26,2,35,0,11
	.byte	'CRE',0,4
	.word	854
	.byte	1,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	854
	.byte	7,18,2,35,0,11
	.byte	'DTME',0,4
	.word	854
	.byte	1,17,2,35,0,11
	.byte	'LOE',0,4
	.word	854
	.byte	1,16,2,35,0,11
	.byte	'SDE',0,4
	.word	854
	.byte	1,15,2,35,0,11
	.byte	'SCE',0,4
	.word	854
	.byte	1,14,2,35,0,11
	.byte	'CAC',0,4
	.word	854
	.byte	1,13,2,35,0,11
	.byte	'MPE',0,4
	.word	854
	.byte	1,12,2,35,0,11
	.byte	'CLE',0,4
	.word	854
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	854
	.byte	3,8,2,35,0,11
	.byte	'ALN',0,4
	.word	854
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	854
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_CPU_DSTR_Bits',0,22,250,3,3
	.word	82688
	.byte	10
	.byte	'_Ifx_CPU_EXEVT_Bits',0,22,253,3,16,4,11
	.byte	'EVTA',0,4
	.word	854
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	854
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	854
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_EXEVT_Bits',0,22,133,4,3
	.word	83027
	.byte	10
	.byte	'_Ifx_CPU_FCX_Bits',0,22,136,4,16,4,11
	.byte	'FCXO',0,4
	.word	854
	.byte	16,16,2,35,0,11
	.byte	'FCXS',0,4
	.word	854
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	854
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_FCX_Bits',0,22,141,4,3
	.word	83181
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON0_Bits',0,22,144,4,16,4,11
	.byte	'TAG1',0,4
	.word	854
	.byte	6,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	854
	.byte	2,24,2,35,0,11
	.byte	'TAG2',0,4
	.word	854
	.byte	6,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	854
	.byte	2,16,2,35,0,11
	.byte	'TAG3',0,4
	.word	854
	.byte	6,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	854
	.byte	2,8,2,35,0,11
	.byte	'TAG4',0,4
	.word	854
	.byte	6,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	854
	.byte	2,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON0_Bits',0,22,154,4,3
	.word	83287
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON1_Bits',0,22,157,4,16,4,11
	.byte	'STALL',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	854
	.byte	15,16,2,35,0,11
	.byte	'MASKUECC',0,4
	.word	854
	.byte	2,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	854
	.byte	6,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	854
	.byte	2,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	854
	.byte	6,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON1_Bits',0,22,165,4,3
	.word	83505
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON2_Bits',0,22,168,4,16,4,11
	.byte	'RECDIS',0,4
	.word	854
	.byte	2,30,2,35,0,11
	.byte	'ECCCORDIS',0,4
	.word	854
	.byte	2,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	854
	.byte	4,24,2,35,0,11
	.byte	'HMARGIN',0,4
	.word	854
	.byte	2,22,2,35,0,11
	.byte	'MSEL',0,4
	.word	854
	.byte	2,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	854
	.byte	4,16,2,35,0,11
	.byte	'ECCSCLR',0,4
	.word	854
	.byte	2,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	854
	.byte	6,8,2,35,0,11
	.byte	'SBABCLR',0,4
	.word	854
	.byte	2,6,2,35,0,11
	.byte	'DBABCLR',0,4
	.word	854
	.byte	2,4,2,35,0,11
	.byte	'MBABCLR',0,4
	.word	854
	.byte	2,2,2,35,0,11
	.byte	'ZBABCLR',0,4
	.word	854
	.byte	2,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON2_Bits',0,22,182,4,3
	.word	83696
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON3_Bits',0,22,185,4,16,4,11
	.byte	'ECCERRINJ',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'EDCERRINJ',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'SBABERRINJ',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'DBABERRINJ',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'MBABERRINJ',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'ZBABERRINJ',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'SBERERRINJ',0,4
	.word	854
	.byte	1,25,2,35,0,11
	.byte	'DBERERRINJ',0,4
	.word	854
	.byte	1,24,2,35,0,11
	.byte	'NVMCERRINJ',0,4
	.word	854
	.byte	1,23,2,35,0,11
	.byte	'FLCONERRINJ',0,4
	.word	854
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	854
	.byte	22,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON3_Bits',0,22,198,4,3
	.word	83996
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON4_Bits',0,22,201,4,16,4,11
	.byte	'DDIS',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	854
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON4_Bits',0,22,205,4,3
	.word	84301
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,22,208,4,16,4,11
	.byte	'TST',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'TCL',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	854
	.byte	6,24,2,35,0,11
	.byte	'RM',0,4
	.word	854
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	854
	.byte	8,14,2,35,0,11
	.byte	'FXE',0,4
	.word	854
	.byte	1,13,2,35,0,11
	.byte	'FUE',0,4
	.word	854
	.byte	1,12,2,35,0,11
	.byte	'FZE',0,4
	.word	854
	.byte	1,11,2,35,0,11
	.byte	'FVE',0,4
	.word	854
	.byte	1,10,2,35,0,11
	.byte	'FIE',0,4
	.word	854
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	854
	.byte	3,6,2,35,0,11
	.byte	'FX',0,4
	.word	854
	.byte	1,5,2,35,0,11
	.byte	'FU',0,4
	.word	854
	.byte	1,4,2,35,0,11
	.byte	'FZ',0,4
	.word	854
	.byte	1,3,2,35,0,11
	.byte	'FV',0,4
	.word	854
	.byte	1,2,2,35,0,11
	.byte	'FI',0,4
	.word	854
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	854
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,22,227,4,3
	.word	84402
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,22,230,4,16,4,11
	.byte	'OPC',0,4
	.word	854
	.byte	8,24,2,35,0,11
	.byte	'FMT',0,4
	.word	854
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	854
	.byte	7,16,2,35,0,11
	.byte	'DREG',0,4
	.word	854
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	854
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,22,237,4,3
	.word	84751
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,22,240,4,16,4,11
	.byte	'PC',0,4
	.word	854
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,22,243,4,3
	.word	84911
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,22,246,4,16,4,11
	.byte	'SRC1',0,4
	.word	854
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,22,249,4,3
	.word	84992
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,22,252,4,16,4,11
	.byte	'SRC2',0,4
	.word	854
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,22,255,4,3
	.word	85079
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,22,130,5,16,4,11
	.byte	'SRC3',0,4
	.word	854
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,22,133,5,3
	.word	85166
	.byte	10
	.byte	'_Ifx_CPU_ICNT_Bits',0,22,136,5,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	854
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	854
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_ICNT_Bits',0,22,140,5,3
	.word	85253
	.byte	10
	.byte	'_Ifx_CPU_ICR_Bits',0,22,143,5,16,4,11
	.byte	'CCPN',0,4
	.word	854
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	854
	.byte	7,17,2,35,0,11
	.byte	'IE',0,4
	.word	854
	.byte	1,16,2,35,0,11
	.byte	'PIPN',0,4
	.word	854
	.byte	8,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	854
	.byte	8,0,2,35,0,0,32
	.byte	'Ifx_CPU_ICR_Bits',0,22,150,5,3
	.word	85344
	.byte	10
	.byte	'_Ifx_CPU_ISP_Bits',0,22,153,5,16,4,11
	.byte	'ISP',0,4
	.word	854
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_ISP_Bits',0,22,156,5,3
	.word	85486
	.byte	10
	.byte	'_Ifx_CPU_KRST0_Bits',0,22,159,5,16,4,11
	.byte	'RST',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'RSTSTAT',0,4
	.word	854
	.byte	2,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	854
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_KRST0_Bits',0,22,164,5,3
	.word	85552
	.byte	10
	.byte	'_Ifx_CPU_KRST1_Bits',0,22,167,5,16,4,11
	.byte	'RST',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	854
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_KRST1_Bits',0,22,171,5,3
	.word	85663
	.byte	10
	.byte	'_Ifx_CPU_KRSTCLR_Bits',0,22,174,5,16,4,11
	.byte	'CLR',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	854
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_KRSTCLR_Bits',0,22,178,5,3
	.word	85755
	.byte	10
	.byte	'_Ifx_CPU_LCX_Bits',0,22,181,5,16,4,11
	.byte	'LCXO',0,4
	.word	854
	.byte	16,16,2,35,0,11
	.byte	'LCXS',0,4
	.word	854
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	854
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_LCX_Bits',0,22,186,5,3
	.word	85851
	.byte	10
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,22,189,5,16,4,11
	.byte	'EN0',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	854
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	854
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	854
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	854
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	854
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	854
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	854
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	854
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	854
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	854
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	854
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	854
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	854
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	854
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	854
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	854
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	854
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	854
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	854
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	854
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	854
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	854
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	854
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	854
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	854
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	854
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,22,223,5,3
	.word	85957
	.byte	10
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,22,226,5,16,4,11
	.byte	'EN32',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	854
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	854
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	854
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	854
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	854
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	854
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	854
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	854
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	854
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	854
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	854
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	854
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	854
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	854
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	854
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	854
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	854
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	854
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	854
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	854
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	854
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	854
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	854
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	854
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	854
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	854
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,22,132,6,3
	.word	86540
	.byte	10
	.byte	'_Ifx_CPU_M1CNT_Bits',0,22,135,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	854
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	854
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_M1CNT_Bits',0,22,139,6,3
	.word	87133
	.byte	10
	.byte	'_Ifx_CPU_M2CNT_Bits',0,22,142,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	854
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	854
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_M2CNT_Bits',0,22,146,6,3
	.word	87226
	.byte	10
	.byte	'_Ifx_CPU_M3CNT_Bits',0,22,149,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	854
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	854
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_M3CNT_Bits',0,22,153,6,3
	.word	87319
	.byte	10
	.byte	'_Ifx_CPU_OSEL_Bits',0,22,156,6,16,4,11
	.byte	'SHOVEN_X',0,4
	.word	854
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_OSEL_Bits',0,22,159,6,3
	.word	87412
	.byte	10
	.byte	'_Ifx_CPU_PC_Bits',0,22,162,6,16,4,11
	.byte	'reserved_0',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'PC',0,4
	.word	854
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_PC_Bits',0,22,166,6,3
	.word	87485
	.byte	10
	.byte	'_Ifx_CPU_PCON0_Bits',0,22,169,6,16,4,11
	.byte	'reserved_0',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'PCBYP',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	854
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCON0_Bits',0,22,174,6,3
	.word	87570
	.byte	10
	.byte	'_Ifx_CPU_PCON1_Bits',0,22,177,6,16,4,11
	.byte	'PCINV',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'PBINV',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	854
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCON1_Bits',0,22,182,6,3
	.word	87686
	.byte	10
	.byte	'_Ifx_CPU_PCON2_Bits',0,22,185,6,16,4,11
	.byte	'PCACHE_SZE',0,4
	.word	854
	.byte	16,16,2,35,0,11
	.byte	'PSCRATCH_SZE',0,4
	.word	854
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCON2_Bits',0,22,189,6,3
	.word	87797
	.byte	10
	.byte	'_Ifx_CPU_PCXI_Bits',0,22,192,6,16,4,11
	.byte	'PCXO',0,4
	.word	854
	.byte	16,16,2,35,0,11
	.byte	'PCXS',0,4
	.word	854
	.byte	4,12,2,35,0,11
	.byte	'UL',0,4
	.word	854
	.byte	1,11,2,35,0,11
	.byte	'PIE',0,4
	.word	854
	.byte	1,10,2,35,0,11
	.byte	'PCPN',0,4
	.word	854
	.byte	8,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	854
	.byte	2,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCXI_Bits',0,22,200,6,3
	.word	87898
	.byte	10
	.byte	'_Ifx_CPU_PIEAR_Bits',0,22,203,6,16,4,11
	.byte	'TA',0,4
	.word	854
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_PIEAR_Bits',0,22,206,6,3
	.word	88051
	.byte	10
	.byte	'_Ifx_CPU_PIETR_Bits',0,22,209,6,16,4,11
	.byte	'IED',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	854
	.byte	6,21,2,35,0,11
	.byte	'IE_UNC',0,4
	.word	854
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	854
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	854
	.byte	1,18,2,35,0,11
	.byte	'IE_ADDR',0,4
	.word	854
	.byte	1,17,2,35,0,11
	.byte	'IE_LPB',0,4
	.word	854
	.byte	1,16,2,35,0,11
	.byte	'IE_MTMV',0,4
	.word	854
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	854
	.byte	15,0,2,35,0,0,32
	.byte	'Ifx_CPU_PIETR_Bits',0,22,224,6,3
	.word	88120
	.byte	10
	.byte	'_Ifx_CPU_PMA0_Bits',0,22,227,6,16,4,11
	.byte	'DAC',0,4
	.word	854
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	854
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PMA0_Bits',0,22,231,6,3
	.word	88404
	.byte	10
	.byte	'_Ifx_CPU_PMA1_Bits',0,22,234,6,16,4,11
	.byte	'CAC',0,4
	.word	854
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	854
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PMA1_Bits',0,22,238,6,3
	.word	88495
	.byte	10
	.byte	'_Ifx_CPU_PMA2_Bits',0,22,241,6,16,4,11
	.byte	'PSI',0,4
	.word	854
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	854
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PMA2_Bits',0,22,245,6,3
	.word	88586
	.byte	10
	.byte	'_Ifx_CPU_PSTR_Bits',0,22,248,6,16,4,11
	.byte	'FRE',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'FBE',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	854
	.byte	9,20,2,35,0,11
	.byte	'FPE',0,4
	.word	854
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	854
	.byte	1,18,2,35,0,11
	.byte	'FME',0,4
	.word	854
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	854
	.byte	17,0,2,35,0,0,32
	.byte	'Ifx_CPU_PSTR_Bits',0,22,130,7,3
	.word	88677
	.byte	10
	.byte	'_Ifx_CPU_PSW_Bits',0,22,133,7,16,4,11
	.byte	'CDC',0,4
	.word	854
	.byte	7,25,2,35,0,11
	.byte	'CDE',0,4
	.word	854
	.byte	1,24,2,35,0,11
	.byte	'GW',0,4
	.word	854
	.byte	1,23,2,35,0,11
	.byte	'IS',0,4
	.word	854
	.byte	1,22,2,35,0,11
	.byte	'IO',0,4
	.word	854
	.byte	2,20,2,35,0,11
	.byte	'PRS',0,4
	.word	854
	.byte	2,18,2,35,0,11
	.byte	'S',0,4
	.word	854
	.byte	1,17,2,35,0,11
	.byte	'PRS2',0,4
	.word	854
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	854
	.byte	8,8,2,35,0,11
	.byte	'USB',0,4
	.word	854
	.byte	8,0,2,35,0,0,32
	.byte	'Ifx_CPU_PSW_Bits',0,22,145,7,3
	.word	88880
	.byte	10
	.byte	'_Ifx_CPU_RGN_ACCENA_Bits',0,22,148,7,16,4,11
	.byte	'EN0',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	854
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	854
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	854
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	854
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	854
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	854
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	854
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	854
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	854
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	854
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	854
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	854
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	854
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	854
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	854
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	854
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	854
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	854
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	854
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	854
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	854
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	854
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	854
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	854
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	854
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	854
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_ACCENA_Bits',0,22,182,7,3
	.word	89085
	.byte	10
	.byte	'_Ifx_CPU_RGN_ACCENB_Bits',0,22,185,7,16,4,11
	.byte	'EN32',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	854
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	854
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	854
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	854
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	854
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	854
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	854
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	854
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	854
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	854
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	854
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	854
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	854
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	854
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	854
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	854
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	854
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	854
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	854
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	854
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	854
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	854
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	854
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	854
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	854
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	854
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_ACCENB_Bits',0,22,219,7,3
	.word	89652
	.byte	10
	.byte	'_Ifx_CPU_RGN_LA_Bits',0,22,222,7,16,4,11
	.byte	'reserved_0',0,4
	.word	854
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	854
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_LA_Bits',0,22,226,7,3
	.word	90229
	.byte	10
	.byte	'_Ifx_CPU_RGN_UA_Bits',0,22,229,7,16,4,11
	.byte	'reserved_0',0,4
	.word	854
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	854
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_UA_Bits',0,22,233,7,3
	.word	90324
	.byte	10
	.byte	'_Ifx_CPU_SEGEN_Bits',0,22,236,7,16,4,11
	.byte	'ADFLIP',0,4
	.word	854
	.byte	8,24,2,35,0,11
	.byte	'ADTYPE',0,4
	.word	854
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	854
	.byte	21,1,2,35,0,11
	.byte	'AE',0,4
	.word	854
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SEGEN_Bits',0,22,242,7,3
	.word	90419
	.byte	10
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,22,245,7,16,4,11
	.byte	'EN0',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	854
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	854
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	854
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	854
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	854
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	854
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	854
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	854
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	854
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	854
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	854
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	854
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	854
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	854
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	854
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	854
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	854
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	854
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	854
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	854
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	854
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	854
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	854
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	854
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	854
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	854
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,22,151,8,3
	.word	90547
	.byte	10
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,22,154,8,16,4,11
	.byte	'EN32',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	854
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	854
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	854
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	854
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	854
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	854
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	854
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	854
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	854
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	854
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	854
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	854
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	854
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	854
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	854
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	854
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	854
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	854
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	854
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	854
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	854
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	854
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	854
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	854
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	854
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	854
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,22,188,8,3
	.word	91130
	.byte	10
	.byte	'_Ifx_CPU_SMACON_Bits',0,22,191,8,16,4,11
	.byte	'reserved_0',0,4
	.word	854
	.byte	24,8,2,35,0,11
	.byte	'IODT',0,4
	.word	854
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	854
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_CPU_SMACON_Bits',0,22,196,8,3
	.word	91723
	.byte	10
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,22,199,8,16,4,11
	.byte	'EN0',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	854
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	854
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	854
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	854
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	854
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	854
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	854
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	854
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	854
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	854
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	854
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	854
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	854
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	854
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	854
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	854
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	854
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	854
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	854
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	854
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	854
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	854
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	854
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	854
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	854
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	854
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,22,233,8,3
	.word	91841
	.byte	10
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,22,236,8,16,4,11
	.byte	'EN32',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	854
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	854
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	854
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	854
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	854
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	854
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	854
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	854
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	854
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	854
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	854
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	854
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	854
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	854
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	854
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	854
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	854
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	854
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	854
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	854
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	854
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	854
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	854
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	854
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	854
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	854
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,22,142,9,3
	.word	92430
	.byte	10
	.byte	'_Ifx_CPU_SWEVT_Bits',0,22,145,9,16,4,11
	.byte	'EVTA',0,4
	.word	854
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	854
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	854
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_SWEVT_Bits',0,22,153,9,3
	.word	93029
	.byte	10
	.byte	'_Ifx_CPU_SYSCON_Bits',0,22,156,9,16,4,11
	.byte	'FCDSF',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'PROTEN',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'TPROTEN',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'IS',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'TS',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	854
	.byte	3,24,2,35,0,11
	.byte	'ESDIS',0,4
	.word	854
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	854
	.byte	7,16,2,35,0,11
	.byte	'U1_IED',0,4
	.word	854
	.byte	1,15,2,35,0,11
	.byte	'U1_IOS',0,4
	.word	854
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	854
	.byte	6,8,2,35,0,11
	.byte	'BHALT',0,4
	.word	854
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	854
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_CPU_SYSCON_Bits',0,22,171,9,3
	.word	93183
	.byte	10
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,22,174,9,16,4,11
	.byte	'ASI',0,4
	.word	854
	.byte	5,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	854
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,22,178,9,3
	.word	93482
	.byte	10
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,22,181,9,16,4,11
	.byte	'TEXP0',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'TEXP1',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'TEXP2',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	854
	.byte	13,16,2,35,0,11
	.byte	'TTRAP',0,4
	.word	854
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	854
	.byte	15,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_CON_Bits',0,22,189,9,3
	.word	93580
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,22,192,9,16,4,11
	.byte	'EXTIM_CLASS_EN',0,4
	.word	854
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	854
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,22,196,9,3
	.word	93752
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,22,199,9,16,4,11
	.byte	'ENTRY_CVAL',0,4
	.word	854
	.byte	12,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	854
	.byte	20,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,22,203,9,3
	.word	93881
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,22,206,9,16,4,11
	.byte	'reserved_0',0,4
	.word	854
	.byte	4,28,2,35,0,11
	.byte	'ENTRY_LVAL',0,4
	.word	854
	.byte	8,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	854
	.byte	20,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,22,211,9,3
	.word	94011
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,22,214,9,16,4,11
	.byte	'EXIT_CVAL',0,4
	.word	854
	.byte	24,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	854
	.byte	8,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,22,218,9,3
	.word	94163
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,22,221,9,16,4,11
	.byte	'reserved_0',0,4
	.word	854
	.byte	4,28,2,35,0,11
	.byte	'EXIT_LVAL',0,4
	.word	854
	.byte	20,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	854
	.byte	8,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,22,226,9,3
	.word	94290
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_FCX_Bits',0,22,229,9,16,4,11
	.byte	'EXIT_FCX',0,4
	.word	854
	.byte	20,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	854
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_FCX_Bits',0,22,233,9,3
	.word	94439
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_STAT_Bits',0,22,236,9,16,4,11
	.byte	'EXIT_TIN',0,4
	.word	854
	.byte	8,24,2,35,0,11
	.byte	'EXIT_CLASS',0,4
	.word	854
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	854
	.byte	4,17,2,35,0,11
	.byte	'EXIT_AT',0,4
	.word	854
	.byte	1,16,2,35,0,11
	.byte	'ENTRY_TIN',0,4
	.word	854
	.byte	8,8,2,35,0,11
	.byte	'ENTRY_CLASS',0,4
	.word	854
	.byte	3,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	854
	.byte	4,1,2,35,0,11
	.byte	'ENTRY_AT',0,4
	.word	854
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_STAT_Bits',0,22,246,9,3
	.word	94553
	.byte	10
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,22,249,9,16,4,11
	.byte	'TIMER',0,4
	.word	854
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,22,252,9,3
	.word	94797
	.byte	10
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,22,255,9,16,4,11
	.byte	'T0',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'T1',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'T2',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'T3',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'T4',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'T5',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'T6',0,4
	.word	854
	.byte	1,25,2,35,0,11
	.byte	'T7',0,4
	.word	854
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	854
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,22,138,10,3
	.word	94877
	.byte	10
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,22,141,10,16,4,11
	.byte	'ADDR',0,4
	.word	854
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_TR_ADR_Bits',0,22,144,10,3
	.word	95072
	.byte	10
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,22,147,10,16,4,11
	.byte	'EVTA',0,4
	.word	854
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	854
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	854
	.byte	4,20,2,35,0,11
	.byte	'TYP',0,4
	.word	854
	.byte	1,19,2,35,0,11
	.byte	'RNG',0,4
	.word	854
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	854
	.byte	1,17,2,35,0,11
	.byte	'ASI_EN',0,4
	.word	854
	.byte	1,16,2,35,0,11
	.byte	'ASI',0,4
	.word	854
	.byte	5,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	854
	.byte	6,5,2,35,0,11
	.byte	'AST',0,4
	.word	854
	.byte	1,4,2,35,0,11
	.byte	'ALD',0,4
	.word	854
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	854
	.byte	3,0,2,35,0,0,32
	.byte	'Ifx_CPU_TR_EVT_Bits',0,22,164,10,3
	.word	95145
	.byte	12,22,172,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76500
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_A',0,22,177,10,3
	.word	95463
	.byte	12,22,180,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76561
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BIV',0,22,185,10,3
	.word	95522
	.byte	12,22,188,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76640
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_OMASK',0,22,193,10,3
	.word	95583
	.byte	12,22,196,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76778
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_OTAR',0,22,201,10,3
	.word	95650
	.byte	12,22,204,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76899
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_RABR',0,22,209,10,3
	.word	95716
	.byte	12,22,212,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77075
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BTV',0,22,217,10,3
	.word	95782
	.byte	12,22,220,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77161
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CCNT',0,22,225,10,3
	.word	95843
	.byte	12,22,228,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77250
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CCTRL',0,22,233,10,3
	.word	95905
	.byte	12,22,236,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77397
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_COMPAT',0,22,241,10,3
	.word	95968
	.byte	12,22,244,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77526
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CORE_ID',0,22,249,10,3
	.word	96032
	.byte	12,22,252,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77626
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_L',0,22,129,11,3
	.word	96097
	.byte	12,22,132,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77721
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_U',0,22,137,11,3
	.word	96160
	.byte	12,22,140,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77816
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPU_ID',0,22,145,11,3
	.word	96223
	.byte	12,22,148,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77926
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPXE',0,22,153,11,3
	.word	96287
	.byte	12,22,156,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78018
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CREVT',0,22,161,11,3
	.word	96349
	.byte	12,22,164,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78172
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CUS_ID',0,22,169,11,3
	.word	96412
	.byte	12,22,172,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78266
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_D',0,22,177,11,3
	.word	96476
	.byte	12,22,180,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78329
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DATR',0,22,185,11,3
	.word	96535
	.byte	12,22,188,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78555
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DBGSR',0,22,193,11,3
	.word	96597
	.byte	12,22,196,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78770
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DBGTCR',0,22,201,11,3
	.word	96660
	.byte	12,22,204,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78864
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DCON0',0,22,209,11,3
	.word	96724
	.byte	12,22,212,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78980
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DCON2',0,22,217,11,3
	.word	96787
	.byte	12,22,220,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79081
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DCX',0,22,225,11,3
	.word	96850
	.byte	12,22,228,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79174
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DEADD',0,22,233,11,3
	.word	96911
	.byte	12,22,236,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79254
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DIEAR',0,22,241,11,3
	.word	96974
	.byte	12,22,244,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79323
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DIETR',0,22,249,11,3
	.word	97037
	.byte	12,22,252,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79607
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R',0,22,129,12,3
	.word	97100
	.byte	12,22,132,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80198
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W',0,22,137,12,3
	.word	97180
	.byte	12,22,140,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80789
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R',0,22,145,12,3
	.word	97260
	.byte	12,22,148,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81390
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W',0,22,153,12,3
	.word	97340
	.byte	12,22,156,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81991
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA',0,22,161,12,3
	.word	97420
	.byte	12,22,164,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82106
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA',0,22,169,12,3
	.word	97494
	.byte	12,22,172,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82221
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DMS',0,22,177,12,3
	.word	97568
	.byte	12,22,180,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82314
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPRE',0,22,185,12,3
	.word	97629
	.byte	12,22,188,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82406
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_L',0,22,193,12,3
	.word	97691
	.byte	12,22,196,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82501
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_U',0,22,201,12,3
	.word	97754
	.byte	12,22,204,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82596
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPWE',0,22,209,12,3
	.word	97817
	.byte	12,22,212,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82688
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DSTR',0,22,217,12,3
	.word	97879
	.byte	12,22,220,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83027
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_EXEVT',0,22,225,12,3
	.word	97941
	.byte	12,22,228,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83181
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FCX',0,22,233,12,3
	.word	98004
	.byte	12,22,236,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83287
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON0',0,22,241,12,3
	.word	98065
	.byte	12,22,244,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83505
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON1',0,22,249,12,3
	.word	98132
	.byte	12,22,252,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83696
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON2',0,22,129,13,3
	.word	98199
	.byte	12,22,132,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83996
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON3',0,22,137,13,3
	.word	98266
	.byte	12,22,140,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	84301
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON4',0,22,145,13,3
	.word	98333
	.byte	12,22,148,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	84402
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,22,153,13,3
	.word	98400
	.byte	12,22,156,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	84751
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,22,161,13,3
	.word	98470
	.byte	12,22,164,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	84911
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,22,169,13,3
	.word	98540
	.byte	12,22,172,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	84992
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,22,177,13,3
	.word	98609
	.byte	12,22,180,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85079
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,22,185,13,3
	.word	98680
	.byte	12,22,188,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85166
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,22,193,13,3
	.word	98751
	.byte	12,22,196,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85253
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_ICNT',0,22,201,13,3
	.word	98822
	.byte	12,22,204,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85344
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_ICR',0,22,209,13,3
	.word	98884
	.byte	12,22,212,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85486
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_ISP',0,22,217,13,3
	.word	98945
	.byte	12,22,220,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85552
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_KRST0',0,22,225,13,3
	.word	99006
	.byte	12,22,228,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85663
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_KRST1',0,22,233,13,3
	.word	99069
	.byte	12,22,236,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85755
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_KRSTCLR',0,22,241,13,3
	.word	99132
	.byte	12,22,244,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85851
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_LCX',0,22,249,13,3
	.word	99197
	.byte	12,22,252,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85957
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R',0,22,129,14,3
	.word	99258
	.byte	12,22,132,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86540
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R',0,22,137,14,3
	.word	99334
	.byte	12,22,140,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87133
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_M1CNT',0,22,145,14,3
	.word	99410
	.byte	12,22,148,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87226
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_M2CNT',0,22,153,14,3
	.word	99473
	.byte	12,22,156,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87319
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_M3CNT',0,22,161,14,3
	.word	99536
	.byte	12,22,164,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87412
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_OSEL',0,22,169,14,3
	.word	99599
	.byte	12,22,172,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87485
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PC',0,22,177,14,3
	.word	99661
	.byte	12,22,180,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87570
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCON0',0,22,185,14,3
	.word	99721
	.byte	12,22,188,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87686
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCON1',0,22,193,14,3
	.word	99784
	.byte	12,22,196,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87797
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCON2',0,22,201,14,3
	.word	99847
	.byte	12,22,204,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87898
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCXI',0,22,209,14,3
	.word	99910
	.byte	12,22,212,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88051
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PIEAR',0,22,217,14,3
	.word	99972
	.byte	12,22,220,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88120
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PIETR',0,22,225,14,3
	.word	100035
	.byte	12,22,228,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88404
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PMA0',0,22,233,14,3
	.word	100098
	.byte	12,22,236,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88495
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PMA1',0,22,241,14,3
	.word	100160
	.byte	12,22,244,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88586
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PMA2',0,22,249,14,3
	.word	100222
	.byte	12,22,252,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88677
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PSTR',0,22,129,15,3
	.word	100284
	.byte	12,22,132,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88880
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PSW',0,22,137,15,3
	.word	100346
	.byte	12,22,140,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	89085
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_ACCENA',0,22,145,15,3
	.word	100407
	.byte	12,22,148,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	89652
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_ACCENB',0,22,153,15,3
	.word	100475
	.byte	12,22,156,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90229
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_LA',0,22,161,15,3
	.word	100543
	.byte	12,22,164,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90324
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_UA',0,22,169,15,3
	.word	100607
	.byte	12,22,172,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90419
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SEGEN',0,22,177,15,3
	.word	100671
	.byte	12,22,180,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90547
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W',0,22,185,15,3
	.word	100734
	.byte	12,22,188,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91130
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W',0,22,193,15,3
	.word	100810
	.byte	12,22,196,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91723
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SMACON',0,22,201,15,3
	.word	100886
	.byte	12,22,204,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91841
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R',0,22,209,15,3
	.word	100950
	.byte	12,22,212,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92430
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R',0,22,217,15,3
	.word	101029
	.byte	12,22,220,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	93029
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SWEVT',0,22,225,15,3
	.word	101108
	.byte	12,22,228,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	93183
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SYSCON',0,22,233,15,3
	.word	101171
	.byte	12,22,236,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	93482
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TASK_ASI',0,22,241,15,3
	.word	101235
	.byte	12,22,244,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	93580
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_CON',0,22,249,15,3
	.word	101301
	.byte	12,22,252,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	93752
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN',0,22,129,16,3
	.word	101366
	.byte	12,22,132,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	93881
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL',0,22,137,16,3
	.word	101442
	.byte	12,22,140,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94011
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL',0,22,145,16,3
	.word	101520
	.byte	12,22,148,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94163
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL',0,22,153,16,3
	.word	101598
	.byte	12,22,156,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94290
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL',0,22,161,16,3
	.word	101675
	.byte	12,22,164,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94439
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_FCX',0,22,169,16,3
	.word	101752
	.byte	12,22,172,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94553
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_STAT',0,22,177,16,3
	.word	101823
	.byte	12,22,180,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94797
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_TIMER',0,22,185,16,3
	.word	101895
	.byte	12,22,188,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94877
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TRIG_ACC',0,22,193,16,3
	.word	101962
	.byte	12,22,196,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95072
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TR_ADR',0,22,201,16,3
	.word	102028
	.byte	12,22,204,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95145
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TR_EVT',0,22,209,16,3
	.word	102092
	.byte	10
	.byte	'_Ifx_CPU_RGN',0,22,221,16,25,16,13
	.byte	'LA',0
	.word	100543
	.byte	4,2,35,0,13
	.byte	'UA',0
	.word	100607
	.byte	4,2,35,4,13
	.byte	'ACCENA',0
	.word	100407
	.byte	4,2,35,8,13
	.byte	'ACCENB',0
	.word	100475
	.byte	4,2,35,12,0,14
	.word	102156
	.byte	32
	.byte	'Ifx_CPU_RGN',0,22,227,16,3
	.word	102232
	.byte	10
	.byte	'_Ifx_CPU_BLK',0,22,242,16,25,12,13
	.byte	'RABR',0
	.word	95716
	.byte	4,2,35,0,13
	.byte	'OTAR',0
	.word	95650
	.byte	4,2,35,4,13
	.byte	'OMASK',0
	.word	95583
	.byte	4,2,35,8,0,14
	.word	102258
	.byte	32
	.byte	'Ifx_CPU_BLK',0,22,247,16,3
	.word	102321
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP',0,22,134,17,25,28,13
	.byte	'CON',0
	.word	98400
	.byte	4,2,35,0,13
	.byte	'PC',0
	.word	98540
	.byte	4,2,35,4,13
	.byte	'OPC',0
	.word	98470
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	3010
	.byte	4,2,35,12,13
	.byte	'SRC1',0
	.word	98609
	.byte	4,2,35,16,13
	.byte	'SRC2',0
	.word	98680
	.byte	4,2,35,20,13
	.byte	'SRC3',0
	.word	98751
	.byte	4,2,35,24,0,14
	.word	102347
	.byte	32
	.byte	'Ifx_CPU_FPU_TRAP',0,22,143,17,3
	.word	102472
	.byte	10
	.byte	'_Ifx_CPU_DPR',0,22,158,17,25,8,13
	.byte	'L',0
	.word	97691
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	97754
	.byte	4,2,35,4,0,14
	.word	102503
	.byte	32
	.byte	'Ifx_CPU_DPR',0,22,162,17,3
	.word	102545
	.byte	10
	.byte	'_Ifx_CPU_CPR',0,22,177,17,25,8,13
	.byte	'L',0
	.word	96097
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	96160
	.byte	4,2,35,4,0,14
	.word	102571
	.byte	32
	.byte	'Ifx_CPU_CPR',0,22,181,17,3
	.word	102613
	.byte	15,12
	.word	101895
	.byte	16,2,0,10
	.byte	'_Ifx_CPU_TPS',0,22,196,17,25,16,13
	.byte	'CON',0
	.word	101301
	.byte	4,2,35,0,13
	.byte	'TIMER',0
	.word	102639
	.byte	12,2,35,4,0,14
	.word	102648
	.byte	32
	.byte	'Ifx_CPU_TPS',0,22,200,17,3
	.word	102696
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM',0,22,215,17,25,28,13
	.byte	'ENTRY_LVAL',0
	.word	101520
	.byte	4,2,35,0,13
	.byte	'ENTRY_CVAL',0
	.word	101442
	.byte	4,2,35,4,13
	.byte	'EXIT_LVAL',0
	.word	101675
	.byte	4,2,35,8,13
	.byte	'EXIT_CVAL',0
	.word	101598
	.byte	4,2,35,12,13
	.byte	'CLASS_EN',0
	.word	101366
	.byte	4,2,35,16,13
	.byte	'STAT',0
	.word	101823
	.byte	4,2,35,20,13
	.byte	'FCX',0
	.word	101752
	.byte	4,2,35,24,0,14
	.word	102722
	.byte	32
	.byte	'Ifx_CPU_TPS_EXTIM',0,22,224,17,3
	.word	102871
	.byte	10
	.byte	'_Ifx_CPU_TR',0,22,239,17,25,8,13
	.byte	'EVT',0
	.word	102092
	.byte	4,2,35,0,13
	.byte	'ADR',0
	.word	102028
	.byte	4,2,35,4,0,14
	.word	102903
	.byte	32
	.byte	'Ifx_CPU_TR',0,22,243,17,3
	.word	102948
	.byte	15,128,34
	.word	455
	.byte	16,255,33,0,15,236,253,2
	.word	455
	.byte	16,235,253,2,0,15,244,31
	.word	455
	.byte	16,243,31,0,15,128,1
	.word	102156
	.byte	16,7,0,14
	.word	103008
	.byte	15,232,1
	.word	455
	.byte	16,231,1,0,15,128,48
	.word	455
	.byte	16,255,47,0,15,128,3
	.word	102258
	.byte	16,31,0,14
	.word	103045
	.byte	15,160,39
	.word	455
	.byte	16,159,39,0,15,208,223,1
	.word	455
	.byte	16,207,223,1,0,15,248,1
	.word	455
	.byte	16,247,1,0,15,244,29
	.word	455
	.byte	16,243,29,0,15,188,3
	.word	455
	.byte	16,187,3,0,15,232,3
	.word	455
	.byte	16,231,3,0,15,252,23
	.word	455
	.byte	16,251,23,0,14
	.word	102347
	.byte	15,228,63
	.word	455
	.byte	16,227,63,0,15,144,1
	.word	102503
	.byte	16,17,0,14
	.word	103155
	.byte	15,240,30
	.word	455
	.byte	16,239,30,0,15,80
	.word	102571
	.byte	16,9,0,14
	.word	103181
	.byte	15,176,31
	.word	455
	.byte	16,175,31,0,15,152,7
	.word	455
	.byte	16,151,7,0,14
	.word	102648
	.byte	15,48
	.word	455
	.byte	16,47,0,14
	.word	102722
	.byte	15,164,23
	.word	455
	.byte	16,163,23,0,15,64
	.word	102903
	.byte	16,7,0,14
	.word	103247
	.byte	15,192,23
	.word	455
	.byte	16,191,23,0,15,180,1
	.word	455
	.byte	16,179,1,0,15,172,1
	.word	455
	.byte	16,171,1,0,15,64
	.word	96476
	.byte	16,15,0,15,64
	.word	95463
	.byte	16,15,0,10
	.byte	'_Ifx_CPU',0,22,130,18,25,128,128,8,13
	.byte	'reserved_0',0
	.word	102973
	.byte	128,34,2,35,0,13
	.byte	'FLASHCON0',0
	.word	98065
	.byte	4,3,35,128,34,13
	.byte	'FLASHCON1',0
	.word	98132
	.byte	4,3,35,132,34,13
	.byte	'FLASHCON2',0
	.word	98199
	.byte	4,3,35,136,34,13
	.byte	'FLASHCON3',0
	.word	98266
	.byte	4,3,35,140,34,13
	.byte	'FLASHCON4',0
	.word	98333
	.byte	4,3,35,144,34,13
	.byte	'reserved_1114',0
	.word	102984
	.byte	236,253,2,3,35,148,34,13
	.byte	'KRST0',0
	.word	99006
	.byte	4,4,35,128,160,3,13
	.byte	'KRST1',0
	.word	99069
	.byte	4,4,35,132,160,3,13
	.byte	'KRSTCLR',0
	.word	99132
	.byte	4,4,35,136,160,3,13
	.byte	'reserved_D00C',0
	.word	102997
	.byte	244,31,4,35,140,160,3,13
	.byte	'RGN',0
	.word	103018
	.byte	128,1,4,35,128,192,3,13
	.byte	'reserved_E080',0
	.word	4830
	.byte	8,4,35,128,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R0',0
	.word	100950
	.byte	4,4,35,136,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R0',0
	.word	101029
	.byte	4,4,35,140,193,3,13
	.byte	'reserved_E090',0
	.word	4830
	.byte	8,4,35,144,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R1',0
	.word	100950
	.byte	4,4,35,152,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R1',0
	.word	101029
	.byte	4,4,35,156,193,3,13
	.byte	'reserved_E0A0',0
	.word	4830
	.byte	8,4,35,160,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R2',0
	.word	100950
	.byte	4,4,35,168,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R2',0
	.word	101029
	.byte	4,4,35,172,193,3,13
	.byte	'reserved_E0B0',0
	.word	4830
	.byte	8,4,35,176,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R3',0
	.word	100950
	.byte	4,4,35,184,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R3',0
	.word	101029
	.byte	4,4,35,188,193,3,13
	.byte	'reserved_E0C0',0
	.word	4830
	.byte	8,4,35,192,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R4',0
	.word	100950
	.byte	4,4,35,200,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R4',0
	.word	101029
	.byte	4,4,35,204,193,3,13
	.byte	'reserved_E0D0',0
	.word	4830
	.byte	8,4,35,208,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R5',0
	.word	100950
	.byte	4,4,35,216,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R5',0
	.word	101029
	.byte	4,4,35,220,193,3,13
	.byte	'reserved_E0E0',0
	.word	4830
	.byte	8,4,35,224,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R6',0
	.word	100950
	.byte	4,4,35,232,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R6',0
	.word	101029
	.byte	4,4,35,236,193,3,13
	.byte	'reserved_E0F0',0
	.word	4830
	.byte	8,4,35,240,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R7',0
	.word	100950
	.byte	4,4,35,248,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R7',0
	.word	101029
	.byte	4,4,35,252,193,3,13
	.byte	'SFR_SPROT_ACCENA_W',0
	.word	100734
	.byte	4,4,35,128,194,3,13
	.byte	'SFR_SPROT_ACCENB_W',0
	.word	100810
	.byte	4,4,35,132,194,3,13
	.byte	'reserved_E108',0
	.word	4830
	.byte	8,4,35,136,194,3,13
	.byte	'LPB_SPROT_ACCENA_R',0
	.word	99258
	.byte	4,4,35,144,194,3,13
	.byte	'LPB_SPROT_ACCENB_R',0
	.word	99334
	.byte	4,4,35,148,194,3,13
	.byte	'reserved_E118',0
	.word	103023
	.byte	232,1,4,35,152,194,3,13
	.byte	'DLMU_SPROT_RGNLA0',0
	.word	97420
	.byte	4,4,35,128,196,3,13
	.byte	'DLMU_SPROT_RGNUA0',0
	.word	97494
	.byte	4,4,35,132,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W0',0
	.word	97180
	.byte	4,4,35,136,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W0',0
	.word	97340
	.byte	4,4,35,140,196,3,13
	.byte	'DLMU_SPROT_RGNLA1',0
	.word	97420
	.byte	4,4,35,144,196,3,13
	.byte	'DLMU_SPROT_RGNUA1',0
	.word	97494
	.byte	4,4,35,148,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W1',0
	.word	97180
	.byte	4,4,35,152,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W1',0
	.word	97340
	.byte	4,4,35,156,196,3,13
	.byte	'DLMU_SPROT_RGNLA2',0
	.word	97420
	.byte	4,4,35,160,196,3,13
	.byte	'DLMU_SPROT_RGNUA2',0
	.word	97494
	.byte	4,4,35,164,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W2',0
	.word	97180
	.byte	4,4,35,168,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W2',0
	.word	97340
	.byte	4,4,35,172,196,3,13
	.byte	'DLMU_SPROT_RGNLA3',0
	.word	97420
	.byte	4,4,35,176,196,3,13
	.byte	'DLMU_SPROT_RGNUA3',0
	.word	97494
	.byte	4,4,35,180,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W3',0
	.word	97180
	.byte	4,4,35,184,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W3',0
	.word	97340
	.byte	4,4,35,188,196,3,13
	.byte	'DLMU_SPROT_RGNLA4',0
	.word	97420
	.byte	4,4,35,192,196,3,13
	.byte	'DLMU_SPROT_RGNUA4',0
	.word	97494
	.byte	4,4,35,196,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W4',0
	.word	97180
	.byte	4,4,35,200,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W4',0
	.word	97340
	.byte	4,4,35,204,196,3,13
	.byte	'DLMU_SPROT_RGNLA5',0
	.word	97420
	.byte	4,4,35,208,196,3,13
	.byte	'DLMU_SPROT_RGNUA5',0
	.word	97494
	.byte	4,4,35,212,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W5',0
	.word	97180
	.byte	4,4,35,216,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W5',0
	.word	97340
	.byte	4,4,35,220,196,3,13
	.byte	'DLMU_SPROT_RGNLA6',0
	.word	97420
	.byte	4,4,35,224,196,3,13
	.byte	'DLMU_SPROT_RGNUA6',0
	.word	97494
	.byte	4,4,35,228,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W6',0
	.word	97180
	.byte	4,4,35,232,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W6',0
	.word	97340
	.byte	4,4,35,236,196,3,13
	.byte	'DLMU_SPROT_RGNLA7',0
	.word	97420
	.byte	4,4,35,240,196,3,13
	.byte	'DLMU_SPROT_RGNUA7',0
	.word	97494
	.byte	4,4,35,244,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W7',0
	.word	97180
	.byte	4,4,35,248,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W7',0
	.word	97340
	.byte	4,4,35,252,196,3,13
	.byte	'reserved_E280',0
	.word	4830
	.byte	8,4,35,128,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R0',0
	.word	97100
	.byte	4,4,35,136,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R0',0
	.word	97260
	.byte	4,4,35,140,197,3,13
	.byte	'reserved_E290',0
	.word	4830
	.byte	8,4,35,144,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R1',0
	.word	97100
	.byte	4,4,35,152,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R1',0
	.word	97260
	.byte	4,4,35,156,197,3,13
	.byte	'reserved_E2A0',0
	.word	4830
	.byte	8,4,35,160,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R2',0
	.word	97100
	.byte	4,4,35,168,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R2',0
	.word	97260
	.byte	4,4,35,172,197,3,13
	.byte	'reserved_E2B0',0
	.word	4830
	.byte	8,4,35,176,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R3',0
	.word	97100
	.byte	4,4,35,184,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R3',0
	.word	97260
	.byte	4,4,35,188,197,3,13
	.byte	'reserved_E2C0',0
	.word	4830
	.byte	8,4,35,192,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R4',0
	.word	97100
	.byte	4,4,35,200,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R4',0
	.word	97260
	.byte	4,4,35,204,197,3,13
	.byte	'reserved_E2D0',0
	.word	4830
	.byte	8,4,35,208,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R5',0
	.word	97100
	.byte	4,4,35,216,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R5',0
	.word	97260
	.byte	4,4,35,220,197,3,13
	.byte	'reserved_E2E0',0
	.word	4830
	.byte	8,4,35,224,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R6',0
	.word	97100
	.byte	4,4,35,232,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R6',0
	.word	97260
	.byte	4,4,35,236,197,3,13
	.byte	'reserved_E2F0',0
	.word	4830
	.byte	8,4,35,240,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R7',0
	.word	97100
	.byte	4,4,35,248,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R7',0
	.word	97260
	.byte	4,4,35,252,197,3,13
	.byte	'reserved_E300',0
	.word	103034
	.byte	128,48,4,35,128,198,3,13
	.byte	'OSEL',0
	.word	99599
	.byte	4,4,35,128,246,3,13
	.byte	'reserved_FB04',0
	.word	5170
	.byte	12,4,35,132,246,3,13
	.byte	'BLK',0
	.word	103055
	.byte	128,3,4,35,144,246,3,13
	.byte	'reserved_FC90',0
	.word	103060
	.byte	160,39,4,35,144,249,3,13
	.byte	'SEGEN',0
	.word	100671
	.byte	4,4,35,176,160,4,13
	.byte	'reserved_11034',0
	.word	103071
	.byte	208,223,1,4,35,180,160,4,13
	.byte	'TASK_ASI',0
	.word	101235
	.byte	4,4,35,132,128,6,13
	.byte	'reserved_18008',0
	.word	103084
	.byte	248,1,4,35,136,128,6,13
	.byte	'PMA0',0
	.word	100098
	.byte	4,4,35,128,130,6,13
	.byte	'PMA1',0
	.word	100160
	.byte	4,4,35,132,130,6,13
	.byte	'PMA2',0
	.word	100222
	.byte	4,4,35,136,130,6,13
	.byte	'reserved_1810C',0
	.word	103095
	.byte	244,29,4,35,140,130,6,13
	.byte	'DCON2',0
	.word	96787
	.byte	4,4,35,128,160,6,13
	.byte	'reserved_19004',0
	.word	4830
	.byte	8,4,35,132,160,6,13
	.byte	'SMACON',0
	.word	100886
	.byte	4,4,35,140,160,6,13
	.byte	'DSTR',0
	.word	97879
	.byte	4,4,35,144,160,6,13
	.byte	'reserved_19014',0
	.word	3010
	.byte	4,4,35,148,160,6,13
	.byte	'DATR',0
	.word	96535
	.byte	4,4,35,152,160,6,13
	.byte	'DEADD',0
	.word	96911
	.byte	4,4,35,156,160,6,13
	.byte	'DIEAR',0
	.word	96974
	.byte	4,4,35,160,160,6,13
	.byte	'DIETR',0
	.word	97037
	.byte	4,4,35,164,160,6,13
	.byte	'reserved_19028',0
	.word	4201
	.byte	24,4,35,168,160,6,13
	.byte	'DCON0',0
	.word	96724
	.byte	4,4,35,192,160,6,13
	.byte	'reserved_19044',0
	.word	103106
	.byte	188,3,4,35,196,160,6,13
	.byte	'PSTR',0
	.word	100284
	.byte	4,4,35,128,164,6,13
	.byte	'PCON1',0
	.word	99784
	.byte	4,4,35,132,164,6,13
	.byte	'PCON2',0
	.word	99847
	.byte	4,4,35,136,164,6,13
	.byte	'PCON0',0
	.word	99721
	.byte	4,4,35,140,164,6,13
	.byte	'PIEAR',0
	.word	99972
	.byte	4,4,35,144,164,6,13
	.byte	'PIETR',0
	.word	100035
	.byte	4,4,35,148,164,6,13
	.byte	'reserved_19218',0
	.word	103117
	.byte	232,3,4,35,152,164,6,13
	.byte	'COMPAT',0
	.word	95968
	.byte	4,4,35,128,168,6,13
	.byte	'reserved_19404',0
	.word	103128
	.byte	252,23,4,35,132,168,6,13
	.byte	'FPU_TRAP',0
	.word	103139
	.byte	28,4,35,128,192,6,13
	.byte	'reserved_1A01C',0
	.word	103144
	.byte	228,63,4,35,156,192,6,13
	.byte	'DPR',0
	.word	103165
	.byte	144,1,4,35,128,128,7,13
	.byte	'reserved_1C090',0
	.word	103170
	.byte	240,30,4,35,144,129,7,13
	.byte	'CPR',0
	.word	103190
	.byte	80,4,35,128,160,7,13
	.byte	'reserved_1D050',0
	.word	103195
	.byte	176,31,4,35,208,160,7,13
	.byte	'CPXE_0',0
	.word	96287
	.byte	4,4,35,128,192,7,13
	.byte	'CPXE_1',0
	.word	96287
	.byte	4,4,35,132,192,7,13
	.byte	'CPXE_2',0
	.word	96287
	.byte	4,4,35,136,192,7,13
	.byte	'CPXE_3',0
	.word	96287
	.byte	4,4,35,140,192,7,13
	.byte	'DPRE_0',0
	.word	97629
	.byte	4,4,35,144,192,7,13
	.byte	'DPRE_1',0
	.word	97629
	.byte	4,4,35,148,192,7,13
	.byte	'DPRE_2',0
	.word	97629
	.byte	4,4,35,152,192,7,13
	.byte	'DPRE_3',0
	.word	97629
	.byte	4,4,35,156,192,7,13
	.byte	'DPWE_0',0
	.word	97817
	.byte	4,4,35,160,192,7,13
	.byte	'DPWE_1',0
	.word	97817
	.byte	4,4,35,164,192,7,13
	.byte	'DPWE_2',0
	.word	97817
	.byte	4,4,35,168,192,7,13
	.byte	'DPWE_3',0
	.word	97817
	.byte	4,4,35,172,192,7,13
	.byte	'reserved_1E030',0
	.word	13233
	.byte	16,4,35,176,192,7,13
	.byte	'CPXE_4',0
	.word	96287
	.byte	4,4,35,192,192,7,13
	.byte	'CPXE_5',0
	.word	96287
	.byte	4,4,35,196,192,7,13
	.byte	'reserved_1E048',0
	.word	4830
	.byte	8,4,35,200,192,7,13
	.byte	'DPRE_4',0
	.word	97629
	.byte	4,4,35,208,192,7,13
	.byte	'DPRE_5',0
	.word	97629
	.byte	4,4,35,212,192,7,13
	.byte	'reserved_1E058',0
	.word	4830
	.byte	8,4,35,216,192,7,13
	.byte	'DPWE_4',0
	.word	97817
	.byte	4,4,35,224,192,7,13
	.byte	'DPWE_5',0
	.word	97817
	.byte	4,4,35,228,192,7,13
	.byte	'reserved_1E068',0
	.word	103206
	.byte	152,7,4,35,232,192,7,13
	.byte	'TPS',0
	.word	103217
	.byte	16,4,35,128,200,7,13
	.byte	'reserved_1E410',0
	.word	103222
	.byte	48,4,35,144,200,7,13
	.byte	'TPS_EXTIM',0
	.word	103231
	.byte	28,4,35,192,200,7,13
	.byte	'reserved_1E45C',0
	.word	103236
	.byte	164,23,4,35,220,200,7,13
	.byte	'TR',0
	.word	103256
	.byte	64,4,35,128,224,7,13
	.byte	'reserved_1F040',0
	.word	103261
	.byte	192,23,4,35,192,224,7,13
	.byte	'CCTRL',0
	.word	95905
	.byte	4,4,35,128,248,7,13
	.byte	'CCNT',0
	.word	95843
	.byte	4,4,35,132,248,7,13
	.byte	'ICNT',0
	.word	98822
	.byte	4,4,35,136,248,7,13
	.byte	'M1CNT',0
	.word	99410
	.byte	4,4,35,140,248,7,13
	.byte	'M2CNT',0
	.word	99473
	.byte	4,4,35,144,248,7,13
	.byte	'M3CNT',0
	.word	99536
	.byte	4,4,35,148,248,7,13
	.byte	'reserved_1FC18',0
	.word	103023
	.byte	232,1,4,35,152,248,7,13
	.byte	'DBGSR',0
	.word	96597
	.byte	4,4,35,128,250,7,13
	.byte	'reserved_1FD04',0
	.word	3010
	.byte	4,4,35,132,250,7,13
	.byte	'EXEVT',0
	.word	97941
	.byte	4,4,35,136,250,7,13
	.byte	'CREVT',0
	.word	96349
	.byte	4,4,35,140,250,7,13
	.byte	'SWEVT',0
	.word	101108
	.byte	4,4,35,144,250,7,13
	.byte	'reserved_1FD14',0
	.word	11071
	.byte	28,4,35,148,250,7,13
	.byte	'TRIG_ACC',0
	.word	101962
	.byte	4,4,35,176,250,7,13
	.byte	'reserved_1FD34',0
	.word	5170
	.byte	12,4,35,180,250,7,13
	.byte	'DMS',0
	.word	97568
	.byte	4,4,35,192,250,7,13
	.byte	'DCX',0
	.word	96850
	.byte	4,4,35,196,250,7,13
	.byte	'DBGTCR',0
	.word	96660
	.byte	4,4,35,200,250,7,13
	.byte	'reserved_1FD4C',0
	.word	103272
	.byte	180,1,4,35,204,250,7,13
	.byte	'PCXI',0
	.word	99910
	.byte	4,4,35,128,252,7,13
	.byte	'PSW',0
	.word	100346
	.byte	4,4,35,132,252,7,13
	.byte	'PC',0
	.word	99661
	.byte	4,4,35,136,252,7,13
	.byte	'reserved_1FE0C',0
	.word	4830
	.byte	8,4,35,140,252,7,13
	.byte	'SYSCON',0
	.word	101171
	.byte	4,4,35,148,252,7,13
	.byte	'CPU_ID',0
	.word	96223
	.byte	4,4,35,152,252,7,13
	.byte	'CORE_ID',0
	.word	96032
	.byte	4,4,35,156,252,7,13
	.byte	'BIV',0
	.word	95522
	.byte	4,4,35,160,252,7,13
	.byte	'BTV',0
	.word	95782
	.byte	4,4,35,164,252,7,13
	.byte	'ISP',0
	.word	98945
	.byte	4,4,35,168,252,7,13
	.byte	'ICR',0
	.word	98884
	.byte	4,4,35,172,252,7,13
	.byte	'reserved_1FE30',0
	.word	4830
	.byte	8,4,35,176,252,7,13
	.byte	'FCX',0
	.word	98004
	.byte	4,4,35,184,252,7,13
	.byte	'LCX',0
	.word	99197
	.byte	4,4,35,188,252,7,13
	.byte	'reserved_1FE40',0
	.word	13233
	.byte	16,4,35,192,252,7,13
	.byte	'CUS_ID',0
	.word	96412
	.byte	4,4,35,208,252,7,13
	.byte	'reserved_1FE54',0
	.word	103283
	.byte	172,1,4,35,212,252,7,13
	.byte	'D',0
	.word	103294
	.byte	64,4,35,128,254,7,13
	.byte	'reserved_1FF40',0
	.word	12198
	.byte	64,4,35,192,254,7,13
	.byte	'A',0
	.word	103303
	.byte	64,4,35,128,255,7,13
	.byte	'reserved_1FFC0',0
	.word	12198
	.byte	64,4,35,192,255,7,0,14
	.word	103312
	.byte	32
	.byte	'Ifx_CPU',0,22,210,19,3
	.word	108410
	.byte	17,10,124,9,1,18
	.byte	'IfxCpu_Id_0',0,0,18
	.byte	'IfxCpu_Id_1',0,1,18
	.byte	'IfxCpu_Id_2',0,2,18
	.byte	'IfxCpu_Id_3',0,3,18
	.byte	'IfxCpu_Id_4',0,4,18
	.byte	'IfxCpu_Id_6',0,6,18
	.byte	'IfxCpu_Id_none',0,7,0,32
	.byte	'IfxCpu_Id',0,10,133,1,3
	.word	108432
	.byte	32
	.byte	'IfxCpu_ResourceCpu',0,10,170,1,3
	.word	10095
	.byte	10
	.byte	'_Ifx_STM_ACCEN0_Bits',0,23,68,16,4,11
	.byte	'EN0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	455
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_STM_ACCEN0_Bits',0,23,102,3
	.word	108586
	.byte	10
	.byte	'_Ifx_STM_ACCEN1_Bits',0,23,105,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_ACCEN1_Bits',0,23,108,3
	.word	109143
	.byte	10
	.byte	'_Ifx_STM_CAP_Bits',0,23,111,16,4,11
	.byte	'STMCAP_63_32',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_CAP_Bits',0,23,114,3
	.word	109220
	.byte	10
	.byte	'_Ifx_STM_CAPSV_Bits',0,23,117,16,4,11
	.byte	'STMCAP_63_32',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_CAPSV_Bits',0,23,120,3
	.word	109293
	.byte	10
	.byte	'_Ifx_STM_CLC_Bits',0,23,123,16,4,11
	.byte	'DISR',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_STM_CLC_Bits',0,23,130,1,3
	.word	109370
	.byte	10
	.byte	'_Ifx_STM_CMCON_Bits',0,23,133,1,16,4,11
	.byte	'MSIZE0',0,1
	.word	455
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	455
	.byte	3,0,2,35,0,11
	.byte	'MSTART0',0,1
	.word	455
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	455
	.byte	3,0,2,35,1,11
	.byte	'MSIZE1',0,1
	.word	455
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	455
	.byte	3,0,2,35,2,11
	.byte	'MSTART1',0,1
	.word	455
	.byte	5,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	455
	.byte	3,0,2,35,3,0,32
	.byte	'Ifx_STM_CMCON_Bits',0,23,143,1,3
	.word	109512
	.byte	10
	.byte	'_Ifx_STM_CMP_Bits',0,23,146,1,16,4,11
	.byte	'CMPVAL',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_CMP_Bits',0,23,149,1,3
	.word	109732
	.byte	10
	.byte	'_Ifx_STM_ICR_Bits',0,23,152,1,16,4,11
	.byte	'CMP0EN',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'CMP0IR',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'CMP0OS',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'CMP1EN',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'CMP1IR',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'CMP1OS',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	432
	.byte	25,0,2,35,0,0,32
	.byte	'Ifx_STM_ICR_Bits',0,23,162,1,3
	.word	109801
	.byte	10
	.byte	'_Ifx_STM_ID_Bits',0,23,165,1,16,4,11
	.byte	'MODREV',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	455
	.byte	8,0,2,35,1,11
	.byte	'MODNUM',0,2
	.word	1006
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_STM_ID_Bits',0,23,170,1,3
	.word	110004
	.byte	10
	.byte	'_Ifx_STM_ISCR_Bits',0,23,173,1,16,4,11
	.byte	'CMP0IRR',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'CMP0IRS',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'CMP1IRR',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'CMP1IRS',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_STM_ISCR_Bits',0,23,180,1,3
	.word	110108
	.byte	10
	.byte	'_Ifx_STM_KRST0_Bits',0,23,183,1,16,4,11
	.byte	'RST',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	432
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_STM_KRST0_Bits',0,23,188,1,3
	.word	110259
	.byte	10
	.byte	'_Ifx_STM_KRST1_Bits',0,23,191,1,16,4,11
	.byte	'RST',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	432
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_STM_KRST1_Bits',0,23,195,1,3
	.word	110370
	.byte	10
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,23,198,1,16,4,11
	.byte	'CLR',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	432
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_STM_KRSTCLR_Bits',0,23,202,1,3
	.word	110462
	.byte	10
	.byte	'_Ifx_STM_OCS_Bits',0,23,205,1,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	432
	.byte	21,8,2,35,0,11
	.byte	'SUS',0,1
	.word	455
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	455
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_STM_OCS_Bits',0,23,213,1,3
	.word	110558
	.byte	10
	.byte	'_Ifx_STM_TIM0_Bits',0,23,216,1,16,4,11
	.byte	'STM_31_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM0_Bits',0,23,219,1,3
	.word	110726
	.byte	10
	.byte	'_Ifx_STM_TIM0SV_Bits',0,23,222,1,16,4,11
	.byte	'STM_31_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM0SV_Bits',0,23,225,1,3
	.word	110799
	.byte	10
	.byte	'_Ifx_STM_TIM1_Bits',0,23,228,1,16,4,11
	.byte	'STM_35_4',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM1_Bits',0,23,231,1,3
	.word	110876
	.byte	10
	.byte	'_Ifx_STM_TIM2_Bits',0,23,234,1,16,4,11
	.byte	'STM_39_8',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM2_Bits',0,23,237,1,3
	.word	110949
	.byte	10
	.byte	'_Ifx_STM_TIM3_Bits',0,23,240,1,16,4,11
	.byte	'STM_43_12',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM3_Bits',0,23,243,1,3
	.word	111022
	.byte	10
	.byte	'_Ifx_STM_TIM4_Bits',0,23,246,1,16,4,11
	.byte	'STM_47_16',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM4_Bits',0,23,249,1,3
	.word	111096
	.byte	10
	.byte	'_Ifx_STM_TIM5_Bits',0,23,252,1,16,4,11
	.byte	'STM_51_20',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM5_Bits',0,23,255,1,3
	.word	111170
	.byte	10
	.byte	'_Ifx_STM_TIM6_Bits',0,23,130,2,16,4,11
	.byte	'STM_63_32',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM6_Bits',0,23,133,2,3
	.word	111244
	.byte	12,23,141,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	108586
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ACCEN0',0,23,146,2,3
	.word	111318
	.byte	12,23,149,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109143
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ACCEN1',0,23,154,2,3
	.word	111382
	.byte	12,23,157,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109220
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CAP',0,23,162,2,3
	.word	111446
	.byte	12,23,165,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109293
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CAPSV',0,23,170,2,3
	.word	111507
	.byte	12,23,173,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109370
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CLC',0,23,178,2,3
	.word	111570
	.byte	12,23,181,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109512
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CMCON',0,23,186,2,3
	.word	111631
	.byte	12,23,189,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109732
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CMP',0,23,194,2,3
	.word	111694
	.byte	12,23,197,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109801
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ICR',0,23,202,2,3
	.word	111755
	.byte	12,23,205,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110004
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ID',0,23,210,2,3
	.word	111816
	.byte	12,23,213,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110108
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ISCR',0,23,218,2,3
	.word	111876
	.byte	12,23,221,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110259
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_KRST0',0,23,226,2,3
	.word	111938
	.byte	12,23,229,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110370
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_KRST1',0,23,234,2,3
	.word	112001
	.byte	12,23,237,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110462
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_KRSTCLR',0,23,242,2,3
	.word	112064
	.byte	12,23,245,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110558
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_OCS',0,23,250,2,3
	.word	112129
	.byte	12,23,253,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110726
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM0',0,23,130,3,3
	.word	112190
	.byte	12,23,133,3,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110799
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM0SV',0,23,138,3,3
	.word	112252
	.byte	12,23,141,3,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110876
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM1',0,23,146,3,3
	.word	112316
	.byte	12,23,149,3,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110949
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM2',0,23,154,3,3
	.word	112378
	.byte	12,23,157,3,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111022
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM3',0,23,162,3,3
	.word	112440
	.byte	12,23,165,3,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111096
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM4',0,23,170,3,3
	.word	112502
	.byte	12,23,173,3,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111170
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM5',0,23,178,3,3
	.word	112564
	.byte	12,23,181,3,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111244
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM6',0,23,186,3,3
	.word	112626
	.byte	17,9,141,1,9,1,18
	.byte	'IfxCpu_CounterMode_normal',0,0,18
	.byte	'IfxCpu_CounterMode_task',0,1,0,32
	.byte	'IfxCpu_CounterMode',0,9,145,1,3
	.word	112688
	.byte	34,9,198,1,9,6,13
	.byte	'counter',0
	.word	10342
	.byte	4,2,35,0,13
	.byte	'overlfow',0
	.word	455
	.byte	1,2,35,4,0,32
	.byte	'IfxCpu_Counter',0,9,202,1,3
	.word	112777
	.byte	34,9,210,1,9,32,13
	.byte	'instruction',0
	.word	112777
	.byte	6,2,35,0,13
	.byte	'clock',0
	.word	112777
	.byte	6,2,35,6,13
	.byte	'counter1',0
	.word	112777
	.byte	6,2,35,12,13
	.byte	'counter2',0
	.word	112777
	.byte	6,2,35,18,13
	.byte	'counter3',0
	.word	112777
	.byte	6,2,35,24,0,32
	.byte	'IfxCpu_Perf',0,9,217,1,3
	.word	112843
	.byte	10
	.byte	'_Ifx_SMU_ACCEN0_Bits',0,24,68,16,4,11
	.byte	'EN0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	455
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SMU_ACCEN0_Bits',0,24,102,3
	.word	112961
	.byte	10
	.byte	'_Ifx_SMU_ACCEN1_Bits',0,24,105,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SMU_ACCEN1_Bits',0,24,108,3
	.word	113518
	.byte	10
	.byte	'_Ifx_SMU_AD_Bits',0,24,111,16,4,11
	.byte	'DF0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'DF1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'DF2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'DF3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'DF4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'DF5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'DF6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'DF7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'DF8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'DF9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'DF10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'DF11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'DF12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'DF13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'DF14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'DF15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'DF16',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'DF17',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'DF18',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'DF19',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'DF20',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'DF21',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'DF22',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'DF23',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'DF24',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'DF25',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'DF26',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'DF27',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'DF28',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'DF29',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'DF30',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'DF31',0,1
	.word	455
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SMU_AD_Bits',0,24,145,1,3
	.word	113595
	.byte	10
	.byte	'_Ifx_SMU_AEX_Bits',0,24,148,1,16,4,11
	.byte	'IRQ0STS',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'IRQ1STS',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'IRQ2STS',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'RST0STS',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'RST1STS',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'RST2STS',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'RST3STS',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'RST4STS',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'RST5STS',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'NMISTS',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'EMSSTS',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	455
	.byte	4,0,2,35,1,11
	.byte	'IRQ0AEM',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'IRQ1AEM',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'IRQ2AEM',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'RST0AEM',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'RST1AEM',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'RST2AEM',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'RST3AEM',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'RST4AEM',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'RST5AEM',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'NMIAEM',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'EMSAEM',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	455
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SMU_AEX_Bits',0,24,176,1,3
	.word	114145
	.byte	10
	.byte	'_Ifx_SMU_AEXCLR_Bits',0,24,179,1,16,4,11
	.byte	'IRQ0CLR',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'IRQ1CLR',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'IRQ2CLR',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'RST0CLR',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'RST1CLR',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'RST2CLR',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'RST3CLR',0,4
	.word	854
	.byte	1,25,2,35,0,11
	.byte	'RST4CLR',0,4
	.word	854
	.byte	1,24,2,35,0,11
	.byte	'RST5CLR',0,4
	.word	854
	.byte	1,23,2,35,0,11
	.byte	'NMICLR',0,4
	.word	854
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	854
	.byte	1,21,2,35,0,11
	.byte	'EMSCLR',0,4
	.word	854
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	854
	.byte	4,16,2,35,0,11
	.byte	'IRQ0AEMCLR',0,4
	.word	854
	.byte	1,15,2,35,0,11
	.byte	'IRQ1AEMCLR',0,4
	.word	854
	.byte	1,14,2,35,0,11
	.byte	'IRQ2AEMCLR',0,4
	.word	854
	.byte	1,13,2,35,0,11
	.byte	'RST0AEMCLR',0,4
	.word	854
	.byte	1,12,2,35,0,11
	.byte	'RST1AEMCLR',0,4
	.word	854
	.byte	1,11,2,35,0,11
	.byte	'RST2AEMCLR',0,4
	.word	854
	.byte	1,10,2,35,0,11
	.byte	'RST3AEMCLR',0,4
	.word	854
	.byte	1,9,2,35,0,11
	.byte	'RST4AEMCLR',0,4
	.word	854
	.byte	1,8,2,35,0,11
	.byte	'RST5AEMCLR',0,4
	.word	854
	.byte	1,7,2,35,0,11
	.byte	'NMIAEMCLR',0,4
	.word	854
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	854
	.byte	1,5,2,35,0,11
	.byte	'EMSAEMCLR',0,4
	.word	854
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	854
	.byte	4,0,2,35,0,0,32
	.byte	'Ifx_SMU_AEXCLR_Bits',0,24,207,1,3
	.word	114702
	.byte	10
	.byte	'_Ifx_SMU_AFCNT_Bits',0,24,210,1,16,4,11
	.byte	'FCNT',0,1
	.word	455
	.byte	4,4,2,35,0,11
	.byte	'ACNT',0,2
	.word	1006
	.byte	12,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1006
	.byte	14,2,2,35,2,11
	.byte	'FCO',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'ACO',0,1
	.word	455
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SMU_AFCNT_Bits',0,24,217,1,3
	.word	115298
	.byte	10
	.byte	'_Ifx_SMU_AG_Bits',0,24,220,1,16,4,11
	.byte	'SF0',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'SF1',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'SF2',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'SF3',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'SF4',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'SF5',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'SF6',0,4
	.word	854
	.byte	1,25,2,35,0,11
	.byte	'SF7',0,4
	.word	854
	.byte	1,24,2,35,0,11
	.byte	'SF8',0,4
	.word	854
	.byte	1,23,2,35,0,11
	.byte	'SF9',0,4
	.word	854
	.byte	1,22,2,35,0,11
	.byte	'SF10',0,4
	.word	854
	.byte	1,21,2,35,0,11
	.byte	'SF11',0,4
	.word	854
	.byte	1,20,2,35,0,11
	.byte	'SF12',0,4
	.word	854
	.byte	1,19,2,35,0,11
	.byte	'SF13',0,4
	.word	854
	.byte	1,18,2,35,0,11
	.byte	'SF14',0,4
	.word	854
	.byte	1,17,2,35,0,11
	.byte	'SF15',0,4
	.word	854
	.byte	1,16,2,35,0,11
	.byte	'SF16',0,4
	.word	854
	.byte	1,15,2,35,0,11
	.byte	'SF17',0,4
	.word	854
	.byte	1,14,2,35,0,11
	.byte	'SF18',0,4
	.word	854
	.byte	1,13,2,35,0,11
	.byte	'SF19',0,4
	.word	854
	.byte	1,12,2,35,0,11
	.byte	'SF20',0,4
	.word	854
	.byte	1,11,2,35,0,11
	.byte	'SF21',0,4
	.word	854
	.byte	1,10,2,35,0,11
	.byte	'SF22',0,4
	.word	854
	.byte	1,9,2,35,0,11
	.byte	'SF23',0,4
	.word	854
	.byte	1,8,2,35,0,11
	.byte	'SF24',0,4
	.word	854
	.byte	1,7,2,35,0,11
	.byte	'SF25',0,4
	.word	854
	.byte	1,6,2,35,0,11
	.byte	'SF26',0,4
	.word	854
	.byte	1,5,2,35,0,11
	.byte	'SF27',0,4
	.word	854
	.byte	1,4,2,35,0,11
	.byte	'SF28',0,4
	.word	854
	.byte	1,3,2,35,0,11
	.byte	'SF29',0,4
	.word	854
	.byte	1,2,2,35,0,11
	.byte	'SF30',0,4
	.word	854
	.byte	1,1,2,35,0,11
	.byte	'SF31',0,4
	.word	854
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_AG_Bits',0,24,254,1,3
	.word	115438
	.byte	10
	.byte	'_Ifx_SMU_AGC_Bits',0,24,129,2,16,4,11
	.byte	'IGCS0',0,4
	.word	854
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'IGCS1',0,4
	.word	854
	.byte	3,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	854
	.byte	1,24,2,35,0,11
	.byte	'IGCS2',0,4
	.word	854
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	854
	.byte	5,16,2,35,0,11
	.byte	'RCS',0,4
	.word	854
	.byte	6,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	854
	.byte	2,8,2,35,0,11
	.byte	'PES',0,4
	.word	854
	.byte	5,3,2,35,0,11
	.byte	'EFRST',0,4
	.word	854
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	854
	.byte	2,0,2,35,0,0,32
	.byte	'Ifx_SMU_AGC_Bits',0,24,142,2,3
	.word	115989
	.byte	10
	.byte	'_Ifx_SMU_AGCF_Bits',0,24,145,2,16,4,11
	.byte	'CF0',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'CF1',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'CF2',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'CF3',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'CF4',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'CF5',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'CF6',0,4
	.word	854
	.byte	1,25,2,35,0,11
	.byte	'CF7',0,4
	.word	854
	.byte	1,24,2,35,0,11
	.byte	'CF8',0,4
	.word	854
	.byte	1,23,2,35,0,11
	.byte	'CF9',0,4
	.word	854
	.byte	1,22,2,35,0,11
	.byte	'CF10',0,4
	.word	854
	.byte	1,21,2,35,0,11
	.byte	'CF11',0,4
	.word	854
	.byte	1,20,2,35,0,11
	.byte	'CF12',0,4
	.word	854
	.byte	1,19,2,35,0,11
	.byte	'CF13',0,4
	.word	854
	.byte	1,18,2,35,0,11
	.byte	'CF14',0,4
	.word	854
	.byte	1,17,2,35,0,11
	.byte	'CF15',0,4
	.word	854
	.byte	1,16,2,35,0,11
	.byte	'CF16',0,4
	.word	854
	.byte	1,15,2,35,0,11
	.byte	'CF17',0,4
	.word	854
	.byte	1,14,2,35,0,11
	.byte	'CF18',0,4
	.word	854
	.byte	1,13,2,35,0,11
	.byte	'CF19',0,4
	.word	854
	.byte	1,12,2,35,0,11
	.byte	'CF20',0,4
	.word	854
	.byte	1,11,2,35,0,11
	.byte	'CF21',0,4
	.word	854
	.byte	1,10,2,35,0,11
	.byte	'CF22',0,4
	.word	854
	.byte	1,9,2,35,0,11
	.byte	'CF23',0,4
	.word	854
	.byte	1,8,2,35,0,11
	.byte	'CF24',0,4
	.word	854
	.byte	1,7,2,35,0,11
	.byte	'CF25',0,4
	.word	854
	.byte	1,6,2,35,0,11
	.byte	'CF26',0,4
	.word	854
	.byte	1,5,2,35,0,11
	.byte	'CF27',0,4
	.word	854
	.byte	1,4,2,35,0,11
	.byte	'CF28',0,4
	.word	854
	.byte	1,3,2,35,0,11
	.byte	'CF29',0,4
	.word	854
	.byte	1,2,2,35,0,11
	.byte	'CF30',0,4
	.word	854
	.byte	1,1,2,35,0,11
	.byte	'CF31',0,4
	.word	854
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_AGCF_Bits',0,24,179,2,3
	.word	116251
	.byte	10
	.byte	'_Ifx_SMU_AGFSP_Bits',0,24,182,2,16,4,11
	.byte	'FE0',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'FE1',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'FE2',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'FE3',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'FE4',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'FE5',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'FE6',0,4
	.word	854
	.byte	1,25,2,35,0,11
	.byte	'FE7',0,4
	.word	854
	.byte	1,24,2,35,0,11
	.byte	'FE8',0,4
	.word	854
	.byte	1,23,2,35,0,11
	.byte	'FE9',0,4
	.word	854
	.byte	1,22,2,35,0,11
	.byte	'FE10',0,4
	.word	854
	.byte	1,21,2,35,0,11
	.byte	'FE11',0,4
	.word	854
	.byte	1,20,2,35,0,11
	.byte	'FE12',0,4
	.word	854
	.byte	1,19,2,35,0,11
	.byte	'FE13',0,4
	.word	854
	.byte	1,18,2,35,0,11
	.byte	'FE14',0,4
	.word	854
	.byte	1,17,2,35,0,11
	.byte	'FE15',0,4
	.word	854
	.byte	1,16,2,35,0,11
	.byte	'FE16',0,4
	.word	854
	.byte	1,15,2,35,0,11
	.byte	'FE17',0,4
	.word	854
	.byte	1,14,2,35,0,11
	.byte	'FE18',0,4
	.word	854
	.byte	1,13,2,35,0,11
	.byte	'FE19',0,4
	.word	854
	.byte	1,12,2,35,0,11
	.byte	'FE20',0,4
	.word	854
	.byte	1,11,2,35,0,11
	.byte	'FE21',0,4
	.word	854
	.byte	1,10,2,35,0,11
	.byte	'FE22',0,4
	.word	854
	.byte	1,9,2,35,0,11
	.byte	'FE23',0,4
	.word	854
	.byte	1,8,2,35,0,11
	.byte	'FE24',0,4
	.word	854
	.byte	1,7,2,35,0,11
	.byte	'FE25',0,4
	.word	854
	.byte	1,6,2,35,0,11
	.byte	'FE26',0,4
	.word	854
	.byte	1,5,2,35,0,11
	.byte	'FE27',0,4
	.word	854
	.byte	1,4,2,35,0,11
	.byte	'FE28',0,4
	.word	854
	.byte	1,3,2,35,0,11
	.byte	'FE29',0,4
	.word	854
	.byte	1,2,2,35,0,11
	.byte	'FE30',0,4
	.word	854
	.byte	1,1,2,35,0,11
	.byte	'FE31',0,4
	.word	854
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_AGFSP_Bits',0,24,216,2,3
	.word	116806
	.byte	10
	.byte	'_Ifx_SMU_CLC_Bits',0,24,219,2,16,4,11
	.byte	'DISR',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SMU_CLC_Bits',0,24,226,2,3
	.word	117363
	.byte	10
	.byte	'_Ifx_SMU_CMD_Bits',0,24,229,2,16,4,11
	.byte	'CMD',0,4
	.word	854
	.byte	4,28,2,35,0,11
	.byte	'ARG',0,4
	.word	854
	.byte	4,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	854
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SMU_CMD_Bits',0,24,234,2,3
	.word	117506
	.byte	10
	.byte	'_Ifx_SMU_DBG_Bits',0,24,237,2,16,4,11
	.byte	'SSM',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	432
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SMU_DBG_Bits',0,24,241,2,3
	.word	117609
	.byte	10
	.byte	'_Ifx_SMU_FSP_Bits',0,24,244,2,16,4,11
	.byte	'PRE1',0,4
	.word	854
	.byte	3,29,2,35,0,11
	.byte	'PRE2',0,4
	.word	854
	.byte	2,27,2,35,0,11
	.byte	'MODE',0,4
	.word	854
	.byte	2,25,2,35,0,11
	.byte	'PES',0,4
	.word	854
	.byte	1,24,2,35,0,11
	.byte	'TFSP_LOW',0,4
	.word	854
	.byte	14,10,2,35,0,11
	.byte	'TFSP_HIGH',0,4
	.word	854
	.byte	10,0,2,35,0,0,32
	.byte	'Ifx_SMU_FSP_Bits',0,24,252,2,3
	.word	117697
	.byte	10
	.byte	'_Ifx_SMU_ID_Bits',0,24,255,2,16,4,11
	.byte	'MOD_REV',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'MOD_TYPE',0,1
	.word	455
	.byte	8,0,2,35,1,11
	.byte	'MOD_NUMBER',0,2
	.word	1006
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SMU_ID_Bits',0,24,132,3,3
	.word	117852
	.byte	10
	.byte	'_Ifx_SMU_KEYS_Bits',0,24,135,3,16,4,11
	.byte	'CFGLCK',0,4
	.word	854
	.byte	8,24,2,35,0,11
	.byte	'PERLCK',0,4
	.word	854
	.byte	8,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	854
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_SMU_KEYS_Bits',0,24,140,3,3
	.word	117962
	.byte	10
	.byte	'_Ifx_SMU_OCS_Bits',0,24,143,3,16,4,11
	.byte	'TGS',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'TGB',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'TG_P',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	20,8,2,35,0,11
	.byte	'SUS',0,1
	.word	455
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	455
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_SMU_OCS_Bits',0,24,153,3,3
	.word	118074
	.byte	10
	.byte	'_Ifx_SMU_PCTL_Bits',0,24,156,3,16,4,11
	.byte	'HWDIR',0,4
	.word	854
	.byte	2,30,2,35,0,11
	.byte	'HWEN',0,4
	.word	854
	.byte	2,28,2,35,0,11
	.byte	'GFSCU_EN',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'GFSTS_EN',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	854
	.byte	1,25,2,35,0,11
	.byte	'PCS',0,4
	.word	854
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	854
	.byte	6,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	854
	.byte	9,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	854
	.byte	9,0,2,35,0,0,32
	.byte	'Ifx_SMU_PCTL_Bits',0,24,167,3,3
	.word	118266
	.byte	10
	.byte	'_Ifx_SMU_RMCTL_Bits',0,24,170,3,16,4,11
	.byte	'TE0',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'TE1',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'TE2',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'TE3',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'TE4',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'TE5',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'TE6',0,4
	.word	854
	.byte	1,25,2,35,0,11
	.byte	'TE7',0,4
	.word	854
	.byte	1,24,2,35,0,11
	.byte	'TE8',0,4
	.word	854
	.byte	1,23,2,35,0,11
	.byte	'TE9',0,4
	.word	854
	.byte	1,22,2,35,0,11
	.byte	'TE10',0,4
	.word	854
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	854
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	854
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	854
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	854
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	854
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	854
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	854
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	854
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	854
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	854
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	854
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	854
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	854
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	854
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	854
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	854
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	854
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	854
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	854
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	854
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	854
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_RMCTL_Bits',0,24,204,3,3
	.word	118497
	.byte	10
	.byte	'_Ifx_SMU_RMEF_Bits',0,24,207,3,16,4,11
	.byte	'EF0',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'EF1',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'EF2',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'EF3',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'EF4',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'EF5',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'EF6',0,4
	.word	854
	.byte	1,25,2,35,0,11
	.byte	'EF7',0,4
	.word	854
	.byte	1,24,2,35,0,11
	.byte	'EF8',0,4
	.word	854
	.byte	1,23,2,35,0,11
	.byte	'EF9',0,4
	.word	854
	.byte	1,22,2,35,0,11
	.byte	'EF10',0,4
	.word	854
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	854
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	854
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	854
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	854
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	854
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	854
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	854
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	854
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	854
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	854
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	854
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	854
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	854
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	854
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	854
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	854
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	854
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	854
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	854
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	854
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	854
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_RMEF_Bits',0,24,241,3,3
	.word	119201
	.byte	10
	.byte	'_Ifx_SMU_RMSTS_Bits',0,24,244,3,16,4,11
	.byte	'STS0',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'STS1',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'STS2',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'STS3',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'STS4',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'STS5',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'STS6',0,4
	.word	854
	.byte	1,25,2,35,0,11
	.byte	'STS7',0,4
	.word	854
	.byte	1,24,2,35,0,11
	.byte	'STS8',0,4
	.word	854
	.byte	1,23,2,35,0,11
	.byte	'STS9',0,4
	.word	854
	.byte	1,22,2,35,0,11
	.byte	'STS10',0,4
	.word	854
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	854
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	854
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	854
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	854
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	854
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	854
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	854
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	854
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	854
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	854
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	854
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	854
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	854
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	854
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	854
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	854
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	854
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	854
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	854
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	854
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	854
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_RMSTS_Bits',0,24,150,4,3
	.word	119903
	.byte	10
	.byte	'_Ifx_SMU_RTAC00_Bits',0,24,153,4,16,4,11
	.byte	'GID0',0,4
	.word	854
	.byte	4,28,2,35,0,11
	.byte	'ALID0',0,4
	.word	854
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	854
	.byte	7,16,2,35,0,11
	.byte	'GID1',0,4
	.word	854
	.byte	4,12,2,35,0,11
	.byte	'ALID1',0,4
	.word	854
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	854
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC00_Bits',0,24,161,4,3
	.word	120618
	.byte	10
	.byte	'_Ifx_SMU_RTAC01_Bits',0,24,164,4,16,4,11
	.byte	'GID2',0,4
	.word	854
	.byte	4,28,2,35,0,11
	.byte	'ALID2',0,4
	.word	854
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	854
	.byte	7,16,2,35,0,11
	.byte	'GID3',0,4
	.word	854
	.byte	4,12,2,35,0,11
	.byte	'ALID3',0,4
	.word	854
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	854
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC01_Bits',0,24,172,4,3
	.word	120786
	.byte	10
	.byte	'_Ifx_SMU_RTAC10_Bits',0,24,175,4,16,4,11
	.byte	'GID0',0,4
	.word	854
	.byte	4,28,2,35,0,11
	.byte	'ALID0',0,4
	.word	854
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	854
	.byte	7,16,2,35,0,11
	.byte	'GID1',0,4
	.word	854
	.byte	4,12,2,35,0,11
	.byte	'ALID1',0,4
	.word	854
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	854
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC10_Bits',0,24,183,4,3
	.word	120954
	.byte	10
	.byte	'_Ifx_SMU_RTAC11_Bits',0,24,186,4,16,4,11
	.byte	'GID2',0,4
	.word	854
	.byte	4,28,2,35,0,11
	.byte	'ALID2',0,4
	.word	854
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	854
	.byte	7,16,2,35,0,11
	.byte	'GID3',0,4
	.word	854
	.byte	4,12,2,35,0,11
	.byte	'ALID3',0,4
	.word	854
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	854
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC11_Bits',0,24,194,4,3
	.word	121122
	.byte	10
	.byte	'_Ifx_SMU_RTC_Bits',0,24,197,4,16,4,11
	.byte	'RT0E',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'RT1E',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	854
	.byte	6,24,2,35,0,11
	.byte	'RTD',0,4
	.word	854
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTC_Bits',0,24,203,4,3
	.word	121290
	.byte	10
	.byte	'_Ifx_SMU_STS_Bits',0,24,206,4,16,4,11
	.byte	'CMD',0,4
	.word	854
	.byte	4,28,2,35,0,11
	.byte	'ARG',0,4
	.word	854
	.byte	4,24,2,35,0,11
	.byte	'RES',0,4
	.word	854
	.byte	1,23,2,35,0,11
	.byte	'ASCE',0,4
	.word	854
	.byte	1,22,2,35,0,11
	.byte	'FSP',0,4
	.word	854
	.byte	2,20,2,35,0,11
	.byte	'FSTS',0,4
	.word	854
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	854
	.byte	3,16,2,35,0,11
	.byte	'RTS0',0,4
	.word	854
	.byte	1,15,2,35,0,11
	.byte	'RTME0',0,4
	.word	854
	.byte	1,14,2,35,0,11
	.byte	'RTS1',0,4
	.word	854
	.byte	1,13,2,35,0,11
	.byte	'RTME1',0,4
	.word	854
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	854
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_SMU_STS_Bits',0,24,220,4,3
	.word	121410
	.byte	12,24,228,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	112961
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_ACCEN0',0,24,233,4,3
	.word	121665
	.byte	12,24,236,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	113518
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_ACCEN1',0,24,241,4,3
	.word	121729
	.byte	12,24,244,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	113595
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AD',0,24,249,4,3
	.word	121793
	.byte	12,24,252,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	114145
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AEX',0,24,129,5,3
	.word	121853
	.byte	12,24,132,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	114702
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AEXCLR',0,24,137,5,3
	.word	121914
	.byte	12,24,140,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	115298
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AFCNT',0,24,145,5,3
	.word	121978
	.byte	12,24,148,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	115438
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AG',0,24,153,5,3
	.word	122041
	.byte	12,24,156,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	115989
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AGC',0,24,161,5,3
	.word	122101
	.byte	12,24,164,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	116251
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AGCF',0,24,169,5,3
	.word	122162
	.byte	12,24,172,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	116806
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AGFSP',0,24,177,5,3
	.word	122224
	.byte	12,24,180,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	117363
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_CLC',0,24,185,5,3
	.word	122287
	.byte	12,24,188,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	117506
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_CMD',0,24,193,5,3
	.word	122348
	.byte	12,24,196,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	117609
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_DBG',0,24,201,5,3
	.word	122409
	.byte	12,24,204,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	117697
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_FSP',0,24,209,5,3
	.word	122470
	.byte	12,24,212,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	117852
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_ID',0,24,217,5,3
	.word	122531
	.byte	12,24,220,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	117962
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_KEYS',0,24,225,5,3
	.word	122591
	.byte	12,24,228,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	118074
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_OCS',0,24,233,5,3
	.word	122653
	.byte	12,24,236,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	118266
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_PCTL',0,24,241,5,3
	.word	122714
	.byte	12,24,244,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	118497
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RMCTL',0,24,249,5,3
	.word	122776
	.byte	12,24,252,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	119201
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RMEF',0,24,129,6,3
	.word	122839
	.byte	12,24,132,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	119903
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RMSTS',0,24,137,6,3
	.word	122901
	.byte	12,24,140,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	120618
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC00',0,24,145,6,3
	.word	122964
	.byte	12,24,148,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	120786
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC01',0,24,153,6,3
	.word	123028
	.byte	12,24,156,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	120954
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC10',0,24,161,6,3
	.word	123092
	.byte	12,24,164,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	121122
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC11',0,24,169,6,3
	.word	123156
	.byte	12,24,172,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	121290
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTC',0,24,177,6,3
	.word	123220
	.byte	12,24,180,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	121410
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_STS',0,24,185,6,3
	.word	123281
	.byte	32
	.byte	'IfxScuCcu_Fsource',0,11,177,2,3
	.word	28986
	.byte	17,11,210,2,9,1,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy30',0,1,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy60',0,2,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy120',0,3,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy240',0,4,0,32
	.byte	'IfxScuCcu_LowPowerDivRatio',0,11,216,2,3
	.word	123369
	.byte	17,11,220,2,9,1,18
	.byte	'IfxScuCcu_ModulationAmplitude_0p5',0,0,18
	.byte	'IfxScuCcu_ModulationAmplitude_1p0',0,1,18
	.byte	'IfxScuCcu_ModulationAmplitude_1p25',0,2,18
	.byte	'IfxScuCcu_ModulationAmplitude_1p5',0,3,18
	.byte	'IfxScuCcu_ModulationAmplitude_2p0',0,4,18
	.byte	'IfxScuCcu_ModulationAmplitude_2p5',0,5,18
	.byte	'IfxScuCcu_ModulationAmplitude_count',0,6,0,32
	.byte	'IfxScuCcu_ModulationAmplitude',0,11,229,2,3
	.word	123562
	.byte	17,11,254,3,9,1,18
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc1',0,0,18
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc0',0,1,18
	.byte	'IfxScuCcu_PllInputClockSelection_fSysclk',0,2,0,32
	.byte	'IfxScuCcu_PllInputClockSelection',0,11,131,4,3
	.word	123863
	.byte	17,11,135,4,9,1,18
	.byte	'IfxScuCcu_Traprequest_esr0',0,0,18
	.byte	'IfxScuCcu_Traprequest_esr1',0,1,18
	.byte	'IfxScuCcu_Traprequest_trap2',0,2,18
	.byte	'IfxScuCcu_Traprequest_smu',0,3,0,32
	.byte	'IfxScuCcu_Traprequest',0,11,141,4,3
	.word	124037
	.byte	17,11,147,4,9,1,18
	.byte	'IfxScuCcu_ModEn_disabled',0,0,18
	.byte	'IfxScuCcu_ModEn_enabled',0,1,0,32
	.byte	'IfxScuCcu_ModEn',0,11,151,4,3
	.word	124191
	.byte	34,11,162,4,9,6,13
	.byte	'pDivider',0
	.word	455
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	455
	.byte	1,2,35,1,13
	.byte	'k2Divider',0
	.word	455
	.byte	1,2,35,2,13
	.byte	'k3Divider',0
	.word	455
	.byte	1,2,35,3,13
	.byte	'k3DividerBypass',0
	.word	455
	.byte	1,2,35,4,0,32
	.byte	'IfxScuCcu_PerPllConfig',0,11,171,4,3
	.word	124276
	.byte	34,11,176,4,9,4,13
	.byte	'pDivider',0
	.word	455
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	455
	.byte	1,2,35,1,13
	.byte	'k2Divider',0
	.word	455
	.byte	1,2,35,2,0,32
	.byte	'IfxScuCcu_SysPllConfig',0,11,181,4,3
	.word	124414
	.byte	34,11,189,4,9,8,13
	.byte	'value',0
	.word	10342
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	10342
	.byte	4,2,35,4,0,32
	.byte	'IfxScuCcu_CcuconRegConfig',0,11,193,4,3
	.word	124508
	.byte	34,11,197,4,9,6,13
	.byte	'k2Step',0
	.word	455
	.byte	1,2,35,0,13
	.byte	'waitTime',0
	.word	228
	.byte	4,2,35,2,0,32
	.byte	'IfxScuCcu_PllStepConfig',0,11,201,4,3
	.word	124579
	.byte	34,11,205,4,9,16,13
	.byte	'xtalFrequency',0
	.word	10342
	.byte	4,2,35,0,13
	.byte	'pllInputClockSelection',0
	.word	123863
	.byte	1,2,35,4,13
	.byte	'sysPllConfig',0
	.word	124414
	.byte	4,2,35,6,13
	.byte	'perPllConfig',0
	.word	124276
	.byte	6,2,35,10,0,32
	.byte	'IfxScuCcu_pllsParameterConfig',0,11,211,4,3
	.word	124653
	.byte	34,11,219,4,9,8,13
	.byte	'value',0
	.word	10342
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	10342
	.byte	4,2,35,4,0,32
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,11,223,4,3
	.word	124798
	.byte	34,11,231,4,9,80,13
	.byte	'ccucon0',0
	.word	124508
	.byte	8,2,35,0,13
	.byte	'ccucon1',0
	.word	124508
	.byte	8,2,35,8,13
	.byte	'ccucon2',0
	.word	124508
	.byte	8,2,35,16,13
	.byte	'ccucon5',0
	.word	124508
	.byte	8,2,35,24,13
	.byte	'ccucon6',0
	.word	124508
	.byte	8,2,35,32,13
	.byte	'ccucon7',0
	.word	124508
	.byte	8,2,35,40,13
	.byte	'ccucon8',0
	.word	124508
	.byte	8,2,35,48,13
	.byte	'ccucon9',0
	.word	124508
	.byte	8,2,35,56,13
	.byte	'ccucon10',0
	.word	124508
	.byte	8,2,35,64,13
	.byte	'ccucon11',0
	.word	124508
	.byte	8,2,35,72,0,32
	.byte	'IfxScuCcu_ClockDistributionConfig',0,11,243,4,3
	.word	124874
	.byte	34,11,247,4,9,20,13
	.byte	'pllsParameters',0
	.word	124653
	.byte	16,2,35,0,13
	.byte	'waitTime',0
	.word	228
	.byte	4,2,35,16,0,32
	.byte	'IfxScuCcu_InitialStepConfig',0,11,251,4,3
	.word	125096
	.byte	20
	.word	124579
	.byte	3
	.word	125182
	.byte	34,11,255,4,9,8,13
	.byte	'numOfSteps',0
	.word	455
	.byte	1,2,35,0,13
	.byte	'pllSteps',0
	.word	125187
	.byte	4,2,35,4,0,32
	.byte	'IfxScuCcu_PllThrottleConfig',0,11,131,5,3
	.word	125192
	.byte	34,11,137,5,9,2,13
	.byte	'Mod_Enable',0
	.word	124191
	.byte	1,2,35,0,13
	.byte	'Mod_Amp',0
	.word	123562
	.byte	1,2,35,1,0,32
	.byte	'IfxScuCcu_Mod_Config',0,11,141,5,3
	.word	125274
	.byte	10
	.byte	'_Ifx_CBS_ACCEN0_Bits',0,25,68,16,4,11
	.byte	'EN0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	455
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_CBS_ACCEN0_Bits',0,25,102,3
	.word	125348
	.byte	10
	.byte	'_Ifx_CBS_ACCEN1_Bits',0,25,105,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CBS_ACCEN1_Bits',0,25,108,3
	.word	125905
	.byte	10
	.byte	'_Ifx_CBS_COMDATA_Bits',0,25,111,16,4,11
	.byte	'DATA',0,4
	.word	854
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CBS_COMDATA_Bits',0,25,114,3
	.word	125982
	.byte	10
	.byte	'_Ifx_CBS_ICTSA_Bits',0,25,117,16,4,11
	.byte	'ADDR',0,4
	.word	854
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CBS_ICTSA_Bits',0,25,120,3
	.word	126055
	.byte	10
	.byte	'_Ifx_CBS_ICTTA_Bits',0,25,123,16,4,11
	.byte	'ADDR',0,4
	.word	854
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CBS_ICTTA_Bits',0,25,126,3
	.word	126124
	.byte	10
	.byte	'_Ifx_CBS_IFSA_Bits',0,25,129,1,16,4,11
	.byte	'ADDR',0,4
	.word	854
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CBS_IFSA_Bits',0,25,132,1,3
	.word	126193
	.byte	10
	.byte	'_Ifx_CBS_IFSC_Bits',0,25,135,1,16,4,11
	.byte	'GO',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'OTGS',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'MODE',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'PRIO',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	854
	.byte	4,24,2,35,0,11
	.byte	'RSREP',0,4
	.word	854
	.byte	4,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	854
	.byte	4,16,2,35,0,11
	.byte	'BM0',0,4
	.word	854
	.byte	2,14,2,35,0,11
	.byte	'BM1',0,4
	.word	854
	.byte	2,12,2,35,0,11
	.byte	'BM2',0,4
	.word	854
	.byte	2,10,2,35,0,11
	.byte	'BM3',0,4
	.word	854
	.byte	2,8,2,35,0,11
	.byte	'BM4',0,4
	.word	854
	.byte	2,6,2,35,0,11
	.byte	'BM5',0,4
	.word	854
	.byte	2,4,2,35,0,11
	.byte	'BM6',0,4
	.word	854
	.byte	2,2,2,35,0,11
	.byte	'BM7',0,4
	.word	854
	.byte	2,0,2,35,0,0,32
	.byte	'Ifx_CBS_IFSC_Bits',0,25,152,1,3
	.word	126262
	.byte	10
	.byte	'_Ifx_CBS_INTMOD_Bits',0,25,155,1,16,4,11
	.byte	'SET_CRS',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'SET_CWS',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'SET_CS',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'CLR_CS',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'CHANNEL_P',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'CHANNEL',0,4
	.word	854
	.byte	3,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	854
	.byte	8,16,2,35,0,11
	.byte	'SET_INT_MOD',0,4
	.word	854
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	854
	.byte	1,14,2,35,0,11
	.byte	'SET_INT_TRC',0,4
	.word	854
	.byte	1,13,2,35,0,11
	.byte	'CLR_INT_TRC',0,4
	.word	854
	.byte	1,12,2,35,0,11
	.byte	'TRC_MOD_P',0,4
	.word	854
	.byte	1,11,2,35,0,11
	.byte	'TRC_MOD',0,4
	.word	854
	.byte	2,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	854
	.byte	1,8,2,35,0,11
	.byte	'INT_MOD',0,4
	.word	854
	.byte	1,7,2,35,0,11
	.byte	'INT_TRC',0,4
	.word	854
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	854
	.byte	6,0,2,35,0,0,32
	.byte	'Ifx_CBS_INTMOD_Bits',0,25,174,1,3
	.word	126559
	.byte	10
	.byte	'_Ifx_CBS_IOSR_Bits',0,25,177,1,16,4,11
	.byte	'reserved_0',0,4
	.word	854
	.byte	4,28,2,35,0,11
	.byte	'CRSYNC',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'CWSYNC',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'CW_ACK',0,4
	.word	854
	.byte	1,25,2,35,0,11
	.byte	'COM_SYNC',0,4
	.word	854
	.byte	1,24,2,35,0,11
	.byte	'HOSTED',0,4
	.word	854
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	854
	.byte	3,20,2,35,0,11
	.byte	'CHANNEL',0,4
	.word	854
	.byte	3,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	854
	.byte	17,0,2,35,0,0,32
	.byte	'Ifx_CBS_IOSR_Bits',0,25,188,1,3
	.word	126968
	.byte	10
	.byte	'_Ifx_CBS_JDPID_Bits',0,25,191,1,16,4,11
	.byte	'MOD_REV',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'MOD_TYPE',0,1
	.word	455
	.byte	8,0,2,35,1,11
	.byte	'MOD_NUMBER',0,2
	.word	1006
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_CBS_JDPID_Bits',0,25,196,1,3
	.word	127199
	.byte	10
	.byte	'_Ifx_CBS_JTAGID_Bits',0,25,199,1,16,4,11
	.byte	'JTAG_ID',0,4
	.word	854
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CBS_JTAGID_Bits',0,25,202,1,3
	.word	127315
	.byte	10
	.byte	'_Ifx_CBS_OCNTRL_Bits',0,25,205,1,16,4,11
	.byte	'OC0_P',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'OC0',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'OC1_P',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'OC1',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'OC2_P',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'OC2',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'OC3_P',0,4
	.word	854
	.byte	1,25,2,35,0,11
	.byte	'OC3',0,4
	.word	854
	.byte	1,24,2,35,0,11
	.byte	'OC4_P',0,4
	.word	854
	.byte	1,23,2,35,0,11
	.byte	'OC4',0,4
	.word	854
	.byte	1,22,2,35,0,11
	.byte	'OC5_P',0,4
	.word	854
	.byte	1,21,2,35,0,11
	.byte	'OC5',0,4
	.word	854
	.byte	1,20,2,35,0,11
	.byte	'WDTSUS_P',0,4
	.word	854
	.byte	1,19,2,35,0,11
	.byte	'WDTSUS',0,4
	.word	854
	.byte	1,18,2,35,0,11
	.byte	'STABLE_P',0,4
	.word	854
	.byte	1,17,2,35,0,11
	.byte	'STABLE',0,4
	.word	854
	.byte	1,16,2,35,0,11
	.byte	'OJC0_P',0,4
	.word	854
	.byte	1,15,2,35,0,11
	.byte	'OJC0',0,4
	.word	854
	.byte	1,14,2,35,0,11
	.byte	'OJC1_P',0,4
	.word	854
	.byte	1,13,2,35,0,11
	.byte	'OJC1',0,4
	.word	854
	.byte	1,12,2,35,0,11
	.byte	'OJC2_P',0,4
	.word	854
	.byte	1,11,2,35,0,11
	.byte	'OJC2',0,4
	.word	854
	.byte	1,10,2,35,0,11
	.byte	'OJC3_P',0,4
	.word	854
	.byte	1,9,2,35,0,11
	.byte	'OJC3',0,4
	.word	854
	.byte	1,8,2,35,0,11
	.byte	'OJC4_P',0,4
	.word	854
	.byte	1,7,2,35,0,11
	.byte	'OJC4',0,4
	.word	854
	.byte	1,6,2,35,0,11
	.byte	'OJC5_P',0,4
	.word	854
	.byte	1,5,2,35,0,11
	.byte	'OJC5',0,4
	.word	854
	.byte	1,4,2,35,0,11
	.byte	'OJC6_P',0,4
	.word	854
	.byte	1,3,2,35,0,11
	.byte	'OJC6',0,4
	.word	854
	.byte	1,2,2,35,0,11
	.byte	'OJC7_P',0,4
	.word	854
	.byte	1,1,2,35,0,11
	.byte	'OJC7',0,4
	.word	854
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CBS_OCNTRL_Bits',0,25,239,1,3
	.word	127391
	.byte	10
	.byte	'_Ifx_CBS_OEC_Bits',0,25,242,1,16,4,11
	.byte	'PAT',0,4
	.word	854
	.byte	8,24,2,35,0,11
	.byte	'DS',0,4
	.word	854
	.byte	1,23,2,35,0,11
	.byte	'OCO',0,4
	.word	854
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	854
	.byte	6,16,2,35,0,11
	.byte	'IF_LCK_P',0,4
	.word	854
	.byte	1,15,2,35,0,11
	.byte	'IF_LCK',0,4
	.word	854
	.byte	1,14,2,35,0,11
	.byte	'AUT_OK_P',0,4
	.word	854
	.byte	1,13,2,35,0,11
	.byte	'AUT_OK',0,4
	.word	854
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	854
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CBS_OEC_Bits',0,25,253,1,3
	.word	127988
	.byte	10
	.byte	'_Ifx_CBS_OIFM_Bits',0,25,128,2,16,4,11
	.byte	'DAPMODE',0,4
	.word	854
	.byte	3,29,2,35,0,11
	.byte	'DAPRST',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	854
	.byte	4,24,2,35,0,11
	.byte	'F_JTAG',0,4
	.word	854
	.byte	1,23,2,35,0,11
	.byte	'N_JTAG',0,4
	.word	854
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	854
	.byte	2,20,2,35,0,11
	.byte	'PADCTL',0,4
	.word	854
	.byte	2,18,2,35,0,11
	.byte	'PADCTLI',0,4
	.word	854
	.byte	2,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	854
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CBS_OIFM_Bits',0,25,139,2,3
	.word	128205
	.byte	10
	.byte	'_Ifx_CBS_OSTATE_Bits',0,25,142,2,16,4,11
	.byte	'OEN',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'OC0',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'OC1',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'OC2',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'ENIDIS',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EECTRC',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EECDIS',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'WDTSUS',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'HARR',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'OJC1',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'OJC2',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'OJC3',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'RSTCL0',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'RSTCL1',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'OJC6',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'RSTCL3',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'IF_LCK',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'AUT_OK',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'STABLE',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'OCO',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	1006
	.byte	12,0,2,35,2,0,32
	.byte	'Ifx_CBS_OSTATE_Bits',0,25,165,2,3
	.word	128436
	.byte	10
	.byte	'_Ifx_CBS_TCCB_Bits',0,25,168,2,16,4,11
	.byte	'C0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'C1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'C2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'C3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'C4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'C5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	25,1,2,35,0,11
	.byte	'HSM',0,1
	.word	455
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_CBS_TCCB_Bits',0,25,178,2,3
	.word	128851
	.byte	10
	.byte	'_Ifx_CBS_TCCH_Bits',0,25,181,2,16,4,11
	.byte	'C0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'C1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'C2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'C3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'C4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'C5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	25,1,2,35,0,11
	.byte	'HSM',0,1
	.word	455
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_CBS_TCCH_Bits',0,25,191,2,3
	.word	129025
	.byte	10
	.byte	'_Ifx_CBS_TCIP_Bits',0,25,194,2,16,4,11
	.byte	'P0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CBS_TCIP_Bits',0,25,205,2,3
	.word	129199
	.byte	10
	.byte	'_Ifx_CBS_TCM_Bits',0,25,208,2,16,4,11
	.byte	'BRK',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'SUS',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	6,0,2,35,0,11
	.byte	'T0',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'T1',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'T2',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'T3',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	432
	.byte	20,0,2,35,0,0,32
	.byte	'Ifx_CBS_TCM_Bits',0,25,218,2,3
	.word	129386
	.byte	10
	.byte	'_Ifx_CBS_TCTGB_Bits',0,25,221,2,16,4,11
	.byte	'OTGB0',0,2
	.word	1006
	.byte	16,0,2,35,0,11
	.byte	'OTGB1',0,2
	.word	1006
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_CBS_TCTGB_Bits',0,25,225,2,3
	.word	129568
	.byte	10
	.byte	'_Ifx_CBS_TCTL_Bits',0,25,228,2,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'TL1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'TL2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'TL3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'TL4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'TL5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'TL6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'TL7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CBS_TCTL_Bits',0,25,239,2,3
	.word	129657
	.byte	10
	.byte	'_Ifx_CBS_TIPR_Bits',0,25,242,2,16,4,11
	.byte	'PIN0',0,4
	.word	854
	.byte	4,28,2,35,0,11
	.byte	'PIN1',0,4
	.word	854
	.byte	4,24,2,35,0,11
	.byte	'PIN2',0,4
	.word	854
	.byte	4,20,2,35,0,11
	.byte	'PIN3',0,4
	.word	854
	.byte	4,16,2,35,0,11
	.byte	'PIN4',0,4
	.word	854
	.byte	4,12,2,35,0,11
	.byte	'PIN5',0,4
	.word	854
	.byte	4,8,2,35,0,11
	.byte	'PIN6',0,4
	.word	854
	.byte	4,4,2,35,0,11
	.byte	'PIN7',0,4
	.word	854
	.byte	4,0,2,35,0,0,32
	.byte	'Ifx_CBS_TIPR_Bits',0,25,252,2,3
	.word	129859
	.byte	10
	.byte	'_Ifx_CBS_TL1ST_Bits',0,25,255,2,16,4,11
	.byte	'C0',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'C1',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'C2',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'C3',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'C4',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'C5',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	854
	.byte	18,8,2,35,0,11
	.byte	'M0',0,4
	.word	854
	.byte	1,7,2,35,0,11
	.byte	'M1',0,4
	.word	854
	.byte	1,6,2,35,0,11
	.byte	'M2',0,4
	.word	854
	.byte	1,5,2,35,0,11
	.byte	'HSS1',0,4
	.word	854
	.byte	1,4,2,35,0,11
	.byte	'HSS0',0,4
	.word	854
	.byte	1,3,2,35,0,11
	.byte	'DMA',0,4
	.word	854
	.byte	1,2,2,35,0,11
	.byte	'DMA1',0,4
	.word	854
	.byte	1,1,2,35,0,11
	.byte	'HSM',0,4
	.word	854
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CBS_TL1ST_Bits',0,25,144,3,3
	.word	130040
	.byte	10
	.byte	'_Ifx_CBS_TLC_Bits',0,25,147,3,16,4,11
	.byte	'reserved_0',0,4
	.word	854
	.byte	4,28,2,35,0,11
	.byte	'TLSP1',0,4
	.word	854
	.byte	4,24,2,35,0,11
	.byte	'TLSP2',0,4
	.word	854
	.byte	4,20,2,35,0,11
	.byte	'TLSP3',0,4
	.word	854
	.byte	4,16,2,35,0,11
	.byte	'TLSP4',0,4
	.word	854
	.byte	4,12,2,35,0,11
	.byte	'TLSP5',0,4
	.word	854
	.byte	4,8,2,35,0,11
	.byte	'TLSP6',0,4
	.word	854
	.byte	4,4,2,35,0,11
	.byte	'TLSP7',0,4
	.word	854
	.byte	4,0,2,35,0,0,32
	.byte	'Ifx_CBS_TLC_Bits',0,25,157,3,3
	.word	130321
	.byte	10
	.byte	'_Ifx_CBS_TLCC_Bits',0,25,160,3,16,4,11
	.byte	'TGL',0,4
	.word	854
	.byte	4,28,2,35,0,11
	.byte	'LE',0,4
	.word	854
	.byte	3,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	854
	.byte	1,24,2,35,0,11
	.byte	'CLR',0,4
	.word	854
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	854
	.byte	2,20,2,35,0,11
	.byte	'STOP',0,4
	.word	854
	.byte	2,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	854
	.byte	18,0,2,35,0,0,32
	.byte	'Ifx_CBS_TLCC_Bits',0,25,169,3,3
	.word	130513
	.byte	10
	.byte	'_Ifx_CBS_TLCHE_Bits',0,25,172,3,16,4,11
	.byte	'reserved_0',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'TL1',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'TL2',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'TL3',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	854
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_CBS_TLCHE_Bits',0,25,179,3,3
	.word	130694
	.byte	10
	.byte	'_Ifx_CBS_TLCHS_Bits',0,25,182,3,16,4,11
	.byte	'reserved_0',0,4
	.word	854
	.byte	1,31,2,35,0,11
	.byte	'TL1',0,4
	.word	854
	.byte	1,30,2,35,0,11
	.byte	'TL2',0,4
	.word	854
	.byte	1,29,2,35,0,11
	.byte	'TL3',0,4
	.word	854
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	854
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_CBS_TLCHS_Bits',0,25,189,3,3
	.word	130838
	.byte	10
	.byte	'_Ifx_CBS_TLCV_Bits',0,25,192,3,16,4,11
	.byte	'CV',0,4
	.word	432
	.byte	31,1,2,35,0,11
	.byte	'SO',0,1
	.word	455
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_CBS_TLCV_Bits',0,25,196,3,3
	.word	130982
	.byte	10
	.byte	'_Ifx_CBS_TLS_Bits',0,25,199,3,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'TL1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'TL2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'TL3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'TL4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'TL5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'TL6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'TL7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CBS_TLS_Bits',0,25,210,3,3
	.word	131063
	.byte	10
	.byte	'_Ifx_CBS_TLT_Bits',0,25,213,3,16,4,11
	.byte	'TGL',0,4
	.word	854
	.byte	4,28,2,35,0,11
	.byte	'VTZ',0,4
	.word	854
	.byte	1,27,2,35,0,11
	.byte	'RL',0,4
	.word	854
	.byte	1,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	854
	.byte	10,16,2,35,0,11
	.byte	'TIM',0,4
	.word	854
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CBS_TLT_Bits',0,25,220,3,3
	.word	131263
	.byte	10
	.byte	'_Ifx_CBS_TLTTH_Bits',0,25,223,3,16,4,11
	.byte	'reserved_0',0,4
	.word	854
	.byte	2,30,2,35,0,11
	.byte	'TL1',0,4
	.word	854
	.byte	2,28,2,35,0,11
	.byte	'TL2',0,4
	.word	854
	.byte	2,26,2,35,0,11
	.byte	'TL3',0,4
	.word	854
	.byte	2,24,2,35,0,11
	.byte	'TL4',0,4
	.word	854
	.byte	2,22,2,35,0,11
	.byte	'TL5',0,4
	.word	854
	.byte	2,20,2,35,0,11
	.byte	'TL6',0,4
	.word	854
	.byte	2,18,2,35,0,11
	.byte	'TL7',0,4
	.word	854
	.byte	2,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	854
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CBS_TLTTH_Bits',0,25,234,3,3
	.word	131395
	.byte	10
	.byte	'_Ifx_CBS_TOPPS_Bits',0,25,237,3,16,4,11
	.byte	'PIN0',0,4
	.word	854
	.byte	2,30,2,35,0,11
	.byte	'PIN1',0,4
	.word	854
	.byte	2,28,2,35,0,11
	.byte	'PIN2',0,4
	.word	854
	.byte	2,26,2,35,0,11
	.byte	'PIN3',0,4
	.word	854
	.byte	2,24,2,35,0,11
	.byte	'PIN4',0,4
	.word	854
	.byte	2,22,2,35,0,11
	.byte	'PIN5',0,4
	.word	854
	.byte	2,20,2,35,0,11
	.byte	'PIN6',0,4
	.word	854
	.byte	2,18,2,35,0,11
	.byte	'PIN7',0,4
	.word	854
	.byte	2,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	854
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CBS_TOPPS_Bits',0,25,248,3,3
	.word	131600
	.byte	10
	.byte	'_Ifx_CBS_TOPR_Bits',0,25,251,3,16,4,11
	.byte	'PIN0',0,4
	.word	854
	.byte	4,28,2,35,0,11
	.byte	'PIN1',0,4
	.word	854
	.byte	4,24,2,35,0,11
	.byte	'PIN2',0,4
	.word	854
	.byte	4,20,2,35,0,11
	.byte	'PIN3',0,4
	.word	854
	.byte	4,16,2,35,0,11
	.byte	'PIN4',0,4
	.word	854
	.byte	4,12,2,35,0,11
	.byte	'PIN5',0,4
	.word	854
	.byte	4,8,2,35,0,11
	.byte	'PIN6',0,4
	.word	854
	.byte	4,4,2,35,0,11
	.byte	'PIN7',0,4
	.word	854
	.byte	4,0,2,35,0,0,32
	.byte	'Ifx_CBS_TOPR_Bits',0,25,133,4,3
	.word	131806
	.byte	10
	.byte	'_Ifx_CBS_TRC_Bits',0,25,136,4,16,4,11
	.byte	'HALT',0,4
	.word	854
	.byte	4,28,2,35,0,11
	.byte	'BRKOUT',0,4
	.word	854
	.byte	4,24,2,35,0,11
	.byte	'BT1',0,4
	.word	854
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	854
	.byte	11,12,2,35,0,11
	.byte	'BRKIN',0,4
	.word	854
	.byte	4,8,2,35,0,11
	.byte	'SUSIN',0,4
	.word	854
	.byte	4,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	854
	.byte	4,0,2,35,0,0,32
	.byte	'Ifx_CBS_TRC_Bits',0,25,145,4,3
	.word	131987
	.byte	10
	.byte	'_Ifx_CBS_TREC_Bits',0,25,148,4,16,4,11
	.byte	'TR0EV',0,4
	.word	854
	.byte	4,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	854
	.byte	4,24,2,35,0,11
	.byte	'TR2EV',0,4
	.word	854
	.byte	4,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	854
	.byte	4,16,2,35,0,11
	.byte	'TR4EV',0,4
	.word	854
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	854
	.byte	4,8,2,35,0,11
	.byte	'TR6EV',0,4
	.word	854
	.byte	4,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	854
	.byte	4,0,2,35,0,0,32
	.byte	'Ifx_CBS_TREC_Bits',0,25,158,4,3
	.word	132166
	.byte	10
	.byte	'_Ifx_CBS_TRHSM_Bits',0,25,161,4,16,4,11
	.byte	'HALT',0,4
	.word	854
	.byte	4,28,2,35,0,11
	.byte	'BRKOUT',0,4
	.word	854
	.byte	4,24,2,35,0,11
	.byte	'BT1',0,4
	.word	854
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	854
	.byte	11,12,2,35,0,11
	.byte	'BRKIN',0,4
	.word	854
	.byte	4,8,2,35,0,11
	.byte	'SUSIN',0,4
	.word	854
	.byte	4,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	854
	.byte	4,0,2,35,0,0,32
	.byte	'Ifx_CBS_TRHSM_Bits',0,25,170,4,3
	.word	132378
	.byte	10
	.byte	'_Ifx_CBS_TRIG_Bits',0,25,173,4,16,4,11
	.byte	'TRGX_0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'TRGX_1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'TRGX_2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'TRGX_3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'TRGX_4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'TRGX_5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'TRGX_6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'TRGX_7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'TRGX_8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'TRGX_9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'TRGX_10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'TRGX_11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'TRGX_12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'TRGX_13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'TRGX_14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'TRGX_15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	455
	.byte	8,0,2,35,2,11
	.byte	'X',0,1
	.word	455
	.byte	8,0,2,35,3,0,32
	.byte	'Ifx_CBS_TRIG_Bits',0,25,193,4,3
	.word	132561
	.byte	10
	.byte	'_Ifx_CBS_TRIGC_Bits',0,25,196,4,16,4,11
	.byte	'TRGX_0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'TRGX_1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'TRGX_2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'TRGX_3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'TRGX_4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'TRGX_5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'TRGX_6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'TRGX_7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'TRGX_8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'TRGX_9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'TRGX_10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'TRGX_11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'TRGX_12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'TRGX_13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'TRGX_14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'TRGX_15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	455
	.byte	8,0,2,35,2,11
	.byte	'X',0,1
	.word	455
	.byte	8,0,2,35,3,0,32
	.byte	'Ifx_CBS_TRIGC_Bits',0,25,216,4,3
	.word	132944
	.byte	10
	.byte	'_Ifx_CBS_TRIGS_Bits',0,25,219,4,16,4,11
	.byte	'BITNUM',0,4
	.word	854
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	854
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CBS_TRIGS_Bits',0,25,223,4,3
	.word	133329
	.byte	10
	.byte	'_Ifx_CBS_TRMC_Bits',0,25,226,4,16,4,11
	.byte	'reserved_0',0,4
	.word	854
	.byte	4,28,2,35,0,11
	.byte	'BRKOUT',0,4
	.word	854
	.byte	4,24,2,35,0,11
	.byte	'SUSOUT',0,4
	.word	854
	.byte	4,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	854
	.byte	4,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	854
	.byte	4,12,2,35,0,11
	.byte	'BRKIN',0,4
	.word	854
	.byte	4,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	854
	.byte	8,0,2,35,0,0,32
	.byte	'Ifx_CBS_TRMC_Bits',0,25,235,4,3
	.word	133424
	.byte	10
	.byte	'_Ifx_CBS_TRMT_Bits',0,25,238,4,16,4,11
	.byte	'TG0',0,4
	.word	854
	.byte	4,28,2,35,0,11
	.byte	'TG1',0,4
	.word	854
	.byte	4,24,2,35,0,11
	.byte	'TG2',0,4
	.word	854
	.byte	4,20,2,35,0,11
	.byte	'TG3',0,4
	.word	854
	.byte	4,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	854
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CBS_TRMT_Bits',0,25,245,4,3
	.word	133621
	.byte	10
	.byte	'_Ifx_CBS_TRSS_Bits',0,25,248,4,16,4,11
	.byte	'TT',0,4
	.word	854
	.byte	4,28,2,35,0,11
	.byte	'IFS',0,4
	.word	854
	.byte	4,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	854
	.byte	8,16,2,35,0,11
	.byte	'SRC0',0,4
	.word	854
	.byte	4,12,2,35,0,11
	.byte	'SRC1',0,4
	.word	854
	.byte	4,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	854
	.byte	8,0,2,35,0,0,32
	.byte	'Ifx_CBS_TRSS_Bits',0,25,128,5,3
	.word	133757
	.byte	10
	.byte	'_Ifx_CBS_TRTGB_H_Bits',0,25,131,5,16,4,11
	.byte	'TG8',0,4
	.word	854
	.byte	4,28,2,35,0,11
	.byte	'TG9',0,4
	.word	854
	.byte	4,24,2,35,0,11
	.byte	'TG10',0,4
	.word	854
	.byte	4,20,2,35,0,11
	.byte	'TG11',0,4
	.word	854
	.byte	4,16,2,35,0,11
	.byte	'TG12',0,4
	.word	854
	.byte	4,12,2,35,0,11
	.byte	'TG13',0,4
	.word	854
	.byte	4,8,2,35,0,11
	.byte	'TG14',0,4
	.word	854
	.byte	4,4,2,35,0,11
	.byte	'TG15',0,4
	.word	854
	.byte	4,0,2,35,0,0,32
	.byte	'Ifx_CBS_TRTGB_H_Bits',0,25,141,5,3
	.word	133916
	.byte	10
	.byte	'_Ifx_CBS_TRTGB_L_Bits',0,25,144,5,16,4,11
	.byte	'TG0',0,4
	.word	854
	.byte	4,28,2,35,0,11
	.byte	'TG1',0,4
	.word	854
	.byte	4,24,2,35,0,11
	.byte	'TG2',0,4
	.word	854
	.byte	4,20,2,35,0,11
	.byte	'TG3',0,4
	.word	854
	.byte	4,16,2,35,0,11
	.byte	'TG4',0,4
	.word	854
	.byte	4,12,2,35,0,11
	.byte	'TG5',0,4
	.word	854
	.byte	4,8,2,35,0,11
	.byte	'TG6',0,4
	.word	854
	.byte	4,4,2,35,0,11
	.byte	'TG7',0,4
	.word	854
	.byte	4,0,2,35,0,0,32
	.byte	'Ifx_CBS_TRTGB_L_Bits',0,25,154,5,3
	.word	134101
	.byte	12,25,162,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	125348
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_ACCEN0',0,25,167,5,3
	.word	134280
	.byte	12,25,170,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	125905
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_ACCEN1',0,25,175,5,3
	.word	134344
	.byte	12,25,178,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	125982
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_COMDATA',0,25,183,5,3
	.word	134408
	.byte	12,25,186,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	126055
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_ICTSA',0,25,191,5,3
	.word	134473
	.byte	12,25,194,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	126124
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_ICTTA',0,25,199,5,3
	.word	134536
	.byte	12,25,202,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	126193
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_IFSA',0,25,207,5,3
	.word	134599
	.byte	12,25,210,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	126262
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_IFSC',0,25,215,5,3
	.word	134661
	.byte	12,25,218,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	126559
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_INTMOD',0,25,223,5,3
	.word	134723
	.byte	12,25,226,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	126968
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_IOSR',0,25,231,5,3
	.word	134787
	.byte	12,25,234,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	127199
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_JDPID',0,25,239,5,3
	.word	134849
	.byte	12,25,242,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	127315
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_JTAGID',0,25,247,5,3
	.word	134912
	.byte	12,25,250,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	127391
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_OCNTRL',0,25,255,5,3
	.word	134976
	.byte	12,25,130,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	127988
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_OEC',0,25,135,6,3
	.word	135040
	.byte	12,25,138,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	128205
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_OIFM',0,25,143,6,3
	.word	135101
	.byte	12,25,146,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	128436
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_OSTATE',0,25,151,6,3
	.word	135163
	.byte	12,25,154,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	128851
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_TCCB',0,25,159,6,3
	.word	135227
	.byte	12,25,162,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	129025
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_TCCH',0,25,167,6,3
	.word	135289
	.byte	12,25,170,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	129199
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_TCIP',0,25,175,6,3
	.word	135351
	.byte	12,25,178,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	129386
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_TCM',0,25,183,6,3
	.word	135413
	.byte	12,25,186,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	129568
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_TCTGB',0,25,191,6,3
	.word	135474
	.byte	12,25,194,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	129657
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_TCTL',0,25,199,6,3
	.word	135537
	.byte	12,25,202,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	129859
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_TIPR',0,25,207,6,3
	.word	135599
	.byte	12,25,210,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	130040
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_TL1ST',0,25,215,6,3
	.word	135661
	.byte	12,25,218,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	130321
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_TLC',0,25,223,6,3
	.word	135724
	.byte	12,25,226,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	130513
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_TLCC',0,25,231,6,3
	.word	135785
	.byte	12,25,234,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	130694
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_TLCHE',0,25,239,6,3
	.word	135847
	.byte	12,25,242,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	130838
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_TLCHS',0,25,247,6,3
	.word	135910
	.byte	12,25,250,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	130982
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_TLCV',0,25,255,6,3
	.word	135973
	.byte	12,25,130,7,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	131063
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_TLS',0,25,135,7,3
	.word	136035
	.byte	12,25,138,7,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	131263
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_TLT',0,25,143,7,3
	.word	136096
	.byte	12,25,146,7,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	131395
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_TLTTH',0,25,151,7,3
	.word	136157
	.byte	12,25,154,7,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	131600
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_TOPPS',0,25,159,7,3
	.word	136220
	.byte	12,25,162,7,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	131806
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_TOPR',0,25,167,7,3
	.word	136283
	.byte	12,25,170,7,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	131987
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_TRC',0,25,175,7,3
	.word	136345
	.byte	12,25,178,7,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	132166
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_TREC',0,25,183,7,3
	.word	136406
	.byte	12,25,186,7,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	132378
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_TRHSM',0,25,191,7,3
	.word	136468
	.byte	12,25,194,7,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	132561
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_TRIG',0,25,199,7,3
	.word	136531
	.byte	12,25,202,7,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	132944
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_TRIGC',0,25,207,7,3
	.word	136593
	.byte	12,25,210,7,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	133329
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_TRIGS',0,25,215,7,3
	.word	136656
	.byte	12,25,218,7,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	133424
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_TRMC',0,25,223,7,3
	.word	136719
	.byte	12,25,226,7,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	133621
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_TRMT',0,25,231,7,3
	.word	136781
	.byte	12,25,234,7,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	133757
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_TRSS',0,25,239,7,3
	.word	136843
	.byte	12,25,242,7,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	133916
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_TRTGB_H',0,25,247,7,3
	.word	136905
	.byte	12,25,250,7,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	134101
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CBS_TRTGB_L',0,25,255,7,3
	.word	136970
	.byte	10
	.byte	'_Ifx_CBS_TRTGB',0,25,139,8,25,8,13
	.byte	'L',0
	.word	136970
	.byte	4,2,35,0,13
	.byte	'H',0
	.word	136905
	.byte	4,2,35,4,0,14
	.word	137035
	.byte	32
	.byte	'Ifx_CBS_TRTGB',0,25,143,8,3
	.word	137079
	.byte	17,12,86,9,1,18
	.byte	'IfxEvadc_AnalogConverterMode_off',0,0,18
	.byte	'IfxEvadc_AnalogConverterMode_slowStandby',0,1,18
	.byte	'IfxEvadc_AnalogConverterMode_fastStandby',0,2,18
	.byte	'IfxEvadc_AnalogConverterMode_normalOperation',0,3,0,32
	.byte	'IfxEvadc_AnalogConverterMode',0,12,92,3
	.word	137107
	.byte	17,12,106,9,1,18
	.byte	'IfxEvadc_BoundaryExtension_standard',0,0,18
	.byte	'IfxEvadc_BoundaryExtension_fastCompareResult1',0,1,18
	.byte	'IfxEvadc_BoundaryExtension_fastCompareResult2',0,2,18
	.byte	'IfxEvadc_BoundaryExtension_fastCompareResult3',0,3,18
	.byte	'IfxEvadc_BoundaryExtension_fastCompareResult4',0,4,18
	.byte	'IfxEvadc_BoundaryExtension_fastCompareResult5',0,5,18
	.byte	'IfxEvadc_BoundaryExtension_fastCompareResult6',0,6,18
	.byte	'IfxEvadc_BoundaryExtension_fastCompareResult7',0,7,18
	.byte	'IfxEvadc_BoundaryExtension_fastCompareResult8',0,8,18
	.byte	'IfxEvadc_BoundaryExtension_fastCompareResult9',0,9,18
	.byte	'IfxEvadc_BoundaryExtension_fastCompareResult10',0,10,18
	.byte	'IfxEvadc_BoundaryExtension_fastCompareResult11',0,11,18
	.byte	'IfxEvadc_BoundaryExtension_fastCompareResult12',0,12,18
	.byte	'IfxEvadc_BoundaryExtension_fastCompareResult13',0,13,18
	.byte	'IfxEvadc_BoundaryExtension_fastCompareResult14',0,14,18
	.byte	'IfxEvadc_BoundaryExtension_fastCompareResult15',0,15,0,32
	.byte	'IfxEvadc_BoundaryExtension',0,12,124,3
	.word	137318
	.byte	17,12,128,1,9,1,18
	.byte	'IfxEvadc_BoundarySelection_group0',0,0,18
	.byte	'IfxEvadc_BoundarySelection_group1',0,1,18
	.byte	'IfxEvadc_BoundarySelection_global0',0,2,18
	.byte	'IfxEvadc_BoundarySelection_global1',0,3,0,32
	.byte	'IfxEvadc_BoundarySelection',0,12,134,1,3
	.word	138123
	.byte	32
	.byte	'IfxEvadc_ChannelId',0,12,157,1,3
	.word	29119
	.byte	17,12,161,1,9,1,18
	.byte	'IfxEvadc_ChannelReference_standard',0,0,18
	.byte	'IfxEvadc_ChannelReference_channel0',0,1,0,32
	.byte	'IfxEvadc_ChannelReference',0,12,165,1,3
	.word	138340
	.byte	17,12,169,1,9,1,18
	.byte	'IfxEvadc_ChannelResult_0',0,0,18
	.byte	'IfxEvadc_ChannelResult_1',0,1,18
	.byte	'IfxEvadc_ChannelResult_2',0,2,18
	.byte	'IfxEvadc_ChannelResult_3',0,3,18
	.byte	'IfxEvadc_ChannelResult_4',0,4,18
	.byte	'IfxEvadc_ChannelResult_5',0,5,18
	.byte	'IfxEvadc_ChannelResult_6',0,6,18
	.byte	'IfxEvadc_ChannelResult_7',0,7,18
	.byte	'IfxEvadc_ChannelResult_8',0,8,18
	.byte	'IfxEvadc_ChannelResult_9',0,9,18
	.byte	'IfxEvadc_ChannelResult_10',0,10,18
	.byte	'IfxEvadc_ChannelResult_11',0,11,18
	.byte	'IfxEvadc_ChannelResult_12',0,12,18
	.byte	'IfxEvadc_ChannelResult_13',0,13,18
	.byte	'IfxEvadc_ChannelResult_14',0,14,18
	.byte	'IfxEvadc_ChannelResult_15',0,15,0,32
	.byte	'IfxEvadc_ChannelResult',0,12,187,1,3
	.word	138456
	.byte	32
	.byte	'IfxEvadc_ChannelSelectionStyle',0,12,197,1,3
	.word	34729
	.byte	32
	.byte	'IfxEvadc_EmuxCodingScheme',0,12,206,1,3
	.word	34559
	.byte	17,12,210,1,9,1,18
	.byte	'IfxEvadc_EmuxInterface_0',0,0,18
	.byte	'IfxEvadc_EmuxInterface_1',0,1,0,32
	.byte	'IfxEvadc_EmuxInterface',0,12,214,1,3
	.word	139008
	.byte	32
	.byte	'IfxEvadc_EmuxSampleTimeControl',0,12,223,1,3
	.word	34634
	.byte	32
	.byte	'IfxEvadc_EmuxSelectValue',0,12,238,1,3
	.word	34320
	.byte	32
	.byte	'IfxEvadc_ExternalMultiplexerMode',0,12,249,1,3
	.word	34130
	.byte	17,12,253,1,9,1,18
	.byte	'IfxEvadc_FifoMode_seperateResultRegister',0,0,18
	.byte	'IfxEvadc_FifoMode_fifoStructure',0,1,18
	.byte	'IfxEvadc_FifoMode_maximumMode',0,2,18
	.byte	'IfxEvadc_FifoMode_minimumMode',0,3,0,32
	.byte	'IfxEvadc_FifoMode',0,12,131,2,3
	.word	139217
	.byte	32
	.byte	'IfxEvadc_GatingMode',0,12,141,2,3
	.word	29641
	.byte	32
	.byte	'IfxEvadc_GatingSource',0,12,163,2,3
	.word	29773
	.byte	17,12,167,2,9,1,18
	.byte	'IfxEvadc_InputClasses_group0',0,0,18
	.byte	'IfxEvadc_InputClasses_group1',0,1,18
	.byte	'IfxEvadc_InputClasses_global0',0,2,18
	.byte	'IfxEvadc_InputClasses_global1',0,3,0,32
	.byte	'IfxEvadc_InputClasses',0,12,173,2,3
	.word	139452
	.byte	17,12,177,2,9,1,18
	.byte	'IfxEvadc_LimitCheck_noCheck',0,0,18
	.byte	'IfxEvadc_LimitCheck_eventIfInArea',0,1,18
	.byte	'IfxEvadc_LimitCheck_eventIfOutsideArea',0,2,18
	.byte	'IfxEvadc_LimitCheck_always',0,3,0,32
	.byte	'IfxEvadc_LimitCheck',0,12,183,2,3
	.word	139616
	.byte	32
	.byte	'IfxEvadc_Protection',0,12,140,3,3
	.word	31357
	.byte	32
	.byte	'IfxEvadc_RequestSlotPriority',0,12,150,3,3
	.word	30202
	.byte	32
	.byte	'IfxEvadc_RequestSlotStartMode',0,12,158,3,3
	.word	30357
	.byte	32
	.byte	'IfxEvadc_RequestSource',0,12,167,3,3
	.word	29526
	.byte	17,12,172,3,9,1,18
	.byte	'IfxEvadc_SleepMode_enable',0,0,18
	.byte	'IfxEvadc_SleepMode_disable',0,1,0,32
	.byte	'IfxEvadc_SleepMode',0,12,176,3,3
	.word	139926
	.byte	17,12,180,3,9,1,18
	.byte	'IfxEvadc_SrcNr_group0',0,0,18
	.byte	'IfxEvadc_SrcNr_group1',0,1,18
	.byte	'IfxEvadc_SrcNr_group2',0,2,18
	.byte	'IfxEvadc_SrcNr_group3',0,3,18
	.byte	'IfxEvadc_SrcNr_shared0',0,4,18
	.byte	'IfxEvadc_SrcNr_shared1',0,5,18
	.byte	'IfxEvadc_SrcNr_shared2',0,6,18
	.byte	'IfxEvadc_SrcNr_shared3',0,7,0,32
	.byte	'IfxEvadc_SrcNr',0,12,190,3,3
	.word	140018
	.byte	32
	.byte	'IfxEvadc_Status',0,12,204,3,3
	.word	31065
	.byte	17,12,208,3,9,1,18
	.byte	'IfxEvadc_SuspendMode_none',0,0,18
	.byte	'IfxEvadc_SuspendMode_hard',0,1,18
	.byte	'IfxEvadc_SuspendMode_soft',0,2,0,32
	.byte	'IfxEvadc_SuspendMode',0,12,213,3,3
	.word	140270
	.byte	32
	.byte	'IfxEvadc_TriggerMode',0,12,223,3,3
	.word	30905
	.byte	32
	.byte	'IfxEvadc_TriggerSource',0,12,245,3,3
	.word	30460
	.byte	17,12,253,3,9,1,18
	.byte	'IfxEvadc_BoundaryFlagActivationMode_0',0,0,18
	.byte	'IfxEvadc_BoundaryFlagActivationMode_1',0,1,0,32
	.byte	'IfxEvadc_BoundaryFlagActivationMode',0,12,131,4,3
	.word	140453
	.byte	17,12,135,4,9,1,18
	.byte	'IfxEvadc_BoundaryFlagInversionControl_direct',0,0,18
	.byte	'IfxEvadc_BoundaryFlagInversionControl_invert',0,1,0,32
	.byte	'IfxEvadc_BoundaryFlagInversionControl',0,12,139,4,3
	.word	140585
	.byte	17,12,143,4,9,1,18
	.byte	'IfxEvadc_BoundaryFlagNodePointer_commonBoundaryFlagOutput0',0,0,18
	.byte	'IfxEvadc_BoundaryFlagNodePointer_commonBoundaryFlagOutput1',0,1,18
	.byte	'IfxEvadc_BoundaryFlagNodePointer_commonBoundaryFlagOutput2',0,2,18
	.byte	'IfxEvadc_BoundaryFlagNodePointer_commonBoundaryFlagOutput3',0,3,18
	.byte	'IfxEvadc_BoundaryFlagNodePointer_sharedServiceRequestLine0',0,4,18
	.byte	'IfxEvadc_BoundaryFlagNodePointer_sharedServiceRequestLine1',0,5,18
	.byte	'IfxEvadc_BoundaryFlagNodePointer_sharedServiceRequestLine2',0,6,18
	.byte	'IfxEvadc_BoundaryFlagNodePointer_sharedServiceRequestLine3',0,7,18
	.byte	'IfxEvadc_BoundaryFlagNodePointer_disabled',0,16,0,32
	.byte	'IfxEvadc_BoundaryFlagNodePointer',0,12,154,4,3
	.word	140733
	.byte	17,12,158,4,9,1,18
	.byte	'IfxEvadc_BoundaryFlagSwControl_noAction',0,0,18
	.byte	'IfxEvadc_BoundaryFlagSwControl_clear',0,1,18
	.byte	'IfxEvadc_BoundaryFlagSwControl_set',0,2,18
	.byte	'IfxEvadc_BoundaryFlagSwControl_toggle',0,3,0,32
	.byte	'IfxEvadc_BoundaryFlagSwControl',0,12,164,4,3
	.word	141314
	.byte	17,12,168,4,9,1,18
	.byte	'IfxEvadc_ChannelEventMode_never',0,0,18
	.byte	'IfxEvadc_ChannelEventMode_aboveCompareValue',0,1,18
	.byte	'IfxEvadc_ChannelEventMode_belowCompareValue',0,2,18
	.byte	'IfxEvadc_ChannelEventMode_aboveOrBelowCompareValue',0,3,0,32
	.byte	'IfxEvadc_ChannelEventMode',0,12,174,4,3
	.word	141519
	.byte	32
	.byte	'IfxEvadc_ClockDividerFactor',0,12,214,4,3
	.word	27013
	.byte	17,12,218,4,9,1,18
	.byte	'IfxEvadc_ExternalTriggerPolarity_direct',0,0,18
	.byte	'IfxEvadc_ExternalTriggerPolarity_inverted',0,1,0,32
	.byte	'IfxEvadc_ExternalTriggerPolarity',0,12,222,4,3
	.word	141777
	.byte	17,12,224,4,9,1,18
	.byte	'IfxEvadc_FastCompareAnalogClockSynchronizationDelay_0',0,0,18
	.byte	'IfxEvadc_FastCompareAnalogClockSynchronizationDelay_1',0,1,18
	.byte	'IfxEvadc_FastCompareAnalogClockSynchronizationDelay_2',0,2,18
	.byte	'IfxEvadc_FastCompareAnalogClockSynchronizationDelay_3',0,3,0,32
	.byte	'IfxEvadc_FastCompareAnalogClockSynchronizationDelay',0,12,230,4,3
	.word	141912
	.byte	17,12,234,4,9,1,18
	.byte	'IfxEvadc_FastCompareAnalogConverterControl_off',0,0,18
	.byte	'IfxEvadc_FastCompareAnalogConverterControl_normal',0,1,0,32
	.byte	'IfxEvadc_FastCompareAnalogConverterControl',0,12,238,4,3
	.word	142204
	.byte	17,12,244,4,9,1,18
	.byte	'IfxEvadc_FastCompareAutomaticUpdate_sw',0,0,18
	.byte	'IfxEvadc_FastCompareAutomaticUpdate_alternateValue',0,1,18
	.byte	'IfxEvadc_FastCompareAutomaticUpdate_rampCounter',0,2,18
	.byte	'IfxEvadc_FastCompareAutomaticUpdate_analogSource',0,3,0,32
	.byte	'IfxEvadc_FastCompareAutomaticUpdate',0,12,251,4,3
	.word	142364
	.byte	17,12,255,4,9,1,18
	.byte	'IfxEvadc_FastCompareRunControl_stop',0,0,18
	.byte	'IfxEvadc_FastCompareRunControl_alwaysRun',0,1,0,32
	.byte	'IfxEvadc_FastCompareRunControl',0,12,131,5,3
	.word	142611
	.byte	17,12,135,5,9,1,18
	.byte	'IfxEvadc_FastCompareServiceRequestGeneration_off',0,0,18
	.byte	'IfxEvadc_FastCompareServiceRequestGeneration_rampEnd',0,1,18
	.byte	'IfxEvadc_FastCompareServiceRequestGeneration_newValue',0,2,18
	.byte	'IfxEvadc_FastCompareServiceRequestGeneration_newResult',0,3,0,32
	.byte	'IfxEvadc_FastCompareServiceRequestGeneration',0,12,141,5,3
	.word	142739
	.byte	17,12,145,5,9,1,18
	.byte	'IfxEvadc_GateOperatingMode_noGateFunction',0,0,18
	.byte	'IfxEvadc_GateOperatingMode_alternateValueMode',0,1,18
	.byte	'IfxEvadc_GateOperatingMode_lockBoundaryFlag',0,2,0,32
	.byte	'IfxEvadc_GateOperatingMode',0,12,150,5,3
	.word	143019
	.byte	17,12,154,5,9,1,18
	.byte	'IfxEvadc_RampDirection_down',0,0,18
	.byte	'IfxEvadc_RampDirection_up',0,1,0,32
	.byte	'IfxEvadc_RampDirection',0,12,158,5,3
	.word	143200
	.byte	17,12,162,5,9,1,18
	.byte	'IfxEvadc_RampRunControl_stop',0,0,18
	.byte	'IfxEvadc_RampRunControl_1',0,1,18
	.byte	'IfxEvadc_RampRunControl_2',0,2,18
	.byte	'IfxEvadc_RampRunControl_3',0,3,0,32
	.byte	'IfxEvadc_RampRunControl',0,12,169,5,3
	.word	143297
	.byte	17,12,173,5,9,1,18
	.byte	'IfxEvadc_SampleSynchronization_off',0,0,18
	.byte	'IfxEvadc_SampleSynchronization_synchronizeSampleTiming',0,1,0,32
	.byte	'IfxEvadc_SampleSynchronization',0,12,177,5,3
	.word	143452
	.byte	17,12,181,5,9,1,18
	.byte	'IfxEvadc_TriggerOperatingMode_noExternalTrigger',0,0,18
	.byte	'IfxEvadc_TriggerOperatingMode_fallingEdge',0,1,18
	.byte	'IfxEvadc_TriggerOperatingMode_risingEdge',0,2,18
	.byte	'IfxEvadc_TriggerOperatingMode_anyEdge',0,3,0,32
	.byte	'IfxEvadc_TriggerOperatingMode',0,12,187,5,3
	.word	143593
	.byte	17,12,199,5,9,1,18
	.byte	'IfxEvadc_AnalogClockSynchronizationDelay_0',0,0,18
	.byte	'IfxEvadc_AnalogClockSynchronizationDelay_1',0,1,18
	.byte	'IfxEvadc_AnalogClockSynchronizationDelay_2',0,2,18
	.byte	'IfxEvadc_AnalogClockSynchronizationDelay_3',0,3,18
	.byte	'IfxEvadc_AnalogClockSynchronizationDelay_4',0,4,18
	.byte	'IfxEvadc_AnalogClockSynchronizationDelay_5',0,5,18
	.byte	'IfxEvadc_AnalogClockSynchronizationDelay_6',0,6,18
	.byte	'IfxEvadc_AnalogClockSynchronizationDelay_7',0,7,0,32
	.byte	'IfxEvadc_AnalogClockSynchronizationDelay',0,12,209,5,3
	.word	143816
	.byte	17,12,213,5,9,1,18
	.byte	'IfxEvadc_AnalogInputPrechargeControl_noPrecharge',0,0,18
	.byte	'IfxEvadc_AnalogInputPrechargeControl_8Cycles',0,1,18
	.byte	'IfxEvadc_AnalogInputPrechargeControl_16Cycles',0,2,18
	.byte	'IfxEvadc_AnalogInputPrechargeControl_32cycles',0,3,0,32
	.byte	'IfxEvadc_AnalogInputPrechargeControl',0,12,219,5,3
	.word	144233
	.byte	17,12,227,5,9,1,18
	.byte	'IfxEvadc_CalibrationSampleTimeControl_2',0,0,18
	.byte	'IfxEvadc_CalibrationSampleTimeControl_4',0,1,18
	.byte	'IfxEvadc_CalibrationSampleTimeControl_6',0,2,18
	.byte	'IfxEvadc_CalibrationSampleTimeControl_8',0,3,0,32
	.byte	'IfxEvadc_CalibrationSampleTimeControl',0,12,233,5,3
	.word	144480
	.byte	17,12,238,5,9,1,18
	.byte	'IfxEvadc_ChannelNoiseReduction_standardConversion',0,0,18
	.byte	'IfxEvadc_ChannelNoiseReduction_level1',0,1,18
	.byte	'IfxEvadc_ChannelNoiseReduction_level2',0,2,18
	.byte	'IfxEvadc_ChannelNoiseReduction_level3',0,3,0,32
	.byte	'IfxEvadc_ChannelNoiseReduction',0,12,244,5,3
	.word	144702
	.byte	17,12,248,5,9,1,18
	.byte	'IfxEvadc_ChannelNoiseReductionEMUX_standardConversion',0,0,18
	.byte	'IfxEvadc_ChannelNoiseReductionEMUX_level1',0,1,18
	.byte	'IfxEvadc_ChannelNoiseReductionEMUX_level2',0,2,18
	.byte	'IfxEvadc_ChannelNoiseReductionEMUX_level3',0,3,0,32
	.byte	'IfxEvadc_ChannelNoiseReductionEMUX',0,12,254,5,3
	.word	144921
	.byte	17,12,130,6,9,1,18
	.byte	'IfxEvadc_DataModificationMode_standardDataReduction',0,0,18
	.byte	'IfxEvadc_DataModificationMode_resultFilteringMode',0,1,18
	.byte	'IfxEvadc_DataModificationMode_differenceMode',0,2,0,32
	.byte	'IfxEvadc_DataModificationMode',0,12,135,6,3
	.word	145160
	.byte	17,12,159,6,9,1,18
	.byte	'IfxEvadc_IdlePrecharge_currentLevel',0,0,18
	.byte	'IfxEvadc_IdlePrecharge_referenceBy2',0,1,0,32
	.byte	'IfxEvadc_IdlePrecharge',0,12,163,6,3
	.word	145359
	.byte	17,12,167,6,9,1,18
	.byte	'IfxEvadc_MsbConversionTime_singleClockCycle',0,0,18
	.byte	'IfxEvadc_MsbConversionTime_doubleClockCycle',0,1,0,32
	.byte	'IfxEvadc_MsbConversionTime',0,12,171,6,3
	.word	145474
	.byte	17,12,175,6,9,1,18
	.byte	'IfxEvadc_ReferencePrechargeControl_singleClockPhase',0,0,18
	.byte	'IfxEvadc_ReferencePrechargeControl_singleClockPeriod',0,1,0,32
	.byte	'IfxEvadc_ReferencePrechargeControl',0,12,179,6,3
	.word	145609
	.byte	17,12,181,6,9,1,18
	.byte	'IfxEvadc_SpreadEarlySamplePointEMUXConversionsMode_nominal',0,0,18
	.byte	'IfxEvadc_SpreadEarlySamplePointEMUXConversionsMode_spread',0,1,0,32
	.byte	'IfxEvadc_SpreadEarlySamplePointEMUXConversionsMode',0,12,185,6,3
	.word	145769
	.byte	17,12,189,6,9,1,18
	.byte	'IfxEvadc_SpreadEarlySamplePointStandardConversionsMode_nominal',0,0,18
	.byte	'IfxEvadc_SpreadEarlySamplePointStandardConversionsMode_spread',0,1,0,32
	.byte	'IfxEvadc_SpreadEarlySamplePointStandardConversionsMode',0,12,193,6,3
	.word	145957
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L197:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,39,12,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,36,0,3,8,11,15,62
	.byte	15,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,59,0,3,8,0,0,10,19,1,3,8,58,15,59,15
	.byte	57,15,11,15,0,0,11,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,12,23,1,58,15,59,15,57,15,11,15,0,0,13,13
	.byte	0,3,8,73,19,11,15,56,9,0,0,14,53,0,73,19,0,0,15,1,1,11,15,73,19,0,0,16,33,0,47,15,0,0,17,4,1,58,15,59
	.byte	15,57,15,11,15,0,0,18,40,0,3,8,28,13,0,0,19,11,1,0,0,20,38,0,73,19,0,0,21,46,1,3,8,54,15,39,12,63,12,60
	.byte	12,0,0,22,5,0,73,19,0,0,23,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,24,5,0,3,8,73,19,0,0,25,46,1,49
	.byte	19,0,0,26,5,0,49,19,0,0,27,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,28,46,0,3,8,58,15,59
	.byte	15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,29,29,1,49,19,0,0,30,11,0,49,19,0,0,31,46,1,3,8,58,15,59,15
	.byte	57,15,73,19,54,15,39,12,63,12,60,12,0,0,32,22,0,3,8,58,15,59,15,57,15,73,19,0,0,33,21,0,54,15,0,0,34,19
	.byte	1,58,15,59,15,57,15,11,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L198:
	.word	.L581-.L580
.L580:
	.half	3
	.word	.L583-.L582
.L582:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap',0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0
	.byte	'IfxSrc.h',0,2,0,0
	.byte	'IfxSrc_regdef.h',0,3,0,0
	.byte	'IfxScuWdt.h',0,4,0,0
	.byte	'IfxScu_regdef.h',0,3,0,0
	.byte	'IfxPort.h',0,5,0,0
	.byte	'IfxPort_regdef.h',0,3,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'IfxCpu_cfg.h',0,6,0,0
	.byte	'IfxScuCcu.h',0,4,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.h',0,0,0,0
	.byte	'IfxEvadc_regdef.h',0,3,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0,0,0,0
	.byte	'IfxSrc_cfg.h',0,6,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'Ifx_TypesReg.h',0,3,0,0
	.byte	'IfxEvadc_cfg.h',0,6,0,0
	.byte	'IfxScu_cfg.h',0,6,0,0
	.byte	'IfxEvadc_PinMap.h',0,7,0,0
	.byte	'IfxCpu_regdef.h',0,3,0,0
	.byte	'IfxStm_regdef.h',0,3,0,0
	.byte	'IfxSmu_regdef.h',0,3,0,0
	.byte	'IfxCbs_regdef.h',0,3,0,0,0
.L583:
.L581:
	.sdecl	'.debug_info',debug,cluster('IfxEvadc_getResultBasedOnRequestSource')
	.sect	'.debug_info'
.L199:
	.word	389
	.half	3
	.word	.L200
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L202,.L201
	.byte	2
	.word	.L195
	.byte	3
	.byte	'IfxEvadc_getResultBasedOnRequestSource',0,1,244,2,17
	.word	.L339
	.byte	1,1,1
	.word	.L174,.L340,.L173
	.byte	4
	.byte	'evadc',0,1,244,2,67
	.word	.L341,.L342
	.byte	4
	.byte	'group',0,1,244,2,87
	.word	.L343,.L344
	.byte	4
	.byte	'channel',0,1,244,2,113
	.word	.L345,.L346
	.byte	4
	.byte	'sourceType',0,1,244,2,145,1
	.word	.L347,.L348
	.byte	5
	.word	.L174,.L340
	.byte	6
	.byte	'sourceResultRegister',0,1,246,2,21
	.word	.L349,.L350
	.byte	6
	.byte	'tmpResult',0,1,247,2,21
	.word	.L339,.L351
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEvadc_getResultBasedOnRequestSource')
	.sect	'.debug_abbrev'
.L200:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEvadc_getResultBasedOnRequestSource')
	.sect	'.debug_line'
.L201:
	.word	.L585-.L584
.L584:
	.half	3
	.word	.L587-.L586
.L586:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0,0,0,0,0
.L587:
	.byte	5,42,7,0,5,2
	.word	.L174
	.byte	3,245,2,1,5,10,9
	.half	.L538-.L174
	.byte	3,5,1,7,9
	.half	.L588-.L538
	.byte	3,4,1,7,9
	.half	.L589-.L588
	.byte	3,4,1,7,9
	.half	.L590-.L589
	.byte	1,5,51,9
	.half	.L82-.L590
	.byte	3,121,1,5,9,9
	.half	.L539-.L82
	.byte	3,1,1,5,51,9
	.half	.L83-.L539
	.byte	3,3,1,5,9,9
	.half	.L540-.L83
	.byte	3,1,1,5,51,9
	.half	.L84-.L540
	.byte	3,3,1,5,5,9
	.half	.L85-.L84
	.byte	3,4,1,5,26,7,9
	.half	.L591-.L85
	.byte	3,8,1,5,37,9
	.half	.L592-.L591
	.byte	1,5,9,9
	.half	.L541-.L592
	.byte	1,5,51,7,9
	.half	.L593-.L541
	.byte	3,2,1,5,32,9
	.half	.L542-.L593
	.byte	1,5,51,3,1,1,5,32,9
	.half	.L594-.L542
	.byte	1,5,51,3,1,1,5,32,9
	.half	.L595-.L594
	.byte	1,5,51,3,1,1,5,32,9
	.half	.L596-.L595
	.byte	1,5,51,3,1,1,5,32,9
	.half	.L597-.L596
	.byte	1,5,51,3,1,1,5,32,9
	.half	.L598-.L597
	.byte	1,5,1,3,11,1,5,61,7,9
	.half	.L90-.L598
	.byte	3,123,1,5,37,9
	.half	.L89-.L90
	.byte	1,5,69,9
	.half	.L599-.L89
	.byte	1,5,1,9
	.half	.L543-.L599
	.byte	3,5,1,7,9
	.half	.L203-.L543
	.byte	0,1,1
.L585:
	.sdecl	'.debug_ranges',debug,cluster('IfxEvadc_getResultBasedOnRequestSource')
	.sect	'.debug_ranges'
.L202:
	.word	-1,.L174,0,.L203-.L174,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEvadc_addToQueue')
	.sect	'.debug_info'
.L204:
	.word	304
	.half	3
	.word	.L205
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L207,.L206
	.byte	2
	.word	.L195
	.byte	3
	.byte	'IfxEvadc_addToQueue',0,1,52,6,1,1,1
	.word	.L140,.L352,.L139
	.byte	4
	.byte	'group',0,1,52,39
	.word	.L343,.L353
	.byte	4
	.byte	'channel',0,1,52,65
	.word	.L345,.L354
	.byte	4
	.byte	'sourceType',0,1,52,97
	.word	.L347,.L355
	.byte	4
	.byte	'options',0,1,52,116
	.word	.L356,.L357
	.byte	5
	.word	.L140,.L352
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEvadc_addToQueue')
	.sect	'.debug_abbrev'
.L205:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEvadc_addToQueue')
	.sect	'.debug_line'
.L206:
	.word	.L601-.L600
.L600:
	.half	3
	.word	.L603-.L602
.L602:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0,0,0,0,0
.L603:
	.byte	5,10,7,0,5,2
	.word	.L140
	.byte	3,55,1,7,9
	.half	.L604-.L140
	.byte	3,3,1,7,9
	.half	.L605-.L604
	.byte	3,3,1,5,1,7,9
	.half	.L606-.L605
	.byte	3,5,1,5,39,7,9
	.half	.L2-.L606
	.byte	3,118,1,5,28,1,5,1,9
	.half	.L508-.L2
	.byte	3,10,1,5,39,7,9
	.half	.L3-.L508
	.byte	3,121,1,5,28,1,5,1,9
	.half	.L509-.L3
	.byte	3,7,1,5,39,7,9
	.half	.L4-.L509
	.byte	3,124,1,5,28,1,5,1,9
	.half	.L510-.L4
	.byte	3,4,1,7,9
	.half	.L208-.L510
	.byte	0,1,1
.L601:
	.sdecl	'.debug_ranges',debug,cluster('IfxEvadc_addToQueue')
	.sect	'.debug_ranges'
.L207:
	.word	-1,.L140,0,.L208-.L140,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEvadc_disableQueueSlotExternalTrigger')
	.sect	'.debug_info'
.L209:
	.word	286
	.half	3
	.word	.L210
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L212,.L211
	.byte	2
	.word	.L195
	.byte	3
	.byte	'IfxEvadc_disableQueueSlotExternalTrigger',0,1,113,6,1,1,1
	.word	.L150,.L358,.L149
	.byte	4
	.byte	'evadcG',0,1,113,60
	.word	.L343,.L359
	.byte	4
	.byte	'sourceType',0,1,113,91
	.word	.L347,.L360
	.byte	5
	.word	.L150,.L358
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEvadc_disableQueueSlotExternalTrigger')
	.sect	'.debug_abbrev'
.L210:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEvadc_disableQueueSlotExternalTrigger')
	.sect	'.debug_line'
.L211:
	.word	.L608-.L607
.L607:
	.half	3
	.word	.L610-.L609
.L609:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0,0,0,0,0
.L610:
	.byte	5,10,7,0,5,2
	.word	.L150
	.byte	3,244,0,1,7,9
	.half	.L611-.L150
	.byte	3,3,1,7,9
	.half	.L612-.L611
	.byte	3,3,1,5,1,7,9
	.half	.L613-.L612
	.byte	3,4,1,5,27,7,9
	.half	.L12-.L613
	.byte	3,119,1,5,33,9
	.half	.L614-.L12
	.byte	1,5,1,9
	.half	.L615-.L614
	.byte	3,9,1,5,27,7,9
	.half	.L13-.L615
	.byte	3,122,1,5,33,9
	.half	.L616-.L13
	.byte	1,5,1,9
	.half	.L617-.L616
	.byte	3,6,1,5,27,7,9
	.half	.L14-.L617
	.byte	3,125,1,5,33,9
	.half	.L618-.L14
	.byte	1,5,1,9
	.half	.L619-.L618
	.byte	3,3,1,7,9
	.half	.L213-.L619
	.byte	0,1,1
.L608:
	.sdecl	'.debug_ranges',debug,cluster('IfxEvadc_disableQueueSlotExternalTrigger')
	.sect	'.debug_ranges'
.L212:
	.word	-1,.L150,0,.L213-.L150,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEvadc_enableQueueSlotExternalTrigger')
	.sect	'.debug_info'
.L214:
	.word	288
	.half	3
	.word	.L215
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L217,.L216
	.byte	2
	.word	.L195
	.byte	3
	.byte	'IfxEvadc_enableQueueSlotExternalTrigger',0,1,152,1,6,1,1,1
	.word	.L154,.L361,.L153
	.byte	4
	.byte	'evadcG',0,1,152,1,59
	.word	.L343,.L362
	.byte	4
	.byte	'sourceType',0,1,152,1,90
	.word	.L347,.L363
	.byte	5
	.word	.L154,.L361
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEvadc_enableQueueSlotExternalTrigger')
	.sect	'.debug_abbrev'
.L215:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEvadc_enableQueueSlotExternalTrigger')
	.sect	'.debug_line'
.L216:
	.word	.L621-.L620
.L620:
	.half	3
	.word	.L623-.L622
.L622:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0,0,0,0,0
.L623:
	.byte	5,10,7,0,5,2
	.word	.L154
	.byte	3,155,1,1,7,9
	.half	.L624-.L154
	.byte	3,3,1,7,9
	.half	.L625-.L624
	.byte	3,3,1,5,1,7,9
	.half	.L626-.L625
	.byte	3,5,1,5,27,7,9
	.half	.L22-.L626
	.byte	3,118,1,5,33,9
	.half	.L627-.L22
	.byte	1,5,1,9
	.half	.L628-.L627
	.byte	3,10,1,5,27,7,9
	.half	.L23-.L628
	.byte	3,121,1,5,33,9
	.half	.L629-.L23
	.byte	1,5,1,9
	.half	.L630-.L629
	.byte	3,7,1,5,27,7,9
	.half	.L24-.L630
	.byte	3,124,1,5,33,9
	.half	.L631-.L24
	.byte	1,5,1,9
	.half	.L632-.L631
	.byte	3,4,1,7,9
	.half	.L218-.L632
	.byte	0,1,1
.L621:
	.sdecl	'.debug_ranges',debug,cluster('IfxEvadc_enableQueueSlotExternalTrigger')
	.sect	'.debug_ranges'
.L217:
	.word	-1,.L154,0,.L218-.L154,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEvadc_getQueueSlotGatingMode')
	.sect	'.debug_info'
.L219:
	.word	309
	.half	3
	.word	.L220
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L222,.L221
	.byte	2
	.word	.L195
	.byte	3
	.byte	'IfxEvadc_getQueueSlotGatingMode',0,1,192,1,21
	.word	.L364
	.byte	1,1,1
	.word	.L160,.L365,.L159
	.byte	4
	.byte	'evadcG',0,1,192,1,66
	.word	.L343,.L366
	.byte	4
	.byte	'sourceType',0,1,192,1,97
	.word	.L347,.L367
	.byte	5
	.word	.L160,.L365
	.byte	6
	.byte	'gatingMode',0,1,194,1,11
	.word	.L368,.L369
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEvadc_getQueueSlotGatingMode')
	.sect	'.debug_abbrev'
.L220:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEvadc_getQueueSlotGatingMode')
	.sect	'.debug_line'
.L221:
	.word	.L634-.L633
.L633:
	.half	3
	.word	.L636-.L635
.L635:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0,0,0,0,0
.L636:
	.byte	5,22,7,0,5,2
	.word	.L160
	.byte	3,193,1,1,5,10,9
	.half	.L531-.L160
	.byte	3,4,1,7,9
	.half	.L637-.L531
	.byte	3,3,1,7,9
	.half	.L638-.L637
	.byte	3,3,1,5,1,7,9
	.half	.L639-.L638
	.byte	3,7,1,5,40,7,9
	.half	.L30-.L639
	.byte	3,116,1,5,9,9
	.half	.L640-.L30
	.byte	3,1,1,5,40,9
	.half	.L31-.L640
	.byte	3,2,1,5,9,9
	.half	.L641-.L31
	.byte	3,1,1,5,40,9
	.half	.L32-.L641
	.byte	3,2,1,5,1,9
	.half	.L35-.L32
	.byte	3,6,1,7,9
	.half	.L223-.L35
	.byte	0,1,1
.L634:
	.sdecl	'.debug_ranges',debug,cluster('IfxEvadc_getQueueSlotGatingMode')
	.sect	'.debug_ranges'
.L222:
	.word	-1,.L160,0,.L223-.L160,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEvadc_getQueueSlotGatingSource')
	.sect	'.debug_info'
.L224:
	.word	311
	.half	3
	.word	.L225
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L227,.L226
	.byte	2
	.word	.L195
	.byte	3
	.byte	'IfxEvadc_getQueueSlotGatingSource',0,1,214,1,23
	.word	.L370
	.byte	1,1,1
	.word	.L162,.L371,.L161
	.byte	4
	.byte	'evadcG',0,1,214,1,70
	.word	.L343,.L372
	.byte	4
	.byte	'sourceType',0,1,214,1,101
	.word	.L347,.L373
	.byte	5
	.word	.L162,.L371
	.byte	6
	.byte	'gateSource',0,1,216,1,12
	.word	.L356,.L374
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEvadc_getQueueSlotGatingSource')
	.sect	'.debug_abbrev'
.L225:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEvadc_getQueueSlotGatingSource')
	.sect	'.debug_line'
.L226:
	.word	.L643-.L642
.L642:
	.half	3
	.word	.L645-.L644
.L644:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0,0,0,0,0
.L645:
	.byte	5,23,7,0,5,2
	.word	.L162
	.byte	3,215,1,1,5,10,9
	.half	.L532-.L162
	.byte	3,4,1,7,9
	.half	.L646-.L532
	.byte	3,3,1,7,9
	.half	.L647-.L646
	.byte	3,3,1,5,1,7,9
	.half	.L648-.L647
	.byte	3,6,1,5,42,7,9
	.half	.L37-.L648
	.byte	3,117,1,5,9,9
	.half	.L649-.L37
	.byte	3,1,1,5,42,9
	.half	.L38-.L649
	.byte	3,2,1,5,9,9
	.half	.L650-.L38
	.byte	3,1,1,5,42,9
	.half	.L39-.L650
	.byte	3,2,1,5,1,9
	.half	.L42-.L39
	.byte	3,5,1,7,9
	.half	.L228-.L42
	.byte	0,1,1
.L643:
	.sdecl	'.debug_ranges',debug,cluster('IfxEvadc_getQueueSlotGatingSource')
	.sect	'.debug_ranges'
.L227:
	.word	-1,.L162,0,.L228-.L162,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEvadc_getQueueSlotPriority')
	.sect	'.debug_info'
.L229:
	.word	309
	.half	3
	.word	.L230
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L232,.L231
	.byte	2
	.word	.L195
	.byte	3
	.byte	'IfxEvadc_getQueueSlotPriority',0,1,235,1,30
	.word	.L375
	.byte	1,1,1
	.word	.L164,.L376,.L163
	.byte	4
	.byte	'evadcG',0,1,235,1,73
	.word	.L343,.L377
	.byte	4
	.byte	'sourceType',0,1,235,1,104
	.word	.L347,.L378
	.byte	5
	.word	.L164,.L376
	.byte	6
	.byte	'slotPriority',0,1,237,1,11
	.word	.L368,.L379
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEvadc_getQueueSlotPriority')
	.sect	'.debug_abbrev'
.L230:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEvadc_getQueueSlotPriority')
	.sect	'.debug_line'
.L231:
	.word	.L652-.L651
.L651:
	.half	3
	.word	.L654-.L653
.L653:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0,0,0,0,0
.L654:
	.byte	5,24,7,0,5,2
	.word	.L164
	.byte	3,236,1,1,5,10,9
	.half	.L533-.L164
	.byte	3,4,1,7,9
	.half	.L655-.L533
	.byte	3,3,1,7,9
	.half	.L656-.L655
	.byte	3,3,1,5,1,7,9
	.half	.L657-.L656
	.byte	3,6,1,5,39,7,9
	.half	.L44-.L657
	.byte	3,117,1,5,9,9
	.half	.L658-.L44
	.byte	3,1,1,5,39,9
	.half	.L45-.L658
	.byte	3,2,1,5,1,9
	.half	.L659-.L45
	.byte	3,8,1,5,39,7,9
	.half	.L46-.L659
	.byte	3,123,1,5,1,9
	.half	.L48-.L46
	.byte	3,5,1,7,9
	.half	.L233-.L48
	.byte	0,1,1
.L652:
	.sdecl	'.debug_ranges',debug,cluster('IfxEvadc_getQueueSlotPriority')
	.sect	'.debug_ranges'
.L232:
	.word	-1,.L164,0,.L233-.L164,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEvadc_getQueueSlotStartMode')
	.sect	'.debug_info'
.L234:
	.word	311
	.half	3
	.word	.L235
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L237,.L236
	.byte	2
	.word	.L195
	.byte	3
	.byte	'IfxEvadc_getQueueSlotStartMode',0,1,128,2,31
	.word	.L380
	.byte	1,1,1
	.word	.L166,.L381,.L165
	.byte	4
	.byte	'evadcG',0,1,128,2,75
	.word	.L343,.L382
	.byte	4
	.byte	'sourceType',0,1,128,2,106
	.word	.L347,.L383
	.byte	5
	.word	.L166,.L381
	.byte	6
	.byte	'slotStartMode',0,1,130,2,11
	.word	.L368,.L384
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEvadc_getQueueSlotStartMode')
	.sect	'.debug_abbrev'
.L235:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEvadc_getQueueSlotStartMode')
	.sect	'.debug_line'
.L236:
	.word	.L661-.L660
.L660:
	.half	3
	.word	.L663-.L662
.L662:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0,0,0,0,0
.L663:
	.byte	5,25,7,0,5,2
	.word	.L166
	.byte	3,129,2,1,5,10,9
	.half	.L534-.L166
	.byte	3,4,1,7,9
	.half	.L664-.L534
	.byte	3,3,1,7,9
	.half	.L665-.L664
	.byte	3,3,1,5,1,7,9
	.half	.L666-.L665
	.byte	3,6,1,5,40,7,9
	.half	.L51-.L666
	.byte	3,117,1,5,9,9
	.half	.L667-.L51
	.byte	3,1,1,5,40,9
	.half	.L52-.L667
	.byte	3,2,1,5,1,9
	.half	.L668-.L52
	.byte	3,8,1,5,40,7,9
	.half	.L53-.L668
	.byte	3,123,1,5,1,9
	.half	.L55-.L53
	.byte	3,5,1,7,9
	.half	.L238-.L55
	.byte	0,1,1
.L661:
	.sdecl	'.debug_ranges',debug,cluster('IfxEvadc_getQueueSlotStartMode')
	.sect	'.debug_ranges'
.L237:
	.word	-1,.L166,0,.L238-.L166,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEvadc_getQueueSlotTriggerInput')
	.sect	'.debug_info'
.L239:
	.word	314
	.half	3
	.word	.L240
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L242,.L241
	.byte	2
	.word	.L195
	.byte	3
	.byte	'IfxEvadc_getQueueSlotTriggerInput',0,1,149,2,24
	.word	.L385
	.byte	1,1,1
	.word	.L168,.L386,.L167
	.byte	4
	.byte	'evadcG',0,1,149,2,71
	.word	.L343,.L387
	.byte	4
	.byte	'sourceType',0,1,149,2,102
	.word	.L347,.L388
	.byte	5
	.word	.L168,.L386
	.byte	6
	.byte	'triggerSource',0,1,151,2,12
	.word	.L356,.L389
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEvadc_getQueueSlotTriggerInput')
	.sect	'.debug_abbrev'
.L240:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEvadc_getQueueSlotTriggerInput')
	.sect	'.debug_line'
.L241:
	.word	.L670-.L669
.L669:
	.half	3
	.word	.L672-.L671
.L671:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0,0,0,0,0
.L672:
	.byte	5,26,7,0,5,2
	.word	.L168
	.byte	3,150,2,1,5,10,9
	.half	.L535-.L168
	.byte	3,4,1,7,9
	.half	.L673-.L535
	.byte	3,3,1,7,9
	.half	.L674-.L673
	.byte	3,3,1,5,1,7,9
	.half	.L675-.L674
	.byte	3,7,1,5,45,7,9
	.half	.L58-.L675
	.byte	3,116,1,5,9,9
	.half	.L676-.L58
	.byte	3,1,1,5,45,9
	.half	.L59-.L676
	.byte	3,2,1,5,9,9
	.half	.L677-.L59
	.byte	3,1,1,5,45,9
	.half	.L60-.L677
	.byte	3,2,1,5,1,9
	.half	.L63-.L60
	.byte	3,6,1,7,9
	.half	.L243-.L63
	.byte	0,1,1
.L670:
	.sdecl	'.debug_ranges',debug,cluster('IfxEvadc_getQueueSlotTriggerInput')
	.sect	'.debug_ranges'
.L242:
	.word	-1,.L168,0,.L243-.L168,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEvadc_getQueueSlotTriggerMode')
	.sect	'.debug_info'
.L244:
	.word	311
	.half	3
	.word	.L245
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L247,.L246
	.byte	2
	.word	.L195
	.byte	3
	.byte	'IfxEvadc_getQueueSlotTriggerMode',0,1,171,2,22
	.word	.L390
	.byte	1,1,1
	.word	.L170,.L391,.L169
	.byte	4
	.byte	'evadcG',0,1,171,2,68
	.word	.L343,.L392
	.byte	4
	.byte	'sourceType',0,1,171,2,99
	.word	.L347,.L393
	.byte	5
	.word	.L170,.L391
	.byte	6
	.byte	'triggerMode',0,1,173,2,11
	.word	.L368,.L394
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEvadc_getQueueSlotTriggerMode')
	.sect	'.debug_abbrev'
.L245:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEvadc_getQueueSlotTriggerMode')
	.sect	'.debug_line'
.L246:
	.word	.L679-.L678
.L678:
	.half	3
	.word	.L681-.L680
.L680:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0,0,0,0,0
.L681:
	.byte	5,23,7,0,5,2
	.word	.L170
	.byte	3,172,2,1,5,10,9
	.half	.L536-.L170
	.byte	3,4,1,7,9
	.half	.L682-.L536
	.byte	3,3,1,7,9
	.half	.L683-.L682
	.byte	3,3,1,5,1,7,9
	.half	.L684-.L683
	.byte	3,7,1,5,43,7,9
	.half	.L65-.L684
	.byte	3,116,1,5,9,9
	.half	.L685-.L65
	.byte	3,1,1,5,43,9
	.half	.L66-.L685
	.byte	3,2,1,5,9,9
	.half	.L686-.L66
	.byte	3,1,1,5,43,9
	.half	.L67-.L686
	.byte	3,2,1,5,1,9
	.half	.L70-.L67
	.byte	3,6,1,7,9
	.half	.L248-.L70
	.byte	0,1,1
.L679:
	.sdecl	'.debug_ranges',debug,cluster('IfxEvadc_getQueueSlotTriggerMode')
	.sect	'.debug_ranges'
.L247:
	.word	-1,.L170,0,.L248-.L170,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEvadc_getQueueStatus')
	.sect	'.debug_info'
.L249:
	.word	296
	.half	3
	.word	.L250
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L252,.L251
	.byte	2
	.word	.L195
	.byte	3
	.byte	'IfxEvadc_getQueueStatus',0,1,193,2,17
	.word	.L395
	.byte	1,1,1
	.word	.L172,.L396,.L171
	.byte	4
	.byte	'group',0,1,193,2,54
	.word	.L343,.L397
	.byte	4
	.byte	'sourceType',0,1,193,2,84
	.word	.L347,.L398
	.byte	5
	.word	.L172,.L396
	.byte	6
	.byte	'status',0,1,195,2,21
	.word	.L395,.L399
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEvadc_getQueueStatus')
	.sect	'.debug_abbrev'
.L250:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEvadc_getQueueStatus')
	.sect	'.debug_line'
.L251:
	.word	.L688-.L687
.L687:
	.half	3
	.word	.L690-.L689
.L689:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0,0,0,0,0
.L690:
	.byte	5,28,7,0,5,2
	.word	.L172
	.byte	3,194,2,1,5,10,9
	.half	.L537-.L172
	.byte	3,4,1,7,9
	.half	.L691-.L537
	.byte	3,14,1,7,9
	.half	.L692-.L691
	.byte	3,13,1,5,1,7,9
	.half	.L693-.L692
	.byte	3,15,1,5,37,7,9
	.half	.L72-.L693
	.byte	3,89,1,5,9,9
	.half	.L694-.L72
	.byte	1,5,47,7,9
	.half	.L695-.L694
	.byte	3,2,1,5,37,9
	.half	.L73-.L695
	.byte	3,11,1,5,9,9
	.half	.L696-.L73
	.byte	1,5,20,7,9
	.half	.L77-.L696
	.byte	3,2,1,5,1,3,24,1,7,9
	.half	.L76-.L77
	.byte	1,5,37,7,9
	.half	.L74-.L76
	.byte	3,115,1,5,17,9
	.half	.L697-.L74
	.byte	1,5,1,9
	.half	.L698-.L697
	.byte	3,13,1,7,9
	.half	.L253-.L698
	.byte	0,1,1
.L688:
	.sdecl	'.debug_ranges',debug,cluster('IfxEvadc_getQueueStatus')
	.sect	'.debug_ranges'
.L252:
	.word	-1,.L172,0,.L253-.L172,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEvadc_isRequestQueueSlotEnabled')
	.sect	'.debug_info'
.L254:
	.word	309
	.half	3
	.word	.L255
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L257,.L256
	.byte	2
	.word	.L195
	.byte	3
	.byte	'IfxEvadc_isRequestQueueSlotEnabled',0,1,205,3,9
	.word	.L368
	.byte	1,1,1
	.word	.L178,.L400,.L177
	.byte	4
	.byte	'evadcG',0,1,205,3,57
	.word	.L343,.L401
	.byte	4
	.byte	'sourceType',0,1,205,3,88
	.word	.L347,.L402
	.byte	5
	.word	.L178,.L400
	.byte	6
	.byte	'enabled',0,1,207,3,13
	.word	.L368,.L403
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEvadc_isRequestQueueSlotEnabled')
	.sect	'.debug_abbrev'
.L255:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEvadc_isRequestQueueSlotEnabled')
	.sect	'.debug_line'
.L256:
	.word	.L700-.L699
.L699:
	.half	3
	.word	.L702-.L701
.L701:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0,0,0,0,0
.L702:
	.byte	5,21,7,0,5,2
	.word	.L178
	.byte	3,206,3,1,5,10,9
	.half	.L551-.L178
	.byte	3,4,1,7,9
	.half	.L703-.L551
	.byte	3,3,1,7,9
	.half	.L704-.L703
	.byte	3,3,1,5,1,7,9
	.half	.L705-.L704
	.byte	3,6,1,5,34,7,9
	.half	.L97-.L705
	.byte	3,117,1,5,1,9
	.half	.L706-.L97
	.byte	3,11,1,5,34,7,9
	.half	.L98-.L706
	.byte	3,120,1,5,1,9
	.half	.L707-.L98
	.byte	3,8,1,5,34,7,9
	.half	.L99-.L707
	.byte	3,123,1,5,1,9
	.half	.L708-.L99
	.byte	3,5,1,7,9
	.half	.L258-.L708
	.byte	0,1,1
.L700:
	.sdecl	'.debug_ranges',debug,cluster('IfxEvadc_isRequestQueueSlotEnabled')
	.sect	'.debug_ranges'
.L257:
	.word	-1,.L178,0,.L258-.L178,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEvadc_setQueueSlotGatingConfig')
	.sect	'.debug_info'
.L259:
	.word	349
	.half	3
	.word	.L260
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L262,.L261
	.byte	2
	.word	.L195
	.byte	3
	.byte	'IfxEvadc_setQueueSlotGatingConfig',0,1,144,4,6,1,1,1
	.word	.L184,.L404,.L183
	.byte	4
	.byte	'evadcG',0,1,144,4,53
	.word	.L343,.L405
	.byte	4
	.byte	'gatingSource',0,1,144,4,83
	.word	.L370,.L406
	.byte	4
	.byte	'gatingMode',0,1,144,4,117
	.word	.L364,.L407
	.byte	4
	.byte	'sourceType',0,1,144,4,152,1
	.word	.L347,.L408
	.byte	5
	.word	.L409
	.byte	6
	.byte	'qctrl',0,1,146,4,25
	.word	.L410,.L411
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEvadc_setQueueSlotGatingConfig')
	.sect	'.debug_abbrev'
.L260:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEvadc_setQueueSlotGatingConfig')
	.sect	'.debug_line'
.L261:
	.word	.L710-.L709
.L709:
	.half	3
	.word	.L712-.L711
.L711:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0,0,0,0,0
.L712:
	.byte	5,10,7,0,5,2
	.word	.L184
	.byte	3,149,4,1,7,9
	.half	.L713-.L184
	.byte	3,8,1,7,9
	.half	.L714-.L713
	.byte	3,9,1,5,1,7,9
	.half	.L715-.L714
	.byte	3,10,1,5,53,7,9
	.half	.L109-.L715
	.byte	3,103,1,5,16,9
	.half	.L566-.L109
	.byte	3,1,1,5,33,9
	.half	.L565-.L566
	.byte	3,2,1,5,27,9
	.half	.L567-.L565
	.byte	3,1,1,5,33,9
	.half	.L716-.L567
	.byte	1,5,1,9
	.half	.L717-.L716
	.byte	3,21,1,5,53,7,9
	.half	.L110-.L717
	.byte	3,111,1,5,16,9
	.half	.L568-.L110
	.byte	3,1,1,5,33,9
	.half	.L718-.L568
	.byte	3,2,1,5,27,9
	.half	.L719-.L718
	.byte	3,1,1,5,33,9
	.half	.L720-.L719
	.byte	1,5,1,9
	.half	.L721-.L720
	.byte	3,13,1,5,53,7,9
	.half	.L111-.L721
	.byte	3,120,1,5,16,9
	.half	.L569-.L111
	.byte	3,1,1,5,33,9
	.half	.L722-.L569
	.byte	3,2,1,5,27,9
	.half	.L723-.L722
	.byte	3,1,1,5,33,9
	.half	.L724-.L723
	.byte	1,5,1,9
	.half	.L725-.L724
	.byte	3,4,1,7,9
	.half	.L263-.L725
	.byte	0,1,1
.L710:
	.sdecl	'.debug_ranges',debug,cluster('IfxEvadc_setQueueSlotGatingConfig')
	.sect	'.debug_ranges'
.L262:
	.word	-1,.L184,0,.L263-.L184,0,0
.L409:
	.word	-1,.L184,0,.L404-.L184,-1,.L186,0,.L328-.L186,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEvadc_setQueueSlotTriggerOperatingConfig')
	.sect	'.debug_info'
.L264:
	.word	362
	.half	3
	.word	.L265
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L267,.L266
	.byte	2
	.word	.L195
	.byte	3
	.byte	'IfxEvadc_setQueueSlotTriggerOperatingConfig',0,1,180,4,6,1,1,1
	.word	.L188,.L412,.L187
	.byte	4
	.byte	'evadcG',0,1,180,4,63
	.word	.L343,.L413
	.byte	4
	.byte	'triggerMode',0,1,180,4,92
	.word	.L390,.L414
	.byte	4
	.byte	'triggerSource',0,1,180,4,128,1
	.word	.L385,.L415
	.byte	4
	.byte	'sourceType',0,1,180,4,166,1
	.word	.L347,.L416
	.byte	5
	.word	.L417
	.byte	6
	.byte	'qctrl',0,1,182,4,25
	.word	.L410,.L418
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEvadc_setQueueSlotTriggerOperatingConfig')
	.sect	'.debug_abbrev'
.L265:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEvadc_setQueueSlotTriggerOperatingConfig')
	.sect	'.debug_line'
.L266:
	.word	.L727-.L726
.L726:
	.half	3
	.word	.L729-.L728
.L728:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0,0,0,0,0
.L729:
	.byte	5,10,7,0,5,2
	.word	.L188
	.byte	3,185,4,1,7,9
	.half	.L730-.L188
	.byte	3,8,1,7,9
	.half	.L731-.L730
	.byte	3,7,1,5,1,7,9
	.half	.L732-.L731
	.byte	3,9,1,5,50,7,9
	.half	.L115-.L732
	.byte	3,106,1,5,16,9
	.half	.L571-.L115
	.byte	3,1,1,5,30,9
	.half	.L570-.L571
	.byte	3,3,1,5,1,9
	.half	.L572-.L570
	.byte	3,18,1,5,50,7,9
	.half	.L116-.L572
	.byte	3,113,1,5,16,9
	.half	.L573-.L116
	.byte	3,1,1,5,30,9
	.half	.L733-.L573
	.byte	3,3,1,5,1,9
	.half	.L734-.L733
	.byte	3,11,1,5,50,7,9
	.half	.L117-.L734
	.byte	3,120,1,5,16,9
	.half	.L574-.L117
	.byte	3,1,1,5,30,9
	.half	.L735-.L574
	.byte	3,3,1,5,1,9
	.half	.L736-.L735
	.byte	3,4,1,7,9
	.half	.L268-.L736
	.byte	0,1,1
.L727:
	.sdecl	'.debug_ranges',debug,cluster('IfxEvadc_setQueueSlotTriggerOperatingConfig')
	.sect	'.debug_ranges'
.L267:
	.word	-1,.L188,0,.L268-.L188,0,0
.L417:
	.word	-1,.L188,0,.L412-.L188,-1,.L190,0,.L323-.L190,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEvadc_getAdcDigitalFrequency')
	.sect	'.debug_info'
.L269:
	.word	287
	.half	3
	.word	.L270
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L272,.L271
	.byte	2
	.word	.L195
	.byte	3
	.byte	'IfxEvadc_getAdcDigitalFrequency',0,1,170,1,9
	.word	.L419
	.byte	1,1,1
	.word	.L156,.L420,.L155
	.byte	4
	.byte	'evadc',0,1,170,1,52
	.word	.L341,.L421
	.byte	5
	.word	.L156,.L420
	.byte	6
	.word	.L422,.L156,.L420
	.byte	7
	.word	.L423,.L156,.L420
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEvadc_getAdcDigitalFrequency')
	.sect	'.debug_abbrev'
.L270:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	29,1,49,16,17,1,18,1,0,0,7,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEvadc_getAdcDigitalFrequency')
	.sect	'.debug_line'
.L271:
	.word	.L738-.L737
.L737:
	.half	3
	.word	.L740-.L739
.L739:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0,0,0,0
	.byte	'IfxScuCcu.h',0,1,0,0,0
.L740:
	.byte	4,2,5,41,7,0,5,2
	.word	.L156
	.byte	3,202,12,1,4,1,5,1,9
	.half	.L273-.L156
	.byte	3,231,116,0,1,1
.L738:
	.sdecl	'.debug_ranges',debug,cluster('IfxEvadc_getAdcDigitalFrequency')
	.sect	'.debug_ranges'
.L272:
	.word	-1,.L156,0,.L273-.L156,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEvadc_setArbiterPriority')
	.sect	'.debug_info'
.L274:
	.word	332
	.half	3
	.word	.L275
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L277,.L276
	.byte	2
	.word	.L195
	.byte	3
	.byte	'IfxEvadc_setArbiterPriority',0,1,248,3,6,1,1,1
	.word	.L182,.L424,.L181
	.byte	4
	.byte	'evadcG',0,1,248,3,47
	.word	.L343,.L425
	.byte	4
	.byte	'slotEnable',0,1,248,3,63
	.word	.L368,.L426
	.byte	4
	.byte	'prio',0,1,248,3,104
	.word	.L375,.L427
	.byte	4
	.byte	'mode',0,1,248,3,140,1
	.word	.L380,.L428
	.byte	4
	.byte	'slot',0,1,248,3,169,1
	.word	.L347,.L429
	.byte	5
	.word	.L182,.L424
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEvadc_setArbiterPriority')
	.sect	'.debug_abbrev'
.L275:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEvadc_setArbiterPriority')
	.sect	'.debug_line'
.L276:
	.word	.L742-.L741
.L741:
	.half	3
	.word	.L744-.L743
.L743:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0,0,0,0,0
.L744:
	.byte	5,71,7,0,5,2
	.word	.L182
	.byte	3,251,3,1,5,5,9
	.half	.L745-.L182
	.byte	3,126,1,5,39,7,9
	.half	.L746-.L745
	.byte	3,2,1,5,22,1,5,62,9
	.half	.L564-.L746
	.byte	3,1,1,5,25,9
	.half	.L563-.L564
	.byte	3,127,1,5,30,9
	.half	.L747-.L563
	.byte	3,1,1,5,22,9
	.half	.L748-.L747
	.byte	1,5,58,9
	.half	.L749-.L748
	.byte	1,5,28,9
	.half	.L750-.L749
	.byte	1,5,25,9
	.half	.L751-.L750
	.byte	1,5,34,9
	.half	.L752-.L751
	.byte	3,1,1,5,22,9
	.half	.L562-.L752
	.byte	1,5,68,9
	.half	.L753-.L562
	.byte	3,4,1,5,25,9
	.half	.L754-.L753
	.byte	3,124,1,5,32,9
	.half	.L755-.L754
	.byte	3,4,1,5,37,9
	.half	.L756-.L755
	.byte	1,5,9,9
	.half	.L757-.L756
	.byte	3,126,1,5,26,7,9
	.half	.L758-.L757
	.byte	3,2,1,5,29,9
	.half	.L759-.L758
	.byte	1,5,82,1,5,26,9
	.half	.L106-.L759
	.byte	3,4,1,5,32,9
	.half	.L760-.L106
	.byte	1,5,29,9
	.half	.L761-.L760
	.byte	1,5,1,9
	.half	.L762-.L761
	.byte	3,7,1,5,30,7,9
	.half	.L105-.L762
	.byte	3,126,1,5,22,1,5,58,9
	.half	.L763-.L105
	.byte	1,5,28,9
	.half	.L764-.L763
	.byte	1,5,25,9
	.half	.L765-.L764
	.byte	1,5,1,9
	.half	.L766-.L765
	.byte	3,2,1,7,9
	.half	.L278-.L766
	.byte	0,1,1
.L742:
	.sdecl	'.debug_ranges',debug,cluster('IfxEvadc_setArbiterPriority')
	.sect	'.debug_ranges'
.L277:
	.word	-1,.L182,0,.L278-.L182,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEvadc_disableAccess')
	.sect	'.debug_info'
.L279:
	.word	286
	.half	3
	.word	.L280
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L282,.L281
	.byte	2
	.word	.L195
	.byte	3
	.byte	'IfxEvadc_disableAccess',0,1,91,6,1,1,1
	.word	.L144,.L430,.L143
	.byte	4
	.byte	'evadc',0,1,91,40
	.word	.L341,.L431
	.byte	4
	.byte	'protectionSet',0,1,91,67
	.word	.L432,.L433
	.byte	5
	.word	.L434
	.byte	6
	.byte	'passwd',0,1,93,12
	.word	.L435,.L436
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEvadc_disableAccess')
	.sect	'.debug_abbrev'
.L280:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEvadc_disableAccess')
	.sect	'.debug_line'
.L281:
	.word	.L768-.L767
.L767:
	.half	3
	.word	.L770-.L769
.L769:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0,0,0,0,0
.L770:
	.byte	5,6,7,0,5,2
	.word	.L144
	.byte	3,218,0,1,5,56,9
	.half	.L519-.L144
	.byte	3,2,1,5,19,9
	.half	.L518-.L519
	.byte	1,5,34,9
	.half	.L522-.L518
	.byte	3,1,1,5,25,9
	.half	.L521-.L522
	.byte	3,2,1,5,5,9
	.half	.L771-.L521
	.byte	1,5,31,7,9
	.half	.L772-.L771
	.byte	3,2,1,5,24,1,5,42,9
	.half	.L773-.L772
	.byte	1,5,27,9
	.half	.L774-.L773
	.byte	1,5,59,9
	.half	.L775-.L774
	.byte	1,5,30,9
	.half	.L8-.L775
	.byte	3,2,1,5,10,9
	.half	.L776-.L8
	.byte	1,5,24,7,9
	.half	.L777-.L776
	.byte	3,2,1,5,27,9
	.half	.L520-.L777
	.byte	1,5,68,9
	.half	.L523-.L520
	.byte	1,5,24,9
	.half	.L10-.L523
	.byte	3,4,1,5,27,9
	.half	.L524-.L10
	.byte	1,5,32,9
	.half	.L9-.L524
	.byte	3,3,1,5,1,9
	.half	.L283-.L9
	.byte	3,1,0,1,1
.L768:
	.sdecl	'.debug_ranges',debug,cluster('IfxEvadc_disableAccess')
	.sect	'.debug_ranges'
.L282:
	.word	-1,.L144,0,.L283-.L144,0,0
.L434:
	.word	-1,.L144,0,.L430-.L144,-1,.L146,0,.L338-.L146,-1,.L148,0,.L333-.L148,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEvadc_enableAccess')
	.sect	'.debug_info'
.L284:
	.word	293
	.half	3
	.word	.L285
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L287,.L286
	.byte	2
	.word	.L195
	.byte	3
	.byte	'IfxEvadc_enableAccess',0,1,130,1,6,1,1,1
	.word	.L152,.L437,.L151
	.byte	4
	.byte	'evadc',0,1,130,1,39
	.word	.L341,.L438
	.byte	4
	.byte	'protectionSet',0,1,130,1,66
	.word	.L432,.L439
	.byte	5
	.word	.L152,.L437
	.byte	6
	.byte	'passwd',0,1,132,1,12
	.word	.L435,.L440
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEvadc_enableAccess')
	.sect	'.debug_abbrev'
.L285:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEvadc_enableAccess')
	.sect	'.debug_line'
.L286:
	.word	.L779-.L778
.L778:
	.half	3
	.word	.L781-.L780
.L780:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0,0,0,0,0
.L781:
	.byte	5,6,7,0,5,2
	.word	.L152
	.byte	3,129,1,1,5,56,9
	.half	.L528-.L152
	.byte	3,2,1,5,19,9
	.half	.L526-.L528
	.byte	1,5,34,9
	.half	.L529-.L526
	.byte	3,1,1,5,25,9
	.half	.L527-.L529
	.byte	3,2,1,5,5,9
	.half	.L782-.L527
	.byte	1,5,32,7,9
	.half	.L783-.L782
	.byte	3,2,1,5,24,1,5,43,9
	.half	.L784-.L783
	.byte	1,5,30,9
	.half	.L785-.L784
	.byte	1,5,27,9
	.half	.L786-.L785
	.byte	1,5,60,9
	.half	.L787-.L786
	.byte	1,5,30,9
	.half	.L18-.L787
	.byte	3,2,1,5,10,9
	.half	.L788-.L18
	.byte	1,5,24,7,9
	.half	.L789-.L788
	.byte	3,2,1,5,30,9
	.half	.L790-.L789
	.byte	1,5,27,9
	.half	.L791-.L790
	.byte	1,5,69,9
	.half	.L792-.L791
	.byte	1,5,24,9
	.half	.L20-.L792
	.byte	3,4,1,5,30,9
	.half	.L793-.L20
	.byte	1,5,27,9
	.half	.L794-.L793
	.byte	1,5,32,9
	.half	.L19-.L794
	.byte	3,3,1,5,1,9
	.half	.L288-.L19
	.byte	3,1,0,1,1
.L779:
	.sdecl	'.debug_ranges',debug,cluster('IfxEvadc_enableAccess')
	.sect	'.debug_ranges'
.L287:
	.word	-1,.L152,0,.L288-.L152,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEvadc_getAdcModuleFrequency')
	.sect	'.debug_info'
.L289:
	.word	286
	.half	3
	.word	.L290
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L292,.L291
	.byte	2
	.word	.L195
	.byte	3
	.byte	'IfxEvadc_getAdcModuleFrequency',0,1,181,1,9
	.word	.L419
	.byte	1,1,1
	.word	.L158,.L441,.L157
	.byte	4
	.byte	'evadc',0,1,181,1,51
	.word	.L341,.L442
	.byte	5
	.word	.L158,.L441
	.byte	6
	.word	.L422,.L158,.L441
	.byte	7
	.word	.L423,.L158,.L441
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEvadc_getAdcModuleFrequency')
	.sect	'.debug_abbrev'
.L290:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	29,1,49,16,17,1,18,1,0,0,7,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEvadc_getAdcModuleFrequency')
	.sect	'.debug_line'
.L291:
	.word	.L796-.L795
.L795:
	.half	3
	.word	.L798-.L797
.L797:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0,0,0,0
	.byte	'IfxScuCcu.h',0,1,0,0,0
.L798:
	.byte	4,2,5,41,7,0,5,2
	.word	.L158
	.byte	3,202,12,1,4,1,5,1,9
	.half	.L293-.L158
	.byte	3,242,116,0,1,1
.L796:
	.sdecl	'.debug_ranges',debug,cluster('IfxEvadc_getAdcModuleFrequency')
	.sect	'.debug_ranges'
.L292:
	.word	-1,.L158,0,.L293-.L158,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEvadc_initializeFAdcI')
	.sect	'.debug_info'
.L294:
	.word	428
	.half	3
	.word	.L295
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L297,.L296
	.byte	2
	.word	.L195
	.byte	3
	.byte	'IfxEvadc_initializeFAdcI',0,1,165,3,8
	.word	.L356
	.byte	1,1,1
	.word	.L176,.L443,.L175
	.byte	4
	.byte	'evadc',0,1,165,3,44
	.word	.L341,.L444
	.byte	4
	.byte	'fAdcI',0,1,165,3,58
	.word	.L356,.L445
	.byte	4
	.byte	'group',0,1,165,3,78
	.word	.L343,.L446
	.byte	5
	.word	.L176,.L443
	.byte	6
	.byte	'divA',0,1,167,3,12
	.word	.L356,.L447
	.byte	6
	.byte	'result',0,1,168,3,12
	.word	.L356,.L448
	.byte	6
	.byte	'fadc',0,1,172,3,12
	.word	.L356,.L449
	.byte	7
	.word	.L422,.L450,.L451
	.byte	8
	.word	.L423,.L450,.L451
	.byte	0,7
	.word	.L452,.L94,.L453
	.byte	9
	.word	.L454,.L455
	.byte	9
	.word	.L456,.L457
	.byte	9
	.word	.L458,.L459
	.byte	8
	.word	.L460,.L94,.L453
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEvadc_initializeFAdcI')
	.sect	'.debug_abbrev'
.L295:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,0,49,16,17,1,18,1,0,0,9,5,0,49
	.byte	16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEvadc_initializeFAdcI')
	.sect	'.debug_line'
.L296:
	.word	.L800-.L799
.L799:
	.half	3
	.word	.L802-.L801
.L801:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0,0,0,0
	.byte	'IfxScuCcu.h',0,1,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.h',0,0,0,0,0
.L802:
	.byte	5,8,7,0,5,2
	.word	.L176
	.byte	3,164,3,1,4,2,5,41,9
	.half	.L450-.L176
	.byte	3,166,9,1,4,1,5,44,9
	.half	.L451-.L450
	.byte	3,225,118,1,5,20,9
	.half	.L545-.L451
	.byte	3,3,1,5,26,9
	.half	.L803-.L545
	.byte	1,5,20,9
	.half	.L804-.L803
	.byte	3,2,1,5,25,9
	.half	.L544-.L804
	.byte	1,5,26,9
	.half	.L805-.L544
	.byte	3,1,1,5,20,9
	.half	.L806-.L805
	.byte	1,5,27,9
	.half	.L547-.L806
	.byte	3,1,1,5,19,9
	.half	.L807-.L547
	.byte	1,5,18,3,2,1,5,5,9
	.half	.L548-.L807
	.byte	1,5,24,7,9
	.half	.L808-.L548
	.byte	3,2,1,5,31,9
	.half	.L809-.L808
	.byte	3,2,1,5,23,9
	.half	.L810-.L809
	.byte	1,5,22,9
	.half	.L93-.L810
	.byte	3,7,1,5,67,9
	.half	.L546-.L93
	.byte	1,5,57,9
	.half	.L549-.L546
	.byte	1,5,64,9
	.half	.L550-.L549
	.byte	1,5,16,7,9
	.half	.L811-.L550
	.byte	3,2,1,5,1,3,8,1,4,3,5,20,7,9
	.half	.L94-.L811
	.byte	3,139,17,1,5,26,9
	.half	.L812-.L94
	.byte	1,4,1,5,1,9
	.half	.L453-.L812
	.byte	3,245,110,1,7,9
	.half	.L298-.L453
	.byte	0,1,1
.L800:
	.sdecl	'.debug_ranges',debug,cluster('IfxEvadc_initializeFAdcI')
	.sect	'.debug_ranges'
.L297:
	.word	-1,.L176,0,.L298-.L176,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEvadc_resetModule')
	.sect	'.debug_info'
.L299:
	.word	265
	.half	3
	.word	.L300
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L302,.L301
	.byte	2
	.word	.L195
	.byte	3
	.byte	'IfxEvadc_resetModule',0,1,226,3,6,1,1,1
	.word	.L180,.L461,.L179
	.byte	4
	.byte	'evadc',0,1,226,3,38
	.word	.L341,.L462
	.byte	5
	.word	.L180,.L461
	.byte	6
	.byte	'passwd',0,1,228,3,12
	.word	.L435,.L463
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEvadc_resetModule')
	.sect	'.debug_abbrev'
.L300:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEvadc_resetModule')
	.sect	'.debug_line'
.L301:
	.word	.L814-.L813
.L813:
	.half	3
	.word	.L816-.L815
.L815:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0,0,0,0,0
.L816:
	.byte	5,6,7,0,5,2
	.word	.L180
	.byte	3,225,3,1,5,53,9
	.half	.L553-.L180
	.byte	3,2,1,5,19,9
	.half	.L552-.L553
	.byte	1,5,31,9
	.half	.L555-.L552
	.byte	3,1,1,5,34,9
	.half	.L554-.L555
	.byte	3,2,1,5,19,9
	.half	.L557-.L554
	.byte	3,1,1,5,29,9
	.half	.L817-.L557
	.byte	3,2,1,5,24,9
	.half	.L558-.L817
	.byte	3,126,1,5,19,9
	.half	.L818-.L558
	.byte	3,1,1,5,24,9
	.half	.L819-.L818
	.byte	1,5,29,9
	.half	.L820-.L819
	.byte	3,1,1,5,26,9
	.half	.L104-.L820
	.byte	3,2,1,5,39,9
	.half	.L821-.L104
	.byte	1,5,31,7,9
	.half	.L822-.L821
	.byte	3,5,1,5,21,9
	.half	.L823-.L822
	.byte	3,1,1,5,35,9
	.half	.L824-.L823
	.byte	3,1,1,5,26,9
	.half	.L559-.L824
	.byte	3,127,1,5,35,9
	.half	.L825-.L559
	.byte	3,1,1,5,29,9
	.half	.L560-.L825
	.byte	3,1,1,5,1,9
	.half	.L303-.L560
	.byte	3,1,0,1,1
.L814:
	.sdecl	'.debug_ranges',debug,cluster('IfxEvadc_resetModule')
	.sect	'.debug_ranges'
.L302:
	.word	-1,.L180,0,.L303-.L180,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEvadc_startupCalibration')
	.sect	'.debug_info'
.L304:
	.word	433
	.half	3
	.word	.L305
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L307,.L306
	.byte	2
	.word	.L195
	.byte	3
	.byte	'IfxEvadc_startupCalibration',0,1,213,4,6,1,1,1
	.word	.L192,.L464,.L191
	.byte	4
	.byte	'evadc',0,1,213,4,45
	.word	.L341,.L465
	.byte	5
	.word	.L192,.L464
	.byte	6
	.byte	'calibrationRunning',0,1,215,4,13
	.word	.L368,.L466
	.byte	6
	.byte	'adcCalGroupNum',0,1,216,4,13
	.word	.L368,.L467
	.byte	7
	.word	.L468,.L469,.L470
	.byte	8
	.word	.L471,.L472
	.byte	9
	.word	.L473,.L474
	.byte	0,7
	.word	.L468,.L475,.L476
	.byte	8
	.word	.L471,.L472
	.byte	0,7
	.word	.L477,.L122,.L478
	.byte	8
	.word	.L479,.L480
	.byte	8
	.word	.L481,.L482
	.byte	10
	.word	.L483,.L122,.L478
	.byte	6
	.byte	'status',0,2,192,18,11
	.word	.L368,.L484
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEvadc_startupCalibration')
	.sect	'.debug_abbrev'
.L305:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,85,6,0,0
	.byte	10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEvadc_startupCalibration')
	.sect	'.debug_line'
.L306:
	.word	.L827-.L826
.L826:
	.half	3
	.word	.L829-.L828
.L828:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.h',0,0,0,0,0
.L829:
	.byte	5,6,7,0,5,2
	.word	.L192
	.byte	3,212,4,1,5,34,9
	.half	.L575-.L192
	.byte	3,6,1,4,2,5,21,9
	.half	.L469-.L575
	.byte	3,128,16,1,4,1,5,35,9
	.half	.L470-.L469
	.byte	3,131,112,1,4,2,5,28,9
	.half	.L475-.L470
	.byte	3,253,15,1,4,1,5,35,9
	.half	.L476-.L475
	.byte	3,131,112,1,5,28,9
	.half	.L121-.L476
	.byte	3,6,1,4,2,5,19,3,221,13,1,4,1,5,74,9
	.half	.L576-.L121
	.byte	3,165,114,1,4,2,5,47,9
	.half	.L122-.L576
	.byte	3,219,13,1,4,1,5,90,9
	.half	.L830-.L122
	.byte	3,165,114,1,4,2,5,47,9
	.half	.L831-.L830
	.byte	3,219,13,1,4,1,5,36,9
	.half	.L577-.L831
	.byte	3,178,114,1,5,74,3,115,1,5,41,7,9
	.half	.L478-.L577
	.byte	3,20,1,5,1,7,9
	.half	.L832-.L478
	.byte	3,1,1,7,9
	.half	.L308-.L832
	.byte	0,1,1
.L827:
	.sdecl	'.debug_ranges',debug,cluster('IfxEvadc_startupCalibration')
	.sect	'.debug_ranges'
.L307:
	.word	-1,.L192,0,.L308-.L192,0,0
.L474:
	.word	-1,.L192,.L469-.L192,.L470-.L192,.L475-.L192,.L476-.L192,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEvadc_syncConvWorkAround')
	.sect	'.debug_info'
.L309:
	.word	297
	.half	3
	.word	.L310
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L312,.L311
	.byte	2
	.word	.L195
	.byte	3
	.byte	'IfxEvadc_syncConvWorkAround',0,1,254,4,9
	.word	.L368
	.byte	1,1,1
	.word	.L194,.L485,.L193
	.byte	4
	.byte	'evadc',0,1,254,4,48
	.word	.L341,.L486
	.byte	5
	.word	.L194,.L485
	.byte	6
	.byte	'timeOut',0,1,128,5,21
	.word	.L487,.L488
	.byte	6
	.byte	'status',0,1,130,5,21
	.word	.L368,.L489
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEvadc_syncConvWorkAround')
	.sect	'.debug_abbrev'
.L310:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEvadc_syncConvWorkAround')
	.sect	'.debug_line'
.L311:
	.word	.L834-.L833
.L833:
	.half	3
	.word	.L836-.L835
.L835:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0,0,0,0,0
.L836:
	.byte	5,31,7,0,5,2
	.word	.L194
	.byte	3,255,4,1,5,9,3,126,1,5,29,9
	.half	.L578-.L194
	.byte	3,2,1,5,28,9
	.half	.L837-.L578
	.byte	3,5,1,5,29,9
	.half	.L838-.L837
	.byte	3,125,1,5,5,9
	.half	.L579-.L838
	.byte	3,3,1,5,25,7,9
	.half	.L839-.L579
	.byte	3,2,1,5,32,9
	.half	.L840-.L839
	.byte	1,5,30,9
	.half	.L841-.L840
	.byte	1,5,25,9
	.half	.L842-.L841
	.byte	3,1,1,5,32,9
	.half	.L843-.L842
	.byte	1,5,30,9
	.half	.L844-.L843
	.byte	1,5,25,9
	.half	.L845-.L844
	.byte	3,1,1,5,30,9
	.half	.L846-.L845
	.byte	1,5,25,9
	.half	.L847-.L846
	.byte	3,1,1,5,30,9
	.half	.L848-.L847
	.byte	1,5,15,9
	.half	.L124-.L848
	.byte	3,3,1,5,13,1,5,60,9
	.half	.L849-.L124
	.byte	3,2,1,5,16,9
	.half	.L126-.L849
	.byte	3,2,1,5,31,9
	.half	.L125-.L126
	.byte	3,126,1,5,12,9
	.half	.L850-.L125
	.byte	1,5,45,7,9
	.half	.L851-.L850
	.byte	1,5,52,9
	.half	.L852-.L851
	.byte	1,5,56,9
	.half	.L853-.L852
	.byte	1,5,49,7,9
	.half	.L127-.L853
	.byte	3,5,1,5,18,1,5,15,9
	.half	.L854-.L127
	.byte	3,3,1,5,13,1,5,28,9
	.half	.L855-.L854
	.byte	3,2,1,5,57,9
	.half	.L856-.L855
	.byte	1,5,25,9
	.half	.L129-.L856
	.byte	3,2,1,5,32,9
	.half	.L857-.L129
	.byte	1,5,28,9
	.half	.L128-.L857
	.byte	3,126,1,5,12,9
	.half	.L858-.L128
	.byte	1,5,42,7,9
	.half	.L859-.L858
	.byte	1,5,49,9
	.half	.L860-.L859
	.byte	1,5,53,9
	.half	.L861-.L860
	.byte	1,5,15,7,9
	.half	.L130-.L861
	.byte	3,5,1,5,13,1,5,57,9
	.half	.L862-.L130
	.byte	3,2,1,5,16,9
	.half	.L132-.L862
	.byte	3,2,1,5,28,9
	.half	.L131-.L132
	.byte	3,126,1,5,12,9
	.half	.L863-.L131
	.byte	1,5,42,7,9
	.half	.L864-.L863
	.byte	1,5,49,9
	.half	.L865-.L864
	.byte	1,5,53,9
	.half	.L866-.L865
	.byte	1,5,15,7,9
	.half	.L133-.L866
	.byte	3,5,1,5,13,1,5,24,9
	.half	.L134-.L133
	.byte	3,2,1,5,12,9
	.half	.L867-.L134
	.byte	1,5,41,7,9
	.half	.L868-.L867
	.byte	1,5,48,9
	.half	.L869-.L868
	.byte	1,5,52,9
	.half	.L870-.L869
	.byte	1,5,49,7,9
	.half	.L135-.L870
	.byte	3,4,1,5,18,1,5,25,9
	.half	.L871-.L135
	.byte	3,5,1,5,5,9
	.half	.L872-.L871
	.byte	1,5,25,7,9
	.half	.L873-.L872
	.byte	3,2,1,5,32,9
	.half	.L874-.L873
	.byte	1,5,25,9
	.half	.L875-.L874
	.byte	3,1,1,5,32,9
	.half	.L876-.L875
	.byte	1,5,28,9
	.half	.L136-.L876
	.byte	3,3,1,5,5,9
	.half	.L877-.L136
	.byte	1,5,25,7,9
	.half	.L878-.L877
	.byte	3,2,1,5,29,9
	.half	.L879-.L878
	.byte	1,5,1,9
	.half	.L137-.L879
	.byte	3,4,1,7,9
	.half	.L313-.L137
	.byte	0,1,1
.L834:
	.sdecl	'.debug_ranges',debug,cluster('IfxEvadc_syncConvWorkAround')
	.sect	'.debug_ranges'
.L312:
	.word	-1,.L194,0,.L313-.L194,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEvadc_configExternalMultiplexerMode')
	.sect	'.debug_info'
.L314:
	.word	468
	.half	3
	.word	.L315
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L317,.L316
	.byte	2
	.word	.L195
	.byte	3
	.byte	'IfxEvadc_configExternalMultiplexerMode',0,1,70,6,1,1,1
	.word	.L142,.L490,.L141
	.byte	4
	.byte	'evadc',0,1,70,56
	.word	.L341,.L491
	.byte	4
	.byte	'evadcG',0,1,70,76
	.word	.L343,.L492
	.byte	4
	.byte	'mode',0,1,70,117
	.word	.L493,.L494
	.byte	4
	.byte	'channels',0,1,70,129,1
	.word	.L368,.L495
	.byte	4
	.byte	'startChannel',0,1,70,164,1
	.word	.L496,.L497
	.byte	4
	.byte	'code',0,1,70,204,1
	.word	.L498,.L499
	.byte	4
	.byte	'sampleTimeControl',0,1,70,241,1
	.word	.L500,.L501
	.byte	4
	.byte	'channelSelectionStyle',0,1,70,163,2
	.word	.L502,.L503
	.byte	5
	.word	.L142,.L490
	.byte	6
	.byte	'emuxctr',0,1,72,25
	.word	.L504,.L505
	.byte	6
	.byte	'emuxcs',0,1,73,25
	.word	.L506,.L507
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEvadc_configExternalMultiplexerMode')
	.sect	'.debug_abbrev'
.L315:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEvadc_configExternalMultiplexerMode')
	.sect	'.debug_line'
.L316:
	.word	.L881-.L880
.L880:
	.half	3
	.word	.L883-.L882
.L882:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0,0,0,0,0
.L883:
	.byte	5,24,7,0,5,2
	.word	.L142
	.byte	3,203,0,1,5,6,3,122,1,5,24,9
	.half	.L514-.L142
	.byte	3,11,1,5,6,3,117,1,5,24,9
	.half	.L515-.L514
	.byte	3,8,1,5,6,3,120,1,5,34,9
	.half	.L516-.L515
	.byte	3,12,1,5,74,9
	.half	.L513-.L516
	.byte	1,5,14,9
	.half	.L884-.L513
	.byte	3,121,1,5,24,9
	.half	.L885-.L884
	.byte	1,9
	.half	.L886-.L885
	.byte	3,2,1,9
	.half	.L887-.L886
	.byte	3,2,1,9
	.half	.L888-.L887
	.byte	3,1,1,5,74,9
	.half	.L889-.L888
	.byte	3,2,1,5,34,1,5,24,9
	.half	.L511-.L889
	.byte	3,1,1,9
	.half	.L890-.L511
	.byte	3,1,1,5,35,3,3,1,5,24,9
	.half	.L517-.L890
	.byte	3,126,1,9
	.half	.L891-.L517
	.byte	3,1,1,5,35,9
	.half	.L892-.L891
	.byte	3,1,1,5,1,7,9
	.half	.L318-.L892
	.byte	3,1,0,1,1
.L881:
	.sdecl	'.debug_ranges',debug,cluster('IfxEvadc_configExternalMultiplexerMode')
	.sect	'.debug_ranges'
.L317:
	.word	-1,.L142,0,.L318-.L142,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_5')
	.sect	'.debug_info'
.L319:
	.word	203
	.half	3
	.word	.L320
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L322,.L321
	.byte	2
	.word	.L195
	.byte	3
	.byte	'.cocofun_5',0,1,180,4,6,1
	.word	.L190,.L323,.L189
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_5')
	.sect	'.debug_abbrev'
.L320:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_5')
	.sect	'.debug_line'
.L321:
	.word	.L894-.L893
.L893:
	.half	3
	.word	.L896-.L895
.L895:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0,0,0,0,0
.L896:
	.byte	5,16,7,0,5,2
	.word	.L190
	.byte	3,188,4,1,5,30,9
	.half	.L897-.L190
	.byte	1,9
	.half	.L898-.L897
	.byte	3,1,1,9
	.half	.L899-.L898
	.byte	3,1,1,9
	.half	.L323-.L899
	.byte	0,1,1,5,16,0,5,2
	.word	.L190
	.byte	3,195,4,1,5,30,9
	.half	.L897-.L190
	.byte	1,9
	.half	.L898-.L897
	.byte	3,1,1,9
	.half	.L899-.L898
	.byte	3,1,1,9
	.half	.L900-.L899
	.byte	3,121,1,7,9
	.half	.L323-.L900
	.byte	0,1,1,5,16,0,5,2
	.word	.L190
	.byte	3,202,4,1,5,30,9
	.half	.L897-.L190
	.byte	1,9
	.half	.L898-.L897
	.byte	3,1,1,9
	.half	.L899-.L898
	.byte	3,1,1,9
	.half	.L900-.L899
	.byte	3,114,1,7,9
	.half	.L323-.L900
	.byte	0,1,1
.L894:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_5')
	.sect	'.debug_ranges'
.L322:
	.word	-1,.L190,0,.L323-.L190,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_6')
	.sect	'.debug_info'
.L324:
	.word	203
	.half	3
	.word	.L325
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L327,.L326
	.byte	2
	.word	.L195
	.byte	3
	.byte	'.cocofun_6',0,1,144,4,6,1
	.word	.L186,.L328,.L185
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_6')
	.sect	'.debug_abbrev'
.L325:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_6')
	.sect	'.debug_line'
.L326:
	.word	.L902-.L901
.L901:
	.half	3
	.word	.L904-.L903
.L903:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0,0,0,0,0
.L904:
	.byte	5,16,7,0,5,2
	.word	.L186
	.byte	3,152,4,1,5,33,9
	.half	.L905-.L186
	.byte	1,9
	.half	.L906-.L905
	.byte	3,1,1,9
	.half	.L328-.L906
	.byte	0,1,1,5,16,0,5,2
	.word	.L186
	.byte	3,160,4,1,5,33,9
	.half	.L905-.L186
	.byte	1,9
	.half	.L906-.L905
	.byte	3,1,1,9
	.half	.L907-.L906
	.byte	3,120,1,7,9
	.half	.L328-.L907
	.byte	0,1,1,5,16,0,5,2
	.word	.L186
	.byte	3,169,4,1,5,33,9
	.half	.L905-.L186
	.byte	1,9
	.half	.L906-.L905
	.byte	3,1,1,9
	.half	.L907-.L906
	.byte	3,111,1,7,9
	.half	.L328-.L907
	.byte	0,1,1
.L902:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_6')
	.sect	'.debug_ranges'
.L327:
	.word	-1,.L186,0,.L328-.L186,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_7')
	.sect	'.debug_info'
.L329:
	.word	202
	.half	3
	.word	.L330
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L332,.L331
	.byte	2
	.word	.L195
	.byte	3
	.byte	'.cocofun_7',0,1,91,6,1
	.word	.L148,.L333,.L147
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_7')
	.sect	'.debug_abbrev'
.L330:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_7')
	.sect	'.debug_line'
.L331:
	.word	.L909-.L908
.L908:
	.half	3
	.word	.L911-.L910
.L910:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0,0,0,0,0
.L911:
	.byte	5,60,7,0,5,2
	.word	.L148
	.byte	3,229,0,1,5,24,1,5,31,9
	.half	.L912-.L148
	.byte	1,5,42,9
	.half	.L913-.L912
	.byte	1,9
	.half	.L333-.L913
	.byte	0,1,1,5,61,0,5,2
	.word	.L148
	.byte	3,140,1,1,5,24,1,5,32,9
	.half	.L912-.L148
	.byte	1,5,43,9
	.half	.L913-.L912
	.byte	1,5,42,3,89,1,7,9
	.half	.L333-.L913
	.byte	0,1,1
.L909:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_7')
	.sect	'.debug_ranges'
.L332:
	.word	-1,.L148,0,.L333-.L148,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_8')
	.sect	'.debug_info'
.L334:
	.word	202
	.half	3
	.word	.L335
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L337,.L336
	.byte	2
	.word	.L195
	.byte	3
	.byte	'.cocofun_8',0,1,91,6,1
	.word	.L146,.L338,.L145
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_8')
	.sect	'.debug_abbrev'
.L335:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_8')
	.sect	'.debug_line'
.L336:
	.word	.L915-.L914
.L914:
	.half	3
	.word	.L917-.L916
.L916:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Evadc\\Std\\IfxEvadc.c',0,0,0,0,0
.L917:
	.byte	5,60,7,0,5,2
	.word	.L146
	.byte	3,233,0,1,5,24,1,5,31,9
	.half	.L918-.L146
	.byte	1,5,42,9
	.half	.L919-.L918
	.byte	1,9
	.half	.L338-.L919
	.byte	0,1,1,5,61,0,5,2
	.word	.L146
	.byte	3,144,1,1,5,24,1,5,32,9
	.half	.L918-.L146
	.byte	1,5,43,9
	.half	.L919-.L918
	.byte	1,5,42,3,89,1,7,9
	.half	.L338-.L919
	.byte	0,1,1
.L915:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_8')
	.sect	'.debug_ranges'
.L337:
	.word	-1,.L146,0,.L338-.L146,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_5')
	.sect	'.debug_loc'
.L189:
	.word	-1,.L190,0,.L323-.L190
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_6')
	.sect	'.debug_loc'
.L185:
	.word	-1,.L186,0,.L328-.L186
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_7')
	.sect	'.debug_loc'
.L147:
	.word	-1,.L148,0,.L333-.L148
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_8')
	.sect	'.debug_loc'
.L145:
	.word	-1,.L146,0,.L338-.L146
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEvadc_addToQueue')
	.sect	'.debug_loc'
.L139:
	.word	-1,.L140,0,.L352-.L140
	.half	2
	.byte	138,0
	.word	0,0
.L354:
	.word	-1,.L140,0,.L508-.L140
	.half	1
	.byte	84
	.word	.L3-.L140,.L509-.L140
	.half	1
	.byte	84
	.word	.L4-.L140,.L510-.L140
	.half	1
	.byte	84
	.word	0,0
.L353:
	.word	-1,.L140,0,.L352-.L140
	.half	1
	.byte	100
	.word	0,0
.L357:
	.word	-1,.L140,0,.L352-.L140
	.half	1
	.byte	86
	.word	0,0
.L355:
	.word	-1,.L140,0,.L352-.L140
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEvadc_configExternalMultiplexerMode')
	.sect	'.debug_loc'
.L141:
	.word	-1,.L142,0,.L490-.L142
	.half	2
	.byte	138,0
	.word	0,0
.L503:
	.word	-1,.L142,0,.L490-.L142
	.half	2
	.byte	145,4
	.word	.L512-.L142,.L511-.L142
	.half	1
	.byte	81
	.word	0,0
.L495:
	.word	-1,.L142,0,.L511-.L142
	.half	1
	.byte	85
	.word	0,0
.L499:
	.word	-1,.L142,0,.L511-.L142
	.half	1
	.byte	87
	.word	0,0
.L507:
	.word	-1,.L142,.L514-.L142,.L490-.L142
	.half	1
	.byte	88
	.word	0,0
.L505:
	.word	-1,.L142,0,.L512-.L142
	.half	1
	.byte	89
	.word	.L513-.L142,.L490-.L142
	.half	1
	.byte	89
	.word	0,0
.L491:
	.word	-1,.L142,0,.L511-.L142
	.half	1
	.byte	100
	.word	.L515-.L142,.L490-.L142
	.half	1
	.byte	111
	.word	.L517-.L142,.L490-.L142
	.half	1
	.byte	100
	.word	0,0
.L492:
	.word	-1,.L142,0,.L511-.L142
	.half	1
	.byte	101
	.word	.L516-.L142,.L490-.L142
	.half	1
	.byte	108
	.word	0,0
.L494:
	.word	-1,.L142,0,.L513-.L142
	.half	1
	.byte	84
	.word	0,0
.L501:
	.word	-1,.L142,0,.L490-.L142
	.half	2
	.byte	145,0
	.word	.L514-.L142,.L511-.L142
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L497:
	.word	-1,.L142,0,.L511-.L142
	.half	1
	.byte	86
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEvadc_disableAccess')
	.sect	'.debug_loc'
.L143:
	.word	-1,.L144,0,.L430-.L144
	.half	2
	.byte	138,0
	.word	0,0
.L431:
	.word	-1,.L144,0,.L518-.L144
	.half	1
	.byte	100
	.word	.L519-.L144,.L520-.L144
	.half	1
	.byte	111
	.word	.L148-.L144,.L333-.L144
	.half	1
	.byte	111
	.word	.L523-.L144,.L524-.L144
	.half	1
	.byte	111
	.word	.L146-.L144,.L338-.L144
	.half	1
	.byte	111
	.word	.L9-.L144,.L430-.L144
	.half	1
	.byte	111
	.word	0,0
.L436:
	.word	-1,.L144,.L518-.L144,.L521-.L144
	.half	1
	.byte	82
	.word	.L522-.L144,.L520-.L144
	.half	1
	.byte	88
	.word	.L148-.L144,.L333-.L144
	.half	1
	.byte	88
	.word	.L523-.L144,.L524-.L144
	.half	1
	.byte	88
	.word	.L146-.L144,.L338-.L144
	.half	1
	.byte	88
	.word	.L9-.L144,.L430-.L144
	.half	1
	.byte	88
	.word	.L525-.L144,.L430-.L144
	.half	1
	.byte	84
	.word	0,0
.L433:
	.word	-1,.L144,0,.L518-.L144
	.half	1
	.byte	84
	.word	.L518-.L144,.L520-.L144
	.half	1
	.byte	89
	.word	.L148-.L144,.L333-.L144
	.half	1
	.byte	89
	.word	.L523-.L144,.L524-.L144
	.half	1
	.byte	89
	.word	.L146-.L144,.L338-.L144
	.half	1
	.byte	89
	.word	.L9-.L144,.L430-.L144
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEvadc_disableQueueSlotExternalTrigger')
	.sect	'.debug_loc'
.L149:
	.word	-1,.L150,0,.L358-.L150
	.half	2
	.byte	138,0
	.word	0,0
.L359:
	.word	-1,.L150,0,.L358-.L150
	.half	1
	.byte	100
	.word	0,0
.L360:
	.word	-1,.L150,0,.L358-.L150
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEvadc_enableAccess')
	.sect	'.debug_loc'
.L151:
	.word	-1,.L152,0,.L437-.L152
	.half	2
	.byte	138,0
	.word	0,0
.L438:
	.word	-1,.L152,0,.L526-.L152
	.half	1
	.byte	100
	.word	.L148-.L152,.L333-.L152
	.half	1
	.byte	111
	.word	.L146-.L152,.L338-.L152
	.half	1
	.byte	111
	.word	.L528-.L152,.L437-.L152
	.half	1
	.byte	111
	.word	0,0
.L440:
	.word	-1,.L152,.L526-.L152,.L527-.L152
	.half	1
	.byte	82
	.word	.L148-.L152,.L333-.L152
	.half	1
	.byte	88
	.word	.L146-.L152,.L338-.L152
	.half	1
	.byte	88
	.word	.L529-.L152,.L437-.L152
	.half	1
	.byte	88
	.word	.L530-.L152,.L437-.L152
	.half	1
	.byte	84
	.word	0,0
.L439:
	.word	-1,.L152,0,.L526-.L152
	.half	1
	.byte	84
	.word	.L148-.L152,.L333-.L152
	.half	1
	.byte	89
	.word	.L146-.L152,.L338-.L152
	.half	1
	.byte	89
	.word	.L526-.L152,.L437-.L152
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEvadc_enableQueueSlotExternalTrigger')
	.sect	'.debug_loc'
.L153:
	.word	-1,.L154,0,.L361-.L154
	.half	2
	.byte	138,0
	.word	0,0
.L362:
	.word	-1,.L154,0,.L361-.L154
	.half	1
	.byte	100
	.word	0,0
.L363:
	.word	-1,.L154,0,.L361-.L154
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEvadc_getAdcDigitalFrequency')
	.sect	'.debug_loc'
.L155:
	.word	-1,.L156,0,.L420-.L156
	.half	2
	.byte	138,0
	.word	0,0
.L421:
	.word	-1,.L156,0,.L420-.L156
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEvadc_getAdcModuleFrequency')
	.sect	'.debug_loc'
.L157:
	.word	-1,.L158,0,.L441-.L158
	.half	2
	.byte	138,0
	.word	0,0
.L442:
	.word	-1,.L158,0,.L441-.L158
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEvadc_getQueueSlotGatingMode')
	.sect	'.debug_loc'
.L159:
	.word	-1,.L160,0,.L365-.L160
	.half	2
	.byte	138,0
	.word	0,0
.L366:
	.word	-1,.L160,0,.L365-.L160
	.half	1
	.byte	100
	.word	0,0
.L369:
	.word	-1,.L160,.L531-.L160,.L365-.L160
	.half	1
	.byte	82
	.word	0,0
.L367:
	.word	-1,.L160,0,.L365-.L160
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEvadc_getQueueSlotGatingSource')
	.sect	'.debug_loc'
.L161:
	.word	-1,.L162,0,.L371-.L162
	.half	2
	.byte	138,0
	.word	0,0
.L372:
	.word	-1,.L162,0,.L371-.L162
	.half	1
	.byte	100
	.word	0,0
.L374:
	.word	-1,.L162,.L532-.L162,.L371-.L162
	.half	1
	.byte	82
	.word	0,0
.L373:
	.word	-1,.L162,0,.L371-.L162
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEvadc_getQueueSlotPriority')
	.sect	'.debug_loc'
.L163:
	.word	-1,.L164,0,.L376-.L164
	.half	2
	.byte	138,0
	.word	0,0
.L377:
	.word	-1,.L164,0,.L376-.L164
	.half	1
	.byte	100
	.word	0,0
.L379:
	.word	-1,.L164,.L533-.L164,.L376-.L164
	.half	1
	.byte	82
	.word	0,0
.L378:
	.word	-1,.L164,0,.L376-.L164
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEvadc_getQueueSlotStartMode')
	.sect	'.debug_loc'
.L165:
	.word	-1,.L166,0,.L381-.L166
	.half	2
	.byte	138,0
	.word	0,0
.L382:
	.word	-1,.L166,0,.L381-.L166
	.half	1
	.byte	100
	.word	0,0
.L384:
	.word	-1,.L166,.L534-.L166,.L381-.L166
	.half	1
	.byte	82
	.word	0,0
.L383:
	.word	-1,.L166,0,.L381-.L166
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEvadc_getQueueSlotTriggerInput')
	.sect	'.debug_loc'
.L167:
	.word	-1,.L168,0,.L386-.L168
	.half	2
	.byte	138,0
	.word	0,0
.L387:
	.word	-1,.L168,0,.L386-.L168
	.half	1
	.byte	100
	.word	0,0
.L388:
	.word	-1,.L168,0,.L386-.L168
	.half	1
	.byte	84
	.word	0,0
.L389:
	.word	-1,.L168,.L535-.L168,.L386-.L168
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEvadc_getQueueSlotTriggerMode')
	.sect	'.debug_loc'
.L169:
	.word	-1,.L170,0,.L391-.L170
	.half	2
	.byte	138,0
	.word	0,0
.L392:
	.word	-1,.L170,0,.L391-.L170
	.half	1
	.byte	100
	.word	0,0
.L393:
	.word	-1,.L170,0,.L391-.L170
	.half	1
	.byte	84
	.word	0,0
.L394:
	.word	-1,.L170,.L536-.L170,.L391-.L170
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEvadc_getQueueStatus')
	.sect	'.debug_loc'
.L171:
	.word	-1,.L172,0,.L396-.L172
	.half	2
	.byte	138,0
	.word	0,0
.L397:
	.word	-1,.L172,0,.L396-.L172
	.half	1
	.byte	100
	.word	0,0
.L398:
	.word	-1,.L172,0,.L396-.L172
	.half	1
	.byte	84
	.word	0,0
.L399:
	.word	-1,.L172,.L537-.L172,.L396-.L172
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEvadc_getResultBasedOnRequestSource')
	.sect	'.debug_loc'
.L173:
	.word	-1,.L174,0,.L340-.L174
	.half	2
	.byte	138,0
	.word	0,0
.L346:
	.word	-1,.L174,0,.L340-.L174
	.half	1
	.byte	84
	.word	0,0
.L342:
	.word	-1,.L174,0,.L340-.L174
	.half	1
	.byte	100
	.word	0,0
.L344:
	.word	-1,.L174,0,.L340-.L174
	.half	1
	.byte	101
	.word	0,0
.L350:
	.word	-1,.L174,.L538-.L174,.L539-.L174
	.half	1
	.byte	95
	.word	.L83-.L174,.L540-.L174
	.half	1
	.byte	95
	.word	.L84-.L174,.L541-.L174
	.half	1
	.byte	95
	.word	0,0
.L348:
	.word	-1,.L174,0,.L340-.L174
	.half	1
	.byte	85
	.word	0,0
.L351:
	.word	-1,.L174,.L542-.L174,.L90-.L174
	.half	1
	.byte	82
	.word	.L543-.L174,.L340-.L174
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEvadc_initializeFAdcI')
	.sect	'.debug_loc'
.L175:
	.word	-1,.L176,0,.L443-.L176
	.half	2
	.byte	138,0
	.word	0,0
.L459:
	.word	0,0
.L447:
	.word	-1,.L176,.L547-.L176,.L453-.L176
	.half	1
	.byte	95
	.word	0,0
.L444:
	.word	-1,.L176,0,.L451-.L176
	.half	1
	.byte	100
	.word	0,0
.L455:
	.word	0,0
.L457:
	.word	0,0
.L445:
	.word	-1,.L176,0,.L451-.L176
	.half	1
	.byte	84
	.word	.L450-.L176,.L544-.L176
	.half	1
	.byte	95
	.word	0,0
.L449:
	.word	-1,.L176,.L545-.L176,.L546-.L176
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L446:
	.word	-1,.L176,0,.L451-.L176
	.half	1
	.byte	101
	.word	.L450-.L176,.L443-.L176
	.half	1
	.byte	111
	.word	0,0
.L448:
	.word	-1,.L176,.L548-.L176,.L93-.L176
	.half	1
	.byte	82
	.word	.L549-.L176,.L550-.L176
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEvadc_isRequestQueueSlotEnabled')
	.sect	'.debug_loc'
.L177:
	.word	-1,.L178,0,.L400-.L178
	.half	2
	.byte	138,0
	.word	0,0
.L403:
	.word	-1,.L178,.L551-.L178,.L400-.L178
	.half	1
	.byte	82
	.word	0,0
.L401:
	.word	-1,.L178,0,.L400-.L178
	.half	1
	.byte	100
	.word	0,0
.L402:
	.word	-1,.L178,0,.L400-.L178
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEvadc_resetModule')
	.sect	'.debug_loc'
.L179:
	.word	-1,.L180,0,.L461-.L180
	.half	2
	.byte	138,0
	.word	0,0
.L462:
	.word	-1,.L180,0,.L552-.L180
	.half	1
	.byte	100
	.word	.L553-.L180,.L461-.L180
	.half	1
	.byte	111
	.word	.L556-.L180,.L557-.L180
	.half	1
	.byte	100
	.word	.L559-.L180,.L560-.L180
	.half	1
	.byte	100
	.word	0,0
.L463:
	.word	-1,.L180,.L552-.L180,.L554-.L180
	.half	1
	.byte	82
	.word	.L555-.L180,.L461-.L180
	.half	1
	.byte	88
	.word	.L558-.L180,.L104-.L180
	.half	1
	.byte	84
	.word	.L561-.L180,.L461-.L180
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEvadc_setArbiterPriority')
	.sect	'.debug_loc'
.L181:
	.word	-1,.L182,0,.L424-.L182
	.half	2
	.byte	138,0
	.word	0,0
.L425:
	.word	-1,.L182,0,.L424-.L182
	.half	1
	.byte	100
	.word	0,0
.L428:
	.word	-1,.L182,0,.L424-.L182
	.half	1
	.byte	86
	.word	0,0
.L427:
	.word	-1,.L182,0,.L562-.L182
	.half	1
	.byte	85
	.word	.L105-.L182,.L424-.L182
	.half	1
	.byte	85
	.word	0,0
.L429:
	.word	-1,.L182,0,.L563-.L182
	.half	1
	.byte	87
	.word	.L105-.L182,.L424-.L182
	.half	1
	.byte	87
	.word	0,0
.L426:
	.word	-1,.L182,0,.L564-.L182
	.half	1
	.byte	84
	.word	.L105-.L182,.L424-.L182
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEvadc_setQueueSlotGatingConfig')
	.sect	'.debug_loc'
.L183:
	.word	-1,.L184,0,.L404-.L184
	.half	2
	.byte	138,0
	.word	0,0
.L405:
	.word	-1,.L184,0,.L565-.L184
	.half	1
	.byte	100
	.word	.L186-.L184,.L328-.L184
	.half	1
	.byte	100
	.word	.L567-.L184,.L404-.L184
	.half	1
	.byte	100
	.word	0,0
.L407:
	.word	-1,.L184,0,.L565-.L184
	.half	1
	.byte	85
	.word	.L186-.L184,.L328-.L184
	.half	1
	.byte	85
	.word	.L567-.L184,.L404-.L184
	.half	1
	.byte	85
	.word	0,0
.L406:
	.word	-1,.L184,0,.L565-.L184
	.half	1
	.byte	84
	.word	.L186-.L184,.L328-.L184
	.half	1
	.byte	84
	.word	.L567-.L184,.L404-.L184
	.half	1
	.byte	84
	.word	0,0
.L411:
	.word	-1,.L184,.L566-.L184,.L565-.L184
	.half	5
	.byte	144,32,157,32,0
	.word	.L186-.L184,.L328-.L184
	.half	5
	.byte	144,32,157,32,0
	.word	.L567-.L184,.L110-.L184
	.half	5
	.byte	144,32,157,32,0
	.word	.L568-.L184,.L111-.L184
	.half	5
	.byte	144,32,157,32,0
	.word	.L569-.L184,.L404-.L184
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L408:
	.word	-1,.L184,0,.L565-.L184
	.half	1
	.byte	86
	.word	.L186-.L184,.L328-.L184
	.half	1
	.byte	86
	.word	.L567-.L184,.L404-.L184
	.half	1
	.byte	86
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEvadc_setQueueSlotTriggerOperatingConfig')
	.sect	'.debug_loc'
.L187:
	.word	-1,.L188,0,.L412-.L188
	.half	2
	.byte	138,0
	.word	0,0
.L413:
	.word	-1,.L188,0,.L570-.L188
	.half	1
	.byte	100
	.word	.L190-.L188,.L323-.L188
	.half	1
	.byte	100
	.word	.L572-.L188,.L412-.L188
	.half	1
	.byte	100
	.word	0,0
.L418:
	.word	-1,.L188,.L571-.L188,.L570-.L188
	.half	5
	.byte	144,32,157,32,0
	.word	.L190-.L188,.L323-.L188
	.half	5
	.byte	144,32,157,32,0
	.word	.L572-.L188,.L116-.L188
	.half	5
	.byte	144,32,157,32,0
	.word	.L573-.L188,.L117-.L188
	.half	5
	.byte	144,32,157,32,0
	.word	.L574-.L188,.L412-.L188
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L416:
	.word	-1,.L188,0,.L570-.L188
	.half	1
	.byte	86
	.word	.L190-.L188,.L323-.L188
	.half	1
	.byte	86
	.word	.L572-.L188,.L412-.L188
	.half	1
	.byte	86
	.word	0,0
.L414:
	.word	-1,.L188,0,.L570-.L188
	.half	1
	.byte	84
	.word	.L190-.L188,.L323-.L188
	.half	1
	.byte	84
	.word	.L572-.L188,.L412-.L188
	.half	1
	.byte	84
	.word	0,0
.L415:
	.word	-1,.L188,0,.L570-.L188
	.half	1
	.byte	85
	.word	.L190-.L188,.L323-.L188
	.half	1
	.byte	85
	.word	.L572-.L188,.L412-.L188
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEvadc_startupCalibration')
	.sect	'.debug_loc'
.L191:
	.word	-1,.L192,0,.L464-.L192
	.half	2
	.byte	138,0
	.word	0,0
.L467:
	.word	0,0
.L482:
	.word	0,0
.L466:
	.word	-1,.L192,.L576-.L192,.L464-.L192
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L465:
	.word	-1,.L192,0,.L469-.L192
	.half	1
	.byte	100
	.word	.L575-.L192,.L464-.L192
	.half	1
	.byte	111
	.word	.L475-.L192,.L121-.L192
	.half	1
	.byte	100
	.word	0,0
.L480:
	.word	0,0
.L472:
	.word	0,0
.L484:
	.word	-1,.L192,.L577-.L192,.L464-.L192
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEvadc_syncConvWorkAround')
	.sect	'.debug_loc'
.L193:
	.word	-1,.L194,0,.L578-.L194
	.half	2
	.byte	138,0
	.word	.L578-.L194,.L485-.L194
	.half	2
	.byte	138,8
	.word	.L485-.L194,.L485-.L194
	.half	2
	.byte	138,0
	.word	0,0
.L486:
	.word	-1,.L194,0,.L485-.L194
	.half	1
	.byte	100
	.word	0,0
.L489:
	.word	-1,.L194,.L579-.L194,.L485-.L194
	.half	1
	.byte	82
	.word	0,0
.L488:
	.word	-1,.L194,0,.L485-.L194
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L920:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxEvadc_addToQueue')
	.sect	'.debug_frame'
	.word	24
	.word	.L920,.L140,.L352-.L140
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxEvadc_configExternalMultiplexerMode')
	.sect	'.debug_frame'
	.word	12
	.word	.L920,.L142,.L490-.L142
	.sdecl	'.debug_frame',debug,cluster('IfxEvadc_disableAccess')
	.sect	'.debug_frame'
	.word	12
	.word	.L920,.L144,.L430-.L144
	.sdecl	'.debug_frame',debug,cluster('IfxEvadc_disableQueueSlotExternalTrigger')
	.sect	'.debug_frame'
	.word	24
	.word	.L920,.L150,.L358-.L150
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxEvadc_enableAccess')
	.sect	'.debug_frame'
	.word	12
	.word	.L920,.L152,.L437-.L152
	.sdecl	'.debug_frame',debug,cluster('IfxEvadc_enableQueueSlotExternalTrigger')
	.sect	'.debug_frame'
	.word	24
	.word	.L920,.L154,.L361-.L154
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxEvadc_getAdcDigitalFrequency')
	.sect	'.debug_frame'
	.word	12
	.word	.L920,.L156,.L420-.L156
	.sdecl	'.debug_frame',debug,cluster('IfxEvadc_getAdcModuleFrequency')
	.sect	'.debug_frame'
	.word	12
	.word	.L920,.L158,.L441-.L158
	.sdecl	'.debug_frame',debug,cluster('IfxEvadc_getQueueSlotGatingMode')
	.sect	'.debug_frame'
	.word	24
	.word	.L920,.L160,.L365-.L160
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxEvadc_getQueueSlotGatingSource')
	.sect	'.debug_frame'
	.word	24
	.word	.L920,.L162,.L371-.L162
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxEvadc_getQueueSlotPriority')
	.sect	'.debug_frame'
	.word	24
	.word	.L920,.L164,.L376-.L164
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxEvadc_getQueueSlotStartMode')
	.sect	'.debug_frame'
	.word	24
	.word	.L920,.L166,.L381-.L166
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxEvadc_getQueueSlotTriggerInput')
	.sect	'.debug_frame'
	.word	24
	.word	.L920,.L168,.L386-.L168
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxEvadc_getQueueSlotTriggerMode')
	.sect	'.debug_frame'
	.word	24
	.word	.L920,.L170,.L391-.L170
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxEvadc_getQueueStatus')
	.sect	'.debug_frame'
	.word	24
	.word	.L920,.L172,.L396-.L172
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxEvadc_getResultBasedOnRequestSource')
	.sect	'.debug_frame'
	.word	20
	.word	.L920,.L174,.L340-.L174
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxEvadc_initializeFAdcI')
	.sect	'.debug_frame'
	.word	12
	.word	.L920,.L176,.L443-.L176
	.sdecl	'.debug_frame',debug,cluster('IfxEvadc_isRequestQueueSlotEnabled')
	.sect	'.debug_frame'
	.word	24
	.word	.L920,.L178,.L400-.L178
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxEvadc_resetModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L920,.L180,.L461-.L180
	.sdecl	'.debug_frame',debug,cluster('IfxEvadc_setArbiterPriority')
	.sect	'.debug_frame'
	.word	24
	.word	.L920,.L182,.L424-.L182
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxEvadc_setQueueSlotGatingConfig')
	.sect	'.debug_frame'
	.word	24
	.word	.L920,.L184,.L404-.L184
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxEvadc_setQueueSlotTriggerOperatingConfig')
	.sect	'.debug_frame'
	.word	24
	.word	.L920,.L188,.L412-.L188
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxEvadc_startupCalibration')
	.sect	'.debug_frame'
	.word	12
	.word	.L920,.L192,.L464-.L192
	.sdecl	'.debug_frame',debug,cluster('IfxEvadc_syncConvWorkAround')
	.sect	'.debug_frame'
	.word	44
	.word	.L920,.L194,.L485-.L194
	.byte	8,19,8,21,8,22,8,23,4
	.word	(.L578-.L194)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L485-.L578)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L921:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_8')
	.sect	'.debug_frame'
	.word	24
	.word	.L921,.L146,.L338-.L146
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_7')
	.sect	'.debug_frame'
	.word	24
	.word	.L921,.L148,.L333-.L148
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_6')
	.sect	'.debug_frame'
	.word	24
	.word	.L921,.L186,.L328-.L186
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_5')
	.sect	'.debug_frame'
	.word	24
	.word	.L921,.L190,.L323-.L190
	.byte	8,18,8,19,8,20,8,21,8,22,8,23


	; Module end
