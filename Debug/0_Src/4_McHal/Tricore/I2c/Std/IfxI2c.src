	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\4_McHal\\Tricore\\I2c\\Std\\.IfxI2c.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include\\libc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.src ..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c'

	
$TC162
	.sdecl	'.zrodata.IfxI2c..2.cnt',data,rom
	.sect	'.zrodata.IfxI2c..2.cnt'
	.align	2
.2.cnt:	.type	object
	.size	.2.cnt,4
	.word	-268205536
	.sdecl	'.zrodata.IfxI2c..3.cnt',data,rom
	.sect	'.zrodata.IfxI2c..3.cnt'
	.align	2
.3.cnt:	.type	object
	.size	.3.cnt,4
	.word	-268205520
	.sdecl	'.zrodata.IfxI2c..4.cnt',data,rom
	.sect	'.zrodata.IfxI2c..4.cnt'
	.align	2
.4.cnt:	.type	object
	.size	.4.cnt,4
	.word	-268205532
	.sdecl	'.zrodata.IfxI2c..5.cnt',data,rom
	.sect	'.zrodata.IfxI2c..5.cnt'
	.align	2
.5.cnt:	.type	object
	.size	.5.cnt,4
	.word	-268205516
	.sdecl	'.zrodata.IfxI2c..6.cnt',data,rom
	.sect	'.zrodata.IfxI2c..6.cnt'
	.align	2
.6.cnt:	.type	object
	.size	.6.cnt,4
	.word	-268205528
	.sdecl	'.zrodata.IfxI2c..7.cnt',data,rom
	.sect	'.zrodata.IfxI2c..7.cnt'
	.align	2
.7.cnt:	.type	object
	.size	.7.cnt,4
	.word	-268205512
	.sdecl	'.zrodata.IfxI2c..8.cnt',data,rom
	.sect	'.zrodata.IfxI2c..8.cnt'
	.align	2
.8.cnt:	.type	object
	.size	.8.cnt,4
	.word	65544
	.sdecl	'.zrodata.IfxI2c..9.cnt',data,rom
	.sect	'.zrodata.IfxI2c..9.cnt'
	.align	2
.9.cnt:	.type	object
	.size	.9.cnt,4
	.word	65564
	.sdecl	'.zrodata.IfxI2c..10.cnt',data,rom
	.sect	'.zrodata.IfxI2c..10.cnt'
	.align	2
.10.cnt:	.type	object
	.size	.10.cnt,4
	.word	1220759552
	.sdecl	'.zrodata.IfxI2c..11.cnt',data,rom
	.sect	'.zrodata.IfxI2c..11.cnt'
	.align	2
.11.cnt:	.type	object
	.size	.11.cnt,4
	.word	1157619712
	
	.sdecl	'.text.IfxI2c.IfxI2c_configureAsMaster',code,cluster('IfxI2c_configureAsMaster')
	.sect	'.text.IfxI2c.IfxI2c_configureAsMaster'
	.align	2
	
	.global	IfxI2c_configureAsMaster

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	     1  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	     2   * \file IfxI2c.c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	     3   * \brief I2C  basic functionality
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	     4   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	     5   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	     6   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	     7   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	     8   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	     9   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    10   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    11   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    12   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    13   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    14   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    15   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    16   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    17   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    18   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    19   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    20   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    21   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    22   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    23   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    24   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    25   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    26   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    27   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    28   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    29   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    30   * language processor.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    31   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    32   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    33   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    34   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    35   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    36   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    37   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    38   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    39   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    40   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    41  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    42  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    43  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    44  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    45  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    46  #include "IfxI2c.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    47  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    48  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    49  /*-------------------------Function Implementations---------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    50  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    51  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    52  void IfxI2c_configureAsMaster(Ifx_I2C *i2c)
; Function IfxI2c_configureAsMaster
.L36:
IfxI2c_configureAsMaster:	.type	func

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    16   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    18   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    25   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    32   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    40   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    41   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    42   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    43   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    44   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    45   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    46   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    47   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    48  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    49  #ifndef IFXI2C_H
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    50  #define IFXI2C_H 1
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    51  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    52  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    53  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    54  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    55  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    56  #include "_Impl/IfxI2c_cfg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    57  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    58  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    59  #include "IfxI2c_bf.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    60  #include "_PinMap/IfxI2c_PinMap.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    61  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    62  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    63  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    64  /*-----------------------------------Macros-----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    65  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    66  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    67  /** \brief Master code for high speed mode
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    68   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    69  #define IFXI2C_HIGHSPEED_MASTER_CODE (0xEU)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    70  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    72  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    73  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    74  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    75  /** \addtogroup IfxLld_I2c_Std_enums
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    76   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    77  /** \brief Selects width of address bits (7 or 10 bits)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    78   * Definition in Ifx_I2C.ADDRCFG.B.TBAM
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    79   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    80  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    81  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    82      IfxI2c_AddressMode_7Bit  = 0, /**< \brief sets 7 bit address */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    83      IfxI2c_AddressMode_10Bit = 1  /**< \brief sets 10 bit address */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    84  } IfxI2c_AddressMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    85  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    86  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    87  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    88      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    89      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    90      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    91      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    92  } IfxI2c_BusStatus;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    93  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    94  /** \brief enables DTR interrupt flags
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    95   * Definition in Ifx.I2C.IMSC.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    96   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    97  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    98  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    99      IfxI2c_DtrInterruptSource_lastSingleRequest = IFX_I2C_IMSC_LSREQ_INT_OFF,  /**< \brief last single service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   100      IfxI2c_DtrInterruptSource_singleRequest     = IFX_I2C_IMSC_SREQ_INT_OFF,   /**< \brief single service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   101      IfxI2c_DtrInterruptSource_lastBurstRequest  = IFX_I2C_IMSC_LBREQ_INT_OFF,  /**< \brief last burst service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   102      IfxI2c_DtrInterruptSource_burstRequest      = IFX_I2C_IMSC_BREQ_INT_OFF    /**< \brief burst service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   103  } IfxI2c_DtrInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   104  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   105  /** \brief enable error interrupt request source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   106   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   107   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   108  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   109  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   110      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   111      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   112      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   113      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   114  } IfxI2c_ErrorInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   115  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   116  /** \brief Select speed mode. Standard and Fast or High Speed mode.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   117   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   118  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   119  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   120      IfxI2c_Mode_StandardAndFast = 0,  /**< \brief Sets Standard and Fast speed mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   121      IfxI2c_Mode_HighSpeed       = 1   /**< \brief Sets HighSpeed Mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   122  } IfxI2c_Mode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   123  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   124  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   125  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   126      IfxI2c_PinSelect_a = 0,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   127      IfxI2c_PinSelect_b = 1,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   128      IfxI2c_PinSelect_c = 2,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   129      IfxI2c_PinSelect_d = 3,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   130      IfxI2c_PinSelect_e = 4,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   131      IfxI2c_PinSelect_f = 5,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   132      IfxI2c_PinSelect_g = 6,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   133      IfxI2c_PinSelect_h = 7
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   134  } IfxI2c_PinSelect;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   135  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   136  /** \brief enable protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   137   * Definition in Ifx.I2C.PIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   138   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   139  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   140  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   141      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   142      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   143      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   144      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   145      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   146      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   147      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   148  } IfxI2c_ProtocolInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   149  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   150  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   151   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   152   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   154  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   155      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   156      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   157  } IfxI2c_SleepMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   158  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   159  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   160  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   161  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   162  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   163  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   164  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   165  /** \addtogroup IfxLld_I2c_Std_structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   166   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   167  /** \brief Pin Structure
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   168   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   169  typedef struct
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   170  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   171      IfxI2c_Scl_InOut *scl;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   172      IfxI2c_Sda_InOut *sda;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   173      IfxPort_PadDriver padDriver;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   174  } IfxI2c_Pins;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   175  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   176  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   177  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   178  /** \addtogroup IfxLld_I2c_Std_functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   179   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   180  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   181  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   182  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   183  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   184  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   185  /** \brief Returns if the bus is free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   186   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   187  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   188  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   189  /** \brief clears all DTR interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   190   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   191   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   192   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   193  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   194  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   195  /** \brief clears all Error Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   196   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   197   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   198   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   199  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   200  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   201  /** \brief Clears all Protocol Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   202   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   203   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   204   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   205  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   206  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   207  /** \brief clears the specified source of DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   208   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   209   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   210   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   211   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   212  IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   213  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   214  /** \brief clears the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   215   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   216   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   217   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   218   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   219  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   220  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   221  /** \brief clears the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   222   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   223   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   224   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   225   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   226  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   227  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   228  /** \brief Data request is cleared automatically
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   229   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   230   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   231   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   232  IFX_INLINE void IfxI2c_clearRequestBuffer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   233  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   234  /** \brief disables the specified source of DTR interupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   235   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   236   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   237   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   238   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   239  IFX_INLINE void IfxI2c_disableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   240  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   241  /** \brief disables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   242   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   243   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   244   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   245  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   246  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   247  /** \brief disables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   248   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   249   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   250   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   251   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   252  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   253  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   254  /** \brief disables the Protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   255   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   256   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   257   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   258  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   259  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   260  /** \brief disables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   261   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   262   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   263   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   264   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   265  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   266  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   267  /** \brief enables the specified source of DTR interupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   268   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   269   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   276   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   277   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   278  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   279  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   280  /** \brief enables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   281   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   282   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief enables the protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   289   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief enables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   295   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   296   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   297   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   298  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   299  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   300  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   301   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   302   * \return BusStatus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   303   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   304  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   305  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   306  /** \brief Returns the SRC pointer for I2C DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   307   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   308   * \return SRC pointer for I2C DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   309   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   310  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getDtrSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   311  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   312  /** \brief returns the status of specified DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   313   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   314   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   315   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   316   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   317  IFX_INLINE boolean IfxI2c_getDtrinterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   318  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   319  /** \brief returns the current status of error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   320   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   321   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   322   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   323  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   324  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   325  /** \brief returns the status of the error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   326   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   327   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   328   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   329   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   330  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   331  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   332  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   333   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   334   * \return SRC pointer for I2C Error Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   335   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   336  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   337  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   338  /** \brief returns the current raw status of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   339   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   340   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   341   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   342  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   343  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   344  /** \brief returns the status of  specified protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   345   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   346   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   347   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   348   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   349  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   350  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   351  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   352   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   353   * \return SRC pointer for I2C Protocol Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   354   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   355  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   356  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   357  /** \brief Returns if the Fifo is requesting new data
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   361  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   363   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief Sets width of I2C address to 7 or 10 bits
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   369   * \param mode selects 7 or 10 bits address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   370   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   371   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   372  IFX_INLINE void IfxI2c_setBitAddressMode(Ifx_I2C *i2c, IfxI2c_AddressMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   373  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   374  /** \brief selects the pin
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   375   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   376   * \param pisel pin to be select
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   377   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   378   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   379  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   380  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   381  /** \brief Sets the number of bytes to be received
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   382   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   383   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   384   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   385   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   386  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   387  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   388  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   389   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   390   * \param address device address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   391   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   392   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   393  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   394  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   395  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   396   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   397   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   398   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   399   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   400  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   401  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   402  /** \brief Sets the number of bytes to be tansmitted
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   403   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   404   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   405   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   406   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   407  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   408  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   409  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   410   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   411   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   412   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   413  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   414  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   415  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   416   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   417   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   418   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   419  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   420  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   421  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   422   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   423   * \param packet specifies the byte to be transfer
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   424   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   425   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   426  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   427  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   428  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   429  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   430  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   431  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   432  /** \brief Configures the Module as Master
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   433   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   434   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   435   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   436  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   437  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   438  /** \brief Disables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   439   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   440   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   441   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   442  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   443  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   444  /** \brief enables the DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   445   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   446   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   447   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   448   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   449   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   450  IFX_EXTERN void IfxI2c_enableDtrInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   451  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   452  /** \brief Enables the Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   453   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   454   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   455   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   456   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   457   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   458  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   459  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   460  /** \brief Enables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   461   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   462   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   463   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   464  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   465  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   466  /** \brief Enables the protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   467   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   468   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   469   * \param priority Priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   471   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   472  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   473  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   474  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   475   * \param i2c Resource index of the I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   476   * \return I2C module register address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   477   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   478  IFX_EXTERN Ifx_I2C *IfxI2c_getAddress(IfxI2c_Index i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   479  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   480  /** \brief Returns the real Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   481   * \return Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   482   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   483  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   484  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   485  /** \brief API to get the resource index of the I2C specified.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   486   * \param i2c Pointer to the I2C HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   487   * \return Resource index of the I2C
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   488   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   489  IFX_EXTERN IfxI2c_Index IfxI2c_getIndex(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   490  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   491  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   492   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   493   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   494  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   495  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   496  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   497   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   498   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   499  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   500  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   501  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   502   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   503   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   504  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   505  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   506  /** \brief resets the I2c kernel
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   507   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   508   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   509   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   510  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   511  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   512  /** \brief Calculates the desired baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   513   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   514   * \param baudrate specifies the baud rate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   515   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   516   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   517  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   518  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   519  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   520  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   521  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   522  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   523  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   524  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   525  /** \brief Configure the i2c master to high speed mode baudrate > 400kbits/s
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   526   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   527   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   528   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   529  IFX_EXTERN void IfxI2c_configureHighSpeedMode(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   530  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   531  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   532  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   533  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   534  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   535  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   536  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   537      boolean free = FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   538  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   539      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   540      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   541          free = TRUE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   542      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   543  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   544      return free;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   545  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   546  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   547  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   548  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   549  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   550      i2c->ICR.U = (1 << IFX_I2C_ICR_LSREQ_INT_OFF) | (1 << IFX_I2C_ICR_SREQ_INT_OFF) | (1 << IFX_I2C_ICR_LBREQ_INT_OFF) | (1 << IFX_I2C_ICR_BREQ_INT_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   551  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   552  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   553  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   554  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   555  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   556      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   557  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   558  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   559  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   560  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   561  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   562      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   563  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   565  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   566  IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   567  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   568      i2c->ICR.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   569  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   570  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   571  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   572  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   573  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   574      i2c->ERRIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   575  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   576  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   577  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   578  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   579  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   580      i2c->PIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   581  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   583  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   584  IFX_INLINE void IfxI2c_clearRequestBuffer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   585  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   586      i2c->FIFOCFG.B.CRBC = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   587  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   589  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   590  IFX_INLINE void IfxI2c_disableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   591  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   592      i2c->IMSC.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   593  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   594  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   595  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   596  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   597  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   598      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   599  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   601  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   602  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   603  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   604      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   605  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   607  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   608  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   609  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   610      i2c->IMSC.B.I2C_P_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   611  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   613  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   614  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   615  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   616      i2c->PIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   617  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   619  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   620  IFX_INLINE void IfxI2c_enableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   621  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   622      i2c->IMSC.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   623  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   625  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   626  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   627  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   628      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   629  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   631  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   632  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   633  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   634      i2c->ERRIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   635  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   637  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   638  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   639  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   640      i2c->IMSC.B.I2C_P_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   641  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   643  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   644  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   645  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   646      i2c->PIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   647  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   649  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   650  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   651  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   652      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   653  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   655  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   656  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getDtrSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   657  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   658      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   659      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   660          return &MODULE_SRC.I2C.I2C[0].DTR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   661      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   662      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   663      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   664          return &MODULE_SRC.I2C.I2C[1].DTR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   665      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   666  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   667  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   668  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   669  IFX_INLINE boolean IfxI2c_getDtrinterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   670  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   671      return (i2c->RIS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   672  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   673  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   674  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   675  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   676  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   677      return i2c->RIS.B.I2C_ERR_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   678  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   679  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   680  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   681  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   682  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   683      return (i2c->ERRIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   684  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   685  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   686  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   687  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   688  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   689      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   690      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   691          return &MODULE_SRC.I2C.I2C[0].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   692      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   693      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   694      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   695          return &MODULE_SRC.I2C.I2C[1].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   696      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   697  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   698  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   699  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   700  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   701  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   702      return i2c->RIS.B.I2C_P_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   703  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   704  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   705  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   706  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   707  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   708      return (i2c->PIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   709  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   710  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   711  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   712  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   713  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   714      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   715      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   716          return &MODULE_SRC.I2C.I2C[0].P;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   717      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   718      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   719      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   720          return &MODULE_SRC.I2C.I2C[1].P;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   721      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   722  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   723  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   724  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   725  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   726  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   727      return i2c->RIS.U & 0x0F ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   728  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   729  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   730  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   731  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   732  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   733      i2c->RUNCTRL.U = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   734  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   735  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   736  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   737  IFX_INLINE void IfxI2c_setBitAddressMode(Ifx_I2C *i2c, IfxI2c_AddressMode mode)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   738  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   739      i2c->ADDRCFG.B.TBAM = mode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   740  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   741  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   742  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   743  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   744  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   745      i2c->GPCTL.B.PISEL = pisel;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   746  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   747  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   748  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   749  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   750  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   751      i2c->MRPSCTRL.B.MRPS = size;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   752  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   753  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   754  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   755  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   756  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   757      i2c->ADDRCFG.B.ADR = address;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   758  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   759  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   760  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   761  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   762  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   763      i2c->CLC1.B.EDIS = mode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   764  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   765  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   766  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   767  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   768  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   769      i2c->TPSCTRL.B.TPS = size;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   770  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   771  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   772  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   773  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   774  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   775      i2c->RUNCTRL.U = 0;
	mov	d15,#0
	st.w	[a4]16,d15
.L191:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    53  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    54      // enter config Mode
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    55      IfxI2c_stop(i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    56  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    57      i2c->ADDRCFG.U      = 0;
	st.w	[a4]32,d15
.L430:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    58      i2c->ADDRCFG.B.MNS  = 1; // master mode
	ld.bu	d0,[a4]34
.L431:
	or	d0,d0,#8
	fcall	.cocofun_16
.L432:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    59      i2c->ADDRCFG.B.SONA = 0; // don't release the bus on NACK
	insert	d0,d0,#0,#4,#1
	fcall	.cocofun_16
.L433:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    60      i2c->ADDRCFG.B.SOPE = 0; // after transfer go into master restart state
	insert	d0,d0,#0,#5,#1
	fcall	.cocofun_16
.L434:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    61      i2c->ADDRCFG.B.TBAM = 0; // 7 bit address mode
	insert	d0,d0,#0,#0,#1
	st.b	[a4]34,d0
.L435:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    62      i2c->FIFOCFG.U      = 0;
	st.w	[a4]40,d15
.L436:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    63      i2c->FIFOCFG.B.TXFC = 1; // FIFO as flow controller
	ld.bu	d15,[a4]42
.L437:
	or	d15,#2
	st.b	[a4]42,d15
.L438:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    64      i2c->FIFOCFG.B.RXFC = 1; // FIFO as flow controller
	ld.bu	d15,[a4]42
.L439:
	or	d15,#1
	fcall	.cocofun_12
.L440:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    65      i2c->FIFOCFG.B.TXBS = 0; // Burst size 1 word
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    66      i2c->FIFOCFG.B.RXBS = 0; // Burst size 1 word
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    67      i2c->FIFOCFG.B.TXFA = 0; // fifo is byte aligned
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    68      i2c->FIFOCFG.B.RXFA = 0; // fifo is byte aligned
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    69  }
	ret
.L186:
	
__IfxI2c_configureAsMaster_function_end:
	.size	IfxI2c_configureAsMaster,__IfxI2c_configureAsMaster_function_end-IfxI2c_configureAsMaster
.L85:
	; End of function
	
	.sdecl	'.text.IfxI2c..cocofun_16',code,cluster('.cocofun_16')
	.sect	'.text.IfxI2c..cocofun_16'
	.align	2
; Function .cocofun_16
.L38:
.cocofun_16:	.type	func
; Function body .cocofun_16, coco_iter:0
	st.b	[a4]34,d0
.L368:
	ld.bu	d0,[a4]34
.L633:
	fret
.L180:
	; End of function
	.sdecl	'.text.IfxI2c..cocofun_12',code,cluster('.cocofun_12')
	.sect	'.text.IfxI2c..cocofun_12'
	.align	2
; Function .cocofun_12
.L40:
.cocofun_12:	.type	func
; Function body .cocofun_12, coco_iter:0
	st.b	[a4]42,d15
.L602:
	ld.bu	d15,[a4]40
.L603:
	insert	d15,d15,#0,#4,#2
	st.b	[a4]40,d15
.L604:
	ld.bu	d15,[a4]40
.L605:
	insert	d15,d15,#0,#0,#2
	st.b	[a4]40,d15
.L606:
	ld.bu	d15,[a4]41
.L607:
	insert	d15,d15,#0,#4,#2
	st.b	[a4]41,d15
.L608:
	ld.bu	d15,[a4]41
.L609:
	insert	d15,d15,#0,#0,#2
	st.b	[a4]41,d15
.L369:
	fret
.L160:
	; End of function
	.sdecl	'.text.IfxI2c.IfxI2c_disableModule',code,cluster('IfxI2c_disableModule')
	.sect	'.text.IfxI2c.IfxI2c_disableModule'
	.align	2
	
	.global	IfxI2c_disableModule

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    70  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    71  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    72  void IfxI2c_disableModule(Ifx_I2C *i2c)
; Function IfxI2c_disableModule
.L42:
IfxI2c_disableModule:	.type	func
	mov.aa	a15,a4
.L371:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    73  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    74      uint16 pwd = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L370:
	mov	d8,d2
.L373:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    75  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    76      IfxScuWdt_clearCpuEndinit(pwd);
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L372:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    77  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    78      i2c->CLC.B.DISR = 1;
	fcall	.cocofun_17
.L375:
	ld.bu	d15,[+a3]0
.L445:
	fcall	.cocofun_14
	st.b	[+a3]0,d15
.L446:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    79  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    80      while (i2c->CLC.B.DISS == 0)
	fcall	.cocofun_17
	mov.aa	a15,a3
.L2:
	ld.bu	d15,[a15]
.L447:
	jz.t	d15:1,.L2
.L448:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    81      {}
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    82  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    83      IfxScuWdt_setCpuEndinit(pwd);
	mov	d4,d8
.L376:
	j	IfxScuWdt_setCpuEndinit
.L195:
	
__IfxI2c_disableModule_function_end:
	.size	IfxI2c_disableModule,__IfxI2c_disableModule_function_end-IfxI2c_disableModule
.L90:
	; End of function
	
	.sdecl	'.text.IfxI2c..cocofun_17',code,cluster('.cocofun_17')
	.sect	'.text.IfxI2c..cocofun_17'
	.align	2
; Function .cocofun_17
.L44:
.cocofun_17:	.type	func
; Function body .cocofun_17, coco_iter:1
	movh.a	a3,#1
	add.a	a3,a15
.L638:
	fret
.L185:
	; End of function
	.sdecl	'.text.IfxI2c..cocofun_14',code,cluster('.cocofun_14')
	.sect	'.text.IfxI2c..cocofun_14'
	.align	2
; Function .cocofun_14
.L46:
.cocofun_14:	.type	func
; Function body .cocofun_14, coco_iter:0
	or	d15,#1
	fcall	.cocofun_17
.L374:
	fret
.L170:
	; End of function
	.sdecl	'.text.IfxI2c.IfxI2c_enableDtrInterrupt',code,cluster('IfxI2c_enableDtrInterrupt')
	.sect	'.text.IfxI2c.IfxI2c_enableDtrInterrupt'
	.align	2
	
	.global	IfxI2c_enableDtrInterrupt

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    84  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    85  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    86  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    87  void IfxI2c_enableDtrInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority)
; Function IfxI2c_enableDtrInterrupt
.L48:
IfxI2c_enableDtrInterrupt:	.type	func

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    16   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    18   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    25   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    32   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    40   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    41   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    42   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    43   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    44   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    45   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    46   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    47   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    48  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    49  #ifndef IFXI2C_H
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    50  #define IFXI2C_H 1
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    51  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    52  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    53  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    54  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    55  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    56  #include "_Impl/IfxI2c_cfg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    57  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    58  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    59  #include "IfxI2c_bf.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    60  #include "_PinMap/IfxI2c_PinMap.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    61  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    62  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    63  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    64  /*-----------------------------------Macros-----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    65  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    66  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    67  /** \brief Master code for high speed mode
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    68   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    69  #define IFXI2C_HIGHSPEED_MASTER_CODE (0xEU)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    70  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    72  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    73  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    74  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    75  /** \addtogroup IfxLld_I2c_Std_enums
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    76   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    77  /** \brief Selects width of address bits (7 or 10 bits)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    78   * Definition in Ifx_I2C.ADDRCFG.B.TBAM
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    79   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    80  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    81  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    82      IfxI2c_AddressMode_7Bit  = 0, /**< \brief sets 7 bit address */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    83      IfxI2c_AddressMode_10Bit = 1  /**< \brief sets 10 bit address */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    84  } IfxI2c_AddressMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    85  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    86  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    87  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    88      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    89      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    90      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    91      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    92  } IfxI2c_BusStatus;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    93  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    94  /** \brief enables DTR interrupt flags
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    95   * Definition in Ifx.I2C.IMSC.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    96   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    97  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    98  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    99      IfxI2c_DtrInterruptSource_lastSingleRequest = IFX_I2C_IMSC_LSREQ_INT_OFF,  /**< \brief last single service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   100      IfxI2c_DtrInterruptSource_singleRequest     = IFX_I2C_IMSC_SREQ_INT_OFF,   /**< \brief single service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   101      IfxI2c_DtrInterruptSource_lastBurstRequest  = IFX_I2C_IMSC_LBREQ_INT_OFF,  /**< \brief last burst service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   102      IfxI2c_DtrInterruptSource_burstRequest      = IFX_I2C_IMSC_BREQ_INT_OFF    /**< \brief burst service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   103  } IfxI2c_DtrInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   104  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   105  /** \brief enable error interrupt request source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   106   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   107   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   108  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   109  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   110      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   111      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   112      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   113      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   114  } IfxI2c_ErrorInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   115  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   116  /** \brief Select speed mode. Standard and Fast or High Speed mode.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   117   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   118  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   119  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   120      IfxI2c_Mode_StandardAndFast = 0,  /**< \brief Sets Standard and Fast speed mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   121      IfxI2c_Mode_HighSpeed       = 1   /**< \brief Sets HighSpeed Mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   122  } IfxI2c_Mode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   123  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   124  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   125  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   126      IfxI2c_PinSelect_a = 0,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   127      IfxI2c_PinSelect_b = 1,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   128      IfxI2c_PinSelect_c = 2,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   129      IfxI2c_PinSelect_d = 3,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   130      IfxI2c_PinSelect_e = 4,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   131      IfxI2c_PinSelect_f = 5,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   132      IfxI2c_PinSelect_g = 6,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   133      IfxI2c_PinSelect_h = 7
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   134  } IfxI2c_PinSelect;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   135  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   136  /** \brief enable protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   137   * Definition in Ifx.I2C.PIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   138   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   139  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   140  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   141      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   142      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   143      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   144      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   145      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   146      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   147      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   148  } IfxI2c_ProtocolInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   149  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   150  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   151   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   152   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   154  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   155      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   156      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   157  } IfxI2c_SleepMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   158  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   159  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   160  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   161  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   162  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   163  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   164  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   165  /** \addtogroup IfxLld_I2c_Std_structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   166   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   167  /** \brief Pin Structure
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   168   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   169  typedef struct
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   170  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   171      IfxI2c_Scl_InOut *scl;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   172      IfxI2c_Sda_InOut *sda;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   173      IfxPort_PadDriver padDriver;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   174  } IfxI2c_Pins;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   175  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   176  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   177  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   178  /** \addtogroup IfxLld_I2c_Std_functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   179   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   180  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   181  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   182  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   183  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   184  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   185  /** \brief Returns if the bus is free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   186   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   187  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   188  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   189  /** \brief clears all DTR interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   190   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   191   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   192   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   193  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   194  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   195  /** \brief clears all Error Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   196   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   197   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   198   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   199  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   200  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   201  /** \brief Clears all Protocol Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   202   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   203   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   204   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   205  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   206  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   207  /** \brief clears the specified source of DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   208   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   209   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   210   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   211   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   212  IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   213  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   214  /** \brief clears the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   215   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   216   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   217   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   218   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   219  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   220  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   221  /** \brief clears the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   222   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   223   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   224   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   225   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   226  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   227  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   228  /** \brief Data request is cleared automatically
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   229   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   230   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   231   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   232  IFX_INLINE void IfxI2c_clearRequestBuffer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   233  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   234  /** \brief disables the specified source of DTR interupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   235   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   236   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   237   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   238   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   239  IFX_INLINE void IfxI2c_disableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   240  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   241  /** \brief disables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   242   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   243   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   244   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   245  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   246  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   247  /** \brief disables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   248   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   249   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   250   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   251   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   252  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   253  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   254  /** \brief disables the Protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   255   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   256   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   257   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   258  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   259  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   260  /** \brief disables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   261   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   262   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   263   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   264   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   265  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   266  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   267  /** \brief enables the specified source of DTR interupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   268   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   269   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   276   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   277   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   278  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   279  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   280  /** \brief enables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   281   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   282   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief enables the protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   289   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief enables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   295   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   296   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   297   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   298  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   299  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   300  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   301   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   302   * \return BusStatus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   303   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   304  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   305  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   306  /** \brief Returns the SRC pointer for I2C DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   307   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   308   * \return SRC pointer for I2C DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   309   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   310  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getDtrSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   311  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   312  /** \brief returns the status of specified DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   313   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   314   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   315   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   316   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   317  IFX_INLINE boolean IfxI2c_getDtrinterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   318  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   319  /** \brief returns the current status of error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   320   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   321   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   322   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   323  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   324  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   325  /** \brief returns the status of the error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   326   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   327   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   328   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   329   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   330  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   331  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   332  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   333   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   334   * \return SRC pointer for I2C Error Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   335   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   336  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   337  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   338  /** \brief returns the current raw status of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   339   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   340   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   341   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   342  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   343  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   344  /** \brief returns the status of  specified protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   345   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   346   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   347   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   348   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   349  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   350  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   351  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   352   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   353   * \return SRC pointer for I2C Protocol Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   354   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   355  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   356  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   357  /** \brief Returns if the Fifo is requesting new data
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   361  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   363   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief Sets width of I2C address to 7 or 10 bits
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   369   * \param mode selects 7 or 10 bits address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   370   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   371   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   372  IFX_INLINE void IfxI2c_setBitAddressMode(Ifx_I2C *i2c, IfxI2c_AddressMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   373  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   374  /** \brief selects the pin
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   375   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   376   * \param pisel pin to be select
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   377   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   378   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   379  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   380  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   381  /** \brief Sets the number of bytes to be received
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   382   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   383   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   384   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   385   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   386  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   387  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   388  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   389   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   390   * \param address device address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   391   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   392   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   393  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   394  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   395  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   396   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   397   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   398   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   399   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   400  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   401  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   402  /** \brief Sets the number of bytes to be tansmitted
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   403   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   404   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   405   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   406   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   407  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   408  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   409  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   410   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   411   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   412   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   413  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   414  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   415  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   416   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   417   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   418   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   419  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   420  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   421  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   422   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   423   * \param packet specifies the byte to be transfer
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   424   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   425   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   426  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   427  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   428  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   429  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   430  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   431  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   432  /** \brief Configures the Module as Master
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   433   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   434   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   435   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   436  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   437  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   438  /** \brief Disables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   439   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   440   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   441   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   442  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   443  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   444  /** \brief enables the DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   445   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   446   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   447   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   448   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   449   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   450  IFX_EXTERN void IfxI2c_enableDtrInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   451  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   452  /** \brief Enables the Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   453   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   454   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   455   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   456   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   457   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   458  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   459  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   460  /** \brief Enables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   461   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   462   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   463   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   464  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   465  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   466  /** \brief Enables the protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   467   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   468   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   469   * \param priority Priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   471   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   472  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   473  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   474  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   475   * \param i2c Resource index of the I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   476   * \return I2C module register address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   477   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   478  IFX_EXTERN Ifx_I2C *IfxI2c_getAddress(IfxI2c_Index i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   479  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   480  /** \brief Returns the real Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   481   * \return Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   482   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   483  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   484  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   485  /** \brief API to get the resource index of the I2C specified.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   486   * \param i2c Pointer to the I2C HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   487   * \return Resource index of the I2C
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   488   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   489  IFX_EXTERN IfxI2c_Index IfxI2c_getIndex(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   490  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   491  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   492   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   493   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   494  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   495  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   496  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   497   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   498   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   499  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   500  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   501  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   502   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   503   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   504  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   505  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   506  /** \brief resets the I2c kernel
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   507   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   508   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   509   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   510  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   511  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   512  /** \brief Calculates the desired baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   513   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   514   * \param baudrate specifies the baud rate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   515   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   516   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   517  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   518  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   519  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   520  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   521  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   522  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   523  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   524  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   525  /** \brief Configure the i2c master to high speed mode baudrate > 400kbits/s
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   526   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   527   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   528   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   529  IFX_EXTERN void IfxI2c_configureHighSpeedMode(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   530  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   531  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   532  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   533  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   534  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   535  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   536  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   537      boolean free = FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   538  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   539      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   540      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   541          free = TRUE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   542      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   543  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   544      return free;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   545  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   546  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   547  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   548  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   549  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   550      i2c->ICR.U = (1 << IFX_I2C_ICR_LSREQ_INT_OFF) | (1 << IFX_I2C_ICR_SREQ_INT_OFF) | (1 << IFX_I2C_ICR_LBREQ_INT_OFF) | (1 << IFX_I2C_ICR_BREQ_INT_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   551  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   552  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   553  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   554  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   555  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   556      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   557  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   558  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   559  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   560  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   561  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   562      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   563  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   565  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   566  IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   567  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   568      i2c->ICR.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   569  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   570  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   571  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   572  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   573  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   574      i2c->ERRIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   575  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   576  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   577  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   578  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   579  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   580      i2c->PIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   581  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   583  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   584  IFX_INLINE void IfxI2c_clearRequestBuffer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   585  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   586      i2c->FIFOCFG.B.CRBC = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   587  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   589  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   590  IFX_INLINE void IfxI2c_disableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   591  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   592      i2c->IMSC.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   593  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   594  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   595  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   596  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   597  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   598      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   599  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   601  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   602  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   603  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   604      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   605  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   607  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   608  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   609  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   610      i2c->IMSC.B.I2C_P_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   611  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   613  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   614  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   615  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   616      i2c->PIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   617  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   619  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   620  IFX_INLINE void IfxI2c_enableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   621  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   622      i2c->IMSC.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   623  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   625  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   626  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   627  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   628      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   629  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   631  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   632  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   633  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   634      i2c->ERRIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   635  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   637  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   638  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   639  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   640      i2c->IMSC.B.I2C_P_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   641  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   643  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   644  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   645  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   646      i2c->PIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   647  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   649  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   650  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   651  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   652      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   653  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   655  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   656  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getDtrSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   657  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   658      if (i2c == &MODULE_I2C0)
	movh.a	a15,#61452
.L453:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   658      if (i2c == &MODULE_I2C0)      (inlined)
	jne.a	a4,a15,.L3
.L454:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   659      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   660          return &MODULE_SRC.I2C.I2C[0].DTR;
	ld.w	d15,.2.cnt
.L455:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   660          return &MODULE_SRC.I2C.I2C[0].DTR;      (inlined)
	j	.L4

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   658      if (i2c == &MODULE_I2C0)      (inlined)
.L3:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   661      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   662      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   663      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   664          return &MODULE_SRC.I2C.I2C[1].DTR;
	ld.w	d15,.3.cnt

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   666  }      (inlined)
.L4:
	fcall	.cocofun_13
.L206:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    88  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    89      volatile Ifx_SRC_SRCR *src;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    90      src = IfxI2c_getDtrSrcPointer(i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    91      IfxSrc_init(src, typeOfService, priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    92      IfxSrc_enable(src);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    93  }
	ret
.L200:
	
__IfxI2c_enableDtrInterrupt_function_end:
	.size	IfxI2c_enableDtrInterrupt,__IfxI2c_enableDtrInterrupt_function_end-IfxI2c_enableDtrInterrupt
.L95:
	; End of function
	
	.sdecl	'.text.IfxI2c..cocofun_13',code,cluster('.cocofun_13')
	.sect	'.text.IfxI2c..cocofun_13'
	.align	2
; Function .cocofun_13
.L50:
.cocofun_13:	.type	func
; Function body .cocofun_13, coco_iter:0

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    16   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    18   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    25   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    32   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    40   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    41   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    42   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    43   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    44   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    45   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    46   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    47   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    48  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    49  #ifndef IFXI2C_H
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    50  #define IFXI2C_H 1
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    51  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    52  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    53  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    54  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    55  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    56  #include "_Impl/IfxI2c_cfg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    57  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    58  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    59  #include "IfxI2c_bf.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    60  #include "_PinMap/IfxI2c_PinMap.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    61  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    62  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    63  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    64  /*-----------------------------------Macros-----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    65  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    66  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    67  /** \brief Master code for high speed mode
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    68   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    69  #define IFXI2C_HIGHSPEED_MASTER_CODE (0xEU)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    70  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    72  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    73  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    74  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    75  /** \addtogroup IfxLld_I2c_Std_enums
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    76   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    77  /** \brief Selects width of address bits (7 or 10 bits)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    78   * Definition in Ifx_I2C.ADDRCFG.B.TBAM
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    79   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    80  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    81  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    82      IfxI2c_AddressMode_7Bit  = 0, /**< \brief sets 7 bit address */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    83      IfxI2c_AddressMode_10Bit = 1  /**< \brief sets 10 bit address */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    84  } IfxI2c_AddressMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    85  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    86  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    87  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    88      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    89      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    90      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    91      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    92  } IfxI2c_BusStatus;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    93  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    94  /** \brief enables DTR interrupt flags
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    95   * Definition in Ifx.I2C.IMSC.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    96   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    97  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    98  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    99      IfxI2c_DtrInterruptSource_lastSingleRequest = IFX_I2C_IMSC_LSREQ_INT_OFF,  /**< \brief last single service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   100      IfxI2c_DtrInterruptSource_singleRequest     = IFX_I2C_IMSC_SREQ_INT_OFF,   /**< \brief single service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   101      IfxI2c_DtrInterruptSource_lastBurstRequest  = IFX_I2C_IMSC_LBREQ_INT_OFF,  /**< \brief last burst service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   102      IfxI2c_DtrInterruptSource_burstRequest      = IFX_I2C_IMSC_BREQ_INT_OFF    /**< \brief burst service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   103  } IfxI2c_DtrInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   104  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   105  /** \brief enable error interrupt request source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   106   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   107   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   108  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   109  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   110      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   111      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   112      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   113      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   114  } IfxI2c_ErrorInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   115  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   116  /** \brief Select speed mode. Standard and Fast or High Speed mode.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   117   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   118  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   119  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   120      IfxI2c_Mode_StandardAndFast = 0,  /**< \brief Sets Standard and Fast speed mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   121      IfxI2c_Mode_HighSpeed       = 1   /**< \brief Sets HighSpeed Mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   122  } IfxI2c_Mode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   123  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   124  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   125  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   126      IfxI2c_PinSelect_a = 0,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   127      IfxI2c_PinSelect_b = 1,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   128      IfxI2c_PinSelect_c = 2,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   129      IfxI2c_PinSelect_d = 3,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   130      IfxI2c_PinSelect_e = 4,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   131      IfxI2c_PinSelect_f = 5,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   132      IfxI2c_PinSelect_g = 6,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   133      IfxI2c_PinSelect_h = 7
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   134  } IfxI2c_PinSelect;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   135  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   136  /** \brief enable protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   137   * Definition in Ifx.I2C.PIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   138   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   139  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   140  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   141      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   142      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   143      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   144      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   145      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   146      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   147      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   148  } IfxI2c_ProtocolInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   149  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   150  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   151   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   152   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   154  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   155      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   156      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   157  } IfxI2c_SleepMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   158  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   159  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   160  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   161  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   162  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   163  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   164  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   165  /** \addtogroup IfxLld_I2c_Std_structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   166   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   167  /** \brief Pin Structure
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   168   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   169  typedef struct
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   170  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   171      IfxI2c_Scl_InOut *scl;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   172      IfxI2c_Sda_InOut *sda;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   173      IfxPort_PadDriver padDriver;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   174  } IfxI2c_Pins;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   175  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   176  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   177  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   178  /** \addtogroup IfxLld_I2c_Std_functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   179   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   180  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   181  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   182  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   183  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   184  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   185  /** \brief Returns if the bus is free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   186   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   187  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   188  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   189  /** \brief clears all DTR interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   190   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   191   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   192   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   193  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   194  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   195  /** \brief clears all Error Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   196   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   197   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   198   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   199  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   200  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   201  /** \brief Clears all Protocol Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   202   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   203   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   204   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   205  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   206  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   207  /** \brief clears the specified source of DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   208   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   209   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   210   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   211   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   212  IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   213  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   214  /** \brief clears the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   215   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   216   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   217   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   218   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   219  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   220  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   221  /** \brief clears the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   222   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   223   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   224   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   225   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   226  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   227  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   228  /** \brief Data request is cleared automatically
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   229   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   230   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   231   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   232  IFX_INLINE void IfxI2c_clearRequestBuffer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   233  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   234  /** \brief disables the specified source of DTR interupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   235   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   236   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   237   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   238   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   239  IFX_INLINE void IfxI2c_disableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   240  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   241  /** \brief disables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   242   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   243   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   244   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   245  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   246  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   247  /** \brief disables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   248   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   249   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   250   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   251   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   252  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   253  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   254  /** \brief disables the Protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   255   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   256   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   257   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   258  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   259  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   260  /** \brief disables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   261   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   262   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   263   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   264   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   265  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   266  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   267  /** \brief enables the specified source of DTR interupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   268   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   269   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   276   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   277   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   278  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   279  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   280  /** \brief enables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   281   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   282   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief enables the protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   289   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief enables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   295   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   296   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   297   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   298  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   299  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   300  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   301   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   302   * \return BusStatus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   303   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   304  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   305  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   306  /** \brief Returns the SRC pointer for I2C DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   307   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   308   * \return SRC pointer for I2C DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   309   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   310  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getDtrSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   311  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   312  /** \brief returns the status of specified DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   313   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   314   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   315   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   316   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   317  IFX_INLINE boolean IfxI2c_getDtrinterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   318  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   319  /** \brief returns the current status of error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   320   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   321   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   322   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   323  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   324  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   325  /** \brief returns the status of the error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   326   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   327   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   328   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   329   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   330  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   331  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   332  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   333   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   334   * \return SRC pointer for I2C Error Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   335   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   336  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   337  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   338  /** \brief returns the current raw status of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   339   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   340   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   341   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   342  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   343  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   344  /** \brief returns the status of  specified protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   345   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   346   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   347   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   348   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   349  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   350  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   351  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   352   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   353   * \return SRC pointer for I2C Protocol Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   354   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   355  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   356  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   357  /** \brief Returns if the Fifo is requesting new data
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   361  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   363   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief Sets width of I2C address to 7 or 10 bits
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   369   * \param mode selects 7 or 10 bits address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   370   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   371   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   372  IFX_INLINE void IfxI2c_setBitAddressMode(Ifx_I2C *i2c, IfxI2c_AddressMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   373  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   374  /** \brief selects the pin
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   375   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   376   * \param pisel pin to be select
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   377   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   378   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   379  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   380  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   381  /** \brief Sets the number of bytes to be received
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   382   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   383   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   384   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   385   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   386  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   387  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   388  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   389   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   390   * \param address device address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   391   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   392   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   393  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   394  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   395  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   396   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   397   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   398   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   399   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   400  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   401  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   402  /** \brief Sets the number of bytes to be tansmitted
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   403   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   404   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   405   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   406   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   407  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   408  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   409  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   410   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   411   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   412   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   413  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   414  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   415  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   416   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   417   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   418   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   419  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   420  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   421  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   422   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   423   * \param packet specifies the byte to be transfer
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   424   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   425   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   426  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   427  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   428  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   429  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   430  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   431  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   432  /** \brief Configures the Module as Master
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   433   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   434   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   435   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   436  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   437  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   438  /** \brief Disables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   439   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   440   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   441   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   442  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   443  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   444  /** \brief enables the DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   445   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   446   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   447   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   448   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   449   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   450  IFX_EXTERN void IfxI2c_enableDtrInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   451  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   452  /** \brief Enables the Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   453   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   454   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   455   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   456   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   457   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   458  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   459  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   460  /** \brief Enables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   461   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   462   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   463   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   464  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   465  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   466  /** \brief Enables the protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   467   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   468   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   469   * \param priority Priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   471   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   472  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   473  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   474  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   475   * \param i2c Resource index of the I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   476   * \return I2C module register address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   477   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   478  IFX_EXTERN Ifx_I2C *IfxI2c_getAddress(IfxI2c_Index i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   479  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   480  /** \brief Returns the real Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   481   * \return Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   482   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   483  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   484  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   485  /** \brief API to get the resource index of the I2C specified.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   486   * \param i2c Pointer to the I2C HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   487   * \return Resource index of the I2C
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   488   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   489  IFX_EXTERN IfxI2c_Index IfxI2c_getIndex(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   490  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   491  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   492   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   493   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   494  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   495  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   496  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   497   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   498   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   499  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   500  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   501  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   502   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   503   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   504  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   505  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   506  /** \brief resets the I2c kernel
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   507   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   508   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   509   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   510  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   511  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   512  /** \brief Calculates the desired baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   513   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   514   * \param baudrate specifies the baud rate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   515   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   516   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   517  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   518  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   519  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   520  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   521  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   522  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   523  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   524  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   525  /** \brief Configure the i2c master to high speed mode baudrate > 400kbits/s
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   526   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   527   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   528   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   529  IFX_EXTERN void IfxI2c_configureHighSpeedMode(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   530  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   531  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   532  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   533  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   534  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   535  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   536  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   537      boolean free = FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   538  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   539      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   540      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   541          free = TRUE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   542      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   543  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   544      return free;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   545  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   546  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   547  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   548  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   549  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   550      i2c->ICR.U = (1 << IFX_I2C_ICR_LSREQ_INT_OFF) | (1 << IFX_I2C_ICR_SREQ_INT_OFF) | (1 << IFX_I2C_ICR_LBREQ_INT_OFF) | (1 << IFX_I2C_ICR_BREQ_INT_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   551  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   552  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   553  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   554  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   555  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   556      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   557  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   558  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   559  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   560  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   561  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   562      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   563  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   565  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   566  IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   567  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   568      i2c->ICR.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   569  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   570  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   571  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   572  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   573  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   574      i2c->ERRIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   575  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   576  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   577  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   578  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   579  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   580      i2c->PIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   581  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   583  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   584  IFX_INLINE void IfxI2c_clearRequestBuffer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   585  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   586      i2c->FIFOCFG.B.CRBC = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   587  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   589  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   590  IFX_INLINE void IfxI2c_disableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   591  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   592      i2c->IMSC.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   593  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   594  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   595  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   596  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   597  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   598      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   599  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   601  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   602  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   603  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   604      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   605  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   607  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   608  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   609  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   610      i2c->IMSC.B.I2C_P_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   611  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   613  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   614  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   615  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   616      i2c->PIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   617  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   619  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   620  IFX_INLINE void IfxI2c_enableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   621  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   622      i2c->IMSC.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   623  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   625  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   626  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   627  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   628      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   629  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   631  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   632  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   633  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   634      i2c->ERRIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   635  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   637  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   638  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   639  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   640      i2c->IMSC.B.I2C_P_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   641  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   643  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   644  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   645  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   646      i2c->PIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   647  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   649  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   650  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   651  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   652      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   653  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   655  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   656  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getDtrSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   657  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   658      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   659      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   660          return &MODULE_SRC.I2C.I2C[0].DTR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   661      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   662      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   663      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   664          return &MODULE_SRC.I2C.I2C[1].DTR;
	mov.a	a15,d15
.L614:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     2   * \file IfxSrc.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     3   * \brief SRC  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     4   * \ingroup IfxLld_Src
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     7   * \copyright Copyright (c) 2016 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    41   * \defgroup IfxLld_Src SRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    42   * \addtogroup IfxLld_Src
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    43   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    44   * \defgroup IfxLld_Src_Usage How to use Service Request Mechanism?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    45   * \addtogroup IfxLld_Src_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    46   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    48   * For Aurix controller peripherals that can generate service requests is connected to one
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    49   * or more Service Request Nodes (SRNs) in the central Interrupt Router(IR) module. Refer to Controller User Manual for more details\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    51   * IfxSrc driver provides the APIs to configure and control service requests. Refer \ref IfxLld_Src_Usage for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    52   * details of these APIs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    53   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    54   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    55   * \section Ifx_Src_UsageInit Initialize the Service Request Node
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    56   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    57   * Service request node is initialized to configure the following,\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    58   * 1) Route the interrupt trigger to service provider, which are:\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    59   *  __a. One of the available CPUs or\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    60   *  __b. DMA controller\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    61   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    62   * 2) Priority of CPU Interrupt or DMA Trigger.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    63   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    64   * For Interrupt or DMA to be correctly triggered, following steps are to be done in the user code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    65   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    66   * \subsection Ifx_Src_UsageInitStep1 Step1: Configure the Node
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    67   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    68   * User must configure the service request node in the application / driver files.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    69   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    70   * \subsection Ifx_Src_UsageInitStep2 Step2: Enable the Trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    71   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    72   * Enable the service request node to connect the trigger event from the hardware to service provider.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    73   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    74   * Example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    75   * Following example show the configuration for STM0 Service request 0 trigger configured to trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    76   * CPU1 with the priority specified by IFX_INTPRIO_STM0 (from the example at IfxCpu_Irq)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    77   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    78   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    79   * //file: myApplication.c
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    80   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    81   * #include "Ifx_IntPrioDef.h" // to get the priority numbers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    82   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    83   * void myDriverInitFunction(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    84   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    85   *    // driver init code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    86   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    87   *    // Step1: Call the function to route the trigger from for SRC_STM0_SR0 to CPU1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    88   *    // and priority specified at Ifx_IntPrioDef.h globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    89   *    IfxSrc_init(&MODULE_SRC.STM.STM[0].SR[0], IfxSrc_Tos_cpu1, IFX_INTPRIO_STM0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    90   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    91   *    // Step2: Enable the service request node
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    92   *    IfxSrc_enable(&MODULE_SRC.STM.STM[0].SR[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    93   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    94   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    95   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    96   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    97   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    99   * \defgroup IfxLld_Src_Std_Service_Request Service Request Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   100   * \ingroup IfxLld_Src_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   101   * \defgroup IfxLld_Src_Std_Module Module Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   102   * \ingroup IfxLld_Src_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   103   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   105  #ifndef IFXSRC_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   106  #define IFXSRC_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   107  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   108  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   109  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   110  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   111  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   112  #include "_Impl/IfxSrc_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   113  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   114  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   115  /** \addtogroup IfxLld_Src_Std_Service_Request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   116   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   117  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   118  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   119  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   120  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   122  /** \brief Resets the overrun flag of the Service Request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   123   * \param src pointer to the Service Request Control register which the overrun flag should be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   124   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   126   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   127   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   129  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   130  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   131  /** \brief Resets a specific interrupt service by software.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   132   * \param src pointer to the Service Request Control register which the request should be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   135   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   136   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   137   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   138  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   139  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   140  /** \brief Gets the current overrun status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   141   * \param src pointer to the Service Request Control register for which the overrun status should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   142   * \return current service request control overrun status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   143   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   144   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   147  IFX_INLINE boolean IfxSrc_isOverrun(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   149  /** \brief Gets the current request status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   150   * \param src pointer to the Service Request Control register for which the request status should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   151   * \return current service request control request status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   152   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   153   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   154   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   156  IFX_INLINE boolean IfxSrc_isRequested(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   158  /** \brief Requests a specific interrupt service by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   159   * \param src pointer to the Service Request Control register which the interrupt has to be requested.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   160   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   161   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   162   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   163   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   164   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   165  IFX_INLINE void IfxSrc_setRequest(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   167  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   169  /** \addtogroup IfxLld_Src_Std_Module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   170   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   171  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   172  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   173  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   174  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   176  /** \brief DeInitializes the service request control register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   177   * \param src pointer to the Service Request Control register which should be deinitialised.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   178   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   179   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   180   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   181   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   182   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   183  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   184  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   185  /** \brief Disables a specific interrupt service request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   186   * \param src pointer to the Service Request Control register for which the interrupt has to be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   187   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   188   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   189   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   190   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   192  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   194  /** \brief Enables a specific interrupt service request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   195   * \param src pointer to the Service Request Control register for which the interrupt has to be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   196   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   197   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   198   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   199   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   200   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   201  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   202  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   203  /** \brief Initializes the service request control register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   204   * \param src pointer to the Service Request Control register which should be initialised.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   205   * \param typOfService type of interrupt service provider.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   206   * \param priority Interrupt priority.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   207   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   208   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   209   * Get the peripheral service control register which request need to be serviced and assign this service to any of service providers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   210   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   211   * //define the interrupt priority
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   212   * #define IFXASCLIN0_TX_INTPRIO 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   213   * //get the service request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   214   * volatile Ifx_SRC_SRCR *src = IfxAsclin_getSrcPointerRx( &MODULE_ASCLIN0 );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   215   * //initlaise the service request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   216   * IfxSrc_init( src, IfxSrc_Tos_cpu0, IFXASCLIN0_TX_INTPRIO );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   217   * // enable the service
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   218   * IfxSrc_enable( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   219   * //check for service request flags and clear if they occur
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   220   * if ( IfxSrc_isRequested( src ) == TRUE )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   221   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   222   *    IfxSrc_clearRequest( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   223   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   224   * if ( IfxSrc_isOverrun( src ) == TRUE )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   225   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   226   *      IfxSrc_clearOverrun( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   227   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   228   * // Atlast deinitialise the service control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   229   * IfxSrc_deinit( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   230   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   231   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   233  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   235  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   237  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   238  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   239  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   241  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   242  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   243      src->B.IOVCLR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   244  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   245  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   247  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   248  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   249      src->B.CLRR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   250  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   253  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   254  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   255      src->U = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   256  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   259  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   260  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   261      src->B.SRE = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   262  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   265  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   266  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   267      src->B.SRE = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   268  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   269  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   271  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   272  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   273      src->B.SRPN = priority;
	st.b	[a15],d5
.L615:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   274      src->B.TOS  = typOfService;
	ld.bu	d15,[a15]1
.L616:
	insert	d15,d15,d4,#3,#3
	st.b	[a15]1,d15
.L617:
	ld.bu	d15,[a15]3
.L618:
	or	d15,#2
	st.b	[a15]3,d15
.L619:
	ld.bu	d15,[a15]1
.L620:
	or	d15,#4
	st.b	[a15]1,d15
.L377:
	fret
.L165:
	; End of function
	.sdecl	'.text.IfxI2c.IfxI2c_enableErrorInterrupt',code,cluster('IfxI2c_enableErrorInterrupt')
	.sect	'.text.IfxI2c.IfxI2c_enableErrorInterrupt'
	.align	2
	
	.global	IfxI2c_enableErrorInterrupt

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    94  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    95  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    96  void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority)
; Function IfxI2c_enableErrorInterrupt
.L52:
IfxI2c_enableErrorInterrupt:	.type	func

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    16   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    18   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    25   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    32   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    40   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    41   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    42   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    43   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    44   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    45   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    46   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    47   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    48  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    49  #ifndef IFXI2C_H
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    50  #define IFXI2C_H 1
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    51  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    52  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    53  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    54  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    55  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    56  #include "_Impl/IfxI2c_cfg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    57  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    58  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    59  #include "IfxI2c_bf.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    60  #include "_PinMap/IfxI2c_PinMap.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    61  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    62  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    63  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    64  /*-----------------------------------Macros-----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    65  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    66  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    67  /** \brief Master code for high speed mode
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    68   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    69  #define IFXI2C_HIGHSPEED_MASTER_CODE (0xEU)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    70  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    72  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    73  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    74  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    75  /** \addtogroup IfxLld_I2c_Std_enums
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    76   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    77  /** \brief Selects width of address bits (7 or 10 bits)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    78   * Definition in Ifx_I2C.ADDRCFG.B.TBAM
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    79   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    80  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    81  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    82      IfxI2c_AddressMode_7Bit  = 0, /**< \brief sets 7 bit address */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    83      IfxI2c_AddressMode_10Bit = 1  /**< \brief sets 10 bit address */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    84  } IfxI2c_AddressMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    85  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    86  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    87  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    88      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    89      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    90      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    91      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    92  } IfxI2c_BusStatus;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    93  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    94  /** \brief enables DTR interrupt flags
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    95   * Definition in Ifx.I2C.IMSC.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    96   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    97  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    98  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    99      IfxI2c_DtrInterruptSource_lastSingleRequest = IFX_I2C_IMSC_LSREQ_INT_OFF,  /**< \brief last single service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   100      IfxI2c_DtrInterruptSource_singleRequest     = IFX_I2C_IMSC_SREQ_INT_OFF,   /**< \brief single service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   101      IfxI2c_DtrInterruptSource_lastBurstRequest  = IFX_I2C_IMSC_LBREQ_INT_OFF,  /**< \brief last burst service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   102      IfxI2c_DtrInterruptSource_burstRequest      = IFX_I2C_IMSC_BREQ_INT_OFF    /**< \brief burst service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   103  } IfxI2c_DtrInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   104  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   105  /** \brief enable error interrupt request source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   106   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   107   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   108  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   109  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   110      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   111      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   112      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   113      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   114  } IfxI2c_ErrorInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   115  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   116  /** \brief Select speed mode. Standard and Fast or High Speed mode.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   117   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   118  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   119  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   120      IfxI2c_Mode_StandardAndFast = 0,  /**< \brief Sets Standard and Fast speed mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   121      IfxI2c_Mode_HighSpeed       = 1   /**< \brief Sets HighSpeed Mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   122  } IfxI2c_Mode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   123  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   124  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   125  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   126      IfxI2c_PinSelect_a = 0,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   127      IfxI2c_PinSelect_b = 1,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   128      IfxI2c_PinSelect_c = 2,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   129      IfxI2c_PinSelect_d = 3,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   130      IfxI2c_PinSelect_e = 4,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   131      IfxI2c_PinSelect_f = 5,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   132      IfxI2c_PinSelect_g = 6,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   133      IfxI2c_PinSelect_h = 7
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   134  } IfxI2c_PinSelect;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   135  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   136  /** \brief enable protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   137   * Definition in Ifx.I2C.PIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   138   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   139  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   140  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   141      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   142      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   143      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   144      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   145      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   146      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   147      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   148  } IfxI2c_ProtocolInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   149  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   150  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   151   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   152   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   154  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   155      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   156      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   157  } IfxI2c_SleepMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   158  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   159  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   160  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   161  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   162  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   163  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   164  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   165  /** \addtogroup IfxLld_I2c_Std_structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   166   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   167  /** \brief Pin Structure
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   168   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   169  typedef struct
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   170  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   171      IfxI2c_Scl_InOut *scl;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   172      IfxI2c_Sda_InOut *sda;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   173      IfxPort_PadDriver padDriver;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   174  } IfxI2c_Pins;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   175  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   176  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   177  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   178  /** \addtogroup IfxLld_I2c_Std_functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   179   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   180  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   181  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   182  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   183  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   184  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   185  /** \brief Returns if the bus is free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   186   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   187  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   188  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   189  /** \brief clears all DTR interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   190   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   191   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   192   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   193  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   194  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   195  /** \brief clears all Error Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   196   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   197   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   198   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   199  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   200  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   201  /** \brief Clears all Protocol Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   202   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   203   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   204   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   205  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   206  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   207  /** \brief clears the specified source of DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   208   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   209   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   210   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   211   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   212  IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   213  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   214  /** \brief clears the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   215   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   216   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   217   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   218   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   219  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   220  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   221  /** \brief clears the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   222   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   223   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   224   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   225   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   226  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   227  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   228  /** \brief Data request is cleared automatically
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   229   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   230   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   231   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   232  IFX_INLINE void IfxI2c_clearRequestBuffer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   233  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   234  /** \brief disables the specified source of DTR interupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   235   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   236   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   237   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   238   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   239  IFX_INLINE void IfxI2c_disableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   240  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   241  /** \brief disables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   242   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   243   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   244   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   245  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   246  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   247  /** \brief disables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   248   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   249   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   250   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   251   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   252  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   253  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   254  /** \brief disables the Protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   255   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   256   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   257   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   258  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   259  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   260  /** \brief disables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   261   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   262   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   263   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   264   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   265  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   266  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   267  /** \brief enables the specified source of DTR interupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   268   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   269   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   276   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   277   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   278  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   279  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   280  /** \brief enables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   281   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   282   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief enables the protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   289   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief enables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   295   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   296   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   297   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   298  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   299  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   300  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   301   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   302   * \return BusStatus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   303   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   304  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   305  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   306  /** \brief Returns the SRC pointer for I2C DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   307   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   308   * \return SRC pointer for I2C DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   309   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   310  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getDtrSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   311  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   312  /** \brief returns the status of specified DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   313   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   314   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   315   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   316   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   317  IFX_INLINE boolean IfxI2c_getDtrinterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   318  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   319  /** \brief returns the current status of error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   320   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   321   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   322   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   323  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   324  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   325  /** \brief returns the status of the error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   326   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   327   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   328   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   329   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   330  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   331  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   332  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   333   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   334   * \return SRC pointer for I2C Error Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   335   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   336  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   337  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   338  /** \brief returns the current raw status of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   339   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   340   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   341   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   342  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   343  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   344  /** \brief returns the status of  specified protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   345   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   346   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   347   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   348   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   349  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   350  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   351  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   352   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   353   * \return SRC pointer for I2C Protocol Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   354   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   355  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   356  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   357  /** \brief Returns if the Fifo is requesting new data
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   361  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   363   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief Sets width of I2C address to 7 or 10 bits
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   369   * \param mode selects 7 or 10 bits address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   370   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   371   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   372  IFX_INLINE void IfxI2c_setBitAddressMode(Ifx_I2C *i2c, IfxI2c_AddressMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   373  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   374  /** \brief selects the pin
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   375   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   376   * \param pisel pin to be select
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   377   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   378   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   379  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   380  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   381  /** \brief Sets the number of bytes to be received
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   382   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   383   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   384   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   385   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   386  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   387  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   388  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   389   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   390   * \param address device address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   391   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   392   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   393  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   394  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   395  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   396   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   397   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   398   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   399   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   400  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   401  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   402  /** \brief Sets the number of bytes to be tansmitted
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   403   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   404   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   405   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   406   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   407  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   408  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   409  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   410   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   411   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   412   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   413  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   414  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   415  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   416   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   417   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   418   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   419  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   420  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   421  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   422   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   423   * \param packet specifies the byte to be transfer
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   424   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   425   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   426  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   427  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   428  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   429  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   430  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   431  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   432  /** \brief Configures the Module as Master
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   433   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   434   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   435   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   436  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   437  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   438  /** \brief Disables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   439   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   440   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   441   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   442  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   443  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   444  /** \brief enables the DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   445   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   446   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   447   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   448   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   449   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   450  IFX_EXTERN void IfxI2c_enableDtrInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   451  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   452  /** \brief Enables the Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   453   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   454   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   455   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   456   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   457   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   458  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   459  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   460  /** \brief Enables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   461   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   462   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   463   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   464  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   465  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   466  /** \brief Enables the protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   467   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   468   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   469   * \param priority Priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   471   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   472  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   473  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   474  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   475   * \param i2c Resource index of the I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   476   * \return I2C module register address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   477   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   478  IFX_EXTERN Ifx_I2C *IfxI2c_getAddress(IfxI2c_Index i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   479  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   480  /** \brief Returns the real Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   481   * \return Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   482   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   483  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   484  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   485  /** \brief API to get the resource index of the I2C specified.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   486   * \param i2c Pointer to the I2C HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   487   * \return Resource index of the I2C
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   488   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   489  IFX_EXTERN IfxI2c_Index IfxI2c_getIndex(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   490  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   491  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   492   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   493   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   494  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   495  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   496  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   497   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   498   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   499  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   500  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   501  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   502   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   503   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   504  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   505  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   506  /** \brief resets the I2c kernel
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   507   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   508   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   509   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   510  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   511  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   512  /** \brief Calculates the desired baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   513   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   514   * \param baudrate specifies the baud rate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   515   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   516   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   517  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   518  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   519  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   520  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   521  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   522  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   523  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   524  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   525  /** \brief Configure the i2c master to high speed mode baudrate > 400kbits/s
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   526   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   527   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   528   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   529  IFX_EXTERN void IfxI2c_configureHighSpeedMode(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   530  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   531  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   532  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   533  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   534  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   535  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   536  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   537      boolean free = FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   538  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   539      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   540      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   541          free = TRUE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   542      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   543  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   544      return free;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   545  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   546  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   547  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   548  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   549  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   550      i2c->ICR.U = (1 << IFX_I2C_ICR_LSREQ_INT_OFF) | (1 << IFX_I2C_ICR_SREQ_INT_OFF) | (1 << IFX_I2C_ICR_LBREQ_INT_OFF) | (1 << IFX_I2C_ICR_BREQ_INT_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   551  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   552  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   553  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   554  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   555  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   556      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   557  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   558  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   559  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   560  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   561  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   562      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   563  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   565  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   566  IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   567  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   568      i2c->ICR.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   569  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   570  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   571  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   572  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   573  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   574      i2c->ERRIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   575  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   576  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   577  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   578  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   579  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   580      i2c->PIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   581  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   583  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   584  IFX_INLINE void IfxI2c_clearRequestBuffer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   585  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   586      i2c->FIFOCFG.B.CRBC = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   587  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   589  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   590  IFX_INLINE void IfxI2c_disableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   591  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   592      i2c->IMSC.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   593  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   594  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   595  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   596  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   597  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   598      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   599  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   601  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   602  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   603  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   604      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   605  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   607  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   608  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   609  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   610      i2c->IMSC.B.I2C_P_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   611  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   613  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   614  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   615  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   616      i2c->PIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   617  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   619  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   620  IFX_INLINE void IfxI2c_enableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   621  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   622      i2c->IMSC.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   623  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   625  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   626  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   627  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   628      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   629  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   631  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   632  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   633  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   634      i2c->ERRIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   635  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   637  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   638  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   639  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   640      i2c->IMSC.B.I2C_P_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   641  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   643  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   644  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   645  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   646      i2c->PIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   647  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   649  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   650  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   651  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   652      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   653  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   655  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   656  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getDtrSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   657  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   658      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   659      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   660          return &MODULE_SRC.I2C.I2C[0].DTR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   661      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   662      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   663      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   664          return &MODULE_SRC.I2C.I2C[1].DTR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   665      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   666  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   667  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   668  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   669  IFX_INLINE boolean IfxI2c_getDtrinterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   670  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   671      return (i2c->RIS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   672  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   673  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   674  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   675  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   676  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   677      return i2c->RIS.B.I2C_ERR_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   678  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   679  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   680  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   681  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   682  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   683      return (i2c->ERRIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   684  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   685  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   686  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   687  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   688  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   689      if (i2c == &MODULE_I2C0)
	movh.a	a15,#61452
.L460:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   689      if (i2c == &MODULE_I2C0)      (inlined)
	jne.a	a4,a15,.L5
.L461:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   690      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   691          return &MODULE_SRC.I2C.I2C[0].ERR;
	ld.w	d15,.4.cnt
.L462:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   691          return &MODULE_SRC.I2C.I2C[0].ERR;      (inlined)
	j	.L6

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   689      if (i2c == &MODULE_I2C0)      (inlined)
.L5:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   692      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   693      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   694      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   695          return &MODULE_SRC.I2C.I2C[1].ERR;
	ld.w	d15,.5.cnt

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   697  }      (inlined)
.L6:
	fcall	.cocofun_13
.L216:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    97  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    98      volatile Ifx_SRC_SRCR *src;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    99      src = IfxI2c_getErrorSrcPointer(i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   100      IfxSrc_init(src, typeOfService, priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   101      IfxSrc_enable(src);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   102  }
	ret
.L211:
	
__IfxI2c_enableErrorInterrupt_function_end:
	.size	IfxI2c_enableErrorInterrupt,__IfxI2c_enableErrorInterrupt_function_end-IfxI2c_enableErrorInterrupt
.L100:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_enableModule',code,cluster('IfxI2c_enableModule')
	.sect	'.text.IfxI2c.IfxI2c_enableModule'
	.align	2
	
	.global	IfxI2c_enableModule

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   103  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   104  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   105  void IfxI2c_enableModule(Ifx_I2C *i2c)
; Function IfxI2c_enableModule
.L54:
IfxI2c_enableModule:	.type	func
	mov.aa	a15,a4
.L379:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   106  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   107      uint16 pwd = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L378:
	mov	d8,d2
.L381:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   108  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   109      IfxScuWdt_clearCpuEndinit(pwd);
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L380:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   110      i2c->CLC.B.DISR = 0U;
	fcall	.cocofun_17
.L382:
	ld.bu	d15,[+a3]0
.L467:
	insert	d15,d15,#0,#0,#1
	fcall	.cocofun_17
	st.b	[+a3]0,d15
.L468:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   111  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   112      while (i2c->CLC.B.DISS == 1U)
	fcall	.cocofun_17
	mov.aa	a2,a3
.L7:
	ld.bu	d15,[a2]
.L469:
	jnz.t	d15:1,.L7
.L470:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   113      {}
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   114  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   115      i2c->CLC1.B.RMC = 1U;
	mov	d15,#1
	st.b	[a15]1,d15

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   116  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   117      while (i2c->CLC1.B.RMC != 1U)
.L8:
	ld.bu	d15,[a15]1
.L471:
	jne	d15,#1,.L8
.L472:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   118      {}
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   119  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   120      i2c->CLC1.B.DISR = 0U;
	ld.bu	d15,[a15]
.L473:
	insert	d15,d15,#0,#0,#1
	st.b	[a15],d15

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   121  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   122      while (i2c->CLC1.B.DISS == 1U)
.L9:
	ld.bu	d15,[a15]
.L474:
	jnz.t	d15:1,.L9
.L475:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   123      {}
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   124  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   125      // disable all interrupts
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   126      i2c->ERRIRQSM.U = 0x00;
	mov	d15,#0
	st.w	[a15]96,d15
.L476:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   127      i2c->PIRQSM.U   = 0x00;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   128      i2c->IMSC.U     = 0x00;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   129  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   130      IfxScuWdt_setCpuEndinit(pwd);
	mov	d4,d8
.L383:
	st.w	[a15]112,d15
.L477:
	st.w	[a15]132,d15
.L478:
	j	IfxScuWdt_setCpuEndinit
.L220:
	
__IfxI2c_enableModule_function_end:
	.size	IfxI2c_enableModule,__IfxI2c_enableModule_function_end-IfxI2c_enableModule
.L105:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_enableProtocolInterrupt',code,cluster('IfxI2c_enableProtocolInterrupt')
	.sect	'.text.IfxI2c.IfxI2c_enableProtocolInterrupt'
	.align	2
	
	.global	IfxI2c_enableProtocolInterrupt

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   131  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   132  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   133  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   134  void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority)
; Function IfxI2c_enableProtocolInterrupt
.L56:
IfxI2c_enableProtocolInterrupt:	.type	func

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    16   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    18   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    25   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    32   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    40   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    41   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    42   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    43   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    44   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    45   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    46   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    47   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    48  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    49  #ifndef IFXI2C_H
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    50  #define IFXI2C_H 1
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    51  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    52  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    53  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    54  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    55  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    56  #include "_Impl/IfxI2c_cfg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    57  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    58  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    59  #include "IfxI2c_bf.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    60  #include "_PinMap/IfxI2c_PinMap.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    61  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    62  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    63  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    64  /*-----------------------------------Macros-----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    65  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    66  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    67  /** \brief Master code for high speed mode
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    68   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    69  #define IFXI2C_HIGHSPEED_MASTER_CODE (0xEU)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    70  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    72  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    73  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    74  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    75  /** \addtogroup IfxLld_I2c_Std_enums
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    76   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    77  /** \brief Selects width of address bits (7 or 10 bits)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    78   * Definition in Ifx_I2C.ADDRCFG.B.TBAM
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    79   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    80  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    81  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    82      IfxI2c_AddressMode_7Bit  = 0, /**< \brief sets 7 bit address */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    83      IfxI2c_AddressMode_10Bit = 1  /**< \brief sets 10 bit address */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    84  } IfxI2c_AddressMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    85  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    86  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    87  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    88      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    89      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    90      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    91      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    92  } IfxI2c_BusStatus;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    93  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    94  /** \brief enables DTR interrupt flags
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    95   * Definition in Ifx.I2C.IMSC.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    96   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    97  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    98  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    99      IfxI2c_DtrInterruptSource_lastSingleRequest = IFX_I2C_IMSC_LSREQ_INT_OFF,  /**< \brief last single service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   100      IfxI2c_DtrInterruptSource_singleRequest     = IFX_I2C_IMSC_SREQ_INT_OFF,   /**< \brief single service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   101      IfxI2c_DtrInterruptSource_lastBurstRequest  = IFX_I2C_IMSC_LBREQ_INT_OFF,  /**< \brief last burst service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   102      IfxI2c_DtrInterruptSource_burstRequest      = IFX_I2C_IMSC_BREQ_INT_OFF    /**< \brief burst service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   103  } IfxI2c_DtrInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   104  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   105  /** \brief enable error interrupt request source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   106   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   107   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   108  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   109  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   110      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   111      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   112      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   113      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   114  } IfxI2c_ErrorInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   115  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   116  /** \brief Select speed mode. Standard and Fast or High Speed mode.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   117   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   118  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   119  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   120      IfxI2c_Mode_StandardAndFast = 0,  /**< \brief Sets Standard and Fast speed mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   121      IfxI2c_Mode_HighSpeed       = 1   /**< \brief Sets HighSpeed Mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   122  } IfxI2c_Mode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   123  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   124  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   125  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   126      IfxI2c_PinSelect_a = 0,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   127      IfxI2c_PinSelect_b = 1,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   128      IfxI2c_PinSelect_c = 2,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   129      IfxI2c_PinSelect_d = 3,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   130      IfxI2c_PinSelect_e = 4,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   131      IfxI2c_PinSelect_f = 5,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   132      IfxI2c_PinSelect_g = 6,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   133      IfxI2c_PinSelect_h = 7
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   134  } IfxI2c_PinSelect;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   135  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   136  /** \brief enable protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   137   * Definition in Ifx.I2C.PIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   138   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   139  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   140  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   141      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   142      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   143      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   144      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   145      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   146      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   147      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   148  } IfxI2c_ProtocolInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   149  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   150  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   151   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   152   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   154  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   155      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   156      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   157  } IfxI2c_SleepMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   158  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   159  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   160  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   161  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   162  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   163  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   164  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   165  /** \addtogroup IfxLld_I2c_Std_structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   166   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   167  /** \brief Pin Structure
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   168   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   169  typedef struct
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   170  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   171      IfxI2c_Scl_InOut *scl;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   172      IfxI2c_Sda_InOut *sda;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   173      IfxPort_PadDriver padDriver;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   174  } IfxI2c_Pins;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   175  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   176  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   177  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   178  /** \addtogroup IfxLld_I2c_Std_functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   179   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   180  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   181  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   182  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   183  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   184  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   185  /** \brief Returns if the bus is free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   186   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   187  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   188  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   189  /** \brief clears all DTR interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   190   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   191   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   192   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   193  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   194  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   195  /** \brief clears all Error Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   196   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   197   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   198   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   199  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   200  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   201  /** \brief Clears all Protocol Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   202   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   203   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   204   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   205  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   206  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   207  /** \brief clears the specified source of DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   208   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   209   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   210   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   211   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   212  IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   213  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   214  /** \brief clears the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   215   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   216   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   217   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   218   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   219  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   220  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   221  /** \brief clears the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   222   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   223   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   224   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   225   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   226  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   227  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   228  /** \brief Data request is cleared automatically
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   229   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   230   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   231   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   232  IFX_INLINE void IfxI2c_clearRequestBuffer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   233  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   234  /** \brief disables the specified source of DTR interupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   235   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   236   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   237   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   238   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   239  IFX_INLINE void IfxI2c_disableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   240  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   241  /** \brief disables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   242   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   243   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   244   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   245  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   246  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   247  /** \brief disables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   248   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   249   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   250   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   251   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   252  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   253  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   254  /** \brief disables the Protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   255   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   256   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   257   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   258  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   259  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   260  /** \brief disables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   261   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   262   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   263   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   264   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   265  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   266  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   267  /** \brief enables the specified source of DTR interupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   268   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   269   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   276   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   277   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   278  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   279  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   280  /** \brief enables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   281   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   282   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief enables the protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   289   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief enables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   295   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   296   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   297   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   298  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   299  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   300  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   301   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   302   * \return BusStatus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   303   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   304  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   305  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   306  /** \brief Returns the SRC pointer for I2C DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   307   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   308   * \return SRC pointer for I2C DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   309   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   310  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getDtrSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   311  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   312  /** \brief returns the status of specified DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   313   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   314   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   315   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   316   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   317  IFX_INLINE boolean IfxI2c_getDtrinterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   318  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   319  /** \brief returns the current status of error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   320   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   321   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   322   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   323  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   324  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   325  /** \brief returns the status of the error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   326   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   327   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   328   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   329   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   330  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   331  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   332  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   333   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   334   * \return SRC pointer for I2C Error Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   335   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   336  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   337  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   338  /** \brief returns the current raw status of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   339   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   340   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   341   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   342  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   343  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   344  /** \brief returns the status of  specified protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   345   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   346   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   347   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   348   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   349  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   350  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   351  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   352   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   353   * \return SRC pointer for I2C Protocol Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   354   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   355  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   356  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   357  /** \brief Returns if the Fifo is requesting new data
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   361  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   363   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief Sets width of I2C address to 7 or 10 bits
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   369   * \param mode selects 7 or 10 bits address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   370   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   371   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   372  IFX_INLINE void IfxI2c_setBitAddressMode(Ifx_I2C *i2c, IfxI2c_AddressMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   373  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   374  /** \brief selects the pin
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   375   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   376   * \param pisel pin to be select
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   377   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   378   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   379  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   380  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   381  /** \brief Sets the number of bytes to be received
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   382   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   383   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   384   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   385   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   386  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   387  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   388  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   389   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   390   * \param address device address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   391   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   392   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   393  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   394  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   395  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   396   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   397   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   398   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   399   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   400  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   401  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   402  /** \brief Sets the number of bytes to be tansmitted
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   403   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   404   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   405   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   406   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   407  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   408  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   409  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   410   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   411   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   412   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   413  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   414  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   415  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   416   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   417   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   418   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   419  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   420  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   421  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   422   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   423   * \param packet specifies the byte to be transfer
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   424   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   425   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   426  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   427  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   428  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   429  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   430  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   431  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   432  /** \brief Configures the Module as Master
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   433   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   434   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   435   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   436  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   437  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   438  /** \brief Disables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   439   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   440   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   441   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   442  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   443  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   444  /** \brief enables the DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   445   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   446   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   447   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   448   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   449   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   450  IFX_EXTERN void IfxI2c_enableDtrInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   451  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   452  /** \brief Enables the Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   453   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   454   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   455   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   456   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   457   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   458  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   459  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   460  /** \brief Enables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   461   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   462   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   463   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   464  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   465  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   466  /** \brief Enables the protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   467   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   468   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   469   * \param priority Priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   471   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   472  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   473  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   474  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   475   * \param i2c Resource index of the I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   476   * \return I2C module register address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   477   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   478  IFX_EXTERN Ifx_I2C *IfxI2c_getAddress(IfxI2c_Index i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   479  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   480  /** \brief Returns the real Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   481   * \return Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   482   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   483  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   484  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   485  /** \brief API to get the resource index of the I2C specified.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   486   * \param i2c Pointer to the I2C HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   487   * \return Resource index of the I2C
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   488   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   489  IFX_EXTERN IfxI2c_Index IfxI2c_getIndex(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   490  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   491  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   492   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   493   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   494  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   495  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   496  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   497   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   498   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   499  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   500  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   501  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   502   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   503   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   504  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   505  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   506  /** \brief resets the I2c kernel
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   507   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   508   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   509   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   510  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   511  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   512  /** \brief Calculates the desired baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   513   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   514   * \param baudrate specifies the baud rate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   515   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   516   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   517  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   518  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   519  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   520  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   521  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   522  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   523  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   524  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   525  /** \brief Configure the i2c master to high speed mode baudrate > 400kbits/s
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   526   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   527   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   528   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   529  IFX_EXTERN void IfxI2c_configureHighSpeedMode(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   530  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   531  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   532  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   533  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   534  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   535  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   536  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   537      boolean free = FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   538  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   539      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   540      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   541          free = TRUE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   542      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   543  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   544      return free;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   545  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   546  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   547  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   548  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   549  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   550      i2c->ICR.U = (1 << IFX_I2C_ICR_LSREQ_INT_OFF) | (1 << IFX_I2C_ICR_SREQ_INT_OFF) | (1 << IFX_I2C_ICR_LBREQ_INT_OFF) | (1 << IFX_I2C_ICR_BREQ_INT_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   551  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   552  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   553  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   554  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   555  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   556      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   557  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   558  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   559  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   560  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   561  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   562      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   563  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   565  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   566  IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   567  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   568      i2c->ICR.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   569  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   570  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   571  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   572  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   573  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   574      i2c->ERRIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   575  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   576  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   577  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   578  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   579  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   580      i2c->PIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   581  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   583  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   584  IFX_INLINE void IfxI2c_clearRequestBuffer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   585  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   586      i2c->FIFOCFG.B.CRBC = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   587  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   589  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   590  IFX_INLINE void IfxI2c_disableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   591  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   592      i2c->IMSC.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   593  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   594  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   595  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   596  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   597  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   598      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   599  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   601  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   602  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   603  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   604      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   605  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   607  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   608  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   609  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   610      i2c->IMSC.B.I2C_P_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   611  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   613  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   614  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   615  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   616      i2c->PIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   617  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   619  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   620  IFX_INLINE void IfxI2c_enableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   621  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   622      i2c->IMSC.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   623  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   625  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   626  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   627  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   628      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   629  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   631  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   632  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   633  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   634      i2c->ERRIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   635  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   637  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   638  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   639  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   640      i2c->IMSC.B.I2C_P_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   641  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   643  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   644  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   645  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   646      i2c->PIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   647  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   649  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   650  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   651  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   652      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   653  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   655  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   656  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getDtrSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   657  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   658      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   659      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   660          return &MODULE_SRC.I2C.I2C[0].DTR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   661      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   662      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   663      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   664          return &MODULE_SRC.I2C.I2C[1].DTR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   665      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   666  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   667  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   668  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   669  IFX_INLINE boolean IfxI2c_getDtrinterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   670  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   671      return (i2c->RIS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   672  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   673  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   674  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   675  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   676  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   677      return i2c->RIS.B.I2C_ERR_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   678  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   679  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   680  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   681  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   682  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   683      return (i2c->ERRIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   684  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   685  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   686  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   687  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   688  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   689      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   690      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   691          return &MODULE_SRC.I2C.I2C[0].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   692      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   693      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   694      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   695          return &MODULE_SRC.I2C.I2C[1].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   696      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   697  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   698  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   699  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   700  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   701  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   702      return i2c->RIS.B.I2C_P_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   703  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   704  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   705  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   706  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   707  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   708      return (i2c->PIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   709  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   710  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   711  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   712  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   713  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   714      if (i2c == &MODULE_I2C0)
	movh.a	a15,#61452
.L483:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   714      if (i2c == &MODULE_I2C0)      (inlined)
	jne.a	a4,a15,.L10
.L484:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   715      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   716          return &MODULE_SRC.I2C.I2C[0].P;
	ld.w	d15,.6.cnt
.L485:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   716          return &MODULE_SRC.I2C.I2C[0].P;      (inlined)
	j	.L11

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   714      if (i2c == &MODULE_I2C0)      (inlined)
.L10:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   717      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   718      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   719      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   720          return &MODULE_SRC.I2C.I2C[1].P;
	ld.w	d15,.7.cnt

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   722  }      (inlined)
.L11:
	fcall	.cocofun_13
.L229:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   135  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   136      volatile Ifx_SRC_SRCR *src;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   137      src = IfxI2c_getProtocolSrcPointer(i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   138      IfxSrc_init(src, typeOfService, priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   139      IfxSrc_enable(src);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   140  }
	ret
.L223:
	
__IfxI2c_enableProtocolInterrupt_function_end:
	.size	IfxI2c_enableProtocolInterrupt,__IfxI2c_enableProtocolInterrupt_function_end-IfxI2c_enableProtocolInterrupt
.L110:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_getAddress',code,cluster('IfxI2c_getAddress')
	.sect	'.text.IfxI2c.IfxI2c_getAddress'
	.align	2
	
	.global	IfxI2c_getAddress

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   141  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   142  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   143  Ifx_I2C *IfxI2c_getAddress(IfxI2c_Index i2c)
; Function IfxI2c_getAddress
.L58:
IfxI2c_getAddress:	.type	func

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   144  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   145      Ifx_I2C *module;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   146  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   147      if (i2c < IFXI2C_NUM_MODULES)
	jge	d4,#2,.L12
.L490:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   148      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   149          module = (Ifx_I2C *)IfxI2c_cfg_indexMap[i2c].module;
	movh.a	a15,#@his(IfxI2c_cfg_indexMap)
	lea	a15,[a15]@los(IfxI2c_cfg_indexMap)
.L491:
	addsc.a	a15,a15,d4,#3
.L492:
	ld.a	a2,[a15]
.L384:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   150      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   151      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   152      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   153          module = NULL_PTR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   154      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   155  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   156      return module;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   157  }
	ret
.L12:
	mov.a	a2,#0
.L385:
	ret
.L233:
	
__IfxI2c_getAddress_function_end:
	.size	IfxI2c_getAddress,__IfxI2c_getAddress_function_end-IfxI2c_getAddress
.L115:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_getBaudrate',code,cluster('IfxI2c_getBaudrate')
	.sect	'.text.IfxI2c.IfxI2c_getBaudrate'
	.align	2
	
	.global	IfxI2c_getBaudrate

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   158  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   159  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   160  float32 IfxI2c_getBaudrate(Ifx_I2C *i2c)
; Function IfxI2c_getBaudrate
.L60:
IfxI2c_getBaudrate:	.type	func
	mov.aa	a15,a4
.L387:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   161  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   162      uint8   rmc     = i2c->CLC1.B.RMC;
	ld.bu	d8,[a15]1
.L243:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     2   * \file IfxScuCcu.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    42   * \defgroup IfxLld_Scu SCU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    43   * \addtogroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    44   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    45   * \defgroup IfxLld_ScuCcu How to use the Scu Clock driver?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    46   * \addtogroup IfxLld_ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    47   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    48   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    49   * The Scu Clock control unit driver provides a default configuration for pll and Clock initialisation and set of peripheral clock configuration functions.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    51   * In the following sections it will be described, how to integrate the driver into the application framework.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    52   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    53   * \section IfxLld_ScuCcu_Std_Preparation Preparation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    54   * \subsection IfxLld_ScuCcu_Std_Include Include Files
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    55   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    56   * Include following header file into your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    57   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    58   * #include <Scu/Std/IfxScuCcu.h>
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    59   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    60   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    61   * \subsection IfxLld_ScuCcu_Std_Variables Variables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    62   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    63   * Declare the Clock Configuration variables in your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    64   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    65   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    66   * // used globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    67   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    68   * // configuration for the PLL  steps
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    69   * static IfxScuCcu_PllStepsConfig IfxScuCcu_testPllConfigSteps[] = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    70   *     IFXSCU_CFG_PLL_STEPS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    71   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    72   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    73   * static const IfxScuCcu_FlashWaitstateConfig IfxScuCcu_defaultFlashWaitstateConfig = IFXSCU_CFG_FLASH_WAITSTATE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    74   * // Default configuration for the Clock Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    75   * IfxScuCcu_Config                      IfxScuCcu_testClockConfig = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    76   *     // IfxScuCcu_InitialStepConfig: Configuration of first step which is same as internal osc frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    77   *     IFXSCU_CFG_PLL_INITIAL_STEP,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    78   *     //IfxScuCcu_PllThrottleConfig: Configuration of PLL throttling.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    79   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    80   *         sizeof(IfxScuCcu_defaultPllConfigSteps) / sizeof(IfxScuCcu_PllStepConfig),
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    81   *         IfxScuCcu_defaultPllConfigSteps
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    82   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    83   *     IFXSCU_CFG_CLK_DISTRIBUTION,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    84   *     &IfxScuCcu_defaultFlashWaitstateConfig,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    85   *     &IfxScuCcu_defaultModConfig
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    86   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    87   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    88   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    89   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    90   * \subsection IfxLld_ScuCcu_Std_Init Module Initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    91   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    92   * The module initialisation can be done in the same function. Here an example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    93   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    94   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    95   *        // standard PLL & clock initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    96   *         IfxScuCcu_init(&IfxScuCcu_testClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    97   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    99   *    The SYS PLL, PER PLL1 , PLL2 and clocks are now initialised based on the XTAL and PLL values configured in Ifx_Cfg.h and are ready for use now!
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   100   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   101   * Alternately the PLL and clocks can be initialised using below method which provides greater control on the configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   102   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   103   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   104   * static const IfxScuCcu_PllStepConfig IfxScuCcu_defaultPllConfigSteps[] = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   105   *     {                   //Step 0 Config: 150MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   106   *         (4 - 1),        //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   107   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   108   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   109   *     {                   //Step 1 Config: 200MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   110   *         (3 - 1),       //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   111   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   112   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   113   *     {                   //Step 2 Config: 300MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   114   *         (2 - 1),        //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   115   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   116   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   117   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   118   *     IfxScuCcu_Config        IfxScuCcu_sampleClockConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   119   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   120   *     IfxScuCcu_initConfig(&IfxScuCcu_sampleClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   121   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   122   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   123   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   124   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.pllInputClockSelection = IfxScuCcu_PllInputClockSelection_fOsc0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   126   *     //SYS PLL = 300Mhz, XTAL = 20Mhz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   127   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.k2Divider = IfxScuCcu_K2divider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   128   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.nDivider = IfxScuCcu_Ndivider_60;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   129   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.pDivider = IfxScuCcu_Pdivider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   130   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.waitTime = 0.000200F;  // wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   131   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   132   *     IfxScuCcu_sampleClockConfig.sysPllThrottleConfig.numOfSteps = sizeof(IfxScuCcu_defaultPllConfigSteps) / sizeof(IfxScuCcu_PllStepConfig); //  step clock incr
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   133   *     IfxScuCcu_sampleClockConfig.sysPllThrottleConfig.pllSteps = IfxScuCcu_defaultPllConfigSteps;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   135   *     // PER PLL1 = 240Mhz, PERPLL2 = 50Mhz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   136   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k2Divider = IfxScuCcu_K2divider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   137   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k3Divider = IfxScuCcu_K3divider_6;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   138   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k3DividerBypass = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   139   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.nDivider = IfxScuCcu_Ndivider_24;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   140   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.pDivider = IfxScuCcu_Pdivider_1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   142   *     // update CCUCON Config use mask and value as below
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   143   *     IfxScuCcu_sampleClockConfig.clockDistribution.ccucon0.mask =IFXSCU_CFG_CCUCON0_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   144   *     IfxScuCcu_sampleClockConfig.clockDistribution.ccucon0.value = IFXSCU_CFG_CCUCON0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   146   *     // standard PLL & clock initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   147   *     IfxScuCcu_init(&IfxScuCcu_sampleClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   149   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   150   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   151   * ** Modulation Configuration **
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   152   * The SCU CCU module also provides an option to Frequency Modulate the clock.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   153   * The Modulation configuration can be done as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   154   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   155   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   156   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   157   * //define your modulation configuration structure:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   158   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   159   *  IFX_CONST IfxScuCcu_Mod_Config IfxScuCcu_SampleModConfig = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   160   *          IfxScuCcu_ModEn_disabled,          // disable is default //enable / disable modulation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   161   *          IfxScuCcu_ModulationAmplitude_0p5, // default 0 value  // specify the modulation amplitude %
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   162   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   163   *  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   164   *  // put this as part of the CCU configuration:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   165   *  IfxScuCcu_sampleClockConfig.modulationConfig = &IfxScuCcu_SampleModConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   166   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   167   *  // now initalize the CCU PLL and clock with the init function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   168   *  IfxScuCcu_init(&IfxScuCcu_sampleClockConfig)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   169   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   171   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   172   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   173   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   174   * \defgroup IfxLld_Scu_Std_Ccu Ccu Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   175   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   176   * \defgroup IfxLld_Scu_Std_Ccu_Ccu Clock Control Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   177   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   178   * \defgroup IfxLld_Scu_Std_Ccu_Ccu_Operative Clock Control Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   179   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   180   * \defgroup IfxLld_Scu_Std_Ccu_Ccu_Configuration Clock Control Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   181   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   182   * \defgroup IfxLld_Scu_Std_Ccu_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   183   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   185  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   186  #ifndef IFXSCUCCU_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   187  #define IFXSCUCCU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   188  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   189  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   190  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   191  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   193  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   194  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   195  #include "Cpu/Std/IfxCpu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   196  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   197  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   198  #include "_PinMap/IfxScu_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   199  #include "IfxSmu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   200  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   201  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   202  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   203  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   205  /** \brief Oscillator stability check timeout count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   207  #ifndef IFXSCUCCU_OSC_STABLECHK_TIME
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   208  #define IFXSCUCCU_OSC_STABLECHK_TIME               (640)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   209  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   210  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   211  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   213  #define IFXSCUCCU_SMUALARM_MASK                    (0x1DU)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   215  /** \brief ~40uS max wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   216   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   217  #ifndef IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   218  #define IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT     (0x1000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   219  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   221  /** \brief ~122uS max wait time for PLL locking
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   223  #define IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT           (0x3000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   224  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   225  /** \brief ~122uS max wait time for PLL power down/up state update
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   227  #define IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT (0x3000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   229  /** \brief ~244uS max wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   230   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   231  #define IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT           (0x6000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   233  /** \brief 3mS max wait time for PLL power down/up state update
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   235  #define IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT (0x493E0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   237  #define IFXSCUCCU_LOOP_TIMEOUT_CHECK(tVar, tErr) \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   238      {                                            \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   239          if (((sint32)--tVar) <= 0)               \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   240          {                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   241              tErr = (uint8)1;                     \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   242              break;                               \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   243          }                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   244          else                                     \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   245          {                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   246          }                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   247      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   248  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   249  /** \brief Modulation frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   250   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   251  #define IFXSCUCCU_MODULATION_FREQ_HZ               (3600000)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   253  /** \brief MODCFG shift value for SYSPLLCON2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   255  #define IFXSCUCCU_MODCFG_DEFAULT_SHIFT             (10)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   257  /** \brief MODCFG default value - for SYSPLLCON2[15:10]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   259  #define IFXSCUCCU_MODCFG_DEFAULT_VAL               ((uint32)0x3D)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   261  /** \brief get Rgain from MA and FDco
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   263  #define IFXSCUCCU_GET_RGAIN_NOM(MA, FDco)  ((2 * (MA / 100) * (FDco / IFXSCUCCU_MODULATION_FREQ_HZ)))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   265  /** \brief Get RGAin HEX from RGain Nominal value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   266   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   267  #define IFXSCUCCU_GET_RGAIN_HEX(RGain_Nom) ((uint16)((RGain_Nom * 32) + 0.5))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   269  /** \brief Get MODCFG from RGAIN_HEX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   271  #define IFXSCUCCU_GET_MODCFG(RGain_Hex)    ((uint16)(IFXSCUCCU_MODCFG_DEFAULT_VAL << IFXSCUCCU_MODCFG_DEFAULT_SHIFT) | (uint16)(RGain_Hex))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   273  /** \brief Define to include the flash wait state check in ScuCcu_init()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   275  #define IFXSCUCCU_FLASHWAITSTATECHECK (0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   277  /** \brief 10 microsecond wait time between steps to jump back to normal mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   278   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   279  #ifndef IFXSCUCCU_LPTONORMAL_WAITTIME
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   280  #define IFXSCUCCU_LPTONORMAL_WAITTIME (0.00001f)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   281  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   283  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   284  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   285  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   287  /** \brief Function pointer type for the hooks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   288   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   290  typedef void (*IfxScuCcu_PllStepsFunctionHook)(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   292  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   293  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   294  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   295  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   296  /** \addtogroup IfxLld_Scu_Std_Ccu_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   297   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   298  /** \brief clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   299   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   300  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   301  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   302      IfxScuCcu_Fsource_0 = 0,      /**< \brief fSource0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   303      IfxScuCcu_Fsource_1,          /**< \brief fSource1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   304      IfxScuCcu_Fsource_2           /**< \brief fSource2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   305  } IfxScuCcu_Fsource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   307  /** \brief MODULE_SCU.PLLCON1.B.K2DIV, specifies the K2-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   308   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   309  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   310  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   311      IfxScuCcu_K2divider_1 = 0,      /**< \brief K2-Divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   312      IfxScuCcu_K2divider_2,          /**< \brief K2-Divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   313      IfxScuCcu_K2divider_3,          /**< \brief K2-Divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   314      IfxScuCcu_K2divider_4,          /**< \brief K2-Divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   315      IfxScuCcu_K2divider_5,          /**< \brief K2-Divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   316      IfxScuCcu_K2divider_6,          /**< \brief K2-Divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   317      IfxScuCcu_K2divider_7,          /**< \brief K2-Divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   318      IfxScuCcu_K2divider_8           /**< \brief K2-Divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   319  } IfxScuCcu_K2divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   321  /** \brief MODULE_SCU.PLLCON1.B.K3DIV, specifies the K3-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   322   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   323  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   324  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   325      IfxScuCcu_K3divider_1 = 0,      /**< \brief K3-Divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   326      IfxScuCcu_K3divider_2,          /**< \brief K3-Divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   327      IfxScuCcu_K3divider_3,          /**< \brief K3-Divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   328      IfxScuCcu_K3divider_4,          /**< \brief K3-Divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   329      IfxScuCcu_K3divider_5,          /**< \brief K3-Divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   330      IfxScuCcu_K3divider_6,          /**< \brief K3-Divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   331      IfxScuCcu_K3divider_7,          /**< \brief K3-Divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   332      IfxScuCcu_K3divider_8           /**< \brief K3-Divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   333  } IfxScuCcu_K3divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   334  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   335  /** \brief Low Power Division Ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   336   * Corresponds to values of LPDIV in CCUCON0.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   337   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   338  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   339  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   340      IfxScuCcu_LowPowerDivRatio_divBy30 = 1,  /**< \brief Divide by 30 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   341      IfxScuCcu_LowPowerDivRatio_divBy60,      /**< \brief Divide by 60 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   342      IfxScuCcu_LowPowerDivRatio_divBy120,     /**< \brief Divide by 120 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   343      IfxScuCcu_LowPowerDivRatio_divBy240      /**< \brief Divide by 240 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   344  } IfxScuCcu_LowPowerDivRatio;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   346  /** \brief ENUM for MA (%) values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   347   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   348  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   349  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   350      IfxScuCcu_ModulationAmplitude_0p5 = 0,      /**< \brief 0.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   351      IfxScuCcu_ModulationAmplitude_1p0,          /**< \brief 1.0%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   352      IfxScuCcu_ModulationAmplitude_1p25,         /**< \brief 1.25%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   353      IfxScuCcu_ModulationAmplitude_1p5,          /**< \brief 1.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   354      IfxScuCcu_ModulationAmplitude_2p0,          /**< \brief 2%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   355      IfxScuCcu_ModulationAmplitude_2p5,          /**< \brief 2.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   356      IfxScuCcu_ModulationAmplitude_count,        /**< \brief range  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   357  } IfxScuCcu_ModulationAmplitude;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   358  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   359  /** \brief MODULE_SCU.PLLCON0.B.NDIV, specifies the N-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   361  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   362  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   363      IfxScuCcu_Ndivider_1 = 0,      /**< \brief  N-divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   364      IfxScuCcu_Ndivider_2,          /**< \brief  N-divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   365      IfxScuCcu_Ndivider_3,          /**< \brief  N-divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   366      IfxScuCcu_Ndivider_4,          /**< \brief  N-divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   367      IfxScuCcu_Ndivider_5,          /**< \brief  N-divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   368      IfxScuCcu_Ndivider_6,          /**< \brief  N-divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   369      IfxScuCcu_Ndivider_7,          /**< \brief  N-divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   370      IfxScuCcu_Ndivider_8,          /**< \brief  N-divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   371      IfxScuCcu_Ndivider_9,          /**< \brief  N-divider 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   372      IfxScuCcu_Ndivider_10,         /**< \brief  N-divider 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   373      IfxScuCcu_Ndivider_11,         /**< \brief  N-divider 11  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   374      IfxScuCcu_Ndivider_12,         /**< \brief  N-divider 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   375      IfxScuCcu_Ndivider_13,         /**< \brief  N-divider 13  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   376      IfxScuCcu_Ndivider_14,         /**< \brief  N-divider 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   377      IfxScuCcu_Ndivider_15,         /**< \brief  N-divider 15  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   378      IfxScuCcu_Ndivider_16,         /**< \brief  N-divider 16  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   379      IfxScuCcu_Ndivider_17,         /**< \brief  N-divider 17  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   380      IfxScuCcu_Ndivider_18,         /**< \brief  N-divider 18  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   381      IfxScuCcu_Ndivider_19,         /**< \brief  N-divider 19  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   382      IfxScuCcu_Ndivider_20,         /**< \brief  N-divider 20  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   383      IfxScuCcu_Ndivider_21,         /**< \brief  N-divider 21  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   384      IfxScuCcu_Ndivider_22,         /**< \brief  N-divider 22  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   385      IfxScuCcu_Ndivider_23,         /**< \brief  N-divider 23  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   386      IfxScuCcu_Ndivider_24,         /**< \brief  N-divider 24  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   387      IfxScuCcu_Ndivider_25,         /**< \brief  N-divider 25  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   388      IfxScuCcu_Ndivider_26,         /**< \brief  N-divider 26  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   389      IfxScuCcu_Ndivider_27,         /**< \brief  N-divider 27  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   390      IfxScuCcu_Ndivider_28,         /**< \brief  N-divider 28  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   391      IfxScuCcu_Ndivider_29,         /**< \brief  N-divider 29  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   392      IfxScuCcu_Ndivider_30,         /**< \brief  N-divider 30  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   393      IfxScuCcu_Ndivider_31,         /**< \brief  N-divider 31  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   394      IfxScuCcu_Ndivider_32,         /**< \brief  N-divider 32  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   395      IfxScuCcu_Ndivider_33,         /**< \brief  N-divider 33  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   396      IfxScuCcu_Ndivider_34,         /**< \brief  N-divider 34  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   397      IfxScuCcu_Ndivider_35,         /**< \brief  N-divider 35  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   398      IfxScuCcu_Ndivider_36,         /**< \brief  N-divider 36  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   399      IfxScuCcu_Ndivider_37,         /**< \brief  N-divider 37  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   400      IfxScuCcu_Ndivider_38,         /**< \brief  N-divider 38  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   401      IfxScuCcu_Ndivider_39,         /**< \brief  N-divider 39  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   402      IfxScuCcu_Ndivider_40,         /**< \brief  N-divider 40  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   403      IfxScuCcu_Ndivider_41,         /**< \brief  N-divider 41  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   404      IfxScuCcu_Ndivider_42,         /**< \brief  N-divider 42  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   405      IfxScuCcu_Ndivider_43,         /**< \brief  N-divider 43  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   406      IfxScuCcu_Ndivider_44,         /**< \brief  N-divider 44  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   407      IfxScuCcu_Ndivider_45,         /**< \brief  N-divider 45  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   408      IfxScuCcu_Ndivider_46,         /**< \brief  N-divider 46  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   409      IfxScuCcu_Ndivider_47,         /**< \brief  N-divider 47  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   410      IfxScuCcu_Ndivider_48,         /**< \brief  N-divider 48  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   411      IfxScuCcu_Ndivider_49,         /**< \brief  N-divider 49  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   412      IfxScuCcu_Ndivider_50,         /**< \brief  N-divider 50  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   413      IfxScuCcu_Ndivider_51,         /**< \brief  N-divider 51  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   414      IfxScuCcu_Ndivider_52,         /**< \brief  N-divider 52  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   415      IfxScuCcu_Ndivider_53,         /**< \brief  N-divider 53  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   416      IfxScuCcu_Ndivider_54,         /**< \brief  N-divider 54  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   417      IfxScuCcu_Ndivider_55,         /**< \brief  N-divider 55  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   418      IfxScuCcu_Ndivider_56,         /**< \brief  N-divider 56  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   419      IfxScuCcu_Ndivider_57,         /**< \brief  N-divider 57  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   420      IfxScuCcu_Ndivider_58,         /**< \brief  N-divider 58  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   421      IfxScuCcu_Ndivider_59,         /**< \brief  N-divider 59  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   422      IfxScuCcu_Ndivider_60,         /**< \brief  N-divider 60  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   423      IfxScuCcu_Ndivider_61,         /**< \brief  N-divider 61  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   424      IfxScuCcu_Ndivider_62,         /**< \brief  N-divider 62  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   425      IfxScuCcu_Ndivider_63,         /**< \brief  N-divider 63  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   426      IfxScuCcu_Ndivider_64,         /**< \brief  N-divider 64  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   427      IfxScuCcu_Ndivider_65,         /**< \brief  N-divider 65  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   428      IfxScuCcu_Ndivider_66,         /**< \brief  N-divider 66  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   429      IfxScuCcu_Ndivider_67,         /**< \brief  N-divider 67  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   430      IfxScuCcu_Ndivider_68,         /**< \brief  N-divider 68  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   431      IfxScuCcu_Ndivider_69,         /**< \brief  N-divider 69  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   432      IfxScuCcu_Ndivider_70,         /**< \brief  N-divider 70  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   433      IfxScuCcu_Ndivider_71,         /**< \brief  N-divider 71  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   434      IfxScuCcu_Ndivider_72,         /**< \brief  N-divider 72  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   435      IfxScuCcu_Ndivider_73,         /**< \brief  N-divider 73  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   436      IfxScuCcu_Ndivider_74,         /**< \brief  N-divider 74  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   437      IfxScuCcu_Ndivider_75,         /**< \brief  N-divider 75  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   438      IfxScuCcu_Ndivider_76,         /**< \brief  N-divider 76  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   439      IfxScuCcu_Ndivider_77,         /**< \brief  N-divider 77  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   440      IfxScuCcu_Ndivider_78,         /**< \brief  N-divider 78  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   441      IfxScuCcu_Ndivider_79,         /**< \brief  N-divider 79  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   442      IfxScuCcu_Ndivider_80,         /**< \brief  N-divider 80  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   443      IfxScuCcu_Ndivider_81,         /**< \brief  N-divider 81  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   444      IfxScuCcu_Ndivider_82,         /**< \brief  N-divider 82  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   445      IfxScuCcu_Ndivider_83,         /**< \brief  N-divider 83  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   446      IfxScuCcu_Ndivider_84,         /**< \brief  N-divider 84  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   447      IfxScuCcu_Ndivider_85,         /**< \brief  N-divider 85  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   448      IfxScuCcu_Ndivider_86,         /**< \brief  N-divider 86  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   449      IfxScuCcu_Ndivider_87,         /**< \brief  N-divider 87  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   450      IfxScuCcu_Ndivider_88,         /**< \brief  N-divider 88  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   451      IfxScuCcu_Ndivider_89,         /**< \brief  N-divider 89  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   452      IfxScuCcu_Ndivider_90,         /**< \brief  N-divider 90  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   453      IfxScuCcu_Ndivider_91,         /**< \brief  N-divider 91  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   454      IfxScuCcu_Ndivider_92,         /**< \brief  N-divider 92  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   455      IfxScuCcu_Ndivider_93,         /**< \brief  N-divider 93  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   456      IfxScuCcu_Ndivider_94,         /**< \brief  N-divider 94  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   457      IfxScuCcu_Ndivider_95,         /**< \brief  N-divider 95  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   458      IfxScuCcu_Ndivider_96,         /**< \brief  N-divider 96  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   459      IfxScuCcu_Ndivider_97,         /**< \brief  N-divider 97  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   460      IfxScuCcu_Ndivider_98,         /**< \brief  N-divider 98  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   461      IfxScuCcu_Ndivider_99,         /**< \brief  N-divider 99  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   462      IfxScuCcu_Ndivider_100,        /**< \brief  N-divider 100  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   463      IfxScuCcu_Ndivider_101,        /**< \brief  N-divider 101  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   464      IfxScuCcu_Ndivider_102,        /**< \brief  N-divider 102  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   465      IfxScuCcu_Ndivider_103,        /**< \brief  N-divider 103  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   466      IfxScuCcu_Ndivider_104,        /**< \brief  N-divider 104  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   467      IfxScuCcu_Ndivider_105,        /**< \brief  N-divider 105  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   468      IfxScuCcu_Ndivider_106,        /**< \brief  N-divider 106  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   469      IfxScuCcu_Ndivider_107,        /**< \brief  N-divider 107  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   470      IfxScuCcu_Ndivider_108,        /**< \brief  N-divider 108  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   471      IfxScuCcu_Ndivider_109,        /**< \brief  N-divider 109  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   472      IfxScuCcu_Ndivider_110,        /**< \brief  N-divider 110  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   473      IfxScuCcu_Ndivider_111,        /**< \brief  N-divider 111  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   474      IfxScuCcu_Ndivider_112,        /**< \brief  N-divider 112  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   475      IfxScuCcu_Ndivider_113,        /**< \brief  N-divider 113  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   476      IfxScuCcu_Ndivider_114,        /**< \brief  N-divider 114  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   477      IfxScuCcu_Ndivider_115,        /**< \brief  N-divider 115  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   478      IfxScuCcu_Ndivider_116,        /**< \brief  N-divider 116  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   479      IfxScuCcu_Ndivider_117,        /**< \brief  N-divider 117  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   480      IfxScuCcu_Ndivider_118,        /**< \brief  N-divider 118  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   481      IfxScuCcu_Ndivider_119,        /**< \brief  N-divider 119  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   482      IfxScuCcu_Ndivider_120,        /**< \brief  N-divider 120  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   483      IfxScuCcu_Ndivider_121,        /**< \brief  N-divider 121  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   484      IfxScuCcu_Ndivider_122,        /**< \brief  N-divider 122  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   485      IfxScuCcu_Ndivider_123,        /**< \brief  N-divider 123  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   486      IfxScuCcu_Ndivider_124,        /**< \brief  N-divider 124  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   487      IfxScuCcu_Ndivider_125,        /**< \brief  N-divider 125  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   488      IfxScuCcu_Ndivider_126,        /**< \brief  N-divider 126  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   489      IfxScuCcu_Ndivider_127,        /**< \brief  N-divider 127  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   490      IfxScuCcu_Ndivider_128         /**< \brief  N-divider 128  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   491  } IfxScuCcu_Ndivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   492  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   493  /** \brief MODULE_SCU.PLLCON0.B.PDIV, specifies the P-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   495  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   496  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   497      IfxScuCcu_Pdivider_1 = 0,      /**< \brief  P-divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   498      IfxScuCcu_Pdivider_2,          /**< \brief  P-divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   499      IfxScuCcu_Pdivider_3,          /**< \brief  P-divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   500      IfxScuCcu_Pdivider_4,          /**< \brief  P-divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   501      IfxScuCcu_Pdivider_5,          /**< \brief  P-divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   502      IfxScuCcu_Pdivider_6,          /**< \brief  P-divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   503      IfxScuCcu_Pdivider_7,          /**< \brief  P-divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   504      IfxScuCcu_Pdivider_8           /**< \brief  P-divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   505  } IfxScuCcu_Pdivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   506  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   507  /** \brief SysPll & Per Pll input clock selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   508   * SYSPLLCON0.B.INSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   509   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   510  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   511  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   512      IfxScuCcu_PllInputClockSelection_fOsc1   = 0, /**< \brief Backup clock select */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   513      IfxScuCcu_PllInputClockSelection_fOsc0   = 1, /**< \brief fOsc0 or XTAL clock select */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   514      IfxScuCcu_PllInputClockSelection_fSysclk = 2  /**< \brief fOsc1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   515  } IfxScuCcu_PllInputClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   516  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   517  /** \brief trap request type
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   518   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   519  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   520  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   521      IfxScuCcu_Traprequest_esr0 = 0,  /**< \brief external service request 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   522      IfxScuCcu_Traprequest_esr1,      /**< \brief external service request 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   523      IfxScuCcu_Traprequest_trap2,     /**< \brief trap2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   524      IfxScuCcu_Traprequest_smu        /**< \brief safety management unit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   525  } IfxScuCcu_Traprequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   526  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   527  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   528  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   529  /** \brief modulation enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   530   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   531  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   532  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   533      IfxScuCcu_ModEn_disabled = 0,  /**< \brief disable modulation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   534      IfxScuCcu_ModEn_enabled  = 1   /**< \brief enable modulation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   535  } IfxScuCcu_ModEn;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   537  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   538  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   539  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   541  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   542   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   543  /** \brief Configuration structure type for the Per Pll step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   544   * This structure must be used to configure the P, N and K2, K3 dividers .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   545   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   546  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   547  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   548      uint8 pDivider;              /**< \brief P divider value for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   549      uint8 nDivider;              /**< \brief N divider value for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   550      uint8 k2Divider;             /**< \brief K2 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   551      uint8 k3Divider;             /**< \brief K3 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   552      uint8 k3DividerBypass;       /**< \brief Divider Bypass
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   553                                    * 0 - The divide by block in front of the K3-Divider is not bypassed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   554                                    * 1-  The divide by block in front of the K3-Divider is bypassed. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   555  } IfxScuCcu_PerPllConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   556  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   557  /** \brief Configuration structure type for the Pll initial step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   558   * This structure must be used to configure the P, N and K2 dividers for initial step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   559   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   560  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   561  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   562      uint8 pDivider;        /**< \brief P divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   563      uint8 nDivider;        /**< \brief N divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   564      uint8 k2Divider;       /**< \brief K2 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   565  } IfxScuCcu_SysPllConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   567  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   568  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   569  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   570   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   571  /** \brief Configuration structure type for CCUCON registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   573  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   574  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   575      uint32 value;       /**< \brief CCUCON Register value to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   576      uint32 mask;        /**< \brief CCUCON Mask to select the bit fields to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   577  } IfxScuCcu_CcuconRegConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   578  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   579  /** \brief Configuration structure type for the Pll Steps for current jump control.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   581  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   582  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   583      uint8   k2Step;         /**< \brief K2 divider value for this step. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   584      float32 waitTime;       /**< \brief Wait time for for this step. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   585  } IfxScuCcu_PllStepConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   587  /** \brief Configuration structure type for the Pll Parameters.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   589  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   590  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   591      uint32                           xtalFrequency;                /**< \brief Xtal frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   592      IfxScuCcu_PllInputClockSelection pllInputClockSelection;       /**< \brief Pll input clock selection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   593      IfxScuCcu_SysPllConfig           sysPllConfig;                 /**< \brief System PLL Configurations */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   594      IfxScuCcu_PerPllConfig           perPllConfig;                 /**< \brief Peripheral PLL Configurations */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   595  } IfxScuCcu_pllsParameterConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   596  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   597  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   599  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   600   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   601  /** \brief Configuration structure type for the Flash waitstate configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   602   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   603  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   604  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   605      uint32 value;       /**< \brief FLASH.FCON Register value to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   606      uint32 mask;        /**< \brief FLASH.FCON Mask to select the bit fields to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   607  } IfxScuCcu_FlashWaitstateConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   609  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   610  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   611  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   612   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   613  /** \brief Configuration structure type for all the CCUCON registers to configure clock distribution.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   615  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   616  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   617      IfxScuCcu_CcuconRegConfig ccucon0;        /**< \brief CCUCON0 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   618      IfxScuCcu_CcuconRegConfig ccucon1;        /**< \brief CCUCON1 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   619      IfxScuCcu_CcuconRegConfig ccucon2;        /**< \brief CCUCON2 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   620      IfxScuCcu_CcuconRegConfig ccucon5;        /**< \brief CCUCON5 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   621      IfxScuCcu_CcuconRegConfig ccucon6;        /**< \brief CCUCON6 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   622      IfxScuCcu_CcuconRegConfig ccucon7;        /**< \brief CCUCON7 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   623      IfxScuCcu_CcuconRegConfig ccucon8;        /**< \brief CCUCON8 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   624      IfxScuCcu_CcuconRegConfig ccucon9;        /**< \brief CCUCON9 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   625      IfxScuCcu_CcuconRegConfig ccucon10;       /**< \brief CCUCON10 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   626      IfxScuCcu_CcuconRegConfig ccucon11;       /**< \brief CCUCON11 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   627  } IfxScuCcu_ClockDistributionConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   629  /** \brief Configuration structure type for the Pll Initial Step Configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   631  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   633      IfxScuCcu_pllsParameterConfig pllsParameters;       /**< \brief Configuration Parameters for both PLLs */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   634      float32                       waitTime;             /**< \brief Wait time for for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   635  } IfxScuCcu_InitialStepConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   637  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   638   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   639  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   640  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   641      uint8                              numOfSteps;       /**< \brief Number of PLL divider steps during clock throttling */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   642      IFX_CONST IfxScuCcu_PllStepConfig *pllSteps;         /**< \brief Pointer to the array of Pll divider step configuration. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   643  } IfxScuCcu_PllThrottleConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   644  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   645  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   647  /** \brief modulation config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   648   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   649  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   650  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   651      IfxScuCcu_ModEn               Mod_Enable;       /**< \brief modulation enable */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   652      IfxScuCcu_ModulationAmplitude Mod_Amp;          /**< \brief modulation amplitude */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   653  } IfxScuCcu_Mod_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   655  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   656   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   657  /** \brief Configuration structure SCU module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   658   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   659  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   660  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   661      IfxScuCcu_InitialStepConfig               pllInitialStepConfig;           /**< \brief Configuration of first step which is same as internal osc frequency. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   662      IfxScuCcu_PllThrottleConfig               sysPllThrottleConfig;           /**< \brief Configuration of PLL throttling. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   663      IfxScuCcu_ClockDistributionConfig         clockDistribution;              /**< \brief Configuration of of bus clocks and other module clock distribution. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   664      IFX_CONST IfxScuCcu_FlashWaitstateConfig *flashFconWaitStateConfig;       /**< \brief Configuration of flash waitstate */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   665      IFX_CONST IfxScuCcu_Mod_Config           *modulationConfig;               /**< \brief modulation configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   666  } IfxScuCcu_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   668  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   669  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   670  /** \brief structure holding the RGain parameters for modulation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   671   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   672  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   673  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   674      float32 RGainNom;       /**< \brief RGain Nominal value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   675      uint16  RGainHex;       /**< \brief RGain Hex value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   676  } IfxScuCcu_RGain_Values;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   678  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   679   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   680  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   681  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   682  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   683  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   684  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   685  /** \brief API to wait for requested duration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   686   * Note: IfxScuCcu_wait shall not use STM in future, because we can guarantee that STM is enabled after reset but  If PLL init is called for changing the frequency during runtime, there is no guarantee that STM is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   687   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   688   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   689  IFX_INLINE void IfxScuCcu_wait(float32 timeSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   690  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   691  /** \brief API to wait for requested duration along with watchdog service to avoid any reset case during startup of the chip.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   692   * Note: IfxScuCcu_wait shall not use STM in future, because we can guarantee that STM is enabled after reset but  If PLL init is called for changing the frequency during runtime, there is no guarantee that STM is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   693   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   694   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   695  IFX_INLINE void IfxScuCcu_waitWithWdtService(float32 timeSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   696  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   697  /** \brief API to configure the LPDIV value to enter into Low Power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   698   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   699   * Caution:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   700   * write to LPDIV with non-zero division ratio will cause system to enter low power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   701   * Low power mode will affect different SPBDIV and SRIDIV ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   703   * The original CCUCON0 ratios should be preserved by user prior to calling this function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   704   * The "normal" CCUCON0 ratios have to be passed to API: "IfxScuCcu_switchToNormalMode" to go back to the original division ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   705   * \param lpDiv Low Power Division Ratio
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   706   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   707   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   708  IFX_INLINE void IfxScuCcu_switchToLowPowerMode(IfxScuCcu_LowPowerDivRatio lpDiv);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   710  /** \brief API to switch back to normal mode from low power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   711   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   712   * Caution:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   713   * The original CCUCON0 setting has to be saved by user prior to entering Low Power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   714   * Pass the original CCUCON0 register as a whole word to this function to restore the normal settings.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   715   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   716   * Ramp back to normal mode is done in steps to avoid sudden jump in frequency and power usage.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   717   * \param ccucon0 CCUCON0 values at normal mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   718   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   720   * Switch to low power mode and back using iLLD functions as below
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   721   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   722   *     uint32 ccucon0 = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   723   *     IfxScuCcu_LowPowerDivRatio lpDiv = IfxScuCcu_LowPowerDivRatio_divBy30;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   724   *     IfxScuCcu_switchToLowPowerMode(lpDiv);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   725   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   726   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   727   * Switch back to normal mode  with the saved ccucon0 value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   728   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   729   *     IfxScuCcu_switchToNormalMode(ccucon0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   730   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   731   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   733  IFX_INLINE void IfxScuCcu_switchToNormalMode(const uint32 ccucon0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   735  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   736  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   737  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   738   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   739  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   740  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   741  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   742  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   743  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   744  /** \brief API to get ADAS divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   745   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   746   * \return ADAS frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   748  IFX_INLINE float32 IfxScuCcu_getAdasFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   750  /** \brief API to get Adc (EVADC, EDSADC)  frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   751   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   752   * \return Adc frequency (fADC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   753   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   754  IFX_INLINE float32 IfxScuCcu_getAdcFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   755  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   756  /** \brief API to get ASCLINF divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   757   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   758   * \return AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   759   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   760  IFX_INLINE float32 IfxScuCcu_getAsclinFFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   762  /** \brief API to get EBU frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   763   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   764   * \return EBU frequency (fEBU) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   765   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   766  IFX_INLINE float32 IfxScuCcu_getEbuFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   768  /** \brief API to get EVR Oscillator frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   769   * This API returns the constant which is specific to the ScuCcu of the controller.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   770   * \return EVR Oscillator frequency (fBACK or fEVR) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   771   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   772  IFX_INLINE float32 IfxScuCcu_getEvrFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   774  /** \brief API to get GETH divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   775   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   776   * \return GETH frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   777   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   778  IFX_INLINE float32 IfxScuCcu_getGethFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   780  /** \brief API to get GTMdivider frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   781   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   782   * return GTM frequency (fGTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   783   * \return Gtm Frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   784   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   785  IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   787  /** \brief API to get I2C frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   788   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   789   * \return I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   790   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   791  IFX_INLINE float32 IfxScuCcu_getI2cFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   792  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   793  /** \brief API to get MCANH divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   794   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   795   * \return MCANH frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   796   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   797  IFX_INLINE float32 IfxScuCcu_getMcanhFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   799  /** \brief API to get Oscillator 0 frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   800   * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   801   * \return Osc0 frequency (fOSC0) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   802   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   803  IFX_INLINE float32 IfxScuCcu_getOsc0Frequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   804  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   805  /** \brief API to get Oscillator 0 frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   806   * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   807   * \return Osc frequency (fOSC) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   808   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   809  IFX_INLINE float32 IfxScuCcu_getOscFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   811  /** \brief Returns the clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   812   * \return Clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   813   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   814  IFX_INLINE IfxScuCcu_PllInputClockSelection IfxScuCcu_getSourceSelection(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   816  /** \brief API to get STM divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   817   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   818   * \return STM frequency (fSTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   819   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   820  IFX_INLINE float32 IfxScuCcu_getStmFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   821  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   822  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   823  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   824  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   825  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   826  /** \brief API to get ASCLINS divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   827   * This API returns the ASCLINS frequency  based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   828   * \return AsclinS frequency (fASCLINS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   829   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   830  IFX_EXTERN float32 IfxScuCcu_getAsclinSFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   831  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   832  /** \brief API to get BBB divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   833   * This API returns the BBBDivider frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   834   * \return BBB frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   835   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   836  IFX_EXTERN float32 IfxScuCcu_getBbbFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   838  /** \brief This API returns the Cpu frequency based on the divider value in CCUCON register and fSource frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   839   * \param cpu CPU number for which effective fCPU is sought
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   840   * \return Cpu[x] frequency in Hz, where x is cpu number passed as parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   841   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   842  IFX_EXTERN float32 IfxScuCcu_getCpuFrequency(const IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   843  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   844  /** \brief API to get FSI2 divider frequency in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   845   * This API returns the fFSI2 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   846   * \return FSI2 frequency (fFSI2) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   847   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   848  IFX_EXTERN float32 IfxScuCcu_getFsi2Frequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   849  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   850  /** \brief API to get FSI divider frequency in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   851   * This API returns the fFSI based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   852   * \return FSI frequency (fFSI) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   853   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   854  IFX_EXTERN float32 IfxScuCcu_getFsiFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   855  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   856  /** \brief API to get MCAN divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   857   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   858   * \return Mcan frequency (fMCAN) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   859   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   860  IFX_EXTERN float32 IfxScuCcu_getMcanFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   861  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   862  /** \brief get source frequency fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   863   * This API returns the source frequency based on the configurations with CCUCON register configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   864   * \return Module frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   865   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   866  IFX_EXTERN float32 IfxScuCcu_getModuleFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   867  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   868  /** \brief API to get MSC divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   869   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   870   * \return Msc frequency (fMSC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   871   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   872  IFX_EXTERN float32 IfxScuCcu_getMscFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   873  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   874  /** \brief API to get actual PER PLL1  frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   875   * This API returns the PER PLL1 frequency based on the K2 divider value in PLLCON and the VCO frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   876   * Fpll1= (Fosc*N)/(P*K2)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   877   * \return PER PLL1 (K2 Divider) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   878   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   879  IFX_EXTERN float32 IfxScuCcu_getPerPllFrequency1(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   880  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   881  /** \brief API to get actual PER PLL2 (K3 Divider) frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   882   * This API returns the PER PLL2 frequency based on the K3 divider value in PLLCON and the VCO frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   883   * Fpll2= (Fosc*N)/(P*K3*1.6)  // DIVBY = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   884   * Fpll2= (Fosc*N)/(P*K3*2)  // DIVBY = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   885   * \return PER PLL2 (K3 Divider ) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   886   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   887  IFX_EXTERN float32 IfxScuCcu_getPerPllFrequency2(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   888  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   889  /** \brief API to get actual Sys PLL output frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   890   * This API returns the based on the divider values in CCUCON, PLLCON registers and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   891   * \return System Pll (fSysPLL) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   892   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   893  IFX_EXTERN float32 IfxScuCcu_getPllFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   894  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   895  /** \brief API to get Qspi divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   896   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   897   * \return Qspi frequency (fQspi) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   898   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   899  IFX_EXTERN float32 IfxScuCcu_getQspiFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   900  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   901  /** \brief get source frequency fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   902   * This API returns the source frequency based on the configurations with CCUCON register configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   903   * \param fsource fsource selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   904   * \return Effective fSOURCE in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   905   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   906  IFX_EXTERN float32 IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource fsource);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   907  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   908  /** \brief API to get SPB divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   909   * This API returns the based on fSOURCE and also on Low power divider mode and/or SPBDIV divider value in CCUCON registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   910   * \return SPB frequency (fSPB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   911   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   912  IFX_EXTERN float32 IfxScuCcu_getSpbFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   913  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   914  /** \brief API to get SRI divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   915   * This API returns the Sri frequency based on the divider values in CCUCON registers and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   916   * \return Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   917   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   918  IFX_EXTERN float32 IfxScuCcu_getSriFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   920  /** \brief API to set ADAS frequency (with ADAS divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   921   * This API configure adas divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   922   * \param adasFreq ADAS frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   923   * \return Actual Adas frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   924   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   925  IFX_EXTERN float32 IfxScuCcu_setAdasFrequency(float32 adasFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   926  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   927  /** \brief API to set ASCLINF frequency (with ASCLINF divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   928   * This API configure ASCLINF divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   929   * \param asclinFFreq AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   930   * \return Actual AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   931   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   932  IFX_EXTERN float32 IfxScuCcu_setAsclinFFrequency(float32 asclinFFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   933  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   934  /** \brief API to set ASCLINS frequency (with ASCLINS divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   935   * This API configure ASCLINS divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   936   * \param asclinSFreq Desired AscLinS frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   937   * \return Actual AsclinS frequency (fASCLINS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   938   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   939  IFX_EXTERN float32 IfxScuCcu_setAsclinSFrequency(float32 asclinSFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   940  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   941  /** \brief API to set BBB frequency (with Bbb divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   942   * This API configure Bbb divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   943   * \param bbbFreq Bbb frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   944   * \return Actual Bbb frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   945   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   946  IFX_EXTERN float32 IfxScuCcu_setBbbFrequency(float32 bbbFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   947  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   948  /** \brief API to set CPU frequency (with CPU divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   949   * This API configure CPU divider values in CCUCON registers. The actual frequency is always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   950   * \param cpu CPU number for which fCPU to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   951   * \param cpuFreq Desired CPU frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   952   * \return Actual CPU[x] frequency in Hz, where x is the cpu number passed as parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   953   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   954  IFX_EXTERN float32 IfxScuCcu_setCpuFrequency(IfxCpu_ResourceCpu cpu, float32 cpuFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   955  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   956  /** \brief API to set FSI2 frequency (with FSI2 divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   957   * This API configure Fsi2 divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   958   * \param fsi2Freq FSI2 frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   959   * \return Actual Fsi2 frequency (fFSI2) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   960   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   961  IFX_EXTERN float32 IfxScuCcu_setFsi2Frequency(float32 fsi2Freq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   962  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   963  /** \brief API to set FSI frequency (with FSI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   964   * This API configure Fsi divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   965   * \param fsiFreq FSI frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   966   * \return Actual Fsi frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   967   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   968  IFX_EXTERN float32 IfxScuCcu_setFsiFrequency(float32 fsiFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   969  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   970  /** \brief API to set GETH frequency (with GETH divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   971   * This API configure geth divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   972   * \param gethFreq GETH frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   973   * \return Actual Geth frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   974   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   975  IFX_EXTERN float32 IfxScuCcu_setGethFrequency(float32 gethFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   976  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   977  /** \brief API to set GTM frequency (with GTM divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   978   * This API configure GTM divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   979   * \param gtmFreq Desired GTM frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   980   * \return Actual GTM frequency in HZ
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   981   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   982  IFX_EXTERN float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   983  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   984  /** \brief API to set I2C frequency (with I2C divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   985   * This API configure adas divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   986   * \param i2cFreq I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   987   * \return Actual I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   988   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   989  IFX_EXTERN float32 IfxScuCcu_setI2cFrequency(float32 i2cFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   990  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   991  /** \brief API to set MCAN frequency (with MCAN divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   992   * This API configure MCAN divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   993   * \param mcanFreq Desired MSC frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   994   * \return Actual Mcan frequency (fMCAN) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   995   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   996  IFX_EXTERN float32 IfxScuCcu_setMcanFrequency(float32 mcanFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   997  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   998  /** \brief API to set MCANH frequency (with MCANH divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   999   * This API configure mcanh divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1000   * \param mcanhFreq MCANH frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1001   * \return Actual MCanh frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1002   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1003  IFX_EXTERN float32 IfxScuCcu_setMcanhFrequency(float32 mcanhFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1004  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1005  /** \brief API to set MSC frequency (with MSC divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1006   * This API configure MSC divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1007   * \param mscFreq Desired MSC frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1008   * \return Actual Msc frequency (fMSC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1009   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1010  IFX_EXTERN float32 IfxScuCcu_setMscFrequency(float32 mscFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1011  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1012  /** \brief API to set QSPI frequency (with QSPI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1013   * This API configure Qspi divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1014   * \param qspiFreq Desired QSPI frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1015   * \return Actual Qspi frequency (fQspi) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1016   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1017  IFX_EXTERN float32 IfxScuCcu_setQspiFrequency(float32 qspiFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1018  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1019  /** \brief API to set SPB frequency (with SPB divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1020   * This API configure SPB divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1021   * \param spbFreq Desired SPB frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1022   * \return Actual SPB frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1023   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1024  IFX_EXTERN float32 IfxScuCcu_setSpbFrequency(float32 spbFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1025  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1026  /** \brief API to set SRI frequency (with SRI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1027   * This API configure Sri divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1028   * \param sriFreq Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1029   * \return Actual Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1030   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1031  IFX_EXTERN float32 IfxScuCcu_setSriFrequency(float32 sriFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1032  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1033  /** \brief API to set STM frequency (with STM divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1034   * This API configure Stm divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1035   * \param stmFreq Stm frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1036   * \return Actual Stm frequency (fSTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1037   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1038  IFX_EXTERN float32 IfxScuCcu_setStmFrequency(float32 stmFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1039  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1040  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1041  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1042  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1043   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1044  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1045  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1046  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1047  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1048  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1049  /** \brief This inline function configures the Ccu SYS PLLs initial step and PER PLL.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1050   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1051  IFX_INLINE boolean IfxScuCcu_configureCcuInitialStep(const IfxScuCcu_InitialStepConfig *pllInitStepCfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1052  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1053  /** \brief Inlined API for clock distribution
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1054   * For each CCUCON register update the configured value with the mask.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1055   * \param clockDistributionConfig pointer to clock distribution structure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1056   * \return TRUE: Operation successful, FALSE: Operation Failure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1057   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1058  IFX_INLINE boolean IfxScuCcu_distributeClockInline(const IfxScuCcu_ClockDistributionConfig *clockDistributionConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1059  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1060  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1061  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1062  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1063  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1064  /** \brief API for clock distribution.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1065   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1066   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1067  IFX_EXTERN void IfxScuCcu_distributeClock(IfxScuCcu_ClockDistributionConfig *clockDistributionConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1068  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1069  /** \brief API to initialize the SCU Clock Control Unit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1070   * This API initialize the Sys PLL with ramp steps, BUS dividers and Per PLL for the configuration provided by the configuration structure.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1071   * FSyspll = (Fosc * Nsys)/(Psys * K2sys);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1072   * Fpll1= (Fosc * Nper)/(Pper * K2per);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1073   * Fpll2= (Fosc * Nper)/(Pper * K3per * 1.6); // if DIVBY = 0, else Fpll2= (Fosc * Nper)/(Pper * K3per * 2) // if DIVBY = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1074   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1075   * Note: Following SMU alarms are disabled before the PLL configuration and Enabled at the end of PLL lock in the function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1076   * PLL0,1,2 clock out of range frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1077   * PLL0,1 VCO loss of lock event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1078   * System PLL Oscillator Watchdog, input clock out of range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1079   * The application should store/restore these alarm configurations if required.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1080   * \param config Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1081   * \return Error status of the ScuCcu initialization process.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1082   * \retval TRUE: If an error occurred during initialization.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1083   * \retval FALSE: If initialization was successful.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1084   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1085  IFX_EXTERN boolean IfxScuCcu_init(const IfxScuCcu_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1086  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1087  /** \brief Initializes the clock configuration with default values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1088   * \param cfg Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1089   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1090   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1091  IFX_EXTERN void IfxScuCcu_initConfig(IfxScuCcu_Config *cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1092  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1093  /** \brief API to switch to Backup clock from the current PLL frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1094   * \param cfg Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1095   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1096   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1097  IFX_EXTERN void IfxScuCcu_switchToBackupClock(const IfxScuCcu_Config *cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1098  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1099  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1100  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1101  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1102  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1103  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1105  /** \brief Clear the trap status flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1106   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1107   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1108   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1109  IFX_INLINE void IfxScuCcu_clearTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1110  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1111  /** \brief Get trap disable flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1112   * \param cpuIndex Cpu index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1113   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1114   * \return Trap request can be generated or not.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1115   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1116  IFX_INLINE boolean IfxScuCcu_getTrapDisableFlag(IfxCpu_ResourceCpu cpuIndex, IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1117  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1118  /** \brief Get the trap status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1119   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1120   * \return Trap was requested or not.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1121   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1122  IFX_INLINE boolean IfxScuCcu_getTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1124  /** \brief Set the trap disable flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1125   * \param cpuIndex Cpu index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1126   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1127   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1129  IFX_INLINE void IfxScuCcu_setTrapDisableFlag(IfxCpu_ResourceCpu cpuIndex, IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1130  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1131  /** \brief Set the trap status flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1132   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1134   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1135  IFX_INLINE void IfxScuCcu_setTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1136  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1137  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1138   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1139  IFX_INLINE boolean IfxScuCcu_throttleSysPllClockInline(const IfxScuCcu_PllThrottleConfig *pllThrottleConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1140  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1141  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1142  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1143  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1145  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1146   * \param modamp modulation amplitude
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1147   * \param RGain_P RGain values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1148   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1149   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1150  IFX_EXTERN void IfxScuCcu_calRGainParameters(IfxScuCcu_ModulationAmplitude modamp, IfxScuCcu_RGain_Values *RGain_P);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1151  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1152  /** \brief initialize modulation parameters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1153   * \param Mod_Cfg modulation configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1156  IFX_EXTERN void IfxScuCcu_modulation_init(const IfxScuCcu_Mod_Config *Mod_Cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1157  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1158  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1159   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1160   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1161  IFX_EXTERN void IfxScuCcu_throttleSysPllClock(IfxScuCcu_PllThrottleConfig *pllThrottleConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1162  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1163  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1164  /*-------------------Global Exported Variables/Constants----------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1165  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1167  /** \brief maps to the IfxScuCcu_ModulationAmplitude enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1169  IFX_EXTERN IFX_CONST float32 IfxScuCcu_MA_percent[IfxScuCcu_ModulationAmplitude_count];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1170  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1171  /** \brief Configuration structure for SCU CCU driver.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1172   * The values of this structure are defined as # defined macros in the implementation of Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1173   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1174  IFX_EXTERN IFX_CONST IfxScuCcu_Config     IfxScuCcu_defaultClockConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1176  /** \brief default modulation config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1177   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1178  IFX_EXTERN IFX_CONST IfxScuCcu_Mod_Config IfxScuCcu_defaultModConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1179  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1180  IFX_EXTERN uint32                         IfxScuCcu_xtalFrequency;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1181  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1182  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1183  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1184  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1185  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1186  IFX_INLINE void IfxScuCcu_clearTrapStatusFlag(IfxScuCcu_Traprequest request)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1187  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1188      uint32 trapclear = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1189      SCU_TRAPCLR.U |= (trapclear << request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1190  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1193  IFX_INLINE boolean IfxScuCcu_configureCcuInitialStep(const IfxScuCcu_InitialStepConfig *pllInitStepCfg)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1194  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1195      uint8                                initError = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1196      uint16                               endinitSfty_pw;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1197  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1198      uint32                               timeoutCycleCount;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1199      const IfxScuCcu_pllsParameterConfig *pllsParamCfg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1200      pllsParamCfg   = &pllInitStepCfg->pllsParameters;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1201      /*get the watch-dog passwords for usage with this function*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1202      endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1203  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1204      /* Reset Safety ENDINIT, SCU_CCUCON registers are protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1205      IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1206  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1207      timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1208  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1209      while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1210      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1211          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1212      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1213  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1214      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1215          Ifx_SCU_CCUCON0 scuCcucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1216          scuCcucon0.U        = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1217          scuCcucon0.B.CLKSEL = 0; /*Select the EVR as fsource0/1/2 for the clock distribution */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1218          scuCcucon0.B.UP     = 1; /*Update the ccucon0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1219          SCU_CCUCON0.U       = scuCcucon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1220      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1221  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1222      timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1224      while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1225      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1226          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1227      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1229      /*Disable SMU Alarms */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1230      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1231          SMU_KEYS.U    = (uint32)0xBCU;        /* Enable access to SMU registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1232          SMU_AG8CF0.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1233          SMU_AG8CF1.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1234          SMU_AG8CF2.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1235          SMU_KEYS.U    = (uint32)0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1236      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1237  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1238      /* Power down the both the PLLs before configuring registers*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1239      /* Both the PLLs are powered down to be sure for asynchronous PLL registers update cause no glitches */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1240      SCU_SYSPLLCON0.B.PLLPWD = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1241      SCU_PERPLLCON0.B.PLLPWD = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1242  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1243      timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1244  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1245      while ((SCU_SYSPLLSTAT.B.PWDSTAT == 0) || (SCU_PERPLLSTAT.B.PWDSTAT == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1246      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1247          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1248      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1249  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1250      /* Now configure the oscillator, required oscillator mode is external crystal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1252      if ((pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fOsc0) || (pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fSysclk))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1253  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1254      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1255          Ifx_SCU_OSCCON scuOsccon;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1256          scuOsccon.U      = SCU_OSCCON.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1257  #if (IFX_CFG_SCU_EXT_CLOCK == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1258          scuOsccon.B.MODE = 2U;   /* external clock selected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1259  #else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1260          scuOsccon.B.MODE = 0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1261  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1262  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1263          scuOsccon.B.OSCVAL = (uint32)(pllsParamCfg->xtalFrequency / 1000000U) - 15; /*XTAL range 16MHz to 40MHz*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1264          /*Note: Oscillator Watchdog Reset (OSCRES) is not required when the PLLs are powered down*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1265          SCU_OSCCON.U       = scuOsccon.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1266      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1267  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1268      /* Configure the initial steps for the system PLL*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1269      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1270          Ifx_SCU_SYSPLLCON0 sysPllCon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1271          sysPllCon0.U       = SCU_SYSPLLCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1272          sysPllCon0.B.PDIV  = pllsParamCfg->sysPllConfig.pDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1273          sysPllCon0.B.NDIV  = pllsParamCfg->sysPllConfig.nDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1274          sysPllCon0.B.INSEL = pllsParamCfg->pllInputClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1275          SCU_SYSPLLCON0.U   = sysPllCon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1276      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1277  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1278      /* Configure the initial steps for the peripheral PLL*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1279      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1280          Ifx_SCU_PERPLLCON0 scuPerPllCon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1281          scuPerPllCon0.U       = SCU_PERPLLCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1282          scuPerPllCon0.B.DIVBY = pllsParamCfg->perPllConfig.k3DividerBypass;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1283          scuPerPllCon0.B.PDIV  = pllsParamCfg->perPllConfig.pDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1284          scuPerPllCon0.B.NDIV  = pllsParamCfg->perPllConfig.nDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1285          SCU_PERPLLCON0.U      = scuPerPllCon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1286      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1288      /* Power up the both the PLLs before configuring registers*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1289      SCU_SYSPLLCON0.B.PLLPWD = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1290      SCU_PERPLLCON0.B.PLLPWD = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1292      timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1294      while ((SCU_SYSPLLSTAT.B.PWDSTAT == 1) || (SCU_PERPLLSTAT.B.PWDSTAT == 1))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1295      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1296          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1297      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1298  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1299      timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1301      while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1302             (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1303             (SCU_PERPLLSTAT.B.K3RDY == 0U))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1304      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1305          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1306      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1307  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1308      SCU_SYSPLLCON1.B.K2DIV = pllsParamCfg->sysPllConfig.k2Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1309      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1310          Ifx_SCU_PERPLLCON1 scuPerPllCon1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1311          scuPerPllCon1.U       = SCU_PERPLLCON1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1312          scuPerPllCon1.B.K2DIV = pllsParamCfg->perPllConfig.k2Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1313          scuPerPllCon1.B.K3DIV = pllsParamCfg->perPllConfig.k3Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1314          SCU_PERPLLCON1.U      = scuPerPllCon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1315      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1316  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1317      timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1319      while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1320             (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1321             (SCU_PERPLLSTAT.B.K3RDY == 0U))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1322      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1323          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1324      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1325  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1326      /*Check if the OSC frequencies are in the limit*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1327      timeoutCycleCount = IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1329      while ((SCU_OSCCON.B.PLLLV == 0) && (SCU_OSCCON.B.PLLHV == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1330      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1331          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1332      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1333  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1334      /* Now start PLL locking for latest set values*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1335      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1336          SCU_SYSPLLCON0.B.RESLD = 1;             /* Restart Sys PLL lock detection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1337          SCU_PERPLLCON0.B.RESLD = 1;             /* Restart Per PLL lock detection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1338  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1339          timeoutCycleCount      = IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1340  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1341          while ((SCU_SYSPLLSTAT.B.LOCK == 0) || (SCU_PERPLLSTAT.B.LOCK == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1342          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1343              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1344          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1345      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1346      /*Enable SMU Alarms */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1347      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1348          SMU_KEYS.U = (uint32)0xBCU;           /* Enable access to SMU registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1349          SMU_CMD.U  = (uint32)0x00000005;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1350          SMU_AG8.U  = IFXSCUCCU_SMUALARM_MASK; /* Clear SMU Alarms*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1351          SMU_KEYS.U = (uint32)0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1352      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1353      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1354          Ifx_SCU_CCUCON0 scu_ccucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1355          scu_ccucon0.U        = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1356          scu_ccucon0.B.CLKSEL = 1; /*Select the PLLs for fsource0/1/2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1357          scu_ccucon0.B.UP     = 1; /*Update the ccucon0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1358  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1359          timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1360  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1361          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1362          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1363              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1364          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1365  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1366          SCU_CCUCON0.U     = scu_ccucon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1367  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1368          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1369  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1370          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1371          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1372              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1373          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1374      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1375  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1376      IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1377      return (boolean)initError;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1378  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1379  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1380  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1381  IFX_INLINE boolean IfxScuCcu_distributeClockInline(const IfxScuCcu_ClockDistributionConfig *clockDistributionConfig)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1382  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1383      uint16 endinitSfty_pw;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1384      uint32 timeoutCycleCount;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1385      uint32 initError = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1386  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1387      /*get the watch-dog passwords for usage with this function*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1388      endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1389  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1390      /* Reset Safety ENDINIT, SCU_CCUCON registers are protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1391      IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1393      /*Configure the clock distribution */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1394      {                                                    /*Write CCUCON0 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1395          Ifx_SCU_CCUCON0 ccucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1396          ccucon0.U         = SCU_CCUCON0.U & ~clockDistributionConfig->ccucon0.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1397          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1398          ccucon0.U        |= (clockDistributionConfig->ccucon0.mask & clockDistributionConfig->ccucon0.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1399          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1400  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1401          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1402          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1403              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1404          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1405  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1406          SCU_CCUCON0.U     = ccucon0.U;      /*Set update bit explicitly to make above configurations effective */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1407          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1408  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1409          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1410          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1411              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1412          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1413      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1414      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1415          /*Write CCUCON1 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1416          Ifx_SCU_CCUCON1 ccucon1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1417          ccucon1.U = SCU_CCUCON1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1419          if (ccucon1.B.CLKSELMCAN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1420              || ccucon1.B.CLKSELMSC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1421              || ccucon1.B.CLKSELQSPI)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1422          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1423              /* Non Zero ClockSel exists - set to Zero */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1424              /* CAUTION: this would briefly reset and set all clocks in CCUCON1! */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1425              ccucon1.U  = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1426              /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1427              ccucon1.U |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1428  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1429              /* set Clock selects to 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1430              ccucon1.B.CLKSELMCAN = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1431              ccucon1.B.CLKSELMSC  = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1432              ccucon1.B.CLKSELQSPI = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1434              timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1435  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1436              while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1437              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1438                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1439              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1441              SCU_CCUCON1.U     = ccucon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1442  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1443              timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1444  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1445              while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1446              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1447                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1448              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1449          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1450  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1451          ccucon1.U         = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1452          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1453          ccucon1.U        |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1454  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1455          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1456  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1457          while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1458          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1459              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1460          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1461  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1462          SCU_CCUCON1.U     = ccucon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1463  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1464          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1465  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1466          while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1467          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1468              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1469          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1470      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1472      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1473          /*Write CCUCON2 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1474          Ifx_SCU_CCUCON2 ccucon2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1475          ccucon2.U = SCU_CCUCON2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1477          if (ccucon2.B.CLKSELASCLINS)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1478          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1479              /* Non Zero ClockSel exists - set to Zero */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1480              /* CAUTION: this would briefly reset and set ASCLINS clock in CCUCON2! */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1481              ccucon2.U               = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1482              /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1483              ccucon2.U              |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1484  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1485              ccucon2.B.CLKSELASCLINS = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1486  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1487              timeoutCycleCount       = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1488  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1489              while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1490              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1491                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1492              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1494              SCU_CCUCON2.U     = ccucon2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1495  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1496              timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1497  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1498              while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1499              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1500                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1501              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1502          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1503  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1504          ccucon2.U         = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1505          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1506          ccucon2.U        |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1507  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1508          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1509  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1510          while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1511          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1512              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1513          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1514  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1515          SCU_CCUCON2.U     = ccucon2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1516  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1517          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1518  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1519          while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1520          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1521              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1522          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1523      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1524      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1525          /*Write CCUCON5 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1526          Ifx_SCU_CCUCON5 ccucon5;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1527          ccucon5.U         = SCU_CCUCON5.U & ~clockDistributionConfig->ccucon5.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1528          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1529          ccucon5.U        |= (clockDistributionConfig->ccucon5.mask & clockDistributionConfig->ccucon5.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1530          ccucon5.B.UP      = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1531          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1532  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1533          while (SCU_CCUCON5.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1534          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1535              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1536          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1538          SCU_CCUCON5.U     = ccucon5.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1539          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1541          while (SCU_CCUCON5.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1542          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1543              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1544          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1545      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1546      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1547          /*Write CCUCON6 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1548          Ifx_SCU_CCUCON6 ccucon6;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1549          ccucon6.U     = SCU_CCUCON6.U & ~clockDistributionConfig->ccucon6.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1550          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1551          ccucon6.U    |= (clockDistributionConfig->ccucon6.mask & clockDistributionConfig->ccucon6.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1552          SCU_CCUCON6.U = ccucon6.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1553      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1555      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1556          /*Write CCUCON7 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1557          Ifx_SCU_CCUCON7 ccucon7;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1558          ccucon7.U     = SCU_CCUCON7.U & ~clockDistributionConfig->ccucon7.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1559          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1560          ccucon7.U    |= (clockDistributionConfig->ccucon7.mask & clockDistributionConfig->ccucon7.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1561          SCU_CCUCON7.U = ccucon7.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1562      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1563  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1564      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1565          /*Write CCUCON8 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1566          Ifx_SCU_CCUCON8 ccucon8;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1567          ccucon8.U     = SCU_CCUCON8.U & ~clockDistributionConfig->ccucon8.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1568          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1569          ccucon8.U    |= (clockDistributionConfig->ccucon8.mask & clockDistributionConfig->ccucon8.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1570          SCU_CCUCON8.U = ccucon8.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1571      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1572      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1573          /*Write CCUCON9 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1574          Ifx_SCU_CCUCON9 ccucon9;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1575          ccucon9.U     = SCU_CCUCON9.U & ~clockDistributionConfig->ccucon9.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1576          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1577          ccucon9.U    |= (clockDistributionConfig->ccucon9.mask & clockDistributionConfig->ccucon9.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1578          SCU_CCUCON9.U = ccucon9.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1579      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1580      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1581          /*Write CCUCON10 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1582          Ifx_SCU_CCUCON10 ccucon10;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1583          ccucon10.U     = SCU_CCUCON10.U & ~clockDistributionConfig->ccucon10.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1584          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1585          ccucon10.U    |= (clockDistributionConfig->ccucon10.mask & clockDistributionConfig->ccucon10.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1586          SCU_CCUCON10.U = ccucon10.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1587      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1588      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1589          /*Write CCUCON11 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1590          Ifx_SCU_CCUCON11 ccucon11;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1591          ccucon11.U     = SCU_CCUCON11.U & ~clockDistributionConfig->ccucon11.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1592          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1593          ccucon11.U    |= (clockDistributionConfig->ccucon11.mask & clockDistributionConfig->ccucon11.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1594          SCU_CCUCON11.U = ccucon11.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1595      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1596      IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1597      return (boolean)initError;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1598  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1599  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1600  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1601  IFX_INLINE float32 IfxScuCcu_getAdasFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1602  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1603      uint32 adasDiv = SCU_CCUCON5.B.ADASDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1604  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1605      return (adasDiv == (uint32)0) ? 0 : IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / adasDiv;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1606  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1607  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1609  IFX_INLINE float32 IfxScuCcu_getAdcFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1610  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1611      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1612  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1615  IFX_INLINE float32 IfxScuCcu_getAsclinFFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1616  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1617      float32 freq          = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1618  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1619      uint8   asclindiv[16] = {1, 1, 2, 3, 4, 5, 6, 6, 8, 8, 10, 10, 12, 12, 12, 15};
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1620  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1621      if (SCU_CCUCON2.B.ASCLINFDIV)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1622      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1623          freq = IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_2) / asclindiv[SCU_CCUCON2.B.ASCLINFDIV];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1624      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1625  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1626      return freq;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1627  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1629  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1630  IFX_INLINE float32 IfxScuCcu_getEbuFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1631  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1632      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1633  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1635  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1636  IFX_INLINE float32 IfxScuCcu_getEvrFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1637  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1638      return IFXSCU_EVR_OSC_FREQUENCY;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1639  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1641  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1642  IFX_INLINE float32 IfxScuCcu_getGethFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1643  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1644      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON5.B.GETHDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1645  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1647  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1648  IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1649  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1650      /* fGTM = fSOURCEGTM / GTMDIV ;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1651       * fSOURCEGTM = fSPB *2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1652       */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1653      uint8   gtmDiv  = SCU_CCUCON0.B.GTMDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1654      float32 gtmFreq = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1656      if (gtmDiv == 0u)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1657      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1658          gtmFreq = 0.0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1659      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1660      else if (gtmDiv == 1U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1661      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1662          gtmFreq = IfxScuCcu_getSpbFrequency() * 2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1663      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1664      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1665  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1666      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1667          gtmFreq = IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / gtmDiv;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1668      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1669  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1670      return gtmFreq;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1671  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1672  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1674  IFX_INLINE float32 IfxScuCcu_getI2cFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1675  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1676      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_2) / SCU_CCUCON1.B.I2CDIV;
	mov	d4,#2
	call	IfxScuCcu_getSourceFrequency
.L386:
	fcall	.cocofun_15
.L497:
	div.f	d15,d2,d15
.L244:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   163  #ifdef IFX_CFG_AURIX_SCUCCU_USED
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   164      float32 fKernel = IfxScuCcu_getBaud1Frequency();
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   165  #else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   166      float32 fKernel = IfxScuCcu_getI2cFrequency();
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   167  #endif
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   168  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   169      if (0 == i2c->FDIVHIGHCFG.U)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   170      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   171          uint8  inc = i2c->FDIVCFG.B.INC;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   172          uint16 dec = i2c->FDIVCFG.B.DEC;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   173          return (fKernel / rmc) / ((2 * dec / inc) + 3);
	utof	d0,d8
.L498:
	div.f	d2,d15,d0
	ld.w	d15,[a15]28
.L248:
	jne	d15,#0,.L15
.L249:
	ld.bu	d15,[a15]26
.L388:
	ld.hu	d0,[a15]24
	extr.u	d0,d0,#0,#11
.L389:
	sha	d0,#1
.L390:
	div	e0,d0,d15
.L499:
	add	d15,d0,#3
	j	.L16
.L15:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   174      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   175      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   176      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   177          uint8  inc = i2c->FDIVHIGHCFG.B.INC;
	ld.bu	d15,[a15]30
.L391:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   178          uint16 dec = i2c->FDIVHIGHCFG.B.DEC;
	ld.hu	d0,[a15]28
	extr.u	d0,d0,#0,#11
.L393:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   179          return (fKernel / rmc) / ((dec / inc * 5) + 2);
	div.u	e0,d0,d15
.L394:
	mul	d15,d0,#5
.L392:
	add	d15,#2

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   180      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   181  }
.L16:
	itof	d15,d15
.L500:
	div.f	d2,d2,d15
	ret
.L238:
	
__IfxI2c_getBaudrate_function_end:
	.size	IfxI2c_getBaudrate,__IfxI2c_getBaudrate_function_end-IfxI2c_getBaudrate
.L120:
	; End of function
	
	.sdecl	'.text.IfxI2c..cocofun_15',code,cluster('.cocofun_15')
	.sect	'.text.IfxI2c..cocofun_15'
	.align	2
; Function .cocofun_15
.L62:
.cocofun_15:	.type	func
; Function body .cocofun_15, coco_iter:0

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     2   * \file IfxScuCcu.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    42   * \defgroup IfxLld_Scu SCU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    43   * \addtogroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    44   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    45   * \defgroup IfxLld_ScuCcu How to use the Scu Clock driver?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    46   * \addtogroup IfxLld_ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    47   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    48   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    49   * The Scu Clock control unit driver provides a default configuration for pll and Clock initialisation and set of peripheral clock configuration functions.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    51   * In the following sections it will be described, how to integrate the driver into the application framework.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    52   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    53   * \section IfxLld_ScuCcu_Std_Preparation Preparation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    54   * \subsection IfxLld_ScuCcu_Std_Include Include Files
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    55   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    56   * Include following header file into your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    57   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    58   * #include <Scu/Std/IfxScuCcu.h>
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    59   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    60   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    61   * \subsection IfxLld_ScuCcu_Std_Variables Variables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    62   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    63   * Declare the Clock Configuration variables in your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    64   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    65   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    66   * // used globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    67   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    68   * // configuration for the PLL  steps
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    69   * static IfxScuCcu_PllStepsConfig IfxScuCcu_testPllConfigSteps[] = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    70   *     IFXSCU_CFG_PLL_STEPS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    71   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    72   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    73   * static const IfxScuCcu_FlashWaitstateConfig IfxScuCcu_defaultFlashWaitstateConfig = IFXSCU_CFG_FLASH_WAITSTATE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    74   * // Default configuration for the Clock Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    75   * IfxScuCcu_Config                      IfxScuCcu_testClockConfig = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    76   *     // IfxScuCcu_InitialStepConfig: Configuration of first step which is same as internal osc frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    77   *     IFXSCU_CFG_PLL_INITIAL_STEP,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    78   *     //IfxScuCcu_PllThrottleConfig: Configuration of PLL throttling.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    79   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    80   *         sizeof(IfxScuCcu_defaultPllConfigSteps) / sizeof(IfxScuCcu_PllStepConfig),
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    81   *         IfxScuCcu_defaultPllConfigSteps
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    82   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    83   *     IFXSCU_CFG_CLK_DISTRIBUTION,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    84   *     &IfxScuCcu_defaultFlashWaitstateConfig,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    85   *     &IfxScuCcu_defaultModConfig
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    86   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    87   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    88   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    89   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    90   * \subsection IfxLld_ScuCcu_Std_Init Module Initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    91   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    92   * The module initialisation can be done in the same function. Here an example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    93   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    94   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    95   *        // standard PLL & clock initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    96   *         IfxScuCcu_init(&IfxScuCcu_testClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    97   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    99   *    The SYS PLL, PER PLL1 , PLL2 and clocks are now initialised based on the XTAL and PLL values configured in Ifx_Cfg.h and are ready for use now!
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   100   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   101   * Alternately the PLL and clocks can be initialised using below method which provides greater control on the configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   102   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   103   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   104   * static const IfxScuCcu_PllStepConfig IfxScuCcu_defaultPllConfigSteps[] = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   105   *     {                   //Step 0 Config: 150MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   106   *         (4 - 1),        //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   107   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   108   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   109   *     {                   //Step 1 Config: 200MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   110   *         (3 - 1),       //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   111   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   112   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   113   *     {                   //Step 2 Config: 300MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   114   *         (2 - 1),        //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   115   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   116   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   117   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   118   *     IfxScuCcu_Config        IfxScuCcu_sampleClockConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   119   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   120   *     IfxScuCcu_initConfig(&IfxScuCcu_sampleClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   121   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   122   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   123   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   124   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.pllInputClockSelection = IfxScuCcu_PllInputClockSelection_fOsc0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   126   *     //SYS PLL = 300Mhz, XTAL = 20Mhz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   127   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.k2Divider = IfxScuCcu_K2divider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   128   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.nDivider = IfxScuCcu_Ndivider_60;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   129   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.pDivider = IfxScuCcu_Pdivider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   130   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.waitTime = 0.000200F;  // wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   131   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   132   *     IfxScuCcu_sampleClockConfig.sysPllThrottleConfig.numOfSteps = sizeof(IfxScuCcu_defaultPllConfigSteps) / sizeof(IfxScuCcu_PllStepConfig); //  step clock incr
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   133   *     IfxScuCcu_sampleClockConfig.sysPllThrottleConfig.pllSteps = IfxScuCcu_defaultPllConfigSteps;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   135   *     // PER PLL1 = 240Mhz, PERPLL2 = 50Mhz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   136   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k2Divider = IfxScuCcu_K2divider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   137   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k3Divider = IfxScuCcu_K3divider_6;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   138   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k3DividerBypass = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   139   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.nDivider = IfxScuCcu_Ndivider_24;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   140   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.pDivider = IfxScuCcu_Pdivider_1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   142   *     // update CCUCON Config use mask and value as below
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   143   *     IfxScuCcu_sampleClockConfig.clockDistribution.ccucon0.mask =IFXSCU_CFG_CCUCON0_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   144   *     IfxScuCcu_sampleClockConfig.clockDistribution.ccucon0.value = IFXSCU_CFG_CCUCON0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   146   *     // standard PLL & clock initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   147   *     IfxScuCcu_init(&IfxScuCcu_sampleClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   149   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   150   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   151   * ** Modulation Configuration **
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   152   * The SCU CCU module also provides an option to Frequency Modulate the clock.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   153   * The Modulation configuration can be done as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   154   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   155   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   156   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   157   * //define your modulation configuration structure:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   158   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   159   *  IFX_CONST IfxScuCcu_Mod_Config IfxScuCcu_SampleModConfig = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   160   *          IfxScuCcu_ModEn_disabled,          // disable is default //enable / disable modulation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   161   *          IfxScuCcu_ModulationAmplitude_0p5, // default 0 value  // specify the modulation amplitude %
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   162   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   163   *  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   164   *  // put this as part of the CCU configuration:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   165   *  IfxScuCcu_sampleClockConfig.modulationConfig = &IfxScuCcu_SampleModConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   166   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   167   *  // now initalize the CCU PLL and clock with the init function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   168   *  IfxScuCcu_init(&IfxScuCcu_sampleClockConfig)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   169   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   171   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   172   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   173   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   174   * \defgroup IfxLld_Scu_Std_Ccu Ccu Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   175   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   176   * \defgroup IfxLld_Scu_Std_Ccu_Ccu Clock Control Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   177   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   178   * \defgroup IfxLld_Scu_Std_Ccu_Ccu_Operative Clock Control Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   179   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   180   * \defgroup IfxLld_Scu_Std_Ccu_Ccu_Configuration Clock Control Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   181   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   182   * \defgroup IfxLld_Scu_Std_Ccu_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   183   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   185  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   186  #ifndef IFXSCUCCU_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   187  #define IFXSCUCCU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   188  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   189  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   190  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   191  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   193  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   194  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   195  #include "Cpu/Std/IfxCpu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   196  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   197  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   198  #include "_PinMap/IfxScu_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   199  #include "IfxSmu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   200  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   201  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   202  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   203  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   205  /** \brief Oscillator stability check timeout count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   207  #ifndef IFXSCUCCU_OSC_STABLECHK_TIME
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   208  #define IFXSCUCCU_OSC_STABLECHK_TIME               (640)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   209  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   210  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   211  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   213  #define IFXSCUCCU_SMUALARM_MASK                    (0x1DU)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   215  /** \brief ~40uS max wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   216   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   217  #ifndef IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   218  #define IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT     (0x1000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   219  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   221  /** \brief ~122uS max wait time for PLL locking
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   223  #define IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT           (0x3000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   224  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   225  /** \brief ~122uS max wait time for PLL power down/up state update
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   227  #define IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT (0x3000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   229  /** \brief ~244uS max wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   230   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   231  #define IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT           (0x6000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   233  /** \brief 3mS max wait time for PLL power down/up state update
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   235  #define IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT (0x493E0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   237  #define IFXSCUCCU_LOOP_TIMEOUT_CHECK(tVar, tErr) \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   238      {                                            \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   239          if (((sint32)--tVar) <= 0)               \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   240          {                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   241              tErr = (uint8)1;                     \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   242              break;                               \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   243          }                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   244          else                                     \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   245          {                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   246          }                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   247      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   248  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   249  /** \brief Modulation frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   250   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   251  #define IFXSCUCCU_MODULATION_FREQ_HZ               (3600000)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   253  /** \brief MODCFG shift value for SYSPLLCON2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   255  #define IFXSCUCCU_MODCFG_DEFAULT_SHIFT             (10)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   257  /** \brief MODCFG default value - for SYSPLLCON2[15:10]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   259  #define IFXSCUCCU_MODCFG_DEFAULT_VAL               ((uint32)0x3D)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   261  /** \brief get Rgain from MA and FDco
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   263  #define IFXSCUCCU_GET_RGAIN_NOM(MA, FDco)  ((2 * (MA / 100) * (FDco / IFXSCUCCU_MODULATION_FREQ_HZ)))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   265  /** \brief Get RGAin HEX from RGain Nominal value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   266   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   267  #define IFXSCUCCU_GET_RGAIN_HEX(RGain_Nom) ((uint16)((RGain_Nom * 32) + 0.5))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   269  /** \brief Get MODCFG from RGAIN_HEX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   271  #define IFXSCUCCU_GET_MODCFG(RGain_Hex)    ((uint16)(IFXSCUCCU_MODCFG_DEFAULT_VAL << IFXSCUCCU_MODCFG_DEFAULT_SHIFT) | (uint16)(RGain_Hex))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   273  /** \brief Define to include the flash wait state check in ScuCcu_init()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   275  #define IFXSCUCCU_FLASHWAITSTATECHECK (0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   277  /** \brief 10 microsecond wait time between steps to jump back to normal mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   278   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   279  #ifndef IFXSCUCCU_LPTONORMAL_WAITTIME
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   280  #define IFXSCUCCU_LPTONORMAL_WAITTIME (0.00001f)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   281  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   283  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   284  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   285  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   287  /** \brief Function pointer type for the hooks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   288   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   290  typedef void (*IfxScuCcu_PllStepsFunctionHook)(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   292  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   293  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   294  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   295  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   296  /** \addtogroup IfxLld_Scu_Std_Ccu_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   297   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   298  /** \brief clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   299   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   300  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   301  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   302      IfxScuCcu_Fsource_0 = 0,      /**< \brief fSource0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   303      IfxScuCcu_Fsource_1,          /**< \brief fSource1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   304      IfxScuCcu_Fsource_2           /**< \brief fSource2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   305  } IfxScuCcu_Fsource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   307  /** \brief MODULE_SCU.PLLCON1.B.K2DIV, specifies the K2-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   308   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   309  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   310  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   311      IfxScuCcu_K2divider_1 = 0,      /**< \brief K2-Divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   312      IfxScuCcu_K2divider_2,          /**< \brief K2-Divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   313      IfxScuCcu_K2divider_3,          /**< \brief K2-Divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   314      IfxScuCcu_K2divider_4,          /**< \brief K2-Divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   315      IfxScuCcu_K2divider_5,          /**< \brief K2-Divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   316      IfxScuCcu_K2divider_6,          /**< \brief K2-Divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   317      IfxScuCcu_K2divider_7,          /**< \brief K2-Divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   318      IfxScuCcu_K2divider_8           /**< \brief K2-Divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   319  } IfxScuCcu_K2divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   321  /** \brief MODULE_SCU.PLLCON1.B.K3DIV, specifies the K3-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   322   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   323  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   324  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   325      IfxScuCcu_K3divider_1 = 0,      /**< \brief K3-Divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   326      IfxScuCcu_K3divider_2,          /**< \brief K3-Divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   327      IfxScuCcu_K3divider_3,          /**< \brief K3-Divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   328      IfxScuCcu_K3divider_4,          /**< \brief K3-Divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   329      IfxScuCcu_K3divider_5,          /**< \brief K3-Divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   330      IfxScuCcu_K3divider_6,          /**< \brief K3-Divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   331      IfxScuCcu_K3divider_7,          /**< \brief K3-Divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   332      IfxScuCcu_K3divider_8           /**< \brief K3-Divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   333  } IfxScuCcu_K3divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   334  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   335  /** \brief Low Power Division Ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   336   * Corresponds to values of LPDIV in CCUCON0.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   337   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   338  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   339  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   340      IfxScuCcu_LowPowerDivRatio_divBy30 = 1,  /**< \brief Divide by 30 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   341      IfxScuCcu_LowPowerDivRatio_divBy60,      /**< \brief Divide by 60 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   342      IfxScuCcu_LowPowerDivRatio_divBy120,     /**< \brief Divide by 120 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   343      IfxScuCcu_LowPowerDivRatio_divBy240      /**< \brief Divide by 240 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   344  } IfxScuCcu_LowPowerDivRatio;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   346  /** \brief ENUM for MA (%) values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   347   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   348  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   349  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   350      IfxScuCcu_ModulationAmplitude_0p5 = 0,      /**< \brief 0.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   351      IfxScuCcu_ModulationAmplitude_1p0,          /**< \brief 1.0%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   352      IfxScuCcu_ModulationAmplitude_1p25,         /**< \brief 1.25%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   353      IfxScuCcu_ModulationAmplitude_1p5,          /**< \brief 1.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   354      IfxScuCcu_ModulationAmplitude_2p0,          /**< \brief 2%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   355      IfxScuCcu_ModulationAmplitude_2p5,          /**< \brief 2.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   356      IfxScuCcu_ModulationAmplitude_count,        /**< \brief range  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   357  } IfxScuCcu_ModulationAmplitude;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   358  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   359  /** \brief MODULE_SCU.PLLCON0.B.NDIV, specifies the N-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   361  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   362  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   363      IfxScuCcu_Ndivider_1 = 0,      /**< \brief  N-divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   364      IfxScuCcu_Ndivider_2,          /**< \brief  N-divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   365      IfxScuCcu_Ndivider_3,          /**< \brief  N-divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   366      IfxScuCcu_Ndivider_4,          /**< \brief  N-divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   367      IfxScuCcu_Ndivider_5,          /**< \brief  N-divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   368      IfxScuCcu_Ndivider_6,          /**< \brief  N-divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   369      IfxScuCcu_Ndivider_7,          /**< \brief  N-divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   370      IfxScuCcu_Ndivider_8,          /**< \brief  N-divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   371      IfxScuCcu_Ndivider_9,          /**< \brief  N-divider 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   372      IfxScuCcu_Ndivider_10,         /**< \brief  N-divider 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   373      IfxScuCcu_Ndivider_11,         /**< \brief  N-divider 11  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   374      IfxScuCcu_Ndivider_12,         /**< \brief  N-divider 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   375      IfxScuCcu_Ndivider_13,         /**< \brief  N-divider 13  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   376      IfxScuCcu_Ndivider_14,         /**< \brief  N-divider 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   377      IfxScuCcu_Ndivider_15,         /**< \brief  N-divider 15  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   378      IfxScuCcu_Ndivider_16,         /**< \brief  N-divider 16  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   379      IfxScuCcu_Ndivider_17,         /**< \brief  N-divider 17  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   380      IfxScuCcu_Ndivider_18,         /**< \brief  N-divider 18  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   381      IfxScuCcu_Ndivider_19,         /**< \brief  N-divider 19  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   382      IfxScuCcu_Ndivider_20,         /**< \brief  N-divider 20  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   383      IfxScuCcu_Ndivider_21,         /**< \brief  N-divider 21  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   384      IfxScuCcu_Ndivider_22,         /**< \brief  N-divider 22  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   385      IfxScuCcu_Ndivider_23,         /**< \brief  N-divider 23  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   386      IfxScuCcu_Ndivider_24,         /**< \brief  N-divider 24  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   387      IfxScuCcu_Ndivider_25,         /**< \brief  N-divider 25  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   388      IfxScuCcu_Ndivider_26,         /**< \brief  N-divider 26  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   389      IfxScuCcu_Ndivider_27,         /**< \brief  N-divider 27  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   390      IfxScuCcu_Ndivider_28,         /**< \brief  N-divider 28  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   391      IfxScuCcu_Ndivider_29,         /**< \brief  N-divider 29  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   392      IfxScuCcu_Ndivider_30,         /**< \brief  N-divider 30  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   393      IfxScuCcu_Ndivider_31,         /**< \brief  N-divider 31  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   394      IfxScuCcu_Ndivider_32,         /**< \brief  N-divider 32  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   395      IfxScuCcu_Ndivider_33,         /**< \brief  N-divider 33  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   396      IfxScuCcu_Ndivider_34,         /**< \brief  N-divider 34  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   397      IfxScuCcu_Ndivider_35,         /**< \brief  N-divider 35  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   398      IfxScuCcu_Ndivider_36,         /**< \brief  N-divider 36  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   399      IfxScuCcu_Ndivider_37,         /**< \brief  N-divider 37  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   400      IfxScuCcu_Ndivider_38,         /**< \brief  N-divider 38  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   401      IfxScuCcu_Ndivider_39,         /**< \brief  N-divider 39  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   402      IfxScuCcu_Ndivider_40,         /**< \brief  N-divider 40  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   403      IfxScuCcu_Ndivider_41,         /**< \brief  N-divider 41  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   404      IfxScuCcu_Ndivider_42,         /**< \brief  N-divider 42  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   405      IfxScuCcu_Ndivider_43,         /**< \brief  N-divider 43  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   406      IfxScuCcu_Ndivider_44,         /**< \brief  N-divider 44  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   407      IfxScuCcu_Ndivider_45,         /**< \brief  N-divider 45  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   408      IfxScuCcu_Ndivider_46,         /**< \brief  N-divider 46  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   409      IfxScuCcu_Ndivider_47,         /**< \brief  N-divider 47  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   410      IfxScuCcu_Ndivider_48,         /**< \brief  N-divider 48  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   411      IfxScuCcu_Ndivider_49,         /**< \brief  N-divider 49  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   412      IfxScuCcu_Ndivider_50,         /**< \brief  N-divider 50  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   413      IfxScuCcu_Ndivider_51,         /**< \brief  N-divider 51  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   414      IfxScuCcu_Ndivider_52,         /**< \brief  N-divider 52  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   415      IfxScuCcu_Ndivider_53,         /**< \brief  N-divider 53  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   416      IfxScuCcu_Ndivider_54,         /**< \brief  N-divider 54  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   417      IfxScuCcu_Ndivider_55,         /**< \brief  N-divider 55  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   418      IfxScuCcu_Ndivider_56,         /**< \brief  N-divider 56  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   419      IfxScuCcu_Ndivider_57,         /**< \brief  N-divider 57  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   420      IfxScuCcu_Ndivider_58,         /**< \brief  N-divider 58  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   421      IfxScuCcu_Ndivider_59,         /**< \brief  N-divider 59  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   422      IfxScuCcu_Ndivider_60,         /**< \brief  N-divider 60  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   423      IfxScuCcu_Ndivider_61,         /**< \brief  N-divider 61  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   424      IfxScuCcu_Ndivider_62,         /**< \brief  N-divider 62  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   425      IfxScuCcu_Ndivider_63,         /**< \brief  N-divider 63  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   426      IfxScuCcu_Ndivider_64,         /**< \brief  N-divider 64  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   427      IfxScuCcu_Ndivider_65,         /**< \brief  N-divider 65  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   428      IfxScuCcu_Ndivider_66,         /**< \brief  N-divider 66  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   429      IfxScuCcu_Ndivider_67,         /**< \brief  N-divider 67  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   430      IfxScuCcu_Ndivider_68,         /**< \brief  N-divider 68  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   431      IfxScuCcu_Ndivider_69,         /**< \brief  N-divider 69  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   432      IfxScuCcu_Ndivider_70,         /**< \brief  N-divider 70  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   433      IfxScuCcu_Ndivider_71,         /**< \brief  N-divider 71  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   434      IfxScuCcu_Ndivider_72,         /**< \brief  N-divider 72  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   435      IfxScuCcu_Ndivider_73,         /**< \brief  N-divider 73  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   436      IfxScuCcu_Ndivider_74,         /**< \brief  N-divider 74  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   437      IfxScuCcu_Ndivider_75,         /**< \brief  N-divider 75  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   438      IfxScuCcu_Ndivider_76,         /**< \brief  N-divider 76  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   439      IfxScuCcu_Ndivider_77,         /**< \brief  N-divider 77  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   440      IfxScuCcu_Ndivider_78,         /**< \brief  N-divider 78  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   441      IfxScuCcu_Ndivider_79,         /**< \brief  N-divider 79  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   442      IfxScuCcu_Ndivider_80,         /**< \brief  N-divider 80  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   443      IfxScuCcu_Ndivider_81,         /**< \brief  N-divider 81  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   444      IfxScuCcu_Ndivider_82,         /**< \brief  N-divider 82  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   445      IfxScuCcu_Ndivider_83,         /**< \brief  N-divider 83  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   446      IfxScuCcu_Ndivider_84,         /**< \brief  N-divider 84  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   447      IfxScuCcu_Ndivider_85,         /**< \brief  N-divider 85  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   448      IfxScuCcu_Ndivider_86,         /**< \brief  N-divider 86  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   449      IfxScuCcu_Ndivider_87,         /**< \brief  N-divider 87  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   450      IfxScuCcu_Ndivider_88,         /**< \brief  N-divider 88  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   451      IfxScuCcu_Ndivider_89,         /**< \brief  N-divider 89  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   452      IfxScuCcu_Ndivider_90,         /**< \brief  N-divider 90  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   453      IfxScuCcu_Ndivider_91,         /**< \brief  N-divider 91  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   454      IfxScuCcu_Ndivider_92,         /**< \brief  N-divider 92  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   455      IfxScuCcu_Ndivider_93,         /**< \brief  N-divider 93  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   456      IfxScuCcu_Ndivider_94,         /**< \brief  N-divider 94  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   457      IfxScuCcu_Ndivider_95,         /**< \brief  N-divider 95  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   458      IfxScuCcu_Ndivider_96,         /**< \brief  N-divider 96  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   459      IfxScuCcu_Ndivider_97,         /**< \brief  N-divider 97  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   460      IfxScuCcu_Ndivider_98,         /**< \brief  N-divider 98  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   461      IfxScuCcu_Ndivider_99,         /**< \brief  N-divider 99  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   462      IfxScuCcu_Ndivider_100,        /**< \brief  N-divider 100  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   463      IfxScuCcu_Ndivider_101,        /**< \brief  N-divider 101  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   464      IfxScuCcu_Ndivider_102,        /**< \brief  N-divider 102  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   465      IfxScuCcu_Ndivider_103,        /**< \brief  N-divider 103  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   466      IfxScuCcu_Ndivider_104,        /**< \brief  N-divider 104  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   467      IfxScuCcu_Ndivider_105,        /**< \brief  N-divider 105  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   468      IfxScuCcu_Ndivider_106,        /**< \brief  N-divider 106  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   469      IfxScuCcu_Ndivider_107,        /**< \brief  N-divider 107  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   470      IfxScuCcu_Ndivider_108,        /**< \brief  N-divider 108  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   471      IfxScuCcu_Ndivider_109,        /**< \brief  N-divider 109  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   472      IfxScuCcu_Ndivider_110,        /**< \brief  N-divider 110  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   473      IfxScuCcu_Ndivider_111,        /**< \brief  N-divider 111  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   474      IfxScuCcu_Ndivider_112,        /**< \brief  N-divider 112  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   475      IfxScuCcu_Ndivider_113,        /**< \brief  N-divider 113  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   476      IfxScuCcu_Ndivider_114,        /**< \brief  N-divider 114  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   477      IfxScuCcu_Ndivider_115,        /**< \brief  N-divider 115  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   478      IfxScuCcu_Ndivider_116,        /**< \brief  N-divider 116  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   479      IfxScuCcu_Ndivider_117,        /**< \brief  N-divider 117  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   480      IfxScuCcu_Ndivider_118,        /**< \brief  N-divider 118  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   481      IfxScuCcu_Ndivider_119,        /**< \brief  N-divider 119  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   482      IfxScuCcu_Ndivider_120,        /**< \brief  N-divider 120  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   483      IfxScuCcu_Ndivider_121,        /**< \brief  N-divider 121  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   484      IfxScuCcu_Ndivider_122,        /**< \brief  N-divider 122  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   485      IfxScuCcu_Ndivider_123,        /**< \brief  N-divider 123  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   486      IfxScuCcu_Ndivider_124,        /**< \brief  N-divider 124  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   487      IfxScuCcu_Ndivider_125,        /**< \brief  N-divider 125  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   488      IfxScuCcu_Ndivider_126,        /**< \brief  N-divider 126  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   489      IfxScuCcu_Ndivider_127,        /**< \brief  N-divider 127  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   490      IfxScuCcu_Ndivider_128         /**< \brief  N-divider 128  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   491  } IfxScuCcu_Ndivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   492  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   493  /** \brief MODULE_SCU.PLLCON0.B.PDIV, specifies the P-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   495  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   496  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   497      IfxScuCcu_Pdivider_1 = 0,      /**< \brief  P-divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   498      IfxScuCcu_Pdivider_2,          /**< \brief  P-divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   499      IfxScuCcu_Pdivider_3,          /**< \brief  P-divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   500      IfxScuCcu_Pdivider_4,          /**< \brief  P-divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   501      IfxScuCcu_Pdivider_5,          /**< \brief  P-divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   502      IfxScuCcu_Pdivider_6,          /**< \brief  P-divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   503      IfxScuCcu_Pdivider_7,          /**< \brief  P-divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   504      IfxScuCcu_Pdivider_8           /**< \brief  P-divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   505  } IfxScuCcu_Pdivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   506  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   507  /** \brief SysPll & Per Pll input clock selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   508   * SYSPLLCON0.B.INSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   509   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   510  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   511  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   512      IfxScuCcu_PllInputClockSelection_fOsc1   = 0, /**< \brief Backup clock select */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   513      IfxScuCcu_PllInputClockSelection_fOsc0   = 1, /**< \brief fOsc0 or XTAL clock select */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   514      IfxScuCcu_PllInputClockSelection_fSysclk = 2  /**< \brief fOsc1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   515  } IfxScuCcu_PllInputClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   516  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   517  /** \brief trap request type
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   518   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   519  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   520  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   521      IfxScuCcu_Traprequest_esr0 = 0,  /**< \brief external service request 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   522      IfxScuCcu_Traprequest_esr1,      /**< \brief external service request 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   523      IfxScuCcu_Traprequest_trap2,     /**< \brief trap2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   524      IfxScuCcu_Traprequest_smu        /**< \brief safety management unit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   525  } IfxScuCcu_Traprequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   526  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   527  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   528  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   529  /** \brief modulation enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   530   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   531  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   532  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   533      IfxScuCcu_ModEn_disabled = 0,  /**< \brief disable modulation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   534      IfxScuCcu_ModEn_enabled  = 1   /**< \brief enable modulation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   535  } IfxScuCcu_ModEn;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   537  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   538  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   539  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   541  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   542   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   543  /** \brief Configuration structure type for the Per Pll step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   544   * This structure must be used to configure the P, N and K2, K3 dividers .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   545   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   546  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   547  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   548      uint8 pDivider;              /**< \brief P divider value for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   549      uint8 nDivider;              /**< \brief N divider value for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   550      uint8 k2Divider;             /**< \brief K2 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   551      uint8 k3Divider;             /**< \brief K3 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   552      uint8 k3DividerBypass;       /**< \brief Divider Bypass
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   553                                    * 0 - The divide by block in front of the K3-Divider is not bypassed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   554                                    * 1-  The divide by block in front of the K3-Divider is bypassed. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   555  } IfxScuCcu_PerPllConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   556  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   557  /** \brief Configuration structure type for the Pll initial step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   558   * This structure must be used to configure the P, N and K2 dividers for initial step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   559   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   560  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   561  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   562      uint8 pDivider;        /**< \brief P divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   563      uint8 nDivider;        /**< \brief N divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   564      uint8 k2Divider;       /**< \brief K2 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   565  } IfxScuCcu_SysPllConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   567  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   568  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   569  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   570   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   571  /** \brief Configuration structure type for CCUCON registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   573  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   574  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   575      uint32 value;       /**< \brief CCUCON Register value to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   576      uint32 mask;        /**< \brief CCUCON Mask to select the bit fields to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   577  } IfxScuCcu_CcuconRegConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   578  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   579  /** \brief Configuration structure type for the Pll Steps for current jump control.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   581  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   582  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   583      uint8   k2Step;         /**< \brief K2 divider value for this step. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   584      float32 waitTime;       /**< \brief Wait time for for this step. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   585  } IfxScuCcu_PllStepConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   587  /** \brief Configuration structure type for the Pll Parameters.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   589  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   590  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   591      uint32                           xtalFrequency;                /**< \brief Xtal frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   592      IfxScuCcu_PllInputClockSelection pllInputClockSelection;       /**< \brief Pll input clock selection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   593      IfxScuCcu_SysPllConfig           sysPllConfig;                 /**< \brief System PLL Configurations */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   594      IfxScuCcu_PerPllConfig           perPllConfig;                 /**< \brief Peripheral PLL Configurations */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   595  } IfxScuCcu_pllsParameterConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   596  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   597  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   599  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   600   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   601  /** \brief Configuration structure type for the Flash waitstate configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   602   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   603  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   604  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   605      uint32 value;       /**< \brief FLASH.FCON Register value to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   606      uint32 mask;        /**< \brief FLASH.FCON Mask to select the bit fields to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   607  } IfxScuCcu_FlashWaitstateConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   609  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   610  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   611  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   612   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   613  /** \brief Configuration structure type for all the CCUCON registers to configure clock distribution.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   615  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   616  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   617      IfxScuCcu_CcuconRegConfig ccucon0;        /**< \brief CCUCON0 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   618      IfxScuCcu_CcuconRegConfig ccucon1;        /**< \brief CCUCON1 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   619      IfxScuCcu_CcuconRegConfig ccucon2;        /**< \brief CCUCON2 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   620      IfxScuCcu_CcuconRegConfig ccucon5;        /**< \brief CCUCON5 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   621      IfxScuCcu_CcuconRegConfig ccucon6;        /**< \brief CCUCON6 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   622      IfxScuCcu_CcuconRegConfig ccucon7;        /**< \brief CCUCON7 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   623      IfxScuCcu_CcuconRegConfig ccucon8;        /**< \brief CCUCON8 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   624      IfxScuCcu_CcuconRegConfig ccucon9;        /**< \brief CCUCON9 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   625      IfxScuCcu_CcuconRegConfig ccucon10;       /**< \brief CCUCON10 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   626      IfxScuCcu_CcuconRegConfig ccucon11;       /**< \brief CCUCON11 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   627  } IfxScuCcu_ClockDistributionConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   629  /** \brief Configuration structure type for the Pll Initial Step Configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   631  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   633      IfxScuCcu_pllsParameterConfig pllsParameters;       /**< \brief Configuration Parameters for both PLLs */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   634      float32                       waitTime;             /**< \brief Wait time for for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   635  } IfxScuCcu_InitialStepConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   637  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   638   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   639  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   640  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   641      uint8                              numOfSteps;       /**< \brief Number of PLL divider steps during clock throttling */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   642      IFX_CONST IfxScuCcu_PllStepConfig *pllSteps;         /**< \brief Pointer to the array of Pll divider step configuration. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   643  } IfxScuCcu_PllThrottleConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   644  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   645  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   647  /** \brief modulation config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   648   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   649  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   650  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   651      IfxScuCcu_ModEn               Mod_Enable;       /**< \brief modulation enable */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   652      IfxScuCcu_ModulationAmplitude Mod_Amp;          /**< \brief modulation amplitude */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   653  } IfxScuCcu_Mod_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   655  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   656   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   657  /** \brief Configuration structure SCU module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   658   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   659  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   660  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   661      IfxScuCcu_InitialStepConfig               pllInitialStepConfig;           /**< \brief Configuration of first step which is same as internal osc frequency. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   662      IfxScuCcu_PllThrottleConfig               sysPllThrottleConfig;           /**< \brief Configuration of PLL throttling. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   663      IfxScuCcu_ClockDistributionConfig         clockDistribution;              /**< \brief Configuration of of bus clocks and other module clock distribution. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   664      IFX_CONST IfxScuCcu_FlashWaitstateConfig *flashFconWaitStateConfig;       /**< \brief Configuration of flash waitstate */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   665      IFX_CONST IfxScuCcu_Mod_Config           *modulationConfig;               /**< \brief modulation configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   666  } IfxScuCcu_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   668  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   669  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   670  /** \brief structure holding the RGain parameters for modulation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   671   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   672  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   673  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   674      float32 RGainNom;       /**< \brief RGain Nominal value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   675      uint16  RGainHex;       /**< \brief RGain Hex value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   676  } IfxScuCcu_RGain_Values;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   678  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   679   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   680  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   681  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   682  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   683  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   684  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   685  /** \brief API to wait for requested duration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   686   * Note: IfxScuCcu_wait shall not use STM in future, because we can guarantee that STM is enabled after reset but  If PLL init is called for changing the frequency during runtime, there is no guarantee that STM is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   687   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   688   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   689  IFX_INLINE void IfxScuCcu_wait(float32 timeSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   690  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   691  /** \brief API to wait for requested duration along with watchdog service to avoid any reset case during startup of the chip.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   692   * Note: IfxScuCcu_wait shall not use STM in future, because we can guarantee that STM is enabled after reset but  If PLL init is called for changing the frequency during runtime, there is no guarantee that STM is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   693   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   694   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   695  IFX_INLINE void IfxScuCcu_waitWithWdtService(float32 timeSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   696  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   697  /** \brief API to configure the LPDIV value to enter into Low Power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   698   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   699   * Caution:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   700   * write to LPDIV with non-zero division ratio will cause system to enter low power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   701   * Low power mode will affect different SPBDIV and SRIDIV ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   703   * The original CCUCON0 ratios should be preserved by user prior to calling this function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   704   * The "normal" CCUCON0 ratios have to be passed to API: "IfxScuCcu_switchToNormalMode" to go back to the original division ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   705   * \param lpDiv Low Power Division Ratio
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   706   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   707   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   708  IFX_INLINE void IfxScuCcu_switchToLowPowerMode(IfxScuCcu_LowPowerDivRatio lpDiv);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   710  /** \brief API to switch back to normal mode from low power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   711   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   712   * Caution:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   713   * The original CCUCON0 setting has to be saved by user prior to entering Low Power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   714   * Pass the original CCUCON0 register as a whole word to this function to restore the normal settings.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   715   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   716   * Ramp back to normal mode is done in steps to avoid sudden jump in frequency and power usage.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   717   * \param ccucon0 CCUCON0 values at normal mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   718   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   720   * Switch to low power mode and back using iLLD functions as below
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   721   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   722   *     uint32 ccucon0 = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   723   *     IfxScuCcu_LowPowerDivRatio lpDiv = IfxScuCcu_LowPowerDivRatio_divBy30;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   724   *     IfxScuCcu_switchToLowPowerMode(lpDiv);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   725   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   726   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   727   * Switch back to normal mode  with the saved ccucon0 value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   728   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   729   *     IfxScuCcu_switchToNormalMode(ccucon0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   730   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   731   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   733  IFX_INLINE void IfxScuCcu_switchToNormalMode(const uint32 ccucon0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   735  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   736  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   737  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   738   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   739  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   740  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   741  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   742  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   743  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   744  /** \brief API to get ADAS divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   745   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   746   * \return ADAS frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   748  IFX_INLINE float32 IfxScuCcu_getAdasFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   750  /** \brief API to get Adc (EVADC, EDSADC)  frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   751   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   752   * \return Adc frequency (fADC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   753   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   754  IFX_INLINE float32 IfxScuCcu_getAdcFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   755  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   756  /** \brief API to get ASCLINF divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   757   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   758   * \return AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   759   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   760  IFX_INLINE float32 IfxScuCcu_getAsclinFFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   762  /** \brief API to get EBU frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   763   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   764   * \return EBU frequency (fEBU) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   765   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   766  IFX_INLINE float32 IfxScuCcu_getEbuFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   768  /** \brief API to get EVR Oscillator frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   769   * This API returns the constant which is specific to the ScuCcu of the controller.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   770   * \return EVR Oscillator frequency (fBACK or fEVR) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   771   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   772  IFX_INLINE float32 IfxScuCcu_getEvrFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   774  /** \brief API to get GETH divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   775   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   776   * \return GETH frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   777   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   778  IFX_INLINE float32 IfxScuCcu_getGethFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   780  /** \brief API to get GTMdivider frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   781   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   782   * return GTM frequency (fGTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   783   * \return Gtm Frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   784   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   785  IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   787  /** \brief API to get I2C frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   788   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   789   * \return I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   790   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   791  IFX_INLINE float32 IfxScuCcu_getI2cFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   792  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   793  /** \brief API to get MCANH divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   794   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   795   * \return MCANH frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   796   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   797  IFX_INLINE float32 IfxScuCcu_getMcanhFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   799  /** \brief API to get Oscillator 0 frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   800   * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   801   * \return Osc0 frequency (fOSC0) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   802   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   803  IFX_INLINE float32 IfxScuCcu_getOsc0Frequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   804  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   805  /** \brief API to get Oscillator 0 frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   806   * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   807   * \return Osc frequency (fOSC) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   808   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   809  IFX_INLINE float32 IfxScuCcu_getOscFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   811  /** \brief Returns the clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   812   * \return Clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   813   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   814  IFX_INLINE IfxScuCcu_PllInputClockSelection IfxScuCcu_getSourceSelection(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   816  /** \brief API to get STM divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   817   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   818   * \return STM frequency (fSTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   819   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   820  IFX_INLINE float32 IfxScuCcu_getStmFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   821  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   822  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   823  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   824  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   825  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   826  /** \brief API to get ASCLINS divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   827   * This API returns the ASCLINS frequency  based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   828   * \return AsclinS frequency (fASCLINS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   829   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   830  IFX_EXTERN float32 IfxScuCcu_getAsclinSFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   831  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   832  /** \brief API to get BBB divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   833   * This API returns the BBBDivider frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   834   * \return BBB frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   835   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   836  IFX_EXTERN float32 IfxScuCcu_getBbbFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   838  /** \brief This API returns the Cpu frequency based on the divider value in CCUCON register and fSource frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   839   * \param cpu CPU number for which effective fCPU is sought
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   840   * \return Cpu[x] frequency in Hz, where x is cpu number passed as parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   841   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   842  IFX_EXTERN float32 IfxScuCcu_getCpuFrequency(const IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   843  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   844  /** \brief API to get FSI2 divider frequency in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   845   * This API returns the fFSI2 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   846   * \return FSI2 frequency (fFSI2) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   847   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   848  IFX_EXTERN float32 IfxScuCcu_getFsi2Frequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   849  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   850  /** \brief API to get FSI divider frequency in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   851   * This API returns the fFSI based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   852   * \return FSI frequency (fFSI) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   853   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   854  IFX_EXTERN float32 IfxScuCcu_getFsiFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   855  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   856  /** \brief API to get MCAN divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   857   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   858   * \return Mcan frequency (fMCAN) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   859   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   860  IFX_EXTERN float32 IfxScuCcu_getMcanFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   861  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   862  /** \brief get source frequency fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   863   * This API returns the source frequency based on the configurations with CCUCON register configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   864   * \return Module frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   865   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   866  IFX_EXTERN float32 IfxScuCcu_getModuleFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   867  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   868  /** \brief API to get MSC divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   869   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   870   * \return Msc frequency (fMSC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   871   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   872  IFX_EXTERN float32 IfxScuCcu_getMscFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   873  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   874  /** \brief API to get actual PER PLL1  frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   875   * This API returns the PER PLL1 frequency based on the K2 divider value in PLLCON and the VCO frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   876   * Fpll1= (Fosc*N)/(P*K2)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   877   * \return PER PLL1 (K2 Divider) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   878   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   879  IFX_EXTERN float32 IfxScuCcu_getPerPllFrequency1(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   880  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   881  /** \brief API to get actual PER PLL2 (K3 Divider) frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   882   * This API returns the PER PLL2 frequency based on the K3 divider value in PLLCON and the VCO frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   883   * Fpll2= (Fosc*N)/(P*K3*1.6)  // DIVBY = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   884   * Fpll2= (Fosc*N)/(P*K3*2)  // DIVBY = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   885   * \return PER PLL2 (K3 Divider ) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   886   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   887  IFX_EXTERN float32 IfxScuCcu_getPerPllFrequency2(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   888  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   889  /** \brief API to get actual Sys PLL output frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   890   * This API returns the based on the divider values in CCUCON, PLLCON registers and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   891   * \return System Pll (fSysPLL) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   892   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   893  IFX_EXTERN float32 IfxScuCcu_getPllFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   894  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   895  /** \brief API to get Qspi divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   896   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   897   * \return Qspi frequency (fQspi) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   898   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   899  IFX_EXTERN float32 IfxScuCcu_getQspiFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   900  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   901  /** \brief get source frequency fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   902   * This API returns the source frequency based on the configurations with CCUCON register configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   903   * \param fsource fsource selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   904   * \return Effective fSOURCE in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   905   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   906  IFX_EXTERN float32 IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource fsource);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   907  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   908  /** \brief API to get SPB divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   909   * This API returns the based on fSOURCE and also on Low power divider mode and/or SPBDIV divider value in CCUCON registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   910   * \return SPB frequency (fSPB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   911   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   912  IFX_EXTERN float32 IfxScuCcu_getSpbFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   913  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   914  /** \brief API to get SRI divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   915   * This API returns the Sri frequency based on the divider values in CCUCON registers and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   916   * \return Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   917   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   918  IFX_EXTERN float32 IfxScuCcu_getSriFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   920  /** \brief API to set ADAS frequency (with ADAS divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   921   * This API configure adas divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   922   * \param adasFreq ADAS frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   923   * \return Actual Adas frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   924   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   925  IFX_EXTERN float32 IfxScuCcu_setAdasFrequency(float32 adasFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   926  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   927  /** \brief API to set ASCLINF frequency (with ASCLINF divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   928   * This API configure ASCLINF divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   929   * \param asclinFFreq AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   930   * \return Actual AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   931   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   932  IFX_EXTERN float32 IfxScuCcu_setAsclinFFrequency(float32 asclinFFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   933  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   934  /** \brief API to set ASCLINS frequency (with ASCLINS divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   935   * This API configure ASCLINS divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   936   * \param asclinSFreq Desired AscLinS frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   937   * \return Actual AsclinS frequency (fASCLINS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   938   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   939  IFX_EXTERN float32 IfxScuCcu_setAsclinSFrequency(float32 asclinSFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   940  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   941  /** \brief API to set BBB frequency (with Bbb divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   942   * This API configure Bbb divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   943   * \param bbbFreq Bbb frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   944   * \return Actual Bbb frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   945   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   946  IFX_EXTERN float32 IfxScuCcu_setBbbFrequency(float32 bbbFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   947  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   948  /** \brief API to set CPU frequency (with CPU divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   949   * This API configure CPU divider values in CCUCON registers. The actual frequency is always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   950   * \param cpu CPU number for which fCPU to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   951   * \param cpuFreq Desired CPU frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   952   * \return Actual CPU[x] frequency in Hz, where x is the cpu number passed as parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   953   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   954  IFX_EXTERN float32 IfxScuCcu_setCpuFrequency(IfxCpu_ResourceCpu cpu, float32 cpuFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   955  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   956  /** \brief API to set FSI2 frequency (with FSI2 divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   957   * This API configure Fsi2 divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   958   * \param fsi2Freq FSI2 frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   959   * \return Actual Fsi2 frequency (fFSI2) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   960   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   961  IFX_EXTERN float32 IfxScuCcu_setFsi2Frequency(float32 fsi2Freq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   962  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   963  /** \brief API to set FSI frequency (with FSI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   964   * This API configure Fsi divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   965   * \param fsiFreq FSI frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   966   * \return Actual Fsi frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   967   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   968  IFX_EXTERN float32 IfxScuCcu_setFsiFrequency(float32 fsiFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   969  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   970  /** \brief API to set GETH frequency (with GETH divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   971   * This API configure geth divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   972   * \param gethFreq GETH frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   973   * \return Actual Geth frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   974   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   975  IFX_EXTERN float32 IfxScuCcu_setGethFrequency(float32 gethFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   976  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   977  /** \brief API to set GTM frequency (with GTM divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   978   * This API configure GTM divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   979   * \param gtmFreq Desired GTM frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   980   * \return Actual GTM frequency in HZ
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   981   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   982  IFX_EXTERN float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   983  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   984  /** \brief API to set I2C frequency (with I2C divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   985   * This API configure adas divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   986   * \param i2cFreq I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   987   * \return Actual I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   988   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   989  IFX_EXTERN float32 IfxScuCcu_setI2cFrequency(float32 i2cFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   990  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   991  /** \brief API to set MCAN frequency (with MCAN divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   992   * This API configure MCAN divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   993   * \param mcanFreq Desired MSC frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   994   * \return Actual Mcan frequency (fMCAN) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   995   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   996  IFX_EXTERN float32 IfxScuCcu_setMcanFrequency(float32 mcanFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   997  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   998  /** \brief API to set MCANH frequency (with MCANH divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   999   * This API configure mcanh divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1000   * \param mcanhFreq MCANH frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1001   * \return Actual MCanh frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1002   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1003  IFX_EXTERN float32 IfxScuCcu_setMcanhFrequency(float32 mcanhFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1004  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1005  /** \brief API to set MSC frequency (with MSC divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1006   * This API configure MSC divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1007   * \param mscFreq Desired MSC frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1008   * \return Actual Msc frequency (fMSC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1009   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1010  IFX_EXTERN float32 IfxScuCcu_setMscFrequency(float32 mscFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1011  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1012  /** \brief API to set QSPI frequency (with QSPI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1013   * This API configure Qspi divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1014   * \param qspiFreq Desired QSPI frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1015   * \return Actual Qspi frequency (fQspi) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1016   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1017  IFX_EXTERN float32 IfxScuCcu_setQspiFrequency(float32 qspiFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1018  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1019  /** \brief API to set SPB frequency (with SPB divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1020   * This API configure SPB divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1021   * \param spbFreq Desired SPB frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1022   * \return Actual SPB frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1023   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1024  IFX_EXTERN float32 IfxScuCcu_setSpbFrequency(float32 spbFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1025  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1026  /** \brief API to set SRI frequency (with SRI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1027   * This API configure Sri divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1028   * \param sriFreq Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1029   * \return Actual Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1030   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1031  IFX_EXTERN float32 IfxScuCcu_setSriFrequency(float32 sriFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1032  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1033  /** \brief API to set STM frequency (with STM divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1034   * This API configure Stm divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1035   * \param stmFreq Stm frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1036   * \return Actual Stm frequency (fSTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1037   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1038  IFX_EXTERN float32 IfxScuCcu_setStmFrequency(float32 stmFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1039  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1040  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1041  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1042  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1043   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1044  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1045  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1046  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1047  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1048  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1049  /** \brief This inline function configures the Ccu SYS PLLs initial step and PER PLL.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1050   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1051  IFX_INLINE boolean IfxScuCcu_configureCcuInitialStep(const IfxScuCcu_InitialStepConfig *pllInitStepCfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1052  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1053  /** \brief Inlined API for clock distribution
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1054   * For each CCUCON register update the configured value with the mask.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1055   * \param clockDistributionConfig pointer to clock distribution structure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1056   * \return TRUE: Operation successful, FALSE: Operation Failure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1057   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1058  IFX_INLINE boolean IfxScuCcu_distributeClockInline(const IfxScuCcu_ClockDistributionConfig *clockDistributionConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1059  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1060  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1061  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1062  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1063  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1064  /** \brief API for clock distribution.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1065   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1066   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1067  IFX_EXTERN void IfxScuCcu_distributeClock(IfxScuCcu_ClockDistributionConfig *clockDistributionConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1068  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1069  /** \brief API to initialize the SCU Clock Control Unit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1070   * This API initialize the Sys PLL with ramp steps, BUS dividers and Per PLL for the configuration provided by the configuration structure.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1071   * FSyspll = (Fosc * Nsys)/(Psys * K2sys);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1072   * Fpll1= (Fosc * Nper)/(Pper * K2per);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1073   * Fpll2= (Fosc * Nper)/(Pper * K3per * 1.6); // if DIVBY = 0, else Fpll2= (Fosc * Nper)/(Pper * K3per * 2) // if DIVBY = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1074   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1075   * Note: Following SMU alarms are disabled before the PLL configuration and Enabled at the end of PLL lock in the function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1076   * PLL0,1,2 clock out of range frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1077   * PLL0,1 VCO loss of lock event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1078   * System PLL Oscillator Watchdog, input clock out of range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1079   * The application should store/restore these alarm configurations if required.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1080   * \param config Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1081   * \return Error status of the ScuCcu initialization process.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1082   * \retval TRUE: If an error occurred during initialization.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1083   * \retval FALSE: If initialization was successful.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1084   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1085  IFX_EXTERN boolean IfxScuCcu_init(const IfxScuCcu_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1086  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1087  /** \brief Initializes the clock configuration with default values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1088   * \param cfg Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1089   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1090   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1091  IFX_EXTERN void IfxScuCcu_initConfig(IfxScuCcu_Config *cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1092  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1093  /** \brief API to switch to Backup clock from the current PLL frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1094   * \param cfg Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1095   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1096   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1097  IFX_EXTERN void IfxScuCcu_switchToBackupClock(const IfxScuCcu_Config *cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1098  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1099  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1100  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1101  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1102  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1103  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1105  /** \brief Clear the trap status flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1106   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1107   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1108   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1109  IFX_INLINE void IfxScuCcu_clearTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1110  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1111  /** \brief Get trap disable flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1112   * \param cpuIndex Cpu index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1113   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1114   * \return Trap request can be generated or not.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1115   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1116  IFX_INLINE boolean IfxScuCcu_getTrapDisableFlag(IfxCpu_ResourceCpu cpuIndex, IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1117  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1118  /** \brief Get the trap status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1119   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1120   * \return Trap was requested or not.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1121   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1122  IFX_INLINE boolean IfxScuCcu_getTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1124  /** \brief Set the trap disable flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1125   * \param cpuIndex Cpu index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1126   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1127   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1129  IFX_INLINE void IfxScuCcu_setTrapDisableFlag(IfxCpu_ResourceCpu cpuIndex, IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1130  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1131  /** \brief Set the trap status flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1132   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1134   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1135  IFX_INLINE void IfxScuCcu_setTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1136  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1137  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1138   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1139  IFX_INLINE boolean IfxScuCcu_throttleSysPllClockInline(const IfxScuCcu_PllThrottleConfig *pllThrottleConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1140  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1141  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1142  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1143  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1145  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1146   * \param modamp modulation amplitude
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1147   * \param RGain_P RGain values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1148   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1149   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1150  IFX_EXTERN void IfxScuCcu_calRGainParameters(IfxScuCcu_ModulationAmplitude modamp, IfxScuCcu_RGain_Values *RGain_P);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1151  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1152  /** \brief initialize modulation parameters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1153   * \param Mod_Cfg modulation configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1156  IFX_EXTERN void IfxScuCcu_modulation_init(const IfxScuCcu_Mod_Config *Mod_Cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1157  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1158  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1159   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1160   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1161  IFX_EXTERN void IfxScuCcu_throttleSysPllClock(IfxScuCcu_PllThrottleConfig *pllThrottleConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1162  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1163  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1164  /*-------------------Global Exported Variables/Constants----------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1165  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1167  /** \brief maps to the IfxScuCcu_ModulationAmplitude enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1169  IFX_EXTERN IFX_CONST float32 IfxScuCcu_MA_percent[IfxScuCcu_ModulationAmplitude_count];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1170  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1171  /** \brief Configuration structure for SCU CCU driver.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1172   * The values of this structure are defined as # defined macros in the implementation of Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1173   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1174  IFX_EXTERN IFX_CONST IfxScuCcu_Config     IfxScuCcu_defaultClockConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1176  /** \brief default modulation config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1177   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1178  IFX_EXTERN IFX_CONST IfxScuCcu_Mod_Config IfxScuCcu_defaultModConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1179  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1180  IFX_EXTERN uint32                         IfxScuCcu_xtalFrequency;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1181  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1182  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1183  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1184  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1185  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1186  IFX_INLINE void IfxScuCcu_clearTrapStatusFlag(IfxScuCcu_Traprequest request)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1187  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1188      uint32 trapclear = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1189      SCU_TRAPCLR.U |= (trapclear << request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1190  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1193  IFX_INLINE boolean IfxScuCcu_configureCcuInitialStep(const IfxScuCcu_InitialStepConfig *pllInitStepCfg)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1194  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1195      uint8                                initError = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1196      uint16                               endinitSfty_pw;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1197  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1198      uint32                               timeoutCycleCount;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1199      const IfxScuCcu_pllsParameterConfig *pllsParamCfg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1200      pllsParamCfg   = &pllInitStepCfg->pllsParameters;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1201      /*get the watch-dog passwords for usage with this function*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1202      endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1203  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1204      /* Reset Safety ENDINIT, SCU_CCUCON registers are protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1205      IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1206  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1207      timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1208  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1209      while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1210      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1211          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1212      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1213  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1214      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1215          Ifx_SCU_CCUCON0 scuCcucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1216          scuCcucon0.U        = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1217          scuCcucon0.B.CLKSEL = 0; /*Select the EVR as fsource0/1/2 for the clock distribution */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1218          scuCcucon0.B.UP     = 1; /*Update the ccucon0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1219          SCU_CCUCON0.U       = scuCcucon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1220      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1221  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1222      timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1224      while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1225      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1226          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1227      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1229      /*Disable SMU Alarms */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1230      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1231          SMU_KEYS.U    = (uint32)0xBCU;        /* Enable access to SMU registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1232          SMU_AG8CF0.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1233          SMU_AG8CF1.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1234          SMU_AG8CF2.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1235          SMU_KEYS.U    = (uint32)0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1236      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1237  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1238      /* Power down the both the PLLs before configuring registers*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1239      /* Both the PLLs are powered down to be sure for asynchronous PLL registers update cause no glitches */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1240      SCU_SYSPLLCON0.B.PLLPWD = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1241      SCU_PERPLLCON0.B.PLLPWD = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1242  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1243      timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1244  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1245      while ((SCU_SYSPLLSTAT.B.PWDSTAT == 0) || (SCU_PERPLLSTAT.B.PWDSTAT == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1246      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1247          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1248      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1249  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1250      /* Now configure the oscillator, required oscillator mode is external crystal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1252      if ((pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fOsc0) || (pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fSysclk))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1253  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1254      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1255          Ifx_SCU_OSCCON scuOsccon;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1256          scuOsccon.U      = SCU_OSCCON.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1257  #if (IFX_CFG_SCU_EXT_CLOCK == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1258          scuOsccon.B.MODE = 2U;   /* external clock selected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1259  #else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1260          scuOsccon.B.MODE = 0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1261  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1262  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1263          scuOsccon.B.OSCVAL = (uint32)(pllsParamCfg->xtalFrequency / 1000000U) - 15; /*XTAL range 16MHz to 40MHz*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1264          /*Note: Oscillator Watchdog Reset (OSCRES) is not required when the PLLs are powered down*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1265          SCU_OSCCON.U       = scuOsccon.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1266      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1267  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1268      /* Configure the initial steps for the system PLL*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1269      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1270          Ifx_SCU_SYSPLLCON0 sysPllCon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1271          sysPllCon0.U       = SCU_SYSPLLCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1272          sysPllCon0.B.PDIV  = pllsParamCfg->sysPllConfig.pDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1273          sysPllCon0.B.NDIV  = pllsParamCfg->sysPllConfig.nDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1274          sysPllCon0.B.INSEL = pllsParamCfg->pllInputClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1275          SCU_SYSPLLCON0.U   = sysPllCon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1276      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1277  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1278      /* Configure the initial steps for the peripheral PLL*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1279      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1280          Ifx_SCU_PERPLLCON0 scuPerPllCon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1281          scuPerPllCon0.U       = SCU_PERPLLCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1282          scuPerPllCon0.B.DIVBY = pllsParamCfg->perPllConfig.k3DividerBypass;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1283          scuPerPllCon0.B.PDIV  = pllsParamCfg->perPllConfig.pDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1284          scuPerPllCon0.B.NDIV  = pllsParamCfg->perPllConfig.nDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1285          SCU_PERPLLCON0.U      = scuPerPllCon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1286      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1288      /* Power up the both the PLLs before configuring registers*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1289      SCU_SYSPLLCON0.B.PLLPWD = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1290      SCU_PERPLLCON0.B.PLLPWD = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1292      timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1294      while ((SCU_SYSPLLSTAT.B.PWDSTAT == 1) || (SCU_PERPLLSTAT.B.PWDSTAT == 1))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1295      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1296          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1297      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1298  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1299      timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1301      while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1302             (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1303             (SCU_PERPLLSTAT.B.K3RDY == 0U))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1304      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1305          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1306      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1307  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1308      SCU_SYSPLLCON1.B.K2DIV = pllsParamCfg->sysPllConfig.k2Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1309      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1310          Ifx_SCU_PERPLLCON1 scuPerPllCon1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1311          scuPerPllCon1.U       = SCU_PERPLLCON1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1312          scuPerPllCon1.B.K2DIV = pllsParamCfg->perPllConfig.k2Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1313          scuPerPllCon1.B.K3DIV = pllsParamCfg->perPllConfig.k3Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1314          SCU_PERPLLCON1.U      = scuPerPllCon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1315      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1316  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1317      timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1319      while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1320             (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1321             (SCU_PERPLLSTAT.B.K3RDY == 0U))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1322      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1323          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1324      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1325  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1326      /*Check if the OSC frequencies are in the limit*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1327      timeoutCycleCount = IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1329      while ((SCU_OSCCON.B.PLLLV == 0) && (SCU_OSCCON.B.PLLHV == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1330      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1331          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1332      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1333  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1334      /* Now start PLL locking for latest set values*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1335      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1336          SCU_SYSPLLCON0.B.RESLD = 1;             /* Restart Sys PLL lock detection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1337          SCU_PERPLLCON0.B.RESLD = 1;             /* Restart Per PLL lock detection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1338  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1339          timeoutCycleCount      = IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1340  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1341          while ((SCU_SYSPLLSTAT.B.LOCK == 0) || (SCU_PERPLLSTAT.B.LOCK == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1342          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1343              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1344          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1345      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1346      /*Enable SMU Alarms */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1347      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1348          SMU_KEYS.U = (uint32)0xBCU;           /* Enable access to SMU registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1349          SMU_CMD.U  = (uint32)0x00000005;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1350          SMU_AG8.U  = IFXSCUCCU_SMUALARM_MASK; /* Clear SMU Alarms*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1351          SMU_KEYS.U = (uint32)0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1352      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1353      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1354          Ifx_SCU_CCUCON0 scu_ccucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1355          scu_ccucon0.U        = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1356          scu_ccucon0.B.CLKSEL = 1; /*Select the PLLs for fsource0/1/2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1357          scu_ccucon0.B.UP     = 1; /*Update the ccucon0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1358  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1359          timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1360  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1361          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1362          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1363              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1364          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1365  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1366          SCU_CCUCON0.U     = scu_ccucon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1367  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1368          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1369  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1370          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1371          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1372              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1373          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1374      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1375  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1376      IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1377      return (boolean)initError;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1378  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1379  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1380  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1381  IFX_INLINE boolean IfxScuCcu_distributeClockInline(const IfxScuCcu_ClockDistributionConfig *clockDistributionConfig)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1382  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1383      uint16 endinitSfty_pw;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1384      uint32 timeoutCycleCount;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1385      uint32 initError = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1386  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1387      /*get the watch-dog passwords for usage with this function*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1388      endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1389  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1390      /* Reset Safety ENDINIT, SCU_CCUCON registers are protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1391      IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1393      /*Configure the clock distribution */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1394      {                                                    /*Write CCUCON0 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1395          Ifx_SCU_CCUCON0 ccucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1396          ccucon0.U         = SCU_CCUCON0.U & ~clockDistributionConfig->ccucon0.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1397          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1398          ccucon0.U        |= (clockDistributionConfig->ccucon0.mask & clockDistributionConfig->ccucon0.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1399          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1400  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1401          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1402          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1403              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1404          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1405  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1406          SCU_CCUCON0.U     = ccucon0.U;      /*Set update bit explicitly to make above configurations effective */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1407          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1408  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1409          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1410          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1411              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1412          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1413      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1414      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1415          /*Write CCUCON1 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1416          Ifx_SCU_CCUCON1 ccucon1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1417          ccucon1.U = SCU_CCUCON1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1419          if (ccucon1.B.CLKSELMCAN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1420              || ccucon1.B.CLKSELMSC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1421              || ccucon1.B.CLKSELQSPI)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1422          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1423              /* Non Zero ClockSel exists - set to Zero */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1424              /* CAUTION: this would briefly reset and set all clocks in CCUCON1! */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1425              ccucon1.U  = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1426              /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1427              ccucon1.U |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1428  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1429              /* set Clock selects to 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1430              ccucon1.B.CLKSELMCAN = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1431              ccucon1.B.CLKSELMSC  = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1432              ccucon1.B.CLKSELQSPI = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1434              timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1435  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1436              while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1437              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1438                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1439              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1441              SCU_CCUCON1.U     = ccucon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1442  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1443              timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1444  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1445              while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1446              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1447                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1448              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1449          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1450  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1451          ccucon1.U         = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1452          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1453          ccucon1.U        |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1454  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1455          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1456  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1457          while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1458          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1459              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1460          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1461  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1462          SCU_CCUCON1.U     = ccucon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1463  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1464          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1465  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1466          while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1467          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1468              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1469          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1470      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1472      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1473          /*Write CCUCON2 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1474          Ifx_SCU_CCUCON2 ccucon2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1475          ccucon2.U = SCU_CCUCON2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1477          if (ccucon2.B.CLKSELASCLINS)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1478          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1479              /* Non Zero ClockSel exists - set to Zero */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1480              /* CAUTION: this would briefly reset and set ASCLINS clock in CCUCON2! */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1481              ccucon2.U               = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1482              /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1483              ccucon2.U              |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1484  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1485              ccucon2.B.CLKSELASCLINS = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1486  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1487              timeoutCycleCount       = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1488  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1489              while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1490              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1491                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1492              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1494              SCU_CCUCON2.U     = ccucon2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1495  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1496              timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1497  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1498              while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1499              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1500                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1501              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1502          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1503  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1504          ccucon2.U         = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1505          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1506          ccucon2.U        |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1507  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1508          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1509  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1510          while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1511          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1512              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1513          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1514  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1515          SCU_CCUCON2.U     = ccucon2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1516  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1517          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1518  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1519          while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1520          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1521              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1522          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1523      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1524      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1525          /*Write CCUCON5 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1526          Ifx_SCU_CCUCON5 ccucon5;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1527          ccucon5.U         = SCU_CCUCON5.U & ~clockDistributionConfig->ccucon5.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1528          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1529          ccucon5.U        |= (clockDistributionConfig->ccucon5.mask & clockDistributionConfig->ccucon5.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1530          ccucon5.B.UP      = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1531          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1532  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1533          while (SCU_CCUCON5.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1534          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1535              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1536          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1538          SCU_CCUCON5.U     = ccucon5.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1539          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1541          while (SCU_CCUCON5.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1542          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1543              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1544          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1545      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1546      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1547          /*Write CCUCON6 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1548          Ifx_SCU_CCUCON6 ccucon6;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1549          ccucon6.U     = SCU_CCUCON6.U & ~clockDistributionConfig->ccucon6.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1550          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1551          ccucon6.U    |= (clockDistributionConfig->ccucon6.mask & clockDistributionConfig->ccucon6.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1552          SCU_CCUCON6.U = ccucon6.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1553      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1555      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1556          /*Write CCUCON7 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1557          Ifx_SCU_CCUCON7 ccucon7;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1558          ccucon7.U     = SCU_CCUCON7.U & ~clockDistributionConfig->ccucon7.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1559          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1560          ccucon7.U    |= (clockDistributionConfig->ccucon7.mask & clockDistributionConfig->ccucon7.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1561          SCU_CCUCON7.U = ccucon7.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1562      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1563  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1564      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1565          /*Write CCUCON8 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1566          Ifx_SCU_CCUCON8 ccucon8;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1567          ccucon8.U     = SCU_CCUCON8.U & ~clockDistributionConfig->ccucon8.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1568          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1569          ccucon8.U    |= (clockDistributionConfig->ccucon8.mask & clockDistributionConfig->ccucon8.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1570          SCU_CCUCON8.U = ccucon8.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1571      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1572      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1573          /*Write CCUCON9 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1574          Ifx_SCU_CCUCON9 ccucon9;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1575          ccucon9.U     = SCU_CCUCON9.U & ~clockDistributionConfig->ccucon9.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1576          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1577          ccucon9.U    |= (clockDistributionConfig->ccucon9.mask & clockDistributionConfig->ccucon9.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1578          SCU_CCUCON9.U = ccucon9.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1579      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1580      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1581          /*Write CCUCON10 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1582          Ifx_SCU_CCUCON10 ccucon10;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1583          ccucon10.U     = SCU_CCUCON10.U & ~clockDistributionConfig->ccucon10.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1584          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1585          ccucon10.U    |= (clockDistributionConfig->ccucon10.mask & clockDistributionConfig->ccucon10.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1586          SCU_CCUCON10.U = ccucon10.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1587      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1588      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1589          /*Write CCUCON11 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1590          Ifx_SCU_CCUCON11 ccucon11;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1591          ccucon11.U     = SCU_CCUCON11.U & ~clockDistributionConfig->ccucon11.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1592          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1593          ccucon11.U    |= (clockDistributionConfig->ccucon11.mask & clockDistributionConfig->ccucon11.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1594          SCU_CCUCON11.U = ccucon11.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1595      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1596      IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1597      return (boolean)initError;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1598  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1599  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1600  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1601  IFX_INLINE float32 IfxScuCcu_getAdasFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1602  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1603      uint32 adasDiv = SCU_CCUCON5.B.ADASDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1604  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1605      return (adasDiv == (uint32)0) ? 0 : IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / adasDiv;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1606  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1607  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1609  IFX_INLINE float32 IfxScuCcu_getAdcFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1610  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1611      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1612  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1615  IFX_INLINE float32 IfxScuCcu_getAsclinFFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1616  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1617      float32 freq          = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1618  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1619      uint8   asclindiv[16] = {1, 1, 2, 3, 4, 5, 6, 6, 8, 8, 10, 10, 12, 12, 12, 15};
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1620  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1621      if (SCU_CCUCON2.B.ASCLINFDIV)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1622      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1623          freq = IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_2) / asclindiv[SCU_CCUCON2.B.ASCLINFDIV];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1624      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1625  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1626      return freq;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1627  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1629  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1630  IFX_INLINE float32 IfxScuCcu_getEbuFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1631  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1632      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1633  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1635  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1636  IFX_INLINE float32 IfxScuCcu_getEvrFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1637  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1638      return IFXSCU_EVR_OSC_FREQUENCY;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1639  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1641  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1642  IFX_INLINE float32 IfxScuCcu_getGethFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1643  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1644      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON5.B.GETHDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1645  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1647  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1648  IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1649  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1650      /* fGTM = fSOURCEGTM / GTMDIV ;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1651       * fSOURCEGTM = fSPB *2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1652       */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1653      uint8   gtmDiv  = SCU_CCUCON0.B.GTMDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1654      float32 gtmFreq = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1656      if (gtmDiv == 0u)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1657      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1658          gtmFreq = 0.0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1659      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1660      else if (gtmDiv == 1U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1661      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1662          gtmFreq = IfxScuCcu_getSpbFrequency() * 2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1663      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1664      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1665  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1666      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1667          gtmFreq = IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / gtmDiv;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1668      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1669  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1670      return gtmFreq;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1671  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1672  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1674  IFX_INLINE float32 IfxScuCcu_getI2cFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1675  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1676      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_2) / SCU_CCUCON1.B.I2CDIV;
	movh.a	a2,#61443
	ld.bu	d15,[a2]@los(0xf0036035)
	and	d15,#15
	itof	d15,d15
	fret
.L175:
	; End of function
	.sdecl	'.text.IfxI2c.IfxI2c_getIndex',code,cluster('IfxI2c_getIndex')
	.sect	'.text.IfxI2c.IfxI2c_getIndex'
	.align	2
	
	.global	IfxI2c_getIndex

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   182  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   183  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   184  IfxI2c_Index IfxI2c_getIndex(Ifx_I2C *i2c)
; Function IfxI2c_getIndex
.L64:
IfxI2c_getIndex:	.type	func

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   185  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   186      uint32       index;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   187      IfxI2c_Index result;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   188  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   189      result = IfxI2c_Index_none;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   190  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   191      for (index = 0; index < IFXI2C_NUM_MODULES; index++)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   192      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   193          if (IfxI2c_cfg_indexMap[index].module == i2c)
	mov	d2,#-1
	movh.a	a15,#@his(IfxI2c_cfg_indexMap)
.L395:
	lea	a15,[a15]@los(IfxI2c_cfg_indexMap)
.L505:
	mov.a	a2,#1
.L18:
	ld.a	a5,[a15]
.L506:
	jne.a	a5,a4,.L19
.L507:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   194          {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   195              result = (IfxI2c_Index)IfxI2c_cfg_indexMap[index].index;
	ld.w	d15,[a15]4
.L508:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   196              break;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   197          }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   198      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   199  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   200      return result;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   201  }
	extr	d2,d15,#0,#8
	ret
.L19:
	lea	a15,[a15]8
	loop	a2,.L18
.L509:
	ret
.L254:
	
__IfxI2c_getIndex_function_end:
	.size	IfxI2c_getIndex,__IfxI2c_getIndex_function_end-IfxI2c_getIndex
.L125:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_initSclSdaPin',code,cluster('IfxI2c_initSclSdaPin')
	.sect	'.text.IfxI2c.IfxI2c_initSclSdaPin'
	.align	2
	
	.global	IfxI2c_initSclSdaPin

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   202  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   203  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   204  void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver)
; Function IfxI2c_initSclSdaPin
.L66:
IfxI2c_initSclSdaPin:	.type	func
	mov.aa	a15,a4
.L398:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   205  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   206      IfxPort_OutputMode mode = (IfxPort_OutputMode)IfxPort_Mode_outputOpenDrainGeneral;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   207      IfxPort_setPinModeOutput(scl->pin.port, scl->pin.pinIndex, mode, scl->outSelect);
	mov	d8,d4
	ld.bu	d15,[a15]13
.L399:
	mov.aa	a12,a5
.L267:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89  /** \brief specifies LVDS-M or LVDS-H mode as declare in Register MODULE_PORT.LPCRx.LVDSM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_LvdsMode_high   = 0, /**< \brief LVDS-H Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_LvdsMode_medium = 1  /**< \brief LVDS-M Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95  } IfxPort_LvdsMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143          IfxPort_OutputMode_openDrain = 0x18U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144          IfxPort_OutputMode_none      = 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160      IfxPort_PadDriver_ttlSpeed4            = 11, /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161      IfxPort_PadDriver_ttl3v3Speed1         = 12, /**< \brief 3.3v Pad supply speed1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162      IfxPort_PadDriver_ttl3v3Speed2         = 13, /**< \brief 3.3v Pad supply speed2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163      IfxPort_PadDriver_ttl3v3Speed3         = 14, /**< \brief 3.3v Pad supply speed3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadDriver_ttl3v3Speed4         = 15  /**< \brief 3.3v Pad supply speed4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171      IfxPort_PadSupply_3v = 0,  /**< \brief select,3.3v */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      IfxPort_PadSupply_5v = 1   /**< \brief select,5V */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  /** \brief enable analog/digital mode for port pin, as Defined in MODULE_PORTx.PDISC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179      IfxPort_PinFunctionMode_digital = 0,  /**< \brief Pad Pn.x is enabled and can be selected for digital function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      IfxPort_PinFunctionMode_analog  = 1   /**< \brief Pad Pn.x is enabled and can be selected for analog function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181  } IfxPort_PinFunctionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197  /** \brief Enable/DIsable LVDS direction TX or RX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201      IfxPort_LvdsDirection_rx = 0,  /**< \brief LVDS direction RX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202      IfxPort_LvdsDirection_tx = 1   /**< \brief LVDS direction TX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203  } IfxPort_LvdsDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205  /** \brief Enable/DIsable LVDS Path.declared in MODULE_PORTx.LPCRx.TX_EN and MODULE_PORTx.LPCRx.RX_EN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209      IfxPort_LvdsPath_enable  = 0, /**< \brief LVDS enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210      IfxPort_LvdsPath_disable = 1  /**< \brief LVDS disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211  } IfxPort_LvdsPath;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213  /** \brief Specifies whether LVDS pull down resistor must be enabled/disabled as declared in Register MODULE_PORT.LPCRx.PWDPD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217      IfxPort_LvdsPullDown_disable = 0,  /**< \brief Disable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218      IfxPort_LvdsPullDown_enable  = 1   /**< \brief Enable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219  } IfxPort_LvdsPullDown;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221  /** \brief Specifies LVDS-Termination mode as declare in Register MODULE_PORT.LPCRx.TERM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225      IfxPort_LvdsTerminationMode_external = 0,  /**< \brief Termination Mode External */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226      IfxPort_LvdsTerminationMode_internal = 1   /**< \brief Termination Mode Internal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227  } IfxPort_LvdsTerminationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235  /** \brief To Configure LVDS mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239      IfxPort_LvdsMode     lvdsMode;                   /**< \brief specifies LVDS-M or LVDS-H mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240      IfxPort_ControlledBy enablePortControlled;       /**< \brief specifies whether LVDS is controlled by PORT or HSCT */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241      IfxPort_PadSupply    padSupply;                  /**< \brief specify supply voltage */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242  } IfxPort_LvdsConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286  /** \brief set analog/digital mode for pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param port Pointer to Port register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \param pinIndex specifies the pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   * \param mode set analog/digital mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395   * /code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief set lvds mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port pointer to Port Register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex specifies pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param pinMode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param lvds config LVDS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448  IFX_EXTERN void IfxPort_setPinModeLVDS(Ifx_P *port, uint8 pinIndex, IfxPort_Mode pinMode, IfxPort_LvdsConfig *lvds);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465  /** \brief Enable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470  IFX_EXTERN void IfxPort_setPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  /** \brief Disable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474   * \param pinIndex Specifies the pin for which the mode has to be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477  IFX_EXTERN void IfxPort_resetPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526  /** \brief Returns the module address of the selected Port module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527   * \param port Pointer to PORT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528   * \return PORT module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   563   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   564   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   565   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   566   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   568   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   569  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   571  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   572   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   573   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   574   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   575   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   578   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   579   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   580   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   581   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   585  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   589  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   590  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   593  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   594   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   595   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   596   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   599   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   601   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   602  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   604  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   605   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   606   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   607   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   608   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   609   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   610   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   611   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   612   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   613  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   615  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   616   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   617   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   618   * \param mode Selects the controller for the port pin(Tricore,EVADC,GETH,SCR etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   619   * 0-> normal function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   620   * 1-> Alternate functionality(SCR pin,EVADC PDD,GETH RGMII/MII etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   621   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   622   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   623  IFX_EXTERN void IfxPort_modifyPinControllerSelection(Ifx_P *port, uint8 pinIndex, boolean mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   624  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   625  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   626  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   629  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   630  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   631      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   635  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   637      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   641  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   643      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   647  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   649      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   651      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   652      port->PDISC.U |= (mode << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   653      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   654  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   657  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   658  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   659      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   663  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   665      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   666  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   669  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   670  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   671      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   672  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   674  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   675  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   676  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   677      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
	or	d5,d15,#192
	ld.a	a4,[a15]4
.L397:
	ld.bu	d4,[a15]8
.L396:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89  /** \brief specifies LVDS-M or LVDS-H mode as declare in Register MODULE_PORT.LPCRx.LVDSM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_LvdsMode_high   = 0, /**< \brief LVDS-H Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_LvdsMode_medium = 1  /**< \brief LVDS-M Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95  } IfxPort_LvdsMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143          IfxPort_OutputMode_openDrain = 0x18U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144          IfxPort_OutputMode_none      = 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160      IfxPort_PadDriver_ttlSpeed4            = 11, /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161      IfxPort_PadDriver_ttl3v3Speed1         = 12, /**< \brief 3.3v Pad supply speed1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162      IfxPort_PadDriver_ttl3v3Speed2         = 13, /**< \brief 3.3v Pad supply speed2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163      IfxPort_PadDriver_ttl3v3Speed3         = 14, /**< \brief 3.3v Pad supply speed3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadDriver_ttl3v3Speed4         = 15  /**< \brief 3.3v Pad supply speed4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171      IfxPort_PadSupply_3v = 0,  /**< \brief select,3.3v */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      IfxPort_PadSupply_5v = 1   /**< \brief select,5V */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  /** \brief enable analog/digital mode for port pin, as Defined in MODULE_PORTx.PDISC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179      IfxPort_PinFunctionMode_digital = 0,  /**< \brief Pad Pn.x is enabled and can be selected for digital function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      IfxPort_PinFunctionMode_analog  = 1   /**< \brief Pad Pn.x is enabled and can be selected for analog function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181  } IfxPort_PinFunctionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197  /** \brief Enable/DIsable LVDS direction TX or RX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201      IfxPort_LvdsDirection_rx = 0,  /**< \brief LVDS direction RX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202      IfxPort_LvdsDirection_tx = 1   /**< \brief LVDS direction TX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203  } IfxPort_LvdsDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205  /** \brief Enable/DIsable LVDS Path.declared in MODULE_PORTx.LPCRx.TX_EN and MODULE_PORTx.LPCRx.RX_EN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209      IfxPort_LvdsPath_enable  = 0, /**< \brief LVDS enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210      IfxPort_LvdsPath_disable = 1  /**< \brief LVDS disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211  } IfxPort_LvdsPath;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213  /** \brief Specifies whether LVDS pull down resistor must be enabled/disabled as declared in Register MODULE_PORT.LPCRx.PWDPD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217      IfxPort_LvdsPullDown_disable = 0,  /**< \brief Disable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218      IfxPort_LvdsPullDown_enable  = 1   /**< \brief Enable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219  } IfxPort_LvdsPullDown;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221  /** \brief Specifies LVDS-Termination mode as declare in Register MODULE_PORT.LPCRx.TERM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225      IfxPort_LvdsTerminationMode_external = 0,  /**< \brief Termination Mode External */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226      IfxPort_LvdsTerminationMode_internal = 1   /**< \brief Termination Mode Internal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227  } IfxPort_LvdsTerminationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235  /** \brief To Configure LVDS mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239      IfxPort_LvdsMode     lvdsMode;                   /**< \brief specifies LVDS-M or LVDS-H mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240      IfxPort_ControlledBy enablePortControlled;       /**< \brief specifies whether LVDS is controlled by PORT or HSCT */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241      IfxPort_PadSupply    padSupply;                  /**< \brief specify supply voltage */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242  } IfxPort_LvdsConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286  /** \brief set analog/digital mode for pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param port Pointer to Port register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \param pinIndex specifies the pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   * \param mode set analog/digital mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395   * /code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief set lvds mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port pointer to Port Register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex specifies pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param pinMode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param lvds config LVDS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448  IFX_EXTERN void IfxPort_setPinModeLVDS(Ifx_P *port, uint8 pinIndex, IfxPort_Mode pinMode, IfxPort_LvdsConfig *lvds);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465  /** \brief Enable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470  IFX_EXTERN void IfxPort_setPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  /** \brief Disable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474   * \param pinIndex Specifies the pin for which the mode has to be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477  IFX_EXTERN void IfxPort_resetPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526  /** \brief Returns the module address of the selected Port module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527   * \param port Pointer to PORT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528   * \return PORT module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   563   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   564   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   565   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   566   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   568   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   569  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   571  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   572   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   573   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   574   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   575   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   578   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   579   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   580   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   581   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   585  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   589  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   590  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   593  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   594   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   595   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   596   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   599   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   601   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   602  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   604  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   605   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   606   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   607   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   608   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   609   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   610   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   611   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   612   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   613  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   615  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   616   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   617   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   618   * \param mode Selects the controller for the port pin(Tricore,EVADC,GETH,SCR etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   619   * 0-> normal function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   620   * 1-> Alternate functionality(SCR pin,EVADC PDD,GETH RGMII/MII etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   621   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   622   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   623  IFX_EXTERN void IfxPort_modifyPinControllerSelection(Ifx_P *port, uint8 pinIndex, boolean mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   624  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   625  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   626  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   629  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   630  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   631      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   635  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   637      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   641  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   643      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   647  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   649      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   651      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   652      port->PDISC.U |= (mode << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   653      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   654  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   657  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   658  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   659      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   663  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   665      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   666  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   669  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   670  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   671      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   672  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   674  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   675  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   676  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   677      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
	call	IfxPort_setPinMode
.L268:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   208      IfxPort_setPinModeOutput(sda->pin.port, sda->pin.pinIndex, mode, sda->outSelect);
	ld.bu	d15,[a12]13
.L514:
	ld.a	a4,[a12]4
.L515:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89  /** \brief specifies LVDS-M or LVDS-H mode as declare in Register MODULE_PORT.LPCRx.LVDSM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_LvdsMode_high   = 0, /**< \brief LVDS-H Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_LvdsMode_medium = 1  /**< \brief LVDS-M Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95  } IfxPort_LvdsMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143          IfxPort_OutputMode_openDrain = 0x18U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144          IfxPort_OutputMode_none      = 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160      IfxPort_PadDriver_ttlSpeed4            = 11, /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161      IfxPort_PadDriver_ttl3v3Speed1         = 12, /**< \brief 3.3v Pad supply speed1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162      IfxPort_PadDriver_ttl3v3Speed2         = 13, /**< \brief 3.3v Pad supply speed2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163      IfxPort_PadDriver_ttl3v3Speed3         = 14, /**< \brief 3.3v Pad supply speed3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadDriver_ttl3v3Speed4         = 15  /**< \brief 3.3v Pad supply speed4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171      IfxPort_PadSupply_3v = 0,  /**< \brief select,3.3v */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      IfxPort_PadSupply_5v = 1   /**< \brief select,5V */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  /** \brief enable analog/digital mode for port pin, as Defined in MODULE_PORTx.PDISC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179      IfxPort_PinFunctionMode_digital = 0,  /**< \brief Pad Pn.x is enabled and can be selected for digital function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      IfxPort_PinFunctionMode_analog  = 1   /**< \brief Pad Pn.x is enabled and can be selected for analog function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181  } IfxPort_PinFunctionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197  /** \brief Enable/DIsable LVDS direction TX or RX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201      IfxPort_LvdsDirection_rx = 0,  /**< \brief LVDS direction RX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202      IfxPort_LvdsDirection_tx = 1   /**< \brief LVDS direction TX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203  } IfxPort_LvdsDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205  /** \brief Enable/DIsable LVDS Path.declared in MODULE_PORTx.LPCRx.TX_EN and MODULE_PORTx.LPCRx.RX_EN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209      IfxPort_LvdsPath_enable  = 0, /**< \brief LVDS enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210      IfxPort_LvdsPath_disable = 1  /**< \brief LVDS disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211  } IfxPort_LvdsPath;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213  /** \brief Specifies whether LVDS pull down resistor must be enabled/disabled as declared in Register MODULE_PORT.LPCRx.PWDPD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217      IfxPort_LvdsPullDown_disable = 0,  /**< \brief Disable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218      IfxPort_LvdsPullDown_enable  = 1   /**< \brief Enable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219  } IfxPort_LvdsPullDown;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221  /** \brief Specifies LVDS-Termination mode as declare in Register MODULE_PORT.LPCRx.TERM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225      IfxPort_LvdsTerminationMode_external = 0,  /**< \brief Termination Mode External */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226      IfxPort_LvdsTerminationMode_internal = 1   /**< \brief Termination Mode Internal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227  } IfxPort_LvdsTerminationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235  /** \brief To Configure LVDS mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239      IfxPort_LvdsMode     lvdsMode;                   /**< \brief specifies LVDS-M or LVDS-H mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240      IfxPort_ControlledBy enablePortControlled;       /**< \brief specifies whether LVDS is controlled by PORT or HSCT */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241      IfxPort_PadSupply    padSupply;                  /**< \brief specify supply voltage */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242  } IfxPort_LvdsConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286  /** \brief set analog/digital mode for pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param port Pointer to Port register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \param pinIndex specifies the pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   * \param mode set analog/digital mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395   * /code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief set lvds mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port pointer to Port Register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex specifies pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param pinMode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param lvds config LVDS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448  IFX_EXTERN void IfxPort_setPinModeLVDS(Ifx_P *port, uint8 pinIndex, IfxPort_Mode pinMode, IfxPort_LvdsConfig *lvds);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465  /** \brief Enable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470  IFX_EXTERN void IfxPort_setPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  /** \brief Disable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474   * \param pinIndex Specifies the pin for which the mode has to be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477  IFX_EXTERN void IfxPort_resetPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526  /** \brief Returns the module address of the selected Port module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527   * \param port Pointer to PORT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528   * \return PORT module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   563   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   564   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   565   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   566   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   568   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   569  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   571  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   572   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   573   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   574   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   575   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   578   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   579   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   580   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   581   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   585  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   589  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   590  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   593  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   594   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   595   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   596   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   599   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   601   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   602  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   604  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   605   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   606   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   607   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   608   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   609   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   610   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   611   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   612   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   613  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   615  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   616   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   617   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   618   * \param mode Selects the controller for the port pin(Tricore,EVADC,GETH,SCR etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   619   * 0-> normal function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   620   * 1-> Alternate functionality(SCR pin,EVADC PDD,GETH RGMII/MII etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   621   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   622   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   623  IFX_EXTERN void IfxPort_modifyPinControllerSelection(Ifx_P *port, uint8 pinIndex, boolean mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   624  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   625  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   626  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   629  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   630  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   631      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   635  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   637      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   641  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   643      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   647  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   649      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   651      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   652      port->PDISC.U |= (mode << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   653      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   654  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   657  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   658  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   659      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   663  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   665      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   666  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   669  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   670  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   671      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   672  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   674  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   675  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   676  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   677      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
	or	d5,d15,#192
	ld.bu	d4,[a12]8
.L516:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89  /** \brief specifies LVDS-M or LVDS-H mode as declare in Register MODULE_PORT.LPCRx.LVDSM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_LvdsMode_high   = 0, /**< \brief LVDS-H Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_LvdsMode_medium = 1  /**< \brief LVDS-M Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95  } IfxPort_LvdsMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143          IfxPort_OutputMode_openDrain = 0x18U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144          IfxPort_OutputMode_none      = 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160      IfxPort_PadDriver_ttlSpeed4            = 11, /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161      IfxPort_PadDriver_ttl3v3Speed1         = 12, /**< \brief 3.3v Pad supply speed1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162      IfxPort_PadDriver_ttl3v3Speed2         = 13, /**< \brief 3.3v Pad supply speed2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163      IfxPort_PadDriver_ttl3v3Speed3         = 14, /**< \brief 3.3v Pad supply speed3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadDriver_ttl3v3Speed4         = 15  /**< \brief 3.3v Pad supply speed4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171      IfxPort_PadSupply_3v = 0,  /**< \brief select,3.3v */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      IfxPort_PadSupply_5v = 1   /**< \brief select,5V */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  /** \brief enable analog/digital mode for port pin, as Defined in MODULE_PORTx.PDISC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179      IfxPort_PinFunctionMode_digital = 0,  /**< \brief Pad Pn.x is enabled and can be selected for digital function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      IfxPort_PinFunctionMode_analog  = 1   /**< \brief Pad Pn.x is enabled and can be selected for analog function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181  } IfxPort_PinFunctionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197  /** \brief Enable/DIsable LVDS direction TX or RX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201      IfxPort_LvdsDirection_rx = 0,  /**< \brief LVDS direction RX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202      IfxPort_LvdsDirection_tx = 1   /**< \brief LVDS direction TX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203  } IfxPort_LvdsDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205  /** \brief Enable/DIsable LVDS Path.declared in MODULE_PORTx.LPCRx.TX_EN and MODULE_PORTx.LPCRx.RX_EN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209      IfxPort_LvdsPath_enable  = 0, /**< \brief LVDS enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210      IfxPort_LvdsPath_disable = 1  /**< \brief LVDS disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211  } IfxPort_LvdsPath;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213  /** \brief Specifies whether LVDS pull down resistor must be enabled/disabled as declared in Register MODULE_PORT.LPCRx.PWDPD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217      IfxPort_LvdsPullDown_disable = 0,  /**< \brief Disable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218      IfxPort_LvdsPullDown_enable  = 1   /**< \brief Enable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219  } IfxPort_LvdsPullDown;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221  /** \brief Specifies LVDS-Termination mode as declare in Register MODULE_PORT.LPCRx.TERM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225      IfxPort_LvdsTerminationMode_external = 0,  /**< \brief Termination Mode External */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226      IfxPort_LvdsTerminationMode_internal = 1   /**< \brief Termination Mode Internal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227  } IfxPort_LvdsTerminationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235  /** \brief To Configure LVDS mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239      IfxPort_LvdsMode     lvdsMode;                   /**< \brief specifies LVDS-M or LVDS-H mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240      IfxPort_ControlledBy enablePortControlled;       /**< \brief specifies whether LVDS is controlled by PORT or HSCT */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241      IfxPort_PadSupply    padSupply;                  /**< \brief specify supply voltage */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242  } IfxPort_LvdsConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286  /** \brief set analog/digital mode for pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param port Pointer to Port register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \param pinIndex specifies the pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   * \param mode set analog/digital mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395   * /code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief set lvds mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port pointer to Port Register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex specifies pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param pinMode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param lvds config LVDS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448  IFX_EXTERN void IfxPort_setPinModeLVDS(Ifx_P *port, uint8 pinIndex, IfxPort_Mode pinMode, IfxPort_LvdsConfig *lvds);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465  /** \brief Enable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470  IFX_EXTERN void IfxPort_setPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  /** \brief Disable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474   * \param pinIndex Specifies the pin for which the mode has to be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477  IFX_EXTERN void IfxPort_resetPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526  /** \brief Returns the module address of the selected Port module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527   * \param port Pointer to PORT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528   * \return PORT module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   563   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   564   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   565   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   566   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   568   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   569  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   571  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   572   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   573   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   574   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   575   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   578   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   579   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   580   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   581   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   585  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   589  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   590  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   593  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   594   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   595   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   596   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   599   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   601   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   602  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   604  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   605   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   606   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   607   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   608   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   609   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   610   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   611   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   612   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   613  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   615  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   616   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   617   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   618   * \param mode Selects the controller for the port pin(Tricore,EVADC,GETH,SCR etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   619   * 0-> normal function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   620   * 1-> Alternate functionality(SCR pin,EVADC PDD,GETH RGMII/MII etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   621   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   622   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   623  IFX_EXTERN void IfxPort_modifyPinControllerSelection(Ifx_P *port, uint8 pinIndex, boolean mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   624  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   625  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   626  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   629  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   630  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   631      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   635  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   637      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   641  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   643      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   647  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   649      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   651      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   652      port->PDISC.U |= (mode << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   653      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   654  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   657  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   658  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   659      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   663  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   665      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   666  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   669  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   670  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   671      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   672  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   674  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   675  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   676  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   677      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
	call	IfxPort_setPinMode
.L278:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   209      IfxPort_setPinPadDriver(scl->pin.port, scl->pin.pinIndex, padDriver);
	ld.a	a4,[a15]4
.L517:
	ld.bu	d4,[a15]8
.L518:
	mov	d5,d8
	call	IfxPort_setPinPadDriver
.L519:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   210      IfxPort_setPinPadDriver(sda->pin.port, sda->pin.pinIndex, padDriver);
	ld.a	a4,[a12]4
.L520:
	ld.bu	d4,[a12]8
.L521:
	mov	d5,d8
	call	IfxPort_setPinPadDriver
.L522:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   211      IfxI2c_setPinSelection(scl->module, (IfxI2c_PinSelect)scl->inSelect); // note: uses the same PISEL register like SDA
	ld.a	a2,[a15]
.L280:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    16   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    18   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    25   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    32   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    40   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    41   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    42   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    43   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    44   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    45   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    46   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    47   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    48  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    49  #ifndef IFXI2C_H
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    50  #define IFXI2C_H 1
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    51  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    52  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    53  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    54  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    55  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    56  #include "_Impl/IfxI2c_cfg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    57  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    58  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    59  #include "IfxI2c_bf.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    60  #include "_PinMap/IfxI2c_PinMap.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    61  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    62  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    63  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    64  /*-----------------------------------Macros-----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    65  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    66  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    67  /** \brief Master code for high speed mode
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    68   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    69  #define IFXI2C_HIGHSPEED_MASTER_CODE (0xEU)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    70  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    72  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    73  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    74  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    75  /** \addtogroup IfxLld_I2c_Std_enums
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    76   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    77  /** \brief Selects width of address bits (7 or 10 bits)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    78   * Definition in Ifx_I2C.ADDRCFG.B.TBAM
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    79   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    80  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    81  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    82      IfxI2c_AddressMode_7Bit  = 0, /**< \brief sets 7 bit address */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    83      IfxI2c_AddressMode_10Bit = 1  /**< \brief sets 10 bit address */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    84  } IfxI2c_AddressMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    85  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    86  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    87  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    88      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    89      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    90      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    91      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    92  } IfxI2c_BusStatus;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    93  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    94  /** \brief enables DTR interrupt flags
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    95   * Definition in Ifx.I2C.IMSC.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    96   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    97  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    98  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    99      IfxI2c_DtrInterruptSource_lastSingleRequest = IFX_I2C_IMSC_LSREQ_INT_OFF,  /**< \brief last single service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   100      IfxI2c_DtrInterruptSource_singleRequest     = IFX_I2C_IMSC_SREQ_INT_OFF,   /**< \brief single service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   101      IfxI2c_DtrInterruptSource_lastBurstRequest  = IFX_I2C_IMSC_LBREQ_INT_OFF,  /**< \brief last burst service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   102      IfxI2c_DtrInterruptSource_burstRequest      = IFX_I2C_IMSC_BREQ_INT_OFF    /**< \brief burst service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   103  } IfxI2c_DtrInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   104  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   105  /** \brief enable error interrupt request source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   106   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   107   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   108  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   109  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   110      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   111      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   112      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   113      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   114  } IfxI2c_ErrorInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   115  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   116  /** \brief Select speed mode. Standard and Fast or High Speed mode.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   117   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   118  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   119  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   120      IfxI2c_Mode_StandardAndFast = 0,  /**< \brief Sets Standard and Fast speed mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   121      IfxI2c_Mode_HighSpeed       = 1   /**< \brief Sets HighSpeed Mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   122  } IfxI2c_Mode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   123  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   124  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   125  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   126      IfxI2c_PinSelect_a = 0,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   127      IfxI2c_PinSelect_b = 1,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   128      IfxI2c_PinSelect_c = 2,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   129      IfxI2c_PinSelect_d = 3,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   130      IfxI2c_PinSelect_e = 4,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   131      IfxI2c_PinSelect_f = 5,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   132      IfxI2c_PinSelect_g = 6,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   133      IfxI2c_PinSelect_h = 7
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   134  } IfxI2c_PinSelect;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   135  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   136  /** \brief enable protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   137   * Definition in Ifx.I2C.PIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   138   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   139  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   140  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   141      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   142      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   143      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   144      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   145      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   146      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   147      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   148  } IfxI2c_ProtocolInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   149  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   150  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   151   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   152   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   154  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   155      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   156      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   157  } IfxI2c_SleepMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   158  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   159  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   160  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   161  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   162  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   163  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   164  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   165  /** \addtogroup IfxLld_I2c_Std_structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   166   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   167  /** \brief Pin Structure
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   168   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   169  typedef struct
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   170  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   171      IfxI2c_Scl_InOut *scl;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   172      IfxI2c_Sda_InOut *sda;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   173      IfxPort_PadDriver padDriver;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   174  } IfxI2c_Pins;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   175  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   176  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   177  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   178  /** \addtogroup IfxLld_I2c_Std_functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   179   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   180  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   181  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   182  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   183  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   184  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   185  /** \brief Returns if the bus is free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   186   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   187  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   188  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   189  /** \brief clears all DTR interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   190   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   191   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   192   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   193  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   194  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   195  /** \brief clears all Error Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   196   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   197   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   198   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   199  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   200  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   201  /** \brief Clears all Protocol Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   202   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   203   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   204   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   205  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   206  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   207  /** \brief clears the specified source of DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   208   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   209   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   210   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   211   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   212  IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   213  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   214  /** \brief clears the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   215   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   216   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   217   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   218   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   219  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   220  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   221  /** \brief clears the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   222   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   223   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   224   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   225   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   226  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   227  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   228  /** \brief Data request is cleared automatically
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   229   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   230   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   231   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   232  IFX_INLINE void IfxI2c_clearRequestBuffer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   233  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   234  /** \brief disables the specified source of DTR interupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   235   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   236   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   237   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   238   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   239  IFX_INLINE void IfxI2c_disableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   240  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   241  /** \brief disables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   242   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   243   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   244   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   245  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   246  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   247  /** \brief disables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   248   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   249   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   250   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   251   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   252  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   253  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   254  /** \brief disables the Protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   255   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   256   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   257   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   258  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   259  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   260  /** \brief disables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   261   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   262   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   263   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   264   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   265  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   266  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   267  /** \brief enables the specified source of DTR interupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   268   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   269   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   276   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   277   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   278  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   279  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   280  /** \brief enables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   281   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   282   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief enables the protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   289   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief enables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   295   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   296   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   297   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   298  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   299  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   300  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   301   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   302   * \return BusStatus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   303   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   304  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   305  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   306  /** \brief Returns the SRC pointer for I2C DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   307   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   308   * \return SRC pointer for I2C DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   309   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   310  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getDtrSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   311  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   312  /** \brief returns the status of specified DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   313   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   314   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   315   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   316   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   317  IFX_INLINE boolean IfxI2c_getDtrinterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   318  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   319  /** \brief returns the current status of error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   320   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   321   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   322   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   323  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   324  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   325  /** \brief returns the status of the error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   326   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   327   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   328   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   329   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   330  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   331  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   332  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   333   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   334   * \return SRC pointer for I2C Error Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   335   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   336  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   337  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   338  /** \brief returns the current raw status of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   339   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   340   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   341   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   342  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   343  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   344  /** \brief returns the status of  specified protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   345   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   346   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   347   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   348   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   349  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   350  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   351  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   352   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   353   * \return SRC pointer for I2C Protocol Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   354   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   355  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   356  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   357  /** \brief Returns if the Fifo is requesting new data
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   361  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   363   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief Sets width of I2C address to 7 or 10 bits
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   369   * \param mode selects 7 or 10 bits address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   370   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   371   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   372  IFX_INLINE void IfxI2c_setBitAddressMode(Ifx_I2C *i2c, IfxI2c_AddressMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   373  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   374  /** \brief selects the pin
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   375   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   376   * \param pisel pin to be select
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   377   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   378   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   379  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   380  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   381  /** \brief Sets the number of bytes to be received
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   382   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   383   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   384   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   385   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   386  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   387  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   388  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   389   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   390   * \param address device address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   391   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   392   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   393  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   394  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   395  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   396   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   397   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   398   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   399   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   400  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   401  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   402  /** \brief Sets the number of bytes to be tansmitted
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   403   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   404   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   405   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   406   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   407  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   408  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   409  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   410   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   411   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   412   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   413  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   414  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   415  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   416   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   417   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   418   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   419  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   420  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   421  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   422   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   423   * \param packet specifies the byte to be transfer
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   424   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   425   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   426  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   427  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   428  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   429  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   430  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   431  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   432  /** \brief Configures the Module as Master
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   433   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   434   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   435   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   436  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   437  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   438  /** \brief Disables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   439   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   440   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   441   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   442  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   443  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   444  /** \brief enables the DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   445   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   446   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   447   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   448   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   449   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   450  IFX_EXTERN void IfxI2c_enableDtrInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   451  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   452  /** \brief Enables the Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   453   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   454   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   455   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   456   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   457   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   458  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   459  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   460  /** \brief Enables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   461   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   462   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   463   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   464  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   465  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   466  /** \brief Enables the protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   467   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   468   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   469   * \param priority Priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   471   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   472  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   473  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   474  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   475   * \param i2c Resource index of the I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   476   * \return I2C module register address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   477   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   478  IFX_EXTERN Ifx_I2C *IfxI2c_getAddress(IfxI2c_Index i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   479  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   480  /** \brief Returns the real Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   481   * \return Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   482   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   483  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   484  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   485  /** \brief API to get the resource index of the I2C specified.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   486   * \param i2c Pointer to the I2C HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   487   * \return Resource index of the I2C
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   488   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   489  IFX_EXTERN IfxI2c_Index IfxI2c_getIndex(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   490  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   491  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   492   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   493   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   494  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   495  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   496  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   497   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   498   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   499  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   500  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   501  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   502   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   503   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   504  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   505  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   506  /** \brief resets the I2c kernel
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   507   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   508   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   509   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   510  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   511  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   512  /** \brief Calculates the desired baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   513   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   514   * \param baudrate specifies the baud rate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   515   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   516   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   517  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   518  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   519  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   520  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   521  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   522  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   523  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   524  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   525  /** \brief Configure the i2c master to high speed mode baudrate > 400kbits/s
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   526   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   527   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   528   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   529  IFX_EXTERN void IfxI2c_configureHighSpeedMode(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   530  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   531  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   532  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   533  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   534  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   535  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   536  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   537      boolean free = FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   538  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   539      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   540      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   541          free = TRUE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   542      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   543  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   544      return free;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   545  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   546  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   547  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   548  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   549  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   550      i2c->ICR.U = (1 << IFX_I2C_ICR_LSREQ_INT_OFF) | (1 << IFX_I2C_ICR_SREQ_INT_OFF) | (1 << IFX_I2C_ICR_LBREQ_INT_OFF) | (1 << IFX_I2C_ICR_BREQ_INT_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   551  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   552  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   553  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   554  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   555  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   556      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   557  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   558  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   559  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   560  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   561  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   562      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   563  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   565  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   566  IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   567  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   568      i2c->ICR.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   569  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   570  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   571  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   572  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   573  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   574      i2c->ERRIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   575  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   576  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   577  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   578  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   579  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   580      i2c->PIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   581  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   583  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   584  IFX_INLINE void IfxI2c_clearRequestBuffer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   585  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   586      i2c->FIFOCFG.B.CRBC = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   587  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   589  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   590  IFX_INLINE void IfxI2c_disableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   591  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   592      i2c->IMSC.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   593  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   594  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   595  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   596  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   597  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   598      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   599  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   601  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   602  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   603  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   604      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   605  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   607  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   608  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   609  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   610      i2c->IMSC.B.I2C_P_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   611  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   613  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   614  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   615  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   616      i2c->PIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   617  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   619  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   620  IFX_INLINE void IfxI2c_enableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   621  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   622      i2c->IMSC.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   623  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   625  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   626  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   627  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   628      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   629  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   631  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   632  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   633  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   634      i2c->ERRIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   635  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   637  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   638  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   639  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   640      i2c->IMSC.B.I2C_P_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   641  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   643  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   644  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   645  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   646      i2c->PIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   647  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   649  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   650  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   651  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   652      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   653  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   655  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   656  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getDtrSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   657  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   658      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   659      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   660          return &MODULE_SRC.I2C.I2C[0].DTR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   661      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   662      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   663      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   664          return &MODULE_SRC.I2C.I2C[1].DTR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   665      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   666  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   667  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   668  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   669  IFX_INLINE boolean IfxI2c_getDtrinterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   670  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   671      return (i2c->RIS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   672  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   673  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   674  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   675  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   676  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   677      return i2c->RIS.B.I2C_ERR_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   678  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   679  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   680  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   681  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   682  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   683      return (i2c->ERRIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   684  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   685  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   686  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   687  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   688  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   689      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   690      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   691          return &MODULE_SRC.I2C.I2C[0].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   692      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   693      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   694      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   695          return &MODULE_SRC.I2C.I2C[1].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   696      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   697  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   698  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   699  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   700  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   701  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   702      return i2c->RIS.B.I2C_P_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   703  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   704  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   705  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   706  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   707  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   708      return (i2c->PIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   709  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   710  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   711  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   712  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   713  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   714      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   715      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   716          return &MODULE_SRC.I2C.I2C[0].P;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   717      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   718      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   719      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   720          return &MODULE_SRC.I2C.I2C[1].P;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   721      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   722  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   723  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   724  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   725  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   726  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   727      return i2c->RIS.U & 0x0F ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   728  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   729  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   730  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   731  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   732  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   733      i2c->RUNCTRL.U = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   734  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   735  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   736  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   737  IFX_INLINE void IfxI2c_setBitAddressMode(Ifx_I2C *i2c, IfxI2c_AddressMode mode)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   738  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   739      i2c->ADDRCFG.B.TBAM = mode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   740  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   741  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   742  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   743  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   744  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   745      i2c->GPCTL.B.PISEL = pisel;
	movh.a	a3,#1
.L281:
	ld.bu	d15,[a15]12
.L288:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    16   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    18   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    25   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    32   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    40   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    41   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    42   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    43   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    44   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    45   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    46   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    47   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    48  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    49  #ifndef IFXI2C_H
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    50  #define IFXI2C_H 1
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    51  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    52  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    53  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    54  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    55  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    56  #include "_Impl/IfxI2c_cfg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    57  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    58  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    59  #include "IfxI2c_bf.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    60  #include "_PinMap/IfxI2c_PinMap.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    61  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    62  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    63  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    64  /*-----------------------------------Macros-----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    65  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    66  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    67  /** \brief Master code for high speed mode
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    68   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    69  #define IFXI2C_HIGHSPEED_MASTER_CODE (0xEU)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    70  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    72  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    73  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    74  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    75  /** \addtogroup IfxLld_I2c_Std_enums
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    76   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    77  /** \brief Selects width of address bits (7 or 10 bits)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    78   * Definition in Ifx_I2C.ADDRCFG.B.TBAM
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    79   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    80  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    81  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    82      IfxI2c_AddressMode_7Bit  = 0, /**< \brief sets 7 bit address */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    83      IfxI2c_AddressMode_10Bit = 1  /**< \brief sets 10 bit address */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    84  } IfxI2c_AddressMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    85  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    86  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    87  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    88      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    89      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    90      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    91      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    92  } IfxI2c_BusStatus;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    93  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    94  /** \brief enables DTR interrupt flags
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    95   * Definition in Ifx.I2C.IMSC.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    96   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    97  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    98  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    99      IfxI2c_DtrInterruptSource_lastSingleRequest = IFX_I2C_IMSC_LSREQ_INT_OFF,  /**< \brief last single service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   100      IfxI2c_DtrInterruptSource_singleRequest     = IFX_I2C_IMSC_SREQ_INT_OFF,   /**< \brief single service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   101      IfxI2c_DtrInterruptSource_lastBurstRequest  = IFX_I2C_IMSC_LBREQ_INT_OFF,  /**< \brief last burst service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   102      IfxI2c_DtrInterruptSource_burstRequest      = IFX_I2C_IMSC_BREQ_INT_OFF    /**< \brief burst service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   103  } IfxI2c_DtrInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   104  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   105  /** \brief enable error interrupt request source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   106   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   107   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   108  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   109  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   110      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   111      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   112      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   113      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   114  } IfxI2c_ErrorInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   115  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   116  /** \brief Select speed mode. Standard and Fast or High Speed mode.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   117   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   118  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   119  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   120      IfxI2c_Mode_StandardAndFast = 0,  /**< \brief Sets Standard and Fast speed mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   121      IfxI2c_Mode_HighSpeed       = 1   /**< \brief Sets HighSpeed Mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   122  } IfxI2c_Mode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   123  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   124  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   125  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   126      IfxI2c_PinSelect_a = 0,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   127      IfxI2c_PinSelect_b = 1,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   128      IfxI2c_PinSelect_c = 2,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   129      IfxI2c_PinSelect_d = 3,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   130      IfxI2c_PinSelect_e = 4,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   131      IfxI2c_PinSelect_f = 5,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   132      IfxI2c_PinSelect_g = 6,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   133      IfxI2c_PinSelect_h = 7
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   134  } IfxI2c_PinSelect;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   135  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   136  /** \brief enable protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   137   * Definition in Ifx.I2C.PIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   138   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   139  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   140  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   141      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   142      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   143      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   144      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   145      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   146      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   147      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   148  } IfxI2c_ProtocolInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   149  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   150  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   151   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   152   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   154  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   155      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   156      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   157  } IfxI2c_SleepMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   158  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   159  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   160  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   161  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   162  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   163  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   164  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   165  /** \addtogroup IfxLld_I2c_Std_structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   166   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   167  /** \brief Pin Structure
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   168   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   169  typedef struct
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   170  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   171      IfxI2c_Scl_InOut *scl;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   172      IfxI2c_Sda_InOut *sda;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   173      IfxPort_PadDriver padDriver;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   174  } IfxI2c_Pins;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   175  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   176  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   177  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   178  /** \addtogroup IfxLld_I2c_Std_functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   179   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   180  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   181  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   182  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   183  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   184  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   185  /** \brief Returns if the bus is free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   186   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   187  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   188  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   189  /** \brief clears all DTR interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   190   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   191   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   192   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   193  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   194  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   195  /** \brief clears all Error Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   196   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   197   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   198   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   199  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   200  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   201  /** \brief Clears all Protocol Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   202   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   203   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   204   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   205  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   206  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   207  /** \brief clears the specified source of DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   208   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   209   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   210   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   211   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   212  IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   213  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   214  /** \brief clears the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   215   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   216   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   217   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   218   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   219  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   220  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   221  /** \brief clears the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   222   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   223   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   224   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   225   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   226  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   227  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   228  /** \brief Data request is cleared automatically
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   229   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   230   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   231   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   232  IFX_INLINE void IfxI2c_clearRequestBuffer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   233  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   234  /** \brief disables the specified source of DTR interupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   235   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   236   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   237   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   238   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   239  IFX_INLINE void IfxI2c_disableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   240  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   241  /** \brief disables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   242   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   243   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   244   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   245  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   246  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   247  /** \brief disables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   248   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   249   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   250   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   251   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   252  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   253  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   254  /** \brief disables the Protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   255   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   256   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   257   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   258  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   259  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   260  /** \brief disables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   261   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   262   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   263   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   264   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   265  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   266  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   267  /** \brief enables the specified source of DTR interupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   268   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   269   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   276   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   277   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   278  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   279  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   280  /** \brief enables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   281   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   282   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief enables the protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   289   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief enables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   295   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   296   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   297   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   298  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   299  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   300  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   301   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   302   * \return BusStatus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   303   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   304  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   305  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   306  /** \brief Returns the SRC pointer for I2C DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   307   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   308   * \return SRC pointer for I2C DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   309   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   310  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getDtrSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   311  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   312  /** \brief returns the status of specified DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   313   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   314   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   315   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   316   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   317  IFX_INLINE boolean IfxI2c_getDtrinterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   318  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   319  /** \brief returns the current status of error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   320   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   321   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   322   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   323  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   324  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   325  /** \brief returns the status of the error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   326   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   327   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   328   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   329   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   330  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   331  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   332  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   333   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   334   * \return SRC pointer for I2C Error Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   335   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   336  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   337  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   338  /** \brief returns the current raw status of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   339   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   340   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   341   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   342  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   343  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   344  /** \brief returns the status of  specified protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   345   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   346   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   347   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   348   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   349  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   350  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   351  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   352   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   353   * \return SRC pointer for I2C Protocol Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   354   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   355  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   356  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   357  /** \brief Returns if the Fifo is requesting new data
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   361  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   363   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief Sets width of I2C address to 7 or 10 bits
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   369   * \param mode selects 7 or 10 bits address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   370   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   371   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   372  IFX_INLINE void IfxI2c_setBitAddressMode(Ifx_I2C *i2c, IfxI2c_AddressMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   373  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   374  /** \brief selects the pin
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   375   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   376   * \param pisel pin to be select
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   377   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   378   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   379  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   380  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   381  /** \brief Sets the number of bytes to be received
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   382   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   383   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   384   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   385   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   386  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   387  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   388  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   389   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   390   * \param address device address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   391   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   392   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   393  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   394  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   395  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   396   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   397   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   398   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   399   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   400  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   401  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   402  /** \brief Sets the number of bytes to be tansmitted
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   403   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   404   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   405   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   406   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   407  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   408  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   409  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   410   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   411   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   412   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   413  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   414  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   415  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   416   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   417   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   418   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   419  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   420  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   421  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   422   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   423   * \param packet specifies the byte to be transfer
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   424   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   425   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   426  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   427  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   428  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   429  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   430  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   431  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   432  /** \brief Configures the Module as Master
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   433   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   434   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   435   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   436  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   437  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   438  /** \brief Disables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   439   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   440   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   441   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   442  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   443  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   444  /** \brief enables the DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   445   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   446   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   447   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   448   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   449   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   450  IFX_EXTERN void IfxI2c_enableDtrInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   451  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   452  /** \brief Enables the Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   453   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   454   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   455   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   456   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   457   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   458  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   459  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   460  /** \brief Enables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   461   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   462   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   463   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   464  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   465  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   466  /** \brief Enables the protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   467   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   468   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   469   * \param priority Priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   471   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   472  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   473  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   474  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   475   * \param i2c Resource index of the I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   476   * \return I2C module register address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   477   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   478  IFX_EXTERN Ifx_I2C *IfxI2c_getAddress(IfxI2c_Index i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   479  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   480  /** \brief Returns the real Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   481   * \return Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   482   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   483  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   484  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   485  /** \brief API to get the resource index of the I2C specified.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   486   * \param i2c Pointer to the I2C HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   487   * \return Resource index of the I2C
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   488   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   489  IFX_EXTERN IfxI2c_Index IfxI2c_getIndex(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   490  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   491  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   492   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   493   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   494  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   495  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   496  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   497   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   498   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   499  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   500  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   501  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   502   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   503   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   504  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   505  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   506  /** \brief resets the I2c kernel
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   507   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   508   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   509   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   510  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   511  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   512  /** \brief Calculates the desired baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   513   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   514   * \param baudrate specifies the baud rate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   515   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   516   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   517  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   518  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   519  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   520  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   521  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   522  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   523  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   524  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   525  /** \brief Configure the i2c master to high speed mode baudrate > 400kbits/s
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   526   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   527   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   528   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   529  IFX_EXTERN void IfxI2c_configureHighSpeedMode(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   530  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   531  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   532  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   533  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   534  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   535  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   536  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   537      boolean free = FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   538  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   539      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   540      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   541          free = TRUE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   542      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   543  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   544      return free;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   545  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   546  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   547  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   548  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   549  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   550      i2c->ICR.U = (1 << IFX_I2C_ICR_LSREQ_INT_OFF) | (1 << IFX_I2C_ICR_SREQ_INT_OFF) | (1 << IFX_I2C_ICR_LBREQ_INT_OFF) | (1 << IFX_I2C_ICR_BREQ_INT_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   551  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   552  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   553  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   554  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   555  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   556      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   557  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   558  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   559  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   560  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   561  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   562      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   563  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   565  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   566  IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   567  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   568      i2c->ICR.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   569  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   570  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   571  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   572  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   573  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   574      i2c->ERRIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   575  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   576  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   577  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   578  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   579  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   580      i2c->PIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   581  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   583  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   584  IFX_INLINE void IfxI2c_clearRequestBuffer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   585  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   586      i2c->FIFOCFG.B.CRBC = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   587  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   589  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   590  IFX_INLINE void IfxI2c_disableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   591  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   592      i2c->IMSC.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   593  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   594  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   595  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   596  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   597  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   598      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   599  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   601  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   602  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   603  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   604      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   605  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   607  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   608  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   609  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   610      i2c->IMSC.B.I2C_P_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   611  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   613  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   614  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   615  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   616      i2c->PIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   617  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   619  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   620  IFX_INLINE void IfxI2c_enableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   621  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   622      i2c->IMSC.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   623  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   625  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   626  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   627  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   628      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   629  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   631  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   632  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   633  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   634      i2c->ERRIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   635  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   637  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   638  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   639  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   640      i2c->IMSC.B.I2C_P_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   641  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   643  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   644  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   645  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   646      i2c->PIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   647  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   649  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   650  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   651  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   652      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   653  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   655  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   656  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getDtrSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   657  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   658      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   659      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   660          return &MODULE_SRC.I2C.I2C[0].DTR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   661      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   662      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   663      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   664          return &MODULE_SRC.I2C.I2C[1].DTR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   665      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   666  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   667  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   668  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   669  IFX_INLINE boolean IfxI2c_getDtrinterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   670  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   671      return (i2c->RIS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   672  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   673  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   674  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   675  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   676  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   677      return i2c->RIS.B.I2C_ERR_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   678  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   679  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   680  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   681  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   682  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   683      return (i2c->ERRIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   684  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   685  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   686  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   687  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   688  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   689      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   690      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   691          return &MODULE_SRC.I2C.I2C[0].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   692      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   693      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   694      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   695          return &MODULE_SRC.I2C.I2C[1].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   696      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   697  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   698  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   699  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   700  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   701  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   702      return i2c->RIS.B.I2C_P_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   703  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   704  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   705  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   706  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   707  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   708      return (i2c->PIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   709  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   710  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   711  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   712  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   713  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   714      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   715      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   716          return &MODULE_SRC.I2C.I2C[0].P;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   717      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   718      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   719      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   720          return &MODULE_SRC.I2C.I2C[1].P;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   721      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   722  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   723  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   724  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   725  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   726  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   727      return i2c->RIS.U & 0x0F ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   728  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   729  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   730  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   731  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   732  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   733      i2c->RUNCTRL.U = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   734  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   735  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   736  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   737  IFX_INLINE void IfxI2c_setBitAddressMode(Ifx_I2C *i2c, IfxI2c_AddressMode mode)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   738  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   739      i2c->ADDRCFG.B.TBAM = mode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   740  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   741  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   742  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   743  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   744  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   745      i2c->GPCTL.B.PISEL = pisel;
	add.a	a3,a2
	ld.bu	d0,[+a3]8
.L523:
	movh.a	a3,#1
	insert	d15,d0,d15,#0,#3
	add.a	a3,a2
	st.b	[+a3]8,d15
.L289:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   212  }
	ret
.L259:
	
__IfxI2c_initSclSdaPin_function_end:
	.size	IfxI2c_initSclSdaPin,__IfxI2c_initSclSdaPin_function_end-IfxI2c_initSclSdaPin
.L130:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_releaseBus',code,cluster('IfxI2c_releaseBus')
	.sect	'.text.IfxI2c.IfxI2c_releaseBus'
	.align	2
	
	.global	IfxI2c_releaseBus

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   213  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   214  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   215  void IfxI2c_releaseBus(Ifx_I2C *i2c)
; Function IfxI2c_releaseBus
.L68:
IfxI2c_releaseBus:	.type	func

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   216  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   217      // only set the set end of transmisson bit if bus is not free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   218      if (i2c->BUSSTAT.B.BS != IfxI2c_BusStatus_idle)
	ld.bu	d15,[a4]36
	and	d15,#3
.L528:
	jeq	d15,#0,.L22
.L529:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   219      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   220          i2c->ENDDCTRL.B.SETEND = 1;
	ld.bu	d15,[a4]20
.L530:
	or	d15,#2
	st.b	[a4]20,d15

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   221  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   222          // wait until bus is free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   223          while (IfxI2c_getProtocolInterruptSourceStatus(i2c, IfxI2c_ProtocolInterruptSource_transmissionEnd) == FALSE)
.L23:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    16   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    18   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    25   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    32   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    40   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    41   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    42   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    43   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    44   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    45   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    46   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    47   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    48  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    49  #ifndef IFXI2C_H
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    50  #define IFXI2C_H 1
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    51  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    52  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    53  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    54  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    55  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    56  #include "_Impl/IfxI2c_cfg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    57  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    58  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    59  #include "IfxI2c_bf.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    60  #include "_PinMap/IfxI2c_PinMap.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    61  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    62  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    63  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    64  /*-----------------------------------Macros-----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    65  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    66  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    67  /** \brief Master code for high speed mode
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    68   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    69  #define IFXI2C_HIGHSPEED_MASTER_CODE (0xEU)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    70  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    72  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    73  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    74  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    75  /** \addtogroup IfxLld_I2c_Std_enums
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    76   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    77  /** \brief Selects width of address bits (7 or 10 bits)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    78   * Definition in Ifx_I2C.ADDRCFG.B.TBAM
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    79   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    80  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    81  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    82      IfxI2c_AddressMode_7Bit  = 0, /**< \brief sets 7 bit address */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    83      IfxI2c_AddressMode_10Bit = 1  /**< \brief sets 10 bit address */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    84  } IfxI2c_AddressMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    85  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    86  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    87  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    88      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    89      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    90      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    91      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    92  } IfxI2c_BusStatus;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    93  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    94  /** \brief enables DTR interrupt flags
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    95   * Definition in Ifx.I2C.IMSC.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    96   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    97  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    98  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    99      IfxI2c_DtrInterruptSource_lastSingleRequest = IFX_I2C_IMSC_LSREQ_INT_OFF,  /**< \brief last single service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   100      IfxI2c_DtrInterruptSource_singleRequest     = IFX_I2C_IMSC_SREQ_INT_OFF,   /**< \brief single service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   101      IfxI2c_DtrInterruptSource_lastBurstRequest  = IFX_I2C_IMSC_LBREQ_INT_OFF,  /**< \brief last burst service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   102      IfxI2c_DtrInterruptSource_burstRequest      = IFX_I2C_IMSC_BREQ_INT_OFF    /**< \brief burst service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   103  } IfxI2c_DtrInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   104  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   105  /** \brief enable error interrupt request source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   106   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   107   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   108  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   109  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   110      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   111      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   112      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   113      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   114  } IfxI2c_ErrorInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   115  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   116  /** \brief Select speed mode. Standard and Fast or High Speed mode.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   117   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   118  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   119  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   120      IfxI2c_Mode_StandardAndFast = 0,  /**< \brief Sets Standard and Fast speed mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   121      IfxI2c_Mode_HighSpeed       = 1   /**< \brief Sets HighSpeed Mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   122  } IfxI2c_Mode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   123  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   124  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   125  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   126      IfxI2c_PinSelect_a = 0,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   127      IfxI2c_PinSelect_b = 1,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   128      IfxI2c_PinSelect_c = 2,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   129      IfxI2c_PinSelect_d = 3,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   130      IfxI2c_PinSelect_e = 4,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   131      IfxI2c_PinSelect_f = 5,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   132      IfxI2c_PinSelect_g = 6,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   133      IfxI2c_PinSelect_h = 7
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   134  } IfxI2c_PinSelect;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   135  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   136  /** \brief enable protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   137   * Definition in Ifx.I2C.PIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   138   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   139  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   140  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   141      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   142      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   143      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   144      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   145      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   146      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   147      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   148  } IfxI2c_ProtocolInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   149  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   150  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   151   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   152   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   154  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   155      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   156      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   157  } IfxI2c_SleepMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   158  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   159  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   160  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   161  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   162  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   163  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   164  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   165  /** \addtogroup IfxLld_I2c_Std_structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   166   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   167  /** \brief Pin Structure
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   168   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   169  typedef struct
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   170  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   171      IfxI2c_Scl_InOut *scl;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   172      IfxI2c_Sda_InOut *sda;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   173      IfxPort_PadDriver padDriver;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   174  } IfxI2c_Pins;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   175  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   176  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   177  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   178  /** \addtogroup IfxLld_I2c_Std_functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   179   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   180  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   181  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   182  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   183  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   184  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   185  /** \brief Returns if the bus is free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   186   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   187  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   188  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   189  /** \brief clears all DTR interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   190   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   191   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   192   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   193  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   194  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   195  /** \brief clears all Error Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   196   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   197   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   198   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   199  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   200  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   201  /** \brief Clears all Protocol Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   202   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   203   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   204   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   205  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   206  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   207  /** \brief clears the specified source of DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   208   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   209   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   210   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   211   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   212  IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   213  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   214  /** \brief clears the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   215   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   216   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   217   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   218   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   219  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   220  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   221  /** \brief clears the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   222   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   223   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   224   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   225   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   226  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   227  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   228  /** \brief Data request is cleared automatically
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   229   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   230   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   231   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   232  IFX_INLINE void IfxI2c_clearRequestBuffer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   233  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   234  /** \brief disables the specified source of DTR interupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   235   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   236   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   237   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   238   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   239  IFX_INLINE void IfxI2c_disableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   240  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   241  /** \brief disables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   242   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   243   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   244   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   245  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   246  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   247  /** \brief disables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   248   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   249   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   250   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   251   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   252  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   253  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   254  /** \brief disables the Protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   255   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   256   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   257   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   258  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   259  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   260  /** \brief disables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   261   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   262   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   263   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   264   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   265  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   266  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   267  /** \brief enables the specified source of DTR interupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   268   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   269   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   276   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   277   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   278  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   279  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   280  /** \brief enables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   281   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   282   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief enables the protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   289   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief enables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   295   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   296   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   297   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   298  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   299  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   300  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   301   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   302   * \return BusStatus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   303   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   304  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   305  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   306  /** \brief Returns the SRC pointer for I2C DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   307   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   308   * \return SRC pointer for I2C DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   309   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   310  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getDtrSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   311  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   312  /** \brief returns the status of specified DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   313   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   314   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   315   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   316   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   317  IFX_INLINE boolean IfxI2c_getDtrinterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   318  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   319  /** \brief returns the current status of error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   320   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   321   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   322   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   323  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   324  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   325  /** \brief returns the status of the error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   326   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   327   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   328   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   329   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   330  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   331  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   332  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   333   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   334   * \return SRC pointer for I2C Error Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   335   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   336  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   337  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   338  /** \brief returns the current raw status of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   339   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   340   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   341   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   342  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   343  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   344  /** \brief returns the status of  specified protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   345   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   346   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   347   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   348   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   349  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   350  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   351  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   352   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   353   * \return SRC pointer for I2C Protocol Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   354   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   355  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   356  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   357  /** \brief Returns if the Fifo is requesting new data
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   361  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   363   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief Sets width of I2C address to 7 or 10 bits
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   369   * \param mode selects 7 or 10 bits address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   370   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   371   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   372  IFX_INLINE void IfxI2c_setBitAddressMode(Ifx_I2C *i2c, IfxI2c_AddressMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   373  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   374  /** \brief selects the pin
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   375   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   376   * \param pisel pin to be select
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   377   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   378   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   379  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   380  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   381  /** \brief Sets the number of bytes to be received
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   382   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   383   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   384   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   385   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   386  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   387  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   388  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   389   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   390   * \param address device address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   391   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   392   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   393  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   394  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   395  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   396   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   397   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   398   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   399   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   400  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   401  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   402  /** \brief Sets the number of bytes to be tansmitted
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   403   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   404   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   405   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   406   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   407  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   408  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   409  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   410   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   411   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   412   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   413  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   414  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   415  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   416   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   417   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   418   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   419  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   420  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   421  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   422   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   423   * \param packet specifies the byte to be transfer
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   424   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   425   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   426  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   427  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   428  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   429  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   430  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   431  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   432  /** \brief Configures the Module as Master
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   433   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   434   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   435   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   436  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   437  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   438  /** \brief Disables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   439   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   440   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   441   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   442  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   443  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   444  /** \brief enables the DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   445   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   446   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   447   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   448   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   449   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   450  IFX_EXTERN void IfxI2c_enableDtrInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   451  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   452  /** \brief Enables the Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   453   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   454   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   455   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   456   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   457   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   458  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   459  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   460  /** \brief Enables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   461   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   462   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   463   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   464  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   465  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   466  /** \brief Enables the protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   467   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   468   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   469   * \param priority Priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   471   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   472  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   473  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   474  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   475   * \param i2c Resource index of the I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   476   * \return I2C module register address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   477   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   478  IFX_EXTERN Ifx_I2C *IfxI2c_getAddress(IfxI2c_Index i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   479  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   480  /** \brief Returns the real Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   481   * \return Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   482   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   483  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   484  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   485  /** \brief API to get the resource index of the I2C specified.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   486   * \param i2c Pointer to the I2C HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   487   * \return Resource index of the I2C
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   488   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   489  IFX_EXTERN IfxI2c_Index IfxI2c_getIndex(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   490  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   491  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   492   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   493   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   494  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   495  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   496  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   497   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   498   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   499  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   500  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   501  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   502   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   503   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   504  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   505  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   506  /** \brief resets the I2c kernel
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   507   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   508   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   509   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   510  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   511  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   512  /** \brief Calculates the desired baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   513   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   514   * \param baudrate specifies the baud rate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   515   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   516   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   517  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   518  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   519  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   520  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   521  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   522  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   523  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   524  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   525  /** \brief Configure the i2c master to high speed mode baudrate > 400kbits/s
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   526   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   527   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   528   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   529  IFX_EXTERN void IfxI2c_configureHighSpeedMode(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   530  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   531  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   532  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   533  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   534  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   535  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   536  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   537      boolean free = FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   538  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   539      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   540      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   541          free = TRUE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   542      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   543  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   544      return free;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   545  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   546  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   547  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   548  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   549  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   550      i2c->ICR.U = (1 << IFX_I2C_ICR_LSREQ_INT_OFF) | (1 << IFX_I2C_ICR_SREQ_INT_OFF) | (1 << IFX_I2C_ICR_LBREQ_INT_OFF) | (1 << IFX_I2C_ICR_BREQ_INT_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   551  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   552  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   553  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   554  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   555  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   556      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   557  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   558  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   559  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   560  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   561  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   562      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   563  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   565  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   566  IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   567  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   568      i2c->ICR.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   569  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   570  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   571  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   572  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   573  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   574      i2c->ERRIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   575  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   576  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   577  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   578  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   579  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   580      i2c->PIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   581  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   583  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   584  IFX_INLINE void IfxI2c_clearRequestBuffer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   585  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   586      i2c->FIFOCFG.B.CRBC = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   587  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   589  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   590  IFX_INLINE void IfxI2c_disableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   591  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   592      i2c->IMSC.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   593  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   594  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   595  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   596  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   597  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   598      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   599  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   601  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   602  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   603  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   604      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   605  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   607  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   608  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   609  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   610      i2c->IMSC.B.I2C_P_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   611  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   613  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   614  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   615  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   616      i2c->PIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   617  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   619  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   620  IFX_INLINE void IfxI2c_enableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   621  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   622      i2c->IMSC.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   623  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   625  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   626  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   627  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   628      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   629  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   631  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   632  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   633  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   634      i2c->ERRIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   635  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   637  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   638  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   639  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   640      i2c->IMSC.B.I2C_P_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   641  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   643  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   644  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   645  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   646      i2c->PIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   647  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   649  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   650  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   651  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   652      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   653  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   655  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   656  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getDtrSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   657  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   658      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   659      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   660          return &MODULE_SRC.I2C.I2C[0].DTR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   661      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   662      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   663      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   664          return &MODULE_SRC.I2C.I2C[1].DTR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   665      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   666  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   667  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   668  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   669  IFX_INLINE boolean IfxI2c_getDtrinterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   670  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   671      return (i2c->RIS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   672  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   673  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   674  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   675  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   676  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   677      return i2c->RIS.B.I2C_ERR_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   678  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   679  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   680  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   681  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   682  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   683      return (i2c->ERRIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   684  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   685  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   686  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   687  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   688  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   689      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   690      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   691          return &MODULE_SRC.I2C.I2C[0].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   692      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   693      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   694      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   695          return &MODULE_SRC.I2C.I2C[1].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   696      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   697  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   698  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   699  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   700  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   701  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   702      return i2c->RIS.B.I2C_P_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   703  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   704  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   705  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   706  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   707  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   708      return (i2c->PIRQSS.U & (1 << source)) ? TRUE : FALSE;
	ld.w	d15,[a4]116
.L293:
	jz.t	d15:5,.L23
.L300:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    16   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    18   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    25   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    32   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    40   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    41   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    42   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    43   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    44   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    45   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    46   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    47   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    48  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    49  #ifndef IFXI2C_H
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    50  #define IFXI2C_H 1
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    51  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    52  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    53  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    54  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    55  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    56  #include "_Impl/IfxI2c_cfg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    57  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    58  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    59  #include "IfxI2c_bf.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    60  #include "_PinMap/IfxI2c_PinMap.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    61  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    62  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    63  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    64  /*-----------------------------------Macros-----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    65  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    66  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    67  /** \brief Master code for high speed mode
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    68   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    69  #define IFXI2C_HIGHSPEED_MASTER_CODE (0xEU)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    70  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    72  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    73  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    74  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    75  /** \addtogroup IfxLld_I2c_Std_enums
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    76   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    77  /** \brief Selects width of address bits (7 or 10 bits)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    78   * Definition in Ifx_I2C.ADDRCFG.B.TBAM
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    79   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    80  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    81  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    82      IfxI2c_AddressMode_7Bit  = 0, /**< \brief sets 7 bit address */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    83      IfxI2c_AddressMode_10Bit = 1  /**< \brief sets 10 bit address */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    84  } IfxI2c_AddressMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    85  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    86  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    87  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    88      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    89      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    90      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    91      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    92  } IfxI2c_BusStatus;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    93  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    94  /** \brief enables DTR interrupt flags
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    95   * Definition in Ifx.I2C.IMSC.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    96   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    97  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    98  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    99      IfxI2c_DtrInterruptSource_lastSingleRequest = IFX_I2C_IMSC_LSREQ_INT_OFF,  /**< \brief last single service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   100      IfxI2c_DtrInterruptSource_singleRequest     = IFX_I2C_IMSC_SREQ_INT_OFF,   /**< \brief single service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   101      IfxI2c_DtrInterruptSource_lastBurstRequest  = IFX_I2C_IMSC_LBREQ_INT_OFF,  /**< \brief last burst service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   102      IfxI2c_DtrInterruptSource_burstRequest      = IFX_I2C_IMSC_BREQ_INT_OFF    /**< \brief burst service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   103  } IfxI2c_DtrInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   104  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   105  /** \brief enable error interrupt request source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   106   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   107   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   108  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   109  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   110      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   111      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   112      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   113      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   114  } IfxI2c_ErrorInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   115  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   116  /** \brief Select speed mode. Standard and Fast or High Speed mode.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   117   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   118  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   119  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   120      IfxI2c_Mode_StandardAndFast = 0,  /**< \brief Sets Standard and Fast speed mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   121      IfxI2c_Mode_HighSpeed       = 1   /**< \brief Sets HighSpeed Mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   122  } IfxI2c_Mode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   123  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   124  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   125  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   126      IfxI2c_PinSelect_a = 0,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   127      IfxI2c_PinSelect_b = 1,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   128      IfxI2c_PinSelect_c = 2,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   129      IfxI2c_PinSelect_d = 3,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   130      IfxI2c_PinSelect_e = 4,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   131      IfxI2c_PinSelect_f = 5,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   132      IfxI2c_PinSelect_g = 6,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   133      IfxI2c_PinSelect_h = 7
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   134  } IfxI2c_PinSelect;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   135  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   136  /** \brief enable protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   137   * Definition in Ifx.I2C.PIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   138   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   139  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   140  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   141      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   142      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   143      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   144      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   145      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   146      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   147      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   148  } IfxI2c_ProtocolInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   149  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   150  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   151   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   152   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   154  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   155      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   156      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   157  } IfxI2c_SleepMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   158  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   159  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   160  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   161  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   162  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   163  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   164  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   165  /** \addtogroup IfxLld_I2c_Std_structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   166   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   167  /** \brief Pin Structure
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   168   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   169  typedef struct
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   170  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   171      IfxI2c_Scl_InOut *scl;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   172      IfxI2c_Sda_InOut *sda;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   173      IfxPort_PadDriver padDriver;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   174  } IfxI2c_Pins;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   175  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   176  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   177  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   178  /** \addtogroup IfxLld_I2c_Std_functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   179   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   180  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   181  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   182  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   183  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   184  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   185  /** \brief Returns if the bus is free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   186   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   187  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   188  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   189  /** \brief clears all DTR interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   190   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   191   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   192   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   193  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   194  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   195  /** \brief clears all Error Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   196   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   197   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   198   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   199  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   200  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   201  /** \brief Clears all Protocol Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   202   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   203   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   204   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   205  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   206  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   207  /** \brief clears the specified source of DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   208   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   209   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   210   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   211   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   212  IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   213  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   214  /** \brief clears the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   215   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   216   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   217   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   218   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   219  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   220  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   221  /** \brief clears the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   222   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   223   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   224   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   225   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   226  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   227  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   228  /** \brief Data request is cleared automatically
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   229   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   230   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   231   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   232  IFX_INLINE void IfxI2c_clearRequestBuffer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   233  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   234  /** \brief disables the specified source of DTR interupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   235   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   236   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   237   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   238   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   239  IFX_INLINE void IfxI2c_disableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   240  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   241  /** \brief disables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   242   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   243   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   244   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   245  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   246  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   247  /** \brief disables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   248   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   249   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   250   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   251   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   252  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   253  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   254  /** \brief disables the Protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   255   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   256   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   257   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   258  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   259  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   260  /** \brief disables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   261   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   262   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   263   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   264   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   265  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   266  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   267  /** \brief enables the specified source of DTR interupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   268   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   269   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   276   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   277   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   278  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   279  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   280  /** \brief enables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   281   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   282   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief enables the protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   289   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief enables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   295   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   296   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   297   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   298  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   299  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   300  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   301   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   302   * \return BusStatus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   303   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   304  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   305  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   306  /** \brief Returns the SRC pointer for I2C DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   307   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   308   * \return SRC pointer for I2C DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   309   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   310  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getDtrSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   311  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   312  /** \brief returns the status of specified DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   313   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   314   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   315   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   316   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   317  IFX_INLINE boolean IfxI2c_getDtrinterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   318  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   319  /** \brief returns the current status of error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   320   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   321   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   322   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   323  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   324  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   325  /** \brief returns the status of the error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   326   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   327   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   328   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   329   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   330  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   331  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   332  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   333   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   334   * \return SRC pointer for I2C Error Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   335   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   336  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   337  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   338  /** \brief returns the current raw status of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   339   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   340   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   341   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   342  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   343  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   344  /** \brief returns the status of  specified protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   345   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   346   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   347   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   348   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   349  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   350  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   351  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   352   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   353   * \return SRC pointer for I2C Protocol Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   354   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   355  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   356  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   357  /** \brief Returns if the Fifo is requesting new data
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   361  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   363   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief Sets width of I2C address to 7 or 10 bits
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   369   * \param mode selects 7 or 10 bits address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   370   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   371   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   372  IFX_INLINE void IfxI2c_setBitAddressMode(Ifx_I2C *i2c, IfxI2c_AddressMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   373  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   374  /** \brief selects the pin
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   375   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   376   * \param pisel pin to be select
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   377   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   378   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   379  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   380  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   381  /** \brief Sets the number of bytes to be received
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   382   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   383   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   384   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   385   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   386  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   387  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   388  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   389   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   390   * \param address device address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   391   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   392   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   393  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   394  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   395  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   396   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   397   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   398   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   399   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   400  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   401  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   402  /** \brief Sets the number of bytes to be tansmitted
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   403   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   404   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   405   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   406   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   407  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   408  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   409  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   410   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   411   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   412   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   413  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   414  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   415  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   416   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   417   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   418   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   419  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   420  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   421  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   422   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   423   * \param packet specifies the byte to be transfer
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   424   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   425   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   426  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   427  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   428  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   429  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   430  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   431  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   432  /** \brief Configures the Module as Master
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   433   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   434   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   435   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   436  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   437  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   438  /** \brief Disables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   439   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   440   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   441   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   442  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   443  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   444  /** \brief enables the DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   445   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   446   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   447   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   448   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   449   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   450  IFX_EXTERN void IfxI2c_enableDtrInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   451  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   452  /** \brief Enables the Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   453   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   454   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   455   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   456   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   457   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   458  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   459  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   460  /** \brief Enables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   461   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   462   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   463   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   464  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   465  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   466  /** \brief Enables the protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   467   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   468   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   469   * \param priority Priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   471   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   472  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   473  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   474  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   475   * \param i2c Resource index of the I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   476   * \return I2C module register address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   477   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   478  IFX_EXTERN Ifx_I2C *IfxI2c_getAddress(IfxI2c_Index i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   479  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   480  /** \brief Returns the real Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   481   * \return Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   482   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   483  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   484  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   485  /** \brief API to get the resource index of the I2C specified.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   486   * \param i2c Pointer to the I2C HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   487   * \return Resource index of the I2C
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   488   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   489  IFX_EXTERN IfxI2c_Index IfxI2c_getIndex(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   490  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   491  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   492   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   493   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   494  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   495  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   496  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   497   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   498   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   499  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   500  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   501  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   502   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   503   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   504  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   505  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   506  /** \brief resets the I2c kernel
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   507   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   508   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   509   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   510  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   511  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   512  /** \brief Calculates the desired baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   513   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   514   * \param baudrate specifies the baud rate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   515   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   516   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   517  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   518  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   519  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   520  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   521  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   522  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   523  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   524  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   525  /** \brief Configure the i2c master to high speed mode baudrate > 400kbits/s
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   526   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   527   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   528   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   529  IFX_EXTERN void IfxI2c_configureHighSpeedMode(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   530  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   531  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   532  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   533  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   534  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   535  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   536  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   537      boolean free = FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   538  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   539      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   540      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   541          free = TRUE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   542      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   543  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   544      return free;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   545  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   546  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   547  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   548  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   549  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   550      i2c->ICR.U = (1 << IFX_I2C_ICR_LSREQ_INT_OFF) | (1 << IFX_I2C_ICR_SREQ_INT_OFF) | (1 << IFX_I2C_ICR_LBREQ_INT_OFF) | (1 << IFX_I2C_ICR_BREQ_INT_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   551  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   552  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   553  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   554  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   555  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   556      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   557  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   558  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   559  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   560  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   561  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   562      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   563  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   565  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   566  IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   567  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   568      i2c->ICR.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   569  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   570  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   571  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   572  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   573  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   574      i2c->ERRIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   575  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   576  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   577  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   578  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   579  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   580      i2c->PIRQSC.U = (1 << source);
	mov	d15,#32
	st.w	[a4]120,d15
.L22:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   224          {}
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   225  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   226          IfxI2c_clearProtocolInterruptSource(i2c, IfxI2c_ProtocolInterruptSource_transmissionEnd);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   227      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   228  }
	ret
.L290:
	
__IfxI2c_releaseBus_function_end:
	.size	IfxI2c_releaseBus,__IfxI2c_releaseBus_function_end-IfxI2c_releaseBus
.L135:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_resetFifo',code,cluster('IfxI2c_resetFifo')
	.sect	'.text.IfxI2c.IfxI2c_resetFifo'
	.align	2
	
	.global	IfxI2c_resetFifo

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   229  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   230  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   231  void IfxI2c_resetFifo(Ifx_I2C *i2c)
; Function IfxI2c_resetFifo
.L70:
IfxI2c_resetFifo:	.type	func

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   232  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   233      /* reset FIFO */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   234      i2c->FIFOCFG.U      = 0x0;
	mov	d15,#0
	st.w	[a4]40,d15
.L535:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   235      i2c->FIFOCFG.B.TXFC = 0U;
	ld.bu	d15,[a4]42
.L536:
	insert	d15,d15,#0,#1,#1
	st.b	[a4]42,d15
.L537:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   236      i2c->FIFOCFG.B.RXFC = 0U;
	ld.bu	d15,[a4]42
.L538:
	insert	d15,d15,#0,#0,#1
	fcall	.cocofun_12
.L539:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   237      i2c->FIFOCFG.B.TXBS = 0U;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   238      i2c->FIFOCFG.B.RXBS = 0U;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   239      i2c->FIFOCFG.B.TXFA = 0U;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   240      i2c->FIFOCFG.B.RXFA = 0U;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   241  }
	ret
.L306:
	
__IfxI2c_resetFifo_function_end:
	.size	IfxI2c_resetFifo,__IfxI2c_resetFifo_function_end-IfxI2c_resetFifo
.L140:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_resetModule',code,cluster('IfxI2c_resetModule')
	.sect	'.text.IfxI2c.IfxI2c_resetModule'
	.align	2
	
	.global	IfxI2c_resetModule

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   242  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   243  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   244  void IfxI2c_resetModule(Ifx_I2C *i2c)
; Function IfxI2c_resetModule
.L72:
IfxI2c_resetModule:	.type	func
	mov.aa	a15,a4
.L401:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   245  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   246      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L400:
	mov	d8,d2
.L403:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   247  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   248      IfxScuWdt_clearCpuEndinit(passwd);
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L402:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   249      i2c->KRST0.B.RST = 1;           /* Only if both Kernel reset bits are set a reset is executed */
	fcall	.cocofun_17
.L404:
	ld.bu	d15,[+a3]20
.L544:
	fcall	.cocofun_14
	st.b	[+a3]20,d15
.L545:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   250      i2c->KRST1.B.RST = 1;
	fcall	.cocofun_17
	ld.bu	d15,[+a3]24
.L546:
	fcall	.cocofun_14
	st.b	[+a3]24,d15
.L547:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   251      IfxScuWdt_setCpuEndinit(passwd);
	mov	d4,d8
	call	IfxScuWdt_setCpuEndinit
.L405:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   252  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   253      while (0 == i2c->KRST0.B.RSTSTAT)   /* Wait until reset is executed */
	fcall	.cocofun_17
.L406:
	lea	a2,[a3]20
.L24:
	ld.bu	d15,[a2]
.L548:
	jz.t	d15:1,.L24
.L549:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   254  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   255      {}
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   256  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   257      IfxScuWdt_clearCpuEndinit(passwd);
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L407:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   258      i2c->KRSTCLR.B.CLR = 1;         /* Clear Kernel reset status bit */
	fcall	.cocofun_17
.L408:
	ld.bu	d15,[+a3]28
.L550:
	fcall	.cocofun_14
.L551:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   259      IfxScuWdt_setCpuEndinit(passwd);
	mov	d4,d8
	st.b	[+a3]28,d15
.L409:
	j	IfxScuWdt_setCpuEndinit
.L308:
	
__IfxI2c_resetModule_function_end:
	.size	IfxI2c_resetModule,__IfxI2c_resetModule_function_end-IfxI2c_resetModule
.L145:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_setBaudrate',code,cluster('IfxI2c_setBaudrate')
	.sect	'.text.IfxI2c.IfxI2c_setBaudrate'
	.align	2
	
	.global	IfxI2c_setBaudrate

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   260  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   261  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   262  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   263  void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate)
; Function IfxI2c_setBaudrate
.L74:
IfxI2c_setBaudrate:	.type	func
	mov	d8,d4
	mov.aa	a15,a4
.L316:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     2   * \file IfxScuCcu.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    42   * \defgroup IfxLld_Scu SCU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    43   * \addtogroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    44   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    45   * \defgroup IfxLld_ScuCcu How to use the Scu Clock driver?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    46   * \addtogroup IfxLld_ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    47   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    48   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    49   * The Scu Clock control unit driver provides a default configuration for pll and Clock initialisation and set of peripheral clock configuration functions.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    51   * In the following sections it will be described, how to integrate the driver into the application framework.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    52   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    53   * \section IfxLld_ScuCcu_Std_Preparation Preparation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    54   * \subsection IfxLld_ScuCcu_Std_Include Include Files
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    55   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    56   * Include following header file into your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    57   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    58   * #include <Scu/Std/IfxScuCcu.h>
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    59   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    60   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    61   * \subsection IfxLld_ScuCcu_Std_Variables Variables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    62   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    63   * Declare the Clock Configuration variables in your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    64   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    65   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    66   * // used globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    67   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    68   * // configuration for the PLL  steps
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    69   * static IfxScuCcu_PllStepsConfig IfxScuCcu_testPllConfigSteps[] = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    70   *     IFXSCU_CFG_PLL_STEPS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    71   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    72   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    73   * static const IfxScuCcu_FlashWaitstateConfig IfxScuCcu_defaultFlashWaitstateConfig = IFXSCU_CFG_FLASH_WAITSTATE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    74   * // Default configuration for the Clock Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    75   * IfxScuCcu_Config                      IfxScuCcu_testClockConfig = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    76   *     // IfxScuCcu_InitialStepConfig: Configuration of first step which is same as internal osc frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    77   *     IFXSCU_CFG_PLL_INITIAL_STEP,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    78   *     //IfxScuCcu_PllThrottleConfig: Configuration of PLL throttling.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    79   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    80   *         sizeof(IfxScuCcu_defaultPllConfigSteps) / sizeof(IfxScuCcu_PllStepConfig),
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    81   *         IfxScuCcu_defaultPllConfigSteps
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    82   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    83   *     IFXSCU_CFG_CLK_DISTRIBUTION,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    84   *     &IfxScuCcu_defaultFlashWaitstateConfig,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    85   *     &IfxScuCcu_defaultModConfig
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    86   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    87   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    88   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    89   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    90   * \subsection IfxLld_ScuCcu_Std_Init Module Initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    91   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    92   * The module initialisation can be done in the same function. Here an example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    93   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    94   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    95   *        // standard PLL & clock initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    96   *         IfxScuCcu_init(&IfxScuCcu_testClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    97   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    99   *    The SYS PLL, PER PLL1 , PLL2 and clocks are now initialised based on the XTAL and PLL values configured in Ifx_Cfg.h and are ready for use now!
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   100   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   101   * Alternately the PLL and clocks can be initialised using below method which provides greater control on the configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   102   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   103   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   104   * static const IfxScuCcu_PllStepConfig IfxScuCcu_defaultPllConfigSteps[] = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   105   *     {                   //Step 0 Config: 150MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   106   *         (4 - 1),        //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   107   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   108   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   109   *     {                   //Step 1 Config: 200MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   110   *         (3 - 1),       //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   111   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   112   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   113   *     {                   //Step 2 Config: 300MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   114   *         (2 - 1),        //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   115   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   116   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   117   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   118   *     IfxScuCcu_Config        IfxScuCcu_sampleClockConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   119   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   120   *     IfxScuCcu_initConfig(&IfxScuCcu_sampleClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   121   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   122   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   123   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   124   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.pllInputClockSelection = IfxScuCcu_PllInputClockSelection_fOsc0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   126   *     //SYS PLL = 300Mhz, XTAL = 20Mhz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   127   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.k2Divider = IfxScuCcu_K2divider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   128   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.nDivider = IfxScuCcu_Ndivider_60;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   129   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.pDivider = IfxScuCcu_Pdivider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   130   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.waitTime = 0.000200F;  // wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   131   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   132   *     IfxScuCcu_sampleClockConfig.sysPllThrottleConfig.numOfSteps = sizeof(IfxScuCcu_defaultPllConfigSteps) / sizeof(IfxScuCcu_PllStepConfig); //  step clock incr
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   133   *     IfxScuCcu_sampleClockConfig.sysPllThrottleConfig.pllSteps = IfxScuCcu_defaultPllConfigSteps;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   135   *     // PER PLL1 = 240Mhz, PERPLL2 = 50Mhz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   136   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k2Divider = IfxScuCcu_K2divider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   137   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k3Divider = IfxScuCcu_K3divider_6;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   138   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k3DividerBypass = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   139   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.nDivider = IfxScuCcu_Ndivider_24;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   140   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.pDivider = IfxScuCcu_Pdivider_1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   142   *     // update CCUCON Config use mask and value as below
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   143   *     IfxScuCcu_sampleClockConfig.clockDistribution.ccucon0.mask =IFXSCU_CFG_CCUCON0_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   144   *     IfxScuCcu_sampleClockConfig.clockDistribution.ccucon0.value = IFXSCU_CFG_CCUCON0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   146   *     // standard PLL & clock initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   147   *     IfxScuCcu_init(&IfxScuCcu_sampleClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   149   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   150   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   151   * ** Modulation Configuration **
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   152   * The SCU CCU module also provides an option to Frequency Modulate the clock.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   153   * The Modulation configuration can be done as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   154   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   155   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   156   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   157   * //define your modulation configuration structure:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   158   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   159   *  IFX_CONST IfxScuCcu_Mod_Config IfxScuCcu_SampleModConfig = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   160   *          IfxScuCcu_ModEn_disabled,          // disable is default //enable / disable modulation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   161   *          IfxScuCcu_ModulationAmplitude_0p5, // default 0 value  // specify the modulation amplitude %
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   162   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   163   *  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   164   *  // put this as part of the CCU configuration:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   165   *  IfxScuCcu_sampleClockConfig.modulationConfig = &IfxScuCcu_SampleModConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   166   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   167   *  // now initalize the CCU PLL and clock with the init function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   168   *  IfxScuCcu_init(&IfxScuCcu_sampleClockConfig)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   169   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   171   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   172   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   173   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   174   * \defgroup IfxLld_Scu_Std_Ccu Ccu Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   175   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   176   * \defgroup IfxLld_Scu_Std_Ccu_Ccu Clock Control Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   177   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   178   * \defgroup IfxLld_Scu_Std_Ccu_Ccu_Operative Clock Control Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   179   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   180   * \defgroup IfxLld_Scu_Std_Ccu_Ccu_Configuration Clock Control Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   181   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   182   * \defgroup IfxLld_Scu_Std_Ccu_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   183   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   185  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   186  #ifndef IFXSCUCCU_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   187  #define IFXSCUCCU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   188  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   189  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   190  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   191  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   193  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   194  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   195  #include "Cpu/Std/IfxCpu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   196  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   197  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   198  #include "_PinMap/IfxScu_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   199  #include "IfxSmu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   200  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   201  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   202  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   203  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   205  /** \brief Oscillator stability check timeout count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   207  #ifndef IFXSCUCCU_OSC_STABLECHK_TIME
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   208  #define IFXSCUCCU_OSC_STABLECHK_TIME               (640)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   209  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   210  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   211  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   213  #define IFXSCUCCU_SMUALARM_MASK                    (0x1DU)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   215  /** \brief ~40uS max wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   216   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   217  #ifndef IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   218  #define IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT     (0x1000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   219  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   221  /** \brief ~122uS max wait time for PLL locking
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   223  #define IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT           (0x3000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   224  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   225  /** \brief ~122uS max wait time for PLL power down/up state update
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   227  #define IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT (0x3000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   229  /** \brief ~244uS max wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   230   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   231  #define IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT           (0x6000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   233  /** \brief 3mS max wait time for PLL power down/up state update
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   235  #define IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT (0x493E0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   237  #define IFXSCUCCU_LOOP_TIMEOUT_CHECK(tVar, tErr) \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   238      {                                            \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   239          if (((sint32)--tVar) <= 0)               \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   240          {                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   241              tErr = (uint8)1;                     \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   242              break;                               \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   243          }                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   244          else                                     \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   245          {                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   246          }                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   247      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   248  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   249  /** \brief Modulation frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   250   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   251  #define IFXSCUCCU_MODULATION_FREQ_HZ               (3600000)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   253  /** \brief MODCFG shift value for SYSPLLCON2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   255  #define IFXSCUCCU_MODCFG_DEFAULT_SHIFT             (10)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   257  /** \brief MODCFG default value - for SYSPLLCON2[15:10]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   259  #define IFXSCUCCU_MODCFG_DEFAULT_VAL               ((uint32)0x3D)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   261  /** \brief get Rgain from MA and FDco
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   263  #define IFXSCUCCU_GET_RGAIN_NOM(MA, FDco)  ((2 * (MA / 100) * (FDco / IFXSCUCCU_MODULATION_FREQ_HZ)))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   265  /** \brief Get RGAin HEX from RGain Nominal value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   266   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   267  #define IFXSCUCCU_GET_RGAIN_HEX(RGain_Nom) ((uint16)((RGain_Nom * 32) + 0.5))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   269  /** \brief Get MODCFG from RGAIN_HEX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   271  #define IFXSCUCCU_GET_MODCFG(RGain_Hex)    ((uint16)(IFXSCUCCU_MODCFG_DEFAULT_VAL << IFXSCUCCU_MODCFG_DEFAULT_SHIFT) | (uint16)(RGain_Hex))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   273  /** \brief Define to include the flash wait state check in ScuCcu_init()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   275  #define IFXSCUCCU_FLASHWAITSTATECHECK (0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   277  /** \brief 10 microsecond wait time between steps to jump back to normal mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   278   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   279  #ifndef IFXSCUCCU_LPTONORMAL_WAITTIME
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   280  #define IFXSCUCCU_LPTONORMAL_WAITTIME (0.00001f)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   281  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   283  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   284  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   285  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   287  /** \brief Function pointer type for the hooks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   288   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   290  typedef void (*IfxScuCcu_PllStepsFunctionHook)(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   292  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   293  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   294  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   295  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   296  /** \addtogroup IfxLld_Scu_Std_Ccu_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   297   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   298  /** \brief clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   299   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   300  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   301  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   302      IfxScuCcu_Fsource_0 = 0,      /**< \brief fSource0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   303      IfxScuCcu_Fsource_1,          /**< \brief fSource1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   304      IfxScuCcu_Fsource_2           /**< \brief fSource2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   305  } IfxScuCcu_Fsource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   307  /** \brief MODULE_SCU.PLLCON1.B.K2DIV, specifies the K2-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   308   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   309  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   310  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   311      IfxScuCcu_K2divider_1 = 0,      /**< \brief K2-Divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   312      IfxScuCcu_K2divider_2,          /**< \brief K2-Divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   313      IfxScuCcu_K2divider_3,          /**< \brief K2-Divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   314      IfxScuCcu_K2divider_4,          /**< \brief K2-Divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   315      IfxScuCcu_K2divider_5,          /**< \brief K2-Divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   316      IfxScuCcu_K2divider_6,          /**< \brief K2-Divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   317      IfxScuCcu_K2divider_7,          /**< \brief K2-Divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   318      IfxScuCcu_K2divider_8           /**< \brief K2-Divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   319  } IfxScuCcu_K2divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   321  /** \brief MODULE_SCU.PLLCON1.B.K3DIV, specifies the K3-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   322   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   323  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   324  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   325      IfxScuCcu_K3divider_1 = 0,      /**< \brief K3-Divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   326      IfxScuCcu_K3divider_2,          /**< \brief K3-Divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   327      IfxScuCcu_K3divider_3,          /**< \brief K3-Divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   328      IfxScuCcu_K3divider_4,          /**< \brief K3-Divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   329      IfxScuCcu_K3divider_5,          /**< \brief K3-Divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   330      IfxScuCcu_K3divider_6,          /**< \brief K3-Divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   331      IfxScuCcu_K3divider_7,          /**< \brief K3-Divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   332      IfxScuCcu_K3divider_8           /**< \brief K3-Divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   333  } IfxScuCcu_K3divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   334  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   335  /** \brief Low Power Division Ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   336   * Corresponds to values of LPDIV in CCUCON0.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   337   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   338  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   339  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   340      IfxScuCcu_LowPowerDivRatio_divBy30 = 1,  /**< \brief Divide by 30 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   341      IfxScuCcu_LowPowerDivRatio_divBy60,      /**< \brief Divide by 60 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   342      IfxScuCcu_LowPowerDivRatio_divBy120,     /**< \brief Divide by 120 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   343      IfxScuCcu_LowPowerDivRatio_divBy240      /**< \brief Divide by 240 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   344  } IfxScuCcu_LowPowerDivRatio;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   346  /** \brief ENUM for MA (%) values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   347   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   348  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   349  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   350      IfxScuCcu_ModulationAmplitude_0p5 = 0,      /**< \brief 0.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   351      IfxScuCcu_ModulationAmplitude_1p0,          /**< \brief 1.0%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   352      IfxScuCcu_ModulationAmplitude_1p25,         /**< \brief 1.25%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   353      IfxScuCcu_ModulationAmplitude_1p5,          /**< \brief 1.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   354      IfxScuCcu_ModulationAmplitude_2p0,          /**< \brief 2%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   355      IfxScuCcu_ModulationAmplitude_2p5,          /**< \brief 2.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   356      IfxScuCcu_ModulationAmplitude_count,        /**< \brief range  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   357  } IfxScuCcu_ModulationAmplitude;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   358  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   359  /** \brief MODULE_SCU.PLLCON0.B.NDIV, specifies the N-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   361  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   362  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   363      IfxScuCcu_Ndivider_1 = 0,      /**< \brief  N-divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   364      IfxScuCcu_Ndivider_2,          /**< \brief  N-divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   365      IfxScuCcu_Ndivider_3,          /**< \brief  N-divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   366      IfxScuCcu_Ndivider_4,          /**< \brief  N-divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   367      IfxScuCcu_Ndivider_5,          /**< \brief  N-divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   368      IfxScuCcu_Ndivider_6,          /**< \brief  N-divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   369      IfxScuCcu_Ndivider_7,          /**< \brief  N-divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   370      IfxScuCcu_Ndivider_8,          /**< \brief  N-divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   371      IfxScuCcu_Ndivider_9,          /**< \brief  N-divider 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   372      IfxScuCcu_Ndivider_10,         /**< \brief  N-divider 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   373      IfxScuCcu_Ndivider_11,         /**< \brief  N-divider 11  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   374      IfxScuCcu_Ndivider_12,         /**< \brief  N-divider 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   375      IfxScuCcu_Ndivider_13,         /**< \brief  N-divider 13  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   376      IfxScuCcu_Ndivider_14,         /**< \brief  N-divider 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   377      IfxScuCcu_Ndivider_15,         /**< \brief  N-divider 15  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   378      IfxScuCcu_Ndivider_16,         /**< \brief  N-divider 16  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   379      IfxScuCcu_Ndivider_17,         /**< \brief  N-divider 17  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   380      IfxScuCcu_Ndivider_18,         /**< \brief  N-divider 18  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   381      IfxScuCcu_Ndivider_19,         /**< \brief  N-divider 19  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   382      IfxScuCcu_Ndivider_20,         /**< \brief  N-divider 20  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   383      IfxScuCcu_Ndivider_21,         /**< \brief  N-divider 21  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   384      IfxScuCcu_Ndivider_22,         /**< \brief  N-divider 22  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   385      IfxScuCcu_Ndivider_23,         /**< \brief  N-divider 23  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   386      IfxScuCcu_Ndivider_24,         /**< \brief  N-divider 24  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   387      IfxScuCcu_Ndivider_25,         /**< \brief  N-divider 25  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   388      IfxScuCcu_Ndivider_26,         /**< \brief  N-divider 26  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   389      IfxScuCcu_Ndivider_27,         /**< \brief  N-divider 27  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   390      IfxScuCcu_Ndivider_28,         /**< \brief  N-divider 28  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   391      IfxScuCcu_Ndivider_29,         /**< \brief  N-divider 29  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   392      IfxScuCcu_Ndivider_30,         /**< \brief  N-divider 30  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   393      IfxScuCcu_Ndivider_31,         /**< \brief  N-divider 31  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   394      IfxScuCcu_Ndivider_32,         /**< \brief  N-divider 32  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   395      IfxScuCcu_Ndivider_33,         /**< \brief  N-divider 33  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   396      IfxScuCcu_Ndivider_34,         /**< \brief  N-divider 34  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   397      IfxScuCcu_Ndivider_35,         /**< \brief  N-divider 35  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   398      IfxScuCcu_Ndivider_36,         /**< \brief  N-divider 36  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   399      IfxScuCcu_Ndivider_37,         /**< \brief  N-divider 37  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   400      IfxScuCcu_Ndivider_38,         /**< \brief  N-divider 38  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   401      IfxScuCcu_Ndivider_39,         /**< \brief  N-divider 39  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   402      IfxScuCcu_Ndivider_40,         /**< \brief  N-divider 40  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   403      IfxScuCcu_Ndivider_41,         /**< \brief  N-divider 41  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   404      IfxScuCcu_Ndivider_42,         /**< \brief  N-divider 42  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   405      IfxScuCcu_Ndivider_43,         /**< \brief  N-divider 43  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   406      IfxScuCcu_Ndivider_44,         /**< \brief  N-divider 44  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   407      IfxScuCcu_Ndivider_45,         /**< \brief  N-divider 45  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   408      IfxScuCcu_Ndivider_46,         /**< \brief  N-divider 46  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   409      IfxScuCcu_Ndivider_47,         /**< \brief  N-divider 47  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   410      IfxScuCcu_Ndivider_48,         /**< \brief  N-divider 48  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   411      IfxScuCcu_Ndivider_49,         /**< \brief  N-divider 49  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   412      IfxScuCcu_Ndivider_50,         /**< \brief  N-divider 50  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   413      IfxScuCcu_Ndivider_51,         /**< \brief  N-divider 51  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   414      IfxScuCcu_Ndivider_52,         /**< \brief  N-divider 52  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   415      IfxScuCcu_Ndivider_53,         /**< \brief  N-divider 53  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   416      IfxScuCcu_Ndivider_54,         /**< \brief  N-divider 54  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   417      IfxScuCcu_Ndivider_55,         /**< \brief  N-divider 55  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   418      IfxScuCcu_Ndivider_56,         /**< \brief  N-divider 56  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   419      IfxScuCcu_Ndivider_57,         /**< \brief  N-divider 57  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   420      IfxScuCcu_Ndivider_58,         /**< \brief  N-divider 58  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   421      IfxScuCcu_Ndivider_59,         /**< \brief  N-divider 59  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   422      IfxScuCcu_Ndivider_60,         /**< \brief  N-divider 60  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   423      IfxScuCcu_Ndivider_61,         /**< \brief  N-divider 61  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   424      IfxScuCcu_Ndivider_62,         /**< \brief  N-divider 62  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   425      IfxScuCcu_Ndivider_63,         /**< \brief  N-divider 63  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   426      IfxScuCcu_Ndivider_64,         /**< \brief  N-divider 64  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   427      IfxScuCcu_Ndivider_65,         /**< \brief  N-divider 65  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   428      IfxScuCcu_Ndivider_66,         /**< \brief  N-divider 66  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   429      IfxScuCcu_Ndivider_67,         /**< \brief  N-divider 67  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   430      IfxScuCcu_Ndivider_68,         /**< \brief  N-divider 68  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   431      IfxScuCcu_Ndivider_69,         /**< \brief  N-divider 69  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   432      IfxScuCcu_Ndivider_70,         /**< \brief  N-divider 70  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   433      IfxScuCcu_Ndivider_71,         /**< \brief  N-divider 71  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   434      IfxScuCcu_Ndivider_72,         /**< \brief  N-divider 72  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   435      IfxScuCcu_Ndivider_73,         /**< \brief  N-divider 73  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   436      IfxScuCcu_Ndivider_74,         /**< \brief  N-divider 74  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   437      IfxScuCcu_Ndivider_75,         /**< \brief  N-divider 75  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   438      IfxScuCcu_Ndivider_76,         /**< \brief  N-divider 76  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   439      IfxScuCcu_Ndivider_77,         /**< \brief  N-divider 77  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   440      IfxScuCcu_Ndivider_78,         /**< \brief  N-divider 78  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   441      IfxScuCcu_Ndivider_79,         /**< \brief  N-divider 79  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   442      IfxScuCcu_Ndivider_80,         /**< \brief  N-divider 80  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   443      IfxScuCcu_Ndivider_81,         /**< \brief  N-divider 81  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   444      IfxScuCcu_Ndivider_82,         /**< \brief  N-divider 82  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   445      IfxScuCcu_Ndivider_83,         /**< \brief  N-divider 83  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   446      IfxScuCcu_Ndivider_84,         /**< \brief  N-divider 84  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   447      IfxScuCcu_Ndivider_85,         /**< \brief  N-divider 85  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   448      IfxScuCcu_Ndivider_86,         /**< \brief  N-divider 86  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   449      IfxScuCcu_Ndivider_87,         /**< \brief  N-divider 87  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   450      IfxScuCcu_Ndivider_88,         /**< \brief  N-divider 88  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   451      IfxScuCcu_Ndivider_89,         /**< \brief  N-divider 89  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   452      IfxScuCcu_Ndivider_90,         /**< \brief  N-divider 90  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   453      IfxScuCcu_Ndivider_91,         /**< \brief  N-divider 91  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   454      IfxScuCcu_Ndivider_92,         /**< \brief  N-divider 92  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   455      IfxScuCcu_Ndivider_93,         /**< \brief  N-divider 93  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   456      IfxScuCcu_Ndivider_94,         /**< \brief  N-divider 94  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   457      IfxScuCcu_Ndivider_95,         /**< \brief  N-divider 95  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   458      IfxScuCcu_Ndivider_96,         /**< \brief  N-divider 96  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   459      IfxScuCcu_Ndivider_97,         /**< \brief  N-divider 97  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   460      IfxScuCcu_Ndivider_98,         /**< \brief  N-divider 98  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   461      IfxScuCcu_Ndivider_99,         /**< \brief  N-divider 99  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   462      IfxScuCcu_Ndivider_100,        /**< \brief  N-divider 100  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   463      IfxScuCcu_Ndivider_101,        /**< \brief  N-divider 101  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   464      IfxScuCcu_Ndivider_102,        /**< \brief  N-divider 102  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   465      IfxScuCcu_Ndivider_103,        /**< \brief  N-divider 103  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   466      IfxScuCcu_Ndivider_104,        /**< \brief  N-divider 104  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   467      IfxScuCcu_Ndivider_105,        /**< \brief  N-divider 105  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   468      IfxScuCcu_Ndivider_106,        /**< \brief  N-divider 106  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   469      IfxScuCcu_Ndivider_107,        /**< \brief  N-divider 107  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   470      IfxScuCcu_Ndivider_108,        /**< \brief  N-divider 108  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   471      IfxScuCcu_Ndivider_109,        /**< \brief  N-divider 109  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   472      IfxScuCcu_Ndivider_110,        /**< \brief  N-divider 110  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   473      IfxScuCcu_Ndivider_111,        /**< \brief  N-divider 111  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   474      IfxScuCcu_Ndivider_112,        /**< \brief  N-divider 112  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   475      IfxScuCcu_Ndivider_113,        /**< \brief  N-divider 113  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   476      IfxScuCcu_Ndivider_114,        /**< \brief  N-divider 114  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   477      IfxScuCcu_Ndivider_115,        /**< \brief  N-divider 115  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   478      IfxScuCcu_Ndivider_116,        /**< \brief  N-divider 116  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   479      IfxScuCcu_Ndivider_117,        /**< \brief  N-divider 117  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   480      IfxScuCcu_Ndivider_118,        /**< \brief  N-divider 118  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   481      IfxScuCcu_Ndivider_119,        /**< \brief  N-divider 119  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   482      IfxScuCcu_Ndivider_120,        /**< \brief  N-divider 120  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   483      IfxScuCcu_Ndivider_121,        /**< \brief  N-divider 121  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   484      IfxScuCcu_Ndivider_122,        /**< \brief  N-divider 122  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   485      IfxScuCcu_Ndivider_123,        /**< \brief  N-divider 123  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   486      IfxScuCcu_Ndivider_124,        /**< \brief  N-divider 124  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   487      IfxScuCcu_Ndivider_125,        /**< \brief  N-divider 125  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   488      IfxScuCcu_Ndivider_126,        /**< \brief  N-divider 126  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   489      IfxScuCcu_Ndivider_127,        /**< \brief  N-divider 127  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   490      IfxScuCcu_Ndivider_128         /**< \brief  N-divider 128  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   491  } IfxScuCcu_Ndivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   492  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   493  /** \brief MODULE_SCU.PLLCON0.B.PDIV, specifies the P-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   495  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   496  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   497      IfxScuCcu_Pdivider_1 = 0,      /**< \brief  P-divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   498      IfxScuCcu_Pdivider_2,          /**< \brief  P-divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   499      IfxScuCcu_Pdivider_3,          /**< \brief  P-divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   500      IfxScuCcu_Pdivider_4,          /**< \brief  P-divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   501      IfxScuCcu_Pdivider_5,          /**< \brief  P-divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   502      IfxScuCcu_Pdivider_6,          /**< \brief  P-divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   503      IfxScuCcu_Pdivider_7,          /**< \brief  P-divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   504      IfxScuCcu_Pdivider_8           /**< \brief  P-divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   505  } IfxScuCcu_Pdivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   506  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   507  /** \brief SysPll & Per Pll input clock selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   508   * SYSPLLCON0.B.INSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   509   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   510  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   511  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   512      IfxScuCcu_PllInputClockSelection_fOsc1   = 0, /**< \brief Backup clock select */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   513      IfxScuCcu_PllInputClockSelection_fOsc0   = 1, /**< \brief fOsc0 or XTAL clock select */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   514      IfxScuCcu_PllInputClockSelection_fSysclk = 2  /**< \brief fOsc1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   515  } IfxScuCcu_PllInputClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   516  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   517  /** \brief trap request type
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   518   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   519  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   520  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   521      IfxScuCcu_Traprequest_esr0 = 0,  /**< \brief external service request 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   522      IfxScuCcu_Traprequest_esr1,      /**< \brief external service request 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   523      IfxScuCcu_Traprequest_trap2,     /**< \brief trap2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   524      IfxScuCcu_Traprequest_smu        /**< \brief safety management unit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   525  } IfxScuCcu_Traprequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   526  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   527  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   528  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   529  /** \brief modulation enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   530   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   531  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   532  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   533      IfxScuCcu_ModEn_disabled = 0,  /**< \brief disable modulation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   534      IfxScuCcu_ModEn_enabled  = 1   /**< \brief enable modulation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   535  } IfxScuCcu_ModEn;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   537  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   538  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   539  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   541  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   542   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   543  /** \brief Configuration structure type for the Per Pll step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   544   * This structure must be used to configure the P, N and K2, K3 dividers .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   545   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   546  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   547  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   548      uint8 pDivider;              /**< \brief P divider value for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   549      uint8 nDivider;              /**< \brief N divider value for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   550      uint8 k2Divider;             /**< \brief K2 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   551      uint8 k3Divider;             /**< \brief K3 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   552      uint8 k3DividerBypass;       /**< \brief Divider Bypass
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   553                                    * 0 - The divide by block in front of the K3-Divider is not bypassed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   554                                    * 1-  The divide by block in front of the K3-Divider is bypassed. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   555  } IfxScuCcu_PerPllConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   556  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   557  /** \brief Configuration structure type for the Pll initial step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   558   * This structure must be used to configure the P, N and K2 dividers for initial step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   559   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   560  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   561  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   562      uint8 pDivider;        /**< \brief P divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   563      uint8 nDivider;        /**< \brief N divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   564      uint8 k2Divider;       /**< \brief K2 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   565  } IfxScuCcu_SysPllConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   567  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   568  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   569  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   570   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   571  /** \brief Configuration structure type for CCUCON registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   573  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   574  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   575      uint32 value;       /**< \brief CCUCON Register value to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   576      uint32 mask;        /**< \brief CCUCON Mask to select the bit fields to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   577  } IfxScuCcu_CcuconRegConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   578  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   579  /** \brief Configuration structure type for the Pll Steps for current jump control.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   581  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   582  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   583      uint8   k2Step;         /**< \brief K2 divider value for this step. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   584      float32 waitTime;       /**< \brief Wait time for for this step. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   585  } IfxScuCcu_PllStepConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   587  /** \brief Configuration structure type for the Pll Parameters.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   589  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   590  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   591      uint32                           xtalFrequency;                /**< \brief Xtal frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   592      IfxScuCcu_PllInputClockSelection pllInputClockSelection;       /**< \brief Pll input clock selection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   593      IfxScuCcu_SysPllConfig           sysPllConfig;                 /**< \brief System PLL Configurations */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   594      IfxScuCcu_PerPllConfig           perPllConfig;                 /**< \brief Peripheral PLL Configurations */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   595  } IfxScuCcu_pllsParameterConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   596  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   597  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   599  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   600   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   601  /** \brief Configuration structure type for the Flash waitstate configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   602   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   603  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   604  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   605      uint32 value;       /**< \brief FLASH.FCON Register value to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   606      uint32 mask;        /**< \brief FLASH.FCON Mask to select the bit fields to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   607  } IfxScuCcu_FlashWaitstateConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   609  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   610  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   611  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   612   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   613  /** \brief Configuration structure type for all the CCUCON registers to configure clock distribution.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   615  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   616  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   617      IfxScuCcu_CcuconRegConfig ccucon0;        /**< \brief CCUCON0 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   618      IfxScuCcu_CcuconRegConfig ccucon1;        /**< \brief CCUCON1 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   619      IfxScuCcu_CcuconRegConfig ccucon2;        /**< \brief CCUCON2 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   620      IfxScuCcu_CcuconRegConfig ccucon5;        /**< \brief CCUCON5 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   621      IfxScuCcu_CcuconRegConfig ccucon6;        /**< \brief CCUCON6 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   622      IfxScuCcu_CcuconRegConfig ccucon7;        /**< \brief CCUCON7 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   623      IfxScuCcu_CcuconRegConfig ccucon8;        /**< \brief CCUCON8 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   624      IfxScuCcu_CcuconRegConfig ccucon9;        /**< \brief CCUCON9 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   625      IfxScuCcu_CcuconRegConfig ccucon10;       /**< \brief CCUCON10 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   626      IfxScuCcu_CcuconRegConfig ccucon11;       /**< \brief CCUCON11 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   627  } IfxScuCcu_ClockDistributionConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   629  /** \brief Configuration structure type for the Pll Initial Step Configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   631  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   633      IfxScuCcu_pllsParameterConfig pllsParameters;       /**< \brief Configuration Parameters for both PLLs */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   634      float32                       waitTime;             /**< \brief Wait time for for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   635  } IfxScuCcu_InitialStepConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   637  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   638   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   639  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   640  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   641      uint8                              numOfSteps;       /**< \brief Number of PLL divider steps during clock throttling */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   642      IFX_CONST IfxScuCcu_PllStepConfig *pllSteps;         /**< \brief Pointer to the array of Pll divider step configuration. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   643  } IfxScuCcu_PllThrottleConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   644  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   645  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   647  /** \brief modulation config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   648   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   649  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   650  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   651      IfxScuCcu_ModEn               Mod_Enable;       /**< \brief modulation enable */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   652      IfxScuCcu_ModulationAmplitude Mod_Amp;          /**< \brief modulation amplitude */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   653  } IfxScuCcu_Mod_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   655  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   656   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   657  /** \brief Configuration structure SCU module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   658   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   659  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   660  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   661      IfxScuCcu_InitialStepConfig               pllInitialStepConfig;           /**< \brief Configuration of first step which is same as internal osc frequency. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   662      IfxScuCcu_PllThrottleConfig               sysPllThrottleConfig;           /**< \brief Configuration of PLL throttling. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   663      IfxScuCcu_ClockDistributionConfig         clockDistribution;              /**< \brief Configuration of of bus clocks and other module clock distribution. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   664      IFX_CONST IfxScuCcu_FlashWaitstateConfig *flashFconWaitStateConfig;       /**< \brief Configuration of flash waitstate */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   665      IFX_CONST IfxScuCcu_Mod_Config           *modulationConfig;               /**< \brief modulation configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   666  } IfxScuCcu_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   668  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   669  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   670  /** \brief structure holding the RGain parameters for modulation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   671   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   672  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   673  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   674      float32 RGainNom;       /**< \brief RGain Nominal value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   675      uint16  RGainHex;       /**< \brief RGain Hex value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   676  } IfxScuCcu_RGain_Values;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   678  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   679   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   680  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   681  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   682  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   683  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   684  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   685  /** \brief API to wait for requested duration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   686   * Note: IfxScuCcu_wait shall not use STM in future, because we can guarantee that STM is enabled after reset but  If PLL init is called for changing the frequency during runtime, there is no guarantee that STM is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   687   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   688   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   689  IFX_INLINE void IfxScuCcu_wait(float32 timeSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   690  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   691  /** \brief API to wait for requested duration along with watchdog service to avoid any reset case during startup of the chip.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   692   * Note: IfxScuCcu_wait shall not use STM in future, because we can guarantee that STM is enabled after reset but  If PLL init is called for changing the frequency during runtime, there is no guarantee that STM is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   693   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   694   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   695  IFX_INLINE void IfxScuCcu_waitWithWdtService(float32 timeSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   696  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   697  /** \brief API to configure the LPDIV value to enter into Low Power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   698   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   699   * Caution:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   700   * write to LPDIV with non-zero division ratio will cause system to enter low power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   701   * Low power mode will affect different SPBDIV and SRIDIV ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   703   * The original CCUCON0 ratios should be preserved by user prior to calling this function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   704   * The "normal" CCUCON0 ratios have to be passed to API: "IfxScuCcu_switchToNormalMode" to go back to the original division ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   705   * \param lpDiv Low Power Division Ratio
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   706   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   707   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   708  IFX_INLINE void IfxScuCcu_switchToLowPowerMode(IfxScuCcu_LowPowerDivRatio lpDiv);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   710  /** \brief API to switch back to normal mode from low power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   711   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   712   * Caution:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   713   * The original CCUCON0 setting has to be saved by user prior to entering Low Power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   714   * Pass the original CCUCON0 register as a whole word to this function to restore the normal settings.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   715   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   716   * Ramp back to normal mode is done in steps to avoid sudden jump in frequency and power usage.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   717   * \param ccucon0 CCUCON0 values at normal mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   718   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   720   * Switch to low power mode and back using iLLD functions as below
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   721   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   722   *     uint32 ccucon0 = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   723   *     IfxScuCcu_LowPowerDivRatio lpDiv = IfxScuCcu_LowPowerDivRatio_divBy30;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   724   *     IfxScuCcu_switchToLowPowerMode(lpDiv);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   725   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   726   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   727   * Switch back to normal mode  with the saved ccucon0 value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   728   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   729   *     IfxScuCcu_switchToNormalMode(ccucon0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   730   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   731   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   733  IFX_INLINE void IfxScuCcu_switchToNormalMode(const uint32 ccucon0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   735  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   736  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   737  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   738   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   739  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   740  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   741  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   742  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   743  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   744  /** \brief API to get ADAS divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   745   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   746   * \return ADAS frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   748  IFX_INLINE float32 IfxScuCcu_getAdasFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   750  /** \brief API to get Adc (EVADC, EDSADC)  frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   751   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   752   * \return Adc frequency (fADC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   753   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   754  IFX_INLINE float32 IfxScuCcu_getAdcFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   755  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   756  /** \brief API to get ASCLINF divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   757   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   758   * \return AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   759   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   760  IFX_INLINE float32 IfxScuCcu_getAsclinFFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   762  /** \brief API to get EBU frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   763   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   764   * \return EBU frequency (fEBU) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   765   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   766  IFX_INLINE float32 IfxScuCcu_getEbuFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   768  /** \brief API to get EVR Oscillator frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   769   * This API returns the constant which is specific to the ScuCcu of the controller.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   770   * \return EVR Oscillator frequency (fBACK or fEVR) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   771   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   772  IFX_INLINE float32 IfxScuCcu_getEvrFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   774  /** \brief API to get GETH divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   775   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   776   * \return GETH frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   777   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   778  IFX_INLINE float32 IfxScuCcu_getGethFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   780  /** \brief API to get GTMdivider frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   781   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   782   * return GTM frequency (fGTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   783   * \return Gtm Frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   784   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   785  IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   787  /** \brief API to get I2C frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   788   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   789   * \return I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   790   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   791  IFX_INLINE float32 IfxScuCcu_getI2cFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   792  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   793  /** \brief API to get MCANH divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   794   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   795   * \return MCANH frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   796   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   797  IFX_INLINE float32 IfxScuCcu_getMcanhFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   799  /** \brief API to get Oscillator 0 frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   800   * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   801   * \return Osc0 frequency (fOSC0) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   802   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   803  IFX_INLINE float32 IfxScuCcu_getOsc0Frequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   804  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   805  /** \brief API to get Oscillator 0 frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   806   * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   807   * \return Osc frequency (fOSC) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   808   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   809  IFX_INLINE float32 IfxScuCcu_getOscFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   811  /** \brief Returns the clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   812   * \return Clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   813   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   814  IFX_INLINE IfxScuCcu_PllInputClockSelection IfxScuCcu_getSourceSelection(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   816  /** \brief API to get STM divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   817   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   818   * \return STM frequency (fSTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   819   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   820  IFX_INLINE float32 IfxScuCcu_getStmFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   821  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   822  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   823  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   824  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   825  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   826  /** \brief API to get ASCLINS divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   827   * This API returns the ASCLINS frequency  based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   828   * \return AsclinS frequency (fASCLINS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   829   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   830  IFX_EXTERN float32 IfxScuCcu_getAsclinSFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   831  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   832  /** \brief API to get BBB divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   833   * This API returns the BBBDivider frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   834   * \return BBB frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   835   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   836  IFX_EXTERN float32 IfxScuCcu_getBbbFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   838  /** \brief This API returns the Cpu frequency based on the divider value in CCUCON register and fSource frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   839   * \param cpu CPU number for which effective fCPU is sought
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   840   * \return Cpu[x] frequency in Hz, where x is cpu number passed as parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   841   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   842  IFX_EXTERN float32 IfxScuCcu_getCpuFrequency(const IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   843  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   844  /** \brief API to get FSI2 divider frequency in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   845   * This API returns the fFSI2 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   846   * \return FSI2 frequency (fFSI2) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   847   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   848  IFX_EXTERN float32 IfxScuCcu_getFsi2Frequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   849  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   850  /** \brief API to get FSI divider frequency in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   851   * This API returns the fFSI based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   852   * \return FSI frequency (fFSI) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   853   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   854  IFX_EXTERN float32 IfxScuCcu_getFsiFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   855  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   856  /** \brief API to get MCAN divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   857   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   858   * \return Mcan frequency (fMCAN) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   859   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   860  IFX_EXTERN float32 IfxScuCcu_getMcanFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   861  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   862  /** \brief get source frequency fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   863   * This API returns the source frequency based on the configurations with CCUCON register configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   864   * \return Module frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   865   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   866  IFX_EXTERN float32 IfxScuCcu_getModuleFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   867  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   868  /** \brief API to get MSC divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   869   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   870   * \return Msc frequency (fMSC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   871   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   872  IFX_EXTERN float32 IfxScuCcu_getMscFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   873  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   874  /** \brief API to get actual PER PLL1  frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   875   * This API returns the PER PLL1 frequency based on the K2 divider value in PLLCON and the VCO frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   876   * Fpll1= (Fosc*N)/(P*K2)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   877   * \return PER PLL1 (K2 Divider) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   878   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   879  IFX_EXTERN float32 IfxScuCcu_getPerPllFrequency1(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   880  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   881  /** \brief API to get actual PER PLL2 (K3 Divider) frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   882   * This API returns the PER PLL2 frequency based on the K3 divider value in PLLCON and the VCO frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   883   * Fpll2= (Fosc*N)/(P*K3*1.6)  // DIVBY = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   884   * Fpll2= (Fosc*N)/(P*K3*2)  // DIVBY = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   885   * \return PER PLL2 (K3 Divider ) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   886   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   887  IFX_EXTERN float32 IfxScuCcu_getPerPllFrequency2(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   888  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   889  /** \brief API to get actual Sys PLL output frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   890   * This API returns the based on the divider values in CCUCON, PLLCON registers and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   891   * \return System Pll (fSysPLL) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   892   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   893  IFX_EXTERN float32 IfxScuCcu_getPllFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   894  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   895  /** \brief API to get Qspi divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   896   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   897   * \return Qspi frequency (fQspi) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   898   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   899  IFX_EXTERN float32 IfxScuCcu_getQspiFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   900  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   901  /** \brief get source frequency fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   902   * This API returns the source frequency based on the configurations with CCUCON register configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   903   * \param fsource fsource selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   904   * \return Effective fSOURCE in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   905   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   906  IFX_EXTERN float32 IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource fsource);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   907  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   908  /** \brief API to get SPB divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   909   * This API returns the based on fSOURCE and also on Low power divider mode and/or SPBDIV divider value in CCUCON registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   910   * \return SPB frequency (fSPB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   911   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   912  IFX_EXTERN float32 IfxScuCcu_getSpbFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   913  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   914  /** \brief API to get SRI divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   915   * This API returns the Sri frequency based on the divider values in CCUCON registers and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   916   * \return Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   917   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   918  IFX_EXTERN float32 IfxScuCcu_getSriFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   920  /** \brief API to set ADAS frequency (with ADAS divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   921   * This API configure adas divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   922   * \param adasFreq ADAS frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   923   * \return Actual Adas frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   924   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   925  IFX_EXTERN float32 IfxScuCcu_setAdasFrequency(float32 adasFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   926  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   927  /** \brief API to set ASCLINF frequency (with ASCLINF divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   928   * This API configure ASCLINF divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   929   * \param asclinFFreq AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   930   * \return Actual AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   931   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   932  IFX_EXTERN float32 IfxScuCcu_setAsclinFFrequency(float32 asclinFFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   933  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   934  /** \brief API to set ASCLINS frequency (with ASCLINS divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   935   * This API configure ASCLINS divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   936   * \param asclinSFreq Desired AscLinS frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   937   * \return Actual AsclinS frequency (fASCLINS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   938   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   939  IFX_EXTERN float32 IfxScuCcu_setAsclinSFrequency(float32 asclinSFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   940  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   941  /** \brief API to set BBB frequency (with Bbb divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   942   * This API configure Bbb divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   943   * \param bbbFreq Bbb frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   944   * \return Actual Bbb frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   945   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   946  IFX_EXTERN float32 IfxScuCcu_setBbbFrequency(float32 bbbFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   947  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   948  /** \brief API to set CPU frequency (with CPU divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   949   * This API configure CPU divider values in CCUCON registers. The actual frequency is always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   950   * \param cpu CPU number for which fCPU to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   951   * \param cpuFreq Desired CPU frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   952   * \return Actual CPU[x] frequency in Hz, where x is the cpu number passed as parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   953   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   954  IFX_EXTERN float32 IfxScuCcu_setCpuFrequency(IfxCpu_ResourceCpu cpu, float32 cpuFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   955  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   956  /** \brief API to set FSI2 frequency (with FSI2 divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   957   * This API configure Fsi2 divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   958   * \param fsi2Freq FSI2 frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   959   * \return Actual Fsi2 frequency (fFSI2) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   960   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   961  IFX_EXTERN float32 IfxScuCcu_setFsi2Frequency(float32 fsi2Freq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   962  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   963  /** \brief API to set FSI frequency (with FSI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   964   * This API configure Fsi divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   965   * \param fsiFreq FSI frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   966   * \return Actual Fsi frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   967   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   968  IFX_EXTERN float32 IfxScuCcu_setFsiFrequency(float32 fsiFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   969  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   970  /** \brief API to set GETH frequency (with GETH divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   971   * This API configure geth divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   972   * \param gethFreq GETH frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   973   * \return Actual Geth frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   974   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   975  IFX_EXTERN float32 IfxScuCcu_setGethFrequency(float32 gethFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   976  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   977  /** \brief API to set GTM frequency (with GTM divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   978   * This API configure GTM divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   979   * \param gtmFreq Desired GTM frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   980   * \return Actual GTM frequency in HZ
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   981   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   982  IFX_EXTERN float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   983  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   984  /** \brief API to set I2C frequency (with I2C divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   985   * This API configure adas divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   986   * \param i2cFreq I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   987   * \return Actual I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   988   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   989  IFX_EXTERN float32 IfxScuCcu_setI2cFrequency(float32 i2cFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   990  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   991  /** \brief API to set MCAN frequency (with MCAN divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   992   * This API configure MCAN divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   993   * \param mcanFreq Desired MSC frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   994   * \return Actual Mcan frequency (fMCAN) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   995   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   996  IFX_EXTERN float32 IfxScuCcu_setMcanFrequency(float32 mcanFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   997  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   998  /** \brief API to set MCANH frequency (with MCANH divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   999   * This API configure mcanh divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1000   * \param mcanhFreq MCANH frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1001   * \return Actual MCanh frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1002   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1003  IFX_EXTERN float32 IfxScuCcu_setMcanhFrequency(float32 mcanhFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1004  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1005  /** \brief API to set MSC frequency (with MSC divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1006   * This API configure MSC divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1007   * \param mscFreq Desired MSC frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1008   * \return Actual Msc frequency (fMSC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1009   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1010  IFX_EXTERN float32 IfxScuCcu_setMscFrequency(float32 mscFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1011  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1012  /** \brief API to set QSPI frequency (with QSPI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1013   * This API configure Qspi divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1014   * \param qspiFreq Desired QSPI frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1015   * \return Actual Qspi frequency (fQspi) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1016   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1017  IFX_EXTERN float32 IfxScuCcu_setQspiFrequency(float32 qspiFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1018  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1019  /** \brief API to set SPB frequency (with SPB divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1020   * This API configure SPB divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1021   * \param spbFreq Desired SPB frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1022   * \return Actual SPB frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1023   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1024  IFX_EXTERN float32 IfxScuCcu_setSpbFrequency(float32 spbFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1025  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1026  /** \brief API to set SRI frequency (with SRI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1027   * This API configure Sri divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1028   * \param sriFreq Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1029   * \return Actual Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1030   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1031  IFX_EXTERN float32 IfxScuCcu_setSriFrequency(float32 sriFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1032  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1033  /** \brief API to set STM frequency (with STM divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1034   * This API configure Stm divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1035   * \param stmFreq Stm frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1036   * \return Actual Stm frequency (fSTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1037   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1038  IFX_EXTERN float32 IfxScuCcu_setStmFrequency(float32 stmFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1039  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1040  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1041  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1042  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1043   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1044  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1045  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1046  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1047  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1048  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1049  /** \brief This inline function configures the Ccu SYS PLLs initial step and PER PLL.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1050   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1051  IFX_INLINE boolean IfxScuCcu_configureCcuInitialStep(const IfxScuCcu_InitialStepConfig *pllInitStepCfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1052  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1053  /** \brief Inlined API for clock distribution
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1054   * For each CCUCON register update the configured value with the mask.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1055   * \param clockDistributionConfig pointer to clock distribution structure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1056   * \return TRUE: Operation successful, FALSE: Operation Failure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1057   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1058  IFX_INLINE boolean IfxScuCcu_distributeClockInline(const IfxScuCcu_ClockDistributionConfig *clockDistributionConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1059  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1060  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1061  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1062  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1063  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1064  /** \brief API for clock distribution.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1065   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1066   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1067  IFX_EXTERN void IfxScuCcu_distributeClock(IfxScuCcu_ClockDistributionConfig *clockDistributionConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1068  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1069  /** \brief API to initialize the SCU Clock Control Unit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1070   * This API initialize the Sys PLL with ramp steps, BUS dividers and Per PLL for the configuration provided by the configuration structure.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1071   * FSyspll = (Fosc * Nsys)/(Psys * K2sys);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1072   * Fpll1= (Fosc * Nper)/(Pper * K2per);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1073   * Fpll2= (Fosc * Nper)/(Pper * K3per * 1.6); // if DIVBY = 0, else Fpll2= (Fosc * Nper)/(Pper * K3per * 2) // if DIVBY = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1074   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1075   * Note: Following SMU alarms are disabled before the PLL configuration and Enabled at the end of PLL lock in the function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1076   * PLL0,1,2 clock out of range frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1077   * PLL0,1 VCO loss of lock event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1078   * System PLL Oscillator Watchdog, input clock out of range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1079   * The application should store/restore these alarm configurations if required.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1080   * \param config Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1081   * \return Error status of the ScuCcu initialization process.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1082   * \retval TRUE: If an error occurred during initialization.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1083   * \retval FALSE: If initialization was successful.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1084   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1085  IFX_EXTERN boolean IfxScuCcu_init(const IfxScuCcu_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1086  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1087  /** \brief Initializes the clock configuration with default values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1088   * \param cfg Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1089   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1090   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1091  IFX_EXTERN void IfxScuCcu_initConfig(IfxScuCcu_Config *cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1092  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1093  /** \brief API to switch to Backup clock from the current PLL frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1094   * \param cfg Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1095   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1096   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1097  IFX_EXTERN void IfxScuCcu_switchToBackupClock(const IfxScuCcu_Config *cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1098  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1099  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1100  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1101  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1102  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1103  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1105  /** \brief Clear the trap status flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1106   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1107   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1108   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1109  IFX_INLINE void IfxScuCcu_clearTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1110  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1111  /** \brief Get trap disable flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1112   * \param cpuIndex Cpu index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1113   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1114   * \return Trap request can be generated or not.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1115   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1116  IFX_INLINE boolean IfxScuCcu_getTrapDisableFlag(IfxCpu_ResourceCpu cpuIndex, IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1117  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1118  /** \brief Get the trap status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1119   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1120   * \return Trap was requested or not.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1121   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1122  IFX_INLINE boolean IfxScuCcu_getTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1124  /** \brief Set the trap disable flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1125   * \param cpuIndex Cpu index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1126   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1127   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1129  IFX_INLINE void IfxScuCcu_setTrapDisableFlag(IfxCpu_ResourceCpu cpuIndex, IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1130  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1131  /** \brief Set the trap status flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1132   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1134   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1135  IFX_INLINE void IfxScuCcu_setTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1136  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1137  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1138   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1139  IFX_INLINE boolean IfxScuCcu_throttleSysPllClockInline(const IfxScuCcu_PllThrottleConfig *pllThrottleConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1140  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1141  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1142  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1143  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1145  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1146   * \param modamp modulation amplitude
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1147   * \param RGain_P RGain values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1148   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1149   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1150  IFX_EXTERN void IfxScuCcu_calRGainParameters(IfxScuCcu_ModulationAmplitude modamp, IfxScuCcu_RGain_Values *RGain_P);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1151  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1152  /** \brief initialize modulation parameters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1153   * \param Mod_Cfg modulation configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1156  IFX_EXTERN void IfxScuCcu_modulation_init(const IfxScuCcu_Mod_Config *Mod_Cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1157  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1158  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1159   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1160   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1161  IFX_EXTERN void IfxScuCcu_throttleSysPllClock(IfxScuCcu_PllThrottleConfig *pllThrottleConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1162  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1163  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1164  /*-------------------Global Exported Variables/Constants----------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1165  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1167  /** \brief maps to the IfxScuCcu_ModulationAmplitude enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1169  IFX_EXTERN IFX_CONST float32 IfxScuCcu_MA_percent[IfxScuCcu_ModulationAmplitude_count];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1170  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1171  /** \brief Configuration structure for SCU CCU driver.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1172   * The values of this structure are defined as # defined macros in the implementation of Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1173   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1174  IFX_EXTERN IFX_CONST IfxScuCcu_Config     IfxScuCcu_defaultClockConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1176  /** \brief default modulation config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1177   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1178  IFX_EXTERN IFX_CONST IfxScuCcu_Mod_Config IfxScuCcu_defaultModConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1179  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1180  IFX_EXTERN uint32                         IfxScuCcu_xtalFrequency;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1181  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1182  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1183  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1184  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1185  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1186  IFX_INLINE void IfxScuCcu_clearTrapStatusFlag(IfxScuCcu_Traprequest request)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1187  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1188      uint32 trapclear = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1189      SCU_TRAPCLR.U |= (trapclear << request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1190  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1193  IFX_INLINE boolean IfxScuCcu_configureCcuInitialStep(const IfxScuCcu_InitialStepConfig *pllInitStepCfg)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1194  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1195      uint8                                initError = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1196      uint16                               endinitSfty_pw;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1197  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1198      uint32                               timeoutCycleCount;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1199      const IfxScuCcu_pllsParameterConfig *pllsParamCfg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1200      pllsParamCfg   = &pllInitStepCfg->pllsParameters;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1201      /*get the watch-dog passwords for usage with this function*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1202      endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1203  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1204      /* Reset Safety ENDINIT, SCU_CCUCON registers are protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1205      IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1206  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1207      timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1208  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1209      while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1210      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1211          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1212      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1213  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1214      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1215          Ifx_SCU_CCUCON0 scuCcucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1216          scuCcucon0.U        = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1217          scuCcucon0.B.CLKSEL = 0; /*Select the EVR as fsource0/1/2 for the clock distribution */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1218          scuCcucon0.B.UP     = 1; /*Update the ccucon0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1219          SCU_CCUCON0.U       = scuCcucon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1220      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1221  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1222      timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1224      while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1225      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1226          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1227      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1229      /*Disable SMU Alarms */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1230      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1231          SMU_KEYS.U    = (uint32)0xBCU;        /* Enable access to SMU registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1232          SMU_AG8CF0.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1233          SMU_AG8CF1.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1234          SMU_AG8CF2.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1235          SMU_KEYS.U    = (uint32)0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1236      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1237  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1238      /* Power down the both the PLLs before configuring registers*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1239      /* Both the PLLs are powered down to be sure for asynchronous PLL registers update cause no glitches */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1240      SCU_SYSPLLCON0.B.PLLPWD = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1241      SCU_PERPLLCON0.B.PLLPWD = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1242  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1243      timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1244  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1245      while ((SCU_SYSPLLSTAT.B.PWDSTAT == 0) || (SCU_PERPLLSTAT.B.PWDSTAT == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1246      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1247          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1248      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1249  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1250      /* Now configure the oscillator, required oscillator mode is external crystal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1252      if ((pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fOsc0) || (pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fSysclk))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1253  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1254      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1255          Ifx_SCU_OSCCON scuOsccon;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1256          scuOsccon.U      = SCU_OSCCON.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1257  #if (IFX_CFG_SCU_EXT_CLOCK == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1258          scuOsccon.B.MODE = 2U;   /* external clock selected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1259  #else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1260          scuOsccon.B.MODE = 0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1261  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1262  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1263          scuOsccon.B.OSCVAL = (uint32)(pllsParamCfg->xtalFrequency / 1000000U) - 15; /*XTAL range 16MHz to 40MHz*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1264          /*Note: Oscillator Watchdog Reset (OSCRES) is not required when the PLLs are powered down*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1265          SCU_OSCCON.U       = scuOsccon.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1266      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1267  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1268      /* Configure the initial steps for the system PLL*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1269      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1270          Ifx_SCU_SYSPLLCON0 sysPllCon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1271          sysPllCon0.U       = SCU_SYSPLLCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1272          sysPllCon0.B.PDIV  = pllsParamCfg->sysPllConfig.pDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1273          sysPllCon0.B.NDIV  = pllsParamCfg->sysPllConfig.nDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1274          sysPllCon0.B.INSEL = pllsParamCfg->pllInputClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1275          SCU_SYSPLLCON0.U   = sysPllCon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1276      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1277  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1278      /* Configure the initial steps for the peripheral PLL*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1279      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1280          Ifx_SCU_PERPLLCON0 scuPerPllCon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1281          scuPerPllCon0.U       = SCU_PERPLLCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1282          scuPerPllCon0.B.DIVBY = pllsParamCfg->perPllConfig.k3DividerBypass;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1283          scuPerPllCon0.B.PDIV  = pllsParamCfg->perPllConfig.pDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1284          scuPerPllCon0.B.NDIV  = pllsParamCfg->perPllConfig.nDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1285          SCU_PERPLLCON0.U      = scuPerPllCon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1286      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1288      /* Power up the both the PLLs before configuring registers*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1289      SCU_SYSPLLCON0.B.PLLPWD = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1290      SCU_PERPLLCON0.B.PLLPWD = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1292      timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1294      while ((SCU_SYSPLLSTAT.B.PWDSTAT == 1) || (SCU_PERPLLSTAT.B.PWDSTAT == 1))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1295      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1296          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1297      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1298  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1299      timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1301      while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1302             (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1303             (SCU_PERPLLSTAT.B.K3RDY == 0U))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1304      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1305          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1306      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1307  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1308      SCU_SYSPLLCON1.B.K2DIV = pllsParamCfg->sysPllConfig.k2Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1309      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1310          Ifx_SCU_PERPLLCON1 scuPerPllCon1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1311          scuPerPllCon1.U       = SCU_PERPLLCON1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1312          scuPerPllCon1.B.K2DIV = pllsParamCfg->perPllConfig.k2Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1313          scuPerPllCon1.B.K3DIV = pllsParamCfg->perPllConfig.k3Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1314          SCU_PERPLLCON1.U      = scuPerPllCon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1315      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1316  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1317      timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1319      while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1320             (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1321             (SCU_PERPLLSTAT.B.K3RDY == 0U))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1322      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1323          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1324      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1325  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1326      /*Check if the OSC frequencies are in the limit*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1327      timeoutCycleCount = IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1329      while ((SCU_OSCCON.B.PLLLV == 0) && (SCU_OSCCON.B.PLLHV == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1330      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1331          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1332      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1333  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1334      /* Now start PLL locking for latest set values*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1335      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1336          SCU_SYSPLLCON0.B.RESLD = 1;             /* Restart Sys PLL lock detection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1337          SCU_PERPLLCON0.B.RESLD = 1;             /* Restart Per PLL lock detection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1338  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1339          timeoutCycleCount      = IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1340  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1341          while ((SCU_SYSPLLSTAT.B.LOCK == 0) || (SCU_PERPLLSTAT.B.LOCK == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1342          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1343              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1344          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1345      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1346      /*Enable SMU Alarms */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1347      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1348          SMU_KEYS.U = (uint32)0xBCU;           /* Enable access to SMU registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1349          SMU_CMD.U  = (uint32)0x00000005;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1350          SMU_AG8.U  = IFXSCUCCU_SMUALARM_MASK; /* Clear SMU Alarms*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1351          SMU_KEYS.U = (uint32)0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1352      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1353      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1354          Ifx_SCU_CCUCON0 scu_ccucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1355          scu_ccucon0.U        = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1356          scu_ccucon0.B.CLKSEL = 1; /*Select the PLLs for fsource0/1/2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1357          scu_ccucon0.B.UP     = 1; /*Update the ccucon0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1358  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1359          timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1360  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1361          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1362          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1363              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1364          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1365  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1366          SCU_CCUCON0.U     = scu_ccucon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1367  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1368          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1369  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1370          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1371          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1372              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1373          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1374      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1375  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1376      IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1377      return (boolean)initError;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1378  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1379  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1380  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1381  IFX_INLINE boolean IfxScuCcu_distributeClockInline(const IfxScuCcu_ClockDistributionConfig *clockDistributionConfig)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1382  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1383      uint16 endinitSfty_pw;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1384      uint32 timeoutCycleCount;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1385      uint32 initError = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1386  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1387      /*get the watch-dog passwords for usage with this function*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1388      endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1389  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1390      /* Reset Safety ENDINIT, SCU_CCUCON registers are protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1391      IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1393      /*Configure the clock distribution */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1394      {                                                    /*Write CCUCON0 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1395          Ifx_SCU_CCUCON0 ccucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1396          ccucon0.U         = SCU_CCUCON0.U & ~clockDistributionConfig->ccucon0.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1397          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1398          ccucon0.U        |= (clockDistributionConfig->ccucon0.mask & clockDistributionConfig->ccucon0.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1399          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1400  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1401          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1402          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1403              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1404          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1405  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1406          SCU_CCUCON0.U     = ccucon0.U;      /*Set update bit explicitly to make above configurations effective */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1407          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1408  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1409          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1410          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1411              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1412          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1413      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1414      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1415          /*Write CCUCON1 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1416          Ifx_SCU_CCUCON1 ccucon1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1417          ccucon1.U = SCU_CCUCON1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1419          if (ccucon1.B.CLKSELMCAN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1420              || ccucon1.B.CLKSELMSC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1421              || ccucon1.B.CLKSELQSPI)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1422          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1423              /* Non Zero ClockSel exists - set to Zero */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1424              /* CAUTION: this would briefly reset and set all clocks in CCUCON1! */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1425              ccucon1.U  = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1426              /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1427              ccucon1.U |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1428  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1429              /* set Clock selects to 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1430              ccucon1.B.CLKSELMCAN = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1431              ccucon1.B.CLKSELMSC  = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1432              ccucon1.B.CLKSELQSPI = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1434              timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1435  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1436              while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1437              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1438                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1439              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1441              SCU_CCUCON1.U     = ccucon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1442  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1443              timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1444  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1445              while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1446              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1447                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1448              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1449          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1450  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1451          ccucon1.U         = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1452          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1453          ccucon1.U        |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1454  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1455          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1456  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1457          while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1458          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1459              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1460          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1461  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1462          SCU_CCUCON1.U     = ccucon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1463  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1464          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1465  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1466          while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1467          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1468              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1469          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1470      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1472      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1473          /*Write CCUCON2 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1474          Ifx_SCU_CCUCON2 ccucon2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1475          ccucon2.U = SCU_CCUCON2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1477          if (ccucon2.B.CLKSELASCLINS)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1478          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1479              /* Non Zero ClockSel exists - set to Zero */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1480              /* CAUTION: this would briefly reset and set ASCLINS clock in CCUCON2! */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1481              ccucon2.U               = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1482              /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1483              ccucon2.U              |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1484  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1485              ccucon2.B.CLKSELASCLINS = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1486  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1487              timeoutCycleCount       = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1488  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1489              while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1490              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1491                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1492              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1494              SCU_CCUCON2.U     = ccucon2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1495  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1496              timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1497  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1498              while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1499              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1500                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1501              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1502          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1503  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1504          ccucon2.U         = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1505          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1506          ccucon2.U        |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1507  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1508          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1509  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1510          while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1511          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1512              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1513          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1514  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1515          SCU_CCUCON2.U     = ccucon2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1516  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1517          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1518  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1519          while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1520          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1521              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1522          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1523      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1524      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1525          /*Write CCUCON5 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1526          Ifx_SCU_CCUCON5 ccucon5;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1527          ccucon5.U         = SCU_CCUCON5.U & ~clockDistributionConfig->ccucon5.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1528          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1529          ccucon5.U        |= (clockDistributionConfig->ccucon5.mask & clockDistributionConfig->ccucon5.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1530          ccucon5.B.UP      = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1531          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1532  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1533          while (SCU_CCUCON5.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1534          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1535              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1536          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1538          SCU_CCUCON5.U     = ccucon5.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1539          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1541          while (SCU_CCUCON5.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1542          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1543              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1544          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1545      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1546      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1547          /*Write CCUCON6 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1548          Ifx_SCU_CCUCON6 ccucon6;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1549          ccucon6.U     = SCU_CCUCON6.U & ~clockDistributionConfig->ccucon6.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1550          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1551          ccucon6.U    |= (clockDistributionConfig->ccucon6.mask & clockDistributionConfig->ccucon6.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1552          SCU_CCUCON6.U = ccucon6.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1553      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1555      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1556          /*Write CCUCON7 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1557          Ifx_SCU_CCUCON7 ccucon7;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1558          ccucon7.U     = SCU_CCUCON7.U & ~clockDistributionConfig->ccucon7.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1559          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1560          ccucon7.U    |= (clockDistributionConfig->ccucon7.mask & clockDistributionConfig->ccucon7.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1561          SCU_CCUCON7.U = ccucon7.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1562      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1563  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1564      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1565          /*Write CCUCON8 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1566          Ifx_SCU_CCUCON8 ccucon8;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1567          ccucon8.U     = SCU_CCUCON8.U & ~clockDistributionConfig->ccucon8.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1568          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1569          ccucon8.U    |= (clockDistributionConfig->ccucon8.mask & clockDistributionConfig->ccucon8.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1570          SCU_CCUCON8.U = ccucon8.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1571      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1572      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1573          /*Write CCUCON9 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1574          Ifx_SCU_CCUCON9 ccucon9;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1575          ccucon9.U     = SCU_CCUCON9.U & ~clockDistributionConfig->ccucon9.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1576          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1577          ccucon9.U    |= (clockDistributionConfig->ccucon9.mask & clockDistributionConfig->ccucon9.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1578          SCU_CCUCON9.U = ccucon9.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1579      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1580      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1581          /*Write CCUCON10 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1582          Ifx_SCU_CCUCON10 ccucon10;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1583          ccucon10.U     = SCU_CCUCON10.U & ~clockDistributionConfig->ccucon10.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1584          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1585          ccucon10.U    |= (clockDistributionConfig->ccucon10.mask & clockDistributionConfig->ccucon10.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1586          SCU_CCUCON10.U = ccucon10.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1587      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1588      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1589          /*Write CCUCON11 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1590          Ifx_SCU_CCUCON11 ccucon11;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1591          ccucon11.U     = SCU_CCUCON11.U & ~clockDistributionConfig->ccucon11.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1592          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1593          ccucon11.U    |= (clockDistributionConfig->ccucon11.mask & clockDistributionConfig->ccucon11.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1594          SCU_CCUCON11.U = ccucon11.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1595      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1596      IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1597      return (boolean)initError;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1598  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1599  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1600  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1601  IFX_INLINE float32 IfxScuCcu_getAdasFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1602  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1603      uint32 adasDiv = SCU_CCUCON5.B.ADASDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1604  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1605      return (adasDiv == (uint32)0) ? 0 : IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / adasDiv;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1606  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1607  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1609  IFX_INLINE float32 IfxScuCcu_getAdcFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1610  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1611      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1612  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1615  IFX_INLINE float32 IfxScuCcu_getAsclinFFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1616  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1617      float32 freq          = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1618  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1619      uint8   asclindiv[16] = {1, 1, 2, 3, 4, 5, 6, 6, 8, 8, 10, 10, 12, 12, 12, 15};
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1620  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1621      if (SCU_CCUCON2.B.ASCLINFDIV)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1622      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1623          freq = IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_2) / asclindiv[SCU_CCUCON2.B.ASCLINFDIV];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1624      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1625  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1626      return freq;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1627  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1629  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1630  IFX_INLINE float32 IfxScuCcu_getEbuFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1631  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1632      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1633  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1635  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1636  IFX_INLINE float32 IfxScuCcu_getEvrFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1637  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1638      return IFXSCU_EVR_OSC_FREQUENCY;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1639  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1641  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1642  IFX_INLINE float32 IfxScuCcu_getGethFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1643  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1644      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON5.B.GETHDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1645  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1647  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1648  IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1649  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1650      /* fGTM = fSOURCEGTM / GTMDIV ;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1651       * fSOURCEGTM = fSPB *2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1652       */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1653      uint8   gtmDiv  = SCU_CCUCON0.B.GTMDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1654      float32 gtmFreq = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1656      if (gtmDiv == 0u)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1657      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1658          gtmFreq = 0.0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1659      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1660      else if (gtmDiv == 1U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1661      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1662          gtmFreq = IfxScuCcu_getSpbFrequency() * 2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1663      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1664      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1665  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1666      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1667          gtmFreq = IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / gtmDiv;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1668      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1669  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1670      return gtmFreq;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1671  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1672  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1674  IFX_INLINE float32 IfxScuCcu_getI2cFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1675  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1676      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_2) / SCU_CCUCON1.B.I2CDIV;
	mov	d4,#2
	call	IfxScuCcu_getSourceFrequency
.L410:
	fcall	.cocofun_15
.L317:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   264  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   265      float32 fKernel = IfxScuCcu_getI2cFrequency();
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   266      uint8   rmc     = i2c->CLC1.B.RMC;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   267      float32 dec;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   268  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   269      if (baudrate > 400000)                              // for High Speed mode
	ld.w	d9,.10.cnt
.L319:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     2   * \file IfxScuCcu.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    42   * \defgroup IfxLld_Scu SCU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    43   * \addtogroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    44   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    45   * \defgroup IfxLld_ScuCcu How to use the Scu Clock driver?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    46   * \addtogroup IfxLld_ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    47   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    48   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    49   * The Scu Clock control unit driver provides a default configuration for pll and Clock initialisation and set of peripheral clock configuration functions.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    51   * In the following sections it will be described, how to integrate the driver into the application framework.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    52   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    53   * \section IfxLld_ScuCcu_Std_Preparation Preparation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    54   * \subsection IfxLld_ScuCcu_Std_Include Include Files
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    55   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    56   * Include following header file into your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    57   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    58   * #include <Scu/Std/IfxScuCcu.h>
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    59   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    60   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    61   * \subsection IfxLld_ScuCcu_Std_Variables Variables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    62   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    63   * Declare the Clock Configuration variables in your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    64   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    65   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    66   * // used globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    67   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    68   * // configuration for the PLL  steps
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    69   * static IfxScuCcu_PllStepsConfig IfxScuCcu_testPllConfigSteps[] = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    70   *     IFXSCU_CFG_PLL_STEPS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    71   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    72   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    73   * static const IfxScuCcu_FlashWaitstateConfig IfxScuCcu_defaultFlashWaitstateConfig = IFXSCU_CFG_FLASH_WAITSTATE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    74   * // Default configuration for the Clock Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    75   * IfxScuCcu_Config                      IfxScuCcu_testClockConfig = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    76   *     // IfxScuCcu_InitialStepConfig: Configuration of first step which is same as internal osc frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    77   *     IFXSCU_CFG_PLL_INITIAL_STEP,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    78   *     //IfxScuCcu_PllThrottleConfig: Configuration of PLL throttling.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    79   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    80   *         sizeof(IfxScuCcu_defaultPllConfigSteps) / sizeof(IfxScuCcu_PllStepConfig),
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    81   *         IfxScuCcu_defaultPllConfigSteps
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    82   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    83   *     IFXSCU_CFG_CLK_DISTRIBUTION,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    84   *     &IfxScuCcu_defaultFlashWaitstateConfig,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    85   *     &IfxScuCcu_defaultModConfig
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    86   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    87   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    88   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    89   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    90   * \subsection IfxLld_ScuCcu_Std_Init Module Initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    91   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    92   * The module initialisation can be done in the same function. Here an example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    93   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    94   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    95   *        // standard PLL & clock initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    96   *         IfxScuCcu_init(&IfxScuCcu_testClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    97   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    99   *    The SYS PLL, PER PLL1 , PLL2 and clocks are now initialised based on the XTAL and PLL values configured in Ifx_Cfg.h and are ready for use now!
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   100   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   101   * Alternately the PLL and clocks can be initialised using below method which provides greater control on the configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   102   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   103   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   104   * static const IfxScuCcu_PllStepConfig IfxScuCcu_defaultPllConfigSteps[] = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   105   *     {                   //Step 0 Config: 150MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   106   *         (4 - 1),        //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   107   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   108   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   109   *     {                   //Step 1 Config: 200MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   110   *         (3 - 1),       //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   111   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   112   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   113   *     {                   //Step 2 Config: 300MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   114   *         (2 - 1),        //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   115   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   116   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   117   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   118   *     IfxScuCcu_Config        IfxScuCcu_sampleClockConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   119   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   120   *     IfxScuCcu_initConfig(&IfxScuCcu_sampleClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   121   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   122   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   123   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   124   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.pllInputClockSelection = IfxScuCcu_PllInputClockSelection_fOsc0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   126   *     //SYS PLL = 300Mhz, XTAL = 20Mhz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   127   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.k2Divider = IfxScuCcu_K2divider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   128   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.nDivider = IfxScuCcu_Ndivider_60;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   129   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.pDivider = IfxScuCcu_Pdivider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   130   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.waitTime = 0.000200F;  // wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   131   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   132   *     IfxScuCcu_sampleClockConfig.sysPllThrottleConfig.numOfSteps = sizeof(IfxScuCcu_defaultPllConfigSteps) / sizeof(IfxScuCcu_PllStepConfig); //  step clock incr
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   133   *     IfxScuCcu_sampleClockConfig.sysPllThrottleConfig.pllSteps = IfxScuCcu_defaultPllConfigSteps;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   135   *     // PER PLL1 = 240Mhz, PERPLL2 = 50Mhz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   136   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k2Divider = IfxScuCcu_K2divider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   137   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k3Divider = IfxScuCcu_K3divider_6;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   138   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k3DividerBypass = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   139   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.nDivider = IfxScuCcu_Ndivider_24;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   140   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.pDivider = IfxScuCcu_Pdivider_1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   142   *     // update CCUCON Config use mask and value as below
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   143   *     IfxScuCcu_sampleClockConfig.clockDistribution.ccucon0.mask =IFXSCU_CFG_CCUCON0_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   144   *     IfxScuCcu_sampleClockConfig.clockDistribution.ccucon0.value = IFXSCU_CFG_CCUCON0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   146   *     // standard PLL & clock initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   147   *     IfxScuCcu_init(&IfxScuCcu_sampleClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   149   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   150   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   151   * ** Modulation Configuration **
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   152   * The SCU CCU module also provides an option to Frequency Modulate the clock.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   153   * The Modulation configuration can be done as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   154   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   155   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   156   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   157   * //define your modulation configuration structure:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   158   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   159   *  IFX_CONST IfxScuCcu_Mod_Config IfxScuCcu_SampleModConfig = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   160   *          IfxScuCcu_ModEn_disabled,          // disable is default //enable / disable modulation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   161   *          IfxScuCcu_ModulationAmplitude_0p5, // default 0 value  // specify the modulation amplitude %
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   162   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   163   *  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   164   *  // put this as part of the CCU configuration:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   165   *  IfxScuCcu_sampleClockConfig.modulationConfig = &IfxScuCcu_SampleModConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   166   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   167   *  // now initalize the CCU PLL and clock with the init function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   168   *  IfxScuCcu_init(&IfxScuCcu_sampleClockConfig)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   169   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   171   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   172   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   173   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   174   * \defgroup IfxLld_Scu_Std_Ccu Ccu Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   175   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   176   * \defgroup IfxLld_Scu_Std_Ccu_Ccu Clock Control Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   177   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   178   * \defgroup IfxLld_Scu_Std_Ccu_Ccu_Operative Clock Control Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   179   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   180   * \defgroup IfxLld_Scu_Std_Ccu_Ccu_Configuration Clock Control Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   181   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   182   * \defgroup IfxLld_Scu_Std_Ccu_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   183   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   185  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   186  #ifndef IFXSCUCCU_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   187  #define IFXSCUCCU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   188  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   189  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   190  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   191  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   193  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   194  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   195  #include "Cpu/Std/IfxCpu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   196  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   197  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   198  #include "_PinMap/IfxScu_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   199  #include "IfxSmu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   200  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   201  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   202  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   203  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   205  /** \brief Oscillator stability check timeout count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   207  #ifndef IFXSCUCCU_OSC_STABLECHK_TIME
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   208  #define IFXSCUCCU_OSC_STABLECHK_TIME               (640)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   209  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   210  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   211  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   213  #define IFXSCUCCU_SMUALARM_MASK                    (0x1DU)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   215  /** \brief ~40uS max wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   216   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   217  #ifndef IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   218  #define IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT     (0x1000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   219  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   221  /** \brief ~122uS max wait time for PLL locking
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   223  #define IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT           (0x3000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   224  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   225  /** \brief ~122uS max wait time for PLL power down/up state update
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   227  #define IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT (0x3000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   229  /** \brief ~244uS max wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   230   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   231  #define IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT           (0x6000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   233  /** \brief 3mS max wait time for PLL power down/up state update
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   235  #define IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT (0x493E0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   237  #define IFXSCUCCU_LOOP_TIMEOUT_CHECK(tVar, tErr) \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   238      {                                            \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   239          if (((sint32)--tVar) <= 0)               \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   240          {                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   241              tErr = (uint8)1;                     \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   242              break;                               \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   243          }                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   244          else                                     \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   245          {                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   246          }                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   247      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   248  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   249  /** \brief Modulation frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   250   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   251  #define IFXSCUCCU_MODULATION_FREQ_HZ               (3600000)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   253  /** \brief MODCFG shift value for SYSPLLCON2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   255  #define IFXSCUCCU_MODCFG_DEFAULT_SHIFT             (10)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   257  /** \brief MODCFG default value - for SYSPLLCON2[15:10]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   259  #define IFXSCUCCU_MODCFG_DEFAULT_VAL               ((uint32)0x3D)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   261  /** \brief get Rgain from MA and FDco
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   263  #define IFXSCUCCU_GET_RGAIN_NOM(MA, FDco)  ((2 * (MA / 100) * (FDco / IFXSCUCCU_MODULATION_FREQ_HZ)))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   265  /** \brief Get RGAin HEX from RGain Nominal value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   266   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   267  #define IFXSCUCCU_GET_RGAIN_HEX(RGain_Nom) ((uint16)((RGain_Nom * 32) + 0.5))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   269  /** \brief Get MODCFG from RGAIN_HEX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   271  #define IFXSCUCCU_GET_MODCFG(RGain_Hex)    ((uint16)(IFXSCUCCU_MODCFG_DEFAULT_VAL << IFXSCUCCU_MODCFG_DEFAULT_SHIFT) | (uint16)(RGain_Hex))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   273  /** \brief Define to include the flash wait state check in ScuCcu_init()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   275  #define IFXSCUCCU_FLASHWAITSTATECHECK (0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   277  /** \brief 10 microsecond wait time between steps to jump back to normal mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   278   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   279  #ifndef IFXSCUCCU_LPTONORMAL_WAITTIME
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   280  #define IFXSCUCCU_LPTONORMAL_WAITTIME (0.00001f)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   281  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   283  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   284  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   285  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   287  /** \brief Function pointer type for the hooks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   288   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   290  typedef void (*IfxScuCcu_PllStepsFunctionHook)(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   292  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   293  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   294  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   295  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   296  /** \addtogroup IfxLld_Scu_Std_Ccu_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   297   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   298  /** \brief clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   299   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   300  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   301  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   302      IfxScuCcu_Fsource_0 = 0,      /**< \brief fSource0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   303      IfxScuCcu_Fsource_1,          /**< \brief fSource1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   304      IfxScuCcu_Fsource_2           /**< \brief fSource2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   305  } IfxScuCcu_Fsource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   307  /** \brief MODULE_SCU.PLLCON1.B.K2DIV, specifies the K2-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   308   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   309  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   310  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   311      IfxScuCcu_K2divider_1 = 0,      /**< \brief K2-Divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   312      IfxScuCcu_K2divider_2,          /**< \brief K2-Divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   313      IfxScuCcu_K2divider_3,          /**< \brief K2-Divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   314      IfxScuCcu_K2divider_4,          /**< \brief K2-Divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   315      IfxScuCcu_K2divider_5,          /**< \brief K2-Divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   316      IfxScuCcu_K2divider_6,          /**< \brief K2-Divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   317      IfxScuCcu_K2divider_7,          /**< \brief K2-Divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   318      IfxScuCcu_K2divider_8           /**< \brief K2-Divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   319  } IfxScuCcu_K2divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   321  /** \brief MODULE_SCU.PLLCON1.B.K3DIV, specifies the K3-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   322   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   323  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   324  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   325      IfxScuCcu_K3divider_1 = 0,      /**< \brief K3-Divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   326      IfxScuCcu_K3divider_2,          /**< \brief K3-Divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   327      IfxScuCcu_K3divider_3,          /**< \brief K3-Divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   328      IfxScuCcu_K3divider_4,          /**< \brief K3-Divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   329      IfxScuCcu_K3divider_5,          /**< \brief K3-Divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   330      IfxScuCcu_K3divider_6,          /**< \brief K3-Divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   331      IfxScuCcu_K3divider_7,          /**< \brief K3-Divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   332      IfxScuCcu_K3divider_8           /**< \brief K3-Divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   333  } IfxScuCcu_K3divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   334  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   335  /** \brief Low Power Division Ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   336   * Corresponds to values of LPDIV in CCUCON0.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   337   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   338  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   339  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   340      IfxScuCcu_LowPowerDivRatio_divBy30 = 1,  /**< \brief Divide by 30 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   341      IfxScuCcu_LowPowerDivRatio_divBy60,      /**< \brief Divide by 60 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   342      IfxScuCcu_LowPowerDivRatio_divBy120,     /**< \brief Divide by 120 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   343      IfxScuCcu_LowPowerDivRatio_divBy240      /**< \brief Divide by 240 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   344  } IfxScuCcu_LowPowerDivRatio;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   346  /** \brief ENUM for MA (%) values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   347   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   348  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   349  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   350      IfxScuCcu_ModulationAmplitude_0p5 = 0,      /**< \brief 0.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   351      IfxScuCcu_ModulationAmplitude_1p0,          /**< \brief 1.0%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   352      IfxScuCcu_ModulationAmplitude_1p25,         /**< \brief 1.25%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   353      IfxScuCcu_ModulationAmplitude_1p5,          /**< \brief 1.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   354      IfxScuCcu_ModulationAmplitude_2p0,          /**< \brief 2%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   355      IfxScuCcu_ModulationAmplitude_2p5,          /**< \brief 2.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   356      IfxScuCcu_ModulationAmplitude_count,        /**< \brief range  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   357  } IfxScuCcu_ModulationAmplitude;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   358  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   359  /** \brief MODULE_SCU.PLLCON0.B.NDIV, specifies the N-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   361  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   362  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   363      IfxScuCcu_Ndivider_1 = 0,      /**< \brief  N-divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   364      IfxScuCcu_Ndivider_2,          /**< \brief  N-divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   365      IfxScuCcu_Ndivider_3,          /**< \brief  N-divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   366      IfxScuCcu_Ndivider_4,          /**< \brief  N-divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   367      IfxScuCcu_Ndivider_5,          /**< \brief  N-divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   368      IfxScuCcu_Ndivider_6,          /**< \brief  N-divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   369      IfxScuCcu_Ndivider_7,          /**< \brief  N-divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   370      IfxScuCcu_Ndivider_8,          /**< \brief  N-divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   371      IfxScuCcu_Ndivider_9,          /**< \brief  N-divider 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   372      IfxScuCcu_Ndivider_10,         /**< \brief  N-divider 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   373      IfxScuCcu_Ndivider_11,         /**< \brief  N-divider 11  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   374      IfxScuCcu_Ndivider_12,         /**< \brief  N-divider 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   375      IfxScuCcu_Ndivider_13,         /**< \brief  N-divider 13  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   376      IfxScuCcu_Ndivider_14,         /**< \brief  N-divider 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   377      IfxScuCcu_Ndivider_15,         /**< \brief  N-divider 15  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   378      IfxScuCcu_Ndivider_16,         /**< \brief  N-divider 16  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   379      IfxScuCcu_Ndivider_17,         /**< \brief  N-divider 17  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   380      IfxScuCcu_Ndivider_18,         /**< \brief  N-divider 18  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   381      IfxScuCcu_Ndivider_19,         /**< \brief  N-divider 19  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   382      IfxScuCcu_Ndivider_20,         /**< \brief  N-divider 20  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   383      IfxScuCcu_Ndivider_21,         /**< \brief  N-divider 21  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   384      IfxScuCcu_Ndivider_22,         /**< \brief  N-divider 22  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   385      IfxScuCcu_Ndivider_23,         /**< \brief  N-divider 23  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   386      IfxScuCcu_Ndivider_24,         /**< \brief  N-divider 24  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   387      IfxScuCcu_Ndivider_25,         /**< \brief  N-divider 25  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   388      IfxScuCcu_Ndivider_26,         /**< \brief  N-divider 26  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   389      IfxScuCcu_Ndivider_27,         /**< \brief  N-divider 27  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   390      IfxScuCcu_Ndivider_28,         /**< \brief  N-divider 28  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   391      IfxScuCcu_Ndivider_29,         /**< \brief  N-divider 29  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   392      IfxScuCcu_Ndivider_30,         /**< \brief  N-divider 30  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   393      IfxScuCcu_Ndivider_31,         /**< \brief  N-divider 31  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   394      IfxScuCcu_Ndivider_32,         /**< \brief  N-divider 32  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   395      IfxScuCcu_Ndivider_33,         /**< \brief  N-divider 33  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   396      IfxScuCcu_Ndivider_34,         /**< \brief  N-divider 34  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   397      IfxScuCcu_Ndivider_35,         /**< \brief  N-divider 35  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   398      IfxScuCcu_Ndivider_36,         /**< \brief  N-divider 36  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   399      IfxScuCcu_Ndivider_37,         /**< \brief  N-divider 37  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   400      IfxScuCcu_Ndivider_38,         /**< \brief  N-divider 38  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   401      IfxScuCcu_Ndivider_39,         /**< \brief  N-divider 39  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   402      IfxScuCcu_Ndivider_40,         /**< \brief  N-divider 40  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   403      IfxScuCcu_Ndivider_41,         /**< \brief  N-divider 41  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   404      IfxScuCcu_Ndivider_42,         /**< \brief  N-divider 42  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   405      IfxScuCcu_Ndivider_43,         /**< \brief  N-divider 43  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   406      IfxScuCcu_Ndivider_44,         /**< \brief  N-divider 44  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   407      IfxScuCcu_Ndivider_45,         /**< \brief  N-divider 45  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   408      IfxScuCcu_Ndivider_46,         /**< \brief  N-divider 46  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   409      IfxScuCcu_Ndivider_47,         /**< \brief  N-divider 47  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   410      IfxScuCcu_Ndivider_48,         /**< \brief  N-divider 48  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   411      IfxScuCcu_Ndivider_49,         /**< \brief  N-divider 49  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   412      IfxScuCcu_Ndivider_50,         /**< \brief  N-divider 50  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   413      IfxScuCcu_Ndivider_51,         /**< \brief  N-divider 51  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   414      IfxScuCcu_Ndivider_52,         /**< \brief  N-divider 52  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   415      IfxScuCcu_Ndivider_53,         /**< \brief  N-divider 53  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   416      IfxScuCcu_Ndivider_54,         /**< \brief  N-divider 54  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   417      IfxScuCcu_Ndivider_55,         /**< \brief  N-divider 55  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   418      IfxScuCcu_Ndivider_56,         /**< \brief  N-divider 56  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   419      IfxScuCcu_Ndivider_57,         /**< \brief  N-divider 57  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   420      IfxScuCcu_Ndivider_58,         /**< \brief  N-divider 58  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   421      IfxScuCcu_Ndivider_59,         /**< \brief  N-divider 59  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   422      IfxScuCcu_Ndivider_60,         /**< \brief  N-divider 60  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   423      IfxScuCcu_Ndivider_61,         /**< \brief  N-divider 61  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   424      IfxScuCcu_Ndivider_62,         /**< \brief  N-divider 62  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   425      IfxScuCcu_Ndivider_63,         /**< \brief  N-divider 63  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   426      IfxScuCcu_Ndivider_64,         /**< \brief  N-divider 64  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   427      IfxScuCcu_Ndivider_65,         /**< \brief  N-divider 65  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   428      IfxScuCcu_Ndivider_66,         /**< \brief  N-divider 66  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   429      IfxScuCcu_Ndivider_67,         /**< \brief  N-divider 67  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   430      IfxScuCcu_Ndivider_68,         /**< \brief  N-divider 68  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   431      IfxScuCcu_Ndivider_69,         /**< \brief  N-divider 69  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   432      IfxScuCcu_Ndivider_70,         /**< \brief  N-divider 70  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   433      IfxScuCcu_Ndivider_71,         /**< \brief  N-divider 71  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   434      IfxScuCcu_Ndivider_72,         /**< \brief  N-divider 72  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   435      IfxScuCcu_Ndivider_73,         /**< \brief  N-divider 73  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   436      IfxScuCcu_Ndivider_74,         /**< \brief  N-divider 74  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   437      IfxScuCcu_Ndivider_75,         /**< \brief  N-divider 75  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   438      IfxScuCcu_Ndivider_76,         /**< \brief  N-divider 76  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   439      IfxScuCcu_Ndivider_77,         /**< \brief  N-divider 77  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   440      IfxScuCcu_Ndivider_78,         /**< \brief  N-divider 78  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   441      IfxScuCcu_Ndivider_79,         /**< \brief  N-divider 79  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   442      IfxScuCcu_Ndivider_80,         /**< \brief  N-divider 80  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   443      IfxScuCcu_Ndivider_81,         /**< \brief  N-divider 81  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   444      IfxScuCcu_Ndivider_82,         /**< \brief  N-divider 82  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   445      IfxScuCcu_Ndivider_83,         /**< \brief  N-divider 83  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   446      IfxScuCcu_Ndivider_84,         /**< \brief  N-divider 84  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   447      IfxScuCcu_Ndivider_85,         /**< \brief  N-divider 85  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   448      IfxScuCcu_Ndivider_86,         /**< \brief  N-divider 86  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   449      IfxScuCcu_Ndivider_87,         /**< \brief  N-divider 87  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   450      IfxScuCcu_Ndivider_88,         /**< \brief  N-divider 88  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   451      IfxScuCcu_Ndivider_89,         /**< \brief  N-divider 89  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   452      IfxScuCcu_Ndivider_90,         /**< \brief  N-divider 90  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   453      IfxScuCcu_Ndivider_91,         /**< \brief  N-divider 91  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   454      IfxScuCcu_Ndivider_92,         /**< \brief  N-divider 92  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   455      IfxScuCcu_Ndivider_93,         /**< \brief  N-divider 93  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   456      IfxScuCcu_Ndivider_94,         /**< \brief  N-divider 94  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   457      IfxScuCcu_Ndivider_95,         /**< \brief  N-divider 95  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   458      IfxScuCcu_Ndivider_96,         /**< \brief  N-divider 96  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   459      IfxScuCcu_Ndivider_97,         /**< \brief  N-divider 97  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   460      IfxScuCcu_Ndivider_98,         /**< \brief  N-divider 98  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   461      IfxScuCcu_Ndivider_99,         /**< \brief  N-divider 99  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   462      IfxScuCcu_Ndivider_100,        /**< \brief  N-divider 100  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   463      IfxScuCcu_Ndivider_101,        /**< \brief  N-divider 101  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   464      IfxScuCcu_Ndivider_102,        /**< \brief  N-divider 102  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   465      IfxScuCcu_Ndivider_103,        /**< \brief  N-divider 103  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   466      IfxScuCcu_Ndivider_104,        /**< \brief  N-divider 104  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   467      IfxScuCcu_Ndivider_105,        /**< \brief  N-divider 105  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   468      IfxScuCcu_Ndivider_106,        /**< \brief  N-divider 106  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   469      IfxScuCcu_Ndivider_107,        /**< \brief  N-divider 107  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   470      IfxScuCcu_Ndivider_108,        /**< \brief  N-divider 108  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   471      IfxScuCcu_Ndivider_109,        /**< \brief  N-divider 109  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   472      IfxScuCcu_Ndivider_110,        /**< \brief  N-divider 110  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   473      IfxScuCcu_Ndivider_111,        /**< \brief  N-divider 111  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   474      IfxScuCcu_Ndivider_112,        /**< \brief  N-divider 112  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   475      IfxScuCcu_Ndivider_113,        /**< \brief  N-divider 113  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   476      IfxScuCcu_Ndivider_114,        /**< \brief  N-divider 114  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   477      IfxScuCcu_Ndivider_115,        /**< \brief  N-divider 115  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   478      IfxScuCcu_Ndivider_116,        /**< \brief  N-divider 116  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   479      IfxScuCcu_Ndivider_117,        /**< \brief  N-divider 117  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   480      IfxScuCcu_Ndivider_118,        /**< \brief  N-divider 118  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   481      IfxScuCcu_Ndivider_119,        /**< \brief  N-divider 119  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   482      IfxScuCcu_Ndivider_120,        /**< \brief  N-divider 120  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   483      IfxScuCcu_Ndivider_121,        /**< \brief  N-divider 121  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   484      IfxScuCcu_Ndivider_122,        /**< \brief  N-divider 122  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   485      IfxScuCcu_Ndivider_123,        /**< \brief  N-divider 123  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   486      IfxScuCcu_Ndivider_124,        /**< \brief  N-divider 124  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   487      IfxScuCcu_Ndivider_125,        /**< \brief  N-divider 125  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   488      IfxScuCcu_Ndivider_126,        /**< \brief  N-divider 126  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   489      IfxScuCcu_Ndivider_127,        /**< \brief  N-divider 127  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   490      IfxScuCcu_Ndivider_128         /**< \brief  N-divider 128  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   491  } IfxScuCcu_Ndivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   492  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   493  /** \brief MODULE_SCU.PLLCON0.B.PDIV, specifies the P-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   495  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   496  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   497      IfxScuCcu_Pdivider_1 = 0,      /**< \brief  P-divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   498      IfxScuCcu_Pdivider_2,          /**< \brief  P-divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   499      IfxScuCcu_Pdivider_3,          /**< \brief  P-divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   500      IfxScuCcu_Pdivider_4,          /**< \brief  P-divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   501      IfxScuCcu_Pdivider_5,          /**< \brief  P-divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   502      IfxScuCcu_Pdivider_6,          /**< \brief  P-divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   503      IfxScuCcu_Pdivider_7,          /**< \brief  P-divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   504      IfxScuCcu_Pdivider_8           /**< \brief  P-divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   505  } IfxScuCcu_Pdivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   506  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   507  /** \brief SysPll & Per Pll input clock selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   508   * SYSPLLCON0.B.INSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   509   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   510  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   511  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   512      IfxScuCcu_PllInputClockSelection_fOsc1   = 0, /**< \brief Backup clock select */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   513      IfxScuCcu_PllInputClockSelection_fOsc0   = 1, /**< \brief fOsc0 or XTAL clock select */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   514      IfxScuCcu_PllInputClockSelection_fSysclk = 2  /**< \brief fOsc1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   515  } IfxScuCcu_PllInputClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   516  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   517  /** \brief trap request type
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   518   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   519  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   520  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   521      IfxScuCcu_Traprequest_esr0 = 0,  /**< \brief external service request 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   522      IfxScuCcu_Traprequest_esr1,      /**< \brief external service request 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   523      IfxScuCcu_Traprequest_trap2,     /**< \brief trap2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   524      IfxScuCcu_Traprequest_smu        /**< \brief safety management unit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   525  } IfxScuCcu_Traprequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   526  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   527  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   528  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   529  /** \brief modulation enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   530   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   531  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   532  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   533      IfxScuCcu_ModEn_disabled = 0,  /**< \brief disable modulation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   534      IfxScuCcu_ModEn_enabled  = 1   /**< \brief enable modulation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   535  } IfxScuCcu_ModEn;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   537  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   538  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   539  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   541  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   542   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   543  /** \brief Configuration structure type for the Per Pll step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   544   * This structure must be used to configure the P, N and K2, K3 dividers .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   545   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   546  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   547  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   548      uint8 pDivider;              /**< \brief P divider value for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   549      uint8 nDivider;              /**< \brief N divider value for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   550      uint8 k2Divider;             /**< \brief K2 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   551      uint8 k3Divider;             /**< \brief K3 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   552      uint8 k3DividerBypass;       /**< \brief Divider Bypass
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   553                                    * 0 - The divide by block in front of the K3-Divider is not bypassed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   554                                    * 1-  The divide by block in front of the K3-Divider is bypassed. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   555  } IfxScuCcu_PerPllConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   556  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   557  /** \brief Configuration structure type for the Pll initial step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   558   * This structure must be used to configure the P, N and K2 dividers for initial step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   559   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   560  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   561  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   562      uint8 pDivider;        /**< \brief P divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   563      uint8 nDivider;        /**< \brief N divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   564      uint8 k2Divider;       /**< \brief K2 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   565  } IfxScuCcu_SysPllConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   567  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   568  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   569  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   570   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   571  /** \brief Configuration structure type for CCUCON registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   573  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   574  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   575      uint32 value;       /**< \brief CCUCON Register value to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   576      uint32 mask;        /**< \brief CCUCON Mask to select the bit fields to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   577  } IfxScuCcu_CcuconRegConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   578  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   579  /** \brief Configuration structure type for the Pll Steps for current jump control.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   581  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   582  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   583      uint8   k2Step;         /**< \brief K2 divider value for this step. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   584      float32 waitTime;       /**< \brief Wait time for for this step. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   585  } IfxScuCcu_PllStepConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   587  /** \brief Configuration structure type for the Pll Parameters.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   589  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   590  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   591      uint32                           xtalFrequency;                /**< \brief Xtal frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   592      IfxScuCcu_PllInputClockSelection pllInputClockSelection;       /**< \brief Pll input clock selection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   593      IfxScuCcu_SysPllConfig           sysPllConfig;                 /**< \brief System PLL Configurations */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   594      IfxScuCcu_PerPllConfig           perPllConfig;                 /**< \brief Peripheral PLL Configurations */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   595  } IfxScuCcu_pllsParameterConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   596  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   597  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   599  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   600   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   601  /** \brief Configuration structure type for the Flash waitstate configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   602   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   603  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   604  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   605      uint32 value;       /**< \brief FLASH.FCON Register value to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   606      uint32 mask;        /**< \brief FLASH.FCON Mask to select the bit fields to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   607  } IfxScuCcu_FlashWaitstateConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   609  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   610  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   611  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   612   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   613  /** \brief Configuration structure type for all the CCUCON registers to configure clock distribution.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   615  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   616  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   617      IfxScuCcu_CcuconRegConfig ccucon0;        /**< \brief CCUCON0 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   618      IfxScuCcu_CcuconRegConfig ccucon1;        /**< \brief CCUCON1 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   619      IfxScuCcu_CcuconRegConfig ccucon2;        /**< \brief CCUCON2 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   620      IfxScuCcu_CcuconRegConfig ccucon5;        /**< \brief CCUCON5 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   621      IfxScuCcu_CcuconRegConfig ccucon6;        /**< \brief CCUCON6 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   622      IfxScuCcu_CcuconRegConfig ccucon7;        /**< \brief CCUCON7 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   623      IfxScuCcu_CcuconRegConfig ccucon8;        /**< \brief CCUCON8 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   624      IfxScuCcu_CcuconRegConfig ccucon9;        /**< \brief CCUCON9 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   625      IfxScuCcu_CcuconRegConfig ccucon10;       /**< \brief CCUCON10 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   626      IfxScuCcu_CcuconRegConfig ccucon11;       /**< \brief CCUCON11 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   627  } IfxScuCcu_ClockDistributionConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   629  /** \brief Configuration structure type for the Pll Initial Step Configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   631  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   633      IfxScuCcu_pllsParameterConfig pllsParameters;       /**< \brief Configuration Parameters for both PLLs */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   634      float32                       waitTime;             /**< \brief Wait time for for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   635  } IfxScuCcu_InitialStepConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   637  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   638   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   639  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   640  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   641      uint8                              numOfSteps;       /**< \brief Number of PLL divider steps during clock throttling */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   642      IFX_CONST IfxScuCcu_PllStepConfig *pllSteps;         /**< \brief Pointer to the array of Pll divider step configuration. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   643  } IfxScuCcu_PllThrottleConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   644  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   645  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   647  /** \brief modulation config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   648   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   649  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   650  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   651      IfxScuCcu_ModEn               Mod_Enable;       /**< \brief modulation enable */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   652      IfxScuCcu_ModulationAmplitude Mod_Amp;          /**< \brief modulation amplitude */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   653  } IfxScuCcu_Mod_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   655  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   656   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   657  /** \brief Configuration structure SCU module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   658   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   659  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   660  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   661      IfxScuCcu_InitialStepConfig               pllInitialStepConfig;           /**< \brief Configuration of first step which is same as internal osc frequency. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   662      IfxScuCcu_PllThrottleConfig               sysPllThrottleConfig;           /**< \brief Configuration of PLL throttling. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   663      IfxScuCcu_ClockDistributionConfig         clockDistribution;              /**< \brief Configuration of of bus clocks and other module clock distribution. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   664      IFX_CONST IfxScuCcu_FlashWaitstateConfig *flashFconWaitStateConfig;       /**< \brief Configuration of flash waitstate */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   665      IFX_CONST IfxScuCcu_Mod_Config           *modulationConfig;               /**< \brief modulation configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   666  } IfxScuCcu_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   668  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   669  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   670  /** \brief structure holding the RGain parameters for modulation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   671   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   672  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   673  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   674      float32 RGainNom;       /**< \brief RGain Nominal value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   675      uint16  RGainHex;       /**< \brief RGain Hex value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   676  } IfxScuCcu_RGain_Values;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   678  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   679   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   680  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   681  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   682  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   683  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   684  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   685  /** \brief API to wait for requested duration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   686   * Note: IfxScuCcu_wait shall not use STM in future, because we can guarantee that STM is enabled after reset but  If PLL init is called for changing the frequency during runtime, there is no guarantee that STM is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   687   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   688   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   689  IFX_INLINE void IfxScuCcu_wait(float32 timeSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   690  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   691  /** \brief API to wait for requested duration along with watchdog service to avoid any reset case during startup of the chip.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   692   * Note: IfxScuCcu_wait shall not use STM in future, because we can guarantee that STM is enabled after reset but  If PLL init is called for changing the frequency during runtime, there is no guarantee that STM is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   693   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   694   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   695  IFX_INLINE void IfxScuCcu_waitWithWdtService(float32 timeSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   696  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   697  /** \brief API to configure the LPDIV value to enter into Low Power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   698   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   699   * Caution:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   700   * write to LPDIV with non-zero division ratio will cause system to enter low power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   701   * Low power mode will affect different SPBDIV and SRIDIV ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   703   * The original CCUCON0 ratios should be preserved by user prior to calling this function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   704   * The "normal" CCUCON0 ratios have to be passed to API: "IfxScuCcu_switchToNormalMode" to go back to the original division ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   705   * \param lpDiv Low Power Division Ratio
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   706   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   707   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   708  IFX_INLINE void IfxScuCcu_switchToLowPowerMode(IfxScuCcu_LowPowerDivRatio lpDiv);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   710  /** \brief API to switch back to normal mode from low power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   711   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   712   * Caution:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   713   * The original CCUCON0 setting has to be saved by user prior to entering Low Power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   714   * Pass the original CCUCON0 register as a whole word to this function to restore the normal settings.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   715   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   716   * Ramp back to normal mode is done in steps to avoid sudden jump in frequency and power usage.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   717   * \param ccucon0 CCUCON0 values at normal mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   718   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   720   * Switch to low power mode and back using iLLD functions as below
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   721   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   722   *     uint32 ccucon0 = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   723   *     IfxScuCcu_LowPowerDivRatio lpDiv = IfxScuCcu_LowPowerDivRatio_divBy30;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   724   *     IfxScuCcu_switchToLowPowerMode(lpDiv);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   725   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   726   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   727   * Switch back to normal mode  with the saved ccucon0 value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   728   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   729   *     IfxScuCcu_switchToNormalMode(ccucon0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   730   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   731   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   733  IFX_INLINE void IfxScuCcu_switchToNormalMode(const uint32 ccucon0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   735  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   736  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   737  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   738   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   739  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   740  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   741  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   742  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   743  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   744  /** \brief API to get ADAS divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   745   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   746   * \return ADAS frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   748  IFX_INLINE float32 IfxScuCcu_getAdasFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   750  /** \brief API to get Adc (EVADC, EDSADC)  frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   751   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   752   * \return Adc frequency (fADC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   753   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   754  IFX_INLINE float32 IfxScuCcu_getAdcFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   755  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   756  /** \brief API to get ASCLINF divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   757   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   758   * \return AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   759   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   760  IFX_INLINE float32 IfxScuCcu_getAsclinFFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   762  /** \brief API to get EBU frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   763   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   764   * \return EBU frequency (fEBU) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   765   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   766  IFX_INLINE float32 IfxScuCcu_getEbuFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   768  /** \brief API to get EVR Oscillator frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   769   * This API returns the constant which is specific to the ScuCcu of the controller.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   770   * \return EVR Oscillator frequency (fBACK or fEVR) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   771   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   772  IFX_INLINE float32 IfxScuCcu_getEvrFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   774  /** \brief API to get GETH divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   775   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   776   * \return GETH frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   777   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   778  IFX_INLINE float32 IfxScuCcu_getGethFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   780  /** \brief API to get GTMdivider frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   781   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   782   * return GTM frequency (fGTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   783   * \return Gtm Frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   784   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   785  IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   787  /** \brief API to get I2C frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   788   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   789   * \return I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   790   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   791  IFX_INLINE float32 IfxScuCcu_getI2cFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   792  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   793  /** \brief API to get MCANH divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   794   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   795   * \return MCANH frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   796   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   797  IFX_INLINE float32 IfxScuCcu_getMcanhFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   799  /** \brief API to get Oscillator 0 frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   800   * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   801   * \return Osc0 frequency (fOSC0) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   802   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   803  IFX_INLINE float32 IfxScuCcu_getOsc0Frequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   804  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   805  /** \brief API to get Oscillator 0 frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   806   * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   807   * \return Osc frequency (fOSC) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   808   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   809  IFX_INLINE float32 IfxScuCcu_getOscFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   811  /** \brief Returns the clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   812   * \return Clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   813   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   814  IFX_INLINE IfxScuCcu_PllInputClockSelection IfxScuCcu_getSourceSelection(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   816  /** \brief API to get STM divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   817   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   818   * \return STM frequency (fSTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   819   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   820  IFX_INLINE float32 IfxScuCcu_getStmFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   821  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   822  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   823  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   824  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   825  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   826  /** \brief API to get ASCLINS divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   827   * This API returns the ASCLINS frequency  based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   828   * \return AsclinS frequency (fASCLINS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   829   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   830  IFX_EXTERN float32 IfxScuCcu_getAsclinSFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   831  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   832  /** \brief API to get BBB divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   833   * This API returns the BBBDivider frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   834   * \return BBB frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   835   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   836  IFX_EXTERN float32 IfxScuCcu_getBbbFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   838  /** \brief This API returns the Cpu frequency based on the divider value in CCUCON register and fSource frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   839   * \param cpu CPU number for which effective fCPU is sought
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   840   * \return Cpu[x] frequency in Hz, where x is cpu number passed as parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   841   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   842  IFX_EXTERN float32 IfxScuCcu_getCpuFrequency(const IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   843  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   844  /** \brief API to get FSI2 divider frequency in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   845   * This API returns the fFSI2 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   846   * \return FSI2 frequency (fFSI2) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   847   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   848  IFX_EXTERN float32 IfxScuCcu_getFsi2Frequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   849  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   850  /** \brief API to get FSI divider frequency in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   851   * This API returns the fFSI based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   852   * \return FSI frequency (fFSI) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   853   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   854  IFX_EXTERN float32 IfxScuCcu_getFsiFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   855  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   856  /** \brief API to get MCAN divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   857   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   858   * \return Mcan frequency (fMCAN) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   859   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   860  IFX_EXTERN float32 IfxScuCcu_getMcanFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   861  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   862  /** \brief get source frequency fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   863   * This API returns the source frequency based on the configurations with CCUCON register configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   864   * \return Module frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   865   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   866  IFX_EXTERN float32 IfxScuCcu_getModuleFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   867  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   868  /** \brief API to get MSC divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   869   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   870   * \return Msc frequency (fMSC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   871   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   872  IFX_EXTERN float32 IfxScuCcu_getMscFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   873  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   874  /** \brief API to get actual PER PLL1  frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   875   * This API returns the PER PLL1 frequency based on the K2 divider value in PLLCON and the VCO frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   876   * Fpll1= (Fosc*N)/(P*K2)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   877   * \return PER PLL1 (K2 Divider) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   878   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   879  IFX_EXTERN float32 IfxScuCcu_getPerPllFrequency1(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   880  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   881  /** \brief API to get actual PER PLL2 (K3 Divider) frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   882   * This API returns the PER PLL2 frequency based on the K3 divider value in PLLCON and the VCO frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   883   * Fpll2= (Fosc*N)/(P*K3*1.6)  // DIVBY = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   884   * Fpll2= (Fosc*N)/(P*K3*2)  // DIVBY = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   885   * \return PER PLL2 (K3 Divider ) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   886   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   887  IFX_EXTERN float32 IfxScuCcu_getPerPllFrequency2(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   888  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   889  /** \brief API to get actual Sys PLL output frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   890   * This API returns the based on the divider values in CCUCON, PLLCON registers and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   891   * \return System Pll (fSysPLL) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   892   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   893  IFX_EXTERN float32 IfxScuCcu_getPllFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   894  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   895  /** \brief API to get Qspi divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   896   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   897   * \return Qspi frequency (fQspi) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   898   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   899  IFX_EXTERN float32 IfxScuCcu_getQspiFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   900  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   901  /** \brief get source frequency fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   902   * This API returns the source frequency based on the configurations with CCUCON register configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   903   * \param fsource fsource selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   904   * \return Effective fSOURCE in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   905   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   906  IFX_EXTERN float32 IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource fsource);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   907  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   908  /** \brief API to get SPB divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   909   * This API returns the based on fSOURCE and also on Low power divider mode and/or SPBDIV divider value in CCUCON registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   910   * \return SPB frequency (fSPB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   911   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   912  IFX_EXTERN float32 IfxScuCcu_getSpbFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   913  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   914  /** \brief API to get SRI divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   915   * This API returns the Sri frequency based on the divider values in CCUCON registers and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   916   * \return Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   917   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   918  IFX_EXTERN float32 IfxScuCcu_getSriFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   920  /** \brief API to set ADAS frequency (with ADAS divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   921   * This API configure adas divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   922   * \param adasFreq ADAS frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   923   * \return Actual Adas frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   924   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   925  IFX_EXTERN float32 IfxScuCcu_setAdasFrequency(float32 adasFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   926  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   927  /** \brief API to set ASCLINF frequency (with ASCLINF divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   928   * This API configure ASCLINF divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   929   * \param asclinFFreq AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   930   * \return Actual AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   931   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   932  IFX_EXTERN float32 IfxScuCcu_setAsclinFFrequency(float32 asclinFFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   933  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   934  /** \brief API to set ASCLINS frequency (with ASCLINS divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   935   * This API configure ASCLINS divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   936   * \param asclinSFreq Desired AscLinS frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   937   * \return Actual AsclinS frequency (fASCLINS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   938   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   939  IFX_EXTERN float32 IfxScuCcu_setAsclinSFrequency(float32 asclinSFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   940  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   941  /** \brief API to set BBB frequency (with Bbb divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   942   * This API configure Bbb divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   943   * \param bbbFreq Bbb frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   944   * \return Actual Bbb frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   945   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   946  IFX_EXTERN float32 IfxScuCcu_setBbbFrequency(float32 bbbFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   947  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   948  /** \brief API to set CPU frequency (with CPU divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   949   * This API configure CPU divider values in CCUCON registers. The actual frequency is always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   950   * \param cpu CPU number for which fCPU to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   951   * \param cpuFreq Desired CPU frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   952   * \return Actual CPU[x] frequency in Hz, where x is the cpu number passed as parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   953   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   954  IFX_EXTERN float32 IfxScuCcu_setCpuFrequency(IfxCpu_ResourceCpu cpu, float32 cpuFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   955  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   956  /** \brief API to set FSI2 frequency (with FSI2 divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   957   * This API configure Fsi2 divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   958   * \param fsi2Freq FSI2 frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   959   * \return Actual Fsi2 frequency (fFSI2) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   960   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   961  IFX_EXTERN float32 IfxScuCcu_setFsi2Frequency(float32 fsi2Freq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   962  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   963  /** \brief API to set FSI frequency (with FSI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   964   * This API configure Fsi divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   965   * \param fsiFreq FSI frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   966   * \return Actual Fsi frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   967   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   968  IFX_EXTERN float32 IfxScuCcu_setFsiFrequency(float32 fsiFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   969  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   970  /** \brief API to set GETH frequency (with GETH divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   971   * This API configure geth divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   972   * \param gethFreq GETH frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   973   * \return Actual Geth frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   974   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   975  IFX_EXTERN float32 IfxScuCcu_setGethFrequency(float32 gethFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   976  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   977  /** \brief API to set GTM frequency (with GTM divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   978   * This API configure GTM divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   979   * \param gtmFreq Desired GTM frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   980   * \return Actual GTM frequency in HZ
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   981   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   982  IFX_EXTERN float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   983  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   984  /** \brief API to set I2C frequency (with I2C divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   985   * This API configure adas divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   986   * \param i2cFreq I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   987   * \return Actual I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   988   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   989  IFX_EXTERN float32 IfxScuCcu_setI2cFrequency(float32 i2cFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   990  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   991  /** \brief API to set MCAN frequency (with MCAN divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   992   * This API configure MCAN divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   993   * \param mcanFreq Desired MSC frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   994   * \return Actual Mcan frequency (fMCAN) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   995   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   996  IFX_EXTERN float32 IfxScuCcu_setMcanFrequency(float32 mcanFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   997  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   998  /** \brief API to set MCANH frequency (with MCANH divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   999   * This API configure mcanh divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1000   * \param mcanhFreq MCANH frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1001   * \return Actual MCanh frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1002   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1003  IFX_EXTERN float32 IfxScuCcu_setMcanhFrequency(float32 mcanhFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1004  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1005  /** \brief API to set MSC frequency (with MSC divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1006   * This API configure MSC divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1007   * \param mscFreq Desired MSC frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1008   * \return Actual Msc frequency (fMSC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1009   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1010  IFX_EXTERN float32 IfxScuCcu_setMscFrequency(float32 mscFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1011  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1012  /** \brief API to set QSPI frequency (with QSPI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1013   * This API configure Qspi divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1014   * \param qspiFreq Desired QSPI frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1015   * \return Actual Qspi frequency (fQspi) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1016   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1017  IFX_EXTERN float32 IfxScuCcu_setQspiFrequency(float32 qspiFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1018  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1019  /** \brief API to set SPB frequency (with SPB divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1020   * This API configure SPB divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1021   * \param spbFreq Desired SPB frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1022   * \return Actual SPB frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1023   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1024  IFX_EXTERN float32 IfxScuCcu_setSpbFrequency(float32 spbFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1025  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1026  /** \brief API to set SRI frequency (with SRI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1027   * This API configure Sri divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1028   * \param sriFreq Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1029   * \return Actual Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1030   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1031  IFX_EXTERN float32 IfxScuCcu_setSriFrequency(float32 sriFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1032  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1033  /** \brief API to set STM frequency (with STM divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1034   * This API configure Stm divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1035   * \param stmFreq Stm frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1036   * \return Actual Stm frequency (fSTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1037   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1038  IFX_EXTERN float32 IfxScuCcu_setStmFrequency(float32 stmFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1039  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1040  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1041  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1042  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1043   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1044  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1045  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1046  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1047  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1048  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1049  /** \brief This inline function configures the Ccu SYS PLLs initial step and PER PLL.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1050   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1051  IFX_INLINE boolean IfxScuCcu_configureCcuInitialStep(const IfxScuCcu_InitialStepConfig *pllInitStepCfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1052  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1053  /** \brief Inlined API for clock distribution
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1054   * For each CCUCON register update the configured value with the mask.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1055   * \param clockDistributionConfig pointer to clock distribution structure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1056   * \return TRUE: Operation successful, FALSE: Operation Failure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1057   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1058  IFX_INLINE boolean IfxScuCcu_distributeClockInline(const IfxScuCcu_ClockDistributionConfig *clockDistributionConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1059  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1060  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1061  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1062  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1063  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1064  /** \brief API for clock distribution.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1065   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1066   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1067  IFX_EXTERN void IfxScuCcu_distributeClock(IfxScuCcu_ClockDistributionConfig *clockDistributionConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1068  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1069  /** \brief API to initialize the SCU Clock Control Unit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1070   * This API initialize the Sys PLL with ramp steps, BUS dividers and Per PLL for the configuration provided by the configuration structure.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1071   * FSyspll = (Fosc * Nsys)/(Psys * K2sys);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1072   * Fpll1= (Fosc * Nper)/(Pper * K2per);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1073   * Fpll2= (Fosc * Nper)/(Pper * K3per * 1.6); // if DIVBY = 0, else Fpll2= (Fosc * Nper)/(Pper * K3per * 2) // if DIVBY = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1074   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1075   * Note: Following SMU alarms are disabled before the PLL configuration and Enabled at the end of PLL lock in the function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1076   * PLL0,1,2 clock out of range frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1077   * PLL0,1 VCO loss of lock event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1078   * System PLL Oscillator Watchdog, input clock out of range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1079   * The application should store/restore these alarm configurations if required.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1080   * \param config Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1081   * \return Error status of the ScuCcu initialization process.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1082   * \retval TRUE: If an error occurred during initialization.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1083   * \retval FALSE: If initialization was successful.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1084   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1085  IFX_EXTERN boolean IfxScuCcu_init(const IfxScuCcu_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1086  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1087  /** \brief Initializes the clock configuration with default values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1088   * \param cfg Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1089   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1090   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1091  IFX_EXTERN void IfxScuCcu_initConfig(IfxScuCcu_Config *cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1092  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1093  /** \brief API to switch to Backup clock from the current PLL frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1094   * \param cfg Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1095   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1096   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1097  IFX_EXTERN void IfxScuCcu_switchToBackupClock(const IfxScuCcu_Config *cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1098  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1099  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1100  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1101  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1102  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1103  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1105  /** \brief Clear the trap status flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1106   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1107   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1108   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1109  IFX_INLINE void IfxScuCcu_clearTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1110  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1111  /** \brief Get trap disable flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1112   * \param cpuIndex Cpu index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1113   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1114   * \return Trap request can be generated or not.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1115   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1116  IFX_INLINE boolean IfxScuCcu_getTrapDisableFlag(IfxCpu_ResourceCpu cpuIndex, IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1117  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1118  /** \brief Get the trap status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1119   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1120   * \return Trap was requested or not.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1121   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1122  IFX_INLINE boolean IfxScuCcu_getTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1124  /** \brief Set the trap disable flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1125   * \param cpuIndex Cpu index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1126   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1127   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1129  IFX_INLINE void IfxScuCcu_setTrapDisableFlag(IfxCpu_ResourceCpu cpuIndex, IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1130  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1131  /** \brief Set the trap status flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1132   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1134   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1135  IFX_INLINE void IfxScuCcu_setTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1136  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1137  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1138   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1139  IFX_INLINE boolean IfxScuCcu_throttleSysPllClockInline(const IfxScuCcu_PllThrottleConfig *pllThrottleConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1140  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1141  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1142  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1143  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1145  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1146   * \param modamp modulation amplitude
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1147   * \param RGain_P RGain values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1148   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1149   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1150  IFX_EXTERN void IfxScuCcu_calRGainParameters(IfxScuCcu_ModulationAmplitude modamp, IfxScuCcu_RGain_Values *RGain_P);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1151  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1152  /** \brief initialize modulation parameters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1153   * \param Mod_Cfg modulation configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1156  IFX_EXTERN void IfxScuCcu_modulation_init(const IfxScuCcu_Mod_Config *Mod_Cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1157  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1158  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1159   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1160   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1161  IFX_EXTERN void IfxScuCcu_throttleSysPllClock(IfxScuCcu_PllThrottleConfig *pllThrottleConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1162  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1163  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1164  /*-------------------Global Exported Variables/Constants----------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1165  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1167  /** \brief maps to the IfxScuCcu_ModulationAmplitude enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1169  IFX_EXTERN IFX_CONST float32 IfxScuCcu_MA_percent[IfxScuCcu_ModulationAmplitude_count];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1170  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1171  /** \brief Configuration structure for SCU CCU driver.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1172   * The values of this structure are defined as # defined macros in the implementation of Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1173   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1174  IFX_EXTERN IFX_CONST IfxScuCcu_Config     IfxScuCcu_defaultClockConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1176  /** \brief default modulation config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1177   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1178  IFX_EXTERN IFX_CONST IfxScuCcu_Mod_Config IfxScuCcu_defaultModConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1179  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1180  IFX_EXTERN uint32                         IfxScuCcu_xtalFrequency;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1181  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1182  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1183  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1184  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1185  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1186  IFX_INLINE void IfxScuCcu_clearTrapStatusFlag(IfxScuCcu_Traprequest request)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1187  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1188      uint32 trapclear = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1189      SCU_TRAPCLR.U |= (trapclear << request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1190  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1193  IFX_INLINE boolean IfxScuCcu_configureCcuInitialStep(const IfxScuCcu_InitialStepConfig *pllInitStepCfg)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1194  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1195      uint8                                initError = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1196      uint16                               endinitSfty_pw;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1197  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1198      uint32                               timeoutCycleCount;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1199      const IfxScuCcu_pllsParameterConfig *pllsParamCfg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1200      pllsParamCfg   = &pllInitStepCfg->pllsParameters;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1201      /*get the watch-dog passwords for usage with this function*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1202      endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1203  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1204      /* Reset Safety ENDINIT, SCU_CCUCON registers are protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1205      IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1206  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1207      timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1208  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1209      while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1210      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1211          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1212      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1213  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1214      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1215          Ifx_SCU_CCUCON0 scuCcucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1216          scuCcucon0.U        = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1217          scuCcucon0.B.CLKSEL = 0; /*Select the EVR as fsource0/1/2 for the clock distribution */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1218          scuCcucon0.B.UP     = 1; /*Update the ccucon0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1219          SCU_CCUCON0.U       = scuCcucon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1220      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1221  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1222      timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1224      while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1225      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1226          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1227      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1229      /*Disable SMU Alarms */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1230      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1231          SMU_KEYS.U    = (uint32)0xBCU;        /* Enable access to SMU registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1232          SMU_AG8CF0.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1233          SMU_AG8CF1.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1234          SMU_AG8CF2.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1235          SMU_KEYS.U    = (uint32)0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1236      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1237  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1238      /* Power down the both the PLLs before configuring registers*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1239      /* Both the PLLs are powered down to be sure for asynchronous PLL registers update cause no glitches */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1240      SCU_SYSPLLCON0.B.PLLPWD = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1241      SCU_PERPLLCON0.B.PLLPWD = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1242  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1243      timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1244  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1245      while ((SCU_SYSPLLSTAT.B.PWDSTAT == 0) || (SCU_PERPLLSTAT.B.PWDSTAT == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1246      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1247          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1248      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1249  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1250      /* Now configure the oscillator, required oscillator mode is external crystal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1252      if ((pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fOsc0) || (pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fSysclk))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1253  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1254      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1255          Ifx_SCU_OSCCON scuOsccon;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1256          scuOsccon.U      = SCU_OSCCON.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1257  #if (IFX_CFG_SCU_EXT_CLOCK == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1258          scuOsccon.B.MODE = 2U;   /* external clock selected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1259  #else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1260          scuOsccon.B.MODE = 0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1261  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1262  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1263          scuOsccon.B.OSCVAL = (uint32)(pllsParamCfg->xtalFrequency / 1000000U) - 15; /*XTAL range 16MHz to 40MHz*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1264          /*Note: Oscillator Watchdog Reset (OSCRES) is not required when the PLLs are powered down*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1265          SCU_OSCCON.U       = scuOsccon.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1266      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1267  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1268      /* Configure the initial steps for the system PLL*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1269      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1270          Ifx_SCU_SYSPLLCON0 sysPllCon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1271          sysPllCon0.U       = SCU_SYSPLLCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1272          sysPllCon0.B.PDIV  = pllsParamCfg->sysPllConfig.pDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1273          sysPllCon0.B.NDIV  = pllsParamCfg->sysPllConfig.nDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1274          sysPllCon0.B.INSEL = pllsParamCfg->pllInputClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1275          SCU_SYSPLLCON0.U   = sysPllCon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1276      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1277  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1278      /* Configure the initial steps for the peripheral PLL*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1279      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1280          Ifx_SCU_PERPLLCON0 scuPerPllCon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1281          scuPerPllCon0.U       = SCU_PERPLLCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1282          scuPerPllCon0.B.DIVBY = pllsParamCfg->perPllConfig.k3DividerBypass;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1283          scuPerPllCon0.B.PDIV  = pllsParamCfg->perPllConfig.pDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1284          scuPerPllCon0.B.NDIV  = pllsParamCfg->perPllConfig.nDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1285          SCU_PERPLLCON0.U      = scuPerPllCon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1286      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1288      /* Power up the both the PLLs before configuring registers*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1289      SCU_SYSPLLCON0.B.PLLPWD = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1290      SCU_PERPLLCON0.B.PLLPWD = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1292      timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1294      while ((SCU_SYSPLLSTAT.B.PWDSTAT == 1) || (SCU_PERPLLSTAT.B.PWDSTAT == 1))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1295      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1296          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1297      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1298  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1299      timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1301      while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1302             (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1303             (SCU_PERPLLSTAT.B.K3RDY == 0U))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1304      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1305          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1306      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1307  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1308      SCU_SYSPLLCON1.B.K2DIV = pllsParamCfg->sysPllConfig.k2Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1309      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1310          Ifx_SCU_PERPLLCON1 scuPerPllCon1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1311          scuPerPllCon1.U       = SCU_PERPLLCON1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1312          scuPerPllCon1.B.K2DIV = pllsParamCfg->perPllConfig.k2Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1313          scuPerPllCon1.B.K3DIV = pllsParamCfg->perPllConfig.k3Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1314          SCU_PERPLLCON1.U      = scuPerPllCon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1315      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1316  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1317      timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1319      while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1320             (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1321             (SCU_PERPLLSTAT.B.K3RDY == 0U))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1322      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1323          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1324      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1325  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1326      /*Check if the OSC frequencies are in the limit*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1327      timeoutCycleCount = IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1329      while ((SCU_OSCCON.B.PLLLV == 0) && (SCU_OSCCON.B.PLLHV == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1330      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1331          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1332      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1333  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1334      /* Now start PLL locking for latest set values*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1335      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1336          SCU_SYSPLLCON0.B.RESLD = 1;             /* Restart Sys PLL lock detection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1337          SCU_PERPLLCON0.B.RESLD = 1;             /* Restart Per PLL lock detection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1338  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1339          timeoutCycleCount      = IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1340  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1341          while ((SCU_SYSPLLSTAT.B.LOCK == 0) || (SCU_PERPLLSTAT.B.LOCK == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1342          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1343              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1344          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1345      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1346      /*Enable SMU Alarms */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1347      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1348          SMU_KEYS.U = (uint32)0xBCU;           /* Enable access to SMU registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1349          SMU_CMD.U  = (uint32)0x00000005;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1350          SMU_AG8.U  = IFXSCUCCU_SMUALARM_MASK; /* Clear SMU Alarms*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1351          SMU_KEYS.U = (uint32)0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1352      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1353      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1354          Ifx_SCU_CCUCON0 scu_ccucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1355          scu_ccucon0.U        = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1356          scu_ccucon0.B.CLKSEL = 1; /*Select the PLLs for fsource0/1/2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1357          scu_ccucon0.B.UP     = 1; /*Update the ccucon0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1358  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1359          timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1360  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1361          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1362          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1363              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1364          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1365  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1366          SCU_CCUCON0.U     = scu_ccucon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1367  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1368          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1369  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1370          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1371          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1372              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1373          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1374      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1375  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1376      IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1377      return (boolean)initError;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1378  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1379  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1380  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1381  IFX_INLINE boolean IfxScuCcu_distributeClockInline(const IfxScuCcu_ClockDistributionConfig *clockDistributionConfig)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1382  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1383      uint16 endinitSfty_pw;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1384      uint32 timeoutCycleCount;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1385      uint32 initError = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1386  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1387      /*get the watch-dog passwords for usage with this function*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1388      endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1389  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1390      /* Reset Safety ENDINIT, SCU_CCUCON registers are protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1391      IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1393      /*Configure the clock distribution */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1394      {                                                    /*Write CCUCON0 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1395          Ifx_SCU_CCUCON0 ccucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1396          ccucon0.U         = SCU_CCUCON0.U & ~clockDistributionConfig->ccucon0.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1397          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1398          ccucon0.U        |= (clockDistributionConfig->ccucon0.mask & clockDistributionConfig->ccucon0.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1399          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1400  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1401          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1402          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1403              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1404          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1405  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1406          SCU_CCUCON0.U     = ccucon0.U;      /*Set update bit explicitly to make above configurations effective */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1407          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1408  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1409          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1410          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1411              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1412          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1413      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1414      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1415          /*Write CCUCON1 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1416          Ifx_SCU_CCUCON1 ccucon1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1417          ccucon1.U = SCU_CCUCON1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1419          if (ccucon1.B.CLKSELMCAN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1420              || ccucon1.B.CLKSELMSC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1421              || ccucon1.B.CLKSELQSPI)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1422          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1423              /* Non Zero ClockSel exists - set to Zero */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1424              /* CAUTION: this would briefly reset and set all clocks in CCUCON1! */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1425              ccucon1.U  = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1426              /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1427              ccucon1.U |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1428  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1429              /* set Clock selects to 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1430              ccucon1.B.CLKSELMCAN = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1431              ccucon1.B.CLKSELMSC  = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1432              ccucon1.B.CLKSELQSPI = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1434              timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1435  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1436              while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1437              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1438                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1439              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1441              SCU_CCUCON1.U     = ccucon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1442  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1443              timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1444  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1445              while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1446              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1447                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1448              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1449          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1450  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1451          ccucon1.U         = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1452          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1453          ccucon1.U        |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1454  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1455          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1456  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1457          while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1458          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1459              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1460          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1461  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1462          SCU_CCUCON1.U     = ccucon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1463  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1464          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1465  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1466          while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1467          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1468              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1469          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1470      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1472      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1473          /*Write CCUCON2 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1474          Ifx_SCU_CCUCON2 ccucon2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1475          ccucon2.U = SCU_CCUCON2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1477          if (ccucon2.B.CLKSELASCLINS)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1478          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1479              /* Non Zero ClockSel exists - set to Zero */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1480              /* CAUTION: this would briefly reset and set ASCLINS clock in CCUCON2! */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1481              ccucon2.U               = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1482              /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1483              ccucon2.U              |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1484  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1485              ccucon2.B.CLKSELASCLINS = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1486  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1487              timeoutCycleCount       = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1488  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1489              while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1490              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1491                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1492              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1494              SCU_CCUCON2.U     = ccucon2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1495  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1496              timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1497  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1498              while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1499              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1500                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1501              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1502          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1503  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1504          ccucon2.U         = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1505          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1506          ccucon2.U        |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1507  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1508          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1509  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1510          while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1511          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1512              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1513          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1514  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1515          SCU_CCUCON2.U     = ccucon2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1516  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1517          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1518  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1519          while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1520          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1521              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1522          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1523      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1524      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1525          /*Write CCUCON5 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1526          Ifx_SCU_CCUCON5 ccucon5;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1527          ccucon5.U         = SCU_CCUCON5.U & ~clockDistributionConfig->ccucon5.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1528          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1529          ccucon5.U        |= (clockDistributionConfig->ccucon5.mask & clockDistributionConfig->ccucon5.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1530          ccucon5.B.UP      = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1531          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1532  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1533          while (SCU_CCUCON5.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1534          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1535              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1536          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1538          SCU_CCUCON5.U     = ccucon5.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1539          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1541          while (SCU_CCUCON5.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1542          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1543              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1544          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1545      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1546      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1547          /*Write CCUCON6 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1548          Ifx_SCU_CCUCON6 ccucon6;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1549          ccucon6.U     = SCU_CCUCON6.U & ~clockDistributionConfig->ccucon6.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1550          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1551          ccucon6.U    |= (clockDistributionConfig->ccucon6.mask & clockDistributionConfig->ccucon6.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1552          SCU_CCUCON6.U = ccucon6.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1553      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1555      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1556          /*Write CCUCON7 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1557          Ifx_SCU_CCUCON7 ccucon7;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1558          ccucon7.U     = SCU_CCUCON7.U & ~clockDistributionConfig->ccucon7.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1559          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1560          ccucon7.U    |= (clockDistributionConfig->ccucon7.mask & clockDistributionConfig->ccucon7.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1561          SCU_CCUCON7.U = ccucon7.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1562      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1563  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1564      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1565          /*Write CCUCON8 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1566          Ifx_SCU_CCUCON8 ccucon8;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1567          ccucon8.U     = SCU_CCUCON8.U & ~clockDistributionConfig->ccucon8.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1568          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1569          ccucon8.U    |= (clockDistributionConfig->ccucon8.mask & clockDistributionConfig->ccucon8.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1570          SCU_CCUCON8.U = ccucon8.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1571      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1572      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1573          /*Write CCUCON9 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1574          Ifx_SCU_CCUCON9 ccucon9;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1575          ccucon9.U     = SCU_CCUCON9.U & ~clockDistributionConfig->ccucon9.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1576          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1577          ccucon9.U    |= (clockDistributionConfig->ccucon9.mask & clockDistributionConfig->ccucon9.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1578          SCU_CCUCON9.U = ccucon9.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1579      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1580      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1581          /*Write CCUCON10 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1582          Ifx_SCU_CCUCON10 ccucon10;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1583          ccucon10.U     = SCU_CCUCON10.U & ~clockDistributionConfig->ccucon10.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1584          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1585          ccucon10.U    |= (clockDistributionConfig->ccucon10.mask & clockDistributionConfig->ccucon10.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1586          SCU_CCUCON10.U = ccucon10.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1587      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1588      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1589          /*Write CCUCON11 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1590          Ifx_SCU_CCUCON11 ccucon11;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1591          ccucon11.U     = SCU_CCUCON11.U & ~clockDistributionConfig->ccucon11.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1592          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1593          ccucon11.U    |= (clockDistributionConfig->ccucon11.mask & clockDistributionConfig->ccucon11.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1594          SCU_CCUCON11.U = ccucon11.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1595      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1596      IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1597      return (boolean)initError;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1598  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1599  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1600  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1601  IFX_INLINE float32 IfxScuCcu_getAdasFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1602  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1603      uint32 adasDiv = SCU_CCUCON5.B.ADASDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1604  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1605      return (adasDiv == (uint32)0) ? 0 : IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / adasDiv;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1606  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1607  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1609  IFX_INLINE float32 IfxScuCcu_getAdcFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1610  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1611      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1612  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1615  IFX_INLINE float32 IfxScuCcu_getAsclinFFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1616  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1617      float32 freq          = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1618  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1619      uint8   asclindiv[16] = {1, 1, 2, 3, 4, 5, 6, 6, 8, 8, 10, 10, 12, 12, 12, 15};
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1620  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1621      if (SCU_CCUCON2.B.ASCLINFDIV)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1622      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1623          freq = IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_2) / asclindiv[SCU_CCUCON2.B.ASCLINFDIV];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1624      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1625  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1626      return freq;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1627  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1629  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1630  IFX_INLINE float32 IfxScuCcu_getEbuFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1631  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1632      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1633  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1635  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1636  IFX_INLINE float32 IfxScuCcu_getEvrFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1637  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1638      return IFXSCU_EVR_OSC_FREQUENCY;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1639  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1641  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1642  IFX_INLINE float32 IfxScuCcu_getGethFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1643  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1644      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON5.B.GETHDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1645  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1647  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1648  IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1649  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1650      /* fGTM = fSOURCEGTM / GTMDIV ;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1651       * fSOURCEGTM = fSPB *2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1652       */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1653      uint8   gtmDiv  = SCU_CCUCON0.B.GTMDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1654      float32 gtmFreq = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1656      if (gtmDiv == 0u)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1657      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1658          gtmFreq = 0.0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1659      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1660      else if (gtmDiv == 1U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1661      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1662          gtmFreq = IfxScuCcu_getSpbFrequency() * 2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1663      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1664      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1665  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1666      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1667          gtmFreq = IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / gtmDiv;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1668      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1669  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1670      return gtmFreq;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1671  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1672  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1674  IFX_INLINE float32 IfxScuCcu_getI2cFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1675  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1676      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_2) / SCU_CCUCON1.B.I2CDIV;
	div.f	d0,d2,d15
	ld.bu	d15,[a15]1
.L320:
	cmp.f	d1,d8,d9
	jnz.t	d1:2,.L25
.L556:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   270      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   271          dec = ((((fKernel / baudrate) * 46) - 92) / 5); // always: Inc = 46
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   272      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   273      else                                                // for Standard and fast mode
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   274      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   275          dec = (((fKernel / rmc) / baudrate) - 3) / 2;   // always: Inc = 1
	utof	d15,d15
.L411:
	div.f	d15,d0,d15
.L557:
	div.f	d15,d15,d8
.L558:
	movh	d0,#16448
.L559:
	sub.f	d15,d15,d0
.L560:
	movh	d0,#16128
.L561:
	mul.f	d0,d15,d0
	j	.L26
.L25:
	div.f	d15,d0,d8
.L412:
	movh	d0,#16952
.L562:
	mul.f	d15,d15,d0
.L563:
	movh	d0,#17080
.L564:
	sub.f	d15,d15,d0
.L565:
	movh	d0,#16544
.L566:
	div.f	d0,d15,d0
.L26:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   276      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   277  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   278      // dec:inc must be at least 6
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   279      if (dec < 6)
	movh	d10,#16576
.L414:
	cmp.f	d15,d0,d10
.L413:
	jnz.t	d15:0,.L27
.L567:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   280      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   281          dec = 6;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   282      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   283      else if (dec > (1 << IFX_I2C_FDIVCFG_DEC_LEN) - 1)
	ld.w	d10,.11.cnt
.L415:
	cmp.f	d15,d0,d10
.L416:
	and	d15,#6
.L417:
	cmovn	d10,d15,d0
.L27:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   284      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   285          dec = (1 << IFX_I2C_FDIVCFG_DEC_LEN) - 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   286      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   287  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   288      uint16 pwd = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L418:
	mov	d11,d2
.L420:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   289  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   290      IfxScuWdt_clearCpuEndinit(pwd);
	mov	d4,d11
	call	IfxScuWdt_clearCpuEndinit
.L419:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   291  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   292      /* Baudrate configuration */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   293      if (baudrate > 400000)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   294      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   295          i2c->FDIVCFG.B.INC     = 5;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   296          i2c->FDIVCFG.B.DEC     = 0x1D2;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   297  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   298          i2c->FDIVHIGHCFG.B.INC = 46;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   299          i2c->FDIVHIGHCFG.B.DEC = (uint16)(dec + 0.5);
	movh	d15,#16128
.L568:
	add.f	d4,d10,d15
	call	__f_ftous
.L569:
	cmp.f	d15,d8,d9
	jnz.t	d15:2,.L31
.L570:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   300      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   301      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   302      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   303          i2c->FDIVCFG.B.INC = 1;
	mov	d15,#1
	st.b	[a15]26,d15
.L571:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   304          i2c->FDIVCFG.B.DEC = (uint16)(dec + 0.5);
	ld.hu	d15,[a15]24
.L572:
	insert	d15,d15,d2,#0,#11
	st.h	[a15]24,d15
.L573:
	j	.L32
.L31:
	mov	d15,#5
	st.b	[a15]26,d15
.L574:
	ld.hu	d15,[a15]24
.L575:
	mov	d0,#466
.L576:
	insert	d15,d15,d0,#0,#11
	st.h	[a15]24,d15
.L577:
	mov	d15,#46
	st.b	[a15]30,d15
.L578:
	ld.hu	d15,[a15]28
.L579:
	insert	d15,d15,d2,#0,#11
	st.h	[a15]28,d15
.L32:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   305      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   306  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   307      i2c->TIMCFG.B.SDA_DEL_HD_DAT = 0x3F;
	ld.bu	d15,[a15]64
.L580:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   308      i2c->TIMCFG.B.FS_SCL_LOW     = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   309      i2c->TIMCFG.B.EN_SCL_LOW_LEN = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   310      i2c->TIMCFG.B.SCL_LOW_LEN    = 0x20;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   311  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   312      IfxScuWdt_setCpuEndinit(pwd);
	mov	d4,d11
.L421:
	or	d15,#63
	st.b	[a15]64,d15
.L581:
	ld.bu	d15,[a15]65
.L582:
	or	d15,#128
	st.b	[a15]65,d15
.L583:
	ld.bu	d15,[a15]65
.L584:
	or	d15,#64
	st.b	[a15]65,d15
.L585:
	mov	d15,#32
	st.b	[a15]67,d15
.L586:
	j	IfxScuWdt_setCpuEndinit
.L311:
	
__IfxI2c_setBaudrate_function_end:
	.size	IfxI2c_setBaudrate,__IfxI2c_setBaudrate_function_end-IfxI2c_setBaudrate
.L150:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_configureHighSpeedMode',code,cluster('IfxI2c_configureHighSpeedMode')
	.sect	'.text.IfxI2c.IfxI2c_configureHighSpeedMode'
	.align	2
	
	.global	IfxI2c_configureHighSpeedMode

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   313  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   314  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   315  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   316  void IfxI2c_configureHighSpeedMode(Ifx_I2C *i2c)
; Function IfxI2c_configureHighSpeedMode
.L76:
IfxI2c_configureHighSpeedMode:	.type	func

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    16   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    18   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    25   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    32   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    40   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    41   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    42   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    43   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    44   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    45   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    46   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    47   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    48  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    49  #ifndef IFXI2C_H
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    50  #define IFXI2C_H 1
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    51  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    52  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    53  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    54  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    55  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    56  #include "_Impl/IfxI2c_cfg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    57  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    58  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    59  #include "IfxI2c_bf.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    60  #include "_PinMap/IfxI2c_PinMap.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    61  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    62  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    63  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    64  /*-----------------------------------Macros-----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    65  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    66  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    67  /** \brief Master code for high speed mode
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    68   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    69  #define IFXI2C_HIGHSPEED_MASTER_CODE (0xEU)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    70  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    72  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    73  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    74  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    75  /** \addtogroup IfxLld_I2c_Std_enums
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    76   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    77  /** \brief Selects width of address bits (7 or 10 bits)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    78   * Definition in Ifx_I2C.ADDRCFG.B.TBAM
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    79   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    80  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    81  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    82      IfxI2c_AddressMode_7Bit  = 0, /**< \brief sets 7 bit address */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    83      IfxI2c_AddressMode_10Bit = 1  /**< \brief sets 10 bit address */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    84  } IfxI2c_AddressMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    85  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    86  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    87  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    88      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    89      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    90      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    91      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    92  } IfxI2c_BusStatus;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    93  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    94  /** \brief enables DTR interrupt flags
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    95   * Definition in Ifx.I2C.IMSC.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    96   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    97  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    98  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    99      IfxI2c_DtrInterruptSource_lastSingleRequest = IFX_I2C_IMSC_LSREQ_INT_OFF,  /**< \brief last single service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   100      IfxI2c_DtrInterruptSource_singleRequest     = IFX_I2C_IMSC_SREQ_INT_OFF,   /**< \brief single service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   101      IfxI2c_DtrInterruptSource_lastBurstRequest  = IFX_I2C_IMSC_LBREQ_INT_OFF,  /**< \brief last burst service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   102      IfxI2c_DtrInterruptSource_burstRequest      = IFX_I2C_IMSC_BREQ_INT_OFF    /**< \brief burst service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   103  } IfxI2c_DtrInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   104  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   105  /** \brief enable error interrupt request source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   106   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   107   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   108  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   109  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   110      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   111      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   112      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   113      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   114  } IfxI2c_ErrorInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   115  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   116  /** \brief Select speed mode. Standard and Fast or High Speed mode.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   117   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   118  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   119  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   120      IfxI2c_Mode_StandardAndFast = 0,  /**< \brief Sets Standard and Fast speed mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   121      IfxI2c_Mode_HighSpeed       = 1   /**< \brief Sets HighSpeed Mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   122  } IfxI2c_Mode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   123  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   124  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   125  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   126      IfxI2c_PinSelect_a = 0,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   127      IfxI2c_PinSelect_b = 1,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   128      IfxI2c_PinSelect_c = 2,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   129      IfxI2c_PinSelect_d = 3,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   130      IfxI2c_PinSelect_e = 4,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   131      IfxI2c_PinSelect_f = 5,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   132      IfxI2c_PinSelect_g = 6,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   133      IfxI2c_PinSelect_h = 7
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   134  } IfxI2c_PinSelect;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   135  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   136  /** \brief enable protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   137   * Definition in Ifx.I2C.PIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   138   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   139  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   140  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   141      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   142      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   143      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   144      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   145      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   146      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   147      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   148  } IfxI2c_ProtocolInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   149  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   150  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   151   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   152   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   154  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   155      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   156      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   157  } IfxI2c_SleepMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   158  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   159  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   160  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   161  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   162  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   163  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   164  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   165  /** \addtogroup IfxLld_I2c_Std_structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   166   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   167  /** \brief Pin Structure
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   168   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   169  typedef struct
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   170  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   171      IfxI2c_Scl_InOut *scl;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   172      IfxI2c_Sda_InOut *sda;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   173      IfxPort_PadDriver padDriver;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   174  } IfxI2c_Pins;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   175  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   176  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   177  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   178  /** \addtogroup IfxLld_I2c_Std_functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   179   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   180  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   181  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   182  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   183  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   184  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   185  /** \brief Returns if the bus is free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   186   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   187  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   188  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   189  /** \brief clears all DTR interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   190   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   191   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   192   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   193  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   194  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   195  /** \brief clears all Error Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   196   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   197   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   198   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   199  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   200  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   201  /** \brief Clears all Protocol Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   202   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   203   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   204   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   205  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   206  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   207  /** \brief clears the specified source of DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   208   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   209   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   210   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   211   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   212  IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   213  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   214  /** \brief clears the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   215   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   216   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   217   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   218   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   219  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   220  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   221  /** \brief clears the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   222   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   223   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   224   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   225   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   226  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   227  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   228  /** \brief Data request is cleared automatically
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   229   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   230   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   231   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   232  IFX_INLINE void IfxI2c_clearRequestBuffer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   233  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   234  /** \brief disables the specified source of DTR interupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   235   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   236   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   237   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   238   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   239  IFX_INLINE void IfxI2c_disableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   240  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   241  /** \brief disables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   242   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   243   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   244   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   245  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   246  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   247  /** \brief disables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   248   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   249   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   250   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   251   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   252  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   253  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   254  /** \brief disables the Protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   255   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   256   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   257   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   258  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   259  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   260  /** \brief disables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   261   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   262   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   263   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   264   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   265  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   266  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   267  /** \brief enables the specified source of DTR interupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   268   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   269   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   276   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   277   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   278  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   279  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   280  /** \brief enables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   281   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   282   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief enables the protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   289   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief enables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   295   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   296   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   297   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   298  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   299  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   300  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   301   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   302   * \return BusStatus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   303   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   304  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   305  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   306  /** \brief Returns the SRC pointer for I2C DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   307   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   308   * \return SRC pointer for I2C DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   309   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   310  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getDtrSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   311  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   312  /** \brief returns the status of specified DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   313   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   314   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   315   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   316   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   317  IFX_INLINE boolean IfxI2c_getDtrinterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   318  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   319  /** \brief returns the current status of error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   320   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   321   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   322   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   323  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   324  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   325  /** \brief returns the status of the error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   326   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   327   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   328   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   329   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   330  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   331  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   332  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   333   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   334   * \return SRC pointer for I2C Error Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   335   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   336  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   337  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   338  /** \brief returns the current raw status of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   339   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   340   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   341   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   342  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   343  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   344  /** \brief returns the status of  specified protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   345   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   346   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   347   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   348   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   349  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   350  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   351  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   352   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   353   * \return SRC pointer for I2C Protocol Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   354   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   355  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   356  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   357  /** \brief Returns if the Fifo is requesting new data
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   361  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   363   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief Sets width of I2C address to 7 or 10 bits
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   369   * \param mode selects 7 or 10 bits address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   370   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   371   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   372  IFX_INLINE void IfxI2c_setBitAddressMode(Ifx_I2C *i2c, IfxI2c_AddressMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   373  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   374  /** \brief selects the pin
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   375   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   376   * \param pisel pin to be select
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   377   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   378   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   379  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   380  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   381  /** \brief Sets the number of bytes to be received
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   382   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   383   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   384   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   385   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   386  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   387  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   388  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   389   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   390   * \param address device address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   391   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   392   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   393  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   394  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   395  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   396   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   397   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   398   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   399   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   400  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   401  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   402  /** \brief Sets the number of bytes to be tansmitted
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   403   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   404   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   405   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   406   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   407  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   408  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   409  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   410   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   411   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   412   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   413  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   414  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   415  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   416   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   417   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   418   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   419  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   420  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   421  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   422   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   423   * \param packet specifies the byte to be transfer
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   424   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   425   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   426  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   427  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   428  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   429  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   430  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   431  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   432  /** \brief Configures the Module as Master
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   433   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   434   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   435   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   436  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   437  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   438  /** \brief Disables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   439   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   440   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   441   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   442  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   443  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   444  /** \brief enables the DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   445   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   446   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   447   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   448   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   449   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   450  IFX_EXTERN void IfxI2c_enableDtrInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   451  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   452  /** \brief Enables the Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   453   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   454   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   455   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   456   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   457   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   458  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   459  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   460  /** \brief Enables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   461   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   462   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   463   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   464  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   465  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   466  /** \brief Enables the protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   467   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   468   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   469   * \param priority Priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   471   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   472  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   473  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   474  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   475   * \param i2c Resource index of the I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   476   * \return I2C module register address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   477   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   478  IFX_EXTERN Ifx_I2C *IfxI2c_getAddress(IfxI2c_Index i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   479  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   480  /** \brief Returns the real Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   481   * \return Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   482   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   483  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   484  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   485  /** \brief API to get the resource index of the I2C specified.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   486   * \param i2c Pointer to the I2C HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   487   * \return Resource index of the I2C
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   488   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   489  IFX_EXTERN IfxI2c_Index IfxI2c_getIndex(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   490  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   491  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   492   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   493   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   494  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   495  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   496  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   497   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   498   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   499  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   500  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   501  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   502   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   503   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   504  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   505  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   506  /** \brief resets the I2c kernel
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   507   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   508   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   509   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   510  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   511  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   512  /** \brief Calculates the desired baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   513   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   514   * \param baudrate specifies the baud rate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   515   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   516   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   517  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   518  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   519  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   520  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   521  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   522  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   523  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   524  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   525  /** \brief Configure the i2c master to high speed mode baudrate > 400kbits/s
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   526   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   527   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   528   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   529  IFX_EXTERN void IfxI2c_configureHighSpeedMode(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   530  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   531  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   532  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   533  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   534  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   535  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   536  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   537      boolean free = FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   538  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   539      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   540      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   541          free = TRUE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   542      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   543  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   544      return free;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   545  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   546  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   547  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   548  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   549  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   550      i2c->ICR.U = (1 << IFX_I2C_ICR_LSREQ_INT_OFF) | (1 << IFX_I2C_ICR_SREQ_INT_OFF) | (1 << IFX_I2C_ICR_LBREQ_INT_OFF) | (1 << IFX_I2C_ICR_BREQ_INT_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   551  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   552  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   553  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   554  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   555  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   556      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   557  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   558  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   559  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   560  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   561  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   562      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   563  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   565  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   566  IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   567  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   568      i2c->ICR.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   569  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   570  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   571  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   572  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   573  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   574      i2c->ERRIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   575  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   576  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   577  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   578  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   579  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   580      i2c->PIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   581  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   583  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   584  IFX_INLINE void IfxI2c_clearRequestBuffer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   585  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   586      i2c->FIFOCFG.B.CRBC = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   587  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   589  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   590  IFX_INLINE void IfxI2c_disableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   591  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   592      i2c->IMSC.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   593  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   594  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   595  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   596  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   597  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   598      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   599  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   601  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   602  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   603  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   604      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   605  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   607  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   608  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   609  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   610      i2c->IMSC.B.I2C_P_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   611  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   613  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   614  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   615  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   616      i2c->PIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   617  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   619  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   620  IFX_INLINE void IfxI2c_enableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   621  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   622      i2c->IMSC.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   623  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   625  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   626  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   627  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   628      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   629  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   631  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   632  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   633  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   634      i2c->ERRIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   635  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   637  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   638  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   639  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   640      i2c->IMSC.B.I2C_P_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   641  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   643  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   644  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   645  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   646      i2c->PIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   647  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   649  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   650  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   651  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   652      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   653  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   655  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   656  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getDtrSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   657  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   658      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   659      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   660          return &MODULE_SRC.I2C.I2C[0].DTR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   661      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   662      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   663      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   664          return &MODULE_SRC.I2C.I2C[1].DTR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   665      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   666  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   667  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   668  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   669  IFX_INLINE boolean IfxI2c_getDtrinterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   670  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   671      return (i2c->RIS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   672  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   673  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   674  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   675  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   676  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   677      return i2c->RIS.B.I2C_ERR_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   678  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   679  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   680  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   681  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   682  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   683      return (i2c->ERRIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   684  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   685  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   686  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   687  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   688  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   689      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   690      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   691          return &MODULE_SRC.I2C.I2C[0].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   692      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   693      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   694      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   695          return &MODULE_SRC.I2C.I2C[1].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   696      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   697  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   698  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   699  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   700  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   701  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   702      return i2c->RIS.B.I2C_P_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   703  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   704  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   705  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   706  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   707  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   708      return (i2c->PIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   709  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   710  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   711  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   712  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   713  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   714      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   715      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   716          return &MODULE_SRC.I2C.I2C[0].P;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   717      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   718      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   719      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   720          return &MODULE_SRC.I2C.I2C[1].P;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   721      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   722  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   723  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   724  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   725  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   726  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   727      return i2c->RIS.U & 0x0F ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   728  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   729  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   730  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   731  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   732  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   733      i2c->RUNCTRL.U = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   734  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   735  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   736  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   737  IFX_INLINE void IfxI2c_setBitAddressMode(Ifx_I2C *i2c, IfxI2c_AddressMode mode)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   738  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   739      i2c->ADDRCFG.B.TBAM = mode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   740  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   741  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   742  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   743  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   744  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   745      i2c->GPCTL.B.PISEL = pisel;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   746  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   747  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   748  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   749  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   750  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   751      i2c->MRPSCTRL.B.MRPS = size;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   752  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   753  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   754  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   755  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   756  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   757      i2c->ADDRCFG.B.ADR = address;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   758  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   759  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   760  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   761  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   762  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   763      i2c->CLC1.B.EDIS = mode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   764  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   765  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   766  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   767  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   768  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   769      i2c->TPSCTRL.B.TPS = size;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   770  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   771  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   772  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   773  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   774  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   775      i2c->RUNCTRL.U = 0;
	mov	d15,#0
	st.w	[a4]16,d15
.L324:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   776  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   777  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   778  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   779  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   780  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   781      while (IfxI2c_getBusStatus(i2c) != IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   782      {}
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   783  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   784  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   785  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   786  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   787  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   788      i2c->TXD.U = packet;
	movh.a	a3,#1
.L327:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   317  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   318      // enter config Mode
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   319      IfxI2c_stop(i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   320  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   321      i2c->ADDRCFG.B.MCE  = 1; // master code enable
	ld.bu	d15,[a4]34
.L334:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    16   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    18   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    25   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    32   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    40   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    41   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    42   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    43   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    44   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    45   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    46   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    47   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    48  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    49  #ifndef IFXI2C_H
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    50  #define IFXI2C_H 1
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    51  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    52  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    53  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    54  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    55  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    56  #include "_Impl/IfxI2c_cfg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    57  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    58  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    59  #include "IfxI2c_bf.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    60  #include "_PinMap/IfxI2c_PinMap.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    61  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    62  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    63  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    64  /*-----------------------------------Macros-----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    65  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    66  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    67  /** \brief Master code for high speed mode
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    68   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    69  #define IFXI2C_HIGHSPEED_MASTER_CODE (0xEU)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    70  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    72  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    73  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    74  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    75  /** \addtogroup IfxLld_I2c_Std_enums
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    76   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    77  /** \brief Selects width of address bits (7 or 10 bits)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    78   * Definition in Ifx_I2C.ADDRCFG.B.TBAM
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    79   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    80  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    81  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    82      IfxI2c_AddressMode_7Bit  = 0, /**< \brief sets 7 bit address */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    83      IfxI2c_AddressMode_10Bit = 1  /**< \brief sets 10 bit address */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    84  } IfxI2c_AddressMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    85  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    86  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    87  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    88      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    89      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    90      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    91      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    92  } IfxI2c_BusStatus;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    93  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    94  /** \brief enables DTR interrupt flags
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    95   * Definition in Ifx.I2C.IMSC.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    96   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    97  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    98  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    99      IfxI2c_DtrInterruptSource_lastSingleRequest = IFX_I2C_IMSC_LSREQ_INT_OFF,  /**< \brief last single service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   100      IfxI2c_DtrInterruptSource_singleRequest     = IFX_I2C_IMSC_SREQ_INT_OFF,   /**< \brief single service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   101      IfxI2c_DtrInterruptSource_lastBurstRequest  = IFX_I2C_IMSC_LBREQ_INT_OFF,  /**< \brief last burst service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   102      IfxI2c_DtrInterruptSource_burstRequest      = IFX_I2C_IMSC_BREQ_INT_OFF    /**< \brief burst service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   103  } IfxI2c_DtrInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   104  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   105  /** \brief enable error interrupt request source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   106   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   107   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   108  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   109  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   110      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   111      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   112      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   113      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   114  } IfxI2c_ErrorInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   115  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   116  /** \brief Select speed mode. Standard and Fast or High Speed mode.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   117   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   118  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   119  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   120      IfxI2c_Mode_StandardAndFast = 0,  /**< \brief Sets Standard and Fast speed mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   121      IfxI2c_Mode_HighSpeed       = 1   /**< \brief Sets HighSpeed Mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   122  } IfxI2c_Mode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   123  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   124  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   125  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   126      IfxI2c_PinSelect_a = 0,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   127      IfxI2c_PinSelect_b = 1,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   128      IfxI2c_PinSelect_c = 2,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   129      IfxI2c_PinSelect_d = 3,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   130      IfxI2c_PinSelect_e = 4,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   131      IfxI2c_PinSelect_f = 5,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   132      IfxI2c_PinSelect_g = 6,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   133      IfxI2c_PinSelect_h = 7
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   134  } IfxI2c_PinSelect;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   135  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   136  /** \brief enable protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   137   * Definition in Ifx.I2C.PIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   138   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   139  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   140  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   141      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   142      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   143      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   144      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   145      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   146      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   147      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   148  } IfxI2c_ProtocolInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   149  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   150  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   151   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   152   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   154  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   155      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   156      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   157  } IfxI2c_SleepMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   158  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   159  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   160  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   161  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   162  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   163  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   164  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   165  /** \addtogroup IfxLld_I2c_Std_structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   166   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   167  /** \brief Pin Structure
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   168   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   169  typedef struct
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   170  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   171      IfxI2c_Scl_InOut *scl;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   172      IfxI2c_Sda_InOut *sda;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   173      IfxPort_PadDriver padDriver;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   174  } IfxI2c_Pins;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   175  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   176  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   177  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   178  /** \addtogroup IfxLld_I2c_Std_functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   179   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   180  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   181  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   182  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   183  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   184  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   185  /** \brief Returns if the bus is free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   186   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   187  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   188  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   189  /** \brief clears all DTR interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   190   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   191   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   192   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   193  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   194  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   195  /** \brief clears all Error Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   196   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   197   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   198   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   199  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   200  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   201  /** \brief Clears all Protocol Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   202   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   203   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   204   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   205  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   206  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   207  /** \brief clears the specified source of DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   208   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   209   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   210   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   211   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   212  IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   213  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   214  /** \brief clears the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   215   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   216   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   217   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   218   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   219  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   220  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   221  /** \brief clears the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   222   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   223   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   224   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   225   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   226  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   227  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   228  /** \brief Data request is cleared automatically
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   229   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   230   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   231   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   232  IFX_INLINE void IfxI2c_clearRequestBuffer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   233  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   234  /** \brief disables the specified source of DTR interupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   235   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   236   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   237   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   238   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   239  IFX_INLINE void IfxI2c_disableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   240  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   241  /** \brief disables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   242   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   243   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   244   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   245  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   246  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   247  /** \brief disables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   248   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   249   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   250   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   251   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   252  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   253  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   254  /** \brief disables the Protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   255   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   256   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   257   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   258  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   259  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   260  /** \brief disables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   261   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   262   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   263   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   264   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   265  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   266  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   267  /** \brief enables the specified source of DTR interupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   268   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   269   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   276   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   277   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   278  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   279  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   280  /** \brief enables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   281   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   282   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief enables the protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   289   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief enables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   295   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   296   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   297   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   298  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   299  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   300  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   301   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   302   * \return BusStatus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   303   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   304  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   305  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   306  /** \brief Returns the SRC pointer for I2C DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   307   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   308   * \return SRC pointer for I2C DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   309   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   310  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getDtrSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   311  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   312  /** \brief returns the status of specified DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   313   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   314   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   315   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   316   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   317  IFX_INLINE boolean IfxI2c_getDtrinterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   318  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   319  /** \brief returns the current status of error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   320   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   321   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   322   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   323  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   324  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   325  /** \brief returns the status of the error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   326   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   327   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   328   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   329   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   330  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   331  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   332  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   333   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   334   * \return SRC pointer for I2C Error Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   335   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   336  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   337  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   338  /** \brief returns the current raw status of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   339   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   340   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   341   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   342  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   343  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   344  /** \brief returns the status of  specified protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   345   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   346   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   347   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   348   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   349  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   350  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   351  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   352   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   353   * \return SRC pointer for I2C Protocol Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   354   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   355  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   356  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   357  /** \brief Returns if the Fifo is requesting new data
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   361  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   363   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief Sets width of I2C address to 7 or 10 bits
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   369   * \param mode selects 7 or 10 bits address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   370   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   371   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   372  IFX_INLINE void IfxI2c_setBitAddressMode(Ifx_I2C *i2c, IfxI2c_AddressMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   373  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   374  /** \brief selects the pin
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   375   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   376   * \param pisel pin to be select
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   377   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   378   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   379  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   380  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   381  /** \brief Sets the number of bytes to be received
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   382   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   383   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   384   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   385   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   386  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   387  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   388  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   389   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   390   * \param address device address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   391   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   392   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   393  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   394  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   395  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   396   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   397   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   398   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   399   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   400  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   401  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   402  /** \brief Sets the number of bytes to be tansmitted
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   403   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   404   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   405   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   406   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   407  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   408  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   409  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   410   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   411   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   412   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   413  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   414  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   415  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   416   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   417   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   418   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   419  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   420  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   421  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   422   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   423   * \param packet specifies the byte to be transfer
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   424   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   425   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   426  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   427  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   428  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   429  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   430  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   431  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   432  /** \brief Configures the Module as Master
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   433   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   434   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   435   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   436  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   437  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   438  /** \brief Disables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   439   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   440   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   441   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   442  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   443  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   444  /** \brief enables the DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   445   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   446   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   447   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   448   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   449   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   450  IFX_EXTERN void IfxI2c_enableDtrInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   451  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   452  /** \brief Enables the Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   453   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   454   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   455   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   456   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   457   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   458  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   459  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   460  /** \brief Enables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   461   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   462   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   463   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   464  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   465  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   466  /** \brief Enables the protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   467   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   468   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   469   * \param priority Priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   471   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   472  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   473  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   474  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   475   * \param i2c Resource index of the I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   476   * \return I2C module register address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   477   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   478  IFX_EXTERN Ifx_I2C *IfxI2c_getAddress(IfxI2c_Index i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   479  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   480  /** \brief Returns the real Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   481   * \return Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   482   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   483  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   484  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   485  /** \brief API to get the resource index of the I2C specified.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   486   * \param i2c Pointer to the I2C HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   487   * \return Resource index of the I2C
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   488   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   489  IFX_EXTERN IfxI2c_Index IfxI2c_getIndex(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   490  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   491  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   492   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   493   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   494  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   495  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   496  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   497   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   498   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   499  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   500  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   501  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   502   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   503   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   504  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   505  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   506  /** \brief resets the I2c kernel
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   507   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   508   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   509   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   510  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   511  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   512  /** \brief Calculates the desired baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   513   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   514   * \param baudrate specifies the baud rate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   515   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   516   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   517  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   518  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   519  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   520  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   521  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   522  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   523  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   524  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   525  /** \brief Configure the i2c master to high speed mode baudrate > 400kbits/s
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   526   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   527   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   528   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   529  IFX_EXTERN void IfxI2c_configureHighSpeedMode(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   530  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   531  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   532  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   533  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   534  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   535  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   536  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   537      boolean free = FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   538  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   539      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   540      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   541          free = TRUE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   542      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   543  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   544      return free;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   545  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   546  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   547  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   548  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   549  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   550      i2c->ICR.U = (1 << IFX_I2C_ICR_LSREQ_INT_OFF) | (1 << IFX_I2C_ICR_SREQ_INT_OFF) | (1 << IFX_I2C_ICR_LBREQ_INT_OFF) | (1 << IFX_I2C_ICR_BREQ_INT_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   551  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   552  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   553  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   554  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   555  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   556      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   557  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   558  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   559  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   560  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   561  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   562      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   563  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   565  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   566  IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   567  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   568      i2c->ICR.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   569  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   570  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   571  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   572  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   573  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   574      i2c->ERRIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   575  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   576  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   577  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   578  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   579  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   580      i2c->PIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   581  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   583  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   584  IFX_INLINE void IfxI2c_clearRequestBuffer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   585  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   586      i2c->FIFOCFG.B.CRBC = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   587  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   589  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   590  IFX_INLINE void IfxI2c_disableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   591  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   592      i2c->IMSC.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   593  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   594  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   595  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   596  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   597  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   598      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   599  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   601  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   602  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   603  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   604      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   605  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   607  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   608  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   609  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   610      i2c->IMSC.B.I2C_P_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   611  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   613  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   614  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   615  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   616      i2c->PIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   617  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   619  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   620  IFX_INLINE void IfxI2c_enableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   621  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   622      i2c->IMSC.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   623  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   625  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   626  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   627  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   628      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   629  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   631  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   632  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   633  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   634      i2c->ERRIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   635  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   637  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   638  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   639  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   640      i2c->IMSC.B.I2C_P_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   641  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   643  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   644  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   645  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   646      i2c->PIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   647  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   649  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   650  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   651  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   652      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   653  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   655  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   656  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getDtrSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   657  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   658      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   659      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   660          return &MODULE_SRC.I2C.I2C[0].DTR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   661      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   662      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   663      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   664          return &MODULE_SRC.I2C.I2C[1].DTR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   665      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   666  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   667  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   668  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   669  IFX_INLINE boolean IfxI2c_getDtrinterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   670  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   671      return (i2c->RIS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   672  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   673  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   674  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   675  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   676  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   677      return i2c->RIS.B.I2C_ERR_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   678  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   679  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   680  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   681  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   682  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   683      return (i2c->ERRIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   684  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   685  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   686  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   687  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   688  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   689      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   690      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   691          return &MODULE_SRC.I2C.I2C[0].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   692      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   693      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   694      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   695          return &MODULE_SRC.I2C.I2C[1].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   696      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   697  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   698  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   699  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   700  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   701  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   702      return i2c->RIS.B.I2C_P_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   703  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   704  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   705  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   706  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   707  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   708      return (i2c->PIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   709  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   710  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   711  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   712  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   713  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   714      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   715      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   716          return &MODULE_SRC.I2C.I2C[0].P;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   717      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   718      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   719      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   720          return &MODULE_SRC.I2C.I2C[1].P;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   721      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   722  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   723  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   724  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   725  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   726  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   727      return i2c->RIS.U & 0x0F ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   728  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   729  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   730  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   731  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   732  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   733      i2c->RUNCTRL.U = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   734  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   735  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   736  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   737  IFX_INLINE void IfxI2c_setBitAddressMode(Ifx_I2C *i2c, IfxI2c_AddressMode mode)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   738  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   739      i2c->ADDRCFG.B.TBAM = mode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   740  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   741  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   742  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   743  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   744  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   745      i2c->GPCTL.B.PISEL = pisel;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   746  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   747  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   748  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   749  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   750  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   751      i2c->MRPSCTRL.B.MRPS = size;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   752  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   753  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   754  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   755  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   756  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   757      i2c->ADDRCFG.B.ADR = address;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   758  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   759  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   760  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   761  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   762  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   763      i2c->CLC1.B.EDIS = mode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   764  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   765  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   766  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   767  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   768  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   769      i2c->TPSCTRL.B.TPS = size;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   770  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   771  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   772  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   773  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   774  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   775      i2c->RUNCTRL.U = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   776  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   777  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   778  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   779  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   780  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   781      while (IfxI2c_getBusStatus(i2c) != IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   782      {}
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   783  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   784  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   785  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   786  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   787  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   788      i2c->TXD.U = packet;
	add.a	a3,a4
.L335:
	or	d15,#4
	st.b	[a4]34,d15
.L591:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   322      i2c->ADDRCFG.B.SONA = 1;
	ld.bu	d15,[a4]34
.L592:
	or	d15,#16
	st.b	[a4]34,d15
.L593:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   323      i2c->ADDRCFG.B.SOPE = 1;
	ld.bu	d15,[a4]34
.L594:
	or	d15,#32
	st.b	[a4]34,d15
.L338:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    16   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    18   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    25   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    32   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    40   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    41   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    42   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    43   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    44   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    45   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    46   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    47   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    48  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    49  #ifndef IFXI2C_H
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    50  #define IFXI2C_H 1
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    51  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    52  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    53  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    54  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    55  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    56  #include "_Impl/IfxI2c_cfg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    57  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    58  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    59  #include "IfxI2c_bf.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    60  #include "_PinMap/IfxI2c_PinMap.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    61  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    62  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    63  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    64  /*-----------------------------------Macros-----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    65  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    66  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    67  /** \brief Master code for high speed mode
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    68   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    69  #define IFXI2C_HIGHSPEED_MASTER_CODE (0xEU)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    70  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    72  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    73  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    74  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    75  /** \addtogroup IfxLld_I2c_Std_enums
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    76   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    77  /** \brief Selects width of address bits (7 or 10 bits)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    78   * Definition in Ifx_I2C.ADDRCFG.B.TBAM
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    79   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    80  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    81  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    82      IfxI2c_AddressMode_7Bit  = 0, /**< \brief sets 7 bit address */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    83      IfxI2c_AddressMode_10Bit = 1  /**< \brief sets 10 bit address */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    84  } IfxI2c_AddressMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    85  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    86  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    87  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    88      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    89      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    90      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    91      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    92  } IfxI2c_BusStatus;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    93  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    94  /** \brief enables DTR interrupt flags
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    95   * Definition in Ifx.I2C.IMSC.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    96   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    97  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    98  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    99      IfxI2c_DtrInterruptSource_lastSingleRequest = IFX_I2C_IMSC_LSREQ_INT_OFF,  /**< \brief last single service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   100      IfxI2c_DtrInterruptSource_singleRequest     = IFX_I2C_IMSC_SREQ_INT_OFF,   /**< \brief single service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   101      IfxI2c_DtrInterruptSource_lastBurstRequest  = IFX_I2C_IMSC_LBREQ_INT_OFF,  /**< \brief last burst service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   102      IfxI2c_DtrInterruptSource_burstRequest      = IFX_I2C_IMSC_BREQ_INT_OFF    /**< \brief burst service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   103  } IfxI2c_DtrInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   104  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   105  /** \brief enable error interrupt request source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   106   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   107   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   108  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   109  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   110      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   111      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   112      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   113      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   114  } IfxI2c_ErrorInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   115  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   116  /** \brief Select speed mode. Standard and Fast or High Speed mode.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   117   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   118  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   119  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   120      IfxI2c_Mode_StandardAndFast = 0,  /**< \brief Sets Standard and Fast speed mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   121      IfxI2c_Mode_HighSpeed       = 1   /**< \brief Sets HighSpeed Mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   122  } IfxI2c_Mode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   123  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   124  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   125  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   126      IfxI2c_PinSelect_a = 0,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   127      IfxI2c_PinSelect_b = 1,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   128      IfxI2c_PinSelect_c = 2,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   129      IfxI2c_PinSelect_d = 3,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   130      IfxI2c_PinSelect_e = 4,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   131      IfxI2c_PinSelect_f = 5,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   132      IfxI2c_PinSelect_g = 6,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   133      IfxI2c_PinSelect_h = 7
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   134  } IfxI2c_PinSelect;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   135  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   136  /** \brief enable protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   137   * Definition in Ifx.I2C.PIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   138   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   139  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   140  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   141      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   142      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   143      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   144      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   145      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   146      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   147      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   148  } IfxI2c_ProtocolInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   149  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   150  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   151   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   152   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   154  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   155      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   156      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   157  } IfxI2c_SleepMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   158  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   159  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   160  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   161  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   162  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   163  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   164  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   165  /** \addtogroup IfxLld_I2c_Std_structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   166   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   167  /** \brief Pin Structure
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   168   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   169  typedef struct
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   170  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   171      IfxI2c_Scl_InOut *scl;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   172      IfxI2c_Sda_InOut *sda;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   173      IfxPort_PadDriver padDriver;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   174  } IfxI2c_Pins;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   175  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   176  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   177  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   178  /** \addtogroup IfxLld_I2c_Std_functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   179   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   180  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   181  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   182  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   183  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   184  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   185  /** \brief Returns if the bus is free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   186   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   187  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   188  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   189  /** \brief clears all DTR interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   190   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   191   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   192   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   193  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   194  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   195  /** \brief clears all Error Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   196   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   197   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   198   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   199  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   200  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   201  /** \brief Clears all Protocol Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   202   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   203   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   204   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   205  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   206  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   207  /** \brief clears the specified source of DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   208   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   209   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   210   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   211   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   212  IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   213  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   214  /** \brief clears the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   215   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   216   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   217   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   218   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   219  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   220  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   221  /** \brief clears the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   222   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   223   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   224   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   225   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   226  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   227  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   228  /** \brief Data request is cleared automatically
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   229   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   230   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   231   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   232  IFX_INLINE void IfxI2c_clearRequestBuffer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   233  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   234  /** \brief disables the specified source of DTR interupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   235   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   236   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   237   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   238   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   239  IFX_INLINE void IfxI2c_disableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   240  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   241  /** \brief disables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   242   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   243   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   244   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   245  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   246  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   247  /** \brief disables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   248   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   249   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   250   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   251   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   252  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   253  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   254  /** \brief disables the Protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   255   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   256   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   257   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   258  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   259  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   260  /** \brief disables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   261   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   262   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   263   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   264   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   265  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   266  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   267  /** \brief enables the specified source of DTR interupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   268   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   269   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   276   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   277   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   278  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   279  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   280  /** \brief enables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   281   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   282   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief enables the protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   289   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief enables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   295   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   296   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   297   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   298  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   299  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   300  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   301   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   302   * \return BusStatus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   303   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   304  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   305  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   306  /** \brief Returns the SRC pointer for I2C DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   307   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   308   * \return SRC pointer for I2C DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   309   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   310  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getDtrSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   311  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   312  /** \brief returns the status of specified DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   313   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   314   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   315   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   316   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   317  IFX_INLINE boolean IfxI2c_getDtrinterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   318  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   319  /** \brief returns the current status of error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   320   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   321   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   322   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   323  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   324  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   325  /** \brief returns the status of the error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   326   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   327   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   328   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   329   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   330  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   331  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   332  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   333   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   334   * \return SRC pointer for I2C Error Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   335   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   336  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   337  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   338  /** \brief returns the current raw status of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   339   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   340   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   341   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   342  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   343  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   344  /** \brief returns the status of  specified protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   345   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   346   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   347   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   348   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   349  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   350  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   351  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   352   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   353   * \return SRC pointer for I2C Protocol Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   354   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   355  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   356  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   357  /** \brief Returns if the Fifo is requesting new data
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   361  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   363   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief Sets width of I2C address to 7 or 10 bits
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   369   * \param mode selects 7 or 10 bits address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   370   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   371   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   372  IFX_INLINE void IfxI2c_setBitAddressMode(Ifx_I2C *i2c, IfxI2c_AddressMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   373  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   374  /** \brief selects the pin
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   375   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   376   * \param pisel pin to be select
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   377   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   378   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   379  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   380  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   381  /** \brief Sets the number of bytes to be received
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   382   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   383   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   384   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   385   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   386  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   387  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   388  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   389   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   390   * \param address device address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   391   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   392   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   393  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   394  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   395  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   396   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   397   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   398   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   399   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   400  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   401  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   402  /** \brief Sets the number of bytes to be tansmitted
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   403   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   404   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   405   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   406   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   407  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   408  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   409  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   410   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   411   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   412   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   413  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   414  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   415  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   416   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   417   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   418   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   419  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   420  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   421  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   422   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   423   * \param packet specifies the byte to be transfer
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   424   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   425   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   426  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   427  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   428  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   429  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   430  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   431  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   432  /** \brief Configures the Module as Master
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   433   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   434   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   435   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   436  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   437  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   438  /** \brief Disables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   439   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   440   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   441   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   442  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   443  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   444  /** \brief enables the DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   445   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   446   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   447   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   448   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   449   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   450  IFX_EXTERN void IfxI2c_enableDtrInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   451  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   452  /** \brief Enables the Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   453   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   454   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   455   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   456   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   457   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   458  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   459  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   460  /** \brief Enables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   461   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   462   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   463   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   464  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   465  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   466  /** \brief Enables the protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   467   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   468   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   469   * \param priority Priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   471   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   472  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   473  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   474  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   475   * \param i2c Resource index of the I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   476   * \return I2C module register address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   477   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   478  IFX_EXTERN Ifx_I2C *IfxI2c_getAddress(IfxI2c_Index i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   479  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   480  /** \brief Returns the real Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   481   * \return Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   482   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   483  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   484  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   485  /** \brief API to get the resource index of the I2C specified.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   486   * \param i2c Pointer to the I2C HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   487   * \return Resource index of the I2C
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   488   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   489  IFX_EXTERN IfxI2c_Index IfxI2c_getIndex(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   490  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   491  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   492   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   493   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   494  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   495  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   496  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   497   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   498   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   499  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   500  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   501  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   502   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   503   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   504  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   505  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   506  /** \brief resets the I2c kernel
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   507   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   508   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   509   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   510  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   511  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   512  /** \brief Calculates the desired baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   513   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   514   * \param baudrate specifies the baud rate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   515   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   516   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   517  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   518  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   519  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   520  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   521  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   522  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   523  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   524  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   525  /** \brief Configure the i2c master to high speed mode baudrate > 400kbits/s
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   526   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   527   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   528   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   529  IFX_EXTERN void IfxI2c_configureHighSpeedMode(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   530  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   531  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   532  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   533  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   534  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   535  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   536  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   537      boolean free = FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   538  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   539      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   540      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   541          free = TRUE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   542      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   543  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   544      return free;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   545  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   546  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   547  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   548  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   549  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   550      i2c->ICR.U = (1 << IFX_I2C_ICR_LSREQ_INT_OFF) | (1 << IFX_I2C_ICR_SREQ_INT_OFF) | (1 << IFX_I2C_ICR_LBREQ_INT_OFF) | (1 << IFX_I2C_ICR_BREQ_INT_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   551  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   552  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   553  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   554  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   555  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   556      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   557  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   558  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   559  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   560  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   561  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   562      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   563  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   565  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   566  IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   567  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   568      i2c->ICR.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   569  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   570  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   571  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   572  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   573  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   574      i2c->ERRIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   575  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   576  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   577  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   578  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   579  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   580      i2c->PIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   581  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   583  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   584  IFX_INLINE void IfxI2c_clearRequestBuffer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   585  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   586      i2c->FIFOCFG.B.CRBC = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   587  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   589  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   590  IFX_INLINE void IfxI2c_disableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   591  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   592      i2c->IMSC.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   593  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   594  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   595  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   596  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   597  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   598      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   599  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   601  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   602  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   603  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   604      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   605  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   607  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   608  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   609  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   610      i2c->IMSC.B.I2C_P_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   611  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   613  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   614  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   615  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   616      i2c->PIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   617  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   619  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   620  IFX_INLINE void IfxI2c_enableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   621  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   622      i2c->IMSC.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   623  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   625  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   626  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   627  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   628      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   629  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   631  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   632  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   633  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   634      i2c->ERRIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   635  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   637  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   638  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   639  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   640      i2c->IMSC.B.I2C_P_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   641  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   643  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   644  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   645  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   646      i2c->PIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   647  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   649  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   650  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   651  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   652      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   653  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   655  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   656  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getDtrSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   657  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   658      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   659      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   660          return &MODULE_SRC.I2C.I2C[0].DTR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   661      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   662      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   663      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   664          return &MODULE_SRC.I2C.I2C[1].DTR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   665      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   666  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   667  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   668  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   669  IFX_INLINE boolean IfxI2c_getDtrinterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   670  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   671      return (i2c->RIS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   672  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   673  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   674  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   675  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   676  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   677      return i2c->RIS.B.I2C_ERR_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   678  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   679  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   680  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   681  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   682  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   683      return (i2c->ERRIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   684  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   685  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   686  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   687  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   688  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   689      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   690      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   691          return &MODULE_SRC.I2C.I2C[0].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   692      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   693      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   694      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   695          return &MODULE_SRC.I2C.I2C[1].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   696      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   697  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   698  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   699  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   700  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   701  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   702      return i2c->RIS.B.I2C_P_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   703  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   704  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   705  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   706  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   707  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   708      return (i2c->PIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   709  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   710  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   711  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   712  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   713  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   714      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   715      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   716          return &MODULE_SRC.I2C.I2C[0].P;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   717      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   718      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   719      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   720          return &MODULE_SRC.I2C.I2C[1].P;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   721      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   722  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   723  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   724  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   725  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   726  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   727      return i2c->RIS.U & 0x0F ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   728  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   729  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   730  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   731  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   732  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   733      i2c->RUNCTRL.U = 1;
	mov	d15,#1
	st.w	[a4]16,d15
.L339:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   734  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   735  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   736  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   737  IFX_INLINE void IfxI2c_setBitAddressMode(Ifx_I2C *i2c, IfxI2c_AddressMode mode)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   738  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   739      i2c->ADDRCFG.B.TBAM = mode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   740  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   741  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   742  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   743  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   744  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   745      i2c->GPCTL.B.PISEL = pisel;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   746  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   747  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   748  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   749  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   750  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   751      i2c->MRPSCTRL.B.MRPS = size;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   752  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   753  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   754  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   755  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   756  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   757      i2c->ADDRCFG.B.ADR = address;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   758  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   759  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   760  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   761  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   762  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   763      i2c->CLC1.B.EDIS = mode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   764  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   765  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   766  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   767  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   768  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   769      i2c->TPSCTRL.B.TPS = size;
	ld.hu	d15,[a4]52
.L595:
	insert	d15,d15,#1,#0,#14
	st.h	[a4]52,d15
.L336:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   770  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   771  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   772  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   773  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   774  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   775      i2c->RUNCTRL.U = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   776  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   777  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   778  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   779  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   780  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   781      while (IfxI2c_getBusStatus(i2c) != IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   782      {}
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   783  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   784  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   785  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   786  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   787  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   788      i2c->TXD.U = packet;
	mov	d15,#14
	st.w	[a3]-32768,d15

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   324  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   325      IfxI2c_run(i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   326      IfxI2c_setTransmitPacketSize(i2c, 1);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   327      IfxI2c_writeFifo(i2c, IFXI2C_HIGHSPEED_MASTER_CODE); // Send the Master code to switch to high speed mode
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   328  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   329      while (!(IfxI2c_getProtocolInterruptSourceStatus(i2c, IfxI2c_ProtocolInterruptSource_transmissionEnd)))
.L33:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    16   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    18   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    25   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    32   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    40   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    41   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    42   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    43   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    44   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    45   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    46   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    47   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    48  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    49  #ifndef IFXI2C_H
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    50  #define IFXI2C_H 1
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    51  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    52  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    53  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    54  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    55  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    56  #include "_Impl/IfxI2c_cfg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    57  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    58  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    59  #include "IfxI2c_bf.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    60  #include "_PinMap/IfxI2c_PinMap.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    61  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    62  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    63  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    64  /*-----------------------------------Macros-----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    65  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    66  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    67  /** \brief Master code for high speed mode
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    68   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    69  #define IFXI2C_HIGHSPEED_MASTER_CODE (0xEU)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    70  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    72  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    73  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    74  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    75  /** \addtogroup IfxLld_I2c_Std_enums
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    76   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    77  /** \brief Selects width of address bits (7 or 10 bits)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    78   * Definition in Ifx_I2C.ADDRCFG.B.TBAM
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    79   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    80  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    81  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    82      IfxI2c_AddressMode_7Bit  = 0, /**< \brief sets 7 bit address */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    83      IfxI2c_AddressMode_10Bit = 1  /**< \brief sets 10 bit address */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    84  } IfxI2c_AddressMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    85  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    86  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    87  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    88      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    89      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    90      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    91      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    92  } IfxI2c_BusStatus;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    93  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    94  /** \brief enables DTR interrupt flags
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    95   * Definition in Ifx.I2C.IMSC.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    96   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    97  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    98  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    99      IfxI2c_DtrInterruptSource_lastSingleRequest = IFX_I2C_IMSC_LSREQ_INT_OFF,  /**< \brief last single service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   100      IfxI2c_DtrInterruptSource_singleRequest     = IFX_I2C_IMSC_SREQ_INT_OFF,   /**< \brief single service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   101      IfxI2c_DtrInterruptSource_lastBurstRequest  = IFX_I2C_IMSC_LBREQ_INT_OFF,  /**< \brief last burst service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   102      IfxI2c_DtrInterruptSource_burstRequest      = IFX_I2C_IMSC_BREQ_INT_OFF    /**< \brief burst service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   103  } IfxI2c_DtrInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   104  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   105  /** \brief enable error interrupt request source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   106   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   107   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   108  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   109  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   110      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   111      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   112      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   113      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   114  } IfxI2c_ErrorInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   115  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   116  /** \brief Select speed mode. Standard and Fast or High Speed mode.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   117   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   118  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   119  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   120      IfxI2c_Mode_StandardAndFast = 0,  /**< \brief Sets Standard and Fast speed mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   121      IfxI2c_Mode_HighSpeed       = 1   /**< \brief Sets HighSpeed Mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   122  } IfxI2c_Mode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   123  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   124  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   125  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   126      IfxI2c_PinSelect_a = 0,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   127      IfxI2c_PinSelect_b = 1,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   128      IfxI2c_PinSelect_c = 2,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   129      IfxI2c_PinSelect_d = 3,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   130      IfxI2c_PinSelect_e = 4,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   131      IfxI2c_PinSelect_f = 5,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   132      IfxI2c_PinSelect_g = 6,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   133      IfxI2c_PinSelect_h = 7
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   134  } IfxI2c_PinSelect;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   135  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   136  /** \brief enable protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   137   * Definition in Ifx.I2C.PIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   138   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   139  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   140  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   141      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   142      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   143      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   144      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   145      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   146      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   147      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   148  } IfxI2c_ProtocolInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   149  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   150  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   151   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   152   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   154  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   155      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   156      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   157  } IfxI2c_SleepMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   158  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   159  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   160  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   161  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   162  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   163  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   164  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   165  /** \addtogroup IfxLld_I2c_Std_structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   166   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   167  /** \brief Pin Structure
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   168   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   169  typedef struct
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   170  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   171      IfxI2c_Scl_InOut *scl;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   172      IfxI2c_Sda_InOut *sda;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   173      IfxPort_PadDriver padDriver;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   174  } IfxI2c_Pins;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   175  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   176  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   177  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   178  /** \addtogroup IfxLld_I2c_Std_functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   179   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   180  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   181  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   182  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   183  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   184  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   185  /** \brief Returns if the bus is free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   186   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   187  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   188  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   189  /** \brief clears all DTR interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   190   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   191   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   192   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   193  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   194  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   195  /** \brief clears all Error Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   196   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   197   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   198   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   199  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   200  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   201  /** \brief Clears all Protocol Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   202   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   203   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   204   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   205  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   206  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   207  /** \brief clears the specified source of DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   208   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   209   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   210   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   211   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   212  IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   213  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   214  /** \brief clears the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   215   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   216   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   217   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   218   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   219  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   220  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   221  /** \brief clears the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   222   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   223   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   224   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   225   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   226  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   227  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   228  /** \brief Data request is cleared automatically
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   229   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   230   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   231   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   232  IFX_INLINE void IfxI2c_clearRequestBuffer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   233  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   234  /** \brief disables the specified source of DTR interupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   235   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   236   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   237   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   238   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   239  IFX_INLINE void IfxI2c_disableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   240  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   241  /** \brief disables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   242   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   243   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   244   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   245  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   246  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   247  /** \brief disables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   248   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   249   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   250   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   251   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   252  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   253  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   254  /** \brief disables the Protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   255   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   256   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   257   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   258  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   259  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   260  /** \brief disables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   261   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   262   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   263   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   264   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   265  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   266  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   267  /** \brief enables the specified source of DTR interupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   268   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   269   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   276   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   277   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   278  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   279  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   280  /** \brief enables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   281   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   282   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief enables the protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   289   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief enables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   295   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   296   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   297   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   298  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   299  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   300  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   301   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   302   * \return BusStatus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   303   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   304  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   305  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   306  /** \brief Returns the SRC pointer for I2C DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   307   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   308   * \return SRC pointer for I2C DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   309   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   310  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getDtrSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   311  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   312  /** \brief returns the status of specified DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   313   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   314   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   315   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   316   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   317  IFX_INLINE boolean IfxI2c_getDtrinterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   318  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   319  /** \brief returns the current status of error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   320   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   321   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   322   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   323  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   324  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   325  /** \brief returns the status of the error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   326   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   327   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   328   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   329   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   330  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   331  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   332  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   333   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   334   * \return SRC pointer for I2C Error Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   335   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   336  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   337  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   338  /** \brief returns the current raw status of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   339   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   340   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   341   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   342  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   343  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   344  /** \brief returns the status of  specified protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   345   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   346   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   347   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   348   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   349  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   350  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   351  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   352   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   353   * \return SRC pointer for I2C Protocol Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   354   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   355  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   356  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   357  /** \brief Returns if the Fifo is requesting new data
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   361  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   363   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief Sets width of I2C address to 7 or 10 bits
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   369   * \param mode selects 7 or 10 bits address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   370   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   371   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   372  IFX_INLINE void IfxI2c_setBitAddressMode(Ifx_I2C *i2c, IfxI2c_AddressMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   373  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   374  /** \brief selects the pin
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   375   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   376   * \param pisel pin to be select
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   377   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   378   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   379  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   380  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   381  /** \brief Sets the number of bytes to be received
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   382   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   383   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   384   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   385   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   386  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   387  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   388  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   389   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   390   * \param address device address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   391   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   392   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   393  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   394  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   395  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   396   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   397   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   398   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   399   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   400  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   401  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   402  /** \brief Sets the number of bytes to be tansmitted
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   403   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   404   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   405   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   406   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   407  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   408  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   409  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   410   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   411   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   412   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   413  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   414  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   415  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   416   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   417   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   418   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   419  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   420  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   421  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   422   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   423   * \param packet specifies the byte to be transfer
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   424   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   425   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   426  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   427  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   428  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   429  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   430  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   431  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   432  /** \brief Configures the Module as Master
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   433   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   434   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   435   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   436  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   437  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   438  /** \brief Disables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   439   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   440   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   441   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   442  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   443  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   444  /** \brief enables the DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   445   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   446   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   447   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   448   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   449   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   450  IFX_EXTERN void IfxI2c_enableDtrInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   451  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   452  /** \brief Enables the Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   453   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   454   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   455   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   456   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   457   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   458  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   459  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   460  /** \brief Enables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   461   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   462   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   463   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   464  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   465  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   466  /** \brief Enables the protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   467   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   468   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   469   * \param priority Priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   471   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   472  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   473  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   474  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   475   * \param i2c Resource index of the I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   476   * \return I2C module register address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   477   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   478  IFX_EXTERN Ifx_I2C *IfxI2c_getAddress(IfxI2c_Index i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   479  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   480  /** \brief Returns the real Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   481   * \return Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   482   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   483  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   484  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   485  /** \brief API to get the resource index of the I2C specified.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   486   * \param i2c Pointer to the I2C HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   487   * \return Resource index of the I2C
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   488   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   489  IFX_EXTERN IfxI2c_Index IfxI2c_getIndex(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   490  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   491  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   492   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   493   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   494  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   495  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   496  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   497   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   498   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   499  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   500  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   501  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   502   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   503   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   504  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   505  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   506  /** \brief resets the I2c kernel
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   507   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   508   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   509   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   510  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   511  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   512  /** \brief Calculates the desired baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   513   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   514   * \param baudrate specifies the baud rate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   515   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   516   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   517  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   518  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   519  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   520  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   521  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   522  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   523  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   524  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   525  /** \brief Configure the i2c master to high speed mode baudrate > 400kbits/s
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   526   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   527   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   528   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   529  IFX_EXTERN void IfxI2c_configureHighSpeedMode(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   530  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   531  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   532  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   533  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   534  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   535  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   536  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   537      boolean free = FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   538  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   539      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   540      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   541          free = TRUE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   542      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   543  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   544      return free;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   545  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   546  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   547  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   548  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   549  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   550      i2c->ICR.U = (1 << IFX_I2C_ICR_LSREQ_INT_OFF) | (1 << IFX_I2C_ICR_SREQ_INT_OFF) | (1 << IFX_I2C_ICR_LBREQ_INT_OFF) | (1 << IFX_I2C_ICR_BREQ_INT_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   551  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   552  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   553  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   554  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   555  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   556      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   557  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   558  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   559  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   560  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   561  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   562      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   563  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   565  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   566  IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   567  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   568      i2c->ICR.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   569  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   570  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   571  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   572  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   573  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   574      i2c->ERRIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   575  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   576  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   577  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   578  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   579  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   580      i2c->PIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   581  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   583  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   584  IFX_INLINE void IfxI2c_clearRequestBuffer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   585  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   586      i2c->FIFOCFG.B.CRBC = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   587  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   589  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   590  IFX_INLINE void IfxI2c_disableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   591  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   592      i2c->IMSC.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   593  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   594  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   595  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   596  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   597  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   598      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   599  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   601  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   602  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   603  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   604      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   605  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   607  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   608  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   609  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   610      i2c->IMSC.B.I2C_P_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   611  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   613  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   614  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   615  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   616      i2c->PIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   617  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   619  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   620  IFX_INLINE void IfxI2c_enableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   621  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   622      i2c->IMSC.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   623  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   625  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   626  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   627  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   628      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   629  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   631  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   632  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   633  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   634      i2c->ERRIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   635  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   637  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   638  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   639  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   640      i2c->IMSC.B.I2C_P_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   641  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   643  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   644  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   645  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   646      i2c->PIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   647  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   649  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   650  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   651  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   652      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   653  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   655  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   656  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getDtrSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   657  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   658      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   659      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   660          return &MODULE_SRC.I2C.I2C[0].DTR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   661      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   662      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   663      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   664          return &MODULE_SRC.I2C.I2C[1].DTR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   665      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   666  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   667  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   668  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   669  IFX_INLINE boolean IfxI2c_getDtrinterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   670  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   671      return (i2c->RIS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   672  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   673  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   674  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   675  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   676  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   677      return i2c->RIS.B.I2C_ERR_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   678  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   679  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   680  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   681  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   682  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   683      return (i2c->ERRIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   684  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   685  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   686  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   687  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   688  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   689      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   690      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   691          return &MODULE_SRC.I2C.I2C[0].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   692      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   693      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   694      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   695          return &MODULE_SRC.I2C.I2C[1].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   696      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   697  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   698  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   699  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   700  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   701  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   702      return i2c->RIS.B.I2C_P_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   703  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   704  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   705  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   706  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   707  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   708      return (i2c->PIRQSS.U & (1 << source)) ? TRUE : FALSE;
	ld.w	d15,[a4]116
.L349:
	jz.t	d15:5,.L33
.L353:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    16   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    18   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    25   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    32   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    40   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    41   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    42   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    43   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    44   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    45   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    46   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    47   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    48  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    49  #ifndef IFXI2C_H
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    50  #define IFXI2C_H 1
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    51  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    52  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    53  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    54  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    55  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    56  #include "_Impl/IfxI2c_cfg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    57  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    58  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    59  #include "IfxI2c_bf.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    60  #include "_PinMap/IfxI2c_PinMap.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    61  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    62  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    63  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    64  /*-----------------------------------Macros-----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    65  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    66  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    67  /** \brief Master code for high speed mode
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    68   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    69  #define IFXI2C_HIGHSPEED_MASTER_CODE (0xEU)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    70  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    72  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    73  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    74  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    75  /** \addtogroup IfxLld_I2c_Std_enums
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    76   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    77  /** \brief Selects width of address bits (7 or 10 bits)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    78   * Definition in Ifx_I2C.ADDRCFG.B.TBAM
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    79   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    80  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    81  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    82      IfxI2c_AddressMode_7Bit  = 0, /**< \brief sets 7 bit address */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    83      IfxI2c_AddressMode_10Bit = 1  /**< \brief sets 10 bit address */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    84  } IfxI2c_AddressMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    85  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    86  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    87  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    88      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    89      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    90      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    91      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    92  } IfxI2c_BusStatus;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    93  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    94  /** \brief enables DTR interrupt flags
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    95   * Definition in Ifx.I2C.IMSC.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    96   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    97  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    98  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    99      IfxI2c_DtrInterruptSource_lastSingleRequest = IFX_I2C_IMSC_LSREQ_INT_OFF,  /**< \brief last single service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   100      IfxI2c_DtrInterruptSource_singleRequest     = IFX_I2C_IMSC_SREQ_INT_OFF,   /**< \brief single service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   101      IfxI2c_DtrInterruptSource_lastBurstRequest  = IFX_I2C_IMSC_LBREQ_INT_OFF,  /**< \brief last burst service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   102      IfxI2c_DtrInterruptSource_burstRequest      = IFX_I2C_IMSC_BREQ_INT_OFF    /**< \brief burst service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   103  } IfxI2c_DtrInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   104  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   105  /** \brief enable error interrupt request source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   106   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   107   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   108  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   109  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   110      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   111      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   112      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   113      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   114  } IfxI2c_ErrorInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   115  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   116  /** \brief Select speed mode. Standard and Fast or High Speed mode.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   117   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   118  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   119  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   120      IfxI2c_Mode_StandardAndFast = 0,  /**< \brief Sets Standard and Fast speed mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   121      IfxI2c_Mode_HighSpeed       = 1   /**< \brief Sets HighSpeed Mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   122  } IfxI2c_Mode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   123  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   124  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   125  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   126      IfxI2c_PinSelect_a = 0,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   127      IfxI2c_PinSelect_b = 1,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   128      IfxI2c_PinSelect_c = 2,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   129      IfxI2c_PinSelect_d = 3,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   130      IfxI2c_PinSelect_e = 4,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   131      IfxI2c_PinSelect_f = 5,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   132      IfxI2c_PinSelect_g = 6,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   133      IfxI2c_PinSelect_h = 7
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   134  } IfxI2c_PinSelect;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   135  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   136  /** \brief enable protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   137   * Definition in Ifx.I2C.PIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   138   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   139  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   140  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   141      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   142      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   143      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   144      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   145      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   146      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   147      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   148  } IfxI2c_ProtocolInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   149  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   150  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   151   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   152   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   154  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   155      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   156      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   157  } IfxI2c_SleepMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   158  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   159  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   160  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   161  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   162  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   163  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   164  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   165  /** \addtogroup IfxLld_I2c_Std_structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   166   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   167  /** \brief Pin Structure
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   168   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   169  typedef struct
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   170  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   171      IfxI2c_Scl_InOut *scl;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   172      IfxI2c_Sda_InOut *sda;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   173      IfxPort_PadDriver padDriver;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   174  } IfxI2c_Pins;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   175  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   176  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   177  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   178  /** \addtogroup IfxLld_I2c_Std_functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   179   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   180  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   181  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   182  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   183  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   184  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   185  /** \brief Returns if the bus is free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   186   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   187  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   188  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   189  /** \brief clears all DTR interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   190   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   191   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   192   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   193  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   194  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   195  /** \brief clears all Error Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   196   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   197   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   198   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   199  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   200  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   201  /** \brief Clears all Protocol Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   202   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   203   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   204   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   205  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   206  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   207  /** \brief clears the specified source of DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   208   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   209   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   210   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   211   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   212  IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   213  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   214  /** \brief clears the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   215   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   216   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   217   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   218   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   219  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   220  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   221  /** \brief clears the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   222   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   223   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   224   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   225   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   226  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   227  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   228  /** \brief Data request is cleared automatically
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   229   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   230   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   231   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   232  IFX_INLINE void IfxI2c_clearRequestBuffer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   233  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   234  /** \brief disables the specified source of DTR interupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   235   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   236   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   237   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   238   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   239  IFX_INLINE void IfxI2c_disableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   240  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   241  /** \brief disables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   242   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   243   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   244   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   245  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   246  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   247  /** \brief disables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   248   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   249   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   250   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   251   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   252  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   253  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   254  /** \brief disables the Protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   255   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   256   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   257   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   258  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   259  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   260  /** \brief disables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   261   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   262   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   263   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   264   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   265  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   266  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   267  /** \brief enables the specified source of DTR interupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   268   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   269   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   276   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   277   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   278  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   279  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   280  /** \brief enables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   281   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   282   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief enables the protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   289   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief enables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   295   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   296   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   297   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   298  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   299  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   300  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   301   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   302   * \return BusStatus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   303   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   304  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   305  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   306  /** \brief Returns the SRC pointer for I2C DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   307   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   308   * \return SRC pointer for I2C DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   309   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   310  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getDtrSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   311  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   312  /** \brief returns the status of specified DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   313   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   314   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   315   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   316   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   317  IFX_INLINE boolean IfxI2c_getDtrinterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   318  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   319  /** \brief returns the current status of error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   320   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   321   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   322   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   323  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   324  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   325  /** \brief returns the status of the error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   326   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   327   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   328   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   329   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   330  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   331  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   332  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   333   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   334   * \return SRC pointer for I2C Error Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   335   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   336  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   337  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   338  /** \brief returns the current raw status of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   339   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   340   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   341   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   342  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   343  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   344  /** \brief returns the status of  specified protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   345   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   346   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   347   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   348   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   349  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   350  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   351  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   352   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   353   * \return SRC pointer for I2C Protocol Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   354   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   355  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   356  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   357  /** \brief Returns if the Fifo is requesting new data
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   361  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   363   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief Sets width of I2C address to 7 or 10 bits
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   369   * \param mode selects 7 or 10 bits address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   370   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   371   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   372  IFX_INLINE void IfxI2c_setBitAddressMode(Ifx_I2C *i2c, IfxI2c_AddressMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   373  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   374  /** \brief selects the pin
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   375   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   376   * \param pisel pin to be select
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   377   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   378   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   379  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   380  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   381  /** \brief Sets the number of bytes to be received
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   382   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   383   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   384   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   385   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   386  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   387  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   388  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   389   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   390   * \param address device address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   391   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   392   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   393  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   394  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   395  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   396   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   397   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   398   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   399   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   400  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   401  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   402  /** \brief Sets the number of bytes to be tansmitted
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   403   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   404   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   405   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   406   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   407  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   408  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   409  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   410   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   411   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   412   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   413  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   414  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   415  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   416   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   417   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   418   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   419  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   420  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   421  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   422   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   423   * \param packet specifies the byte to be transfer
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   424   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   425   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   426  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   427  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   428  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   429  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   430  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   431  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   432  /** \brief Configures the Module as Master
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   433   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   434   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   435   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   436  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   437  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   438  /** \brief Disables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   439   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   440   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   441   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   442  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   443  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   444  /** \brief enables the DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   445   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   446   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   447   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   448   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   449   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   450  IFX_EXTERN void IfxI2c_enableDtrInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   451  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   452  /** \brief Enables the Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   453   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   454   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   455   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   456   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   457   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   458  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   459  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   460  /** \brief Enables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   461   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   462   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   463   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   464  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   465  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   466  /** \brief Enables the protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   467   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   468   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   469   * \param priority Priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   471   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   472  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   473  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   474  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   475   * \param i2c Resource index of the I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   476   * \return I2C module register address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   477   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   478  IFX_EXTERN Ifx_I2C *IfxI2c_getAddress(IfxI2c_Index i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   479  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   480  /** \brief Returns the real Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   481   * \return Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   482   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   483  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   484  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   485  /** \brief API to get the resource index of the I2C specified.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   486   * \param i2c Pointer to the I2C HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   487   * \return Resource index of the I2C
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   488   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   489  IFX_EXTERN IfxI2c_Index IfxI2c_getIndex(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   490  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   491  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   492   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   493   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   494  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   495  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   496  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   497   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   498   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   499  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   500  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   501  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   502   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   503   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   504  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   505  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   506  /** \brief resets the I2c kernel
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   507   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   508   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   509   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   510  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   511  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   512  /** \brief Calculates the desired baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   513   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   514   * \param baudrate specifies the baud rate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   515   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   516   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   517  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   518  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   519  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   520  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   521  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   522  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   523  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   524  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   525  /** \brief Configure the i2c master to high speed mode baudrate > 400kbits/s
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   526   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   527   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   528   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   529  IFX_EXTERN void IfxI2c_configureHighSpeedMode(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   530  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   531  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   532  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   533  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   534  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   535  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   536  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   537      boolean free = FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   538  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   539      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   540      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   541          free = TRUE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   542      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   543  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   544      return free;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   545  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   546  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   547  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   548  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   549  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   550      i2c->ICR.U = (1 << IFX_I2C_ICR_LSREQ_INT_OFF) | (1 << IFX_I2C_ICR_SREQ_INT_OFF) | (1 << IFX_I2C_ICR_LBREQ_INT_OFF) | (1 << IFX_I2C_ICR_BREQ_INT_OFF);
	mov	d15,#15
	st.w	[a4]140,d15
.L354:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   551  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   552  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   553  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   554  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   555  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   556      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   557  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   558  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   559  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   560  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   561  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   562      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
	mov	d15,#127
.L596:
	st.w	[a4]120,d15
.L359:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   563  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   565  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   566  IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   567  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   568      i2c->ICR.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   569  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   570  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   571  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   572  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   573  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   574      i2c->ERRIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   575  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   576  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   577  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   578  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   579  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   580      i2c->PIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   581  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   583  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   584  IFX_INLINE void IfxI2c_clearRequestBuffer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   585  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   586      i2c->FIFOCFG.B.CRBC = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   587  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   589  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   590  IFX_INLINE void IfxI2c_disableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   591  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   592      i2c->IMSC.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   593  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   594  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   595  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   596  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   597  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   598      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   599  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   601  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   602  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   603  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   604      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   605  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   607  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   608  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   609  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   610      i2c->IMSC.B.I2C_P_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   611  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   613  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   614  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   615  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   616      i2c->PIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   617  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   619  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   620  IFX_INLINE void IfxI2c_enableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   621  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   622      i2c->IMSC.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   623  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   625  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   626  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   627  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   628      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   629  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   631  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   632  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   633  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   634      i2c->ERRIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   635  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   637  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   638  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   639  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   640      i2c->IMSC.B.I2C_P_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   641  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   643  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   644  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   645  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   646      i2c->PIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   647  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   649  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   650  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   651  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   652      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   653  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   655  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   656  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getDtrSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   657  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   658      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   659      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   660          return &MODULE_SRC.I2C.I2C[0].DTR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   661      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   662      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   663      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   664          return &MODULE_SRC.I2C.I2C[1].DTR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   665      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   666  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   667  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   668  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   669  IFX_INLINE boolean IfxI2c_getDtrinterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   670  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   671      return (i2c->RIS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   672  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   673  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   674  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   675  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   676  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   677      return i2c->RIS.B.I2C_ERR_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   678  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   679  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   680  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   681  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   682  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   683      return (i2c->ERRIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   684  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   685  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   686  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   687  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   688  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   689      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   690      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   691          return &MODULE_SRC.I2C.I2C[0].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   692      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   693      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   694      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   695          return &MODULE_SRC.I2C.I2C[1].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   696      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   697  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   698  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   699  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   700  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   701  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   702      return i2c->RIS.B.I2C_P_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   703  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   704  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   705  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   706  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   707  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   708      return (i2c->PIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   709  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   710  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   711  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   712  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   713  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   714      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   715      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   716          return &MODULE_SRC.I2C.I2C[0].P;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   717      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   718      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   719      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   720          return &MODULE_SRC.I2C.I2C[1].P;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   721      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   722  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   723  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   724  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   725  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   726  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   727      return i2c->RIS.U & 0x0F ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   728  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   729  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   730  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   731  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   732  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   733      i2c->RUNCTRL.U = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   734  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   735  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   736  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   737  IFX_INLINE void IfxI2c_setBitAddressMode(Ifx_I2C *i2c, IfxI2c_AddressMode mode)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   738  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   739      i2c->ADDRCFG.B.TBAM = mode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   740  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   741  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   742  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   743  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   744  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   745      i2c->GPCTL.B.PISEL = pisel;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   746  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   747  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   748  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   749  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   750  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   751      i2c->MRPSCTRL.B.MRPS = size;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   752  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   753  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   754  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   755  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   756  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   757      i2c->ADDRCFG.B.ADR = address;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   758  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   759  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   760  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   761  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   762  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   763      i2c->CLC1.B.EDIS = mode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   764  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   765  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   766  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   767  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   768  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   769      i2c->TPSCTRL.B.TPS = size;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   770  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   771  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   772  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   773  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   774  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   775      i2c->RUNCTRL.U = 0;
	mov	d15,#0
	st.w	[a4]16,d15

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   330      {}
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   331  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   332      IfxI2c_clearAllDtrInterruptSources(i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   333      IfxI2c_clearAllProtocolInterruptSources(i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   334  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   335      IfxI2c_stop(i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   336  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   337      while (IfxI2c_getBusStatus(i2c) != 0U)
.L34:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    16   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    18   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    25   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    32   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    40   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    41   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    42   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    43   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    44   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    45   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    46   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    47   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    48  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    49  #ifndef IFXI2C_H
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    50  #define IFXI2C_H 1
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    51  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    52  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    53  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    54  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    55  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    56  #include "_Impl/IfxI2c_cfg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    57  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    58  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    59  #include "IfxI2c_bf.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    60  #include "_PinMap/IfxI2c_PinMap.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    61  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    62  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    63  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    64  /*-----------------------------------Macros-----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    65  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    66  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    67  /** \brief Master code for high speed mode
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    68   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    69  #define IFXI2C_HIGHSPEED_MASTER_CODE (0xEU)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    70  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    72  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    73  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    74  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    75  /** \addtogroup IfxLld_I2c_Std_enums
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    76   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    77  /** \brief Selects width of address bits (7 or 10 bits)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    78   * Definition in Ifx_I2C.ADDRCFG.B.TBAM
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    79   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    80  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    81  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    82      IfxI2c_AddressMode_7Bit  = 0, /**< \brief sets 7 bit address */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    83      IfxI2c_AddressMode_10Bit = 1  /**< \brief sets 10 bit address */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    84  } IfxI2c_AddressMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    85  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    86  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    87  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    88      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    89      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    90      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    91      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    92  } IfxI2c_BusStatus;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    93  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    94  /** \brief enables DTR interrupt flags
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    95   * Definition in Ifx.I2C.IMSC.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    96   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    97  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    98  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    99      IfxI2c_DtrInterruptSource_lastSingleRequest = IFX_I2C_IMSC_LSREQ_INT_OFF,  /**< \brief last single service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   100      IfxI2c_DtrInterruptSource_singleRequest     = IFX_I2C_IMSC_SREQ_INT_OFF,   /**< \brief single service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   101      IfxI2c_DtrInterruptSource_lastBurstRequest  = IFX_I2C_IMSC_LBREQ_INT_OFF,  /**< \brief last burst service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   102      IfxI2c_DtrInterruptSource_burstRequest      = IFX_I2C_IMSC_BREQ_INT_OFF    /**< \brief burst service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   103  } IfxI2c_DtrInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   104  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   105  /** \brief enable error interrupt request source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   106   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   107   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   108  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   109  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   110      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   111      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   112      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   113      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   114  } IfxI2c_ErrorInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   115  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   116  /** \brief Select speed mode. Standard and Fast or High Speed mode.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   117   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   118  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   119  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   120      IfxI2c_Mode_StandardAndFast = 0,  /**< \brief Sets Standard and Fast speed mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   121      IfxI2c_Mode_HighSpeed       = 1   /**< \brief Sets HighSpeed Mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   122  } IfxI2c_Mode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   123  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   124  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   125  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   126      IfxI2c_PinSelect_a = 0,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   127      IfxI2c_PinSelect_b = 1,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   128      IfxI2c_PinSelect_c = 2,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   129      IfxI2c_PinSelect_d = 3,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   130      IfxI2c_PinSelect_e = 4,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   131      IfxI2c_PinSelect_f = 5,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   132      IfxI2c_PinSelect_g = 6,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   133      IfxI2c_PinSelect_h = 7
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   134  } IfxI2c_PinSelect;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   135  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   136  /** \brief enable protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   137   * Definition in Ifx.I2C.PIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   138   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   139  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   140  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   141      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   142      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   143      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   144      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   145      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   146      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   147      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   148  } IfxI2c_ProtocolInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   149  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   150  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   151   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   152   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   154  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   155      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   156      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   157  } IfxI2c_SleepMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   158  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   159  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   160  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   161  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   162  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   163  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   164  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   165  /** \addtogroup IfxLld_I2c_Std_structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   166   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   167  /** \brief Pin Structure
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   168   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   169  typedef struct
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   170  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   171      IfxI2c_Scl_InOut *scl;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   172      IfxI2c_Sda_InOut *sda;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   173      IfxPort_PadDriver padDriver;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   174  } IfxI2c_Pins;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   175  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   176  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   177  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   178  /** \addtogroup IfxLld_I2c_Std_functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   179   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   180  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   181  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   182  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   183  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   184  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   185  /** \brief Returns if the bus is free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   186   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   187  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   188  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   189  /** \brief clears all DTR interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   190   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   191   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   192   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   193  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   194  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   195  /** \brief clears all Error Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   196   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   197   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   198   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   199  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   200  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   201  /** \brief Clears all Protocol Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   202   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   203   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   204   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   205  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   206  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   207  /** \brief clears the specified source of DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   208   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   209   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   210   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   211   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   212  IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   213  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   214  /** \brief clears the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   215   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   216   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   217   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   218   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   219  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   220  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   221  /** \brief clears the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   222   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   223   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   224   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   225   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   226  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   227  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   228  /** \brief Data request is cleared automatically
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   229   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   230   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   231   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   232  IFX_INLINE void IfxI2c_clearRequestBuffer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   233  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   234  /** \brief disables the specified source of DTR interupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   235   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   236   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   237   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   238   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   239  IFX_INLINE void IfxI2c_disableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   240  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   241  /** \brief disables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   242   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   243   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   244   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   245  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   246  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   247  /** \brief disables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   248   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   249   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   250   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   251   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   252  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   253  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   254  /** \brief disables the Protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   255   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   256   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   257   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   258  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   259  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   260  /** \brief disables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   261   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   262   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   263   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   264   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   265  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   266  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   267  /** \brief enables the specified source of DTR interupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   268   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   269   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   276   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   277   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   278  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   279  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   280  /** \brief enables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   281   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   282   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief enables the protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   289   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief enables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   295   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   296   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   297   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   298  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   299  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   300  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   301   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   302   * \return BusStatus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   303   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   304  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   305  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   306  /** \brief Returns the SRC pointer for I2C DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   307   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   308   * \return SRC pointer for I2C DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   309   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   310  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getDtrSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   311  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   312  /** \brief returns the status of specified DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   313   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   314   * \param source DTR interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   315   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   316   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   317  IFX_INLINE boolean IfxI2c_getDtrinterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   318  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   319  /** \brief returns the current status of error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   320   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   321   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   322   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   323  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   324  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   325  /** \brief returns the status of the error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   326   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   327   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   328   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   329   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   330  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   331  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   332  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   333   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   334   * \return SRC pointer for I2C Error Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   335   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   336  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   337  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   338  /** \brief returns the current raw status of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   339   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   340   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   341   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   342  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   343  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   344  /** \brief returns the status of  specified protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   345   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   346   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   347   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   348   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   349  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   350  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   351  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   352   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   353   * \return SRC pointer for I2C Protocol Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   354   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   355  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   356  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   357  /** \brief Returns if the Fifo is requesting new data
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   361  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   363   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief Sets width of I2C address to 7 or 10 bits
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   369   * \param mode selects 7 or 10 bits address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   370   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   371   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   372  IFX_INLINE void IfxI2c_setBitAddressMode(Ifx_I2C *i2c, IfxI2c_AddressMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   373  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   374  /** \brief selects the pin
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   375   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   376   * \param pisel pin to be select
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   377   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   378   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   379  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   380  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   381  /** \brief Sets the number of bytes to be received
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   382   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   383   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   384   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   385   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   386  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   387  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   388  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   389   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   390   * \param address device address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   391   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   392   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   393  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   394  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   395  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   396   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   397   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   398   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   399   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   400  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   401  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   402  /** \brief Sets the number of bytes to be tansmitted
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   403   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   404   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   405   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   406   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   407  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   408  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   409  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   410   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   411   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   412   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   413  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   414  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   415  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   416   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   417   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   418   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   419  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   420  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   421  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   422   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   423   * \param packet specifies the byte to be transfer
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   424   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   425   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   426  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   427  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   428  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   429  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   430  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   431  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   432  /** \brief Configures the Module as Master
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   433   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   434   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   435   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   436  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   437  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   438  /** \brief Disables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   439   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   440   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   441   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   442  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   443  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   444  /** \brief enables the DTR interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   445   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   446   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   447   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   448   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   449   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   450  IFX_EXTERN void IfxI2c_enableDtrInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   451  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   452  /** \brief Enables the Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   453   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   454   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   455   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   456   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   457   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   458  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   459  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   460  /** \brief Enables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   461   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   462   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   463   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   464  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   465  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   466  /** \brief Enables the protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   467   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   468   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   469   * \param priority Priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   471   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   472  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   473  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   474  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   475   * \param i2c Resource index of the I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   476   * \return I2C module register address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   477   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   478  IFX_EXTERN Ifx_I2C *IfxI2c_getAddress(IfxI2c_Index i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   479  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   480  /** \brief Returns the real Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   481   * \return Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   482   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   483  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   484  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   485  /** \brief API to get the resource index of the I2C specified.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   486   * \param i2c Pointer to the I2C HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   487   * \return Resource index of the I2C
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   488   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   489  IFX_EXTERN IfxI2c_Index IfxI2c_getIndex(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   490  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   491  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   492   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   493   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   494  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   495  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   496  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   497   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   498   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   499  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   500  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   501  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   502   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   503   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   504  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   505  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   506  /** \brief resets the I2c kernel
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   507   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   508   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   509   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   510  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   511  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   512  /** \brief Calculates the desired baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   513   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   514   * \param baudrate specifies the baud rate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   515   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   516   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   517  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   518  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   519  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   520  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   521  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   522  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   523  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   524  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   525  /** \brief Configure the i2c master to high speed mode baudrate > 400kbits/s
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   526   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   527   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   528   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   529  IFX_EXTERN void IfxI2c_configureHighSpeedMode(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   530  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   531  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   532  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   533  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   534  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   535  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   536  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   537      boolean free = FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   538  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   539      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   540      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   541          free = TRUE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   542      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   543  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   544      return free;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   545  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   546  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   547  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   548  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   549  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   550      i2c->ICR.U = (1 << IFX_I2C_ICR_LSREQ_INT_OFF) | (1 << IFX_I2C_ICR_SREQ_INT_OFF) | (1 << IFX_I2C_ICR_LBREQ_INT_OFF) | (1 << IFX_I2C_ICR_BREQ_INT_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   551  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   552  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   553  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   554  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   555  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   556      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   557  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   558  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   559  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   560  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   561  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   562      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   563  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   565  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   566  IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   567  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   568      i2c->ICR.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   569  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   570  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   571  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   572  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   573  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   574      i2c->ERRIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   575  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   576  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   577  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   578  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   579  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   580      i2c->PIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   581  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   583  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   584  IFX_INLINE void IfxI2c_clearRequestBuffer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   585  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   586      i2c->FIFOCFG.B.CRBC = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   587  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   589  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   590  IFX_INLINE void IfxI2c_disableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   591  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   592      i2c->IMSC.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   593  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   594  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   595  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   596  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   597  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   598      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   599  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   601  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   602  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   603  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   604      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   605  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   607  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   608  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   609  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   610      i2c->IMSC.B.I2C_P_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   611  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   613  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   614  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   615  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   616      i2c->PIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   617  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   619  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   620  IFX_INLINE void IfxI2c_enableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   621  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   622      i2c->IMSC.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   623  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   625  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   626  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   627  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   628      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   629  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   631  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   632  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   633  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   634      i2c->ERRIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   635  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   637  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   638  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   639  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   640      i2c->IMSC.B.I2C_P_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   641  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   643  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   644  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   645  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   646      i2c->PIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   647  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   649  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   650  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   651  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   652      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
	ld.bu	d15,[a4]36
	and	d15,#3
.L364:
	jne	d15,#0,.L34
.L597:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   338      {}
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   339  }
	ret
.L322:
	
__IfxI2c_configureHighSpeedMode_function_end:
	.size	IfxI2c_configureHighSpeedMode,__IfxI2c_configureHighSpeedMode_function_end-IfxI2c_configureHighSpeedMode
.L155:
	; End of function
	
	.calls	'IfxI2c_setBaudrate','__f_ftous'
	.calls	'IfxI2c_disableModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxI2c_disableModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxI2c_disableModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxI2c_enableModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxI2c_enableModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxI2c_enableModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxI2c_getBaudrate','IfxScuCcu_getSourceFrequency'
	.calls	'IfxI2c_initSclSdaPin','IfxPort_setPinMode'
	.calls	'IfxI2c_initSclSdaPin','IfxPort_setPinPadDriver'
	.calls	'IfxI2c_resetModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxI2c_resetModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxI2c_resetModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxI2c_setBaudrate','IfxScuCcu_getSourceFrequency'
	.calls	'IfxI2c_setBaudrate','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxI2c_setBaudrate','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxI2c_setBaudrate','IfxScuWdt_setCpuEndinit'
	.calls	'IfxI2c_configureAsMaster','.cocofun_16'
	.calls	'IfxI2c_configureAsMaster','.cocofun_12'
	.calls	'IfxI2c_disableModule','.cocofun_17'
	.calls	'IfxI2c_disableModule','.cocofun_14'
	.calls	'.cocofun_14','.cocofun_17'
	.calls	'IfxI2c_enableDtrInterrupt','.cocofun_13'
	.calls	'IfxI2c_enableErrorInterrupt','.cocofun_13'
	.calls	'IfxI2c_enableModule','.cocofun_17'
	.calls	'IfxI2c_enableProtocolInterrupt','.cocofun_13'
	.calls	'IfxI2c_getBaudrate','.cocofun_15'
	.calls	'IfxI2c_resetFifo','.cocofun_12'
	.calls	'IfxI2c_resetModule','.cocofun_17'
	.calls	'IfxI2c_resetModule','.cocofun_14'
	.calls	'IfxI2c_setBaudrate','.cocofun_15'
	.calls	'IfxI2c_configureAsMaster','',0
	.calls	'.cocofun_16','',0
	.calls	'.cocofun_12','',0
	.calls	'IfxI2c_disableModule','',0
	.calls	'.cocofun_17','',0
	.calls	'.cocofun_14','',0
	.calls	'IfxI2c_enableDtrInterrupt','',0
	.calls	'.cocofun_13','',0
	.calls	'IfxI2c_enableErrorInterrupt','',0
	.calls	'IfxI2c_enableModule','',0
	.calls	'IfxI2c_enableProtocolInterrupt','',0
	.calls	'IfxI2c_getAddress','',0
	.calls	'IfxI2c_getBaudrate','',0
	.calls	'.cocofun_15','',0
	.calls	'IfxI2c_getIndex','',0
	.calls	'IfxI2c_initSclSdaPin','',0
	.calls	'IfxI2c_releaseBus','',0
	.calls	'IfxI2c_resetFifo','',0
	.calls	'IfxI2c_resetModule','',0
	.calls	'IfxI2c_setBaudrate','',0
	.extern	IfxI2c_cfg_indexMap
	.extern	IfxScuWdt_clearCpuEndinit
	.extern	IfxScuWdt_setCpuEndinit
	.extern	IfxScuWdt_getCpuWatchdogPassword
	.extern	IfxPort_setPinMode
	.extern	IfxPort_setPinPadDriver
	.extern	IfxScuCcu_getSourceFrequency
	.extern	__f_ftous
	.calls	'IfxI2c_configureHighSpeedMode','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L78:
	.word	109742
	.half	3
	.word	.L79
	.byte	4
.L77:
	.byte	1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L80
	.byte	2,1,1,3
	.word	164
	.byte	4
	.byte	'Ifx__jump_and_link',0,3,1,58,17,1,1,5
	.byte	'fun',0,1,58,43
	.word	167
	.byte	6,0,7
	.byte	'__fract',0,4,128,1
.L237:
	.byte	7
	.byte	'float',0,4,4,8
	.byte	'Ifx__float_to_fract',0,3,1,149,2,18
	.word	212
	.byte	1,1,5
	.byte	'a',0,1,149,2,44
	.word	224
	.byte	6,0,4
	.byte	'Ifx__stopPerfCounters',0,3,1,169,2,17,1,1,6,0,7
	.byte	'unsigned long long int',0,8,7,9
	.byte	'void',0
.L224:
	.byte	3
	.word	336
	.byte	8
	.byte	'__ld64',0,3,2,132,1,19
	.word	310
	.byte	1,1,5
	.byte	'addr',0,2,132,1,32
	.word	342
	.byte	6,0,4
	.byte	'__st64',0,3,2,140,1,17,1,1,5
	.byte	'addr',0,2,140,1,30
	.word	342
	.byte	5
	.byte	'value',0,2,140,1,43
	.word	310
	.byte	6,0,7
	.byte	'unsigned int',0,4,7,7
	.byte	'int',0,4,5,7
	.byte	'unsigned int',0,4,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,4,238,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	451
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	451
	.byte	16,0,2,35,0,0,12,4,189,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	467
	.byte	4,2,35,0,0
.L240:
	.byte	7
	.byte	'unsigned char',0,1,8
.L198:
	.byte	7
	.byte	'unsigned short int',0,2,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,4,247,9,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	603
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,4,197,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	642
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,4,135,10,16,4,11
	.byte	'AE',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	603
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,4,205,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	908
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU',0,4,136,17,25,12,13
	.byte	'CON0',0
	.word	563
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	868
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	1099
	.byte	4,2,35,8,0,14
	.word	1139
	.byte	3
	.word	1202
	.byte	4
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,3,164,4,17,1,1,5
	.byte	'watchdog',0,3,164,4,65
	.word	1207
	.byte	5
	.byte	'password',0,3,164,4,82
	.word	620
	.byte	6,0,4
	.byte	'IfxScuWdt_clearSafetyEndinitInline',0,3,3,197,4,17,1,1,5
	.byte	'password',0,3,197,4,59
	.word	620
	.byte	6,0,4
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,3,144,5,17,1,1,5
	.byte	'watchdog',0,3,144,5,63
	.word	1207
	.byte	5
	.byte	'password',0,3,144,5,80
	.word	620
	.byte	6,0,4
	.byte	'IfxScuWdt_setSafetyEndinitInline',0,3,3,177,5,17,1,1,5
	.byte	'password',0,3,177,5,57
	.word	620
	.byte	6,0,8
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,3,220,4,19
	.word	620
	.byte	1,1,5
	.byte	'watchdog',0,3,220,4,74
	.word	1207
	.byte	6,0,8
	.byte	'IfxScuWdt_getSafetyWatchdogPasswordInline',0,3,3,129,5,19
	.word	620
	.byte	1,1,6,0,15,6,161,1,9,1,16
	.byte	'IfxCpu_ResourceCpu_0',0,0,16
	.byte	'IfxCpu_ResourceCpu_1',0,1,16
	.byte	'IfxCpu_ResourceCpu_2',0,2,16
	.byte	'IfxCpu_ResourceCpu_3',0,3,16
	.byte	'IfxCpu_ResourceCpu_4',0,4,16
	.byte	'IfxCpu_ResourceCpu_5',0,5,16
	.byte	'IfxCpu_ResourceCpu_none',0,6,0,8
	.byte	'IfxCpu_getCoreIndex',0,3,5,235,6,31
	.word	1617
	.byte	1,1,6,0,8
	.byte	'IfxCpu_areInterruptsEnabled',0,3,5,233,5,20
	.word	603
	.byte	1,1,6,0
.L256:
	.byte	7
	.byte	'unsigned long int',0,4,7,8
	.byte	'IfxCpu_getPerformanceCounter',0,3,5,255,6,19
	.word	1864
	.byte	1,1,5
	.byte	'address',0,5,255,6,55
	.word	620
	.byte	6,0,8
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,5,156,7,20
	.word	603
	.byte	1,1,5
	.byte	'address',0,5,156,7,70
	.word	620
	.byte	6,0,4
	.byte	'IfxCpu_updatePerformanceCounter',0,3,5,138,9,17,1,1,5
	.byte	'address',0,5,138,9,56
	.word	1864
	.byte	5
	.byte	'count',0,5,138,9,72
	.word	1864
	.byte	17,6,0,0,10
	.byte	'_Ifx_P_OUT_Bits',0,8,145,3,16,4,11
	.byte	'P0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,8,171,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2095
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMR_Bits',0,8,171,2,16,4,11
	.byte	'PS0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'PCL0',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,8,251,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2411
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ID_Bits',0,8,133,1,16,4,11
	.byte	'MODREV',0,1
	.word	603
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	603
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,8,155,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2982
	.byte	4,2,35,0,0,18,4
	.word	603
	.byte	19,3,0,10
	.byte	'_Ifx_P_IOCR0_Bits',0,8,163,1,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	3,5,2,35,0,11
	.byte	'PC0',0,1
	.word	603
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	603
	.byte	3,5,2,35,1,11
	.byte	'PC1',0,1
	.word	603
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	603
	.byte	3,5,2,35,2,11
	.byte	'PC2',0,1
	.word	603
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	603
	.byte	3,5,2,35,3,11
	.byte	'PC3',0,1
	.word	603
	.byte	5,0,2,35,3,0,12,8,171,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3111
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR4_Bits',0,8,189,1,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	3,5,2,35,0,11
	.byte	'PC4',0,1
	.word	603
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	603
	.byte	3,5,2,35,1,11
	.byte	'PC5',0,1
	.word	603
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	603
	.byte	3,5,2,35,2,11
	.byte	'PC6',0,1
	.word	603
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	603
	.byte	3,5,2,35,3,11
	.byte	'PC7',0,1
	.word	603
	.byte	5,0,2,35,3,0,12,8,187,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3326
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR8_Bits',0,8,202,1,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	3,5,2,35,0,11
	.byte	'PC8',0,1
	.word	603
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	603
	.byte	3,5,2,35,1,11
	.byte	'PC9',0,1
	.word	603
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	603
	.byte	3,5,2,35,2,11
	.byte	'PC10',0,1
	.word	603
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	603
	.byte	3,5,2,35,3,11
	.byte	'PC11',0,1
	.word	603
	.byte	5,0,2,35,3,0,12,8,195,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3541
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR12_Bits',0,8,176,1,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	3,5,2,35,0,11
	.byte	'PC12',0,1
	.word	603
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	603
	.byte	3,5,2,35,1,11
	.byte	'PC13',0,1
	.word	603
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	603
	.byte	3,5,2,35,2,11
	.byte	'PC14',0,1
	.word	603
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	603
	.byte	3,5,2,35,3,11
	.byte	'PC15',0,1
	.word	603
	.byte	5,0,2,35,3,0,12,8,179,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3758
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IN_Bits',0,8,141,1,16,4,11
	.byte	'P0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,8,163,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3978
	.byte	4,2,35,0,0,18,24
	.word	603
	.byte	19,23,0,10
	.byte	'_Ifx_P_PDR0_Bits',0,8,212,3,16,4,11
	.byte	'PD0',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	603
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	603
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	603
	.byte	2,0,2,35,0,11
	.byte	'PD2',0,1
	.word	603
	.byte	2,6,2,35,1,11
	.byte	'PL2',0,1
	.word	603
	.byte	2,4,2,35,1,11
	.byte	'PD3',0,1
	.word	603
	.byte	2,2,2,35,1,11
	.byte	'PL3',0,1
	.word	603
	.byte	2,0,2,35,1,11
	.byte	'PD4',0,1
	.word	603
	.byte	2,6,2,35,2,11
	.byte	'PL4',0,1
	.word	603
	.byte	2,4,2,35,2,11
	.byte	'PD5',0,1
	.word	603
	.byte	2,2,2,35,2,11
	.byte	'PL5',0,1
	.word	603
	.byte	2,0,2,35,2,11
	.byte	'PD6',0,1
	.word	603
	.byte	2,6,2,35,3,11
	.byte	'PL6',0,1
	.word	603
	.byte	2,4,2,35,3,11
	.byte	'PD7',0,1
	.word	603
	.byte	2,2,2,35,3,11
	.byte	'PL7',0,1
	.word	603
	.byte	2,0,2,35,3,0,12,8,195,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4302
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PDR1_Bits',0,8,233,3,16,4,11
	.byte	'PD8',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'PL8',0,1
	.word	603
	.byte	2,4,2,35,0,11
	.byte	'PD9',0,1
	.word	603
	.byte	2,2,2,35,0,11
	.byte	'PL9',0,1
	.word	603
	.byte	2,0,2,35,0,11
	.byte	'PD10',0,1
	.word	603
	.byte	2,6,2,35,1,11
	.byte	'PL10',0,1
	.word	603
	.byte	2,4,2,35,1,11
	.byte	'PD11',0,1
	.word	603
	.byte	2,2,2,35,1,11
	.byte	'PL11',0,1
	.word	603
	.byte	2,0,2,35,1,11
	.byte	'PD12',0,1
	.word	603
	.byte	2,6,2,35,2,11
	.byte	'PL12',0,1
	.word	603
	.byte	2,4,2,35,2,11
	.byte	'PD13',0,1
	.word	603
	.byte	2,2,2,35,2,11
	.byte	'PL13',0,1
	.word	603
	.byte	2,0,2,35,2,11
	.byte	'PD14',0,1
	.word	603
	.byte	2,6,2,35,3,11
	.byte	'PL14',0,1
	.word	603
	.byte	2,4,2,35,3,11
	.byte	'PD15',0,1
	.word	603
	.byte	2,2,2,35,3,11
	.byte	'PL15',0,1
	.word	603
	.byte	2,0,2,35,3,0,12,8,203,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4606
	.byte	4,2,35,0,0,18,8
	.word	603
	.byte	19,7,0,10
	.byte	'_Ifx_P_ESR_Bits',0,8,111,16,4,11
	.byte	'EN0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,8,147,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4931
	.byte	4,2,35,0,0,18,12
	.word	603
	.byte	19,11,0,10
	.byte	'_Ifx_P_PDISC_Bits',0,8,190,3,16,4,11
	.byte	'PDIS0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'PDIS2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'PDIS3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'PDIS4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'PDIS5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'PDIS6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'PDIS7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'PDIS8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'PDIS9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'PDIS10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'PDIS11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'PDIS12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'PDIS13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'PDIS14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'PDIS15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,8,187,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5271
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PCSR_Bits',0,8,167,3,16,4,11
	.byte	'SEL0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'SEL1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'SEL2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'SEL3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'SEL4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'SEL5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'SEL6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'SEL7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'SEL8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'SEL9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'SEL10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'SEL11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'SEL12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'SEL13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'SEL14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'SEL15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,8,179,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5637
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR0_Bits',0,8,230,2,16,4,11
	.byte	'PS0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	428
	.byte	28,0,2,35,0,0,12,8,139,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6001
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR4_Bits',0,8,251,2,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	4,4,2,35,0,11
	.byte	'PS4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	428
	.byte	24,0,2,35,0,0,12,8,155,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6148
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR8_Bits',0,8,134,3,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	8,0,2,35,0,11
	.byte	'PS8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	428
	.byte	20,0,2,35,0,0,12,8,163,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6317
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR12_Bits',0,8,240,2,16,4,11
	.byte	'reserved_0',0,2
	.word	620
	.byte	12,4,2,35,0,11
	.byte	'PS12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,8,147,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6489
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR0_Bits',0,8,128,2,16,4,11
	.byte	'reserved_0',0,2
	.word	620
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	620
	.byte	12,0,2,35,2,0,12,8,219,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6664
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR4_Bits',0,8,149,2,16,4,11
	.byte	'reserved_0',0,4
	.word	428
	.byte	20,12,2,35,0,11
	.byte	'PCL4',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	603
	.byte	8,0,2,35,3,0,12,8,235,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6838
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR8_Bits',0,8,160,2,16,4,11
	.byte	'reserved_0',0,4
	.word	428
	.byte	24,8,2,35,0,11
	.byte	'PCL8',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	603
	.byte	4,0,2,35,3,0,12,8,243,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7012
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR12_Bits',0,8,139,2,16,4,11
	.byte	'reserved_0',0,4
	.word	428
	.byte	28,4,2,35,0,11
	.byte	'PCL12',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,8,227,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7188
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR_Bits',0,8,208,2,16,4,11
	.byte	'PS0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,8,131,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7344
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR_Bits',0,8,234,1,16,4,11
	.byte	'reserved_0',0,2
	.word	620
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,8,211,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7677
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR_Bits',0,8,215,1,16,4,11
	.byte	'REN_CTRL',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'RX_EN',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'TERM',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'LRXTERM',0,1
	.word	603
	.byte	3,2,2,35,0,11
	.byte	'LVDSM',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'PS',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'TEN_CTRL',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'TX_EN',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'VDIFFADJ',0,1
	.word	603
	.byte	2,4,2,35,1,11
	.byte	'VOSDYN',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'VOSEXT',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'TX_PD',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'TX_PWDPD',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,8,203,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8025
	.byte	4,2,35,0,0,18,32
	.word	8305
	.byte	19,7,0,18,56
	.word	603
	.byte	19,55,0,10
	.byte	'_Ifx_P_ACCEN1_Bits',0,8,105,16,4,11
	.byte	'reserved_0',0,4
	.word	428
	.byte	32,0,2,35,0,0,12,8,139,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8363
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ACCEN0_Bits',0,8,68,16,4,11
	.byte	'EN0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,8,131,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8450
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P',0,8,220,5,25,128,2,13
	.byte	'OUT',0
	.word	2371
	.byte	4,2,35,0,13
	.byte	'OMR',0
	.word	2942
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	3062
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	3102
	.byte	4,2,35,12,13
	.byte	'IOCR0',0
	.word	3286
	.byte	4,2,35,16,13
	.byte	'IOCR4',0
	.word	3501
	.byte	4,2,35,20,13
	.byte	'IOCR8',0
	.word	3718
	.byte	4,2,35,24,13
	.byte	'IOCR12',0
	.word	3938
	.byte	4,2,35,28,13
	.byte	'reserved_20',0
	.word	3102
	.byte	4,2,35,32,13
	.byte	'IN',0
	.word	4253
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	4293
	.byte	24,2,35,40,13
	.byte	'PDR0',0
	.word	4566
	.byte	4,2,35,64,13
	.byte	'PDR1',0
	.word	4882
	.byte	4,2,35,68,13
	.byte	'reserved_48',0
	.word	4922
	.byte	8,2,35,72,13
	.byte	'ESR',0
	.word	5222
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	5262
	.byte	12,2,35,84,13
	.byte	'PDISC',0
	.word	5597
	.byte	4,2,35,96,13
	.byte	'PCSR',0
	.word	5961
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	4922
	.byte	8,2,35,104,13
	.byte	'OMSR0',0
	.word	6108
	.byte	4,2,35,112,13
	.byte	'OMSR4',0
	.word	6277
	.byte	4,2,35,116,13
	.byte	'OMSR8',0
	.word	6449
	.byte	4,2,35,120,13
	.byte	'OMSR12',0
	.word	6624
	.byte	4,2,35,124,13
	.byte	'OMCR0',0
	.word	6798
	.byte	4,3,35,128,1,13
	.byte	'OMCR4',0
	.word	6972
	.byte	4,3,35,132,1,13
	.byte	'OMCR8',0
	.word	7148
	.byte	4,3,35,136,1,13
	.byte	'OMCR12',0
	.word	7304
	.byte	4,3,35,140,1,13
	.byte	'OMSR',0
	.word	7637
	.byte	4,3,35,144,1,13
	.byte	'OMCR',0
	.word	7985
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	4922
	.byte	8,3,35,152,1,13
	.byte	'LPCR',0
	.word	8345
	.byte	32,3,35,160,1,13
	.byte	'reserved_C0',0
	.word	8354
	.byte	56,3,35,192,1,13
	.byte	'ACCEN1',0
	.word	8410
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	8977
	.byte	4,3,35,252,1,0,14
	.word	9017
	.byte	3
	.word	9587
	.byte	15,7,140,1,9,1,16
	.byte	'IfxPort_OutputMode_none',0,0,16
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,16
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,15,7,126,9,1,16
	.byte	'IfxPort_OutputIdx_general',0,128,1,16
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,16
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,16
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,16
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,16
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,16
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,16
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0
.L266:
	.byte	4
	.byte	'IfxPort_setPinModeOutput',0,3,7,163,5,17,1,1
.L269:
	.byte	5
	.byte	'port',0,7,163,5,49
	.word	9592
.L271:
	.byte	5
	.byte	'pinIndex',0,7,163,5,61
	.word	603
.L273:
	.byte	5
	.byte	'mode',0,7,163,5,90
	.word	9597
.L275:
	.byte	5
	.byte	'index',0,7,163,5,114
	.word	9693
.L277:
	.byte	6,0,15,7,187,1,9,4,16
	.byte	'IfxPort_State_notChanged',0,0,16
	.byte	'IfxPort_State_high',0,1,16
	.byte	'IfxPort_State_low',0,128,128,4,16
	.byte	'IfxPort_State_toggled',0,129,128,4,0,4
	.byte	'IfxPort_setPinState',0,3,7,169,5,17,1,1,5
	.byte	'port',0,7,169,5,44
	.word	9592
	.byte	5
	.byte	'pinIndex',0,7,169,5,56
	.word	603
	.byte	5
	.byte	'action',0,7,169,5,80
	.word	10006
	.byte	6,0,4
	.byte	'IfxScuCcu_wait',0,3,9,157,14,17,1,1,5
	.byte	'timeSec',0,9,157,14,40
	.word	224
	.byte	17,6,0,0
.L242:
	.byte	8
	.byte	'IfxScuCcu_getI2cFrequency',0,3,9,138,13,20
	.word	224
	.byte	1,1
.L245:
	.byte	6,0,8
	.byte	'IfxScuCcu_getStmFrequency',0,3,9,188,13,20
	.word	224
	.byte	1,1,6,0,10
	.byte	'_Ifx_SRC_SRCR_Bits',0,11,68,16,4,11
	.byte	'SRPN',0,1
	.word	603
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	603
	.byte	2,6,2,35,1,11
	.byte	'SRE',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'TOS',0,1
	.word	603
	.byte	3,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	603
	.byte	2,0,2,35,1,11
	.byte	'ECC',0,1
	.word	603
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	603
	.byte	3,0,2,35,2,11
	.byte	'SRR',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'CLRR',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'SETR',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'IOV',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'IOVCLR',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'SWS',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'SWSCLR',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,11,93,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10311
	.byte	4,2,35,0,0,14
	.word	10601
	.byte	3
	.word	10640
	.byte	4
	.byte	'IfxSrc_clearRequest',0,3,10,247,1,17,1,1,5
	.byte	'src',0,10,247,1,60
	.word	10645
	.byte	6,0,4
	.byte	'IfxSrc_enable',0,3,10,137,2,17,1,1,5
	.byte	'src',0,10,137,2,54
	.word	10645
	.byte	6,0
.L202:
	.byte	15,12,66,9,1,16
	.byte	'IfxSrc_Tos_cpu0',0,0,16
	.byte	'IfxSrc_Tos_dma',0,1,16
	.byte	'IfxSrc_Tos_cpu1',0,2,16
	.byte	'IfxSrc_Tos_cpu2',0,3,16
	.byte	'IfxSrc_Tos_cpu3',0,4,16
	.byte	'IfxSrc_Tos_cpu4',0,5,16
	.byte	'IfxSrc_Tos_cpu5',0,6,0,4
	.byte	'IfxSrc_init',0,3,10,143,2,17,1,1,5
	.byte	'src',0,10,143,2,52
	.word	10645
	.byte	5
	.byte	'typOfService',0,10,143,2,68
	.word	10730
	.byte	5
	.byte	'priority',0,10,143,2,95
	.word	620
	.byte	17,6,0,0,10
	.byte	'_Ifx_I2C_CLC1_Bits',0,14,141,1,16,4,11
	.byte	'DISR',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'SPEN',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'SBWE',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'FSOE',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	603
	.byte	2,0,2,35,0,11
	.byte	'RMC',0,1
	.word	603
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	603
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	603
	.byte	8,0,2,35,3,0,12,14,222,3,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10938
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_ID_Bits',0,14,254,1,16,4,11
	.byte	'MOD_REV',0,1
	.word	603
	.byte	8,0,2,35,0,11
	.byte	'MOD_NUMBER',0,1
	.word	603
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,14,182,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11183
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_RUNCTRL_Bits',0,14,137,3,16,4,11
	.byte	'RUN',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	428
	.byte	31,0,2,35,0,0,12,14,166,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11311
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_ENDDCTRL_Bits',0,14,156,1,16,4,11
	.byte	'SETRSC',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'SETEND',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	428
	.byte	30,0,2,35,0,0,12,14,230,3,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11417
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_FDIVCFG_Bits',0,14,194,1,16,4,11
	.byte	'DEC',0,2
	.word	620
	.byte	11,5,2,35,0,11
	.byte	'reserved_11',0,1
	.word	603
	.byte	5,0,2,35,1,11
	.byte	'INC',0,1
	.word	603
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	603
	.byte	8,0,2,35,3,0,12,14,134,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11545
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_FDIVHIGHCFG_Bits',0,14,203,1,16,4,11
	.byte	'DEC',0,2
	.word	620
	.byte	11,5,2,35,0,11
	.byte	'reserved_11',0,1
	.word	603
	.byte	5,0,2,35,1,11
	.byte	'INC',0,1
	.word	603
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	603
	.byte	7,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,14,142,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11690
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_ADDRCFG_Bits',0,14,111,16,4,11
	.byte	'ADR',0,2
	.word	620
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	603
	.byte	6,0,2,35,1,11
	.byte	'TBAM',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'GCE',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'MCE',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'MNS',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'SONA',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'SOPE',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	620
	.byte	10,0,2,35,2,0,12,14,198,3,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11862
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_BUSSTAT_Bits',0,14,125,16,4,11
	.byte	'BS',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'RNW',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	428
	.byte	29,0,2,35,0,0,12,14,206,3,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12084
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_FIFOCFG_Bits',0,14,220,1,16,4,11
	.byte	'RXBS',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	603
	.byte	2,4,2,35,0,11
	.byte	'TXBS',0,1
	.word	603
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	603
	.byte	2,0,2,35,0,11
	.byte	'RXFA',0,1
	.word	603
	.byte	2,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	603
	.byte	2,4,2,35,1,11
	.byte	'TXFA',0,1
	.word	603
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	603
	.byte	2,0,2,35,1,11
	.byte	'RXFC',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'TXFC',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'CRBC',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,2
	.word	620
	.byte	13,0,2,35,2,0,12,14,158,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12203
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_MRPSCTRL_Bits',0,14,200,2,16,4,11
	.byte	'MRPS',0,2
	.word	620
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,4
	.word	428
	.byte	18,0,2,35,0,0,12,14,246,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12497
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_RPSSTAT_Bits',0,14,130,3,16,4,11
	.byte	'RPS',0,2
	.word	620
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,4
	.word	428
	.byte	18,0,2,35,0,0,12,14,158,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12606
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_TPSCTRL_Bits',0,14,164,3,16,4,11
	.byte	'TPS',0,2
	.word	620
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,4
	.word	428
	.byte	18,0,2,35,0,0,12,14,190,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12713
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_FFSSTAT_Bits',0,14,213,1,16,4,11
	.byte	'FFS',0,1
	.word	603
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	428
	.byte	26,0,2,35,0,0,12,14,150,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12820
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_TIMCFG_Bits',0,14,150,3,16,4,11
	.byte	'SDA_DEL_HD_DAT',0,1
	.word	603
	.byte	6,2,2,35,0,11
	.byte	'HS_SDA_DEL_HD_DAT',0,2
	.word	620
	.byte	3,7,2,35,0,11
	.byte	'SCL_DEL_HD_STA',0,1
	.word	603
	.byte	3,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	603
	.byte	2,2,2,35,1,11
	.byte	'EN_SCL_LOW_LEN',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'FS_SCL_LOW',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'HS_SDA_DEL',0,1
	.word	603
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	603
	.byte	3,0,2,35,2,11
	.byte	'SCL_LOW_LEN',0,1
	.word	603
	.byte	8,0,2,35,3,0,12,14,182,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12926
	.byte	4,2,35,0,0,18,28
	.word	603
	.byte	19,27,0,10
	.byte	'_Ifx_I2C_ERRIRQSM_Bits',0,14,174,1,16,4,11
	.byte	'RXF_UFL',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'RXF_OFL',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'TXF_UFL',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'TXF_OFL',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	428
	.byte	28,0,2,35,0,0,12,14,246,3,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13223
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_ERRIRQSS_Bits',0,14,184,1,16,4,11
	.byte	'RXF_UFL',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'RXF_OFL',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'TXF_UFL',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'TXF_OFL',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	428
	.byte	28,0,2,35,0,0,12,14,254,3,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13391
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_ERRIRQSC_Bits',0,14,164,1,16,4,11
	.byte	'RXF_UFL',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'RXF_OFL',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'TXF_UFL',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'TXF_OFL',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	428
	.byte	28,0,2,35,0,0,12,14,238,3,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13559
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_PIRQSM_Bits',0,14,220,2,16,4,11
	.byte	'AM',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'GC',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'MC',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'AL',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'NACK',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'TX_END',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'RX',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	428
	.byte	25,0,2,35,0,0,12,14,134,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13727
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_PIRQSS_Bits',0,14,233,2,16,4,11
	.byte	'AM',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'GC',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'MC',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'AL',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'NACK',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'TX_END',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'RX',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	428
	.byte	25,0,2,35,0,0,12,14,142,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13921
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_PIRQSC_Bits',0,14,207,2,16,4,11
	.byte	'AM',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'GC',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'MC',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'AL',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'NACK',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'TX_END',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'RX',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	428
	.byte	25,0,2,35,0,0,12,14,254,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14115
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_RIS_Bits',0,14,246,2,16,4,11
	.byte	'LSREQ_INT',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'SREQ_INT',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'LBREQ_INT',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'BREQ_INT',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'I2C_ERR_INT',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'I2C_P_INT',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	428
	.byte	26,0,2,35,0,0,12,14,150,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14309
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_IMSC_Bits',0,14,134,2,16,4,11
	.byte	'LSREQ_INT',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'SREQ_INT',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'LBREQ_INT',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'BREQ_INT',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'I2C_ERR_INT',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'I2C_P_INT',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	428
	.byte	26,0,2,35,0,0,12,14,190,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14522
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_MIS_Bits',0,14,180,2,16,4,11
	.byte	'LSREQ_INT',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'SREQ_INT',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'LBREQ_INT',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'BREQ_INT',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'I2C_ERR_INT',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'I2C_P_INT',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	428
	.byte	26,0,2,35,0,0,12,14,230,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14736
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_ICR_Bits',0,14,244,1,16,4,11
	.byte	'LSREQ_INT',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'SREQ_INT',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'LBREQ_INT',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'BREQ_INT',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	428
	.byte	28,0,2,35,0,0,12,14,174,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14949
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_ISR_Bits',0,14,146,2,16,4,11
	.byte	'LSREQ_INT',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'SREQ_INT',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'LBREQ_INT',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'BREQ_INT',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'I2C_ERR_INT',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'I2C_P_INT',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	428
	.byte	26,0,2,35,0,0,12,14,198,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15118
	.byte	4,2,35,0,0,18,236,254,1
	.word	603
	.byte	19,235,254,1,0,10
	.byte	'_Ifx_I2C_TXD_Bits',0,14,171,3,16,4,11
	.byte	'TXD',0,4
	.word	428
	.byte	32,0,2,35,0,0,12,14,198,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15344
	.byte	4,2,35,0,0,18,252,127
	.word	603
	.byte	19,251,127,0,10
	.byte	'_Ifx_I2C_RXD_Bits',0,14,144,3,16,4,11
	.byte	'RXD',0,4
	.word	428
	.byte	32,0,2,35,0,0,12,14,174,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15435
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_CLC_Bits',0,14,133,1,16,4,11
	.byte	'DISR',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	428
	.byte	30,0,2,35,0,0,12,14,214,3,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15515
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_MODID_Bits',0,14,192,2,16,4,11
	.byte	'MOD_REV',0,1
	.word	603
	.byte	8,0,2,35,0,11
	.byte	'MOD_TYPE',0,1
	.word	603
	.byte	8,0,2,35,1,11
	.byte	'MOD_NUMBER',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,14,238,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15634
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_GPCTL_Bits',0,14,237,1,16,4,11
	.byte	'PISEL',0,1
	.word	603
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	428
	.byte	29,0,2,35,0,0,12,14,166,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15762
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_ACCEN0_Bits',0,14,68,16,4,11
	.byte	'EN0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,14,182,3,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15868
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_ACCEN1_Bits',0,14,105,16,4,11
	.byte	'reserved_0',0,4
	.word	428
	.byte	32,0,2,35,0,0,12,14,190,3,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16437
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_KRST0_Bits',0,14,158,2,16,4,11
	.byte	'RST',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	428
	.byte	30,0,2,35,0,0,12,14,206,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16526
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_KRST1_Bits',0,14,166,2,16,4,11
	.byte	'RST',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	428
	.byte	31,0,2,35,0,0,12,14,214,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16649
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_KRSTCLR_Bits',0,14,173,2,16,4,11
	.byte	'CLR',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	428
	.byte	31,0,2,35,0,0,12,14,222,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16753
	.byte	4,2,35,0,0,18,222,1
	.word	603
	.byte	19,221,1,0,10
	.byte	'_Ifx_I2C',0,14,215,5,25,128,130,4,13
	.byte	'CLC1',0
	.word	11143
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	3102
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	11271
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	3102
	.byte	4,2,35,12,13
	.byte	'RUNCTRL',0
	.word	11377
	.byte	4,2,35,16,13
	.byte	'ENDDCTRL',0
	.word	11505
	.byte	4,2,35,20,13
	.byte	'FDIVCFG',0
	.word	11650
	.byte	4,2,35,24,13
	.byte	'FDIVHIGHCFG',0
	.word	11822
	.byte	4,2,35,28,13
	.byte	'ADDRCFG',0
	.word	12044
	.byte	4,2,35,32,13
	.byte	'BUSSTAT',0
	.word	12163
	.byte	4,2,35,36,13
	.byte	'FIFOCFG',0
	.word	12457
	.byte	4,2,35,40,13
	.byte	'MRPSCTRL',0
	.word	12566
	.byte	4,2,35,44,13
	.byte	'RPSSTAT',0
	.word	12673
	.byte	4,2,35,48,13
	.byte	'TPSCTRL',0
	.word	12780
	.byte	4,2,35,52,13
	.byte	'FFSSTAT',0
	.word	12886
	.byte	4,2,35,56,13
	.byte	'reserved_3C',0
	.word	3102
	.byte	4,2,35,60,13
	.byte	'TIMCFG',0
	.word	13174
	.byte	4,2,35,64,13
	.byte	'reserved_44',0
	.word	13214
	.byte	28,2,35,68,13
	.byte	'ERRIRQSM',0
	.word	13351
	.byte	4,2,35,96,13
	.byte	'ERRIRQSS',0
	.word	13519
	.byte	4,2,35,100,13
	.byte	'ERRIRQSC',0
	.word	13687
	.byte	4,2,35,104,13
	.byte	'reserved_6C',0
	.word	3102
	.byte	4,2,35,108,13
	.byte	'PIRQSM',0
	.word	13881
	.byte	4,2,35,112,13
	.byte	'PIRQSS',0
	.word	14075
	.byte	4,2,35,116,13
	.byte	'PIRQSC',0
	.word	14269
	.byte	4,2,35,120,13
	.byte	'reserved_7C',0
	.word	3102
	.byte	4,2,35,124,13
	.byte	'RIS',0
	.word	14482
	.byte	4,3,35,128,1,13
	.byte	'IMSC',0
	.word	14696
	.byte	4,3,35,132,1,13
	.byte	'MIS',0
	.word	14909
	.byte	4,3,35,136,1,13
	.byte	'ICR',0
	.word	15078
	.byte	4,3,35,140,1,13
	.byte	'ISR',0
	.word	15291
	.byte	4,3,35,144,1,13
	.byte	'reserved_94',0
	.word	15331
	.byte	236,254,1,3,35,148,1,13
	.byte	'TXD',0
	.word	15384
	.byte	4,4,35,128,128,2,13
	.byte	'reserved_8004',0
	.word	15424
	.byte	252,127,4,35,132,128,2,13
	.byte	'RXD',0
	.word	15475
	.byte	4,4,35,128,128,3,13
	.byte	'reserved_C004',0
	.word	15424
	.byte	252,127,4,35,132,128,3,13
	.byte	'CLC',0
	.word	15594
	.byte	4,4,35,128,128,4,13
	.byte	'MODID',0
	.word	15722
	.byte	4,4,35,132,128,4,13
	.byte	'GPCTL',0
	.word	15828
	.byte	4,4,35,136,128,4,13
	.byte	'ACCEN0',0
	.word	16397
	.byte	4,4,35,140,128,4,13
	.byte	'ACCEN1',0
	.word	16486
	.byte	4,4,35,144,128,4,13
	.byte	'KRST0',0
	.word	16609
	.byte	4,4,35,148,128,4,13
	.byte	'KRST1',0
	.word	16713
	.byte	4,4,35,152,128,4,13
	.byte	'KRSTCLR',0
	.word	16819
	.byte	4,4,35,156,128,4,13
	.byte	'reserved_10020',0
	.word	16859
	.byte	222,1,4,35,160,128,4,0,14
	.word	16870
.L187:
	.byte	3
	.word	17691
.L352:
	.byte	4
	.byte	'IfxI2c_clearAllDtrInterruptSources',0,3,13,164,4,17,1,1
.L355:
	.byte	5
	.byte	'i2c',0,13,164,4,61
	.word	17696
.L357:
	.byte	6,0
.L358:
	.byte	4
	.byte	'IfxI2c_clearAllProtocolInterruptSources',0,3,13,176,4,17,1,1
.L360:
	.byte	5
	.byte	'i2c',0,13,176,4,66
	.word	17696
.L362:
	.byte	6,0,15,13,139,1,9,1,16
	.byte	'IfxI2c_ProtocolInterruptSource_addressMatch',0,0,16
	.byte	'IfxI2c_ProtocolInterruptSource_generalCall',0,1,16
	.byte	'IfxI2c_ProtocolInterruptSource_masterCode',0,2,16
	.byte	'IfxI2c_ProtocolInterruptSource_arbitrationLost',0,3,16
	.byte	'IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived',0,4,16
	.byte	'IfxI2c_ProtocolInterruptSource_transmissionEnd',0,5,16
	.byte	'IfxI2c_ProtocolInterruptSource_receiveMode',0,6,0
.L299:
	.byte	4
	.byte	'IfxI2c_clearProtocolInterruptSource',0,3,13,194,4,17,1,1
.L301:
	.byte	5
	.byte	'i2c',0,13,194,4,62
	.word	17696
.L303:
	.byte	5
	.byte	'source',0,13,194,4,98
	.word	17822
.L305:
	.byte	6,0,15,13,86,9,1,16
	.byte	'IfxI2c_BusStatus_idle',0,0,16
	.byte	'IfxI2c_BusStatus_started',0,1,16
	.byte	'IfxI2c_BusStatus_busyMaster',0,2,16
	.byte	'IfxI2c_BusStatus_remoteSlave',0,3,0
.L363:
	.byte	8
	.byte	'IfxI2c_getBusStatus',0,3,13,138,5,29
	.word	18238
	.byte	1,1
.L365:
	.byte	5
	.byte	'i2c',0,13,138,5,58
	.word	17696
.L367:
	.byte	6,0
.L205:
	.byte	8
	.byte	'IfxI2c_getDtrSrcPointer',0,3,13,144,5,35
	.word	10645
	.byte	1,1
.L207:
	.byte	5
	.byte	'i2c',0,13,144,5,68
	.word	17696
.L209:
	.byte	6,0
.L215:
	.byte	8
	.byte	'IfxI2c_getErrorSrcPointer',0,3,13,175,5,35
	.word	10645
	.byte	1,1
.L217:
	.byte	5
	.byte	'i2c',0,13,175,5,70
	.word	17696
.L219:
	.byte	6,0
.L292:
	.byte	8
	.byte	'IfxI2c_getProtocolInterruptSourceStatus',0,3,13,194,5,20
	.word	603
	.byte	1,1
.L294:
	.byte	5
	.byte	'i2c',0,13,194,5,69
	.word	17696
.L296:
	.byte	5
	.byte	'source',0,13,194,5,105
	.word	17822
.L298:
	.byte	6,0
.L228:
	.byte	8
	.byte	'IfxI2c_getProtocolSrcPointer',0,3,13,200,5,35
	.word	10645
	.byte	1,1
.L230:
	.byte	5
	.byte	'i2c',0,13,200,5,73
	.word	17696
.L232:
	.byte	6,0
.L337:
	.byte	4
	.byte	'IfxI2c_run',0,3,13,219,5,17,1,1
.L340:
	.byte	5
	.byte	'i2c',0,13,219,5,37
	.word	17696
.L342:
	.byte	6,0,15,13,124,9,1,16
	.byte	'IfxI2c_PinSelect_a',0,0,16
	.byte	'IfxI2c_PinSelect_b',0,1,16
	.byte	'IfxI2c_PinSelect_c',0,2,16
	.byte	'IfxI2c_PinSelect_d',0,3,16
	.byte	'IfxI2c_PinSelect_e',0,4,16
	.byte	'IfxI2c_PinSelect_f',0,5,16
	.byte	'IfxI2c_PinSelect_g',0,6,16
	.byte	'IfxI2c_PinSelect_h',0,7,0
.L279:
	.byte	4
	.byte	'IfxI2c_setPinSelection',0,3,13,231,5,17,1,1
.L282:
	.byte	5
	.byte	'i2c',0,13,231,5,49
	.word	17696
.L284:
	.byte	5
	.byte	'pisel',0,13,231,5,71
	.word	18680
.L286:
	.byte	6,0,7
	.byte	'short int',0,2,5
.L343:
	.byte	4
	.byte	'IfxI2c_setTransmitPacketSize',0,3,13,255,5,17,1,1
.L344:
	.byte	5
	.byte	'i2c',0,13,255,5,55
	.word	17696
.L346:
	.byte	5
	.byte	'size',0,13,255,5,70
	.word	18915
.L348:
	.byte	6,0
.L190:
	.byte	4
	.byte	'IfxI2c_stop',0,3,13,133,6,17,1,1
.L192:
	.byte	5
	.byte	'i2c',0,13,133,6,38
	.word	17696
.L194:
	.byte	6,0
.L326:
	.byte	4
	.byte	'IfxI2c_writeFifo',0,3,13,146,6,17,1,1
.L328:
	.byte	5
	.byte	'i2c',0,13,146,6,43
	.word	17696
.L330:
	.byte	5
	.byte	'packet',0,13,146,6,55
	.word	1864
.L332:
	.byte	6,0,20
	.word	444
	.byte	21
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,22
	.word	19085
	.byte	0,14
	.word	428
	.byte	3
	.word	428
	.byte	23
	.byte	'__cmpswapw',0
	.word	19127
	.byte	1,1,1,1,24
	.byte	'p',0
	.word	19132
	.byte	24
	.byte	'value',0
	.word	428
	.byte	24
	.byte	'compare',0
	.word	428
	.byte	0,25
	.word	172
	.byte	26
	.word	198
	.byte	6,0,25
	.word	233
	.byte	26
	.word	265
	.byte	6,0,25
	.word	278
	.byte	6,0,25
	.word	347
	.byte	26
	.word	366
	.byte	6,0,25
	.word	382
	.byte	26
	.word	397
	.byte	26
	.word	411
	.byte	6,0,25
	.word	1212
	.byte	26
	.word	1252
	.byte	26
	.word	1270
	.byte	6,0,25
	.word	1290
	.byte	26
	.word	1333
	.byte	6,0,25
	.word	1353
	.byte	26
	.word	1391
	.byte	26
	.word	1409
	.byte	6,0,25
	.word	1429
	.byte	26
	.word	1470
	.byte	6,0,27
	.byte	'IfxScuWdt_clearCpuEndinit',0,3,237,1,17,1,1,1,1,5
	.byte	'password',0,3,237,1,50
	.word	620
	.byte	0,27
	.byte	'IfxScuWdt_setCpuEndinit',0,3,157,2,17,1,1,1,1,5
	.byte	'password',0,3,157,2,48
	.word	620
	.byte	0,25
	.word	1490
	.byte	26
	.word	1541
	.byte	6,0,25
	.word	1561
	.byte	6,0,28
	.byte	'IfxScuWdt_getCpuWatchdogPassword',0,3,215,3,19
	.word	620
	.byte	1,1,1,1,25
	.word	1788
	.byte	6,0,25
	.word	1822
	.byte	6,0,25
	.word	1885
	.byte	26
	.word	1926
	.byte	6,0,25
	.word	1945
	.byte	26
	.word	2000
	.byte	6,0,25
	.word	2019
	.byte	26
	.word	2059
	.byte	26
	.word	2076
	.byte	17,6,0,0,25
	.word	9910
	.byte	26
	.word	9943
	.byte	26
	.word	9957
	.byte	26
	.word	9975
	.byte	26
	.word	9989
	.byte	6,0,25
	.word	10109
	.byte	26
	.word	10137
	.byte	26
	.word	10151
	.byte	26
	.word	10169
	.byte	6,0,15,7,101,9,1,16
	.byte	'IfxPort_Mode_inputNoPullDevice',0,0,16
	.byte	'IfxPort_Mode_inputPullDown',0,8,16
	.byte	'IfxPort_Mode_inputPullUp',0,16,16
	.byte	'IfxPort_Mode_outputPushPullGeneral',0,128,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt1',0,136,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt2',0,144,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt3',0,152,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt4',0,160,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt5',0,168,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt6',0,176,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt7',0,184,1,16
	.byte	'IfxPort_Mode_outputOpenDrainGeneral',0,192,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt1',0,200,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt2',0,208,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt3',0,216,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt4',0,224,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt5',0,232,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt6',0,240,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt7',0,248,1,0,27
	.byte	'IfxPort_setPinMode',0,7,183,3,17,1,1,1,1,5
	.byte	'port',0,7,183,3,43
	.word	9592
	.byte	5
	.byte	'pinIndex',0,7,183,3,55
	.word	603
	.byte	5
	.byte	'mode',0,7,183,3,78
	.word	19584
	.byte	0
.L264:
	.byte	15,7,151,1,9,1,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,16
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,16
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,16
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,16
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed1',0,12,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed2',0,13,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed3',0,14,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed4',0,15,0,27
	.byte	'IfxPort_setPinPadDriver',0,7,207,3,17,1,1,1,1,5
	.byte	'port',0,7,207,3,48
	.word	9592
	.byte	5
	.byte	'pinIndex',0,7,207,3,60
	.word	603
	.byte	5
	.byte	'padDriver',0,7,207,3,88
	.word	20328
	.byte	0,25
	.word	10187
	.byte	26
	.word	10210
	.byte	17,29
	.word	10271
	.byte	30
	.word	10309
	.byte	0,6,0,0,25
	.word	10231
	.byte	6,0,25
	.word	10271
	.byte	6,0,15,9,172,2,9,1,16
	.byte	'IfxScuCcu_Fsource_0',0,0,16
	.byte	'IfxScuCcu_Fsource_1',0,1,16
	.byte	'IfxScuCcu_Fsource_2',0,2,0,31
	.byte	'IfxScuCcu_getSourceFrequency',0,9,138,7,20
	.word	224
	.byte	1,1,1,1,5
	.byte	'fsource',0,9,138,7,67
	.word	20875
	.byte	0,25
	.word	10650
	.byte	26
	.word	10678
	.byte	6,0,25
	.word	10693
	.byte	26
	.word	10715
	.byte	6,0,25
	.word	10861
	.byte	26
	.word	10881
	.byte	26
	.word	10894
	.byte	26
	.word	10916
	.byte	17,29
	.word	10650
	.byte	26
	.word	10678
	.byte	30
	.word	10691
	.byte	0,6,0,0,25
	.word	17701
	.byte	26
	.word	17744
	.byte	6,0,25
	.word	17759
	.byte	26
	.word	17807
	.byte	6,0,25
	.word	18163
	.byte	26
	.word	18207
	.byte	26
	.word	18220
	.byte	6,0,25
	.word	18356
	.byte	26
	.word	18388
	.byte	6,0,25
	.word	18403
	.byte	26
	.word	18439
	.byte	6,0,25
	.word	18454
	.byte	26
	.word	18492
	.byte	6,0,25
	.word	18507
	.byte	26
	.word	18559
	.byte	26
	.word	18572
	.byte	6,0,25
	.word	18590
	.byte	26
	.word	18631
	.byte	6,0,25
	.word	18646
	.byte	26
	.word	18665
	.byte	6,0,25
	.word	18854
	.byte	26
	.word	18885
	.byte	26
	.word	18898
	.byte	6,0,25
	.word	18928
	.byte	26
	.word	18965
	.byte	26
	.word	18978
	.byte	6,0,25
	.word	18994
	.byte	26
	.word	19014
	.byte	6,0,25
	.word	19029
	.byte	26
	.word	19054
	.byte	26
	.word	19067
	.byte	6,0
.L234:
	.byte	15,15,77,9,1,16
	.byte	'IfxI2c_Index_none',0,127,16
	.byte	'IfxI2c_Index_0',0,0,16
	.byte	'IfxI2c_Index_1',0,1,0,32,7,246,1,9,8,13
	.byte	'port',0
	.word	9592
	.byte	4,2,35,0,13
	.byte	'pinIndex',0
	.word	603
	.byte	1,2,35,4,0,15,17,127,9,1,16
	.byte	'Ifx_RxSel_a',0,0,16
	.byte	'Ifx_RxSel_b',0,1,16
	.byte	'Ifx_RxSel_c',0,2,16
	.byte	'Ifx_RxSel_d',0,3,16
	.byte	'Ifx_RxSel_e',0,4,16
	.byte	'Ifx_RxSel_f',0,5,16
	.byte	'Ifx_RxSel_g',0,6,16
	.byte	'Ifx_RxSel_h',0,7,0,32,16,56,15,16,13
	.byte	'module',0
	.word	17696
	.byte	4,2,35,0,13
	.byte	'pin',0
	.word	21313
	.byte	8,2,35,4,13
	.byte	'inSelect',0
	.word	21352
	.byte	1,2,35,12,13
	.byte	'outSelect',0
	.word	9693
	.byte	1,2,35,13,0,20
	.word	21470
.L260:
	.byte	3
	.word	21542
	.byte	32,16,65,15,16,13
	.byte	'module',0
	.word	17696
	.byte	4,2,35,0,13
	.byte	'pin',0
	.word	21313
	.byte	8,2,35,4,13
	.byte	'inSelect',0
	.word	21352
	.byte	1,2,35,12,13
	.byte	'outSelect',0
	.word	9693
	.byte	1,2,35,13,0,20
	.word	21552
.L262:
	.byte	3
	.word	21624
	.byte	33
	.byte	'__wchar_t',0,18,1,1
	.word	18915
	.byte	33
	.byte	'__size_t',0,18,1,1
	.word	428
	.byte	33
	.byte	'__ptrdiff_t',0,18,1,1
	.word	444
	.byte	34,1,3
	.word	21689
	.byte	33
	.byte	'__codeptr',0,18,1,1
	.word	21691
	.byte	33
	.byte	'boolean',0,19,104,29
	.word	603
	.byte	33
	.byte	'uint8',0,19,108,29
	.word	603
	.byte	33
	.byte	'uint16',0,19,112,29
	.word	620
	.byte	33
	.byte	'uint32',0,19,116,29
	.word	1864
	.byte	33
	.byte	'uint64',0,19,121,29
	.word	310
	.byte	33
	.byte	'sint16',0,19,129,1,29
	.word	18915
	.byte	7
	.byte	'long int',0,4,5,33
	.byte	'sint32',0,19,134,1,29
	.word	21805
	.byte	7
	.byte	'long long int',0,8,5,33
	.byte	'sint64',0,19,141,1,29
	.word	21833
	.byte	33
	.byte	'float32',0,19,170,1,29
	.word	224
	.byte	33
	.byte	'pvoid',0,17,54,28
	.word	342
	.byte	33
	.byte	'Ifx_TickTime',0,17,76,28
	.word	21833
	.byte	33
	.byte	'Ifx_SizeT',0,17,89,16
	.word	18915
	.byte	33
	.byte	'Ifx_Priority',0,17,100,16
	.word	620
	.byte	33
	.byte	'Ifx_RxSel',0,17,137,1,3
	.word	21352
	.byte	14
	.word	336
	.byte	3
	.word	21976
	.byte	32,17,140,1,9,8,13
	.byte	'module',0
	.word	21981
	.byte	4,2,35,0,13
	.byte	'index',0
	.word	21805
	.byte	4,2,35,4,0,33
	.byte	'IfxModule_IndexMap',0,17,144,1,3
	.word	21986
	.byte	33
	.byte	'Ifx_UReg_8Bit',0,20,96,24
	.word	603
	.byte	33
	.byte	'Ifx_UReg_32Bit',0,20,98,24
	.word	428
	.byte	33
	.byte	'Ifx_SReg_32Bit',0,20,101,24
	.word	444
	.byte	33
	.byte	'Ifx_I2C_ACCEN0_Bits',0,14,102,3
	.word	15868
	.byte	33
	.byte	'Ifx_I2C_ACCEN1_Bits',0,14,108,3
	.word	16437
	.byte	33
	.byte	'Ifx_I2C_ADDRCFG_Bits',0,14,122,3
	.word	11862
	.byte	33
	.byte	'Ifx_I2C_BUSSTAT_Bits',0,14,130,1,3
	.word	12084
	.byte	33
	.byte	'Ifx_I2C_CLC_Bits',0,14,138,1,3
	.word	15515
	.byte	33
	.byte	'Ifx_I2C_CLC1_Bits',0,14,153,1,3
	.word	10938
	.byte	33
	.byte	'Ifx_I2C_ENDDCTRL_Bits',0,14,161,1,3
	.word	11417
	.byte	33
	.byte	'Ifx_I2C_ERRIRQSC_Bits',0,14,171,1,3
	.word	13559
	.byte	33
	.byte	'Ifx_I2C_ERRIRQSM_Bits',0,14,181,1,3
	.word	13223
	.byte	33
	.byte	'Ifx_I2C_ERRIRQSS_Bits',0,14,191,1,3
	.word	13391
	.byte	33
	.byte	'Ifx_I2C_FDIVCFG_Bits',0,14,200,1,3
	.word	11545
	.byte	33
	.byte	'Ifx_I2C_FDIVHIGHCFG_Bits',0,14,210,1,3
	.word	11690
	.byte	33
	.byte	'Ifx_I2C_FFSSTAT_Bits',0,14,217,1,3
	.word	12820
	.byte	33
	.byte	'Ifx_I2C_FIFOCFG_Bits',0,14,234,1,3
	.word	12203
	.byte	33
	.byte	'Ifx_I2C_GPCTL_Bits',0,14,241,1,3
	.word	15762
	.byte	33
	.byte	'Ifx_I2C_ICR_Bits',0,14,251,1,3
	.word	14949
	.byte	33
	.byte	'Ifx_I2C_ID_Bits',0,14,131,2,3
	.word	11183
	.byte	33
	.byte	'Ifx_I2C_IMSC_Bits',0,14,143,2,3
	.word	14522
	.byte	33
	.byte	'Ifx_I2C_ISR_Bits',0,14,155,2,3
	.word	15118
	.byte	33
	.byte	'Ifx_I2C_KRST0_Bits',0,14,163,2,3
	.word	16526
	.byte	33
	.byte	'Ifx_I2C_KRST1_Bits',0,14,170,2,3
	.word	16649
	.byte	33
	.byte	'Ifx_I2C_KRSTCLR_Bits',0,14,177,2,3
	.word	16753
	.byte	33
	.byte	'Ifx_I2C_MIS_Bits',0,14,189,2,3
	.word	14736
	.byte	33
	.byte	'Ifx_I2C_MODID_Bits',0,14,197,2,3
	.word	15634
	.byte	33
	.byte	'Ifx_I2C_MRPSCTRL_Bits',0,14,204,2,3
	.word	12497
	.byte	33
	.byte	'Ifx_I2C_PIRQSC_Bits',0,14,217,2,3
	.word	14115
	.byte	33
	.byte	'Ifx_I2C_PIRQSM_Bits',0,14,230,2,3
	.word	13727
	.byte	33
	.byte	'Ifx_I2C_PIRQSS_Bits',0,14,243,2,3
	.word	13921
	.byte	33
	.byte	'Ifx_I2C_RIS_Bits',0,14,255,2,3
	.word	14309
	.byte	33
	.byte	'Ifx_I2C_RPSSTAT_Bits',0,14,134,3,3
	.word	12606
	.byte	33
	.byte	'Ifx_I2C_RUNCTRL_Bits',0,14,141,3,3
	.word	11311
	.byte	33
	.byte	'Ifx_I2C_RXD_Bits',0,14,147,3,3
	.word	15435
	.byte	33
	.byte	'Ifx_I2C_TIMCFG_Bits',0,14,161,3,3
	.word	12926
	.byte	33
	.byte	'Ifx_I2C_TPSCTRL_Bits',0,14,168,3,3
	.word	12713
	.byte	33
	.byte	'Ifx_I2C_TXD_Bits',0,14,174,3,3
	.word	15344
	.byte	33
	.byte	'Ifx_I2C_ACCEN0',0,14,187,3,3
	.word	16397
	.byte	33
	.byte	'Ifx_I2C_ACCEN1',0,14,195,3,3
	.word	16486
	.byte	33
	.byte	'Ifx_I2C_ADDRCFG',0,14,203,3,3
	.word	12044
	.byte	33
	.byte	'Ifx_I2C_BUSSTAT',0,14,211,3,3
	.word	12163
	.byte	33
	.byte	'Ifx_I2C_CLC',0,14,219,3,3
	.word	15594
	.byte	33
	.byte	'Ifx_I2C_CLC1',0,14,227,3,3
	.word	11143
	.byte	33
	.byte	'Ifx_I2C_ENDDCTRL',0,14,235,3,3
	.word	11505
	.byte	33
	.byte	'Ifx_I2C_ERRIRQSC',0,14,243,3,3
	.word	13687
	.byte	33
	.byte	'Ifx_I2C_ERRIRQSM',0,14,251,3,3
	.word	13351
	.byte	33
	.byte	'Ifx_I2C_ERRIRQSS',0,14,131,4,3
	.word	13519
	.byte	33
	.byte	'Ifx_I2C_FDIVCFG',0,14,139,4,3
	.word	11650
	.byte	33
	.byte	'Ifx_I2C_FDIVHIGHCFG',0,14,147,4,3
	.word	11822
	.byte	33
	.byte	'Ifx_I2C_FFSSTAT',0,14,155,4,3
	.word	12886
	.byte	33
	.byte	'Ifx_I2C_FIFOCFG',0,14,163,4,3
	.word	12457
	.byte	33
	.byte	'Ifx_I2C_GPCTL',0,14,171,4,3
	.word	15828
	.byte	33
	.byte	'Ifx_I2C_ICR',0,14,179,4,3
	.word	15078
	.byte	33
	.byte	'Ifx_I2C_ID',0,14,187,4,3
	.word	11271
	.byte	33
	.byte	'Ifx_I2C_IMSC',0,14,195,4,3
	.word	14696
	.byte	33
	.byte	'Ifx_I2C_ISR',0,14,203,4,3
	.word	15291
	.byte	33
	.byte	'Ifx_I2C_KRST0',0,14,211,4,3
	.word	16609
	.byte	33
	.byte	'Ifx_I2C_KRST1',0,14,219,4,3
	.word	16713
	.byte	33
	.byte	'Ifx_I2C_KRSTCLR',0,14,227,4,3
	.word	16819
	.byte	33
	.byte	'Ifx_I2C_MIS',0,14,235,4,3
	.word	14909
	.byte	33
	.byte	'Ifx_I2C_MODID',0,14,243,4,3
	.word	15722
	.byte	33
	.byte	'Ifx_I2C_MRPSCTRL',0,14,251,4,3
	.word	12566
	.byte	33
	.byte	'Ifx_I2C_PIRQSC',0,14,131,5,3
	.word	14269
	.byte	33
	.byte	'Ifx_I2C_PIRQSM',0,14,139,5,3
	.word	13881
	.byte	33
	.byte	'Ifx_I2C_PIRQSS',0,14,147,5,3
	.word	14075
	.byte	33
	.byte	'Ifx_I2C_RIS',0,14,155,5,3
	.word	14482
	.byte	33
	.byte	'Ifx_I2C_RPSSTAT',0,14,163,5,3
	.word	12673
	.byte	33
	.byte	'Ifx_I2C_RUNCTRL',0,14,171,5,3
	.word	11377
	.byte	33
	.byte	'Ifx_I2C_RXD',0,14,179,5,3
	.word	15475
	.byte	33
	.byte	'Ifx_I2C_TIMCFG',0,14,187,5,3
	.word	13174
	.byte	33
	.byte	'Ifx_I2C_TPSCTRL',0,14,195,5,3
	.word	12780
	.byte	33
	.byte	'Ifx_I2C_TXD',0,14,203,5,3
	.word	15384
	.byte	14
	.word	16870
	.byte	33
	.byte	'Ifx_I2C',0,14,134,6,3
	.word	23954
	.byte	33
	.byte	'IfxI2c_Index',0,15,82,3
	.word	21253
	.byte	18,16
	.word	21986
	.byte	19,1,0,20
	.word	23997
	.byte	35
	.byte	'IfxI2c_cfg_indexMap',0,15,92,41
	.word	24006
	.byte	1,1,15,21,162,11,9,1,16
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,16
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,16
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,33
	.byte	'IfxScu_WDTCON1_IR',0,21,167,11,3
	.word	24041
	.byte	10
	.byte	'_Ifx_SCU_ACCEN00_Bits',0,4,68,16,4,11
	.byte	'EN0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	603
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_ACCEN00_Bits',0,4,102,3
	.word	24163
	.byte	10
	.byte	'_Ifx_SCU_ACCEN01_Bits',0,4,105,16,4,11
	.byte	'reserved_0',0,4
	.word	428
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN01_Bits',0,4,108,3
	.word	24722
	.byte	10
	.byte	'_Ifx_SCU_ACCEN10_Bits',0,4,111,16,4,11
	.byte	'EN0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	603
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_ACCEN10_Bits',0,4,145,1,3
	.word	24801
	.byte	10
	.byte	'_Ifx_SCU_ACCEN11_Bits',0,4,148,1,16,4,11
	.byte	'reserved_0',0,4
	.word	428
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN11_Bits',0,4,151,1,3
	.word	25361
	.byte	10
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,4,154,1,16,4,11
	.byte	'STM0DIS',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'STM1DIS',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'STM2DIS',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'STM3DIS',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'STM4DIS',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'STM5DIS',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	603
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	428
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,4,164,1,3
	.word	25442
	.byte	10
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,4,167,1,16,4,11
	.byte	'STMDIV',0,1
	.word	603
	.byte	4,4,2,35,0,11
	.byte	'GTMDIV',0,1
	.word	603
	.byte	4,0,2,35,0,11
	.byte	'SRIDIV',0,1
	.word	603
	.byte	4,4,2,35,1,11
	.byte	'LPDIV',0,1
	.word	603
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'SPBDIV',0,1
	.word	603
	.byte	4,4,2,35,2,11
	.byte	'BBBDIV',0,1
	.word	603
	.byte	4,0,2,35,2,11
	.byte	'FSIDIV',0,1
	.word	603
	.byte	2,6,2,35,3,11
	.byte	'FSI2DIV',0,1
	.word	603
	.byte	2,4,2,35,3,11
	.byte	'CLKSEL',0,1
	.word	603
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	603
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON0_Bits',0,4,181,1,3
	.word	25659
	.byte	10
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,4,184,1,16,4,11
	.byte	'MCANDIV',0,1
	.word	603
	.byte	4,4,2,35,0,11
	.byte	'CLKSELMCAN',0,1
	.word	603
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'PLL1DIVDIS',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'I2CDIV',0,1
	.word	603
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	603
	.byte	4,0,2,35,1,11
	.byte	'MSCDIV',0,1
	.word	603
	.byte	4,4,2,35,2,11
	.byte	'CLKSELMSC',0,1
	.word	603
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	603
	.byte	2,0,2,35,2,11
	.byte	'QSPIDIV',0,1
	.word	603
	.byte	4,4,2,35,3,11
	.byte	'CLKSELQSPI',0,1
	.word	603
	.byte	2,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	603
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON1_Bits',0,4,199,1,3
	.word	25932
	.byte	10
	.byte	'_Ifx_SCU_CCUCON10_Bits',0,4,202,1,16,4,11
	.byte	'CPU4DIV',0,1
	.word	603
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	428
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON10_Bits',0,4,206,1,3
	.word	26258
	.byte	10
	.byte	'_Ifx_SCU_CCUCON11_Bits',0,4,209,1,16,4,11
	.byte	'CPU5DIV',0,1
	.word	603
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	428
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON11_Bits',0,4,213,1,3
	.word	26360
	.byte	10
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,4,216,1,16,4,11
	.byte	'ASCLINFDIV',0,1
	.word	603
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	603
	.byte	4,0,2,35,0,11
	.byte	'ASCLINSDIV',0,1
	.word	603
	.byte	4,4,2,35,1,11
	.byte	'CLKSELASCLINS',0,1
	.word	603
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	428
	.byte	10,8,2,35,0,11
	.byte	'EBUPERON',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'ERAYPERON',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'HSPDMPERON',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	603
	.byte	4,1,2,35,3,11
	.byte	'LCK',0,1
	.word	603
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON2_Bits',0,4,228,1,3
	.word	26462
	.byte	10
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,4,231,1,16,4,11
	.byte	'PLL0MONEN',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'PLL1MONEN',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'PLL2MONEN',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'SPBMONEN',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'BACKMONEN',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	603
	.byte	3,0,2,35,0,11
	.byte	'PLL0MONTST',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'PLL1MONTST',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'PLL2MONTST',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'SPBMONTST',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'BACKMONTST',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	428
	.byte	11,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	603
	.byte	6,2,2,35,3,11
	.byte	'UP',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	603
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON3_Bits',0,4,248,1,3
	.word	26736
	.byte	10
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,4,251,1,16,4,11
	.byte	'LOTHR',0,2
	.word	620
	.byte	12,4,2,35,0,11
	.byte	'UPTHR',0,4
	.word	428
	.byte	12,8,2,35,0,11
	.byte	'MONEN',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'MONTST',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	603
	.byte	4,2,2,35,3,11
	.byte	'UP',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	603
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON4_Bits',0,4,132,2,3
	.word	27105
	.byte	10
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,4,135,2,16,4,11
	.byte	'GETHDIV',0,1
	.word	603
	.byte	4,4,2,35,0,11
	.byte	'MCANHDIV',0,1
	.word	603
	.byte	4,0,2,35,0,11
	.byte	'ADASDIV',0,1
	.word	603
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	428
	.byte	18,2,2,35,0,11
	.byte	'UP',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	603
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON5_Bits',0,4,143,2,3
	.word	27285
	.byte	10
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,4,146,2,16,4,11
	.byte	'CPU0DIV',0,1
	.word	603
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	428
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON6_Bits',0,4,150,2,3
	.word	27454
	.byte	10
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,4,153,2,16,4,11
	.byte	'CPU1DIV',0,1
	.word	603
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	428
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON7_Bits',0,4,157,2,3
	.word	27554
	.byte	10
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,4,160,2,16,4,11
	.byte	'CPU2DIV',0,1
	.word	603
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	428
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON8_Bits',0,4,164,2,3
	.word	27654
	.byte	10
	.byte	'_Ifx_SCU_CCUCON9_Bits',0,4,167,2,16,4,11
	.byte	'CPU3DIV',0,1
	.word	603
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	428
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON9_Bits',0,4,171,2,3
	.word	27754
	.byte	10
	.byte	'_Ifx_SCU_CHIPID_Bits',0,4,174,2,16,4,11
	.byte	'CHREV',0,1
	.word	603
	.byte	6,2,2,35,0,11
	.byte	'CHTEC',0,1
	.word	603
	.byte	2,0,2,35,0,11
	.byte	'CHPK',0,1
	.word	603
	.byte	4,4,2,35,1,11
	.byte	'CHID',0,1
	.word	603
	.byte	4,0,2,35,1,11
	.byte	'EEA',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'UCODE',0,1
	.word	603
	.byte	7,0,2,35,2,11
	.byte	'FSIZE',0,1
	.word	603
	.byte	4,4,2,35,3,11
	.byte	'VART',0,1
	.word	603
	.byte	3,1,2,35,3,11
	.byte	'SEC',0,1
	.word	603
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CHIPID_Bits',0,4,185,2,3
	.word	27854
	.byte	10
	.byte	'_Ifx_SCU_DTSCLIM_Bits',0,4,188,2,16,4,11
	.byte	'LOWER',0,2
	.word	620
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'BGPOK',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'EN',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'LLU',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'UPPER',0,2
	.word	620
	.byte	12,4,2,35,2,11
	.byte	'INTEN',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'INT',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'UOF',0,1
	.word	603
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_DTSCLIM_Bits',0,4,200,2,3
	.word	28057
	.byte	10
	.byte	'_Ifx_SCU_DTSCSTAT_Bits',0,4,203,2,16,4,11
	.byte	'RESULT',0,2
	.word	620
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	428
	.byte	20,0,2,35,0,0,33
	.byte	'Ifx_SCU_DTSCSTAT_Bits',0,4,207,2,3
	.word	28289
	.byte	10
	.byte	'_Ifx_SCU_EICON0_Bits',0,4,210,2,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	451
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	451
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_SCU_EICON0_Bits',0,4,216,2,3
	.word	28391
	.byte	10
	.byte	'_Ifx_SCU_EICON1_Bits',0,4,219,2,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	428
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_EICON1_Bits',0,4,228,2,3
	.word	28519
	.byte	10
	.byte	'_Ifx_SCU_EICR_Bits',0,4,231,2,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	4,4,2,35,0,11
	.byte	'EXIS0',0,1
	.word	603
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'FEN0',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'REN0',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'LDEN0',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'EIEN0',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'INP0',0,1
	.word	603
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	428
	.byte	5,12,2,35,0,11
	.byte	'EXIS1',0,1
	.word	603
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'FEN1',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'REN1',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'LDEN1',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'EIEN1',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'INP1',0,1
	.word	603
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	603
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_EICR_Bits',0,4,250,2,3
	.word	28708
	.byte	10
	.byte	'_Ifx_SCU_EIFILT_Bits',0,4,253,2,16,4,11
	.byte	'FILRQ0A',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'FILRQ5A',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'FILRQ2A',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'FILRQ3A',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'FILRQ0C',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'FILRQ1C',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'FILRQ3C',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'FILRQ2C',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'FILRQ4A',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'FILRQ6A',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'FILRQ1A',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'FILRQ7A',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'FILRQ6D',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'FILRQ4D',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'FILRQ2B',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'FILRQ3B',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'FILRQ7C',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	603
	.byte	7,0,2,35,2,11
	.byte	'FILTDIV',0,1
	.word	603
	.byte	4,4,2,35,3,11
	.byte	'DEPTH',0,1
	.word	603
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_EIFILT_Bits',0,4,147,3,3
	.word	29072
	.byte	10
	.byte	'_Ifx_SCU_EIFR_Bits',0,4,150,3,16,4,11
	.byte	'INTF0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'INTF1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'INTF2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'INTF3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'INTF4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'INTF5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'INTF6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'INTF7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	428
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_EIFR_Bits',0,4,161,3,3
	.word	29511
	.byte	10
	.byte	'_Ifx_SCU_EISR_Bits',0,4,164,3,16,4,11
	.byte	'AE',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	620
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	620
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_EISR_Bits',0,4,174,3,3
	.word	29722
	.byte	10
	.byte	'_Ifx_SCU_EMSR_Bits',0,4,177,3,16,4,11
	.byte	'POL',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'MODE',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'ENON',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'PSEL',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	620
	.byte	12,0,2,35,0,11
	.byte	'EMSF',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'SEMSF',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	620
	.byte	14,0,2,35,2,0,33
	.byte	'Ifx_SCU_EMSR_Bits',0,4,187,3,3
	.word	29898
	.byte	10
	.byte	'_Ifx_SCU_EMSSW_Bits',0,4,190,3,16,4,11
	.byte	'reserved_0',0,4
	.word	428
	.byte	24,8,2,35,0,11
	.byte	'EMSFM',0,1
	.word	603
	.byte	2,6,2,35,3,11
	.byte	'SEMSFM',0,1
	.word	603
	.byte	2,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	603
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_EMSSW_Bits',0,4,196,3,3
	.word	30092
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,4,199,3,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	7,1,2,35,0,11
	.byte	'EDCON',0,2
	.word	620
	.byte	2,7,2,35,0,11
	.byte	'reserved_9',0,4
	.word	428
	.byte	23,0,2,35,0,0,33
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,4,204,3,3
	.word	30227
	.byte	10
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,4,207,3,16,4,11
	.byte	'ARI',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'ARC',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	428
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SCU_ESROCFG_Bits',0,4,212,3,3
	.word	30363
	.byte	10
	.byte	'_Ifx_SCU_EXTCON_Bits',0,4,215,3,16,4,11
	.byte	'EN0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'SEL0',0,1
	.word	603
	.byte	4,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	620
	.byte	10,0,2,35,0,11
	.byte	'EN1',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'NSEL',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'SEL1',0,1
	.word	603
	.byte	4,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	603
	.byte	2,0,2,35,2,11
	.byte	'DIV1',0,1
	.word	603
	.byte	8,0,2,35,3,0,33
	.byte	'Ifx_SCU_EXTCON_Bits',0,4,226,3,3
	.word	30474
	.byte	10
	.byte	'_Ifx_SCU_FDR_Bits',0,4,229,3,16,4,11
	.byte	'STEP',0,2
	.word	620
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	603
	.byte	4,2,2,35,1,11
	.byte	'DM',0,1
	.word	603
	.byte	2,0,2,35,1,11
	.byte	'RESULT',0,2
	.word	620
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	603
	.byte	5,1,2,35,3,11
	.byte	'DISCLK',0,1
	.word	603
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_FDR_Bits',0,4,237,3,3
	.word	30692
	.byte	10
	.byte	'_Ifx_SCU_FMR_Bits',0,4,240,3,16,4,11
	.byte	'FS0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'FS1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'FS2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'FS3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'FS4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'FS5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'FS6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'FS7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	603
	.byte	8,0,2,35,1,11
	.byte	'FC0',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'FC1',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'FC2',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'FC3',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'FC4',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'FC5',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'FC6',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'FC7',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	603
	.byte	8,0,2,35,3,0,33
	.byte	'Ifx_SCU_FMR_Bits',0,4,132,4,3
	.word	30855
	.byte	10
	.byte	'_Ifx_SCU_ID_Bits',0,4,135,4,16,4,11
	.byte	'MODREV',0,1
	.word	603
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	603
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	620
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_ID_Bits',0,4,140,4,3
	.word	31191
	.byte	10
	.byte	'_Ifx_SCU_IGCR_Bits',0,4,143,4,16,4,11
	.byte	'IPEN00',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'IPEN01',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'IPEN02',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'IPEN03',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'IPEN04',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'IPEN05',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'IPEN06',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'IPEN07',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	603
	.byte	5,3,2,35,1,11
	.byte	'GEEN0',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'IGP0',0,1
	.word	603
	.byte	2,0,2,35,1,11
	.byte	'IPEN10',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'IPEN11',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'IPEN12',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'IPEN13',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'IPEN14',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'IPEN15',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'IPEN16',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'IPEN17',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	603
	.byte	5,3,2,35,3,11
	.byte	'GEEN1',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'IGP1',0,1
	.word	603
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_SCU_IGCR_Bits',0,4,167,4,3
	.word	31298
	.byte	10
	.byte	'_Ifx_SCU_IN_Bits',0,4,170,4,16,4,11
	.byte	'P0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	428
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SCU_IN_Bits',0,4,175,4,3
	.word	31750
	.byte	10
	.byte	'_Ifx_SCU_IOCR_Bits',0,4,178,4,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	4,4,2,35,0,11
	.byte	'PC0',0,1
	.word	603
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	603
	.byte	4,4,2,35,1,11
	.byte	'PC1',0,1
	.word	603
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_IOCR_Bits',0,4,185,4,3
	.word	31849
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,4,188,4,16,4,11
	.byte	'LBISTREQ',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'LBISTRES',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'PATTERNS',0,4
	.word	428
	.byte	18,12,2,35,0,11
	.byte	'reserved_20',0,2
	.word	620
	.byte	8,4,2,35,2,11
	.byte	'LBISTDONE',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'LBISTERRINJ',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'LBISTREQRED',0,1
	.word	603
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,4,198,4,3
	.word	31999
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,4,201,4,16,4,11
	.byte	'SEED',0,4
	.word	428
	.byte	19,13,2,35,0,11
	.byte	'reserved_19',0,1
	.word	603
	.byte	5,0,2,35,2,11
	.byte	'SPLITSH',0,1
	.word	603
	.byte	3,5,2,35,3,11
	.byte	'BODY',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'LBISTFREQU',0,1
	.word	603
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,4,208,4,3
	.word	32237
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,4,211,4,16,4,11
	.byte	'LENGTH',0,2
	.word	620
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	428
	.byte	20,0,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,4,215,4,3
	.word	32398
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL3_Bits',0,4,218,4,16,4,11
	.byte	'SIGNATURE',0,4
	.word	428
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL3_Bits',0,4,221,4,3
	.word	32504
	.byte	10
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,4,224,4,16,4,11
	.byte	'LS2',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	620
	.byte	14,1,2,35,0,11
	.byte	'LSEN2',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'LS0',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	620
	.byte	14,1,2,35,2,11
	.byte	'LSEN0',0,1
	.word	603
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_LCLCON0_Bits',0,4,232,4,3
	.word	32590
	.byte	10
	.byte	'_Ifx_SCU_LCLCON1_Bits',0,4,235,4,16,4,11
	.byte	'LS3',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	620
	.byte	14,1,2,35,0,11
	.byte	'LSEN3',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'LS1',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	620
	.byte	14,1,2,35,2,11
	.byte	'LSEN1',0,1
	.word	603
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_LCLCON1_Bits',0,4,243,4,3
	.word	32758
	.byte	10
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,4,246,4,16,4,11
	.byte	'LCLT0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'LCLT1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'LCLT2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'LCLT3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'LCLT4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'LCLT5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	620
	.byte	10,0,2,35,0,11
	.byte	'PLCLT0',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'PLCLT1',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'PLCLT2',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'PLCLT3',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'PLCLT4',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'PLCLT5',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	620
	.byte	10,0,2,35,2,0,33
	.byte	'Ifx_SCU_LCLTEST_Bits',0,4,134,5,3
	.word	32926
	.byte	10
	.byte	'_Ifx_SCU_MANID_Bits',0,4,137,5,16,4,11
	.byte	'DEPT',0,1
	.word	603
	.byte	5,3,2,35,0,11
	.byte	'MANUF',0,2
	.word	620
	.byte	11,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_MANID_Bits',0,4,142,5,3
	.word	33240
	.byte	10
	.byte	'_Ifx_SCU_OMR_Bits',0,4,145,5,16,4,11
	.byte	'PS0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	620
	.byte	14,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	620
	.byte	14,0,2,35,2,0,33
	.byte	'Ifx_SCU_OMR_Bits',0,4,153,5,3
	.word	33351
	.byte	10
	.byte	'_Ifx_SCU_OSCCON_Bits',0,4,156,5,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'PLLLV',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'OSCRES',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'GAINSEL',0,1
	.word	603
	.byte	2,3,2,35,0,11
	.byte	'MODE',0,1
	.word	603
	.byte	2,1,2,35,0,11
	.byte	'SHBY',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'PLLHV',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'HYSEN',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'HYSCTL',0,1
	.word	603
	.byte	2,4,2,35,1,11
	.byte	'AMPCTL',0,1
	.word	603
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	603
	.byte	2,0,2,35,1,11
	.byte	'OSCVAL',0,1
	.word	603
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	603
	.byte	2,1,2,35,2,11
	.byte	'APREN',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'CAP0EN',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'CAP1EN',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'CAP2EN',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'CAP3EN',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	603
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_OSCCON_Bits',0,4,177,5,3
	.word	33509
	.byte	10
	.byte	'_Ifx_SCU_OUT_Bits',0,4,180,5,16,4,11
	.byte	'P0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	428
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SCU_OUT_Bits',0,4,185,5,3
	.word	33920
	.byte	10
	.byte	'_Ifx_SCU_OVCCON_Bits',0,4,188,5,16,4,11
	.byte	'CSEL0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'CSEL1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'CSEL2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'CSEL3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'CSEL4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'CSEL5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	620
	.byte	10,0,2,35,0,11
	.byte	'OVSTRT',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'OVSTP',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'DCINVAL',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	603
	.byte	5,0,2,35,2,11
	.byte	'OVCONF',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'POVCONF',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	603
	.byte	6,0,2,35,3,0,33
	.byte	'Ifx_SCU_OVCCON_Bits',0,4,204,5,3
	.word	34021
	.byte	10
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,4,207,5,16,4,11
	.byte	'OVEN0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'OVEN1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'OVEN2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'OVEN3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'OVEN4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'OVEN5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	428
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,4,216,5,3
	.word	34339
	.byte	10
	.byte	'_Ifx_SCU_PDISC_Bits',0,4,219,5,16,4,11
	.byte	'PDIS0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	428
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SCU_PDISC_Bits',0,4,224,5,3
	.word	34526
	.byte	10
	.byte	'_Ifx_SCU_PDR_Bits',0,4,227,5,16,4,11
	.byte	'PD0',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	603
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	603
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	603
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	428
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_PDR_Bits',0,4,234,5,3
	.word	34637
	.byte	10
	.byte	'_Ifx_SCU_PDRR_Bits',0,4,237,5,16,4,11
	.byte	'PDR0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'PDR1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'PDR2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'PDR3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'PDR4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'PDR5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'PDR6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'PDR7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	428
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_PDRR_Bits',0,4,248,5,3
	.word	34770
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON0_Bits',0,4,251,5,16,4,11
	.byte	'DIVBY',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	620
	.byte	8,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	603
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	603
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	603
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	603
	.byte	5,0,2,35,3,0,33
	.byte	'Ifx_SCU_PERPLLCON0_Bits',0,4,134,6,3
	.word	34973
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON1_Bits',0,4,137,6,16,4,11
	.byte	'K2DIV',0,1
	.word	603
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	603
	.byte	5,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	603
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	428
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PERPLLCON1_Bits',0,4,143,6,3
	.word	35213
	.byte	10
	.byte	'_Ifx_SCU_PERPLLSTAT_Bits',0,4,146,6,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'K3RDY',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	428
	.byte	25,0,2,35,0,0,33
	.byte	'Ifx_SCU_PERPLLSTAT_Bits',0,4,156,6,3
	.word	35357
	.byte	10
	.byte	'_Ifx_SCU_PMCSR0_Bits',0,4,159,6,16,4,11
	.byte	'REQSLP',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	603
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	603
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	428
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR0_Bits',0,4,165,6,3
	.word	35579
	.byte	10
	.byte	'_Ifx_SCU_PMCSR1_Bits',0,4,168,6,16,4,11
	.byte	'REQSLP',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	603
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	603
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	428
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR1_Bits',0,4,174,6,3
	.word	35715
	.byte	10
	.byte	'_Ifx_SCU_PMCSR2_Bits',0,4,177,6,16,4,11
	.byte	'REQSLP',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	603
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	603
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	428
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR2_Bits',0,4,183,6,3
	.word	35851
	.byte	10
	.byte	'_Ifx_SCU_PMCSR3_Bits',0,4,186,6,16,4,11
	.byte	'REQSLP',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	603
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	603
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	428
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR3_Bits',0,4,192,6,3
	.word	35987
	.byte	10
	.byte	'_Ifx_SCU_PMCSR4_Bits',0,4,195,6,16,4,11
	.byte	'REQSLP',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	603
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	603
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	428
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR4_Bits',0,4,201,6,3
	.word	36123
	.byte	10
	.byte	'_Ifx_SCU_PMCSR5_Bits',0,4,204,6,16,4,11
	.byte	'REQSLP',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	603
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	603
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	428
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR5_Bits',0,4,210,6,3
	.word	36259
	.byte	10
	.byte	'_Ifx_SCU_PMSTAT0_Bits',0,4,213,6,16,4,11
	.byte	'CPU0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'CPU1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'CPU2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'CPU3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'CPU4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'CPU5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	620
	.byte	10,0,2,35,0,11
	.byte	'CPU0LS',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'CPU1LS',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'CPU2LS',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'CPU3LS',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	620
	.byte	12,0,2,35,2,0,33
	.byte	'Ifx_SCU_PMSTAT0_Bits',0,4,227,6,3
	.word	36395
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,4,230,6,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	8,0,2,35,0,11
	.byte	'CPUIDLSEL',0,1
	.word	603
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'IRADIS',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	428
	.byte	11,8,2,35,0,11
	.byte	'CPUSEL',0,1
	.word	603
	.byte	3,5,2,35,3,11
	.byte	'STBYEVEN',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'STBYEV',0,1
	.word	603
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	603
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,4,241,6,3
	.word	36667
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR0_Bits',0,4,244,6,16,4,11
	.byte	'LJTEN',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'LJTOVEN',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'LJTOVIEN',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'LJTSTRT',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'LJTSTP',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'LJTCLR',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	620
	.byte	6,4,2,35,0,11
	.byte	'SDSTEP',0,1
	.word	603
	.byte	4,0,2,35,1,11
	.byte	'VDTEN',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'VDTOVEN',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'VDTOVIEN',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'VDTSTRT',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'VDTSTP',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'VDTCLR',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	620
	.byte	7,3,2,35,2,11
	.byte	'LPSLPEN',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	603
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_SCU_PMTRCSR0_Bits',0,4,135,7,3
	.word	36912
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR1_Bits',0,4,138,7,16,4,11
	.byte	'LJTCV',0,2
	.word	620
	.byte	16,0,2,35,0,11
	.byte	'VDTCV',0,2
	.word	620
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	603
	.byte	6,0,2,35,3,0,33
	.byte	'Ifx_SCU_PMTRCSR1_Bits',0,4,143,7,3
	.word	37300
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR2_Bits',0,4,146,7,16,4,11
	.byte	'LDJMPREQ',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	603
	.byte	2,4,2,35,0,11
	.byte	'LJTRUN',0,1
	.word	603
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	603
	.byte	2,0,2,35,0,11
	.byte	'LJTOV',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	603
	.byte	3,4,2,35,1,11
	.byte	'LJTOVCLR',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	603
	.byte	3,0,2,35,1,11
	.byte	'LJTCNT',0,2
	.word	620
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_PMTRCSR2_Bits',0,4,157,7,3
	.word	37418
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR3_Bits',0,4,160,7,16,4,11
	.byte	'VDROOPREQ',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	603
	.byte	2,4,2,35,0,11
	.byte	'VDTRUN',0,1
	.word	603
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	603
	.byte	2,0,2,35,0,11
	.byte	'VDTOV',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	603
	.byte	3,4,2,35,1,11
	.byte	'VDTOVCLR',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	603
	.byte	3,0,2,35,1,11
	.byte	'VDTCNT',0,2
	.word	620
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	603
	.byte	6,0,2,35,3,0,33
	.byte	'Ifx_SCU_PMTRCSR3_Bits',0,4,172,7,3
	.word	37661
	.byte	10
	.byte	'_Ifx_SCU_RSTCON_Bits',0,4,175,7,16,4,11
	.byte	'ESR0',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'ESR1',0,1
	.word	603
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	603
	.byte	2,2,2,35,0,11
	.byte	'SMU',0,1
	.word	603
	.byte	2,0,2,35,0,11
	.byte	'SW',0,1
	.word	603
	.byte	2,6,2,35,1,11
	.byte	'STM0',0,1
	.word	603
	.byte	2,4,2,35,1,11
	.byte	'STM1',0,1
	.word	603
	.byte	2,2,2,35,1,11
	.byte	'STM2',0,1
	.word	603
	.byte	2,0,2,35,1,11
	.byte	'STM3',0,1
	.word	603
	.byte	2,6,2,35,2,11
	.byte	'STM4',0,1
	.word	603
	.byte	2,4,2,35,2,11
	.byte	'STM5',0,1
	.word	603
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	620
	.byte	10,0,2,35,2,0,33
	.byte	'Ifx_SCU_RSTCON_Bits',0,4,189,7,3
	.word	37928
	.byte	10
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,4,192,7,16,4,11
	.byte	'FRTO',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'CLRC',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'CSSX',0,2
	.word	620
	.byte	6,3,2,35,0,11
	.byte	'reserved_13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'USRINFO',0,2
	.word	620
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_RSTCON2_Bits',0,4,206,7,3
	.word	38187
	.byte	10
	.byte	'_Ifx_SCU_RSTCON3_Bits',0,4,209,7,16,4,11
	.byte	'reserved_0',0,4
	.word	428
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_RSTCON3_Bits',0,4,212,7,3
	.word	38492
	.byte	10
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,4,215,7,16,4,11
	.byte	'ESR0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'ESR1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'SMU',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'SW',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'STM0',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'STM1',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'STM2',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'STM3',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'STM4',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'STM5',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	603
	.byte	5,0,2,35,1,11
	.byte	'PORST',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'CB0',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'CB1',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'CB3',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'EVRC',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'EVR33',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'SWD',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'HSMS',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'HSMA',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'STBYR',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'LBPORST',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'LBTERM',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	603
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,4,245,7,3
	.word	38573
	.byte	10
	.byte	'_Ifx_SCU_SEICON0_Bits',0,4,248,7,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	451
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	451
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_SCU_SEICON0_Bits',0,4,254,7,3
	.word	39122
	.byte	10
	.byte	'_Ifx_SCU_SEICON1_Bits',0,4,129,8,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	428
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_SEICON1_Bits',0,4,138,8,3
	.word	39252
	.byte	10
	.byte	'_Ifx_SCU_SEISR_Bits',0,4,141,8,16,4,11
	.byte	'AE',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	620
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	620
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_SEISR_Bits',0,4,151,8,3
	.word	39443
	.byte	10
	.byte	'_Ifx_SCU_STCON_Bits',0,4,154,8,16,4,11
	.byte	'reserved_0',0,2
	.word	620
	.byte	13,3,2,35,0,11
	.byte	'SFCBAE',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'CFCBAE',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'STP',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_STCON_Bits',0,4,161,8,3
	.word	39621
	.byte	10
	.byte	'_Ifx_SCU_STMEM1_Bits',0,4,164,8,16,4,11
	.byte	'MEM',0,4
	.word	428
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM1_Bits',0,4,167,8,3
	.word	39772
	.byte	10
	.byte	'_Ifx_SCU_STMEM2_Bits',0,4,170,8,16,4,11
	.byte	'MEM',0,4
	.word	428
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM2_Bits',0,4,173,8,3
	.word	39844
	.byte	10
	.byte	'_Ifx_SCU_STMEM3_Bits',0,4,176,8,16,4,11
	.byte	'MEM',0,4
	.word	428
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM3_Bits',0,4,179,8,3
	.word	39916
	.byte	10
	.byte	'_Ifx_SCU_STMEM4_Bits',0,4,182,8,16,4,11
	.byte	'MEM',0,4
	.word	428
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM4_Bits',0,4,185,8,3
	.word	39988
	.byte	10
	.byte	'_Ifx_SCU_STMEM5_Bits',0,4,188,8,16,4,11
	.byte	'MEM',0,4
	.word	428
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM5_Bits',0,4,191,8,3
	.word	40060
	.byte	10
	.byte	'_Ifx_SCU_STMEM6_Bits',0,4,194,8,16,4,11
	.byte	'MEM',0,4
	.word	428
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM6_Bits',0,4,197,8,3
	.word	40132
	.byte	10
	.byte	'_Ifx_SCU_STSTAT_Bits',0,4,200,8,16,4,11
	.byte	'HWCFG',0,1
	.word	603
	.byte	8,0,2,35,0,11
	.byte	'FTM',0,1
	.word	603
	.byte	7,1,2,35,1,11
	.byte	'MODE',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'FCBAE',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'LUDIS',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'TRSTL',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'SPDEN',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'RAMINT',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	603
	.byte	3,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	603
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_STSTAT_Bits',0,4,216,8,3
	.word	40204
	.byte	10
	.byte	'_Ifx_SCU_SWAPCTRL_Bits',0,4,219,8,16,4,11
	.byte	'ADDRCFG',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'SPARE',0,2
	.word	620
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_SWAPCTRL_Bits',0,4,224,8,3
	.word	40533
	.byte	10
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,4,227,8,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'SWRSTREQ',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	603
	.byte	6,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	603
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,4,234,8,3
	.word	40653
	.byte	10
	.byte	'_Ifx_SCU_SYSCON_Bits',0,4,237,8,16,4,11
	.byte	'CCTRIG0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'RAMINTM',0,1
	.word	603
	.byte	2,4,2,35,0,11
	.byte	'SETLUDIS',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'DDC',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	603
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_SYSCON_Bits',0,4,249,8,3
	.word	40823
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON0_Bits',0,4,252,8,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'MODEN',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	620
	.byte	6,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	603
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	603
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	603
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	603
	.byte	3,2,2,35,3,11
	.byte	'INSEL',0,1
	.word	603
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_SCU_SYSPLLCON0_Bits',0,4,137,9,3
	.word	41086
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON1_Bits',0,4,140,9,16,4,11
	.byte	'K2DIV',0,1
	.word	603
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	428
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLCON1_Bits',0,4,144,9,3
	.word	41365
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON2_Bits',0,4,147,9,16,4,11
	.byte	'MODCFG',0,2
	.word	620
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_SYSPLLCON2_Bits',0,4,151,9,3
	.word	41469
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLSTAT_Bits',0,4,154,9,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	603
	.byte	2,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'MODRUN',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	428
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLSTAT_Bits',0,4,164,9,3
	.word	41575
	.byte	10
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,4,167,9,16,4,11
	.byte	'ESR0T',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	428
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,4,174,9,3
	.word	41798
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS0_Bits',0,4,177,9,16,4,11
	.byte	'CPU0ESR0T',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'CPU0ESR1T',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'CPU0TRAP2T',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'CPU0SMUT',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	603
	.byte	4,0,2,35,0,11
	.byte	'CPU1ESR0T',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'CPU1ESR1T',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'CPU1TRAP2T',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'CPU1SMUT',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	603
	.byte	4,0,2,35,1,11
	.byte	'CPU2ESR0T',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'CPU2ESR1T',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'CPU2TRAP2T',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'CPU2SMUT',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	603
	.byte	4,0,2,35,2,11
	.byte	'CPU3ESR0T',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'CPU3ESR1T',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'CPU3TRAP2T',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'CPU3SMUT',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	603
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_TRAPDIS0_Bits',0,4,199,9,3
	.word	41946
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS1_Bits',0,4,202,9,16,4,11
	.byte	'CPU4ESR0T',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'CPU4ESR1T',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'CPU4TRAP2T',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'CPU4SMUT',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	603
	.byte	4,0,2,35,0,11
	.byte	'CPU5ESR0T',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'CPU5ESR1T',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'CPU5TRAP2T',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'CPU5SMUT',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	603
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_TRAPDIS1_Bits',0,4,215,9,3
	.word	42434
	.byte	10
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,4,218,9,16,4,11
	.byte	'ESR0T',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	428
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPSET_Bits',0,4,225,9,3
	.word	42731
	.byte	10
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,4,228,9,16,4,11
	.byte	'ESR0T',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	428
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,4,235,9,3
	.word	42879
	.byte	33
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,4,244,9,3
	.word	467
	.byte	33
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,4,132,10,3
	.word	642
	.byte	33
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,4,148,10,3
	.word	908
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,4,151,10,16,4,11
	.byte	'ENDINIT',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	451
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	451
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,4,157,10,3
	.word	43129
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,4,160,10,16,4,11
	.byte	'CLRIRF',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	603
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,4,173,10,3
	.word	43255
	.byte	10
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,4,176,10,16,4,11
	.byte	'AE',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	603
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	620
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,4,189,10,3
	.word	43507
	.byte	12,4,197,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24163
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN00',0,4,202,10,3
	.word	43726
	.byte	12,4,205,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24722
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN01',0,4,210,10,3
	.word	43791
	.byte	12,4,213,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24801
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN10',0,4,218,10,3
	.word	43856
	.byte	12,4,221,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25361
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN11',0,4,226,10,3
	.word	43921
	.byte	12,4,229,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25442
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ARSTDIS',0,4,234,10,3
	.word	43986
	.byte	12,4,237,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25659
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON0',0,4,242,10,3
	.word	44051
	.byte	12,4,245,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25932
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON1',0,4,250,10,3
	.word	44116
	.byte	12,4,253,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26258
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON10',0,4,130,11,3
	.word	44181
	.byte	12,4,133,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26360
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON11',0,4,138,11,3
	.word	44247
	.byte	12,4,141,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26462
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON2',0,4,146,11,3
	.word	44313
	.byte	12,4,149,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26736
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON3',0,4,154,11,3
	.word	44378
	.byte	12,4,157,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27105
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON4',0,4,162,11,3
	.word	44443
	.byte	12,4,165,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27285
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON5',0,4,170,11,3
	.word	44508
	.byte	12,4,173,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27454
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON6',0,4,178,11,3
	.word	44573
	.byte	12,4,181,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27554
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON7',0,4,186,11,3
	.word	44638
	.byte	12,4,189,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27654
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON8',0,4,194,11,3
	.word	44703
	.byte	12,4,197,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27754
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON9',0,4,202,11,3
	.word	44768
	.byte	12,4,205,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27854
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CHIPID',0,4,210,11,3
	.word	44833
	.byte	12,4,213,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28057
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_DTSCLIM',0,4,218,11,3
	.word	44897
	.byte	12,4,221,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28289
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_DTSCSTAT',0,4,226,11,3
	.word	44962
	.byte	12,4,229,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28391
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EICON0',0,4,234,11,3
	.word	45028
	.byte	12,4,237,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28519
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EICON1',0,4,242,11,3
	.word	45092
	.byte	12,4,245,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28708
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EICR',0,4,250,11,3
	.word	45156
	.byte	12,4,253,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29072
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EIFILT',0,4,130,12,3
	.word	45218
	.byte	12,4,133,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29511
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EIFR',0,4,138,12,3
	.word	45282
	.byte	12,4,141,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29722
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EISR',0,4,146,12,3
	.word	45344
	.byte	12,4,149,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29898
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EMSR',0,4,154,12,3
	.word	45406
	.byte	12,4,157,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30092
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EMSSW',0,4,162,12,3
	.word	45468
	.byte	12,4,165,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30227
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX',0,4,170,12,3
	.word	45531
	.byte	12,4,173,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30363
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ESROCFG',0,4,178,12,3
	.word	45604
	.byte	12,4,181,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30474
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EXTCON',0,4,186,12,3
	.word	45669
	.byte	12,4,189,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30692
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_FDR',0,4,194,12,3
	.word	45733
	.byte	12,4,197,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30855
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_FMR',0,4,202,12,3
	.word	45794
	.byte	12,4,205,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31191
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ID',0,4,210,12,3
	.word	45855
	.byte	12,4,213,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31298
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_IGCR',0,4,218,12,3
	.word	45915
	.byte	12,4,221,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31750
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_IN',0,4,226,12,3
	.word	45977
	.byte	12,4,229,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31849
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_IOCR',0,4,234,12,3
	.word	46037
	.byte	12,4,237,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31999
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL0',0,4,242,12,3
	.word	46099
	.byte	12,4,245,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32237
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL1',0,4,250,12,3
	.word	46167
	.byte	12,4,253,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32398
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL2',0,4,130,13,3
	.word	46235
	.byte	12,4,133,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32504
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL3',0,4,138,13,3
	.word	46303
	.byte	12,4,141,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32590
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LCLCON0',0,4,146,13,3
	.word	46371
	.byte	12,4,149,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32758
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LCLCON1',0,4,154,13,3
	.word	46436
	.byte	12,4,157,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32926
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LCLTEST',0,4,162,13,3
	.word	46501
	.byte	12,4,165,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33240
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_MANID',0,4,170,13,3
	.word	46566
	.byte	12,4,173,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33351
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OMR',0,4,178,13,3
	.word	46629
	.byte	12,4,181,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33509
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OSCCON',0,4,186,13,3
	.word	46690
	.byte	12,4,189,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33920
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OUT',0,4,194,13,3
	.word	46754
	.byte	12,4,197,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34021
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OVCCON',0,4,202,13,3
	.word	46815
	.byte	12,4,205,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34339
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OVCENABLE',0,4,210,13,3
	.word	46879
	.byte	12,4,213,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34526
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PDISC',0,4,218,13,3
	.word	46946
	.byte	12,4,221,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34637
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PDR',0,4,226,13,3
	.word	47009
	.byte	12,4,229,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34770
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PDRR',0,4,234,13,3
	.word	47070
	.byte	12,4,237,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34973
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PERPLLCON0',0,4,242,13,3
	.word	47132
	.byte	12,4,245,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35213
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PERPLLCON1',0,4,250,13,3
	.word	47200
	.byte	12,4,253,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35357
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PERPLLSTAT',0,4,130,14,3
	.word	47268
	.byte	12,4,133,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35579
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR0',0,4,138,14,3
	.word	47336
	.byte	12,4,141,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35715
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR1',0,4,146,14,3
	.word	47400
	.byte	12,4,149,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35851
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR2',0,4,154,14,3
	.word	47464
	.byte	12,4,157,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35987
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR3',0,4,162,14,3
	.word	47528
	.byte	12,4,165,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36123
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR4',0,4,170,14,3
	.word	47592
	.byte	12,4,173,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36259
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR5',0,4,178,14,3
	.word	47656
	.byte	12,4,181,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36395
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMSTAT0',0,4,186,14,3
	.word	47720
	.byte	12,4,189,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36667
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMSWCR1',0,4,194,14,3
	.word	47785
	.byte	12,4,197,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36912
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMTRCSR0',0,4,202,14,3
	.word	47850
	.byte	12,4,205,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37300
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMTRCSR1',0,4,210,14,3
	.word	47916
	.byte	12,4,213,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37418
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMTRCSR2',0,4,218,14,3
	.word	47982
	.byte	12,4,221,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37661
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMTRCSR3',0,4,226,14,3
	.word	48048
	.byte	12,4,229,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37928
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_RSTCON',0,4,234,14,3
	.word	48114
	.byte	12,4,237,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38187
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_RSTCON2',0,4,242,14,3
	.word	48178
	.byte	12,4,245,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38492
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_RSTCON3',0,4,250,14,3
	.word	48243
	.byte	12,4,253,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38573
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_RSTSTAT',0,4,130,15,3
	.word	48308
	.byte	12,4,133,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39122
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SEICON0',0,4,138,15,3
	.word	48373
	.byte	12,4,141,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39252
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SEICON1',0,4,146,15,3
	.word	48438
	.byte	12,4,149,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39443
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SEISR',0,4,154,15,3
	.word	48503
	.byte	12,4,157,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39621
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STCON',0,4,162,15,3
	.word	48566
	.byte	12,4,165,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39772
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM1',0,4,170,15,3
	.word	48629
	.byte	12,4,173,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39844
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM2',0,4,178,15,3
	.word	48693
	.byte	12,4,181,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39916
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM3',0,4,186,15,3
	.word	48757
	.byte	12,4,189,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39988
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM4',0,4,194,15,3
	.word	48821
	.byte	12,4,197,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40060
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM5',0,4,202,15,3
	.word	48885
	.byte	12,4,205,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40132
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM6',0,4,210,15,3
	.word	48949
	.byte	12,4,213,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40204
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STSTAT',0,4,218,15,3
	.word	49013
	.byte	12,4,221,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40533
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SWAPCTRL',0,4,226,15,3
	.word	49077
	.byte	12,4,229,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40653
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SWRSTCON',0,4,234,15,3
	.word	49143
	.byte	12,4,237,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40823
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSCON',0,4,242,15,3
	.word	49209
	.byte	12,4,245,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41086
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLCON0',0,4,250,15,3
	.word	49273
	.byte	12,4,253,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41365
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLCON1',0,4,130,16,3
	.word	49341
	.byte	12,4,133,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41469
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLCON2',0,4,138,16,3
	.word	49409
	.byte	12,4,141,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41575
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLSTAT',0,4,146,16,3
	.word	49477
	.byte	12,4,149,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41798
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPCLR',0,4,154,16,3
	.word	49545
	.byte	12,4,157,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41946
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPDIS0',0,4,162,16,3
	.word	49610
	.byte	12,4,165,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42434
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPDIS1',0,4,170,16,3
	.word	49676
	.byte	12,4,173,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42731
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPSET',0,4,178,16,3
	.word	49742
	.byte	12,4,181,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42879
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPSTAT',0,4,186,16,3
	.word	49807
	.byte	33
	.byte	'Ifx_SCU_WDTCPU_CON0',0,4,194,16,3
	.word	563
	.byte	33
	.byte	'Ifx_SCU_WDTCPU_CON1',0,4,202,16,3
	.word	868
	.byte	33
	.byte	'Ifx_SCU_WDTCPU_SR',0,4,210,16,3
	.word	1099
	.byte	12,4,213,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43129
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_WDTS_CON0',0,4,218,16,3
	.word	49958
	.byte	12,4,221,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43255
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_WDTS_CON1',0,4,226,16,3
	.word	50025
	.byte	12,4,229,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43507
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_WDTS_SR',0,4,234,16,3
	.word	50092
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX',0,4,246,16,25,4,13
	.byte	'ESRCFGX',0
	.word	45531
	.byte	4,2,35,0,0,14
	.word	50157
	.byte	33
	.byte	'Ifx_SCU_ESRCFGX',0,4,249,16,3
	.word	50198
	.byte	14
	.word	1139
	.byte	33
	.byte	'Ifx_SCU_WDTCPU',0,4,141,17,3
	.word	50228
	.byte	10
	.byte	'_Ifx_SCU_WDTS',0,4,156,17,25,12,13
	.byte	'CON0',0
	.word	49958
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	50025
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	50092
	.byte	4,2,35,8,0,14
	.word	50257
	.byte	33
	.byte	'Ifx_SCU_WDTS',0,4,161,17,3
	.word	50318
	.byte	18,8
	.word	50157
	.byte	19,1,0,14
	.word	50345
	.byte	18,16
	.word	603
	.byte	19,15,0,18,20
	.word	603
	.byte	19,19,0,18,36
	.word	603
	.byte	19,35,0,18,16
	.word	45156
	.byte	19,3,0,18,16
	.word	45915
	.byte	19,3,0,18,72
	.word	1139
	.byte	19,5,0,14
	.word	50404
	.byte	14
	.word	50257
	.byte	18,176,2
	.word	603
	.byte	19,175,2,0,10
	.byte	'_Ifx_SCU',0,4,176,17,25,128,8,13
	.byte	'reserved_0',0
	.word	4922
	.byte	8,2,35,0,13
	.byte	'ID',0
	.word	45855
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	3102
	.byte	4,2,35,12,13
	.byte	'OSCCON',0
	.word	46690
	.byte	4,2,35,16,13
	.byte	'SYSPLLSTAT',0
	.word	49477
	.byte	4,2,35,20,13
	.byte	'SYSPLLCON0',0
	.word	49273
	.byte	4,2,35,24,13
	.byte	'SYSPLLCON1',0
	.word	49341
	.byte	4,2,35,28,13
	.byte	'SYSPLLCON2',0
	.word	49409
	.byte	4,2,35,32,13
	.byte	'PERPLLSTAT',0
	.word	47268
	.byte	4,2,35,36,13
	.byte	'PERPLLCON0',0
	.word	47132
	.byte	4,2,35,40,13
	.byte	'PERPLLCON1',0
	.word	47200
	.byte	4,2,35,44,13
	.byte	'CCUCON0',0
	.word	44051
	.byte	4,2,35,48,13
	.byte	'CCUCON1',0
	.word	44116
	.byte	4,2,35,52,13
	.byte	'FDR',0
	.word	45733
	.byte	4,2,35,56,13
	.byte	'EXTCON',0
	.word	45669
	.byte	4,2,35,60,13
	.byte	'CCUCON2',0
	.word	44313
	.byte	4,2,35,64,13
	.byte	'CCUCON3',0
	.word	44378
	.byte	4,2,35,68,13
	.byte	'CCUCON4',0
	.word	44443
	.byte	4,2,35,72,13
	.byte	'CCUCON5',0
	.word	44508
	.byte	4,2,35,76,13
	.byte	'RSTSTAT',0
	.word	48308
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	3102
	.byte	4,2,35,84,13
	.byte	'RSTCON',0
	.word	48114
	.byte	4,2,35,88,13
	.byte	'ARSTDIS',0
	.word	43986
	.byte	4,2,35,92,13
	.byte	'SWRSTCON',0
	.word	49143
	.byte	4,2,35,96,13
	.byte	'RSTCON2',0
	.word	48178
	.byte	4,2,35,100,13
	.byte	'RSTCON3',0
	.word	48243
	.byte	4,2,35,104,13
	.byte	'reserved_6C',0
	.word	3102
	.byte	4,2,35,108,13
	.byte	'ESRCFGX',0
	.word	50354
	.byte	8,2,35,112,13
	.byte	'ESROCFG',0
	.word	45604
	.byte	4,2,35,120,13
	.byte	'SYSCON',0
	.word	49209
	.byte	4,2,35,124,13
	.byte	'CCUCON6',0
	.word	44573
	.byte	4,3,35,128,1,13
	.byte	'CCUCON7',0
	.word	44638
	.byte	4,3,35,132,1,13
	.byte	'CCUCON8',0
	.word	44703
	.byte	4,3,35,136,1,13
	.byte	'CCUCON9',0
	.word	44768
	.byte	4,3,35,140,1,13
	.byte	'CCUCON10',0
	.word	44181
	.byte	4,3,35,144,1,13
	.byte	'CCUCON11',0
	.word	44247
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	3102
	.byte	4,3,35,152,1,13
	.byte	'PDR',0
	.word	47009
	.byte	4,3,35,156,1,13
	.byte	'IOCR',0
	.word	46037
	.byte	4,3,35,160,1,13
	.byte	'OUT',0
	.word	46754
	.byte	4,3,35,164,1,13
	.byte	'OMR',0
	.word	46629
	.byte	4,3,35,168,1,13
	.byte	'IN',0
	.word	45977
	.byte	4,3,35,172,1,13
	.byte	'reserved_B0',0
	.word	50359
	.byte	16,3,35,176,1,13
	.byte	'STSTAT',0
	.word	49013
	.byte	4,3,35,192,1,13
	.byte	'STCON',0
	.word	48566
	.byte	4,3,35,196,1,13
	.byte	'PMCSR0',0
	.word	47336
	.byte	4,3,35,200,1,13
	.byte	'PMCSR1',0
	.word	47400
	.byte	4,3,35,204,1,13
	.byte	'PMCSR2',0
	.word	47464
	.byte	4,3,35,208,1,13
	.byte	'PMCSR3',0
	.word	47528
	.byte	4,3,35,212,1,13
	.byte	'PMCSR4',0
	.word	47592
	.byte	4,3,35,216,1,13
	.byte	'PMCSR5',0
	.word	47656
	.byte	4,3,35,220,1,13
	.byte	'reserved_E0',0
	.word	3102
	.byte	4,3,35,224,1,13
	.byte	'PMSTAT0',0
	.word	47720
	.byte	4,3,35,228,1,13
	.byte	'PMSWCR1',0
	.word	47785
	.byte	4,3,35,232,1,13
	.byte	'reserved_EC',0
	.word	50359
	.byte	16,3,35,236,1,13
	.byte	'EMSR',0
	.word	45406
	.byte	4,3,35,252,1,13
	.byte	'EMSSW',0
	.word	45468
	.byte	4,3,35,128,2,13
	.byte	'DTSCSTAT',0
	.word	44962
	.byte	4,3,35,132,2,13
	.byte	'DTSCLIM',0
	.word	44897
	.byte	4,3,35,136,2,13
	.byte	'reserved_10C',0
	.word	50368
	.byte	20,3,35,140,2,13
	.byte	'TRAPDIS1',0
	.word	49676
	.byte	4,3,35,160,2,13
	.byte	'TRAPSTAT',0
	.word	49807
	.byte	4,3,35,164,2,13
	.byte	'TRAPSET',0
	.word	49742
	.byte	4,3,35,168,2,13
	.byte	'TRAPCLR',0
	.word	49545
	.byte	4,3,35,172,2,13
	.byte	'TRAPDIS0',0
	.word	49610
	.byte	4,3,35,176,2,13
	.byte	'LCLCON0',0
	.word	46371
	.byte	4,3,35,180,2,13
	.byte	'LCLCON1',0
	.word	46436
	.byte	4,3,35,184,2,13
	.byte	'LCLTEST',0
	.word	46501
	.byte	4,3,35,188,2,13
	.byte	'CHIPID',0
	.word	44833
	.byte	4,3,35,192,2,13
	.byte	'MANID',0
	.word	46566
	.byte	4,3,35,196,2,13
	.byte	'reserved_148',0
	.word	3102
	.byte	4,3,35,200,2,13
	.byte	'SWAPCTRL',0
	.word	49077
	.byte	4,3,35,204,2,13
	.byte	'reserved_150',0
	.word	50368
	.byte	20,3,35,208,2,13
	.byte	'LBISTCTRL0',0
	.word	46099
	.byte	4,3,35,228,2,13
	.byte	'LBISTCTRL1',0
	.word	46167
	.byte	4,3,35,232,2,13
	.byte	'LBISTCTRL2',0
	.word	46235
	.byte	4,3,35,236,2,13
	.byte	'LBISTCTRL3',0
	.word	46303
	.byte	4,3,35,240,2,13
	.byte	'reserved_174',0
	.word	50359
	.byte	16,3,35,244,2,13
	.byte	'STMEM1',0
	.word	48629
	.byte	4,3,35,132,3,13
	.byte	'STMEM2',0
	.word	48693
	.byte	4,3,35,136,3,13
	.byte	'PDISC',0
	.word	46946
	.byte	4,3,35,140,3,13
	.byte	'reserved_190',0
	.word	4922
	.byte	8,3,35,144,3,13
	.byte	'PMTRCSR0',0
	.word	47850
	.byte	4,3,35,152,3,13
	.byte	'PMTRCSR1',0
	.word	47916
	.byte	4,3,35,156,3,13
	.byte	'PMTRCSR2',0
	.word	47982
	.byte	4,3,35,160,3,13
	.byte	'PMTRCSR3',0
	.word	48048
	.byte	4,3,35,164,3,13
	.byte	'reserved_1A8',0
	.word	4293
	.byte	24,3,35,168,3,13
	.byte	'STMEM3',0
	.word	48757
	.byte	4,3,35,192,3,13
	.byte	'STMEM4',0
	.word	48821
	.byte	4,3,35,196,3,13
	.byte	'STMEM5',0
	.word	48885
	.byte	4,3,35,200,3,13
	.byte	'STMEM6',0
	.word	48949
	.byte	4,3,35,204,3,13
	.byte	'reserved_1D0',0
	.word	50359
	.byte	16,3,35,208,3,13
	.byte	'OVCENABLE',0
	.word	46879
	.byte	4,3,35,224,3,13
	.byte	'OVCCON',0
	.word	46815
	.byte	4,3,35,228,3,13
	.byte	'reserved_1E8',0
	.word	50377
	.byte	36,3,35,232,3,13
	.byte	'EIFILT',0
	.word	45218
	.byte	4,3,35,140,4,13
	.byte	'EICR',0
	.word	50386
	.byte	16,3,35,144,4,13
	.byte	'EIFR',0
	.word	45282
	.byte	4,3,35,160,4,13
	.byte	'FMR',0
	.word	45794
	.byte	4,3,35,164,4,13
	.byte	'PDRR',0
	.word	47070
	.byte	4,3,35,168,4,13
	.byte	'IGCR',0
	.word	50395
	.byte	16,3,35,172,4,13
	.byte	'reserved_23C',0
	.word	50359
	.byte	16,3,35,188,4,13
	.byte	'WDTCPU',0
	.word	50413
	.byte	72,3,35,204,4,13
	.byte	'reserved_294',0
	.word	4922
	.byte	8,3,35,148,5,13
	.byte	'EICON0',0
	.word	45028
	.byte	4,3,35,156,5,13
	.byte	'EICON1',0
	.word	45092
	.byte	4,3,35,160,5,13
	.byte	'EISR',0
	.word	45344
	.byte	4,3,35,164,5,13
	.byte	'WDTS',0
	.word	50418
	.byte	12,3,35,168,5,13
	.byte	'SEICON0',0
	.word	48373
	.byte	4,3,35,180,5,13
	.byte	'SEICON1',0
	.word	48438
	.byte	4,3,35,184,5,13
	.byte	'SEISR',0
	.word	48503
	.byte	4,3,35,188,5,13
	.byte	'reserved_2C0',0
	.word	50423
	.byte	176,2,3,35,192,5,13
	.byte	'ACCEN11',0
	.word	43921
	.byte	4,3,35,240,7,13
	.byte	'ACCEN10',0
	.word	43856
	.byte	4,3,35,244,7,13
	.byte	'ACCEN01',0
	.word	43791
	.byte	4,3,35,248,7,13
	.byte	'ACCEN00',0
	.word	43726
	.byte	4,3,35,252,7,0,14
	.word	50434
	.byte	33
	.byte	'Ifx_SCU',0,4,166,18,3
	.word	52555
	.byte	10
	.byte	'_Ifx_CPU_A_Bits',0,22,68,16,4,11
	.byte	'ADDR',0,4
	.word	451
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_A_Bits',0,22,71,3
	.word	52577
	.byte	10
	.byte	'_Ifx_CPU_BIV_Bits',0,22,74,16,4,11
	.byte	'VSS',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'BIV',0,4
	.word	451
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_CPU_BIV_Bits',0,22,78,3
	.word	52638
	.byte	10
	.byte	'_Ifx_CPU_BLK_OMASK_Bits',0,22,81,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	5,27,2,35,0,11
	.byte	'OMASK',0,4
	.word	451
	.byte	12,15,2,35,0,11
	.byte	'ONE',0,4
	.word	451
	.byte	11,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	451
	.byte	4,0,2,35,0,0,33
	.byte	'Ifx_CPU_BLK_OMASK_Bits',0,22,87,3
	.word	52717
	.byte	10
	.byte	'_Ifx_CPU_BLK_OTAR_Bits',0,22,90,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	5,27,2,35,0,11
	.byte	'TBASE',0,4
	.word	451
	.byte	23,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	451
	.byte	4,0,2,35,0,0,33
	.byte	'Ifx_CPU_BLK_OTAR_Bits',0,22,95,3
	.word	52855
	.byte	10
	.byte	'_Ifx_CPU_BLK_RABR_Bits',0,22,98,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	5,27,2,35,0,11
	.byte	'OBASE',0,4
	.word	451
	.byte	17,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	451
	.byte	2,8,2,35,0,11
	.byte	'OMEM',0,4
	.word	451
	.byte	4,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	451
	.byte	3,1,2,35,0,11
	.byte	'OVEN',0,4
	.word	451
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_BLK_RABR_Bits',0,22,106,3
	.word	52976
	.byte	10
	.byte	'_Ifx_CPU_BTV_Bits',0,22,109,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'BTV',0,4
	.word	451
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_CPU_BTV_Bits',0,22,113,3
	.word	53152
	.byte	10
	.byte	'_Ifx_CPU_CCNT_Bits',0,22,116,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	451
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	451
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_CCNT_Bits',0,22,120,3
	.word	53238
	.byte	10
	.byte	'_Ifx_CPU_CCTRL_Bits',0,22,123,16,4,11
	.byte	'CM',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'CE',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'M1',0,4
	.word	451
	.byte	3,27,2,35,0,11
	.byte	'M2',0,4
	.word	451
	.byte	3,24,2,35,0,11
	.byte	'M3',0,4
	.word	451
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	451
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_CPU_CCTRL_Bits',0,22,131,1,3
	.word	53327
	.byte	10
	.byte	'_Ifx_CPU_COMPAT_Bits',0,22,134,1,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	3,29,2,35,0,11
	.byte	'RM',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'SP',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	451
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_CPU_COMPAT_Bits',0,22,140,1,3
	.word	53474
	.byte	10
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,22,143,1,16,4,11
	.byte	'CORE_ID',0,4
	.word	451
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	451
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_CPU_CORE_ID_Bits',0,22,147,1,3
	.word	53603
	.byte	10
	.byte	'_Ifx_CPU_CPR_L_Bits',0,22,150,1,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	5,27,2,35,0,11
	.byte	'LOWBND',0,4
	.word	451
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_CPU_CPR_L_Bits',0,22,154,1,3
	.word	53703
	.byte	10
	.byte	'_Ifx_CPU_CPR_U_Bits',0,22,157,1,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	5,27,2,35,0,11
	.byte	'UPPBND',0,4
	.word	451
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_CPU_CPR_U_Bits',0,22,161,1,3
	.word	53798
	.byte	10
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,22,164,1,16,4,11
	.byte	'MOD_REV',0,4
	.word	451
	.byte	8,24,2,35,0,11
	.byte	'MOD_32B',0,4
	.word	451
	.byte	8,16,2,35,0,11
	.byte	'MOD',0,4
	.word	451
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_CPU_CPU_ID_Bits',0,22,169,1,3
	.word	53893
	.byte	10
	.byte	'_Ifx_CPU_CPXE_Bits',0,22,172,1,16,4,11
	.byte	'XE_N',0,4
	.word	451
	.byte	10,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	451
	.byte	22,0,2,35,0,0,33
	.byte	'Ifx_CPU_CPXE_Bits',0,22,176,1,3
	.word	54003
	.byte	10
	.byte	'_Ifx_CPU_CREVT_Bits',0,22,179,1,16,4,11
	.byte	'EVTA',0,4
	.word	451
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	451
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	451
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_CPU_CREVT_Bits',0,22,187,1,3
	.word	54095
	.byte	10
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,22,190,1,16,4,11
	.byte	'CID',0,4
	.word	451
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	451
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_CPU_CUS_ID_Bits',0,22,194,1,3
	.word	54249
	.byte	10
	.byte	'_Ifx_CPU_D_Bits',0,22,197,1,16,4,11
	.byte	'DATA',0,4
	.word	451
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_D_Bits',0,22,200,1,3
	.word	54343
	.byte	10
	.byte	'_Ifx_CPU_DATR_Bits',0,22,203,1,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	3,29,2,35,0,11
	.byte	'SBE',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	451
	.byte	5,23,2,35,0,11
	.byte	'CWE',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'CFE',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	451
	.byte	3,18,2,35,0,11
	.byte	'SOE',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	451
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_CPU_DATR_Bits',0,22,214,1,3
	.word	54406
	.byte	10
	.byte	'_Ifx_CPU_DBGSR_Bits',0,22,217,1,16,4,11
	.byte	'DE',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'HALT',0,4
	.word	451
	.byte	2,29,2,35,0,11
	.byte	'SIH',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'SUSP',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'PREVSUSP',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'PEVT',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'EVTSRC',0,4
	.word	451
	.byte	5,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	451
	.byte	19,0,2,35,0,0,33
	.byte	'Ifx_CPU_DBGSR_Bits',0,22,228,1,3
	.word	54632
	.byte	10
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,22,231,1,16,4,11
	.byte	'DTA',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	451
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_CPU_DBGTCR_Bits',0,22,235,1,3
	.word	54847
	.byte	10
	.byte	'_Ifx_CPU_DCON0_Bits',0,22,238,1,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'DCBYP',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	451
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_CPU_DCON0_Bits',0,22,243,1,3
	.word	54941
	.byte	10
	.byte	'_Ifx_CPU_DCON2_Bits',0,22,246,1,16,4,11
	.byte	'DCACHE_SZE',0,4
	.word	451
	.byte	16,16,2,35,0,11
	.byte	'DSCRATCH_SZE',0,4
	.word	451
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_CPU_DCON2_Bits',0,22,250,1,3
	.word	55057
	.byte	10
	.byte	'_Ifx_CPU_DCX_Bits',0,22,253,1,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	6,26,2,35,0,11
	.byte	'DCXVALUE',0,4
	.word	451
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_CPU_DCX_Bits',0,22,129,2,3
	.word	55158
	.byte	10
	.byte	'_Ifx_CPU_DEADD_Bits',0,22,132,2,16,4,11
	.byte	'ERROR_ADDRESS',0,4
	.word	451
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_DEADD_Bits',0,22,135,2,3
	.word	55251
	.byte	10
	.byte	'_Ifx_CPU_DIEAR_Bits',0,22,138,2,16,4,11
	.byte	'TA',0,4
	.word	451
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_DIEAR_Bits',0,22,141,2,3
	.word	55331
	.byte	10
	.byte	'_Ifx_CPU_DIETR_Bits',0,22,144,2,16,4,11
	.byte	'IED',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	451
	.byte	6,21,2,35,0,11
	.byte	'IE_UNC',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'IE_DLMU',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'IE_LPB',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'IE_MTMV',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	451
	.byte	15,0,2,35,0,0,33
	.byte	'Ifx_CPU_DIETR_Bits',0,22,159,2,3
	.word	55400
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,22,162,2,16,4,11
	.byte	'EN0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	451
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,22,196,2,3
	.word	55684
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,22,199,2,16,4,11
	.byte	'EN0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	451
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,22,233,2,3
	.word	56275
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,22,236,2,16,4,11
	.byte	'EN32',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	451
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,22,142,3,3
	.word	56866
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,22,145,3,16,4,11
	.byte	'EN32',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	451
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,22,179,3,3
	.word	57467
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,22,182,3,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	451
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,22,186,3,3
	.word	58068
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,22,189,3,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	451
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,22,193,3,3
	.word	58183
	.byte	10
	.byte	'_Ifx_CPU_DMS_Bits',0,22,196,3,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'DMSVALUE',0,4
	.word	451
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_CPU_DMS_Bits',0,22,200,3,3
	.word	58298
	.byte	10
	.byte	'_Ifx_CPU_DPRE_Bits',0,22,203,3,16,4,11
	.byte	'RE_N',0,4
	.word	451
	.byte	18,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	451
	.byte	14,0,2,35,0,0,33
	.byte	'Ifx_CPU_DPRE_Bits',0,22,207,3,3
	.word	58391
	.byte	10
	.byte	'_Ifx_CPU_DPR_L_Bits',0,22,210,3,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	451
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_CPU_DPR_L_Bits',0,22,214,3,3
	.word	58483
	.byte	10
	.byte	'_Ifx_CPU_DPR_U_Bits',0,22,217,3,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	451
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_CPU_DPR_U_Bits',0,22,221,3,3
	.word	58578
	.byte	10
	.byte	'_Ifx_CPU_DPWE_Bits',0,22,224,3,16,4,11
	.byte	'WE_N',0,4
	.word	451
	.byte	18,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	451
	.byte	14,0,2,35,0,0,33
	.byte	'Ifx_CPU_DPWE_Bits',0,22,228,3,3
	.word	58673
	.byte	10
	.byte	'_Ifx_CPU_DSTR_Bits',0,22,231,3,16,4,11
	.byte	'SRE',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'GAE',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'LBE',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'DRE',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	451
	.byte	2,26,2,35,0,11
	.byte	'CRE',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	451
	.byte	7,18,2,35,0,11
	.byte	'DTME',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'LOE',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'SDE',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'SCE',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'CAC',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'MPE',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'CLE',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	451
	.byte	3,8,2,35,0,11
	.byte	'ALN',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	451
	.byte	7,0,2,35,0,0,33
	.byte	'Ifx_CPU_DSTR_Bits',0,22,250,3,3
	.word	58765
	.byte	10
	.byte	'_Ifx_CPU_EXEVT_Bits',0,22,253,3,16,4,11
	.byte	'EVTA',0,4
	.word	451
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	451
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	451
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_CPU_EXEVT_Bits',0,22,133,4,3
	.word	59104
	.byte	10
	.byte	'_Ifx_CPU_FCX_Bits',0,22,136,4,16,4,11
	.byte	'FCXO',0,4
	.word	451
	.byte	16,16,2,35,0,11
	.byte	'FCXS',0,4
	.word	451
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	451
	.byte	12,0,2,35,0,0,33
	.byte	'Ifx_CPU_FCX_Bits',0,22,141,4,3
	.word	59258
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON0_Bits',0,22,144,4,16,4,11
	.byte	'TAG1',0,4
	.word	451
	.byte	6,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	451
	.byte	2,24,2,35,0,11
	.byte	'TAG2',0,4
	.word	451
	.byte	6,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	451
	.byte	2,16,2,35,0,11
	.byte	'TAG3',0,4
	.word	451
	.byte	6,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	451
	.byte	2,8,2,35,0,11
	.byte	'TAG4',0,4
	.word	451
	.byte	6,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	451
	.byte	2,0,2,35,0,0,33
	.byte	'Ifx_CPU_FLASHCON0_Bits',0,22,154,4,3
	.word	59364
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON1_Bits',0,22,157,4,16,4,11
	.byte	'STALL',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	451
	.byte	15,16,2,35,0,11
	.byte	'MASKUECC',0,4
	.word	451
	.byte	2,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	451
	.byte	6,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	451
	.byte	2,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	451
	.byte	6,0,2,35,0,0,33
	.byte	'Ifx_CPU_FLASHCON1_Bits',0,22,165,4,3
	.word	59582
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON2_Bits',0,22,168,4,16,4,11
	.byte	'RECDIS',0,4
	.word	451
	.byte	2,30,2,35,0,11
	.byte	'ECCCORDIS',0,4
	.word	451
	.byte	2,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	451
	.byte	4,24,2,35,0,11
	.byte	'HMARGIN',0,4
	.word	451
	.byte	2,22,2,35,0,11
	.byte	'MSEL',0,4
	.word	451
	.byte	2,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	451
	.byte	4,16,2,35,0,11
	.byte	'ECCSCLR',0,4
	.word	451
	.byte	2,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	451
	.byte	6,8,2,35,0,11
	.byte	'SBABCLR',0,4
	.word	451
	.byte	2,6,2,35,0,11
	.byte	'DBABCLR',0,4
	.word	451
	.byte	2,4,2,35,0,11
	.byte	'MBABCLR',0,4
	.word	451
	.byte	2,2,2,35,0,11
	.byte	'ZBABCLR',0,4
	.word	451
	.byte	2,0,2,35,0,0,33
	.byte	'Ifx_CPU_FLASHCON2_Bits',0,22,182,4,3
	.word	59773
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON3_Bits',0,22,185,4,16,4,11
	.byte	'ECCERRINJ',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'EDCERRINJ',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'SBABERRINJ',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'DBABERRINJ',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'MBABERRINJ',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'ZBABERRINJ',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'SBERERRINJ',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'DBERERRINJ',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'NVMCERRINJ',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'FLCONERRINJ',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	451
	.byte	22,0,2,35,0,0,33
	.byte	'Ifx_CPU_FLASHCON3_Bits',0,22,198,4,3
	.word	60073
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON4_Bits',0,22,201,4,16,4,11
	.byte	'DDIS',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	451
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_CPU_FLASHCON4_Bits',0,22,205,4,3
	.word	60378
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,22,208,4,16,4,11
	.byte	'TST',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'TCL',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	451
	.byte	6,24,2,35,0,11
	.byte	'RM',0,4
	.word	451
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	451
	.byte	8,14,2,35,0,11
	.byte	'FXE',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'FUE',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'FZE',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'FVE',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'FIE',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	451
	.byte	3,6,2,35,0,11
	.byte	'FX',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'FU',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'FZ',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'FV',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'FI',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	451
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,22,227,4,3
	.word	60479
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,22,230,4,16,4,11
	.byte	'OPC',0,4
	.word	451
	.byte	8,24,2,35,0,11
	.byte	'FMT',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	451
	.byte	7,16,2,35,0,11
	.byte	'DREG',0,4
	.word	451
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	451
	.byte	12,0,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,22,237,4,3
	.word	60828
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,22,240,4,16,4,11
	.byte	'PC',0,4
	.word	451
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,22,243,4,3
	.word	60988
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,22,246,4,16,4,11
	.byte	'SRC1',0,4
	.word	451
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,22,249,4,3
	.word	61069
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,22,252,4,16,4,11
	.byte	'SRC2',0,4
	.word	451
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,22,255,4,3
	.word	61156
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,22,130,5,16,4,11
	.byte	'SRC3',0,4
	.word	451
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,22,133,5,3
	.word	61243
	.byte	10
	.byte	'_Ifx_CPU_ICNT_Bits',0,22,136,5,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	451
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	451
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_ICNT_Bits',0,22,140,5,3
	.word	61330
	.byte	10
	.byte	'_Ifx_CPU_ICR_Bits',0,22,143,5,16,4,11
	.byte	'CCPN',0,4
	.word	451
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	451
	.byte	7,17,2,35,0,11
	.byte	'IE',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'PIPN',0,4
	.word	451
	.byte	8,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	451
	.byte	8,0,2,35,0,0,33
	.byte	'Ifx_CPU_ICR_Bits',0,22,150,5,3
	.word	61421
	.byte	10
	.byte	'_Ifx_CPU_ISP_Bits',0,22,153,5,16,4,11
	.byte	'ISP',0,4
	.word	451
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_ISP_Bits',0,22,156,5,3
	.word	61563
	.byte	10
	.byte	'_Ifx_CPU_KRST0_Bits',0,22,159,5,16,4,11
	.byte	'RST',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'RSTSTAT',0,4
	.word	451
	.byte	2,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	451
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_CPU_KRST0_Bits',0,22,164,5,3
	.word	61629
	.byte	10
	.byte	'_Ifx_CPU_KRST1_Bits',0,22,167,5,16,4,11
	.byte	'RST',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	451
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_CPU_KRST1_Bits',0,22,171,5,3
	.word	61740
	.byte	10
	.byte	'_Ifx_CPU_KRSTCLR_Bits',0,22,174,5,16,4,11
	.byte	'CLR',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	451
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_CPU_KRSTCLR_Bits',0,22,178,5,3
	.word	61832
	.byte	10
	.byte	'_Ifx_CPU_LCX_Bits',0,22,181,5,16,4,11
	.byte	'LCXO',0,4
	.word	451
	.byte	16,16,2,35,0,11
	.byte	'LCXS',0,4
	.word	451
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	451
	.byte	12,0,2,35,0,0,33
	.byte	'Ifx_CPU_LCX_Bits',0,22,186,5,3
	.word	61928
	.byte	10
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,22,189,5,16,4,11
	.byte	'EN0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	451
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,22,223,5,3
	.word	62034
	.byte	10
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,22,226,5,16,4,11
	.byte	'EN32',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	451
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,22,132,6,3
	.word	62617
	.byte	10
	.byte	'_Ifx_CPU_M1CNT_Bits',0,22,135,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	451
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	451
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_M1CNT_Bits',0,22,139,6,3
	.word	63210
	.byte	10
	.byte	'_Ifx_CPU_M2CNT_Bits',0,22,142,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	451
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	451
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_M2CNT_Bits',0,22,146,6,3
	.word	63303
	.byte	10
	.byte	'_Ifx_CPU_M3CNT_Bits',0,22,149,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	451
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	451
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_M3CNT_Bits',0,22,153,6,3
	.word	63396
	.byte	10
	.byte	'_Ifx_CPU_OSEL_Bits',0,22,156,6,16,4,11
	.byte	'SHOVEN_X',0,4
	.word	451
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_OSEL_Bits',0,22,159,6,3
	.word	63489
	.byte	10
	.byte	'_Ifx_CPU_PC_Bits',0,22,162,6,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'PC',0,4
	.word	451
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_CPU_PC_Bits',0,22,166,6,3
	.word	63562
	.byte	10
	.byte	'_Ifx_CPU_PCON0_Bits',0,22,169,6,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'PCBYP',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	451
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_CPU_PCON0_Bits',0,22,174,6,3
	.word	63647
	.byte	10
	.byte	'_Ifx_CPU_PCON1_Bits',0,22,177,6,16,4,11
	.byte	'PCINV',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'PBINV',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	451
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_CPU_PCON1_Bits',0,22,182,6,3
	.word	63763
	.byte	10
	.byte	'_Ifx_CPU_PCON2_Bits',0,22,185,6,16,4,11
	.byte	'PCACHE_SZE',0,4
	.word	451
	.byte	16,16,2,35,0,11
	.byte	'PSCRATCH_SZE',0,4
	.word	451
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_CPU_PCON2_Bits',0,22,189,6,3
	.word	63874
	.byte	10
	.byte	'_Ifx_CPU_PCXI_Bits',0,22,192,6,16,4,11
	.byte	'PCXO',0,4
	.word	451
	.byte	16,16,2,35,0,11
	.byte	'PCXS',0,4
	.word	451
	.byte	4,12,2,35,0,11
	.byte	'UL',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'PIE',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'PCPN',0,4
	.word	451
	.byte	8,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	451
	.byte	2,0,2,35,0,0,33
	.byte	'Ifx_CPU_PCXI_Bits',0,22,200,6,3
	.word	63975
	.byte	10
	.byte	'_Ifx_CPU_PIEAR_Bits',0,22,203,6,16,4,11
	.byte	'TA',0,4
	.word	451
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_PIEAR_Bits',0,22,206,6,3
	.word	64128
	.byte	10
	.byte	'_Ifx_CPU_PIETR_Bits',0,22,209,6,16,4,11
	.byte	'IED',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	451
	.byte	6,21,2,35,0,11
	.byte	'IE_UNC',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'IE_ADDR',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'IE_LPB',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'IE_MTMV',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	451
	.byte	15,0,2,35,0,0,33
	.byte	'Ifx_CPU_PIETR_Bits',0,22,224,6,3
	.word	64197
	.byte	10
	.byte	'_Ifx_CPU_PMA0_Bits',0,22,227,6,16,4,11
	.byte	'DAC',0,4
	.word	451
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	451
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_CPU_PMA0_Bits',0,22,231,6,3
	.word	64481
	.byte	10
	.byte	'_Ifx_CPU_PMA1_Bits',0,22,234,6,16,4,11
	.byte	'CAC',0,4
	.word	451
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	451
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_CPU_PMA1_Bits',0,22,238,6,3
	.word	64572
	.byte	10
	.byte	'_Ifx_CPU_PMA2_Bits',0,22,241,6,16,4,11
	.byte	'PSI',0,4
	.word	451
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	451
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_CPU_PMA2_Bits',0,22,245,6,3
	.word	64663
	.byte	10
	.byte	'_Ifx_CPU_PSTR_Bits',0,22,248,6,16,4,11
	.byte	'FRE',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'FBE',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	451
	.byte	9,20,2,35,0,11
	.byte	'FPE',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'FME',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	451
	.byte	17,0,2,35,0,0,33
	.byte	'Ifx_CPU_PSTR_Bits',0,22,130,7,3
	.word	64754
	.byte	10
	.byte	'_Ifx_CPU_PSW_Bits',0,22,133,7,16,4,11
	.byte	'CDC',0,4
	.word	451
	.byte	7,25,2,35,0,11
	.byte	'CDE',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'GW',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'IS',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'IO',0,4
	.word	451
	.byte	2,20,2,35,0,11
	.byte	'PRS',0,4
	.word	451
	.byte	2,18,2,35,0,11
	.byte	'S',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'PRS2',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	451
	.byte	8,8,2,35,0,11
	.byte	'USB',0,4
	.word	451
	.byte	8,0,2,35,0,0,33
	.byte	'Ifx_CPU_PSW_Bits',0,22,145,7,3
	.word	64957
	.byte	10
	.byte	'_Ifx_CPU_RGN_ACCENA_Bits',0,22,148,7,16,4,11
	.byte	'EN0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	451
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_RGN_ACCENA_Bits',0,22,182,7,3
	.word	65162
	.byte	10
	.byte	'_Ifx_CPU_RGN_ACCENB_Bits',0,22,185,7,16,4,11
	.byte	'EN32',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	451
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_RGN_ACCENB_Bits',0,22,219,7,3
	.word	65729
	.byte	10
	.byte	'_Ifx_CPU_RGN_LA_Bits',0,22,222,7,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	451
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_CPU_RGN_LA_Bits',0,22,226,7,3
	.word	66306
	.byte	10
	.byte	'_Ifx_CPU_RGN_UA_Bits',0,22,229,7,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	451
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_CPU_RGN_UA_Bits',0,22,233,7,3
	.word	66401
	.byte	10
	.byte	'_Ifx_CPU_SEGEN_Bits',0,22,236,7,16,4,11
	.byte	'ADFLIP',0,4
	.word	451
	.byte	8,24,2,35,0,11
	.byte	'ADTYPE',0,4
	.word	451
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	451
	.byte	21,1,2,35,0,11
	.byte	'AE',0,4
	.word	451
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_SEGEN_Bits',0,22,242,7,3
	.word	66496
	.byte	10
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,22,245,7,16,4,11
	.byte	'EN0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	451
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,22,151,8,3
	.word	66624
	.byte	10
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,22,154,8,16,4,11
	.byte	'EN32',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	451
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,22,188,8,3
	.word	67207
	.byte	10
	.byte	'_Ifx_CPU_SMACON_Bits',0,22,191,8,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	24,8,2,35,0,11
	.byte	'IODT',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	451
	.byte	7,0,2,35,0,0,33
	.byte	'Ifx_CPU_SMACON_Bits',0,22,196,8,3
	.word	67800
	.byte	10
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,22,199,8,16,4,11
	.byte	'EN0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	451
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,22,233,8,3
	.word	67918
	.byte	10
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,22,236,8,16,4,11
	.byte	'EN32',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	451
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,22,142,9,3
	.word	68507
	.byte	10
	.byte	'_Ifx_CPU_SWEVT_Bits',0,22,145,9,16,4,11
	.byte	'EVTA',0,4
	.word	451
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	451
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	451
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_CPU_SWEVT_Bits',0,22,153,9,3
	.word	69106
	.byte	10
	.byte	'_Ifx_CPU_SYSCON_Bits',0,22,156,9,16,4,11
	.byte	'FCDSF',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'PROTEN',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'TPROTEN',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'IS',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'TS',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	451
	.byte	3,24,2,35,0,11
	.byte	'ESDIS',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	451
	.byte	7,16,2,35,0,11
	.byte	'U1_IED',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'U1_IOS',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	451
	.byte	6,8,2,35,0,11
	.byte	'BHALT',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	451
	.byte	7,0,2,35,0,0,33
	.byte	'Ifx_CPU_SYSCON_Bits',0,22,171,9,3
	.word	69260
	.byte	10
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,22,174,9,16,4,11
	.byte	'ASI',0,4
	.word	451
	.byte	5,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	451
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,22,178,9,3
	.word	69559
	.byte	10
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,22,181,9,16,4,11
	.byte	'TEXP0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'TEXP1',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'TEXP2',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	451
	.byte	13,16,2,35,0,11
	.byte	'TTRAP',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	451
	.byte	15,0,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_CON_Bits',0,22,189,9,3
	.word	69657
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,22,192,9,16,4,11
	.byte	'EXTIM_CLASS_EN',0,4
	.word	451
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	451
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,22,196,9,3
	.word	69829
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,22,199,9,16,4,11
	.byte	'ENTRY_CVAL',0,4
	.word	451
	.byte	12,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	451
	.byte	20,0,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,22,203,9,3
	.word	69958
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,22,206,9,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	4,28,2,35,0,11
	.byte	'ENTRY_LVAL',0,4
	.word	451
	.byte	8,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	451
	.byte	20,0,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,22,211,9,3
	.word	70088
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,22,214,9,16,4,11
	.byte	'EXIT_CVAL',0,4
	.word	451
	.byte	24,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	451
	.byte	8,0,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,22,218,9,3
	.word	70240
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,22,221,9,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	4,28,2,35,0,11
	.byte	'EXIT_LVAL',0,4
	.word	451
	.byte	20,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	451
	.byte	8,0,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,22,226,9,3
	.word	70367
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_FCX_Bits',0,22,229,9,16,4,11
	.byte	'EXIT_FCX',0,4
	.word	451
	.byte	20,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	451
	.byte	12,0,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_FCX_Bits',0,22,233,9,3
	.word	70516
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_STAT_Bits',0,22,236,9,16,4,11
	.byte	'EXIT_TIN',0,4
	.word	451
	.byte	8,24,2,35,0,11
	.byte	'EXIT_CLASS',0,4
	.word	451
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	451
	.byte	4,17,2,35,0,11
	.byte	'EXIT_AT',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'ENTRY_TIN',0,4
	.word	451
	.byte	8,8,2,35,0,11
	.byte	'ENTRY_CLASS',0,4
	.word	451
	.byte	3,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	451
	.byte	4,1,2,35,0,11
	.byte	'ENTRY_AT',0,4
	.word	451
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_STAT_Bits',0,22,246,9,3
	.word	70630
	.byte	10
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,22,249,9,16,4,11
	.byte	'TIMER',0,4
	.word	451
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,22,252,9,3
	.word	70874
	.byte	10
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,22,255,9,16,4,11
	.byte	'T0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'T1',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'T2',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'T3',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'T4',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'T5',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'T6',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'T7',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	451
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,22,138,10,3
	.word	70954
	.byte	10
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,22,141,10,16,4,11
	.byte	'ADDR',0,4
	.word	451
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_TR_ADR_Bits',0,22,144,10,3
	.word	71149
	.byte	10
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,22,147,10,16,4,11
	.byte	'EVTA',0,4
	.word	451
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	451
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	451
	.byte	4,20,2,35,0,11
	.byte	'TYP',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'RNG',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'ASI_EN',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'ASI',0,4
	.word	451
	.byte	5,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	451
	.byte	6,5,2,35,0,11
	.byte	'AST',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'ALD',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	451
	.byte	3,0,2,35,0,0,33
	.byte	'Ifx_CPU_TR_EVT_Bits',0,22,164,10,3
	.word	71222
	.byte	12,22,172,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52577
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_A',0,22,177,10,3
	.word	71540
	.byte	12,22,180,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52638
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_BIV',0,22,185,10,3
	.word	71599
	.byte	12,22,188,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52717
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_BLK_OMASK',0,22,193,10,3
	.word	71660
	.byte	12,22,196,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52855
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_BLK_OTAR',0,22,201,10,3
	.word	71727
	.byte	12,22,204,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52976
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_BLK_RABR',0,22,209,10,3
	.word	71793
	.byte	12,22,212,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53152
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_BTV',0,22,217,10,3
	.word	71859
	.byte	12,22,220,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53238
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CCNT',0,22,225,10,3
	.word	71920
	.byte	12,22,228,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53327
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CCTRL',0,22,233,10,3
	.word	71982
	.byte	12,22,236,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53474
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_COMPAT',0,22,241,10,3
	.word	72045
	.byte	12,22,244,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53603
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CORE_ID',0,22,249,10,3
	.word	72109
	.byte	12,22,252,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53703
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CPR_L',0,22,129,11,3
	.word	72174
	.byte	12,22,132,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53798
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CPR_U',0,22,137,11,3
	.word	72237
	.byte	12,22,140,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53893
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CPU_ID',0,22,145,11,3
	.word	72300
	.byte	12,22,148,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54003
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CPXE',0,22,153,11,3
	.word	72364
	.byte	12,22,156,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54095
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CREVT',0,22,161,11,3
	.word	72426
	.byte	12,22,164,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54249
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CUS_ID',0,22,169,11,3
	.word	72489
	.byte	12,22,172,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54343
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_D',0,22,177,11,3
	.word	72553
	.byte	12,22,180,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54406
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DATR',0,22,185,11,3
	.word	72612
	.byte	12,22,188,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54632
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DBGSR',0,22,193,11,3
	.word	72674
	.byte	12,22,196,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54847
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DBGTCR',0,22,201,11,3
	.word	72737
	.byte	12,22,204,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54941
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DCON0',0,22,209,11,3
	.word	72801
	.byte	12,22,212,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55057
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DCON2',0,22,217,11,3
	.word	72864
	.byte	12,22,220,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55158
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DCX',0,22,225,11,3
	.word	72927
	.byte	12,22,228,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55251
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DEADD',0,22,233,11,3
	.word	72988
	.byte	12,22,236,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55331
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DIEAR',0,22,241,11,3
	.word	73051
	.byte	12,22,244,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55400
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DIETR',0,22,249,11,3
	.word	73114
	.byte	12,22,252,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55684
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R',0,22,129,12,3
	.word	73177
	.byte	12,22,132,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56275
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W',0,22,137,12,3
	.word	73257
	.byte	12,22,140,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56866
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R',0,22,145,12,3
	.word	73337
	.byte	12,22,148,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57467
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W',0,22,153,12,3
	.word	73417
	.byte	12,22,156,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58068
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA',0,22,161,12,3
	.word	73497
	.byte	12,22,164,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58183
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA',0,22,169,12,3
	.word	73571
	.byte	12,22,172,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58298
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DMS',0,22,177,12,3
	.word	73645
	.byte	12,22,180,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58391
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DPRE',0,22,185,12,3
	.word	73706
	.byte	12,22,188,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58483
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DPR_L',0,22,193,12,3
	.word	73768
	.byte	12,22,196,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58578
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DPR_U',0,22,201,12,3
	.word	73831
	.byte	12,22,204,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58673
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DPWE',0,22,209,12,3
	.word	73894
	.byte	12,22,212,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58765
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DSTR',0,22,217,12,3
	.word	73956
	.byte	12,22,220,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59104
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_EXEVT',0,22,225,12,3
	.word	74018
	.byte	12,22,228,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59258
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FCX',0,22,233,12,3
	.word	74081
	.byte	12,22,236,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59364
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FLASHCON0',0,22,241,12,3
	.word	74142
	.byte	12,22,244,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59582
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FLASHCON1',0,22,249,12,3
	.word	74209
	.byte	12,22,252,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59773
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FLASHCON2',0,22,129,13,3
	.word	74276
	.byte	12,22,132,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60073
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FLASHCON3',0,22,137,13,3
	.word	74343
	.byte	12,22,140,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60378
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FLASHCON4',0,22,145,13,3
	.word	74410
	.byte	12,22,148,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60479
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,22,153,13,3
	.word	74477
	.byte	12,22,156,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60828
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,22,161,13,3
	.word	74547
	.byte	12,22,164,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60988
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,22,169,13,3
	.word	74617
	.byte	12,22,172,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61069
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,22,177,13,3
	.word	74686
	.byte	12,22,180,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61156
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,22,185,13,3
	.word	74757
	.byte	12,22,188,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61243
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,22,193,13,3
	.word	74828
	.byte	12,22,196,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61330
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_ICNT',0,22,201,13,3
	.word	74899
	.byte	12,22,204,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61421
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_ICR',0,22,209,13,3
	.word	74961
	.byte	12,22,212,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61563
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_ISP',0,22,217,13,3
	.word	75022
	.byte	12,22,220,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61629
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_KRST0',0,22,225,13,3
	.word	75083
	.byte	12,22,228,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61740
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_KRST1',0,22,233,13,3
	.word	75146
	.byte	12,22,236,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61832
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_KRSTCLR',0,22,241,13,3
	.word	75209
	.byte	12,22,244,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61928
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_LCX',0,22,249,13,3
	.word	75274
	.byte	12,22,252,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62034
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R',0,22,129,14,3
	.word	75335
	.byte	12,22,132,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62617
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R',0,22,137,14,3
	.word	75411
	.byte	12,22,140,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63210
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_M1CNT',0,22,145,14,3
	.word	75487
	.byte	12,22,148,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63303
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_M2CNT',0,22,153,14,3
	.word	75550
	.byte	12,22,156,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63396
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_M3CNT',0,22,161,14,3
	.word	75613
	.byte	12,22,164,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63489
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_OSEL',0,22,169,14,3
	.word	75676
	.byte	12,22,172,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63562
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PC',0,22,177,14,3
	.word	75738
	.byte	12,22,180,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63647
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PCON0',0,22,185,14,3
	.word	75798
	.byte	12,22,188,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63763
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PCON1',0,22,193,14,3
	.word	75861
	.byte	12,22,196,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63874
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PCON2',0,22,201,14,3
	.word	75924
	.byte	12,22,204,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63975
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PCXI',0,22,209,14,3
	.word	75987
	.byte	12,22,212,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64128
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PIEAR',0,22,217,14,3
	.word	76049
	.byte	12,22,220,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64197
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PIETR',0,22,225,14,3
	.word	76112
	.byte	12,22,228,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64481
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PMA0',0,22,233,14,3
	.word	76175
	.byte	12,22,236,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64572
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PMA1',0,22,241,14,3
	.word	76237
	.byte	12,22,244,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64663
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PMA2',0,22,249,14,3
	.word	76299
	.byte	12,22,252,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64754
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PSTR',0,22,129,15,3
	.word	76361
	.byte	12,22,132,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64957
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PSW',0,22,137,15,3
	.word	76423
	.byte	12,22,140,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65162
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_RGN_ACCENA',0,22,145,15,3
	.word	76484
	.byte	12,22,148,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65729
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_RGN_ACCENB',0,22,153,15,3
	.word	76552
	.byte	12,22,156,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66306
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_RGN_LA',0,22,161,15,3
	.word	76620
	.byte	12,22,164,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66401
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_RGN_UA',0,22,169,15,3
	.word	76684
	.byte	12,22,172,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66496
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SEGEN',0,22,177,15,3
	.word	76748
	.byte	12,22,180,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66624
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W',0,22,185,15,3
	.word	76811
	.byte	12,22,188,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67207
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W',0,22,193,15,3
	.word	76887
	.byte	12,22,196,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67800
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SMACON',0,22,201,15,3
	.word	76963
	.byte	12,22,204,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67918
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R',0,22,209,15,3
	.word	77027
	.byte	12,22,212,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68507
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R',0,22,217,15,3
	.word	77106
	.byte	12,22,220,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69106
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SWEVT',0,22,225,15,3
	.word	77185
	.byte	12,22,228,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69260
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SYSCON',0,22,233,15,3
	.word	77248
	.byte	12,22,236,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69559
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TASK_ASI',0,22,241,15,3
	.word	77312
	.byte	12,22,244,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69657
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_CON',0,22,249,15,3
	.word	77378
	.byte	12,22,252,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69829
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN',0,22,129,16,3
	.word	77443
	.byte	12,22,132,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69958
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL',0,22,137,16,3
	.word	77519
	.byte	12,22,140,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70088
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL',0,22,145,16,3
	.word	77597
	.byte	12,22,148,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70240
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL',0,22,153,16,3
	.word	77675
	.byte	12,22,156,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70367
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL',0,22,161,16,3
	.word	77752
	.byte	12,22,164,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70516
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_FCX',0,22,169,16,3
	.word	77829
	.byte	12,22,172,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70630
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_STAT',0,22,177,16,3
	.word	77900
	.byte	12,22,180,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70874
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_TIMER',0,22,185,16,3
	.word	77972
	.byte	12,22,188,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70954
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TRIG_ACC',0,22,193,16,3
	.word	78039
	.byte	12,22,196,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71149
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TR_ADR',0,22,201,16,3
	.word	78105
	.byte	12,22,204,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71222
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TR_EVT',0,22,209,16,3
	.word	78169
	.byte	10
	.byte	'_Ifx_CPU_RGN',0,22,221,16,25,16,13
	.byte	'LA',0
	.word	76620
	.byte	4,2,35,0,13
	.byte	'UA',0
	.word	76684
	.byte	4,2,35,4,13
	.byte	'ACCENA',0
	.word	76484
	.byte	4,2,35,8,13
	.byte	'ACCENB',0
	.word	76552
	.byte	4,2,35,12,0,14
	.word	78233
	.byte	33
	.byte	'Ifx_CPU_RGN',0,22,227,16,3
	.word	78309
	.byte	10
	.byte	'_Ifx_CPU_BLK',0,22,242,16,25,12,13
	.byte	'RABR',0
	.word	71793
	.byte	4,2,35,0,13
	.byte	'OTAR',0
	.word	71727
	.byte	4,2,35,4,13
	.byte	'OMASK',0
	.word	71660
	.byte	4,2,35,8,0,14
	.word	78335
	.byte	33
	.byte	'Ifx_CPU_BLK',0,22,247,16,3
	.word	78398
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP',0,22,134,17,25,28,13
	.byte	'CON',0
	.word	74477
	.byte	4,2,35,0,13
	.byte	'PC',0
	.word	74617
	.byte	4,2,35,4,13
	.byte	'OPC',0
	.word	74547
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	3102
	.byte	4,2,35,12,13
	.byte	'SRC1',0
	.word	74686
	.byte	4,2,35,16,13
	.byte	'SRC2',0
	.word	74757
	.byte	4,2,35,20,13
	.byte	'SRC3',0
	.word	74828
	.byte	4,2,35,24,0,14
	.word	78424
	.byte	33
	.byte	'Ifx_CPU_FPU_TRAP',0,22,143,17,3
	.word	78549
	.byte	10
	.byte	'_Ifx_CPU_DPR',0,22,158,17,25,8,13
	.byte	'L',0
	.word	73768
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	73831
	.byte	4,2,35,4,0,14
	.word	78580
	.byte	33
	.byte	'Ifx_CPU_DPR',0,22,162,17,3
	.word	78622
	.byte	10
	.byte	'_Ifx_CPU_CPR',0,22,177,17,25,8,13
	.byte	'L',0
	.word	72174
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	72237
	.byte	4,2,35,4,0,14
	.word	78648
	.byte	33
	.byte	'Ifx_CPU_CPR',0,22,181,17,3
	.word	78690
	.byte	18,12
	.word	77972
	.byte	19,2,0,10
	.byte	'_Ifx_CPU_TPS',0,22,196,17,25,16,13
	.byte	'CON',0
	.word	77378
	.byte	4,2,35,0,13
	.byte	'TIMER',0
	.word	78716
	.byte	12,2,35,4,0,14
	.word	78725
	.byte	33
	.byte	'Ifx_CPU_TPS',0,22,200,17,3
	.word	78773
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM',0,22,215,17,25,28,13
	.byte	'ENTRY_LVAL',0
	.word	77597
	.byte	4,2,35,0,13
	.byte	'ENTRY_CVAL',0
	.word	77519
	.byte	4,2,35,4,13
	.byte	'EXIT_LVAL',0
	.word	77752
	.byte	4,2,35,8,13
	.byte	'EXIT_CVAL',0
	.word	77675
	.byte	4,2,35,12,13
	.byte	'CLASS_EN',0
	.word	77443
	.byte	4,2,35,16,13
	.byte	'STAT',0
	.word	77900
	.byte	4,2,35,20,13
	.byte	'FCX',0
	.word	77829
	.byte	4,2,35,24,0,14
	.word	78799
	.byte	33
	.byte	'Ifx_CPU_TPS_EXTIM',0,22,224,17,3
	.word	78948
	.byte	10
	.byte	'_Ifx_CPU_TR',0,22,239,17,25,8,13
	.byte	'EVT',0
	.word	78169
	.byte	4,2,35,0,13
	.byte	'ADR',0
	.word	78105
	.byte	4,2,35,4,0,14
	.word	78980
	.byte	33
	.byte	'Ifx_CPU_TR',0,22,243,17,3
	.word	79025
	.byte	18,128,34
	.word	603
	.byte	19,255,33,0,18,236,253,2
	.word	603
	.byte	19,235,253,2,0,18,244,31
	.word	603
	.byte	19,243,31,0,18,128,1
	.word	78233
	.byte	19,7,0,14
	.word	79085
	.byte	18,232,1
	.word	603
	.byte	19,231,1,0,18,128,48
	.word	603
	.byte	19,255,47,0,18,128,3
	.word	78335
	.byte	19,31,0,14
	.word	79122
	.byte	18,160,39
	.word	603
	.byte	19,159,39,0,18,208,223,1
	.word	603
	.byte	19,207,223,1,0,18,248,1
	.word	603
	.byte	19,247,1,0,18,244,29
	.word	603
	.byte	19,243,29,0,18,188,3
	.word	603
	.byte	19,187,3,0,18,232,3
	.word	603
	.byte	19,231,3,0,18,252,23
	.word	603
	.byte	19,251,23,0,14
	.word	78424
	.byte	18,228,63
	.word	603
	.byte	19,227,63,0,18,144,1
	.word	78580
	.byte	19,17,0,14
	.word	79232
	.byte	18,240,30
	.word	603
	.byte	19,239,30,0,18,80
	.word	78648
	.byte	19,9,0,14
	.word	79258
	.byte	18,176,31
	.word	603
	.byte	19,175,31,0,18,152,7
	.word	603
	.byte	19,151,7,0,14
	.word	78725
	.byte	18,48
	.word	603
	.byte	19,47,0,14
	.word	78799
	.byte	18,164,23
	.word	603
	.byte	19,163,23,0,18,64
	.word	78980
	.byte	19,7,0,14
	.word	79324
	.byte	18,192,23
	.word	603
	.byte	19,191,23,0,18,180,1
	.word	603
	.byte	19,179,1,0,18,172,1
	.word	603
	.byte	19,171,1,0,18,64
	.word	72553
	.byte	19,15,0,18,64
	.word	603
	.byte	19,63,0,18,64
	.word	71540
	.byte	19,15,0,10
	.byte	'_Ifx_CPU',0,22,130,18,25,128,128,8,13
	.byte	'reserved_0',0
	.word	79050
	.byte	128,34,2,35,0,13
	.byte	'FLASHCON0',0
	.word	74142
	.byte	4,3,35,128,34,13
	.byte	'FLASHCON1',0
	.word	74209
	.byte	4,3,35,132,34,13
	.byte	'FLASHCON2',0
	.word	74276
	.byte	4,3,35,136,34,13
	.byte	'FLASHCON3',0
	.word	74343
	.byte	4,3,35,140,34,13
	.byte	'FLASHCON4',0
	.word	74410
	.byte	4,3,35,144,34,13
	.byte	'reserved_1114',0
	.word	79061
	.byte	236,253,2,3,35,148,34,13
	.byte	'KRST0',0
	.word	75083
	.byte	4,4,35,128,160,3,13
	.byte	'KRST1',0
	.word	75146
	.byte	4,4,35,132,160,3,13
	.byte	'KRSTCLR',0
	.word	75209
	.byte	4,4,35,136,160,3,13
	.byte	'reserved_D00C',0
	.word	79074
	.byte	244,31,4,35,140,160,3,13
	.byte	'RGN',0
	.word	79095
	.byte	128,1,4,35,128,192,3,13
	.byte	'reserved_E080',0
	.word	4922
	.byte	8,4,35,128,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R0',0
	.word	77027
	.byte	4,4,35,136,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R0',0
	.word	77106
	.byte	4,4,35,140,193,3,13
	.byte	'reserved_E090',0
	.word	4922
	.byte	8,4,35,144,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R1',0
	.word	77027
	.byte	4,4,35,152,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R1',0
	.word	77106
	.byte	4,4,35,156,193,3,13
	.byte	'reserved_E0A0',0
	.word	4922
	.byte	8,4,35,160,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R2',0
	.word	77027
	.byte	4,4,35,168,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R2',0
	.word	77106
	.byte	4,4,35,172,193,3,13
	.byte	'reserved_E0B0',0
	.word	4922
	.byte	8,4,35,176,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R3',0
	.word	77027
	.byte	4,4,35,184,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R3',0
	.word	77106
	.byte	4,4,35,188,193,3,13
	.byte	'reserved_E0C0',0
	.word	4922
	.byte	8,4,35,192,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R4',0
	.word	77027
	.byte	4,4,35,200,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R4',0
	.word	77106
	.byte	4,4,35,204,193,3,13
	.byte	'reserved_E0D0',0
	.word	4922
	.byte	8,4,35,208,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R5',0
	.word	77027
	.byte	4,4,35,216,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R5',0
	.word	77106
	.byte	4,4,35,220,193,3,13
	.byte	'reserved_E0E0',0
	.word	4922
	.byte	8,4,35,224,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R6',0
	.word	77027
	.byte	4,4,35,232,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R6',0
	.word	77106
	.byte	4,4,35,236,193,3,13
	.byte	'reserved_E0F0',0
	.word	4922
	.byte	8,4,35,240,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R7',0
	.word	77027
	.byte	4,4,35,248,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R7',0
	.word	77106
	.byte	4,4,35,252,193,3,13
	.byte	'SFR_SPROT_ACCENA_W',0
	.word	76811
	.byte	4,4,35,128,194,3,13
	.byte	'SFR_SPROT_ACCENB_W',0
	.word	76887
	.byte	4,4,35,132,194,3,13
	.byte	'reserved_E108',0
	.word	4922
	.byte	8,4,35,136,194,3,13
	.byte	'LPB_SPROT_ACCENA_R',0
	.word	75335
	.byte	4,4,35,144,194,3,13
	.byte	'LPB_SPROT_ACCENB_R',0
	.word	75411
	.byte	4,4,35,148,194,3,13
	.byte	'reserved_E118',0
	.word	79100
	.byte	232,1,4,35,152,194,3,13
	.byte	'DLMU_SPROT_RGNLA0',0
	.word	73497
	.byte	4,4,35,128,196,3,13
	.byte	'DLMU_SPROT_RGNUA0',0
	.word	73571
	.byte	4,4,35,132,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W0',0
	.word	73257
	.byte	4,4,35,136,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W0',0
	.word	73417
	.byte	4,4,35,140,196,3,13
	.byte	'DLMU_SPROT_RGNLA1',0
	.word	73497
	.byte	4,4,35,144,196,3,13
	.byte	'DLMU_SPROT_RGNUA1',0
	.word	73571
	.byte	4,4,35,148,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W1',0
	.word	73257
	.byte	4,4,35,152,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W1',0
	.word	73417
	.byte	4,4,35,156,196,3,13
	.byte	'DLMU_SPROT_RGNLA2',0
	.word	73497
	.byte	4,4,35,160,196,3,13
	.byte	'DLMU_SPROT_RGNUA2',0
	.word	73571
	.byte	4,4,35,164,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W2',0
	.word	73257
	.byte	4,4,35,168,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W2',0
	.word	73417
	.byte	4,4,35,172,196,3,13
	.byte	'DLMU_SPROT_RGNLA3',0
	.word	73497
	.byte	4,4,35,176,196,3,13
	.byte	'DLMU_SPROT_RGNUA3',0
	.word	73571
	.byte	4,4,35,180,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W3',0
	.word	73257
	.byte	4,4,35,184,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W3',0
	.word	73417
	.byte	4,4,35,188,196,3,13
	.byte	'DLMU_SPROT_RGNLA4',0
	.word	73497
	.byte	4,4,35,192,196,3,13
	.byte	'DLMU_SPROT_RGNUA4',0
	.word	73571
	.byte	4,4,35,196,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W4',0
	.word	73257
	.byte	4,4,35,200,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W4',0
	.word	73417
	.byte	4,4,35,204,196,3,13
	.byte	'DLMU_SPROT_RGNLA5',0
	.word	73497
	.byte	4,4,35,208,196,3,13
	.byte	'DLMU_SPROT_RGNUA5',0
	.word	73571
	.byte	4,4,35,212,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W5',0
	.word	73257
	.byte	4,4,35,216,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W5',0
	.word	73417
	.byte	4,4,35,220,196,3,13
	.byte	'DLMU_SPROT_RGNLA6',0
	.word	73497
	.byte	4,4,35,224,196,3,13
	.byte	'DLMU_SPROT_RGNUA6',0
	.word	73571
	.byte	4,4,35,228,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W6',0
	.word	73257
	.byte	4,4,35,232,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W6',0
	.word	73417
	.byte	4,4,35,236,196,3,13
	.byte	'DLMU_SPROT_RGNLA7',0
	.word	73497
	.byte	4,4,35,240,196,3,13
	.byte	'DLMU_SPROT_RGNUA7',0
	.word	73571
	.byte	4,4,35,244,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W7',0
	.word	73257
	.byte	4,4,35,248,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W7',0
	.word	73417
	.byte	4,4,35,252,196,3,13
	.byte	'reserved_E280',0
	.word	4922
	.byte	8,4,35,128,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R0',0
	.word	73177
	.byte	4,4,35,136,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R0',0
	.word	73337
	.byte	4,4,35,140,197,3,13
	.byte	'reserved_E290',0
	.word	4922
	.byte	8,4,35,144,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R1',0
	.word	73177
	.byte	4,4,35,152,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R1',0
	.word	73337
	.byte	4,4,35,156,197,3,13
	.byte	'reserved_E2A0',0
	.word	4922
	.byte	8,4,35,160,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R2',0
	.word	73177
	.byte	4,4,35,168,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R2',0
	.word	73337
	.byte	4,4,35,172,197,3,13
	.byte	'reserved_E2B0',0
	.word	4922
	.byte	8,4,35,176,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R3',0
	.word	73177
	.byte	4,4,35,184,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R3',0
	.word	73337
	.byte	4,4,35,188,197,3,13
	.byte	'reserved_E2C0',0
	.word	4922
	.byte	8,4,35,192,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R4',0
	.word	73177
	.byte	4,4,35,200,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R4',0
	.word	73337
	.byte	4,4,35,204,197,3,13
	.byte	'reserved_E2D0',0
	.word	4922
	.byte	8,4,35,208,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R5',0
	.word	73177
	.byte	4,4,35,216,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R5',0
	.word	73337
	.byte	4,4,35,220,197,3,13
	.byte	'reserved_E2E0',0
	.word	4922
	.byte	8,4,35,224,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R6',0
	.word	73177
	.byte	4,4,35,232,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R6',0
	.word	73337
	.byte	4,4,35,236,197,3,13
	.byte	'reserved_E2F0',0
	.word	4922
	.byte	8,4,35,240,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R7',0
	.word	73177
	.byte	4,4,35,248,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R7',0
	.word	73337
	.byte	4,4,35,252,197,3,13
	.byte	'reserved_E300',0
	.word	79111
	.byte	128,48,4,35,128,198,3,13
	.byte	'OSEL',0
	.word	75676
	.byte	4,4,35,128,246,3,13
	.byte	'reserved_FB04',0
	.word	5262
	.byte	12,4,35,132,246,3,13
	.byte	'BLK',0
	.word	79132
	.byte	128,3,4,35,144,246,3,13
	.byte	'reserved_FC90',0
	.word	79137
	.byte	160,39,4,35,144,249,3,13
	.byte	'SEGEN',0
	.word	76748
	.byte	4,4,35,176,160,4,13
	.byte	'reserved_11034',0
	.word	79148
	.byte	208,223,1,4,35,180,160,4,13
	.byte	'TASK_ASI',0
	.word	77312
	.byte	4,4,35,132,128,6,13
	.byte	'reserved_18008',0
	.word	79161
	.byte	248,1,4,35,136,128,6,13
	.byte	'PMA0',0
	.word	76175
	.byte	4,4,35,128,130,6,13
	.byte	'PMA1',0
	.word	76237
	.byte	4,4,35,132,130,6,13
	.byte	'PMA2',0
	.word	76299
	.byte	4,4,35,136,130,6,13
	.byte	'reserved_1810C',0
	.word	79172
	.byte	244,29,4,35,140,130,6,13
	.byte	'DCON2',0
	.word	72864
	.byte	4,4,35,128,160,6,13
	.byte	'reserved_19004',0
	.word	4922
	.byte	8,4,35,132,160,6,13
	.byte	'SMACON',0
	.word	76963
	.byte	4,4,35,140,160,6,13
	.byte	'DSTR',0
	.word	73956
	.byte	4,4,35,144,160,6,13
	.byte	'reserved_19014',0
	.word	3102
	.byte	4,4,35,148,160,6,13
	.byte	'DATR',0
	.word	72612
	.byte	4,4,35,152,160,6,13
	.byte	'DEADD',0
	.word	72988
	.byte	4,4,35,156,160,6,13
	.byte	'DIEAR',0
	.word	73051
	.byte	4,4,35,160,160,6,13
	.byte	'DIETR',0
	.word	73114
	.byte	4,4,35,164,160,6,13
	.byte	'reserved_19028',0
	.word	4293
	.byte	24,4,35,168,160,6,13
	.byte	'DCON0',0
	.word	72801
	.byte	4,4,35,192,160,6,13
	.byte	'reserved_19044',0
	.word	79183
	.byte	188,3,4,35,196,160,6,13
	.byte	'PSTR',0
	.word	76361
	.byte	4,4,35,128,164,6,13
	.byte	'PCON1',0
	.word	75861
	.byte	4,4,35,132,164,6,13
	.byte	'PCON2',0
	.word	75924
	.byte	4,4,35,136,164,6,13
	.byte	'PCON0',0
	.word	75798
	.byte	4,4,35,140,164,6,13
	.byte	'PIEAR',0
	.word	76049
	.byte	4,4,35,144,164,6,13
	.byte	'PIETR',0
	.word	76112
	.byte	4,4,35,148,164,6,13
	.byte	'reserved_19218',0
	.word	79194
	.byte	232,3,4,35,152,164,6,13
	.byte	'COMPAT',0
	.word	72045
	.byte	4,4,35,128,168,6,13
	.byte	'reserved_19404',0
	.word	79205
	.byte	252,23,4,35,132,168,6,13
	.byte	'FPU_TRAP',0
	.word	79216
	.byte	28,4,35,128,192,6,13
	.byte	'reserved_1A01C',0
	.word	79221
	.byte	228,63,4,35,156,192,6,13
	.byte	'DPR',0
	.word	79242
	.byte	144,1,4,35,128,128,7,13
	.byte	'reserved_1C090',0
	.word	79247
	.byte	240,30,4,35,144,129,7,13
	.byte	'CPR',0
	.word	79267
	.byte	80,4,35,128,160,7,13
	.byte	'reserved_1D050',0
	.word	79272
	.byte	176,31,4,35,208,160,7,13
	.byte	'CPXE_0',0
	.word	72364
	.byte	4,4,35,128,192,7,13
	.byte	'CPXE_1',0
	.word	72364
	.byte	4,4,35,132,192,7,13
	.byte	'CPXE_2',0
	.word	72364
	.byte	4,4,35,136,192,7,13
	.byte	'CPXE_3',0
	.word	72364
	.byte	4,4,35,140,192,7,13
	.byte	'DPRE_0',0
	.word	73706
	.byte	4,4,35,144,192,7,13
	.byte	'DPRE_1',0
	.word	73706
	.byte	4,4,35,148,192,7,13
	.byte	'DPRE_2',0
	.word	73706
	.byte	4,4,35,152,192,7,13
	.byte	'DPRE_3',0
	.word	73706
	.byte	4,4,35,156,192,7,13
	.byte	'DPWE_0',0
	.word	73894
	.byte	4,4,35,160,192,7,13
	.byte	'DPWE_1',0
	.word	73894
	.byte	4,4,35,164,192,7,13
	.byte	'DPWE_2',0
	.word	73894
	.byte	4,4,35,168,192,7,13
	.byte	'DPWE_3',0
	.word	73894
	.byte	4,4,35,172,192,7,13
	.byte	'reserved_1E030',0
	.word	50359
	.byte	16,4,35,176,192,7,13
	.byte	'CPXE_4',0
	.word	72364
	.byte	4,4,35,192,192,7,13
	.byte	'CPXE_5',0
	.word	72364
	.byte	4,4,35,196,192,7,13
	.byte	'reserved_1E048',0
	.word	4922
	.byte	8,4,35,200,192,7,13
	.byte	'DPRE_4',0
	.word	73706
	.byte	4,4,35,208,192,7,13
	.byte	'DPRE_5',0
	.word	73706
	.byte	4,4,35,212,192,7,13
	.byte	'reserved_1E058',0
	.word	4922
	.byte	8,4,35,216,192,7,13
	.byte	'DPWE_4',0
	.word	73894
	.byte	4,4,35,224,192,7,13
	.byte	'DPWE_5',0
	.word	73894
	.byte	4,4,35,228,192,7,13
	.byte	'reserved_1E068',0
	.word	79283
	.byte	152,7,4,35,232,192,7,13
	.byte	'TPS',0
	.word	79294
	.byte	16,4,35,128,200,7,13
	.byte	'reserved_1E410',0
	.word	79299
	.byte	48,4,35,144,200,7,13
	.byte	'TPS_EXTIM',0
	.word	79308
	.byte	28,4,35,192,200,7,13
	.byte	'reserved_1E45C',0
	.word	79313
	.byte	164,23,4,35,220,200,7,13
	.byte	'TR',0
	.word	79333
	.byte	64,4,35,128,224,7,13
	.byte	'reserved_1F040',0
	.word	79338
	.byte	192,23,4,35,192,224,7,13
	.byte	'CCTRL',0
	.word	71982
	.byte	4,4,35,128,248,7,13
	.byte	'CCNT',0
	.word	71920
	.byte	4,4,35,132,248,7,13
	.byte	'ICNT',0
	.word	74899
	.byte	4,4,35,136,248,7,13
	.byte	'M1CNT',0
	.word	75487
	.byte	4,4,35,140,248,7,13
	.byte	'M2CNT',0
	.word	75550
	.byte	4,4,35,144,248,7,13
	.byte	'M3CNT',0
	.word	75613
	.byte	4,4,35,148,248,7,13
	.byte	'reserved_1FC18',0
	.word	79100
	.byte	232,1,4,35,152,248,7,13
	.byte	'DBGSR',0
	.word	72674
	.byte	4,4,35,128,250,7,13
	.byte	'reserved_1FD04',0
	.word	3102
	.byte	4,4,35,132,250,7,13
	.byte	'EXEVT',0
	.word	74018
	.byte	4,4,35,136,250,7,13
	.byte	'CREVT',0
	.word	72426
	.byte	4,4,35,140,250,7,13
	.byte	'SWEVT',0
	.word	77185
	.byte	4,4,35,144,250,7,13
	.byte	'reserved_1FD14',0
	.word	13214
	.byte	28,4,35,148,250,7,13
	.byte	'TRIG_ACC',0
	.word	78039
	.byte	4,4,35,176,250,7,13
	.byte	'reserved_1FD34',0
	.word	5262
	.byte	12,4,35,180,250,7,13
	.byte	'DMS',0
	.word	73645
	.byte	4,4,35,192,250,7,13
	.byte	'DCX',0
	.word	72927
	.byte	4,4,35,196,250,7,13
	.byte	'DBGTCR',0
	.word	72737
	.byte	4,4,35,200,250,7,13
	.byte	'reserved_1FD4C',0
	.word	79349
	.byte	180,1,4,35,204,250,7,13
	.byte	'PCXI',0
	.word	75987
	.byte	4,4,35,128,252,7,13
	.byte	'PSW',0
	.word	76423
	.byte	4,4,35,132,252,7,13
	.byte	'PC',0
	.word	75738
	.byte	4,4,35,136,252,7,13
	.byte	'reserved_1FE0C',0
	.word	4922
	.byte	8,4,35,140,252,7,13
	.byte	'SYSCON',0
	.word	77248
	.byte	4,4,35,148,252,7,13
	.byte	'CPU_ID',0
	.word	72300
	.byte	4,4,35,152,252,7,13
	.byte	'CORE_ID',0
	.word	72109
	.byte	4,4,35,156,252,7,13
	.byte	'BIV',0
	.word	71599
	.byte	4,4,35,160,252,7,13
	.byte	'BTV',0
	.word	71859
	.byte	4,4,35,164,252,7,13
	.byte	'ISP',0
	.word	75022
	.byte	4,4,35,168,252,7,13
	.byte	'ICR',0
	.word	74961
	.byte	4,4,35,172,252,7,13
	.byte	'reserved_1FE30',0
	.word	4922
	.byte	8,4,35,176,252,7,13
	.byte	'FCX',0
	.word	74081
	.byte	4,4,35,184,252,7,13
	.byte	'LCX',0
	.word	75274
	.byte	4,4,35,188,252,7,13
	.byte	'reserved_1FE40',0
	.word	50359
	.byte	16,4,35,192,252,7,13
	.byte	'CUS_ID',0
	.word	72489
	.byte	4,4,35,208,252,7,13
	.byte	'reserved_1FE54',0
	.word	79360
	.byte	172,1,4,35,212,252,7,13
	.byte	'D',0
	.word	79371
	.byte	64,4,35,128,254,7,13
	.byte	'reserved_1FF40',0
	.word	79380
	.byte	64,4,35,192,254,7,13
	.byte	'A',0
	.word	79389
	.byte	64,4,35,128,255,7,13
	.byte	'reserved_1FFC0',0
	.word	79380
	.byte	64,4,35,192,255,7,0,14
	.word	79398
	.byte	33
	.byte	'Ifx_CPU',0,22,210,19,3
	.word	84496
	.byte	15,6,124,9,1,16
	.byte	'IfxCpu_Id_0',0,0,16
	.byte	'IfxCpu_Id_1',0,1,16
	.byte	'IfxCpu_Id_2',0,2,16
	.byte	'IfxCpu_Id_3',0,3,16
	.byte	'IfxCpu_Id_4',0,4,16
	.byte	'IfxCpu_Id_6',0,6,16
	.byte	'IfxCpu_Id_none',0,7,0,33
	.byte	'IfxCpu_Id',0,6,133,1,3
	.word	84518
	.byte	33
	.byte	'IfxCpu_ResourceCpu',0,6,170,1,3
	.word	1617
	.byte	33
	.byte	'Ifx_SRC_SRCR_Bits',0,11,85,3
	.word	10311
	.byte	33
	.byte	'Ifx_SRC_SRCR',0,11,98,3
	.word	10601
	.byte	10
	.byte	'_Ifx_SRC_CPU_CPU',0,11,110,25,4,13
	.byte	'SB',0
	.word	10601
	.byte	4,2,35,0,0,14
	.word	84719
	.byte	33
	.byte	'Ifx_SRC_CPU_CPU',0,11,113,3
	.word	84754
	.byte	18,24
	.word	84719
	.byte	19,5,0,14
	.word	84783
	.byte	10
	.byte	'_Ifx_SRC_CPU',0,11,128,1,25,24,13
	.byte	'CPU',0
	.word	84792
	.byte	24,2,35,0,0,14
	.word	84797
	.byte	33
	.byte	'Ifx_SRC_CPU',0,11,131,1,3
	.word	84830
	.byte	10
	.byte	'_Ifx_SRC_AGBT_AGBT',0,11,146,1,25,4,13
	.byte	'SR',0
	.word	10601
	.byte	4,2,35,0,0,14
	.word	84856
	.byte	33
	.byte	'Ifx_SRC_AGBT_AGBT',0,11,149,1,3
	.word	84894
	.byte	18,4
	.word	84856
	.byte	19,0,0,14
	.word	84926
	.byte	10
	.byte	'_Ifx_SRC_AGBT',0,11,164,1,25,4,13
	.byte	'AGBT',0
	.word	84935
	.byte	4,2,35,0,0,14
	.word	84940
	.byte	33
	.byte	'Ifx_SRC_AGBT',0,11,167,1,3
	.word	84975
	.byte	10
	.byte	'_Ifx_SRC_XBAR_XBAR',0,11,182,1,25,4,13
	.byte	'SR',0
	.word	10601
	.byte	4,2,35,0,0,14
	.word	85002
	.byte	33
	.byte	'Ifx_SRC_XBAR_XBAR',0,11,185,1,3
	.word	85040
	.byte	18,12
	.word	85002
	.byte	19,2,0,14
	.word	85072
	.byte	10
	.byte	'_Ifx_SRC_XBAR',0,11,200,1,25,12,13
	.byte	'XBAR',0
	.word	85081
	.byte	12,2,35,0,0,14
	.word	85086
	.byte	33
	.byte	'Ifx_SRC_XBAR',0,11,203,1,3
	.word	85121
	.byte	18,8
	.word	10601
	.byte	19,1,0,10
	.byte	'_Ifx_SRC_CERBERUS_CERBERUS',0,11,218,1,25,8,13
	.byte	'SR',0
	.word	85148
	.byte	8,2,35,0,0,14
	.word	85157
	.byte	33
	.byte	'Ifx_SRC_CERBERUS_CERBERUS',0,11,221,1,3
	.word	85203
	.byte	14
	.word	85157
	.byte	10
	.byte	'_Ifx_SRC_CERBERUS',0,11,236,1,25,8,13
	.byte	'CERBERUS',0
	.word	85243
	.byte	8,2,35,0,0,14
	.word	85248
	.byte	33
	.byte	'Ifx_SRC_CERBERUS',0,11,239,1,3
	.word	85291
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN_ASCLIN',0,11,254,1,25,12,13
	.byte	'TX',0
	.word	10601
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	10601
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	10601
	.byte	4,2,35,8,0,14
	.word	85322
	.byte	33
	.byte	'Ifx_SRC_ASCLIN_ASCLIN',0,11,131,2,3
	.word	85389
	.byte	18,144,1
	.word	85322
	.byte	19,11,0,14
	.word	85425
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN',0,11,146,2,25,144,1,13
	.byte	'ASCLIN',0
	.word	85435
	.byte	144,1,2,35,0,0,14
	.word	85440
	.byte	33
	.byte	'Ifx_SRC_ASCLIN',0,11,149,2,3
	.word	85481
	.byte	10
	.byte	'_Ifx_SRC_QSPI_QSPI',0,11,164,2,25,20,13
	.byte	'TX',0
	.word	10601
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	10601
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	10601
	.byte	4,2,35,8,13
	.byte	'PT',0
	.word	10601
	.byte	4,2,35,12,13
	.byte	'U',0
	.word	10601
	.byte	4,2,35,16,0,14
	.word	85510
	.byte	33
	.byte	'Ifx_SRC_QSPI_QSPI',0,11,171,2,3
	.word	85596
	.byte	18,120
	.word	85510
	.byte	19,5,0,14
	.word	85628
	.byte	10
	.byte	'_Ifx_SRC_QSPI',0,11,186,2,25,120,13
	.byte	'QSPI',0
	.word	85637
	.byte	120,2,35,0,0,14
	.word	85642
	.byte	33
	.byte	'Ifx_SRC_QSPI',0,11,189,2,3
	.word	85677
	.byte	10
	.byte	'_Ifx_SRC_HSCT_HSCT',0,11,204,2,25,4,13
	.byte	'SR',0
	.word	10601
	.byte	4,2,35,0,0,14
	.word	85704
	.byte	33
	.byte	'Ifx_SRC_HSCT_HSCT',0,11,207,2,3
	.word	85742
	.byte	18,8
	.word	85704
	.byte	19,1,0,14
	.word	85774
	.byte	10
	.byte	'_Ifx_SRC_HSCT',0,11,222,2,25,8,13
	.byte	'HSCT',0
	.word	85783
	.byte	8,2,35,0,0,14
	.word	85788
	.byte	33
	.byte	'Ifx_SRC_HSCT',0,11,225,2,3
	.word	85823
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL_CH',0,11,240,2,25,16,13
	.byte	'COK',0
	.word	10601
	.byte	4,2,35,0,13
	.byte	'RDI',0
	.word	10601
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	10601
	.byte	4,2,35,8,13
	.byte	'TRG',0
	.word	10601
	.byte	4,2,35,12,0,14
	.word	85850
	.byte	33
	.byte	'Ifx_SRC_HSSL_HSSL_CH',0,11,246,2,3
	.word	85931
	.byte	18,64
	.word	85850
	.byte	19,3,0,14
	.word	85966
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL',0,11,133,3,25,68,13
	.byte	'CH',0
	.word	85975
	.byte	64,2,35,0,13
	.byte	'EXI',0
	.word	10601
	.byte	4,2,35,64,0,14
	.word	85980
	.byte	33
	.byte	'Ifx_SRC_HSSL_HSSL',0,11,137,3,3
	.word	86031
	.byte	18,136,1
	.word	85980
	.byte	19,1,0,14
	.word	86063
	.byte	10
	.byte	'_Ifx_SRC_HSSL',0,11,152,3,25,136,1,13
	.byte	'HSSL',0
	.word	86073
	.byte	136,1,2,35,0,0,14
	.word	86078
	.byte	33
	.byte	'Ifx_SRC_HSSL',0,11,155,3,3
	.word	86115
	.byte	10
	.byte	'_Ifx_SRC_I2C_I2C',0,11,170,3,25,16,13
	.byte	'DTR',0
	.word	10601
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	10601
	.byte	4,2,35,4,13
	.byte	'P',0
	.word	10601
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	3102
	.byte	4,2,35,12,0,14
	.word	86142
	.byte	33
	.byte	'Ifx_SRC_I2C_I2C',0,11,176,3,3
	.word	86223
	.byte	18,32
	.word	86142
	.byte	19,1,0,14
	.word	86253
	.byte	10
	.byte	'_Ifx_SRC_I2C',0,11,191,3,25,32,13
	.byte	'I2C',0
	.word	86262
	.byte	32,2,35,0,0,14
	.word	86267
	.byte	33
	.byte	'Ifx_SRC_I2C',0,11,194,3,3
	.word	86300
	.byte	10
	.byte	'_Ifx_SRC_SENT_SENT',0,11,209,3,25,4,13
	.byte	'SR',0
	.word	10601
	.byte	4,2,35,0,0,14
	.word	86326
	.byte	33
	.byte	'Ifx_SRC_SENT_SENT',0,11,212,3,3
	.word	86364
	.byte	18,40
	.word	86326
	.byte	19,9,0,14
	.word	86396
	.byte	10
	.byte	'_Ifx_SRC_SENT',0,11,227,3,25,40,13
	.byte	'SENT',0
	.word	86405
	.byte	40,2,35,0,0,14
	.word	86410
	.byte	33
	.byte	'Ifx_SRC_SENT',0,11,230,3,3
	.word	86445
	.byte	18,20
	.word	10601
	.byte	19,4,0,10
	.byte	'_Ifx_SRC_MSC_MSC',0,11,245,3,25,20,13
	.byte	'SR',0
	.word	86472
	.byte	20,2,35,0,0,14
	.word	86481
	.byte	33
	.byte	'Ifx_SRC_MSC_MSC',0,11,248,3,3
	.word	86517
	.byte	18,80
	.word	86481
	.byte	19,3,0,14
	.word	86547
	.byte	10
	.byte	'_Ifx_SRC_MSC',0,11,135,4,25,80,13
	.byte	'MSC',0
	.word	86556
	.byte	80,2,35,0,0,14
	.word	86561
	.byte	33
	.byte	'Ifx_SRC_MSC',0,11,138,4,3
	.word	86594
	.byte	18,16
	.word	10601
	.byte	19,3,0,10
	.byte	'_Ifx_SRC_CCU6_CCU',0,11,153,4,25,16,13
	.byte	'SR',0
	.word	86620
	.byte	16,2,35,0,0,14
	.word	86629
	.byte	33
	.byte	'Ifx_SRC_CCU6_CCU',0,11,156,4,3
	.word	86666
	.byte	18,32
	.word	86629
	.byte	19,1,0,14
	.word	86697
	.byte	10
	.byte	'_Ifx_SRC_CCU6',0,11,171,4,25,32,13
	.byte	'CCU',0
	.word	86706
	.byte	32,2,35,0,0,14
	.word	86711
	.byte	33
	.byte	'Ifx_SRC_CCU6',0,11,174,4,3
	.word	86745
	.byte	10
	.byte	'_Ifx_SRC_GPT12_GPT12',0,11,189,4,25,24,13
	.byte	'CIRQ',0
	.word	10601
	.byte	4,2,35,0,13
	.byte	'T2',0
	.word	10601
	.byte	4,2,35,4,13
	.byte	'T3',0
	.word	10601
	.byte	4,2,35,8,13
	.byte	'T4',0
	.word	10601
	.byte	4,2,35,12,13
	.byte	'T5',0
	.word	10601
	.byte	4,2,35,16,13
	.byte	'T6',0
	.word	10601
	.byte	4,2,35,20,0,14
	.word	86772
	.byte	33
	.byte	'Ifx_SRC_GPT12_GPT12',0,11,197,4,3
	.word	86874
	.byte	18,24
	.word	86772
	.byte	19,0,0,14
	.word	86908
	.byte	10
	.byte	'_Ifx_SRC_GPT12',0,11,212,4,25,24,13
	.byte	'GPT12',0
	.word	86917
	.byte	24,2,35,0,0,14
	.word	86922
	.byte	33
	.byte	'Ifx_SRC_GPT12',0,11,215,4,3
	.word	86959
	.byte	10
	.byte	'_Ifx_SRC_STM_STM',0,11,230,4,25,8,13
	.byte	'SR',0
	.word	85148
	.byte	8,2,35,0,0,14
	.word	86987
	.byte	33
	.byte	'Ifx_SRC_STM_STM',0,11,233,4,3
	.word	87023
	.byte	18,48
	.word	86987
	.byte	19,5,0,14
	.word	87053
	.byte	10
	.byte	'_Ifx_SRC_STM',0,11,248,4,25,48,13
	.byte	'STM',0
	.word	87062
	.byte	48,2,35,0,0,14
	.word	87067
	.byte	33
	.byte	'Ifx_SRC_STM',0,11,251,4,3
	.word	87100
	.byte	10
	.byte	'_Ifx_SRC_FCE_FCE0',0,11,138,5,25,4,13
	.byte	'SR',0
	.word	10601
	.byte	4,2,35,0,0,14
	.word	87126
	.byte	33
	.byte	'Ifx_SRC_FCE_FCE0',0,11,141,5,3
	.word	87163
	.byte	14
	.word	87126
	.byte	10
	.byte	'_Ifx_SRC_FCE',0,11,156,5,25,4,13
	.byte	'FCE0',0
	.word	87194
	.byte	4,2,35,0,0,14
	.word	87199
	.byte	33
	.byte	'Ifx_SRC_FCE',0,11,159,5,3
	.word	87233
	.byte	18,32
	.word	603
	.byte	19,31,0,18,128,4
	.word	10601
	.byte	19,127,0,10
	.byte	'_Ifx_SRC_DMA_DMA',0,11,174,5,25,176,4,13
	.byte	'ERR',0
	.word	86620
	.byte	16,2,35,0,13
	.byte	'reserved_10',0
	.word	87259
	.byte	32,2,35,16,13
	.byte	'CH',0
	.word	87268
	.byte	128,4,2,35,48,0,14
	.word	87278
	.byte	33
	.byte	'Ifx_SRC_DMA_DMA',0,11,179,5,3
	.word	87350
	.byte	18,176,4
	.word	87278
	.byte	19,0,0,14
	.word	87380
	.byte	10
	.byte	'_Ifx_SRC_DMA',0,11,194,5,25,176,4,13
	.byte	'DMA',0
	.word	87390
	.byte	176,4,2,35,0,0,14
	.word	87395
	.byte	33
	.byte	'Ifx_SRC_DMA',0,11,197,5,3
	.word	87430
	.byte	10
	.byte	'_Ifx_SRC_SDMMC_SDMMC',0,11,212,5,25,8,13
	.byte	'ERR',0
	.word	10601
	.byte	4,2,35,0,13
	.byte	'DMA',0
	.word	10601
	.byte	4,2,35,4,0,14
	.word	87456
	.byte	33
	.byte	'Ifx_SRC_SDMMC_SDMMC',0,11,216,5,3
	.word	87510
	.byte	18,8
	.word	87456
	.byte	19,0,0,14
	.word	87544
	.byte	10
	.byte	'_Ifx_SRC_SDMMC',0,11,231,5,25,8,13
	.byte	'SDMMC',0
	.word	87553
	.byte	8,2,35,0,0,14
	.word	87558
	.byte	33
	.byte	'Ifx_SRC_SDMMC',0,11,234,5,3
	.word	87595
	.byte	18,40
	.word	10601
	.byte	19,9,0,10
	.byte	'_Ifx_SRC_GETH_GETH',0,11,249,5,25,40,13
	.byte	'SR',0
	.word	87623
	.byte	40,2,35,0,0,14
	.word	87632
	.byte	33
	.byte	'Ifx_SRC_GETH_GETH',0,11,252,5,3
	.word	87670
	.byte	18,40
	.word	87632
	.byte	19,0,0,14
	.word	87702
	.byte	10
	.byte	'_Ifx_SRC_GETH',0,11,139,6,25,40,13
	.byte	'GETH',0
	.word	87711
	.byte	40,2,35,0,0,14
	.word	87716
	.byte	33
	.byte	'Ifx_SRC_GETH',0,11,142,6,3
	.word	87751
	.byte	18,64
	.word	10601
	.byte	19,15,0,10
	.byte	'_Ifx_SRC_CAN_CAN',0,11,157,6,25,64,13
	.byte	'INT',0
	.word	87778
	.byte	64,2,35,0,0,14
	.word	87787
	.byte	33
	.byte	'Ifx_SRC_CAN_CAN',0,11,160,6,3
	.word	87824
	.byte	18,192,1
	.word	87787
	.byte	19,2,0,14
	.word	87854
	.byte	10
	.byte	'_Ifx_SRC_CAN',0,11,175,6,25,192,1,13
	.byte	'CAN',0
	.word	87864
	.byte	192,1,2,35,0,0,14
	.word	87869
	.byte	33
	.byte	'Ifx_SRC_CAN',0,11,178,6,3
	.word	87904
	.byte	10
	.byte	'_Ifx_SRC_VADC_G',0,11,193,6,25,16,13
	.byte	'SR0',0
	.word	10601
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	10601
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	10601
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	10601
	.byte	4,2,35,12,0,14
	.word	87930
	.byte	33
	.byte	'Ifx_SRC_VADC_G',0,11,199,6,3
	.word	88005
	.byte	10
	.byte	'_Ifx_SRC_VADC_FC',0,11,214,6,25,4,13
	.byte	'SR0',0
	.word	10601
	.byte	4,2,35,0,0,14
	.word	88034
	.byte	33
	.byte	'Ifx_SRC_VADC_FC',0,11,217,6,3
	.word	88071
	.byte	18,192,1
	.word	87930
	.byte	19,11,0,14
	.word	88101
	.byte	18,32
	.word	88034
	.byte	19,7,0,14
	.word	88116
	.byte	18,32
	.word	87930
	.byte	19,1,0,14
	.word	88130
	.byte	10
	.byte	'_Ifx_SRC_VADC',0,11,233,6,25,128,2,13
	.byte	'G',0
	.word	88111
	.byte	192,1,2,35,0,13
	.byte	'FC',0
	.word	88125
	.byte	32,3,35,192,1,13
	.byte	'CG',0
	.word	88139
	.byte	32,3,35,224,1,0,14
	.word	88144
	.byte	33
	.byte	'Ifx_SRC_VADC',0,11,238,6,3
	.word	88204
	.byte	10
	.byte	'_Ifx_SRC_DSADC_DSADC',0,11,253,6,25,8,13
	.byte	'SRM',0
	.word	10601
	.byte	4,2,35,0,13
	.byte	'SRA',0
	.word	10601
	.byte	4,2,35,4,0,14
	.word	88231
	.byte	33
	.byte	'Ifx_SRC_DSADC_DSADC',0,11,129,7,3
	.word	88285
	.byte	18,112
	.word	88231
	.byte	19,13,0,14
	.word	88319
	.byte	10
	.byte	'_Ifx_SRC_DSADC',0,11,144,7,25,112,13
	.byte	'DSADC',0
	.word	88328
	.byte	112,2,35,0,0,14
	.word	88333
	.byte	33
	.byte	'Ifx_SRC_DSADC',0,11,147,7,3
	.word	88370
	.byte	10
	.byte	'_Ifx_SRC_ERAY_ERAY',0,11,162,7,25,48,13
	.byte	'INT0',0
	.word	10601
	.byte	4,2,35,0,13
	.byte	'INT1',0
	.word	10601
	.byte	4,2,35,4,13
	.byte	'TINT0',0
	.word	10601
	.byte	4,2,35,8,13
	.byte	'TINT1',0
	.word	10601
	.byte	4,2,35,12,13
	.byte	'NDAT0',0
	.word	10601
	.byte	4,2,35,16,13
	.byte	'NDAT1',0
	.word	10601
	.byte	4,2,35,20,13
	.byte	'MBSC0',0
	.word	10601
	.byte	4,2,35,24,13
	.byte	'MBSC1',0
	.word	10601
	.byte	4,2,35,28,13
	.byte	'OBUSY',0
	.word	10601
	.byte	4,2,35,32,13
	.byte	'IBUSY',0
	.word	10601
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	4922
	.byte	8,2,35,40,0,14
	.word	88398
	.byte	33
	.byte	'Ifx_SRC_ERAY_ERAY',0,11,175,7,3
	.word	88593
	.byte	18,96
	.word	88398
	.byte	19,1,0,14
	.word	88625
	.byte	10
	.byte	'_Ifx_SRC_ERAY',0,11,190,7,25,96,13
	.byte	'ERAY',0
	.word	88634
	.byte	96,2,35,0,0,14
	.word	88639
	.byte	33
	.byte	'Ifx_SRC_ERAY',0,11,193,7,3
	.word	88674
	.byte	10
	.byte	'_Ifx_SRC_HSM_HSM',0,11,208,7,25,8,13
	.byte	'HSM',0
	.word	85148
	.byte	8,2,35,0,0,14
	.word	88701
	.byte	33
	.byte	'Ifx_SRC_HSM_HSM',0,11,211,7,3
	.word	88738
	.byte	18,8
	.word	88701
	.byte	19,0,0,14
	.word	88768
	.byte	10
	.byte	'_Ifx_SRC_HSM',0,11,226,7,25,8,13
	.byte	'HSM',0
	.word	88777
	.byte	8,2,35,0,0,14
	.word	88782
	.byte	33
	.byte	'Ifx_SRC_HSM',0,11,229,7,3
	.word	88815
	.byte	10
	.byte	'_Ifx_SRC_SCU',0,11,244,7,25,16,13
	.byte	'SCUERU',0
	.word	86620
	.byte	16,2,35,0,0,14
	.word	88841
	.byte	33
	.byte	'Ifx_SRC_SCU',0,11,247,7,3
	.word	88877
	.byte	10
	.byte	'_Ifx_SRC_PMS_PMS',0,11,134,8,25,4,13
	.byte	'SR',0
	.word	10601
	.byte	4,2,35,0,0,14
	.word	88903
	.byte	33
	.byte	'Ifx_SRC_PMS_PMS',0,11,137,8,3
	.word	88939
	.byte	18,16
	.word	88903
	.byte	19,3,0,14
	.word	88969
	.byte	10
	.byte	'_Ifx_SRC_PMS',0,11,152,8,25,16,13
	.byte	'PMS',0
	.word	88978
	.byte	16,2,35,0,0,14
	.word	88983
	.byte	33
	.byte	'Ifx_SRC_PMS',0,11,155,8,3
	.word	89016
	.byte	18,12
	.word	10601
	.byte	19,2,0,10
	.byte	'_Ifx_SRC_SMU_SMU',0,11,170,8,25,12,13
	.byte	'SR',0
	.word	89042
	.byte	12,2,35,0,0,14
	.word	89051
	.byte	33
	.byte	'Ifx_SRC_SMU_SMU',0,11,173,8,3
	.word	89087
	.byte	18,12
	.word	89051
	.byte	19,0,0,14
	.word	89117
	.byte	10
	.byte	'_Ifx_SRC_SMU',0,11,188,8,25,12,13
	.byte	'SMU',0
	.word	89126
	.byte	12,2,35,0,0,14
	.word	89131
	.byte	33
	.byte	'Ifx_SRC_SMU',0,11,191,8,3
	.word	89164
	.byte	18,32
	.word	10601
	.byte	19,7,0,10
	.byte	'_Ifx_SRC_PSI5_PSI5',0,11,206,8,25,32,13
	.byte	'SR',0
	.word	89190
	.byte	32,2,35,0,0,14
	.word	89199
	.byte	33
	.byte	'Ifx_SRC_PSI5_PSI5',0,11,209,8,3
	.word	89237
	.byte	18,32
	.word	89199
	.byte	19,0,0,14
	.word	89269
	.byte	10
	.byte	'_Ifx_SRC_PSI5',0,11,224,8,25,32,13
	.byte	'PSI5',0
	.word	89278
	.byte	32,2,35,0,0,14
	.word	89283
	.byte	33
	.byte	'Ifx_SRC_PSI5',0,11,227,8,3
	.word	89318
	.byte	10
	.byte	'_Ifx_SRC_HSPDM_HSPDM0',0,11,242,8,25,12,13
	.byte	'BFR',0
	.word	10601
	.byte	4,2,35,0,13
	.byte	'RAMP',0
	.word	10601
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	10601
	.byte	4,2,35,8,0,14
	.word	89345
	.byte	33
	.byte	'Ifx_SRC_HSPDM_HSPDM0',0,11,247,8,3
	.word	89414
	.byte	14
	.word	89345
	.byte	10
	.byte	'_Ifx_SRC_HSPDM',0,11,134,9,25,12,13
	.byte	'HSPDM0',0
	.word	89449
	.byte	12,2,35,0,0,14
	.word	89454
	.byte	33
	.byte	'Ifx_SRC_HSPDM',0,11,137,9,3
	.word	89492
	.byte	10
	.byte	'_Ifx_SRC_DAM_DAM',0,11,152,9,25,24,13
	.byte	'LI0',0
	.word	10601
	.byte	4,2,35,0,13
	.byte	'RI0',0
	.word	10601
	.byte	4,2,35,4,13
	.byte	'LI1',0
	.word	10601
	.byte	4,2,35,8,13
	.byte	'RI1',0
	.word	10601
	.byte	4,2,35,12,13
	.byte	'DR',0
	.word	10601
	.byte	4,2,35,16,13
	.byte	'ERR',0
	.word	10601
	.byte	4,2,35,20,0,14
	.word	89520
	.byte	33
	.byte	'Ifx_SRC_DAM_DAM',0,11,160,9,3
	.word	89621
	.byte	18,48
	.word	89520
	.byte	19,1,0,14
	.word	89651
	.byte	10
	.byte	'_Ifx_SRC_DAM',0,11,175,9,25,48,13
	.byte	'DAM',0
	.word	89660
	.byte	48,2,35,0,0,14
	.word	89665
	.byte	33
	.byte	'Ifx_SRC_DAM',0,11,178,9,3
	.word	89698
	.byte	10
	.byte	'_Ifx_SRC_PSI5S_PSI5S',0,11,193,9,25,32,13
	.byte	'SR',0
	.word	89190
	.byte	32,2,35,0,0,14
	.word	89724
	.byte	33
	.byte	'Ifx_SRC_PSI5S_PSI5S',0,11,196,9,3
	.word	89764
	.byte	18,32
	.word	89724
	.byte	19,0,0,14
	.word	89798
	.byte	10
	.byte	'_Ifx_SRC_PSI5S',0,11,211,9,25,32,13
	.byte	'PSI5S',0
	.word	89807
	.byte	32,2,35,0,0,14
	.word	89812
	.byte	33
	.byte	'Ifx_SRC_PSI5S',0,11,214,9,3
	.word	89849
	.byte	10
	.byte	'_Ifx_SRC_RIF_RIF',0,11,229,9,25,8,13
	.byte	'ERR',0
	.word	10601
	.byte	4,2,35,0,13
	.byte	'INT',0
	.word	10601
	.byte	4,2,35,4,0,14
	.word	89877
	.byte	33
	.byte	'Ifx_SRC_RIF_RIF',0,11,233,9,3
	.word	89927
	.byte	18,16
	.word	89877
	.byte	19,1,0,14
	.word	89957
	.byte	10
	.byte	'_Ifx_SRC_RIF',0,11,248,9,25,16,13
	.byte	'RIF',0
	.word	89966
	.byte	16,2,35,0,0,14
	.word	89971
	.byte	33
	.byte	'Ifx_SRC_RIF',0,11,251,9,3
	.word	90004
	.byte	10
	.byte	'_Ifx_SRC_SPU_SPU',0,11,138,10,25,8,13
	.byte	'INT',0
	.word	10601
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	10601
	.byte	4,2,35,4,0,14
	.word	90030
	.byte	33
	.byte	'Ifx_SRC_SPU_SPU',0,11,142,10,3
	.word	90080
	.byte	18,16
	.word	90030
	.byte	19,1,0,14
	.word	90110
	.byte	10
	.byte	'_Ifx_SRC_SPU',0,11,157,10,25,16,13
	.byte	'SPU',0
	.word	90119
	.byte	16,2,35,0,0,14
	.word	90124
	.byte	33
	.byte	'Ifx_SRC_SPU',0,11,160,10,3
	.word	90157
	.byte	10
	.byte	'_Ifx_SRC_GPSR_GPSR',0,11,175,10,25,32,13
	.byte	'SR',0
	.word	89190
	.byte	32,2,35,0,0,14
	.word	90183
	.byte	33
	.byte	'Ifx_SRC_GPSR_GPSR',0,11,178,10,3
	.word	90221
	.byte	18,192,1
	.word	90183
	.byte	19,5,0,14
	.word	90253
	.byte	10
	.byte	'_Ifx_SRC_GPSR',0,11,193,10,25,192,1,13
	.byte	'GPSR',0
	.word	90263
	.byte	192,1,2,35,0,0,14
	.word	90268
	.byte	33
	.byte	'Ifx_SRC_GPSR',0,11,196,10,3
	.word	90305
	.byte	10
	.byte	'_Ifx_STM_ACCEN0_Bits',0,23,68,16,4,11
	.byte	'EN0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	603
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_STM_ACCEN0_Bits',0,23,102,3
	.word	90332
	.byte	10
	.byte	'_Ifx_STM_ACCEN1_Bits',0,23,105,16,4,11
	.byte	'reserved_0',0,4
	.word	428
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_ACCEN1_Bits',0,23,108,3
	.word	90889
	.byte	10
	.byte	'_Ifx_STM_CAP_Bits',0,23,111,16,4,11
	.byte	'STMCAP_63_32',0,4
	.word	428
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_CAP_Bits',0,23,114,3
	.word	90966
	.byte	10
	.byte	'_Ifx_STM_CAPSV_Bits',0,23,117,16,4,11
	.byte	'STMCAP_63_32',0,4
	.word	428
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_CAPSV_Bits',0,23,120,3
	.word	91039
	.byte	10
	.byte	'_Ifx_STM_CLC_Bits',0,23,123,16,4,11
	.byte	'DISR',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	428
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_STM_CLC_Bits',0,23,130,1,3
	.word	91116
	.byte	10
	.byte	'_Ifx_STM_CMCON_Bits',0,23,133,1,16,4,11
	.byte	'MSIZE0',0,1
	.word	603
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	603
	.byte	3,0,2,35,0,11
	.byte	'MSTART0',0,1
	.word	603
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	603
	.byte	3,0,2,35,1,11
	.byte	'MSIZE1',0,1
	.word	603
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	603
	.byte	3,0,2,35,2,11
	.byte	'MSTART1',0,1
	.word	603
	.byte	5,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	603
	.byte	3,0,2,35,3,0,33
	.byte	'Ifx_STM_CMCON_Bits',0,23,143,1,3
	.word	91258
	.byte	10
	.byte	'_Ifx_STM_CMP_Bits',0,23,146,1,16,4,11
	.byte	'CMPVAL',0,4
	.word	428
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_CMP_Bits',0,23,149,1,3
	.word	91478
	.byte	10
	.byte	'_Ifx_STM_ICR_Bits',0,23,152,1,16,4,11
	.byte	'CMP0EN',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'CMP0IR',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'CMP0OS',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'CMP1EN',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'CMP1IR',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'CMP1OS',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	428
	.byte	25,0,2,35,0,0,33
	.byte	'Ifx_STM_ICR_Bits',0,23,162,1,3
	.word	91547
	.byte	10
	.byte	'_Ifx_STM_ID_Bits',0,23,165,1,16,4,11
	.byte	'MODREV',0,1
	.word	603
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	603
	.byte	8,0,2,35,1,11
	.byte	'MODNUM',0,2
	.word	620
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_STM_ID_Bits',0,23,170,1,3
	.word	91750
	.byte	10
	.byte	'_Ifx_STM_ISCR_Bits',0,23,173,1,16,4,11
	.byte	'CMP0IRR',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'CMP0IRS',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'CMP1IRR',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'CMP1IRS',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	428
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_STM_ISCR_Bits',0,23,180,1,3
	.word	91854
	.byte	10
	.byte	'_Ifx_STM_KRST0_Bits',0,23,183,1,16,4,11
	.byte	'RST',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	428
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_STM_KRST0_Bits',0,23,188,1,3
	.word	92005
	.byte	10
	.byte	'_Ifx_STM_KRST1_Bits',0,23,191,1,16,4,11
	.byte	'RST',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	428
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_STM_KRST1_Bits',0,23,195,1,3
	.word	92116
	.byte	10
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,23,198,1,16,4,11
	.byte	'CLR',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	428
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_STM_KRSTCLR_Bits',0,23,202,1,3
	.word	92208
	.byte	10
	.byte	'_Ifx_STM_OCS_Bits',0,23,205,1,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	428
	.byte	21,8,2,35,0,11
	.byte	'SUS',0,1
	.word	603
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	603
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_STM_OCS_Bits',0,23,213,1,3
	.word	92304
	.byte	10
	.byte	'_Ifx_STM_TIM0_Bits',0,23,216,1,16,4,11
	.byte	'STM_31_0',0,4
	.word	428
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM0_Bits',0,23,219,1,3
	.word	92472
	.byte	10
	.byte	'_Ifx_STM_TIM0SV_Bits',0,23,222,1,16,4,11
	.byte	'STM_31_0',0,4
	.word	428
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM0SV_Bits',0,23,225,1,3
	.word	92545
	.byte	10
	.byte	'_Ifx_STM_TIM1_Bits',0,23,228,1,16,4,11
	.byte	'STM_35_4',0,4
	.word	428
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM1_Bits',0,23,231,1,3
	.word	92622
	.byte	10
	.byte	'_Ifx_STM_TIM2_Bits',0,23,234,1,16,4,11
	.byte	'STM_39_8',0,4
	.word	428
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM2_Bits',0,23,237,1,3
	.word	92695
	.byte	10
	.byte	'_Ifx_STM_TIM3_Bits',0,23,240,1,16,4,11
	.byte	'STM_43_12',0,4
	.word	428
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM3_Bits',0,23,243,1,3
	.word	92768
	.byte	10
	.byte	'_Ifx_STM_TIM4_Bits',0,23,246,1,16,4,11
	.byte	'STM_47_16',0,4
	.word	428
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM4_Bits',0,23,249,1,3
	.word	92842
	.byte	10
	.byte	'_Ifx_STM_TIM5_Bits',0,23,252,1,16,4,11
	.byte	'STM_51_20',0,4
	.word	428
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM5_Bits',0,23,255,1,3
	.word	92916
	.byte	10
	.byte	'_Ifx_STM_TIM6_Bits',0,23,130,2,16,4,11
	.byte	'STM_63_32',0,4
	.word	428
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM6_Bits',0,23,133,2,3
	.word	92990
	.byte	12,23,141,2,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90332
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_ACCEN0',0,23,146,2,3
	.word	93064
	.byte	12,23,149,2,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90889
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_ACCEN1',0,23,154,2,3
	.word	93128
	.byte	12,23,157,2,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90966
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_CAP',0,23,162,2,3
	.word	93192
	.byte	12,23,165,2,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91039
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_CAPSV',0,23,170,2,3
	.word	93253
	.byte	12,23,173,2,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91116
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_CLC',0,23,178,2,3
	.word	93316
	.byte	12,23,181,2,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91258
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_CMCON',0,23,186,2,3
	.word	93377
	.byte	12,23,189,2,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91478
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_CMP',0,23,194,2,3
	.word	93440
	.byte	12,23,197,2,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91547
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_ICR',0,23,202,2,3
	.word	93501
	.byte	12,23,205,2,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91750
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_ID',0,23,210,2,3
	.word	93562
	.byte	12,23,213,2,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91854
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_ISCR',0,23,218,2,3
	.word	93622
	.byte	12,23,221,2,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92005
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_KRST0',0,23,226,2,3
	.word	93684
	.byte	12,23,229,2,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92116
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_KRST1',0,23,234,2,3
	.word	93747
	.byte	12,23,237,2,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92208
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_KRSTCLR',0,23,242,2,3
	.word	93810
	.byte	12,23,245,2,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92304
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_OCS',0,23,250,2,3
	.word	93875
	.byte	12,23,253,2,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92472
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM0',0,23,130,3,3
	.word	93936
	.byte	12,23,133,3,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92545
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM0SV',0,23,138,3,3
	.word	93998
	.byte	12,23,141,3,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92622
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM1',0,23,146,3,3
	.word	94062
	.byte	12,23,149,3,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92695
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM2',0,23,154,3,3
	.word	94124
	.byte	12,23,157,3,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92768
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM3',0,23,162,3,3
	.word	94186
	.byte	12,23,165,3,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92842
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM4',0,23,170,3,3
	.word	94248
	.byte	12,23,173,3,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92916
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM5',0,23,178,3,3
	.word	94310
	.byte	12,23,181,3,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92990
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM6',0,23,186,3,3
	.word	94372
	.byte	15,5,141,1,9,1,16
	.byte	'IfxCpu_CounterMode_normal',0,0,16
	.byte	'IfxCpu_CounterMode_task',0,1,0,33
	.byte	'IfxCpu_CounterMode',0,5,145,1,3
	.word	94434
	.byte	32,5,198,1,9,6,13
	.byte	'counter',0
	.word	1864
	.byte	4,2,35,0,13
	.byte	'overlfow',0
	.word	603
	.byte	1,2,35,4,0,33
	.byte	'IfxCpu_Counter',0,5,202,1,3
	.word	94523
	.byte	32,5,210,1,9,32,13
	.byte	'instruction',0
	.word	94523
	.byte	6,2,35,0,13
	.byte	'clock',0
	.word	94523
	.byte	6,2,35,6,13
	.byte	'counter1',0
	.word	94523
	.byte	6,2,35,12,13
	.byte	'counter2',0
	.word	94523
	.byte	6,2,35,18,13
	.byte	'counter3',0
	.word	94523
	.byte	6,2,35,24,0,33
	.byte	'IfxCpu_Perf',0,5,217,1,3
	.word	94589
	.byte	33
	.byte	'Ifx_P_ACCEN0_Bits',0,8,102,3
	.word	8450
	.byte	33
	.byte	'Ifx_P_ACCEN1_Bits',0,8,108,3
	.word	8363
	.byte	33
	.byte	'Ifx_P_ESR_Bits',0,8,130,1,3
	.word	4931
	.byte	33
	.byte	'Ifx_P_ID_Bits',0,8,138,1,3
	.word	2982
	.byte	33
	.byte	'Ifx_P_IN_Bits',0,8,160,1,3
	.word	3978
	.byte	33
	.byte	'Ifx_P_IOCR0_Bits',0,8,173,1,3
	.word	3111
	.byte	33
	.byte	'Ifx_P_IOCR12_Bits',0,8,186,1,3
	.word	3758
	.byte	33
	.byte	'Ifx_P_IOCR4_Bits',0,8,199,1,3
	.word	3326
	.byte	33
	.byte	'Ifx_P_IOCR8_Bits',0,8,212,1,3
	.word	3541
	.byte	33
	.byte	'Ifx_P_LPCR_Bits',0,8,231,1,3
	.word	8025
	.byte	33
	.byte	'Ifx_P_OMCR_Bits',0,8,253,1,3
	.word	7677
	.byte	33
	.byte	'Ifx_P_OMCR0_Bits',0,8,136,2,3
	.word	6664
	.byte	33
	.byte	'Ifx_P_OMCR12_Bits',0,8,146,2,3
	.word	7188
	.byte	33
	.byte	'Ifx_P_OMCR4_Bits',0,8,157,2,3
	.word	6838
	.byte	33
	.byte	'Ifx_P_OMCR8_Bits',0,8,168,2,3
	.word	7012
	.byte	33
	.byte	'Ifx_P_OMR_Bits',0,8,205,2,3
	.word	2411
	.byte	33
	.byte	'Ifx_P_OMSR_Bits',0,8,227,2,3
	.word	7344
	.byte	33
	.byte	'Ifx_P_OMSR0_Bits',0,8,237,2,3
	.word	6001
	.byte	33
	.byte	'Ifx_P_OMSR12_Bits',0,8,248,2,3
	.word	6489
	.byte	33
	.byte	'Ifx_P_OMSR4_Bits',0,8,131,3,3
	.word	6148
	.byte	33
	.byte	'Ifx_P_OMSR8_Bits',0,8,142,3,3
	.word	6317
	.byte	33
	.byte	'Ifx_P_OUT_Bits',0,8,164,3,3
	.word	2095
	.byte	33
	.byte	'Ifx_P_PCSR_Bits',0,8,187,3,3
	.word	5637
	.byte	33
	.byte	'Ifx_P_PDISC_Bits',0,8,209,3,3
	.word	5271
	.byte	33
	.byte	'Ifx_P_PDR0_Bits',0,8,230,3,3
	.word	4302
	.byte	33
	.byte	'Ifx_P_PDR1_Bits',0,8,251,3,3
	.word	4606
	.byte	33
	.byte	'Ifx_P_ACCEN0',0,8,136,4,3
	.word	8977
	.byte	33
	.byte	'Ifx_P_ACCEN1',0,8,144,4,3
	.word	8410
	.byte	33
	.byte	'Ifx_P_ESR',0,8,152,4,3
	.word	5222
	.byte	33
	.byte	'Ifx_P_ID',0,8,160,4,3
	.word	3062
	.byte	33
	.byte	'Ifx_P_IN',0,8,168,4,3
	.word	4253
	.byte	33
	.byte	'Ifx_P_IOCR0',0,8,176,4,3
	.word	3286
	.byte	33
	.byte	'Ifx_P_IOCR12',0,8,184,4,3
	.word	3938
	.byte	33
	.byte	'Ifx_P_IOCR4',0,8,192,4,3
	.word	3501
	.byte	33
	.byte	'Ifx_P_IOCR8',0,8,200,4,3
	.word	3718
	.byte	33
	.byte	'Ifx_P_LPCR',0,8,208,4,3
	.word	8305
	.byte	33
	.byte	'Ifx_P_OMCR',0,8,216,4,3
	.word	7985
	.byte	33
	.byte	'Ifx_P_OMCR0',0,8,224,4,3
	.word	6798
	.byte	33
	.byte	'Ifx_P_OMCR12',0,8,232,4,3
	.word	7304
	.byte	33
	.byte	'Ifx_P_OMCR4',0,8,240,4,3
	.word	6972
	.byte	33
	.byte	'Ifx_P_OMCR8',0,8,248,4,3
	.word	7148
	.byte	33
	.byte	'Ifx_P_OMR',0,8,128,5,3
	.word	2942
	.byte	33
	.byte	'Ifx_P_OMSR',0,8,136,5,3
	.word	7637
	.byte	33
	.byte	'Ifx_P_OMSR0',0,8,144,5,3
	.word	6108
	.byte	33
	.byte	'Ifx_P_OMSR12',0,8,152,5,3
	.word	6624
	.byte	33
	.byte	'Ifx_P_OMSR4',0,8,160,5,3
	.word	6277
	.byte	33
	.byte	'Ifx_P_OMSR8',0,8,168,5,3
	.word	6449
	.byte	33
	.byte	'Ifx_P_OUT',0,8,176,5,3
	.word	2371
	.byte	33
	.byte	'Ifx_P_PCSR',0,8,184,5,3
	.word	5961
	.byte	33
	.byte	'Ifx_P_PDISC',0,8,192,5,3
	.word	5597
	.byte	33
	.byte	'Ifx_P_PDR0',0,8,200,5,3
	.word	4566
	.byte	33
	.byte	'Ifx_P_PDR1',0,8,208,5,3
	.word	4882
	.byte	14
	.word	9017
	.byte	33
	.byte	'Ifx_P',0,8,128,6,3
	.word	95901
	.byte	15,7,73,9,1,16
	.byte	'IfxPort_ControlledBy_port',0,0,16
	.byte	'IfxPort_ControlledBy_hsct',0,1,0,33
	.byte	'IfxPort_ControlledBy',0,7,77,3
	.word	95921
	.byte	15,7,81,9,1,16
	.byte	'IfxPort_InputMode_undefined',0,127,16
	.byte	'IfxPort_InputMode_noPullDevice',0,0,16
	.byte	'IfxPort_InputMode_pullDown',0,8,16
	.byte	'IfxPort_InputMode_pullUp',0,16,0,33
	.byte	'IfxPort_InputMode',0,7,87,3
	.word	96012
	.byte	15,7,91,9,1,16
	.byte	'IfxPort_LvdsMode_high',0,0,16
	.byte	'IfxPort_LvdsMode_medium',0,1,0,33
	.byte	'IfxPort_LvdsMode',0,7,95,3
	.word	96163
	.byte	33
	.byte	'IfxPort_Mode',0,7,122,3
	.word	19584
	.byte	33
	.byte	'IfxPort_OutputIdx',0,7,136,1,3
	.word	9693
	.byte	33
	.byte	'IfxPort_OutputMode',0,7,145,1,3
	.word	9597
	.byte	33
	.byte	'IfxPort_PadDriver',0,7,165,1,3
	.word	20328
	.byte	15,7,169,1,9,1,16
	.byte	'IfxPort_PadSupply_3v',0,0,16
	.byte	'IfxPort_PadSupply_5v',0,1,0,33
	.byte	'IfxPort_PadSupply',0,7,173,1,3
	.word	96347
	.byte	15,7,177,1,9,1,16
	.byte	'IfxPort_PinFunctionMode_digital',0,0,16
	.byte	'IfxPort_PinFunctionMode_analog',0,1,0,33
	.byte	'IfxPort_PinFunctionMode',0,7,181,1,3
	.word	96427
	.byte	33
	.byte	'IfxPort_State',0,7,193,1,3
	.word	10006
	.byte	33
	.byte	'IfxPort_Pin',0,7,250,1,3
	.word	21313
	.byte	10
	.byte	'_Ifx_SMU_ACCEN0_Bits',0,24,68,16,4,11
	.byte	'EN0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	603
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SMU_ACCEN0_Bits',0,24,102,3
	.word	96578
	.byte	10
	.byte	'_Ifx_SMU_ACCEN1_Bits',0,24,105,16,4,11
	.byte	'reserved_0',0,4
	.word	428
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SMU_ACCEN1_Bits',0,24,108,3
	.word	97135
	.byte	10
	.byte	'_Ifx_SMU_AD_Bits',0,24,111,16,4,11
	.byte	'DF0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'DF1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'DF2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'DF3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'DF4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'DF5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'DF6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'DF7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'DF8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'DF9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'DF10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'DF11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'DF12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'DF13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'DF14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'DF15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'DF16',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'DF17',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'DF18',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'DF19',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'DF20',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'DF21',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'DF22',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'DF23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'DF24',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'DF25',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'DF26',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'DF27',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'DF28',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'DF29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'DF30',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'DF31',0,1
	.word	603
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SMU_AD_Bits',0,24,145,1,3
	.word	97212
	.byte	10
	.byte	'_Ifx_SMU_AEX_Bits',0,24,148,1,16,4,11
	.byte	'IRQ0STS',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'IRQ1STS',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'IRQ2STS',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'RST0STS',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'RST1STS',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'RST2STS',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'RST3STS',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'RST4STS',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'RST5STS',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'NMISTS',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'EMSSTS',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	603
	.byte	4,0,2,35,1,11
	.byte	'IRQ0AEM',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'IRQ1AEM',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'IRQ2AEM',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'RST0AEM',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'RST1AEM',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'RST2AEM',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'RST3AEM',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'RST4AEM',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'RST5AEM',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'NMIAEM',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'EMSAEM',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	603
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SMU_AEX_Bits',0,24,176,1,3
	.word	97762
	.byte	10
	.byte	'_Ifx_SMU_AEXCLR_Bits',0,24,179,1,16,4,11
	.byte	'IRQ0CLR',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'IRQ1CLR',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'IRQ2CLR',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'RST0CLR',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'RST1CLR',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'RST2CLR',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'RST3CLR',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'RST4CLR',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'RST5CLR',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'NMICLR',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'EMSCLR',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	451
	.byte	4,16,2,35,0,11
	.byte	'IRQ0AEMCLR',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'IRQ1AEMCLR',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'IRQ2AEMCLR',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'RST0AEMCLR',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'RST1AEMCLR',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'RST2AEMCLR',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'RST3AEMCLR',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'RST4AEMCLR',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'RST5AEMCLR',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'NMIAEMCLR',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'EMSAEMCLR',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	451
	.byte	4,0,2,35,0,0,33
	.byte	'Ifx_SMU_AEXCLR_Bits',0,24,207,1,3
	.word	98319
	.byte	10
	.byte	'_Ifx_SMU_AFCNT_Bits',0,24,210,1,16,4,11
	.byte	'FCNT',0,1
	.word	603
	.byte	4,4,2,35,0,11
	.byte	'ACNT',0,2
	.word	620
	.byte	12,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	14,2,2,35,2,11
	.byte	'FCO',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'ACO',0,1
	.word	603
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SMU_AFCNT_Bits',0,24,217,1,3
	.word	98915
	.byte	10
	.byte	'_Ifx_SMU_AG_Bits',0,24,220,1,16,4,11
	.byte	'SF0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'SF1',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'SF2',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'SF3',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'SF4',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'SF5',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'SF6',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'SF7',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'SF8',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'SF9',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'SF10',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'SF11',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'SF12',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'SF13',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'SF14',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'SF15',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'SF16',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'SF17',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'SF18',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'SF19',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'SF20',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'SF21',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'SF22',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'SF23',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'SF24',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'SF25',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'SF26',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'SF27',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'SF28',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'SF29',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'SF30',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'SF31',0,4
	.word	451
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_SMU_AG_Bits',0,24,254,1,3
	.word	99055
	.byte	10
	.byte	'_Ifx_SMU_AGC_Bits',0,24,129,2,16,4,11
	.byte	'IGCS0',0,4
	.word	451
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'IGCS1',0,4
	.word	451
	.byte	3,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'IGCS2',0,4
	.word	451
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	451
	.byte	5,16,2,35,0,11
	.byte	'RCS',0,4
	.word	451
	.byte	6,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	451
	.byte	2,8,2,35,0,11
	.byte	'PES',0,4
	.word	451
	.byte	5,3,2,35,0,11
	.byte	'EFRST',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	451
	.byte	2,0,2,35,0,0,33
	.byte	'Ifx_SMU_AGC_Bits',0,24,142,2,3
	.word	99606
	.byte	10
	.byte	'_Ifx_SMU_AGCF_Bits',0,24,145,2,16,4,11
	.byte	'CF0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'CF1',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'CF2',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'CF3',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'CF4',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'CF5',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'CF6',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'CF7',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'CF8',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'CF9',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'CF10',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'CF11',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'CF12',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'CF13',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'CF14',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'CF15',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'CF16',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'CF17',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'CF18',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'CF19',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'CF20',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'CF21',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'CF22',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'CF23',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'CF24',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'CF25',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'CF26',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'CF27',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'CF28',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'CF29',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'CF30',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'CF31',0,4
	.word	451
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_SMU_AGCF_Bits',0,24,179,2,3
	.word	99868
	.byte	10
	.byte	'_Ifx_SMU_AGFSP_Bits',0,24,182,2,16,4,11
	.byte	'FE0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'FE1',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'FE2',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'FE3',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'FE4',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'FE5',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'FE6',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'FE7',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'FE8',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'FE9',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'FE10',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'FE11',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'FE12',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'FE13',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'FE14',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'FE15',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'FE16',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'FE17',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'FE18',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'FE19',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'FE20',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'FE21',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'FE22',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'FE23',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'FE24',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'FE25',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'FE26',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'FE27',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'FE28',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'FE29',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'FE30',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'FE31',0,4
	.word	451
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_SMU_AGFSP_Bits',0,24,216,2,3
	.word	100423
	.byte	10
	.byte	'_Ifx_SMU_CLC_Bits',0,24,219,2,16,4,11
	.byte	'DISR',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	428
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_SMU_CLC_Bits',0,24,226,2,3
	.word	100980
	.byte	10
	.byte	'_Ifx_SMU_CMD_Bits',0,24,229,2,16,4,11
	.byte	'CMD',0,4
	.word	451
	.byte	4,28,2,35,0,11
	.byte	'ARG',0,4
	.word	451
	.byte	4,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	451
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SMU_CMD_Bits',0,24,234,2,3
	.word	101123
	.byte	10
	.byte	'_Ifx_SMU_DBG_Bits',0,24,237,2,16,4,11
	.byte	'SSM',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	428
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SMU_DBG_Bits',0,24,241,2,3
	.word	101226
	.byte	10
	.byte	'_Ifx_SMU_FSP_Bits',0,24,244,2,16,4,11
	.byte	'PRE1',0,4
	.word	451
	.byte	3,29,2,35,0,11
	.byte	'PRE2',0,4
	.word	451
	.byte	2,27,2,35,0,11
	.byte	'MODE',0,4
	.word	451
	.byte	2,25,2,35,0,11
	.byte	'PES',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'TFSP_LOW',0,4
	.word	451
	.byte	14,10,2,35,0,11
	.byte	'TFSP_HIGH',0,4
	.word	451
	.byte	10,0,2,35,0,0,33
	.byte	'Ifx_SMU_FSP_Bits',0,24,252,2,3
	.word	101314
	.byte	10
	.byte	'_Ifx_SMU_ID_Bits',0,24,255,2,16,4,11
	.byte	'MOD_REV',0,1
	.word	603
	.byte	8,0,2,35,0,11
	.byte	'MOD_TYPE',0,1
	.word	603
	.byte	8,0,2,35,1,11
	.byte	'MOD_NUMBER',0,2
	.word	620
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SMU_ID_Bits',0,24,132,3,3
	.word	101469
	.byte	10
	.byte	'_Ifx_SMU_KEYS_Bits',0,24,135,3,16,4,11
	.byte	'CFGLCK',0,4
	.word	451
	.byte	8,24,2,35,0,11
	.byte	'PERLCK',0,4
	.word	451
	.byte	8,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	451
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_SMU_KEYS_Bits',0,24,140,3,3
	.word	101579
	.byte	10
	.byte	'_Ifx_SMU_OCS_Bits',0,24,143,3,16,4,11
	.byte	'TGS',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'TGB',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'TG_P',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	428
	.byte	20,8,2,35,0,11
	.byte	'SUS',0,1
	.word	603
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	603
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_SMU_OCS_Bits',0,24,153,3,3
	.word	101691
	.byte	10
	.byte	'_Ifx_SMU_PCTL_Bits',0,24,156,3,16,4,11
	.byte	'HWDIR',0,4
	.word	451
	.byte	2,30,2,35,0,11
	.byte	'HWEN',0,4
	.word	451
	.byte	2,28,2,35,0,11
	.byte	'GFSCU_EN',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'GFSTS_EN',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'PCS',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	451
	.byte	6,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	451
	.byte	9,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	451
	.byte	9,0,2,35,0,0,33
	.byte	'Ifx_SMU_PCTL_Bits',0,24,167,3,3
	.word	101883
	.byte	10
	.byte	'_Ifx_SMU_RMCTL_Bits',0,24,170,3,16,4,11
	.byte	'TE0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'TE1',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'TE2',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'TE3',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'TE4',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'TE5',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'TE6',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'TE7',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'TE8',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'TE9',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'TE10',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	451
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_SMU_RMCTL_Bits',0,24,204,3,3
	.word	102114
	.byte	10
	.byte	'_Ifx_SMU_RMEF_Bits',0,24,207,3,16,4,11
	.byte	'EF0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'EF1',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'EF2',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'EF3',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'EF4',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'EF5',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'EF6',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'EF7',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'EF8',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'EF9',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'EF10',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	451
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_SMU_RMEF_Bits',0,24,241,3,3
	.word	102818
	.byte	10
	.byte	'_Ifx_SMU_RMSTS_Bits',0,24,244,3,16,4,11
	.byte	'STS0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'STS1',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'STS2',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'STS3',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'STS4',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'STS5',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'STS6',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'STS7',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'STS8',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'STS9',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'STS10',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	451
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_SMU_RMSTS_Bits',0,24,150,4,3
	.word	103520
	.byte	10
	.byte	'_Ifx_SMU_RTAC00_Bits',0,24,153,4,16,4,11
	.byte	'GID0',0,4
	.word	451
	.byte	4,28,2,35,0,11
	.byte	'ALID0',0,4
	.word	451
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	451
	.byte	7,16,2,35,0,11
	.byte	'GID1',0,4
	.word	451
	.byte	4,12,2,35,0,11
	.byte	'ALID1',0,4
	.word	451
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	451
	.byte	7,0,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC00_Bits',0,24,161,4,3
	.word	104235
	.byte	10
	.byte	'_Ifx_SMU_RTAC01_Bits',0,24,164,4,16,4,11
	.byte	'GID2',0,4
	.word	451
	.byte	4,28,2,35,0,11
	.byte	'ALID2',0,4
	.word	451
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	451
	.byte	7,16,2,35,0,11
	.byte	'GID3',0,4
	.word	451
	.byte	4,12,2,35,0,11
	.byte	'ALID3',0,4
	.word	451
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	451
	.byte	7,0,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC01_Bits',0,24,172,4,3
	.word	104403
	.byte	10
	.byte	'_Ifx_SMU_RTAC10_Bits',0,24,175,4,16,4,11
	.byte	'GID0',0,4
	.word	451
	.byte	4,28,2,35,0,11
	.byte	'ALID0',0,4
	.word	451
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	451
	.byte	7,16,2,35,0,11
	.byte	'GID1',0,4
	.word	451
	.byte	4,12,2,35,0,11
	.byte	'ALID1',0,4
	.word	451
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	451
	.byte	7,0,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC10_Bits',0,24,183,4,3
	.word	104571
	.byte	10
	.byte	'_Ifx_SMU_RTAC11_Bits',0,24,186,4,16,4,11
	.byte	'GID2',0,4
	.word	451
	.byte	4,28,2,35,0,11
	.byte	'ALID2',0,4
	.word	451
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	451
	.byte	7,16,2,35,0,11
	.byte	'GID3',0,4
	.word	451
	.byte	4,12,2,35,0,11
	.byte	'ALID3',0,4
	.word	451
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	451
	.byte	7,0,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC11_Bits',0,24,194,4,3
	.word	104739
	.byte	10
	.byte	'_Ifx_SMU_RTC_Bits',0,24,197,4,16,4,11
	.byte	'RT0E',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'RT1E',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	451
	.byte	6,24,2,35,0,11
	.byte	'RTD',0,4
	.word	451
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SMU_RTC_Bits',0,24,203,4,3
	.word	104907
	.byte	10
	.byte	'_Ifx_SMU_STS_Bits',0,24,206,4,16,4,11
	.byte	'CMD',0,4
	.word	451
	.byte	4,28,2,35,0,11
	.byte	'ARG',0,4
	.word	451
	.byte	4,24,2,35,0,11
	.byte	'RES',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'ASCE',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'FSP',0,4
	.word	451
	.byte	2,20,2,35,0,11
	.byte	'FSTS',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	451
	.byte	3,16,2,35,0,11
	.byte	'RTS0',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'RTME0',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'RTS1',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'RTME1',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	451
	.byte	12,0,2,35,0,0,33
	.byte	'Ifx_SMU_STS_Bits',0,24,220,4,3
	.word	105027
	.byte	12,24,228,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	96578
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_ACCEN0',0,24,233,4,3
	.word	105282
	.byte	12,24,236,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97135
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_ACCEN1',0,24,241,4,3
	.word	105346
	.byte	12,24,244,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97212
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AD',0,24,249,4,3
	.word	105410
	.byte	12,24,252,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97762
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AEX',0,24,129,5,3
	.word	105470
	.byte	12,24,132,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	98319
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AEXCLR',0,24,137,5,3
	.word	105531
	.byte	12,24,140,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	98915
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AFCNT',0,24,145,5,3
	.word	105595
	.byte	12,24,148,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	99055
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AG',0,24,153,5,3
	.word	105658
	.byte	12,24,156,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	99606
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AGC',0,24,161,5,3
	.word	105718
	.byte	12,24,164,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	99868
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AGCF',0,24,169,5,3
	.word	105779
	.byte	12,24,172,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	100423
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AGFSP',0,24,177,5,3
	.word	105841
	.byte	12,24,180,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	100980
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_CLC',0,24,185,5,3
	.word	105904
	.byte	12,24,188,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101123
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_CMD',0,24,193,5,3
	.word	105965
	.byte	12,24,196,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101226
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_DBG',0,24,201,5,3
	.word	106026
	.byte	12,24,204,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101314
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_FSP',0,24,209,5,3
	.word	106087
	.byte	12,24,212,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101469
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_ID',0,24,217,5,3
	.word	106148
	.byte	12,24,220,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101579
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_KEYS',0,24,225,5,3
	.word	106208
	.byte	12,24,228,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101691
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_OCS',0,24,233,5,3
	.word	106270
	.byte	12,24,236,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101883
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_PCTL',0,24,241,5,3
	.word	106331
	.byte	12,24,244,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	102114
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RMCTL',0,24,249,5,3
	.word	106393
	.byte	12,24,252,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	102818
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RMEF',0,24,129,6,3
	.word	106456
	.byte	12,24,132,6,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	103520
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RMSTS',0,24,137,6,3
	.word	106518
	.byte	12,24,140,6,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104235
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC00',0,24,145,6,3
	.word	106581
	.byte	12,24,148,6,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104403
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC01',0,24,153,6,3
	.word	106645
	.byte	12,24,156,6,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104571
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC10',0,24,161,6,3
	.word	106709
	.byte	12,24,164,6,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104739
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC11',0,24,169,6,3
	.word	106773
	.byte	12,24,172,6,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104907
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RTC',0,24,177,6,3
	.word	106837
	.byte	12,24,180,6,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	105027
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_STS',0,24,185,6,3
	.word	106898
	.byte	33
	.byte	'IfxScuCcu_Fsource',0,9,177,2,3
	.word	20875
	.byte	15,9,210,2,9,1,16
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy30',0,1,16
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy60',0,2,16
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy120',0,3,16
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy240',0,4,0,33
	.byte	'IfxScuCcu_LowPowerDivRatio',0,9,216,2,3
	.word	106986
	.byte	15,9,220,2,9,1,16
	.byte	'IfxScuCcu_ModulationAmplitude_0p5',0,0,16
	.byte	'IfxScuCcu_ModulationAmplitude_1p0',0,1,16
	.byte	'IfxScuCcu_ModulationAmplitude_1p25',0,2,16
	.byte	'IfxScuCcu_ModulationAmplitude_1p5',0,3,16
	.byte	'IfxScuCcu_ModulationAmplitude_2p0',0,4,16
	.byte	'IfxScuCcu_ModulationAmplitude_2p5',0,5,16
	.byte	'IfxScuCcu_ModulationAmplitude_count',0,6,0,33
	.byte	'IfxScuCcu_ModulationAmplitude',0,9,229,2,3
	.word	107179
	.byte	15,9,254,3,9,1,16
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc1',0,0,16
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc0',0,1,16
	.byte	'IfxScuCcu_PllInputClockSelection_fSysclk',0,2,0,33
	.byte	'IfxScuCcu_PllInputClockSelection',0,9,131,4,3
	.word	107480
	.byte	15,9,135,4,9,1,16
	.byte	'IfxScuCcu_Traprequest_esr0',0,0,16
	.byte	'IfxScuCcu_Traprequest_esr1',0,1,16
	.byte	'IfxScuCcu_Traprequest_trap2',0,2,16
	.byte	'IfxScuCcu_Traprequest_smu',0,3,0,33
	.byte	'IfxScuCcu_Traprequest',0,9,141,4,3
	.word	107654
	.byte	15,9,147,4,9,1,16
	.byte	'IfxScuCcu_ModEn_disabled',0,0,16
	.byte	'IfxScuCcu_ModEn_enabled',0,1,0,33
	.byte	'IfxScuCcu_ModEn',0,9,151,4,3
	.word	107808
	.byte	32,9,162,4,9,6,13
	.byte	'pDivider',0
	.word	603
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	603
	.byte	1,2,35,1,13
	.byte	'k2Divider',0
	.word	603
	.byte	1,2,35,2,13
	.byte	'k3Divider',0
	.word	603
	.byte	1,2,35,3,13
	.byte	'k3DividerBypass',0
	.word	603
	.byte	1,2,35,4,0,33
	.byte	'IfxScuCcu_PerPllConfig',0,9,171,4,3
	.word	107893
	.byte	32,9,176,4,9,4,13
	.byte	'pDivider',0
	.word	603
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	603
	.byte	1,2,35,1,13
	.byte	'k2Divider',0
	.word	603
	.byte	1,2,35,2,0,33
	.byte	'IfxScuCcu_SysPllConfig',0,9,181,4,3
	.word	108031
	.byte	32,9,189,4,9,8,13
	.byte	'value',0
	.word	1864
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	1864
	.byte	4,2,35,4,0,33
	.byte	'IfxScuCcu_CcuconRegConfig',0,9,193,4,3
	.word	108125
	.byte	32,9,197,4,9,6,13
	.byte	'k2Step',0
	.word	603
	.byte	1,2,35,0,13
	.byte	'waitTime',0
	.word	224
	.byte	4,2,35,2,0,33
	.byte	'IfxScuCcu_PllStepConfig',0,9,201,4,3
	.word	108196
	.byte	32,9,205,4,9,16,13
	.byte	'xtalFrequency',0
	.word	1864
	.byte	4,2,35,0,13
	.byte	'pllInputClockSelection',0
	.word	107480
	.byte	1,2,35,4,13
	.byte	'sysPllConfig',0
	.word	108031
	.byte	4,2,35,6,13
	.byte	'perPllConfig',0
	.word	107893
	.byte	6,2,35,10,0,33
	.byte	'IfxScuCcu_pllsParameterConfig',0,9,211,4,3
	.word	108270
	.byte	32,9,219,4,9,8,13
	.byte	'value',0
	.word	1864
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	1864
	.byte	4,2,35,4,0,33
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,9,223,4,3
	.word	108415
	.byte	32,9,231,4,9,80,13
	.byte	'ccucon0',0
	.word	108125
	.byte	8,2,35,0,13
	.byte	'ccucon1',0
	.word	108125
	.byte	8,2,35,8,13
	.byte	'ccucon2',0
	.word	108125
	.byte	8,2,35,16,13
	.byte	'ccucon5',0
	.word	108125
	.byte	8,2,35,24,13
	.byte	'ccucon6',0
	.word	108125
	.byte	8,2,35,32,13
	.byte	'ccucon7',0
	.word	108125
	.byte	8,2,35,40,13
	.byte	'ccucon8',0
	.word	108125
	.byte	8,2,35,48,13
	.byte	'ccucon9',0
	.word	108125
	.byte	8,2,35,56,13
	.byte	'ccucon10',0
	.word	108125
	.byte	8,2,35,64,13
	.byte	'ccucon11',0
	.word	108125
	.byte	8,2,35,72,0,33
	.byte	'IfxScuCcu_ClockDistributionConfig',0,9,243,4,3
	.word	108491
	.byte	32,9,247,4,9,20,13
	.byte	'pllsParameters',0
	.word	108270
	.byte	16,2,35,0,13
	.byte	'waitTime',0
	.word	224
	.byte	4,2,35,16,0,33
	.byte	'IfxScuCcu_InitialStepConfig',0,9,251,4,3
	.word	108713
	.byte	20
	.word	108196
	.byte	3
	.word	108799
	.byte	32,9,255,4,9,8,13
	.byte	'numOfSteps',0
	.word	603
	.byte	1,2,35,0,13
	.byte	'pllSteps',0
	.word	108804
	.byte	4,2,35,4,0,33
	.byte	'IfxScuCcu_PllThrottleConfig',0,9,131,5,3
	.word	108809
	.byte	32,9,137,5,9,2,13
	.byte	'Mod_Enable',0
	.word	107808
	.byte	1,2,35,0,13
	.byte	'Mod_Amp',0
	.word	107179
	.byte	1,2,35,1,0,33
	.byte	'IfxScuCcu_Mod_Config',0,9,141,5,3
	.word	108891
	.byte	20
	.word	21470
	.byte	33
	.byte	'IfxI2c_Scl_InOut',0,16,62,3
	.word	108965
	.byte	20
	.word	21552
	.byte	33
	.byte	'IfxI2c_Sda_InOut',0,16,71,3
	.word	108995
	.byte	33
	.byte	'IfxSrc_Tos',0,12,75,3
	.word	10730
	.byte	15,13,80,9,1,16
	.byte	'IfxI2c_AddressMode_7Bit',0,0,16
	.byte	'IfxI2c_AddressMode_10Bit',0,1,0,33
	.byte	'IfxI2c_AddressMode',0,13,84,3
	.word	109044
	.byte	33
	.byte	'IfxI2c_BusStatus',0,13,92,3
	.word	18238
	.byte	15,13,97,9,1,16
	.byte	'IfxI2c_DtrInterruptSource_lastSingleRequest',0,0,16
	.byte	'IfxI2c_DtrInterruptSource_singleRequest',0,1,16
	.byte	'IfxI2c_DtrInterruptSource_lastBurstRequest',0,2,16
	.byte	'IfxI2c_DtrInterruptSource_burstRequest',0,3,0,33
	.byte	'IfxI2c_DtrInterruptSource',0,13,103,3
	.word	109155
	.byte	15,13,108,9,1,16
	.byte	'IfxI2c_ErrorInterruptSource_rxFifoUnderflow',0,0,16
	.byte	'IfxI2c_ErrorInterruptSource_rxFifoOverflow',0,1,16
	.byte	'IfxI2c_ErrorInterruptSource_txFifoUnderflow',0,2,16
	.byte	'IfxI2c_ErrorInterruptSource_txFifoOverflow',0,3,0,33
	.byte	'IfxI2c_ErrorInterruptSource',0,13,114,3
	.word	109369
	.byte	33
	.byte	'IfxI2c_PinSelect',0,13,134,1,3
	.word	18680
	.byte	33
	.byte	'IfxI2c_ProtocolInterruptSource',0,13,148,1,3
	.word	17822
	.byte	15,13,153,1,9,1,16
	.byte	'IfxI2c_SleepMode_enable',0,0,16
	.byte	'IfxI2c_SleepMode_disable',0,1,0,33
	.byte	'IfxI2c_SleepMode',0,13,157,1,3
	.word	109659
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L79:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,39,12,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,36,0,3,8,11,15,62
	.byte	15,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,59,0,3,8,0,0,10,19,1,3,8,58,15,59,15
	.byte	57,15,11,15,0,0,11,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,12,23,1,58,15,59,15,57,15,11,15,0,0,13,13
	.byte	0,3,8,73,19,11,15,56,9,0,0,14,53,0,73,19,0,0,15,4,1,58,15,59,15,57,15,11,15,0,0,16,40,0,3,8,28,13,0,0
	.byte	17,11,1,0,0,18,1,1,11,15,73,19,0,0,19,33,0,47,15,0,0,20,38,0,73,19,0,0,21,46,1,3,8,54,15,39,12,63,12,60
	.byte	12,0,0,22,5,0,73,19,0,0,23,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,24,5,0,3,8,73,19,0,0,25,46,1,49
	.byte	19,0,0,26,5,0,49,19,0,0,27,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,28,46,0,3,8,58,15,59
	.byte	15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,29,29,1,49,19,0,0,30,11,0,49,19,0,0,31,46,1,3,8,58,15,59,15
	.byte	57,15,73,19,54,15,39,12,63,12,60,12,0,0,32,19,1,58,15,59,15,57,15,11,15,0,0,33,22,0,3,8,58,15,59,15,57
	.byte	15,73,19,0,0,34,21,0,54,15,0,0,35,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L80:
	.word	.L423-.L422
.L422:
	.half	3
	.word	.L425-.L424
.L424:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap',0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0
	.byte	'IfxScuWdt.h',0,2,0,0
	.byte	'IfxScu_regdef.h',0,3,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'IfxCpu_cfg.h',0,4,0,0
	.byte	'IfxPort.h',0,5,0,0
	.byte	'IfxPort_regdef.h',0,3,0,0
	.byte	'IfxScuCcu.h',0,2,0,0
	.byte	'IfxSrc.h',0,6,0,0
	.byte	'IfxSrc_regdef.h',0,3,0,0
	.byte	'IfxSrc_cfg.h',0,4,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.h',0,0,0,0
	.byte	'IfxI2c_regdef.h',0,3,0,0
	.byte	'IfxI2c_cfg.h',0,4,0,0
	.byte	'IfxI2c_PinMap.h',0,7,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_TypesReg.h',0,3,0,0
	.byte	'IfxScu_cfg.h',0,4,0,0
	.byte	'IfxCpu_regdef.h',0,3,0,0
	.byte	'IfxStm_regdef.h',0,3,0,0
	.byte	'IfxSmu_regdef.h',0,3,0,0,0
.L425:
.L423:
	.sdecl	'.debug_info',debug,cluster('IfxI2c_configureAsMaster')
	.sect	'.debug_info'
.L81:
	.word	273
	.half	3
	.word	.L82
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L84,.L83
	.byte	2
	.word	.L77
	.byte	3
	.byte	'IfxI2c_configureAsMaster',0,1,52,6,1,1,1
	.word	.L36,.L186,.L35
	.byte	4
	.byte	'i2c',0,1,52,40
	.word	.L187,.L188
	.byte	5
	.word	.L189
	.byte	6
	.word	.L190,.L36,.L191
	.byte	7
	.word	.L192,.L193
	.byte	8
	.word	.L194,.L36,.L191
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_configureAsMaster')
	.sect	'.debug_abbrev'
.L82:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,29,1,49,16
	.byte	17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_configureAsMaster')
	.sect	'.debug_line'
.L83:
	.word	.L427-.L426
.L426:
	.half	3
	.word	.L429-.L428
.L428:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.h',0,0,0,0,0
.L429:
	.byte	4,2,5,22,7,0,5,2
	.word	.L36
	.byte	3,134,6,1,5,20,1,4,1,5,25,9
	.half	.L191-.L36
	.byte	3,178,122,1,5,19,9
	.half	.L430-.L191
	.byte	3,1,1,5,25,9
	.half	.L431-.L430
	.byte	1,9
	.half	.L432-.L431
	.byte	3,1,1,9
	.half	.L433-.L432
	.byte	3,1,1,9
	.half	.L434-.L433
	.byte	3,1,1,9
	.half	.L435-.L434
	.byte	3,1,1,5,19,9
	.half	.L436-.L435
	.byte	3,1,1,5,25,9
	.half	.L437-.L436
	.byte	1,5,19,9
	.half	.L438-.L437
	.byte	3,1,1,5,25,9
	.half	.L439-.L438
	.byte	1,5,1,9
	.half	.L440-.L439
	.byte	3,5,1,7,9
	.half	.L85-.L440
	.byte	0,1,1
.L427:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_configureAsMaster')
	.sect	'.debug_ranges'
.L84:
	.word	-1,.L36,0,.L85-.L36,0,0
.L189:
	.word	-1,.L36,0,.L186-.L36,-1,.L38,0,.L180-.L38,-1,.L40,0,.L160-.L40,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_disableModule')
	.sect	'.debug_info'
.L86:
	.word	249
	.half	3
	.word	.L87
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L89,.L88
	.byte	2
	.word	.L77
	.byte	3
	.byte	'IfxI2c_disableModule',0,1,72,6,1,1,1
	.word	.L42,.L195,.L41
	.byte	4
	.byte	'i2c',0,1,72,36
	.word	.L187,.L196
	.byte	5
	.word	.L197
	.byte	6
	.byte	'pwd',0,1,74,12
	.word	.L198,.L199
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_disableModule')
	.sect	'.debug_abbrev'
.L87:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_disableModule')
	.sect	'.debug_line'
.L88:
	.word	.L442-.L441
.L441:
	.half	3
	.word	.L444-.L443
.L443:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L444:
	.byte	5,6,7,0,5,2
	.word	.L42
	.byte	3,199,0,1,5,50,9
	.half	.L371-.L42
	.byte	3,2,1,5,16,9
	.half	.L370-.L371
	.byte	1,5,31,9
	.half	.L373-.L370
	.byte	3,2,1,5,15,9
	.half	.L372-.L373
	.byte	3,2,1,5,21,9
	.half	.L445-.L372
	.byte	1,5,15,9
	.half	.L446-.L445
	.byte	3,2,1,5,22,9
	.half	.L2-.L446
	.byte	1,5,32,9
	.half	.L447-.L2
	.byte	1,5,29,7,9
	.half	.L448-.L447
	.byte	3,3,1,5,1,9
	.half	.L90-.L448
	.byte	3,1,0,1,1
.L442:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_disableModule')
	.sect	'.debug_ranges'
.L89:
	.word	-1,.L42,0,.L90-.L42,0,0
.L197:
	.word	-1,.L42,0,.L195-.L42,-1,.L44,0,.L185-.L44,-1,.L46,0,.L170-.L46,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_enableDtrInterrupt')
	.sect	'.debug_info'
.L91:
	.word	321
	.half	3
	.word	.L92
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L94,.L93
	.byte	2
	.word	.L77
	.byte	3
	.byte	'IfxI2c_enableDtrInterrupt',0,1,87,6,1,1,1
	.word	.L48,.L200,.L47
	.byte	4
	.byte	'i2c',0,1,87,41
	.word	.L187,.L201
	.byte	4
	.byte	'typeOfService',0,1,87,57
	.word	.L202,.L203
	.byte	4
	.byte	'priority',0,1,87,79
	.word	.L198,.L204
	.byte	5
	.word	.L48,.L200
	.byte	6
	.word	.L205,.L48,.L206
	.byte	7
	.word	.L207,.L208
	.byte	8
	.word	.L209,.L210
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_enableDtrInterrupt')
	.sect	'.debug_abbrev'
.L92:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_enableDtrInterrupt')
	.sect	'.debug_line'
.L93:
	.word	.L450-.L449
.L449:
	.half	3
	.word	.L452-.L451
.L451:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.h',0,0,0,0,0
.L452:
	.byte	4,2,5,17,7,0,5,2
	.word	.L48
	.byte	3,145,5,1,5,5,9
	.half	.L453-.L48
	.byte	1,5,38,7,9
	.half	.L454-.L453
	.byte	3,2,1,5,9,9
	.half	.L455-.L454
	.byte	1,5,38,9
	.half	.L3-.L455
	.byte	3,4,1,5,9,9
	.half	.L4-.L3
	.byte	1,4,1,5,1,9
	.half	.L206-.L4
	.byte	3,197,123,1,7,9
	.half	.L95-.L206
	.byte	0,1,1
.L450:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_enableDtrInterrupt')
	.sect	'.debug_ranges'
.L94:
	.word	-1,.L48,0,.L95-.L48,0,0
.L210:
	.word	-1,.L48,0,.L206-.L48,-1,.L50,0,.L165-.L50,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_enableErrorInterrupt')
	.sect	'.debug_info'
.L96:
	.word	327
	.half	3
	.word	.L97
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L99,.L98
	.byte	2
	.word	.L77
	.byte	3
	.byte	'IfxI2c_enableErrorInterrupt',0,1,96,6,1,1,1
	.word	.L52,.L211,.L51
	.byte	4
	.byte	'i2c',0,1,96,43
	.word	.L187,.L212
	.byte	4
	.byte	'typeOfService',0,1,96,59
	.word	.L202,.L213
	.byte	4
	.byte	'priority',0,1,96,81
	.word	.L198,.L214
	.byte	5
	.word	.L52,.L211
	.byte	6
	.word	.L215,.L52,.L216
	.byte	7
	.word	.L217,.L218
	.byte	8
	.word	.L219,.L52,.L216
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_enableErrorInterrupt')
	.sect	'.debug_abbrev'
.L97:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_enableErrorInterrupt')
	.sect	'.debug_line'
.L98:
	.word	.L457-.L456
.L456:
	.half	3
	.word	.L459-.L458
.L458:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.h',0,0,0,0,0
.L459:
	.byte	4,2,5,17,7,0,5,2
	.word	.L52
	.byte	3,176,5,1,5,5,9
	.half	.L460-.L52
	.byte	1,5,38,7,9
	.half	.L461-.L460
	.byte	3,2,1,5,9,9
	.half	.L462-.L461
	.byte	1,5,38,9
	.half	.L5-.L462
	.byte	3,4,1,5,9,9
	.half	.L6-.L5
	.byte	1,4,1,5,1,9
	.half	.L216-.L6
	.byte	3,175,123,1,7,9
	.half	.L100-.L216
	.byte	0,1,1
.L457:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_enableErrorInterrupt')
	.sect	'.debug_ranges'
.L99:
	.word	-1,.L52,0,.L100-.L52,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_enableModule')
	.sect	'.debug_info'
.L101:
	.word	252
	.half	3
	.word	.L102
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L104,.L103
	.byte	2
	.word	.L77
	.byte	3
	.byte	'IfxI2c_enableModule',0,1,105,6,1,1,1
	.word	.L54,.L220,.L53
	.byte	4
	.byte	'i2c',0,1,105,35
	.word	.L187,.L221
	.byte	5
	.word	.L54,.L220
	.byte	6
	.byte	'pwd',0,1,107,12
	.word	.L198,.L222
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_enableModule')
	.sect	'.debug_abbrev'
.L102:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_enableModule')
	.sect	'.debug_line'
.L103:
	.word	.L464-.L463
.L463:
	.half	3
	.word	.L466-.L465
.L465:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L466:
	.byte	5,6,7,0,5,2
	.word	.L54
	.byte	3,232,0,1,5,50,9
	.half	.L379-.L54
	.byte	3,2,1,5,16,9
	.half	.L378-.L379
	.byte	1,5,31,9
	.half	.L381-.L378
	.byte	3,2,1,5,15,9
	.half	.L380-.L381
	.byte	3,1,1,5,21,9
	.half	.L467-.L380
	.byte	1,5,15,9
	.half	.L468-.L467
	.byte	3,2,1,5,22,9
	.half	.L7-.L468
	.byte	1,5,33,9
	.half	.L469-.L7
	.byte	1,5,23,7,9
	.half	.L470-.L469
	.byte	3,3,1,5,21,1,5,23,9
	.half	.L8-.L470
	.byte	3,2,1,5,33,9
	.half	.L471-.L8
	.byte	1,5,16,7,9
	.half	.L472-.L471
	.byte	3,3,1,5,22,9
	.half	.L473-.L472
	.byte	1,5,23,9
	.half	.L9-.L473
	.byte	3,2,1,5,34,9
	.half	.L474-.L9
	.byte	1,5,23,7,9
	.half	.L475-.L474
	.byte	3,4,1,5,21,1,5,29,9
	.half	.L476-.L475
	.byte	3,4,1,5,21,9
	.half	.L383-.L476
	.byte	3,125,1,9
	.half	.L477-.L383
	.byte	3,1,1,5,29,9
	.half	.L478-.L477
	.byte	3,2,1,5,1,7,9
	.half	.L105-.L478
	.byte	3,1,0,1,1
.L464:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_enableModule')
	.sect	'.debug_ranges'
.L104:
	.word	-1,.L54,0,.L105-.L54,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_enableProtocolInterrupt')
	.sect	'.debug_info'
.L106:
	.word	334
	.half	3
	.word	.L107
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L109,.L108
	.byte	2
	.word	.L77
	.byte	3
	.byte	'IfxI2c_enableProtocolInterrupt',0,1,134,1,6,1,1,1
	.word	.L56,.L223,.L55
	.byte	4
	.byte	'i2c',0,1,134,1,43
	.word	.L224,.L225
	.byte	4
	.byte	'typeOfService',0,1,134,1,59
	.word	.L202,.L226
	.byte	4
	.byte	'priority',0,1,134,1,81
	.word	.L198,.L227
	.byte	5
	.word	.L56,.L223
	.byte	6
	.word	.L228,.L56,.L229
	.byte	7
	.word	.L230,.L231
	.byte	8
	.word	.L232,.L56,.L229
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_enableProtocolInterrupt')
	.sect	'.debug_abbrev'
.L107:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_enableProtocolInterrupt')
	.sect	'.debug_line'
.L108:
	.word	.L480-.L479
.L479:
	.half	3
	.word	.L482-.L481
.L481:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.h',0,0,0,0,0
.L482:
	.byte	4,2,5,17,7,0,5,2
	.word	.L56
	.byte	3,201,5,1,5,5,9
	.half	.L483-.L56
	.byte	1,5,38,7,9
	.half	.L484-.L483
	.byte	3,2,1,5,9,9
	.half	.L485-.L484
	.byte	1,5,38,9
	.half	.L10-.L485
	.byte	3,4,1,5,9,9
	.half	.L11-.L10
	.byte	1,4,1,5,1,9
	.half	.L229-.L11
	.byte	3,188,123,1,7,9
	.half	.L110-.L229
	.byte	0,1,1
.L480:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_enableProtocolInterrupt')
	.sect	'.debug_ranges'
.L109:
	.word	-1,.L56,0,.L110-.L56,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_getAddress')
	.sect	'.debug_info'
.L111:
	.word	260
	.half	3
	.word	.L112
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L114,.L113
	.byte	2
	.word	.L77
	.byte	3
	.byte	'IfxI2c_getAddress',0,1,143,1,10
	.word	.L187
	.byte	1,1,1
	.word	.L58,.L233,.L57
	.byte	4
	.byte	'i2c',0,1,143,1,41
	.word	.L234,.L235
	.byte	5
	.word	.L58,.L233
	.byte	6
	.byte	'module',0,1,145,1,14
	.word	.L187,.L236
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_getAddress')
	.sect	'.debug_abbrev'
.L112:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_getAddress')
	.sect	'.debug_line'
.L113:
	.word	.L487-.L486
.L486:
	.half	3
	.word	.L489-.L488
.L488:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L489:
	.byte	5,5,7,0,5,2
	.word	.L58
	.byte	3,146,1,1,5,29,7,9
	.half	.L490-.L58
	.byte	3,2,1,5,48,9
	.half	.L491-.L490
	.byte	1,5,53,9
	.half	.L492-.L491
	.byte	1,5,1,9
	.half	.L384-.L492
	.byte	3,8,1,5,16,7,9
	.half	.L12-.L384
	.byte	3,124,1,5,1,9
	.half	.L385-.L12
	.byte	3,4,1,7,9
	.half	.L115-.L385
	.byte	0,1,1
.L487:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_getAddress')
	.sect	'.debug_ranges'
.L114:
	.word	-1,.L58,0,.L115-.L58,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_getBaudrate')
	.sect	'.debug_info'
.L116:
	.word	365
	.half	3
	.word	.L117
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L119,.L118
	.byte	2
	.word	.L77
	.byte	3
	.byte	'IfxI2c_getBaudrate',0,1,160,1,9
	.word	.L237
	.byte	1,1,1
	.word	.L60,.L238,.L59
	.byte	4
	.byte	'i2c',0,1,160,1,37
	.word	.L187,.L239
	.byte	5
	.word	.L60,.L238
	.byte	6
	.byte	'rmc',0,1,162,1,13
	.word	.L240,.L241
	.byte	7
	.word	.L242,.L243,.L244
	.byte	8
	.word	.L245,.L246
	.byte	0,9
	.word	.L247
	.byte	6
	.byte	'inc',0,1,171,1,16
	.word	.L240,.L250
	.byte	6
	.byte	'dec',0,1,172,1,16
	.word	.L198,.L251
	.byte	0,5
	.word	.L15,.L238
	.byte	6
	.byte	'inc',0,1,177,1,16
	.word	.L240,.L252
	.byte	6
	.byte	'dec',0,1,178,1,16
	.word	.L198,.L253
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_getBaudrate')
	.sect	'.debug_abbrev'
.L117:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,0,49,16,85,6,0,0,9,11,1,85,6
	.byte	0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_getBaudrate')
	.sect	'.debug_line'
.L118:
	.word	.L494-.L493
.L493:
	.half	3
	.word	.L496-.L495
.L495:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'IfxScuCcu.h',0,1,0,0,0
.L496:
	.byte	5,9,7,0,5,2
	.word	.L60
	.byte	3,159,1,1,5,34,9
	.half	.L387-.L60
	.byte	3,2,1,4,2,5,41,9
	.half	.L243-.L387
	.byte	3,234,11,1,5,77,9
	.half	.L386-.L243
	.byte	1,5,62,9
	.half	.L497-.L386
	.byte	1,4,1,5,27,9
	.half	.L244-.L497
	.byte	3,161,116,1,5,25,9
	.half	.L498-.L244
	.byte	1,5,30,3,124,1,5,5,9
	.half	.L248-.L498
	.byte	1,5,36,7,9
	.half	.L249-.L248
	.byte	3,2,1,9
	.half	.L388-.L249
	.byte	3,1,1,5,40,9
	.half	.L389-.L388
	.byte	3,1,1,5,44,9
	.half	.L390-.L389
	.byte	1,5,51,9
	.half	.L499-.L390
	.byte	1,5,9,1,5,40,9
	.half	.L15-.L499
	.byte	3,4,1,9
	.half	.L391-.L15
	.byte	3,1,1,9
	.half	.L393-.L391
	.byte	3,1,1,5,46,9
	.half	.L394-.L393
	.byte	1,5,51,9
	.half	.L392-.L394
	.byte	1,5,32,9
	.half	.L500-.L392
	.byte	1,5,1,3,2,1,7,9
	.half	.L120-.L500
	.byte	0,1,1
.L494:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_getBaudrate')
	.sect	'.debug_ranges'
.L119:
	.word	-1,.L60,0,.L120-.L60,0,0
.L246:
	.word	-1,.L60,.L243-.L60,.L244-.L60,-1,.L62,0,.L175-.L62,0,0
.L247:
	.word	-1,.L60,.L244-.L60,.L248-.L60,.L249-.L60,.L15-.L60,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_getIndex')
	.sect	'.debug_info'
.L121:
	.word	277
	.half	3
	.word	.L122
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L124,.L123
	.byte	2
	.word	.L77
	.byte	3
	.byte	'IfxI2c_getIndex',0,1,184,1,14
	.word	.L234
	.byte	1,1,1
	.word	.L64,.L254,.L63
	.byte	4
	.byte	'i2c',0,1,184,1,39
	.word	.L187,.L255
	.byte	5
	.word	.L64,.L254
	.byte	6
	.byte	'index',0,1,186,1,18
	.word	.L256,.L257
	.byte	6
	.byte	'result',0,1,187,1,18
	.word	.L234,.L258
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_getIndex')
	.sect	'.debug_abbrev'
.L122:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_getIndex')
	.sect	'.debug_line'
.L123:
	.word	.L502-.L501
.L501:
	.half	3
	.word	.L504-.L503
.L503:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L504:
	.byte	5,12,7,0,5,2
	.word	.L64
	.byte	3,188,1,1,5,13,3,4,1,5,47,9
	.half	.L505-.L64
	.byte	3,126,1,5,39,9
	.half	.L18-.L505
	.byte	3,2,1,5,9,9
	.half	.L506-.L18
	.byte	1,5,62,7,9
	.half	.L507-.L506
	.byte	3,2,1,5,22,9
	.half	.L508-.L507
	.byte	1,5,1,3,6,1,5,54,7,9
	.half	.L19-.L508
	.byte	3,118,1,5,47,1,5,1,7,9
	.half	.L509-.L19
	.byte	3,10,1,7,9
	.half	.L125-.L509
	.byte	0,1,1
.L502:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_getIndex')
	.sect	'.debug_ranges'
.L124:
	.word	-1,.L64,0,.L125-.L64,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_initSclSdaPin')
	.sect	'.debug_info'
.L126:
	.word	478
	.half	3
	.word	.L127
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L129,.L128
	.byte	2
	.word	.L77
	.byte	3
	.byte	'IfxI2c_initSclSdaPin',0,1,204,1,6,1,1,1
	.word	.L66,.L259,.L65
	.byte	4
	.byte	'scl',0,1,204,1,51
	.word	.L260,.L261
	.byte	4
	.byte	'sda',0,1,204,1,80
	.word	.L262,.L263
	.byte	4
	.byte	'padDriver',0,1,204,1,103
	.word	.L264,.L265
	.byte	5
	.word	.L66,.L259
	.byte	6
	.word	.L266,.L267,.L268
	.byte	7
	.word	.L269,.L270
	.byte	7
	.word	.L271,.L272
	.byte	7
	.word	.L273,.L274
	.byte	7
	.word	.L275,.L276
	.byte	8
	.word	.L277,.L267,.L268
	.byte	0,6
	.word	.L266,.L268,.L278
	.byte	7
	.word	.L269,.L270
	.byte	7
	.word	.L271,.L272
	.byte	7
	.word	.L273,.L274
	.byte	7
	.word	.L275,.L276
	.byte	8
	.word	.L277,.L268,.L278
	.byte	0,6
	.word	.L279,.L280,.L281
	.byte	7
	.word	.L282,.L283
	.byte	7
	.word	.L284,.L285
	.byte	9
	.word	.L286,.L287
	.byte	0,6
	.word	.L279,.L288,.L289
	.byte	7
	.word	.L282,.L283
	.byte	7
	.word	.L284,.L285
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_initSclSdaPin')
	.sect	'.debug_abbrev'
.L127:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,9,11,0,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_initSclSdaPin')
	.sect	'.debug_line'
.L128:
	.word	.L511-.L510
.L510:
	.half	3
	.word	.L513-.L512
.L512:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'IfxPort.h',0,1,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.h',0,0,0,0,0
.L513:
	.byte	5,6,7,0,5,2
	.word	.L66
	.byte	3,203,1,1,5,73,9
	.half	.L398-.L66
	.byte	3,3,1,5,6,9
	.half	.L399-.L398
	.byte	3,125,1,4,2,5,61,9
	.half	.L267-.L399
	.byte	3,217,3,1,4,1,5,38,3,170,124,1,5,53,9
	.half	.L397-.L267
	.byte	1,4,2,5,40,9
	.half	.L396-.L397
	.byte	3,214,3,1,4,1,5,73,9
	.half	.L268-.L396
	.byte	3,171,124,1,5,38,9
	.half	.L514-.L268
	.byte	1,4,2,5,61,9
	.half	.L515-.L514
	.byte	3,213,3,1,4,1,5,53,3,171,124,1,4,2,5,40,9
	.half	.L516-.L515
	.byte	3,213,3,1,4,1,5,37,9
	.half	.L278-.L516
	.byte	3,172,124,1,5,52,9
	.half	.L517-.L278
	.byte	1,5,63,9
	.half	.L518-.L517
	.byte	1,5,37,9
	.half	.L519-.L518
	.byte	3,1,1,5,52,9
	.half	.L520-.L519
	.byte	1,5,63,9
	.half	.L521-.L520
	.byte	1,5,31,9
	.half	.L522-.L521
	.byte	3,1,1,4,3,5,17,9
	.half	.L280-.L522
	.byte	3,150,4,1,4,1,5,62,9
	.half	.L281-.L280
	.byte	3,234,123,1,4,3,5,17,9
	.half	.L288-.L281
	.byte	3,150,4,1,5,24,9
	.half	.L523-.L288
	.byte	1,4,1,5,1,9
	.half	.L289-.L523
	.byte	3,235,123,1,7,9
	.half	.L130-.L289
	.byte	0,1,1
.L511:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_initSclSdaPin')
	.sect	'.debug_ranges'
.L129:
	.word	-1,.L66,0,.L130-.L66,0,0
.L287:
	.word	-1,.L66,.L280-.L66,.L281-.L66,.L288-.L66,.L289-.L66,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_releaseBus')
	.sect	'.debug_info'
.L131:
	.word	326
	.half	3
	.word	.L132
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L134,.L133
	.byte	2
	.word	.L77
	.byte	3
	.byte	'IfxI2c_releaseBus',0,1,215,1,6,1,1,1
	.word	.L68,.L290,.L67
	.byte	4
	.byte	'i2c',0,1,215,1,33
	.word	.L187,.L291
	.byte	5
	.word	.L68,.L290
	.byte	6
	.word	.L292,.L23,.L293
	.byte	7
	.word	.L294,.L295
	.byte	7
	.word	.L296,.L297
	.byte	8
	.word	.L298,.L23,.L293
	.byte	0,6
	.word	.L299,.L300,.L22
	.byte	7
	.word	.L301,.L302
	.byte	7
	.word	.L303,.L304
	.byte	8
	.word	.L305,.L300,.L22
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_releaseBus')
	.sect	'.debug_abbrev'
.L132:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_releaseBus')
	.sect	'.debug_line'
.L133:
	.word	.L525-.L524
.L524:
	.half	3
	.word	.L527-.L526
.L526:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.h',0,0,0,0,0
.L527:
	.byte	5,23,7,0,5,2
	.word	.L68
	.byte	3,217,1,1,5,5,9
	.half	.L528-.L68
	.byte	1,5,24,7,9
	.half	.L529-.L528
	.byte	3,2,1,5,32,9
	.half	.L530-.L529
	.byte	1,4,2,5,24,9
	.half	.L23-.L530
	.byte	3,232,3,1,4,1,5,117,9
	.half	.L293-.L23
	.byte	3,155,124,1,4,2,5,24,7,9
	.half	.L300-.L293
	.byte	3,229,2,1,5,19,1,4,1,5,1,9
	.half	.L22-.L300
	.byte	3,160,125,1,7,9
	.half	.L135-.L22
	.byte	0,1,1
.L525:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_releaseBus')
	.sect	'.debug_ranges'
.L134:
	.word	-1,.L68,0,.L135-.L68,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_resetFifo')
	.sect	'.debug_info'
.L136:
	.word	234
	.half	3
	.word	.L137
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L139,.L138
	.byte	2
	.word	.L77
	.byte	3
	.byte	'IfxI2c_resetFifo',0,1,231,1,6,1,1,1
	.word	.L70,.L306,.L69
	.byte	4
	.byte	'i2c',0,1,231,1,32
	.word	.L187,.L307
	.byte	5
	.word	.L70,.L306
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_resetFifo')
	.sect	'.debug_abbrev'
.L137:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_resetFifo')
	.sect	'.debug_line'
.L138:
	.word	.L532-.L531
.L531:
	.half	3
	.word	.L534-.L533
.L533:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L534:
	.byte	5,27,7,0,5,2
	.word	.L70
	.byte	3,233,1,1,5,25,1,5,19,9
	.half	.L535-.L70
	.byte	3,1,1,5,25,9
	.half	.L536-.L535
	.byte	1,5,19,9
	.half	.L537-.L536
	.byte	3,1,1,5,25,9
	.half	.L538-.L537
	.byte	1,5,1,9
	.half	.L539-.L538
	.byte	3,5,1,7,9
	.half	.L140-.L539
	.byte	0,1,1
.L532:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_resetFifo')
	.sect	'.debug_ranges'
.L139:
	.word	-1,.L70,0,.L140-.L70,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_resetModule')
	.sect	'.debug_info'
.L141:
	.word	257
	.half	3
	.word	.L142
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L144,.L143
	.byte	2
	.word	.L77
	.byte	3
	.byte	'IfxI2c_resetModule',0,1,244,1,6,1,1,1
	.word	.L72,.L308,.L71
	.byte	4
	.byte	'i2c',0,1,244,1,34
	.word	.L187,.L309
	.byte	5
	.word	.L72,.L308
	.byte	6
	.byte	'passwd',0,1,246,1,12
	.word	.L198,.L310
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_resetModule')
	.sect	'.debug_abbrev'
.L142:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_resetModule')
	.sect	'.debug_line'
.L143:
	.word	.L541-.L540
.L540:
	.half	3
	.word	.L543-.L542
.L542:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L543:
	.byte	5,6,7,0,5,2
	.word	.L72
	.byte	3,243,1,1,5,53,9
	.half	.L401-.L72
	.byte	3,2,1,5,19,9
	.half	.L400-.L401
	.byte	1,5,31,9
	.half	.L403-.L400
	.byte	3,2,1,5,17,9
	.half	.L402-.L403
	.byte	3,1,1,5,22,9
	.half	.L544-.L402
	.byte	1,5,17,9
	.half	.L545-.L544
	.byte	3,1,1,5,22,9
	.half	.L546-.L545
	.byte	1,5,29,9
	.half	.L547-.L546
	.byte	3,1,1,5,20,9
	.half	.L405-.L547
	.byte	3,2,1,5,29,9
	.half	.L24-.L405
	.byte	1,5,37,9
	.half	.L548-.L24
	.byte	1,5,31,7,9
	.half	.L549-.L548
	.byte	3,4,1,5,19,9
	.half	.L407-.L549
	.byte	3,1,1,5,24,9
	.half	.L550-.L407
	.byte	1,5,29,9
	.half	.L551-.L550
	.byte	3,1,1,5,24,3,127,1,5,29,9
	.half	.L409-.L551
	.byte	3,1,1,5,1,7,9
	.half	.L145-.L409
	.byte	3,1,0,1,1
.L541:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_resetModule')
	.sect	'.debug_ranges'
.L144:
	.word	-1,.L72,0,.L145-.L72,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_setBaudrate')
	.sect	'.debug_info'
.L146:
	.word	356
	.half	3
	.word	.L147
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L149,.L148
	.byte	2
	.word	.L77
	.byte	3
	.byte	'IfxI2c_setBaudrate',0,1,135,2,6,1,1,1
	.word	.L74,.L311,.L73
	.byte	4
	.byte	'i2c',0,1,135,2,34
	.word	.L187,.L312
	.byte	4
	.byte	'baudrate',0,1,135,2,47
	.word	.L237,.L313
	.byte	5
	.word	.L74,.L311
	.byte	6
	.byte	'rmc',0,1,138,2,13
	.word	.L240,.L314
	.byte	6
	.byte	'dec',0,1,139,2,13
	.word	.L237,.L315
	.byte	7
	.word	.L242,.L316,.L317
	.byte	8
	.word	.L245,.L318
	.byte	0,9
	.word	.L242,.L319,.L320
	.byte	5
	.word	.L27,.L311
	.byte	6
	.byte	'pwd',0,1,160,2,12
	.word	.L198,.L321
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_setBaudrate')
	.sect	'.debug_abbrev'
.L147:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,0,49,16,85,6,0,0,9,29,0,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_setBaudrate')
	.sect	'.debug_line'
.L148:
	.word	.L553-.L552
.L552:
	.half	3
	.word	.L555-.L554
.L554:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'IfxScuCcu.h',0,1,0,0,0
.L555:
	.byte	5,6,7,0,5,2
	.word	.L74
	.byte	3,134,2,1,4,2,5,41,9
	.half	.L316-.L74
	.byte	3,133,11,1,5,77,9
	.half	.L410-.L316
	.byte	1,4,1,5,20,9
	.half	.L317-.L410
	.byte	3,129,117,1,4,2,5,62,9
	.half	.L319-.L317
	.byte	3,255,10,1,4,1,5,34,3,254,116,1,5,5,9
	.half	.L320-.L319
	.byte	3,3,1,5,28,9
	.half	.L556-.L320
	.byte	3,6,1,5,26,9
	.half	.L411-.L556
	.byte	1,5,33,9
	.half	.L557-.L411
	.byte	1,5,47,9
	.half	.L558-.L557
	.byte	1,5,45,9
	.half	.L559-.L558
	.byte	1,5,52,9
	.half	.L560-.L559
	.byte	1,5,45,9
	.half	.L561-.L560
	.byte	1,5,55,3,124,1,5,27,9
	.half	.L25-.L561
	.byte	1,5,41,9
	.half	.L412-.L25
	.byte	1,5,39,9
	.half	.L562-.L412
	.byte	1,5,47,9
	.half	.L563-.L562
	.byte	1,5,45,9
	.half	.L564-.L563
	.byte	1,5,53,9
	.half	.L565-.L564
	.byte	1,5,51,9
	.half	.L566-.L565
	.byte	1,5,15,9
	.half	.L26-.L566
	.byte	3,8,1,5,5,9
	.half	.L414-.L26
	.byte	1,5,51,9
	.half	.L567-.L414
	.byte	3,4,1,5,18,9
	.half	.L415-.L567
	.byte	1,5,50,9
	.half	.L27-.L415
	.byte	3,5,1,5,16,9
	.half	.L418-.L27
	.byte	1,5,31,9
	.half	.L420-.L418
	.byte	3,2,1,5,49,9
	.half	.L419-.L420
	.byte	3,9,1,5,47,9
	.half	.L568-.L419
	.byte	1,5,34,1,5,5,9
	.half	.L569-.L568
	.byte	3,122,1,5,30,9
	.half	.L570-.L569
	.byte	3,10,1,5,28,1,5,23,9
	.half	.L571-.L570
	.byte	3,1,1,5,28,9
	.half	.L572-.L571
	.byte	1,5,35,9
	.half	.L573-.L572
	.byte	3,119,1,5,34,9
	.half	.L31-.L573
	.byte	1,5,32,1,5,23,9
	.half	.L574-.L31
	.byte	3,1,1,5,34,9
	.half	.L575-.L574
	.byte	1,5,32,9
	.half	.L576-.L575
	.byte	1,5,34,9
	.half	.L577-.L576
	.byte	3,2,1,5,32,1,5,27,9
	.half	.L578-.L577
	.byte	3,1,1,5,32,9
	.half	.L579-.L578
	.byte	1,5,18,9
	.half	.L32-.L579
	.byte	3,8,1,5,29,9
	.half	.L580-.L32
	.byte	3,5,1,5,34,9
	.half	.L421-.L580
	.byte	3,123,1,5,18,9
	.half	.L581-.L421
	.byte	3,1,1,5,34,9
	.half	.L582-.L581
	.byte	1,5,18,9
	.half	.L583-.L582
	.byte	3,1,1,5,34,9
	.half	.L584-.L583
	.byte	1,5,36,9
	.half	.L585-.L584
	.byte	3,1,1,5,34,1,5,29,9
	.half	.L586-.L585
	.byte	3,2,1,5,1,7,9
	.half	.L150-.L586
	.byte	3,1,0,1,1
.L553:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_setBaudrate')
	.sect	'.debug_ranges'
.L149:
	.word	-1,.L74,0,.L150-.L74,0,0
.L318:
	.word	-1,.L74,.L316-.L74,.L317-.L74,.L319-.L74,.L320-.L74,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_configureHighSpeedMode')
	.sect	'.debug_info'
.L151:
	.word	659
	.half	3
	.word	.L152
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L154,.L153
	.byte	2
	.word	.L77
	.byte	3
	.byte	'IfxI2c_configureHighSpeedMode',0,1,188,2,6,1,1,1
	.word	.L76,.L322,.L75
	.byte	4
	.byte	'i2c',0,1,188,2,45
	.word	.L187,.L323
	.byte	5
	.word	.L76,.L322
	.byte	6
	.word	.L190,.L76,.L324
	.byte	7
	.word	.L192,.L325
	.byte	8
	.word	.L194,.L76,.L324
	.byte	0,6
	.word	.L326,.L324,.L327
	.byte	7
	.word	.L328,.L329
	.byte	7
	.word	.L330,.L331
	.byte	9
	.word	.L332,.L333
	.byte	0,6
	.word	.L326,.L334,.L335
	.byte	7
	.word	.L328,.L329
	.byte	7
	.word	.L330,.L331
	.byte	0,6
	.word	.L337,.L338,.L339
	.byte	7
	.word	.L340,.L341
	.byte	8
	.word	.L342,.L338,.L339
	.byte	0,6
	.word	.L343,.L339,.L336
	.byte	7
	.word	.L344,.L345
	.byte	7
	.word	.L346,.L347
	.byte	8
	.word	.L348,.L339,.L336
	.byte	0,6
	.word	.L326,.L336,.L33
	.byte	7
	.word	.L328,.L329
	.byte	7
	.word	.L330,.L331
	.byte	0,6
	.word	.L292,.L33,.L349
	.byte	7
	.word	.L294,.L350
	.byte	7
	.word	.L296,.L351
	.byte	8
	.word	.L298,.L33,.L349
	.byte	0,6
	.word	.L352,.L353,.L354
	.byte	7
	.word	.L355,.L356
	.byte	8
	.word	.L357,.L353,.L354
	.byte	0,6
	.word	.L358,.L354,.L359
	.byte	7
	.word	.L360,.L361
	.byte	8
	.word	.L362,.L354,.L359
	.byte	0,6
	.word	.L190,.L359,.L34
	.byte	7
	.word	.L192,.L325
	.byte	8
	.word	.L194,.L359,.L34
	.byte	0,6
	.word	.L363,.L34,.L364
	.byte	7
	.word	.L365,.L366
	.byte	8
	.word	.L367,.L34,.L364
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_configureHighSpeedMode')
	.sect	'.debug_abbrev'
.L152:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,9,11,0,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_configureHighSpeedMode')
	.sect	'.debug_line'
.L153:
	.word	.L588-.L587
.L587:
	.half	3
	.word	.L590-.L589
.L589:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.h',0,0,0,0,0
.L590:
	.byte	4,2,5,22,7,0,5,2
	.word	.L76
	.byte	3,134,6,1,5,20,1,5,16,9
	.half	.L324-.L76
	.byte	3,13,1,4,1,5,19,9
	.half	.L327-.L324
	.byte	3,173,124,1,4,2,5,16,9
	.half	.L334-.L327
	.byte	3,211,3,1,4,1,5,25,9
	.half	.L335-.L334
	.byte	3,173,124,1,5,19,9
	.half	.L591-.L335
	.byte	3,1,1,5,25,9
	.half	.L592-.L591
	.byte	1,5,19,9
	.half	.L593-.L592
	.byte	3,1,1,5,25,9
	.half	.L594-.L593
	.byte	1,4,2,5,22,9
	.half	.L338-.L594
	.byte	3,154,3,1,5,20,1,5,19,9
	.half	.L339-.L338
	.byte	3,36,1,5,24,9
	.half	.L595-.L339
	.byte	1,5,18,9
	.half	.L336-.L595
	.byte	3,19,1,5,16,1,5,24,9
	.half	.L33-.L336
	.byte	3,176,127,1,4,1,5,13,9
	.half	.L349-.L33
	.byte	3,133,125,1,4,2,5,120,7,9
	.half	.L353-.L349
	.byte	3,221,1,1,5,16,1,5,211,1,9
	.half	.L354-.L353
	.byte	3,12,1,5,19,9
	.half	.L596-.L354
	.byte	1,5,22,9
	.half	.L359-.L596
	.byte	3,213,1,1,5,20,1,5,44,9
	.half	.L34-.L359
	.byte	3,133,127,1,4,1,5,42,9
	.half	.L364-.L34
	.byte	3,197,125,1,5,1,7,9
	.half	.L597-.L364
	.byte	3,2,1,7,9
	.half	.L155-.L597
	.byte	0,1,1
.L588:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_configureHighSpeedMode')
	.sect	'.debug_ranges'
.L154:
	.word	-1,.L76,0,.L155-.L76,0,0
.L333:
	.word	-1,.L76,.L324-.L76,.L327-.L76,.L334-.L76,.L335-.L76,.L336-.L76,.L33-.L76,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_12')
	.sect	'.debug_info'
.L156:
	.word	199
	.half	3
	.word	.L157
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L159,.L158
	.byte	2
	.word	.L77
	.byte	3
	.byte	'.cocofun_12',0,1,52,6,1
	.word	.L40,.L160,.L39
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_12')
	.sect	'.debug_abbrev'
.L157:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_12')
	.sect	'.debug_line'
.L158:
	.word	.L599-.L598
.L598:
	.half	3
	.word	.L601-.L600
.L600:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L601:
	.byte	5,25,7,0,5,2
	.word	.L40
	.byte	3,63,1,5,19,9
	.half	.L602-.L40
	.byte	3,1,1,5,25,9
	.half	.L603-.L602
	.byte	1,5,19,9
	.half	.L604-.L603
	.byte	3,1,1,5,25,9
	.half	.L605-.L604
	.byte	1,5,19,9
	.half	.L606-.L605
	.byte	3,1,1,5,25,9
	.half	.L607-.L606
	.byte	1,5,19,9
	.half	.L608-.L607
	.byte	3,1,1,5,25,9
	.half	.L609-.L608
	.byte	1,9
	.half	.L160-.L609
	.byte	0,1,1,5,25,0,5,2
	.word	.L40
	.byte	3,235,1,1,5,19,9
	.half	.L602-.L40
	.byte	3,1,1,5,25,9
	.half	.L603-.L602
	.byte	1,5,19,9
	.half	.L604-.L603
	.byte	3,1,1,5,25,9
	.half	.L605-.L604
	.byte	1,5,19,9
	.half	.L606-.L605
	.byte	3,1,1,5,25,9
	.half	.L607-.L606
	.byte	1,5,19,9
	.half	.L608-.L607
	.byte	3,1,1,5,25,9
	.half	.L609-.L608
	.byte	1,9
	.half	.L369-.L609
	.byte	3,212,126,1,7,9
	.half	.L160-.L369
	.byte	0,1,1
.L599:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_12')
	.sect	'.debug_ranges'
.L159:
	.word	-1,.L40,0,.L160-.L40,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_13')
	.sect	'.debug_info'
.L161:
	.word	199
	.half	3
	.word	.L162
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L164,.L163
	.byte	2
	.word	.L77
	.byte	3
	.byte	'.cocofun_13',0,1,87,6,1
	.word	.L50,.L165,.L49
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_13')
	.sect	'.debug_abbrev'
.L162:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_13')
	.sect	'.debug_line'
.L163:
	.word	.L611-.L610
.L610:
	.half	3
	.word	.L613-.L612
.L612:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.h',0,0,0,0
	.byte	'IfxSrc.h',0,1,0,0,0
.L613:
	.byte	4,2,5,9,7,0,5,2
	.word	.L50
	.byte	3,151,5,1,4,3,5,17,9
	.half	.L614-.L50
	.byte	3,249,124,1,5,11,9
	.half	.L615-.L614
	.byte	3,1,1,5,17,9
	.half	.L616-.L615
	.byte	1,5,11,9
	.half	.L617-.L616
	.byte	3,103,1,5,17,9
	.half	.L618-.L617
	.byte	1,5,11,9
	.half	.L619-.L618
	.byte	3,18,1,5,16,9
	.half	.L620-.L619
	.byte	1,9
	.half	.L165-.L620
	.byte	0,1,1,4,2,5,9,0,5,2
	.word	.L50
	.byte	3,182,5,1,4,3,5,17,9
	.half	.L614-.L50
	.byte	3,218,124,1,5,11,9
	.half	.L615-.L614
	.byte	3,1,1,5,17,9
	.half	.L616-.L615
	.byte	1,5,11,9
	.half	.L617-.L616
	.byte	3,103,1,5,17,9
	.half	.L618-.L617
	.byte	1,5,11,9
	.half	.L619-.L618
	.byte	3,18,1,5,16,9
	.half	.L620-.L619
	.byte	1,9
	.half	.L165-.L620
	.byte	0,1,1,4,2,5,9,0,5,2
	.word	.L50
	.byte	3,207,5,1,4,3,5,17,9
	.half	.L614-.L50
	.byte	3,193,124,1,5,11,9
	.half	.L615-.L614
	.byte	3,1,1,5,17,9
	.half	.L616-.L615
	.byte	1,5,11,9
	.half	.L617-.L616
	.byte	3,103,1,5,17,9
	.half	.L618-.L617
	.byte	1,5,11,9
	.half	.L619-.L618
	.byte	3,18,1,5,16,9
	.half	.L620-.L619
	.byte	1,9
	.half	.L165-.L620
	.byte	0,1,1
.L611:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_13')
	.sect	'.debug_ranges'
.L164:
	.word	-1,.L50,0,.L165-.L50,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_14')
	.sect	'.debug_info'
.L166:
	.word	199
	.half	3
	.word	.L167
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L169,.L168
	.byte	2
	.word	.L77
	.byte	3
	.byte	'.cocofun_14',0,1,72,6,1
	.word	.L46,.L170,.L45
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_14')
	.sect	'.debug_abbrev'
.L167:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_14')
	.sect	'.debug_line'
.L168:
	.word	.L622-.L621
.L621:
	.half	3
	.word	.L624-.L623
.L623:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L624:
	.byte	5,21,7,0,5,2
	.word	.L46
	.byte	3,205,0,1,9
	.half	.L170-.L46
	.byte	0,1,1,5,22,0,5,2
	.word	.L46
	.byte	3,248,1,1,5,21,3,213,126,1,9
	.half	.L170-.L46
	.byte	0,1,1,5,22,0,5,2
	.word	.L46
	.byte	3,249,1,1,5,21,3,212,126,1,9
	.half	.L170-.L46
	.byte	0,1,1,5,24,0,5,2
	.word	.L46
	.byte	3,129,2,1,5,21,3,204,126,1,9
	.half	.L170-.L46
	.byte	0,1,1
.L622:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_14')
	.sect	'.debug_ranges'
.L169:
	.word	-1,.L46,0,.L170-.L46,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_15')
	.sect	'.debug_info'
.L171:
	.word	200
	.half	3
	.word	.L172
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L174,.L173
	.byte	2
	.word	.L77
	.byte	3
	.byte	'.cocofun_15',0,1,160,1,9,1
	.word	.L62,.L175,.L61
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_15')
	.sect	'.debug_abbrev'
.L172:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_15')
	.sect	'.debug_line'
.L173:
	.word	.L626-.L625
.L625:
	.half	3
	.word	.L628-.L627
.L627:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'IfxScuCcu.h',0,1,0,0,0
.L628:
	.byte	4,2,5,77,7,0,5,2
	.word	.L62
	.byte	3,139,13,1,9
	.half	.L175-.L62
	.byte	0,1,1,4,2,5,77,0,5,2
	.word	.L62
	.byte	3,139,13,1,9
	.half	.L175-.L62
	.byte	0,1,1
.L626:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_15')
	.sect	'.debug_ranges'
.L174:
	.word	-1,.L62,0,.L175-.L62,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_16')
	.sect	'.debug_info'
.L176:
	.word	199
	.half	3
	.word	.L177
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L179,.L178
	.byte	2
	.word	.L77
	.byte	3
	.byte	'.cocofun_16',0,1,52,6,1
	.word	.L38,.L180,.L37
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_16')
	.sect	'.debug_abbrev'
.L177:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_16')
	.sect	'.debug_line'
.L178:
	.word	.L630-.L629
.L629:
	.half	3
	.word	.L632-.L631
.L631:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L632:
	.byte	5,25,7,0,5,2
	.word	.L38
	.byte	3,57,1,5,19,9
	.half	.L368-.L38
	.byte	3,1,1,9
	.half	.L180-.L368
	.byte	0,1,1,5,25,0,5,2
	.word	.L38
	.byte	3,58,1,5,19,9
	.half	.L368-.L38
	.byte	3,1,1,9
	.half	.L633-.L368
	.byte	3,127,1,7,9
	.half	.L180-.L633
	.byte	0,1,1,5,25,0,5,2
	.word	.L38
	.byte	3,59,1,5,19,9
	.half	.L368-.L38
	.byte	3,1,1,9
	.half	.L633-.L368
	.byte	3,126,1,7,9
	.half	.L180-.L633
	.byte	0,1,1
.L630:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_16')
	.sect	'.debug_ranges'
.L179:
	.word	-1,.L38,0,.L180-.L38,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_17')
	.sect	'.debug_info'
.L181:
	.word	199
	.half	3
	.word	.L182
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L184,.L183
	.byte	2
	.word	.L77
	.byte	3
	.byte	'.cocofun_17',0,1,72,6,1
	.word	.L44,.L185,.L43
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_17')
	.sect	'.debug_abbrev'
.L182:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_17')
	.sect	'.debug_line'
.L183:
	.word	.L635-.L634
.L634:
	.half	3
	.word	.L637-.L636
.L636:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L637:
	.byte	5,15,7,0,5,2
	.word	.L44
	.byte	3,205,0,1,9
	.half	.L185-.L44
	.byte	0,1,1,5,15,0,5,2
	.word	.L44
	.byte	3,207,0,1,9
	.half	.L638-.L44
	.byte	3,126,1,7,9
	.half	.L185-.L638
	.byte	0,1,1,5,21,0,5,2
	.word	.L44
	.byte	3,205,0,1,5,15,9
	.half	.L638-.L44
	.byte	1,7,9
	.half	.L185-.L638
	.byte	0,1,1,5,22,0,5,2
	.word	.L44
	.byte	3,248,1,1,5,15,9
	.half	.L638-.L44
	.byte	3,213,126,1,7,9
	.half	.L185-.L638
	.byte	0,1,1,5,22,0,5,2
	.word	.L44
	.byte	3,249,1,1,5,15,9
	.half	.L638-.L44
	.byte	3,212,126,1,7,9
	.half	.L185-.L638
	.byte	0,1,1,5,24,0,5,2
	.word	.L44
	.byte	3,129,2,1,5,15,9
	.half	.L638-.L44
	.byte	3,204,126,1,7,9
	.half	.L185-.L638
	.byte	0,1,1,5,15,0,5,2
	.word	.L44
	.byte	3,237,0,1,9
	.half	.L638-.L44
	.byte	3,96,1,7,9
	.half	.L185-.L638
	.byte	0,1,1,5,21,0,5,2
	.word	.L44
	.byte	3,237,0,1,5,15,9
	.half	.L638-.L44
	.byte	3,96,1,7,9
	.half	.L185-.L638
	.byte	0,1,1,5,15,0,5,2
	.word	.L44
	.byte	3,239,0,1,9
	.half	.L638-.L44
	.byte	3,94,1,7,9
	.half	.L185-.L638
	.byte	0,1,1,5,17,0,5,2
	.word	.L44
	.byte	3,248,1,1,5,15,9
	.half	.L638-.L44
	.byte	3,213,126,1,7,9
	.half	.L185-.L638
	.byte	0,1,1,5,17,0,5,2
	.word	.L44
	.byte	3,249,1,1,5,15,9
	.half	.L638-.L44
	.byte	3,212,126,1,7,9
	.half	.L185-.L638
	.byte	0,1,1,5,20,0,5,2
	.word	.L44
	.byte	3,252,1,1,5,15,9
	.half	.L638-.L44
	.byte	3,209,126,1,7,9
	.half	.L185-.L638
	.byte	0,1,1,5,19,0,5,2
	.word	.L44
	.byte	3,129,2,1,5,15,9
	.half	.L638-.L44
	.byte	3,204,126,1,7,9
	.half	.L185-.L638
	.byte	0,1,1
.L635:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_17')
	.sect	'.debug_ranges'
.L184:
	.word	-1,.L44,0,.L185-.L44,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_12')
	.sect	'.debug_loc'
.L39:
	.word	-1,.L40,0,.L160-.L40
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_13')
	.sect	'.debug_loc'
.L49:
	.word	-1,.L50,0,.L165-.L50
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_14')
	.sect	'.debug_loc'
.L45:
	.word	-1,.L46,0,.L170-.L46
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_15')
	.sect	'.debug_loc'
.L61:
	.word	-1,.L62,0,.L175-.L62
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_16')
	.sect	'.debug_loc'
.L37:
	.word	-1,.L38,0,.L180-.L38
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_17')
	.sect	'.debug_loc'
.L43:
	.word	-1,.L44,0,.L185-.L44
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_configureAsMaster')
	.sect	'.debug_loc'
.L35:
	.word	-1,.L36,0,.L186-.L36
	.half	2
	.byte	138,0
	.word	0,0
.L188:
	.word	-1,.L36,.L368-.L36,.L180-.L36
	.half	1
	.byte	100
	.word	.L40-.L36,.L369-.L36
	.half	1
	.byte	100
	.word	0,.L186-.L36
	.half	1
	.byte	100
	.word	0,0
.L193:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_configureHighSpeedMode')
	.sect	'.debug_loc'
.L75:
	.word	-1,.L76,0,.L322-.L76
	.half	2
	.byte	138,0
	.word	0,0
.L323:
	.word	-1,.L76,0,.L322-.L76
	.half	1
	.byte	100
	.word	0,0
.L356:
	.word	0,0
.L361:
	.word	0,0
.L366:
	.word	0,0
.L350:
	.word	0,0
.L341:
	.word	0,0
.L345:
	.word	0,0
.L325:
	.word	0,0
.L329:
	.word	0,0
.L331:
	.word	0,0
.L347:
	.word	0,0
.L351:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_disableModule')
	.sect	'.debug_loc'
.L41:
	.word	-1,.L42,0,.L195-.L42
	.half	2
	.byte	138,0
	.word	0,0
.L196:
	.word	-1,.L42,0,.L370-.L42
	.half	1
	.byte	100
	.word	.L371-.L42,.L372-.L42
	.half	1
	.byte	111
	.word	.L44-.L42,.L185-.L42
	.half	1
	.byte	111
	.word	.L46-.L42,.L374-.L42
	.half	1
	.byte	111
	.word	.L375-.L42,.L2-.L42
	.half	1
	.byte	111
	.word	0,0
.L199:
	.word	-1,.L42,.L370-.L42,.L372-.L42
	.half	1
	.byte	82
	.word	.L373-.L42,.L372-.L42
	.half	1
	.byte	88
	.word	.L44-.L42,.L185-.L42
	.half	1
	.byte	88
	.word	.L46-.L42,.L374-.L42
	.half	1
	.byte	88
	.word	.L375-.L42,.L195-.L42
	.half	1
	.byte	88
	.word	.L376-.L42,.L195-.L42
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_enableDtrInterrupt')
	.sect	'.debug_loc'
.L47:
	.word	-1,.L48,0,.L200-.L48
	.half	2
	.byte	138,0
	.word	0,0
.L201:
	.word	-1,.L48,.L50-.L48,.L377-.L48
	.half	1
	.byte	100
	.word	0,.L200-.L48
	.half	1
	.byte	100
	.word	0,0
.L208:
	.word	0,0
.L204:
	.word	-1,.L48,.L50-.L48,.L377-.L48
	.half	1
	.byte	85
	.word	0,.L200-.L48
	.half	1
	.byte	85
	.word	0,0
.L203:
	.word	-1,.L48,.L50-.L48,.L377-.L48
	.half	1
	.byte	84
	.word	0,.L200-.L48
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_enableErrorInterrupt')
	.sect	'.debug_loc'
.L51:
	.word	-1,.L52,0,.L211-.L52
	.half	2
	.byte	138,0
	.word	0,0
.L212:
	.word	-1,.L52,.L50-.L52,.L165-.L52
	.half	1
	.byte	100
	.word	0,.L211-.L52
	.half	1
	.byte	100
	.word	0,0
.L218:
	.word	0,0
.L214:
	.word	-1,.L52,.L50-.L52,.L165-.L52
	.half	1
	.byte	85
	.word	0,.L211-.L52
	.half	1
	.byte	85
	.word	0,0
.L213:
	.word	-1,.L52,.L50-.L52,.L165-.L52
	.half	1
	.byte	84
	.word	0,.L211-.L52
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_enableModule')
	.sect	'.debug_loc'
.L53:
	.word	-1,.L54,0,.L220-.L54
	.half	2
	.byte	138,0
	.word	0,0
.L221:
	.word	-1,.L54,0,.L378-.L54
	.half	1
	.byte	100
	.word	.L379-.L54,.L380-.L54
	.half	1
	.byte	111
	.word	.L44-.L54,.L185-.L54
	.half	1
	.byte	111
	.word	.L382-.L54,.L220-.L54
	.half	1
	.byte	111
	.word	0,0
.L222:
	.word	-1,.L54,.L378-.L54,.L380-.L54
	.half	1
	.byte	82
	.word	.L381-.L54,.L380-.L54
	.half	1
	.byte	88
	.word	.L44-.L54,.L185-.L54
	.half	1
	.byte	88
	.word	.L382-.L54,.L220-.L54
	.half	1
	.byte	88
	.word	.L383-.L54,.L220-.L54
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_enableProtocolInterrupt')
	.sect	'.debug_loc'
.L55:
	.word	-1,.L56,0,.L223-.L56
	.half	2
	.byte	138,0
	.word	0,0
.L225:
	.word	-1,.L56,.L50-.L56,.L165-.L56
	.half	1
	.byte	100
	.word	0,.L223-.L56
	.half	1
	.byte	100
	.word	0,0
.L231:
	.word	0,0
.L227:
	.word	-1,.L56,.L50-.L56,.L165-.L56
	.half	1
	.byte	85
	.word	0,.L223-.L56
	.half	1
	.byte	85
	.word	0,0
.L226:
	.word	-1,.L56,.L50-.L56,.L165-.L56
	.half	1
	.byte	84
	.word	0,.L223-.L56
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_getAddress')
	.sect	'.debug_loc'
.L57:
	.word	-1,.L58,0,.L233-.L58
	.half	2
	.byte	138,0
	.word	0,0
.L235:
	.word	-1,.L58,0,.L233-.L58
	.half	1
	.byte	84
	.word	0,0
.L236:
	.word	-1,.L58,.L384-.L58,.L12-.L58
	.half	1
	.byte	98
	.word	.L385-.L58,.L233-.L58
	.half	1
	.byte	98
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_getBaudrate')
	.sect	'.debug_loc'
.L59:
	.word	-1,.L60,0,.L238-.L60
	.half	2
	.byte	138,0
	.word	0,0
.L251:
	.word	-1,.L60,.L389-.L60,.L390-.L60
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L253:
	.word	-1,.L60,.L393-.L60,.L394-.L60
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L239:
	.word	-1,.L60,0,.L386-.L60
	.half	1
	.byte	100
	.word	.L387-.L60,.L386-.L60
	.half	1
	.byte	111
	.word	.L62-.L60,.L175-.L60
	.half	1
	.byte	111
	.word	.L244-.L60,.L238-.L60
	.half	1
	.byte	111
	.word	0,0
.L250:
	.word	-1,.L60,.L388-.L60,.L15-.L60
	.half	1
	.byte	95
	.word	0,0
.L252:
	.word	-1,.L60,.L391-.L60,.L392-.L60
	.half	1
	.byte	95
	.word	0,0
.L241:
	.word	-1,.L60,.L243-.L60,.L386-.L60
	.half	1
	.byte	88
	.word	.L62-.L60,.L175-.L60
	.half	1
	.byte	88
	.word	.L244-.L60,.L238-.L60
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_getIndex')
	.sect	'.debug_loc'
.L63:
	.word	-1,.L64,0,.L254-.L64
	.half	2
	.byte	138,0
	.word	0,0
.L255:
	.word	-1,.L64,0,.L254-.L64
	.half	1
	.byte	100
	.word	0,0
.L257:
	.word	0,0
.L258:
	.word	-1,.L64,.L395-.L64,.L254-.L64
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_initSclSdaPin')
	.sect	'.debug_loc'
.L65:
	.word	-1,.L66,0,.L259-.L66
	.half	2
	.byte	138,0
	.word	0,0
.L283:
	.word	0,0
.L276:
	.word	0,0
.L274:
	.word	0,0
.L265:
	.word	-1,.L66,0,.L396-.L66
	.half	1
	.byte	84
	.word	.L399-.L66,.L259-.L66
	.half	1
	.byte	88
	.word	0,0
.L272:
	.word	0,0
.L285:
	.word	0,0
.L270:
	.word	0,0
.L261:
	.word	-1,.L66,0,.L397-.L66
	.half	1
	.byte	100
	.word	.L398-.L66,.L259-.L66
	.half	1
	.byte	111
	.word	0,0
.L263:
	.word	-1,.L66,0,.L268-.L66
	.half	1
	.byte	101
	.word	.L267-.L66,.L259-.L66
	.half	1
	.byte	108
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_releaseBus')
	.sect	'.debug_loc'
.L67:
	.word	-1,.L68,0,.L290-.L68
	.half	2
	.byte	138,0
	.word	0,0
.L291:
	.word	-1,.L68,0,.L290-.L68
	.half	1
	.byte	100
	.word	0,0
.L302:
	.word	0,0
.L295:
	.word	0,0
.L304:
	.word	0,0
.L297:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_resetFifo')
	.sect	'.debug_loc'
.L69:
	.word	-1,.L70,0,.L306-.L70
	.half	2
	.byte	138,0
	.word	0,0
.L307:
	.word	-1,.L70,.L40-.L70,.L160-.L70
	.half	1
	.byte	100
	.word	0,.L306-.L70
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_resetModule')
	.sect	'.debug_loc'
.L71:
	.word	-1,.L72,0,.L308-.L72
	.half	2
	.byte	138,0
	.word	0,0
.L309:
	.word	-1,.L72,0,.L400-.L72
	.half	1
	.byte	100
	.word	.L401-.L72,.L402-.L72
	.half	1
	.byte	111
	.word	.L44-.L72,.L185-.L72
	.half	1
	.byte	111
	.word	.L46-.L72,.L374-.L72
	.half	1
	.byte	111
	.word	.L404-.L72,.L405-.L72
	.half	1
	.byte	111
	.word	.L406-.L72,.L407-.L72
	.half	1
	.byte	111
	.word	.L408-.L72,.L308-.L72
	.half	1
	.byte	111
	.word	0,0
.L310:
	.word	-1,.L72,.L400-.L72,.L402-.L72
	.half	1
	.byte	82
	.word	.L403-.L72,.L402-.L72
	.half	1
	.byte	88
	.word	.L44-.L72,.L185-.L72
	.half	1
	.byte	88
	.word	.L46-.L72,.L374-.L72
	.half	1
	.byte	88
	.word	.L404-.L72,.L405-.L72
	.half	1
	.byte	88
	.word	.L406-.L72,.L407-.L72
	.half	1
	.byte	88
	.word	.L408-.L72,.L308-.L72
	.half	1
	.byte	88
	.word	.L409-.L72,.L308-.L72
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_setBaudrate')
	.sect	'.debug_loc'
.L73:
	.word	-1,.L74,0,.L311-.L74
	.half	2
	.byte	138,0
	.word	0,0
.L313:
	.word	-1,.L74,0,.L410-.L74
	.half	1
	.byte	84
	.word	.L316-.L74,.L410-.L74
	.half	1
	.byte	88
	.word	.L62-.L74,.L175-.L74
	.half	1
	.byte	88
	.word	.L317-.L74,.L311-.L74
	.half	1
	.byte	88
	.word	0,0
.L315:
	.word	-1,.L74,.L26-.L74,.L413-.L74
	.half	5
	.byte	144,32,157,32,0
	.word	.L414-.L74,.L415-.L74
	.half	1
	.byte	90
	.word	.L415-.L74,.L416-.L74
	.half	5
	.byte	144,32,157,32,0
	.word	.L417-.L74,.L311-.L74
	.half	1
	.byte	90
	.word	.L417-.L74,.L27-.L74
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L312:
	.word	-1,.L74,0,.L410-.L74
	.half	1
	.byte	100
	.word	.L316-.L74,.L410-.L74
	.half	1
	.byte	111
	.word	.L62-.L74,.L175-.L74
	.half	1
	.byte	111
	.word	.L317-.L74,.L311-.L74
	.half	1
	.byte	111
	.word	0,0
.L321:
	.word	-1,.L74,.L418-.L74,.L419-.L74
	.half	1
	.byte	82
	.word	.L420-.L74,.L311-.L74
	.half	1
	.byte	91
	.word	.L421-.L74,.L311-.L74
	.half	1
	.byte	84
	.word	0,0
.L314:
	.word	-1,.L74,.L320-.L74,.L411-.L74
	.half	1
	.byte	95
	.word	.L25-.L74,.L412-.L74
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L639:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_configureAsMaster')
	.sect	'.debug_frame'
	.word	24
	.word	.L639,.L36,.L186-.L36
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_disableModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L639,.L42,.L195-.L42
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_enableDtrInterrupt')
	.sect	'.debug_frame'
	.word	24
	.word	.L639,.L48,.L200-.L48
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_enableErrorInterrupt')
	.sect	'.debug_frame'
	.word	24
	.word	.L639,.L52,.L211-.L52
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_enableModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L639,.L54,.L220-.L54
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_enableProtocolInterrupt')
	.sect	'.debug_frame'
	.word	24
	.word	.L639,.L56,.L223-.L56
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_getAddress')
	.sect	'.debug_frame'
	.word	24
	.word	.L639,.L58,.L233-.L58
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_getBaudrate')
	.sect	'.debug_frame'
	.word	12
	.word	.L639,.L60,.L238-.L60
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_getIndex')
	.sect	'.debug_frame'
	.word	20
	.word	.L639,.L64,.L254-.L64
	.byte	8,19,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_initSclSdaPin')
	.sect	'.debug_frame'
	.word	12
	.word	.L639,.L66,.L259-.L66
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_releaseBus')
	.sect	'.debug_frame'
	.word	24
	.word	.L639,.L68,.L290-.L68
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_resetFifo')
	.sect	'.debug_frame'
	.word	24
	.word	.L639,.L70,.L306-.L70
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_resetModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L639,.L72,.L308-.L72
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_setBaudrate')
	.sect	'.debug_frame'
	.word	12
	.word	.L639,.L74,.L311-.L74
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_configureHighSpeedMode')
	.sect	'.debug_frame'
	.word	24
	.word	.L639,.L76,.L322-.L76
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L640:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_16')
	.sect	'.debug_frame'
	.word	24
	.word	.L640,.L38,.L180-.L38
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_12')
	.sect	'.debug_frame'
	.word	24
	.word	.L640,.L40,.L160-.L40
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_17')
	.sect	'.debug_frame'
	.word	24
	.word	.L640,.L44,.L185-.L44
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_14')
	.sect	'.debug_frame'
	.word	24
	.word	.L640,.L46,.L170-.L46
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_13')
	.sect	'.debug_frame'
	.word	24
	.word	.L640,.L50,.L165-.L50
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_15')
	.sect	'.debug_frame'
	.word	24
	.word	.L640,.L62,.L175-.L62
	.byte	8,18,8,19,8,20,8,21,8,22,8,23


	; Module end
