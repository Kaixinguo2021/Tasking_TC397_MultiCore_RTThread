	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\.IfxCcu6.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include\\libc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.src ..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c'

	
$TC162
	.sdecl	'.zrodata.IfxCcu6..2.cnt',data,rom
	.sect	'.zrodata.IfxCcu6..2.cnt'
	.align	2
.2.cnt:	.type	object
	.size	.2.cnt,4
	.word	-268205376
	
	.sdecl	'.text.IfxCcu6.IfxCcu6_connectTrigger',code,cluster('IfxCcu6_connectTrigger')
	.sect	'.text.IfxCcu6.IfxCcu6_connectTrigger'
	.align	2
	
	.global	IfxCcu6_connectTrigger

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	     1  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	     2   * \file IfxCcu6.c
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	     3   * \brief CCU6  basic functionality
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	     4   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	     5   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	     6   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	     7   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	     8   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	     9   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    10   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    11   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    12   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    13   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    14   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    15   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    16   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    17   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    18   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    19   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    20   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    21   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    22   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    23   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    24   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    25   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    26   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    27   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    28   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    29   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    30   * language processor.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    31   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    32   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    33   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    34   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    35   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    36   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    37   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    38   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    39   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    40   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    41   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    42  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    43  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    44  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    45  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    46  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    47  #include "IfxCcu6.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    48  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    49  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    50  /*-------------------------Function Implementations---------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    51  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    52  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    53  void IfxCcu6_connectTrigger(Ifx_CCU6 *ccu6, IfxCcu6_TrigOut outputLine, IfxCcu6_TrigSel selectedTrigger)
; Function IfxCcu6_connectTrigger
.L71:
IfxCcu6_connectTrigger:	.type	func

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    54  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    55      unsigned mosel = ccu6->MOSEL.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    56      uint16   shift = (uint16)outputLine;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    57      uint16   data  = 2 * selectedTrigger;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    58  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    59      if (ccu6 == &MODULE_CCU61)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    60      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    61          data = data + 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    62      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    63  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    64      mosel         = ccu6->MOSEL.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    65      __ldmst_c(&mosel, (0x7U << shift), (data << shift));
	mov	d0,#7
	ld.w	d15,[a4]12
.L462:
	sh	d0,d0,d4
	ld.w	d15,[a4]12
.L233:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	     2   * \file IfxCpu_Intrinsics.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	     3   * \ingroup IfxLld_Cpu_Intrinsics Intrinsics
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	     4   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	     5   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	     6   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	     7   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	     9   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    10   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    11   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    12   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    13   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    14   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    15   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    16   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    18   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    19   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    20   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    21   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    22   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    23   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    24   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    25   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    26   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    27   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    28   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    29   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    30   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    31   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    32   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    33   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    34   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    35   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    36   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    37   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    38   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    39   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    40   * \defgroup IfxLld_Cpu_Intrinsics Intrinsics
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    41   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    43   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    44  #ifndef IFXCPU_INTRINSICS_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    45  #define IFXCPU_INTRINSICS_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    46  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    47  #include "Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    48  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    49  #if defined(__DCC__)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    50  #include "IfxCpu_IntrinsicsDcc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    51  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    52  #elif defined(__HIGHTEC__)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    53  #include "IfxCpu_IntrinsicsGnuc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    55  #elif defined(__TASKING__)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    56  #include "IfxCpu_IntrinsicsTasking.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    58  #elif defined(__ghs__)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    59  #include "IfxCpu_IntrinsicsGhs.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    61  #else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    62  #error Compiler unsupported
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    63  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    64  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    65  #define IFX_ALIGN_8   (1)            // Align on 8 bit Boundary
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    66  #define IFX_ALIGN_16  (2)            // Align on 16 bit Boundary
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    67  #define IFX_ALIGN_32  (4)            // Align on 32 bit Boundary
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    68  #define IFX_ALIGN_64  (8)            // Align on 64 bit Boundary
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    69  #define IFX_ALIGN_128 (16)           // Align on 128 bit Boundary
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    70  #define IFX_ALIGN_256 (32)           // Align on 256 bit Boundary
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    71  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    72  #define Ifx_AlignOn256(Size) ((((Size) + (IFX_ALIGN_256 - 1)) & (~(IFX_ALIGN_256 - 1))))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    73  #define Ifx_AlignOn128(Size) ((((Size) + (IFX_ALIGN_128 - 1)) & (~(IFX_ALIGN_128 - 1))))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    74  #define Ifx_AlignOn64(Size)  ((((Size) + (IFX_ALIGN_64 - 1)) & (~(IFX_ALIGN_64 - 1))))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    75  #define Ifx_AlignOn32(Size)  ((((Size) + (IFX_ALIGN_32 - 1)) & (~(IFX_ALIGN_32 - 1))))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    76  #define Ifx_AlignOn16(Size)  ((((Size) + (IFX_ALIGN_16 - 1)) & (~(IFX_ALIGN_16 - 1))))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    77  #define Ifx_AlignOn8(Size)   ((((Size) + (IFX_ALIGN_8 - 1)) & (~(IFX_ALIGN_8 - 1))))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    79  #define Ifx_COUNTOF(x)       (sizeof(x) / sizeof(x[0]))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    80  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    81  //______________________________________________________________________________
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    83  /** Convert context pointer to address pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    84   * \param[in] cx context pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    85   * \return address pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    86   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    87  IFX_INLINE void *__cx_to_addr(uint32 cx)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    88  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    89      uint32 seg_nr = __extru(cx, 16, 4);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    90      return (void *)__insert(seg_nr << 28, cx, 6, 16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    91  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    92  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    93  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    94  /** Convert address pointer to context pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    95   * \param[in] addr address pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    96   * \return context pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    97   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    98  IFX_INLINE uint32 __addr_to_cx(void *addr)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    99  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   100      uint32 seg_nr, seg_idx;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   101      seg_nr  = __extru((int)addr, 28, 4) << 16;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   102      seg_idx = __extru((int)addr, 6, 16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   103      return seg_nr | seg_idx;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   104  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   105  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   106  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   108  IFX_INLINE void __ldmst_c(volatile void *address, unsigned mask, unsigned value)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   109  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   110      *(volatile uint32 *)address = (*(volatile uint32 *)address & ~(mask)) | (mask & value);
	mov	d1,#-1
	lea	a15,0xf0002b00
.L463:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	     2   * \file IfxCpu_Intrinsics.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	     3   * \ingroup IfxLld_Cpu_Intrinsics Intrinsics
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	     4   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	     5   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	     6   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	     7   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	     9   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    10   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    11   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    12   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    13   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    14   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    15   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    16   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    18   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    19   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    20   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    21   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    22   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    23   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    24   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    25   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    26   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    27   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    28   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    29   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    30   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    31   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    32   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    33   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    34   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    35   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    36   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    37   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    38   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    39   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    40   * \defgroup IfxLld_Cpu_Intrinsics Intrinsics
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    41   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    43   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    44  #ifndef IFXCPU_INTRINSICS_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    45  #define IFXCPU_INTRINSICS_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    46  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    47  #include "Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    48  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    49  #if defined(__DCC__)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    50  #include "IfxCpu_IntrinsicsDcc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    51  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    52  #elif defined(__HIGHTEC__)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    53  #include "IfxCpu_IntrinsicsGnuc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    55  #elif defined(__TASKING__)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    56  #include "IfxCpu_IntrinsicsTasking.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    58  #elif defined(__ghs__)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    59  #include "IfxCpu_IntrinsicsGhs.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    61  #else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    62  #error Compiler unsupported
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    63  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    64  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    65  #define IFX_ALIGN_8   (1)            // Align on 8 bit Boundary
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    66  #define IFX_ALIGN_16  (2)            // Align on 16 bit Boundary
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    67  #define IFX_ALIGN_32  (4)            // Align on 32 bit Boundary
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    68  #define IFX_ALIGN_64  (8)            // Align on 64 bit Boundary
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    69  #define IFX_ALIGN_128 (16)           // Align on 128 bit Boundary
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    70  #define IFX_ALIGN_256 (32)           // Align on 256 bit Boundary
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    71  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    72  #define Ifx_AlignOn256(Size) ((((Size) + (IFX_ALIGN_256 - 1)) & (~(IFX_ALIGN_256 - 1))))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    73  #define Ifx_AlignOn128(Size) ((((Size) + (IFX_ALIGN_128 - 1)) & (~(IFX_ALIGN_128 - 1))))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    74  #define Ifx_AlignOn64(Size)  ((((Size) + (IFX_ALIGN_64 - 1)) & (~(IFX_ALIGN_64 - 1))))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    75  #define Ifx_AlignOn32(Size)  ((((Size) + (IFX_ALIGN_32 - 1)) & (~(IFX_ALIGN_32 - 1))))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    76  #define Ifx_AlignOn16(Size)  ((((Size) + (IFX_ALIGN_16 - 1)) & (~(IFX_ALIGN_16 - 1))))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    77  #define Ifx_AlignOn8(Size)   ((((Size) + (IFX_ALIGN_8 - 1)) & (~(IFX_ALIGN_8 - 1))))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    79  #define Ifx_COUNTOF(x)       (sizeof(x) / sizeof(x[0]))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    80  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    81  //______________________________________________________________________________
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    83  /** Convert context pointer to address pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    84   * \param[in] cx context pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    85   * \return address pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    86   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    87  IFX_INLINE void *__cx_to_addr(uint32 cx)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    88  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    89      uint32 seg_nr = __extru(cx, 16, 4);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    90      return (void *)__insert(seg_nr << 28, cx, 6, 16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    91  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    92  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    93  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    94  /** Convert address pointer to context pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    95   * \param[in] addr address pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    96   * \return context pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    97   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    98  IFX_INLINE uint32 __addr_to_cx(void *addr)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    99  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   100      uint32 seg_nr, seg_idx;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   101      seg_nr  = __extru((int)addr, 28, 4) << 16;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   102      seg_idx = __extru((int)addr, 6, 16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   103      return seg_nr | seg_idx;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   104  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   105  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   106  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   108  IFX_INLINE void __ldmst_c(volatile void *address, unsigned mask, unsigned value)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   109  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   110      *(volatile uint32 *)address = (*(volatile uint32 *)address & ~(mask)) | (mask & value);
	xor	d1,d0
.L464:
	and	d15,d1
	eq.a	d1,a4,a15
.L411:
	sha	d5,#1
.L410:
	add	d1,d5
.L465:
	sha	d1,d1,d4
.L466:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	     2   * \file IfxCpu_Intrinsics.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	     3   * \ingroup IfxLld_Cpu_Intrinsics Intrinsics
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	     4   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	     5   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	     6   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	     7   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	     9   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    10   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    11   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    12   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    13   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    14   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    15   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    16   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    18   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    19   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    20   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    21   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    22   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    23   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    24   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    25   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    26   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    27   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    28   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    29   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    30   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    31   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    32   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    33   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    34   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    35   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    36   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    37   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    38   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    39   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    40   * \defgroup IfxLld_Cpu_Intrinsics Intrinsics
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    41   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    43   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    44  #ifndef IFXCPU_INTRINSICS_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    45  #define IFXCPU_INTRINSICS_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    46  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    47  #include "Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    48  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    49  #if defined(__DCC__)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    50  #include "IfxCpu_IntrinsicsDcc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    51  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    52  #elif defined(__HIGHTEC__)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    53  #include "IfxCpu_IntrinsicsGnuc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    55  #elif defined(__TASKING__)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    56  #include "IfxCpu_IntrinsicsTasking.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    58  #elif defined(__ghs__)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    59  #include "IfxCpu_IntrinsicsGhs.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    61  #else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    62  #error Compiler unsupported
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    63  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    64  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    65  #define IFX_ALIGN_8   (1)            // Align on 8 bit Boundary
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    66  #define IFX_ALIGN_16  (2)            // Align on 16 bit Boundary
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    67  #define IFX_ALIGN_32  (4)            // Align on 32 bit Boundary
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    68  #define IFX_ALIGN_64  (8)            // Align on 64 bit Boundary
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    69  #define IFX_ALIGN_128 (16)           // Align on 128 bit Boundary
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    70  #define IFX_ALIGN_256 (32)           // Align on 256 bit Boundary
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    71  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    72  #define Ifx_AlignOn256(Size) ((((Size) + (IFX_ALIGN_256 - 1)) & (~(IFX_ALIGN_256 - 1))))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    73  #define Ifx_AlignOn128(Size) ((((Size) + (IFX_ALIGN_128 - 1)) & (~(IFX_ALIGN_128 - 1))))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    74  #define Ifx_AlignOn64(Size)  ((((Size) + (IFX_ALIGN_64 - 1)) & (~(IFX_ALIGN_64 - 1))))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    75  #define Ifx_AlignOn32(Size)  ((((Size) + (IFX_ALIGN_32 - 1)) & (~(IFX_ALIGN_32 - 1))))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    76  #define Ifx_AlignOn16(Size)  ((((Size) + (IFX_ALIGN_16 - 1)) & (~(IFX_ALIGN_16 - 1))))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    77  #define Ifx_AlignOn8(Size)   ((((Size) + (IFX_ALIGN_8 - 1)) & (~(IFX_ALIGN_8 - 1))))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    79  #define Ifx_COUNTOF(x)       (sizeof(x) / sizeof(x[0]))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    80  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    81  //______________________________________________________________________________
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    83  /** Convert context pointer to address pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    84   * \param[in] cx context pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    85   * \return address pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    86   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    87  IFX_INLINE void *__cx_to_addr(uint32 cx)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    88  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    89      uint32 seg_nr = __extru(cx, 16, 4);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    90      return (void *)__insert(seg_nr << 28, cx, 6, 16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    91  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    92  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    93  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    94  /** Convert address pointer to context pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    95   * \param[in] addr address pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    96   * \return context pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    97   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    98  IFX_INLINE uint32 __addr_to_cx(void *addr)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	    99  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   100      uint32 seg_nr, seg_idx;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   101      seg_nr  = __extru((int)addr, 28, 4) << 16;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   102      seg_idx = __extru((int)addr, 6, 16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   103      return seg_nr | seg_idx;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   104  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   105  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   106  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   108  IFX_INLINE void __ldmst_c(volatile void *address, unsigned mask, unsigned value)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   109  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_Intrinsics.h	   110      *(volatile uint32 *)address = (*(volatile uint32 *)address & ~(mask)) | (mask & value);
	and	d0,d1
.L412:
	or	d15,d0

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    66      ccu6->MOSEL.U = mosel;
	st.w	[a4]12,d15
.L234:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    67  }
	ret
.L221:
	
__IfxCcu6_connectTrigger_function_end:
	.size	IfxCcu6_connectTrigger,__IfxCcu6_connectTrigger_function_end-IfxCcu6_connectTrigger
.L120:
	; End of function
	
	.sdecl	'.text.IfxCcu6.IfxCcu6_disableModulationOutput',code,cluster('IfxCcu6_disableModulationOutput')
	.sect	'.text.IfxCcu6.IfxCcu6_disableModulationOutput'
	.align	2
	
	.global	IfxCcu6_disableModulationOutput

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    68  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    69  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    70  void IfxCcu6_disableModulationOutput(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ChannelOut channelOut)
; Function IfxCcu6_disableModulationOutput
.L73:
IfxCcu6_disableModulationOutput:	.type	func

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    71  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    72      uint32 shift, mask;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    73  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    74      if (timer != IfxCcu6_TimerId_t13)
	jeq	d4,#1,.L2
.L636:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    75      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    76          if (channelOut != IfxCcu6_ChannelOut_cout3)
	jeq	d5,#6,.L3
.L637:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    77          {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    78              shift          = channelOut;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    79              mask           = (1 << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    80              ccu6->MODCTR.U = ccu6->MODCTR.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    81          }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    82          else
	j	.L4
.L2:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    83          {}
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    84      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    85      else
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    86      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    87          if (channelOut != IfxCcu6_ChannelOut_cout3)
	jeq	d5,#6,.L5
.L638:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    88          {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    89              shift          = channelOut + 8;
	add	d5,d5,#8
.L4:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    90              mask           = (1 << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    91              ccu6->MODCTR.U = ccu6->MODCTR.U & ~(mask);
	mov	d0,#1
	ld.w	d15,[a4]128
.L639:
	sha	d0,d0,d5
.L640:
	mov	d1,#-1
	xor	d0,d1
.L641:
	and	d15,d0
	st.w	[a4]128,d15
.L3:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    92          }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    93          else
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    94          {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    95              ccu6->MODCTR.B.ECT13O = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    96          }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    97      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    98  }
	ret
.L5:
	ld.bu	d15,[a4]129
.L642:
	insert	d15,d15,#0,#7,#1
	st.b	[a4]129,d15
.L643:
	ret
.L384:
	
__IfxCcu6_disableModulationOutput_function_end:
	.size	IfxCcu6_disableModulationOutput,__IfxCcu6_disableModulationOutput_function_end-IfxCcu6_disableModulationOutput
.L200:
	; End of function
	
	.sdecl	'.text.IfxCcu6.IfxCcu6_disableModule',code,cluster('IfxCcu6_disableModule')
	.sect	'.text.IfxCcu6.IfxCcu6_disableModule'
	.align	2
	
	.global	IfxCcu6_disableModule

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	    99  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   100  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   101  void IfxCcu6_disableModule(Ifx_CCU6 *ccu6)
; Function IfxCcu6_disableModule
.L75:
IfxCcu6_disableModule:	.type	func
	mov.aa	a15,a4
.L414:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   102  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   103      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L413:
	mov	d15,d2
.L416:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   104      IfxScuWdt_clearCpuEndinit(passwd);
	mov	d4,d15
	call	IfxScuWdt_clearCpuEndinit
.L415:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   105      ccu6->CLC.U = 0x00000001;
	mov	d0,#1
	st.w	[a15],d0
.L648:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   106      IfxScuWdt_setCpuEndinit(passwd);
	mov	d4,d15
	call	IfxScuWdt_setCpuEndinit

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   107  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   108      /* Wait until module is disabled */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   109      while (IfxCcu6_isModuleEnabled(ccu6) == TRUE)
.L7:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     2   * \file IfxCcu6.h
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     3   * \brief CCU6  basic functionality
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     4   * \ingroup IfxLld_Ccu6
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     5   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     8   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     9   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    11   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    16   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    18   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    25   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    32   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    40   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    41   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    42   * \defgroup IfxLld_Ccu6_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    43   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    44   * \defgroup IfxLld_Ccu6_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    45   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    46   * \defgroup IfxLld_Ccu6_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    47   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    48   * \defgroup IfxLld_Ccu6_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    49   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    50   * \defgroup IfxLld_Ccu6_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    51   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    52   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    53  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    54  #ifndef IFXCCU6_H
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    55  #define IFXCCU6_H 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    56  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    57  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    58  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    59  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    60  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    61  #include "_Impl/IfxCcu6_cfg.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    62  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    63  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    64  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    65  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    66  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    67  #include "_PinMap/IfxCcu6_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    68  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    69  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    70  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    72  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    73  /** \addtogroup IfxLld_Ccu6_Std_Enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    74   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    75  /** \brief Input selection, ( CC6x capture input / CTRAP input / CCPOSx input )\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    76   * Definition in Ifx_CCU.PISEL0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    77   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    78  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    79  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    80      IfxCcu6_CaptureCompareInput_cC60   = IFX_CCU6_PISEL0_ISCC60_OFF,  /**< \brief CC60 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    81      IfxCcu6_CaptureCompareInput_cC61   = IFX_CCU6_PISEL0_ISCC61_OFF,  /**< \brief CC61 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    82      IfxCcu6_CaptureCompareInput_cC62   = IFX_CCU6_PISEL0_ISCC62_OFF,  /**< \brief CC62 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    83      IfxCcu6_CaptureCompareInput_cTRAP  = IFX_CCU6_PISEL0_ISTRP_OFF,   /**< \brief CTRAP input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    84      IfxCcu6_CaptureCompareInput_cCPOS0 = IFX_CCU6_PISEL0_ISPOS0_OFF,  /**< \brief CCPOS0 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    85      IfxCcu6_CaptureCompareInput_cCPOS1 = IFX_CCU6_PISEL0_ISPOS1_OFF,  /**< \brief CCPOS1 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    86      IfxCcu6_CaptureCompareInput_cCPOS2 = IFX_CCU6_PISEL0_ISPOS2_OFF   /**< \brief CCPOS2 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    87  } IfxCcu6_CaptureCompareInput;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    88  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    89  /** \brief Selection of actual input signal for the capture compare inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    90   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    91  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    92  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    93      IfxCcu6_CaptureCompareInputSignal_a = 0,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    94      IfxCcu6_CaptureCompareInputSignal_b = 1,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    95      IfxCcu6_CaptureCompareInputSignal_c = 2,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    96      IfxCcu6_CaptureCompareInputSignal_d = 3   /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    97  } IfxCcu6_CaptureCompareInputSignal;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    98  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    99  /** \brief capture/compare state to set / clear the CC6xST-bits
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   100   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   101  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   102  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   103      IfxCcu6_CaptureCompareState_set    = 0, /**< \brief Bit CC6xST is set */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   104      IfxCcu6_CaptureCompareState_clear  = 1, /**< \brief Bit CC6xST is cleared */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   105      IfxCcu6_CaptureCompareState_toggle = 2  /**< \brief Bit CC6xST is toggled */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   106  } IfxCcu6_CaptureCompareState;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   107  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   108  /** \brief Capture compare output pins
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   109   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   110  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   111  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   112      IfxCcu6_ChannelOut_cc0   = 0,  /**< \brief CC60 compare output CC0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   113      IfxCcu6_ChannelOut_cout0 = 1,  /**< \brief CC60 compare output COUT0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   114      IfxCcu6_ChannelOut_cc1   = 2,  /**< \brief CC61 compare output CC1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   115      IfxCcu6_ChannelOut_cout1 = 3,  /**< \brief CC61 compare output COUT1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   116      IfxCcu6_ChannelOut_cc2   = 4,  /**< \brief CC62 compare output CC2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   117      IfxCcu6_ChannelOut_cout2 = 5,  /**< \brief CC62 compare output COUT2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   118      IfxCcu6_ChannelOut_cout3 = 6   /**< \brief CC63 compare output COUT3 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   119  } IfxCcu6_ChannelOut;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   120  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   121  /** \brief Defines the input event leading to a counting action of the timer (T12 / T13)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   122   * Definition in Ifx_CCU.PISEL2.B.ISCNT12 / Ifx_CCU.PISEL2.B.ISCNT13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   123   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   124  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   125  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   126      IfxCcu6_CountingInputMode_internal        = 0, /**< \brief The T1x prescaler generates the counting events,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   127                                                      * Bit TCTR4.T1xCNT is not taken into account. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   128      IfxCcu6_CountingInputMode_manual          = 1, /**< \brief Bit TCTR4.T1xCNT written with 1 is a counting
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   129                                                      * event. The T1x prescaler is not taken into account */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   130      IfxCcu6_CountingInputMode_externalRising  = 2, /**< \brief The timer T1x is counting each rising edge
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   131                                                      * detected in the selected T1xHR signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   132      IfxCcu6_CountingInputMode_externalFalling = 3  /**< \brief The timer T1x is counting each falling edge
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   133                                                      * detected in the selected T1xHR signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   134  } IfxCcu6_CountingInputMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   135  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   136  /** \brief Controls whether the source signal for the sampling of the Hall input pattern (selected by HSYNC) is delayed by the Dead-Time Counter 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   137   * Definition in Ifx_CCU.T12MSEL.B.DBYP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   138   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   139  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   140  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   141      IfxCcu6_DelayBypass_notActive = 0,  /**< \brief Dead-Time Counter 0 is generating a delay after
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   142                                           * the source signal becomes active */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   143      IfxCcu6_DelayBypass_active    = 1   /**< \brief Dead-Time Counter 0 is not used for a delay */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   144  } IfxCcu6_DelayBypass;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   145  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   146  /** \brief Defines the event of signal T1xHR that can set the run bit T1xR by HW\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   147   * Definition in Ifx_CCU.TCTR2.B.T12RSEL / IIfx_CCU.TCTR2.B.T13RSEL
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   148   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   149  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   150  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   151      IfxCcu6_ExternalTriggerMode_disable     = 0,  /**< \brief The external setting of T1xR is disabled */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   152      IfxCcu6_ExternalTriggerMode_risingEdge  = 1,  /**< \brief Bit T1xR is set if a rising edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   153                                                     * detected. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   154      IfxCcu6_ExternalTriggerMode_fallingEdge = 2,  /**< \brief Bit T1xR is set if a falling edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   155                                                     * detected. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   156      IfxCcu6_ExternalTriggerMode_anyEdge     = 3   /**< \brief Bit T1xR is set if an edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   157                                                     * detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   158  } IfxCcu6_ExternalTriggerMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   159  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   160  /** \brief Defines the source for the sampling of the Hall input pattern and the comparison to the current and the expected Hall pattern bit fields\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   161   * Definition in Ifx_CCU.T12MSEL.HSYNC
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   162   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   163  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   164  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   165      IfxCcu6_HallSensorTriggerMode_permanentCheck    = 0,  /**< \brief Any edge at any of the inputs CCPOSx, independent from any PWM
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   166                                                             * signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   167      IfxCcu6_HallSensorTriggerMode_cM63              = 1,  /**< \brief A T13 Compare-Match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   168      IfxCcu6_HallSensorTriggerMode_t13PM             = 2,  /**< \brief A T13 Period-Match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   169      IfxCcu6_HallSensorTriggerMode_off               = 3,  /**< \brief Hall sampling triggered by HW sources is switched off */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   170      IfxCcu6_HallSensorTriggerMode_t12PMCountingUp   = 4,  /**< \brief A T12 Period-Match while counting up (T12_PM and CDIR = 0) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   171      IfxCcu6_HallSensorTriggerMode_t12OMCountingDown = 5,  /**< \brief A T12 One-Match while counting down (T12_PM and CDIR = 1) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   172      IfxCcu6_HallSensorTriggerMode_cM61CountingUp    = 6,  /**< \brief A T12 Compare-Match of compare channel CC61 while counting up (CM_61 and CDIR = 0) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   173      IfxCcu6_HallSensorTriggerMode_cM61CountingDown  = 7   /**< \brief A T12 Compare-Match of compare channel CC61 while counting down (CM_61 and CDIR = 1) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   174  } IfxCcu6_HallSensorTriggerMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   175  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   176  /** \brief Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   177   * Description in Ifx_CCU.IEN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   178   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   179  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   180  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   181      IfxCcu6_InterruptSource_cc60RisingEdge   = IFX_CCU6_IS_ICC60R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   182                                                                          * enable for channel CC60 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   183      IfxCcu6_InterruptSource_cc60FallingEdge  = IFX_CCU6_IS_ICC60F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   184                                                                          * enable for channel CC60 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   185      IfxCcu6_InterruptSource_cc61RisingEdge   = IFX_CCU6_IS_ICC61R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   186                                                                          * enable for channel CC61 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   187      IfxCcu6_InterruptSource_cc61FallingEdge  = IFX_CCU6_IS_ICC61F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   188                                                                          * enable for channel CC61 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   189      IfxCcu6_InterruptSource_cc62RisingEdge   = IFX_CCU6_IS_ICC62R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   190                                                                          * enable for channel CC62 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   191      IfxCcu6_InterruptSource_cc62FallingEdge  = IFX_CCU6_IS_ICC62F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   192                                                                          * enable for channel CC62 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   193      IfxCcu6_InterruptSource_t12OneMatch      = IFX_CCU6_IS_T12OM_OFF,  /**< \brief Interrupt enable for T12 one-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   194      IfxCcu6_InterruptSource_t12PeriodMatch   = IFX_CCU6_IS_T12PM_OFF,  /**< \brief Interrupt enable for T12 period-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   195      IfxCcu6_InterruptSource_t13CompareMatch  = IFX_CCU6_IS_T13CM_OFF,  /**< \brief Interrupt enable for T13 compare-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   196      IfxCcu6_InterruptSource_t13PeriodMatch   = IFX_CCU6_IS_T13PM_OFF,  /**< \brief Interrupt enable for T13 period-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   197      IfxCcu6_InterruptSource_trap             = IFX_CCU6_IS_TRPF_OFF,   /**< \brief Interrupt enable for trap flag */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   198      IfxCcu6_InterruptSource_correctHallEvent = IFX_CCU6_IS_CHE_OFF,    /**< \brief Interrupt enable for correct hall event */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   199      IfxCcu6_InterruptSource_wrongHallEvent   = IFX_CCU6_IS_WHE_OFF     /**< \brief Interrupt enable for wrong hall event */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   200  } IfxCcu6_InterruptSource;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   201  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   202  /** \brief Selection of the trigger request source (next multi-channel event) for the shadow transfer MCM_ST from MCMPS to MCMP\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   203   * Definition in Ifx_CCU.MCMCTR.B.SWSEL
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   204   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   205  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   206  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   207      IfxCcu6_MultiChannelSwitchingSelect_noEvent                 = 0,  /**< \brief No trigger request will be generated */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   208      IfxCcu6_MultiChannelSwitchingSelect_correctHallEvent        = 1,  /**< \brief Correct Hall pattern detected (CM_CHE) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   209      IfxCcu6_MultiChannelSwitchingSelect_t13PeriodMatch          = 2,  /**< \brief T13 period-match detected (while counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   210      IfxCcu6_MultiChannelSwitchingSelect_t12OneMatch             = 3,  /**< \brief T12 one-match (while counting down) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   211      IfxCcu6_MultiChannelSwitchingSelect_t12Channel1CompareMatch = 4,  /**< \brief T12 channel 1 compare-match detected (phase
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   212                                                                         * delay function) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   213      IfxCcu6_MultiChannelSwitchingSelect_t12PeriodMatch          = 5   /**< \brief T12 period match detected (while counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   214  } IfxCcu6_MultiChannelSwitchingSelect;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   215  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   216  /** \brief Selection of the synchronization mechanism for the shadow transfer event MCM_ST\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   217   * Definition in Ifx_CCU.MCMCTR.B.SWSYN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   218   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   219  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   220  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   221      IfxCcu6_MultiChannelSwitchingSync_direct       = 0,  /**< \brief Direct, the trigger event immediately leads to the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   222                                                            * shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   223      IfxCcu6_MultiChannelSwitchingSync_t13ZeroMatch = 1,  /**< \brief A T13 zero-match triggers the shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   224      IfxCcu6_MultiChannelSwitchingSync_t12ZeroMatch = 2   /**< \brief A T12 zero-match (while counting up) triggers the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   225                                                            * shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   226  } IfxCcu6_MultiChannelSwitchingSync;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   227  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   228  /** \brief Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   229   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   230  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   231  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   232      IfxCcu6_ServiceRequest_0 = 0,      /**< \brief Service request output SR0  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   233      IfxCcu6_ServiceRequest_1,          /**< \brief Service request output SR1  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   234      IfxCcu6_ServiceRequest_2,          /**< \brief Service request output SR2  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   235      IfxCcu6_ServiceRequest_3           /**< \brief Service request output SR3  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   236  } IfxCcu6_ServiceRequest;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   237  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   238  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   239   * Definition in Ifx_CCU6.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   240   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   241  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   242  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   243      IfxCcu6_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   244      IfxCcu6_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   245  } IfxCcu6_SleepMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   246  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   247  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   248   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   249  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   250  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   251      IfxCcu6_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   252      IfxCcu6_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   253      IfxCcu6_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   254  } IfxCcu6_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   255  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   256  /** \brief Capture compare channel of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   257   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   258  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   259  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   260      IfxCcu6_T12Channel_0 = 0,      /**< \brief T12 channel CC60  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   261      IfxCcu6_T12Channel_1,          /**< \brief T12 channel CC61  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   262      IfxCcu6_T12Channel_2           /**< \brief T12 channel CC62  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   263  } IfxCcu6_T12Channel;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   264  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   265  /** \brief The operating mode for the T12 channels are defined by the bit fields Ifx_CCU.T12MSEL.MSEL6x.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   266   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   267  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   268  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   269      IfxCcu6_T12ChannelMode_off                                   = 0,  /**< \brief Capture/Compare modes switched off */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   270      IfxCcu6_T12ChannelMode_compareMode                           = 1,  /**< \brief Compare mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   271      IfxCcu6_T12ChannelMode_doubleRegisterCaptureRisingAndFalling = 4,  /**< \brief CC6xIN rising edge: T12 stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   272      IfxCcu6_T12ChannelMode_doubleRegisterCaptureRising           = 5,  /**< \brief CC6xIN rising edge: CC6nSR stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   273      IfxCcu6_T12ChannelMode_doubleRegisterCaptureFalling          = 6,  /**< \brief CC6xIN rising edge: CC6nSR stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   274      IfxCcu6_T12ChannelMode_doubleRegisterCaptureAny              = 7,  /**< \brief CC6xIN any active edge: CC6nSR stored in CC6xR, any active edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   275      IfxCcu6_T12ChannelMode_hallSensor                            = 8,  /**< \brief Hall Sensor Mode, In order to properly enable this mode, all three MSEL6x fields have to be
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   276                                                                          * programmed to Hall Sensor mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   277      IfxCcu6_T12ChannelMode_hysteresisLikecompare                 = 9,  /**< \brief Hysteresis-like compare mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   278      IfxCcu6_T12ChannelMode_multiInputCaptureRisingAndFalling     = 10, /**< \brief CC6xIN rising edge: T12 stored in CC6xR, CCPOSx falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   279      IfxCcu6_T12ChannelMode_multiInputCaptureFallingAndRising     = 11, /**< \brief CC6xIN falling edge: T12 stored in CC6xR, CCPOSx rising edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   280      IfxCcu6_T12ChannelMode_multiInputCaptureBothRising           = 12, /**< \brief CC6xIN rising edge: T12 stored in CC6xR, CCPOSx rising edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   281      IfxCcu6_T12ChannelMode_multiInputCaptureBothFalling          = 13, /**< \brief CC6xIN falling edge: T12 stored in CC6xR, CCPOSx falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   282      IfxCcu6_T12ChannelMode_multiInputCaptureAny                  = 14  /**< \brief CC6xIN any active edge : T12 stored in CC6xR, CCPOSx any active edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   283  } IfxCcu6_T12ChannelMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   284  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   285  /** \brief Counting direction of Timer12\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   286   * Definition in Ifx_CCU.TCTR0.B.CDIR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   287   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   288  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   289  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   290      IfxCcu6_T12CountDirection_up   = 0, /**< \brief Counting up */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   291      IfxCcu6_T12CountDirection_down = 1  /**< \brief Counting down */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   292  } IfxCcu6_T12CountDirection;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   293  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   294  /** \brief Operating mode of Timer 12\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   295   * Definition in Ifx_CCU.TCTR0.B.CTM
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   296   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   297  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   298  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   299      IfxCcu6_T12CountMode_edgeAligned   = 0, /**< \brief T12 always counts up and continues counting
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   300                                               * from zero after reaching the period value. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   301      IfxCcu6_T12CountMode_centerAligned = 1  /**< \brief T12 counts down after detecting a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   302                                               * and counts up after detecting a one-match. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   303  } IfxCcu6_T12CountMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   304  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   305  /** \brief Delivers additional information to control the automatic set of bit T13R in the case that the trigger action defined by T13 trigger event control (T13TEC) is detected.\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   306   * Definition in Ifx_CCU.TCTR2.B.T13TED
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   307   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   308  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   309  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   310      IfxCcu6_T13TriggerDirection_noAction          = 0,  /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   311      IfxCcu6_T13TriggerDirection_onT12CountingUp   = 1,  /**< \brief while T12 is counting up */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   312      IfxCcu6_T13TriggerDirection_onT12CountingDown = 2,  /**< \brief while T12 is counting down */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   313      IfxCcu6_T13TriggerDirection_anyT12            = 3   /**< \brief independent on the count direction of T12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   314  } IfxCcu6_T13TriggerDirection;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   315  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   316  /** \brief Selects the trigger event to start T13 (automatic set of T13R for synchronization to T12 compare signals)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   317   * Definition in Ifx_CCU.TCTR2.B.T13TEC
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   318   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   319  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   320  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   321      IfxCcu6_T13TriggerEvent_noAction        = 0,  /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   322      IfxCcu6_T13TriggerEvent_onCC60RCompare  = 1,  /**< \brief set T13R on a T12 compare event on channel 0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   323      IfxCcu6_T13TriggerEvent_onCC61RCompare  = 2,  /**< \brief set T13R on a T12 compare event on channel 1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   324      IfxCcu6_T13TriggerEvent_onCC62RCompare  = 3,  /**< \brief set T13R on a T12 compare event on channel 2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   325      IfxCcu6_T13TriggerEvent_onAnyT12Compare = 4,  /**< \brief set T13R on any T12 compare event (ch. 0, 1, 2) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   326      IfxCcu6_T13TriggerEvent_onT12Period     = 5,  /**< \brief set T13R upon a period-match of T12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   327      IfxCcu6_T13TriggerEvent_onT12Zero       = 6,  /**< \brief set T13R upon a zero-match of T12 (while
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   328                                                     * counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   329      IfxCcu6_T13TriggerEvent_onCCPOSxEdge    = 7   /**< \brief set T13R on any edge of inputs CCPOSx */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   330  } IfxCcu6_T13TriggerEvent;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   331  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   332  /** \brief Timer number ( T12 / T13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   333   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   334  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   335  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   336      IfxCcu6_TimerId_t12 = 0,  /**< \brief Timer 12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   337      IfxCcu6_TimerId_t13 = 1   /**< \brief Timer 13 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   338  } IfxCcu6_TimerId;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   339  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   340  /** \brief Selects the input clock for timers (T12 or T13) that is derived from the peripheral clock according to the equation\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   341   * Definition in Ifx_CCU.TCTR0.B.T12CLK / Ifx_CCU.TCTR0.B.T13CLK
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   342   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   343  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   344  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   345      IfxCcu6_TimerInputClock_fcc6      = 0, /**< \brief fcc6 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   346      IfxCcu6_TimerInputClock_fcc6By2   = 1, /**< \brief fcc6 / 2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   347      IfxCcu6_TimerInputClock_fcc6By4   = 2, /**< \brief fcc6 / 4 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   348      IfxCcu6_TimerInputClock_fcc6By8   = 3, /**< \brief fcc6 / 8 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   349      IfxCcu6_TimerInputClock_fcc6By16  = 4, /**< \brief fcc6 / 16 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   350      IfxCcu6_TimerInputClock_fcc6By32  = 5, /**< \brief fcc6 / 32 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   351      IfxCcu6_TimerInputClock_fcc6By64  = 6, /**< \brief fcc6 / 64 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   352      IfxCcu6_TimerInputClock_fcc6By128 = 7  /**< \brief fcc6 / 128 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   353  } IfxCcu6_TimerInputClock;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   354  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   355  /** \brief Selection of actual input signal for the timer inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   356   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   357  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   358  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   359      IfxCcu6_TimerInputSignal_a = 0,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   360      IfxCcu6_TimerInputSignal_b = 1,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   361      IfxCcu6_TimerInputSignal_c = 2,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   362      IfxCcu6_TimerInputSignal_d = 3,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   363      IfxCcu6_TimerInputSignal_e = 0,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   364      IfxCcu6_TimerInputSignal_f = 1,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   365      IfxCcu6_TimerInputSignal_g = 2,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   366      IfxCcu6_TimerInputSignal_h = 3   /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   367  } IfxCcu6_TimerInputSignal;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   368  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   369  /** \brief Timer (T12 / T13) run status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   370   * Definition in Ifx_CCU.TCTR0.B.T12R and Ifx_CCU.TCTR0.B.T13R
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   371   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   373  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   374      IfxCcu6_TimerRunStatus_stopped = 0,  /**< \brief Timer T1x is stopped. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   375      IfxCcu6_TimerRunStatus_running = 1   /**< \brief Timer T1x is running. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   376  } IfxCcu6_TimerRunStatus;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   377  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   378  /** \brief Defines how the trap flag TRPF can be cleared after the trap input condition is no longer valid (either by CTRAP = 1 or by TRPPEN = 0)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   379   * Definition in Ifx_CCU.TRPCTR.B.TRPM2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   380   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   381  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   382  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   383      IfxCcu6_TrapMode_automatic = 0,  /**< \brief Bit TRPF is cleared by HW */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   384      IfxCcu6_TrapMode_manual    = 1   /**< \brief Bit TRPF stays 0, It has to be cleared by SW by writing
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   385                                        * ISR.RTRPF = 1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   386  } IfxCcu6_TrapMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   387  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   388  /** \brief Defines the behavior of the selected outputs when leaving the trap state, after the trap condition has become inactive again\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   389   * Definition in Ifx_CCU.TRPCTR.B.TRPMx (x = 0, 1)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   390   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   391  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   392  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   393      IfxCcu6_TrapState_t12Sync   = 0, /**< \brief The trap state is left when a zero-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   394                                        * of T12 (while counting up) is detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   395      IfxCcu6_TrapState_t13Sync   = 1, /**< \brief The trap state is left when a zeromatch
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   396                                        * of T13 is detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   397      IfxCcu6_TrapState_immediate = 3  /**< \brief The trap state is left immediately without any synchronization to T12 or T13 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   398  } IfxCcu6_TrapState;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   399  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   400  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   401  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   402  /** \addtogroup IfxLld_Ccu6_Std_Operative
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   403   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   404  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   405  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   406  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   407  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   408  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   409  /** \brief Clears the counters of the Timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   410   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   411   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   412   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   413   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   414   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   415  IFX_INLINE void IfxCcu6_clearCounter(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   416  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   417  /** \brief Clears all the three dead-time counter channels to zero.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   418   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   419   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   420   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   421  IFX_INLINE void IfxCcu6_clearDeadTimeCounters(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   422  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   423  /** \brief Clears the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   424   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   425   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   426   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   427   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   428  IFX_INLINE void IfxCcu6_clearInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   429  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   430  /** \brief Clears the T12  One notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   431   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   432   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   433   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   434  IFX_INLINE void IfxCcu6_clearT12OneNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   435  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   436  /** \brief Clears the T12  period notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   437   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   438   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   439   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   440  IFX_INLINE void IfxCcu6_clearT12PeriodNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   441  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   442  /** \brief Clears the T13  compare notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   443   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   444   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   445   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   446  IFX_INLINE void IfxCcu6_clearT13CompareNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   447  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   448  /** \brief Returns the Timer pointer
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   449   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   450   * \return Timer pointer
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   451   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   452  IFX_INLINE volatile uint32 *IfxCcu6_getT12TimerPointer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   453  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   454  /** \brief Returns the status of module enabled or disabled
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   455   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   456   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   457   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   458  IFX_INLINE boolean IfxCcu6_isModuleEnabled(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   459  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   460  /** \brief Returns the status of T12 one notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   461   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   462   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   463   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   464  IFX_INLINE boolean IfxCcu6_isT12OneNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   465  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   466  /** \brief Returns the status of T12 period notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   467   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   468   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   469   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   470  IFX_INLINE boolean IfxCcu6_isT12PeriodNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   471  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   472  /** \brief Returns the status of T13 compare notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   473   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   474   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   475   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   476  IFX_INLINE boolean IfxCcu6_isT13CompareNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   477  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   478  /** \brief Sets the input event leading to a counting action of Timers (T12 / T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   479   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   480   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   481   * \param mode Input event leading to a counting action of the timer (T12 / T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   482   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   483   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   484  IFX_INLINE void IfxCcu6_setCountingInputMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_CountingInputMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   485  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   486  /** \brief Sets the current hall pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   487   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   488   * \param pattern Current hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   489   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   490   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   491  IFX_INLINE void IfxCcu6_setCurrentHallPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   492  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   493  /** \brief Sets the delay between switching from the passive state to the active state of the selected outputs (dead time)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   494   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   495   * \param value Value of the dead time to be induced
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   496   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   497   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   498  IFX_INLINE void IfxCcu6_setDeadTimeValue(Ifx_CCU6 *ccu6, uint8 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   499  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   500  /** \brief Sets the expected hall pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   501   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   502   * \param pattern Expected hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   503   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   504   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   505  IFX_INLINE void IfxCcu6_setExpectedHallPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   506  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   507  /** \brief Sets the event of signal T1xHR that can set the run bit T1xR by HW
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   508   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   509   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   510   * \param mode External trigger mode
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   511   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   512   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   513  IFX_INLINE void IfxCcu6_setExternalRunMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ExternalTriggerMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   514  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   515  /** \brief Sets source for the sampling of the Hall input pattern and the comparison to the current and the expected Hall pattern bit fields
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   516   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   517   * \param mode Hall sensor input trigger event
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   518   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   519   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   520  IFX_INLINE void IfxCcu6_setHallSensorTriggerMode(Ifx_CCU6 *ccu6, IfxCcu6_HallSensorTriggerMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   521  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   522  /** \brief Sets the input clock for timers (T12 or T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   523   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   524   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   525   * \param frequency Input clock for timers (T12 or T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   526   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   527   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   528  IFX_INLINE void IfxCcu6_setInputClockFrequency(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_TimerInputClock frequency);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   529  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   530  /** \brief Sets the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   531   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   532   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   533   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   534   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   535  IFX_INLINE void IfxCcu6_setInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   536  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   537  /** \brief Sets the output pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   538   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   539   * \param pattern Output pattern for the multichannel mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   540   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   541   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   542  IFX_INLINE void IfxCcu6_setMultiChannelPwmPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   543  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   544  /** \brief Sets the trigger request source (next multi-channel event) for the shadow transfer MCM_ST from MCMPS to MCMP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   545   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   546   * \param mode Trigger request source (next multi-channel event) for the shadow transfer MCM_ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   547   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   548   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   549  IFX_INLINE void IfxCcu6_setMultiChannelSwitchingMode(Ifx_CCU6 *ccu6, IfxCcu6_MultiChannelSwitchingSelect mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   550  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   551  /** \brief Sets the synchronization mechanism of the shadow transfer event MCM_ST\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   552   * if it has been requested before (flag R set by an event selected by SWSEL) and if MCMEN = 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   553   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   554   * \param sync Synchronization mechanism of the shadow transfer event MCM_ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   555   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   556   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   557  IFX_INLINE void IfxCcu6_setMultiChannelSwitchingSync(Ifx_CCU6 *ccu6, IfxCcu6_MultiChannelSwitchingSync sync);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   558  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   559  /** \brief Sets the state of the corresponding compare channel, that is considered to be the passive state
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   560   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   561   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   562   * \param state FALSE: passive state when CC6xST == 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   563   * TRUE : passive state when CC6xST == 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   564   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   565   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   566  IFX_INLINE void IfxCcu6_setOutputPassiveState(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut, boolean state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   567  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   568  /** \brief Enables / Disables the single shot mode of Timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   569   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   570   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   571   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   573   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   574  IFX_INLINE void IfxCcu6_setSingleShotModeEnable(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   575  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   576  /** \brief Sets the operating mode of the Timer12 capture/compare channels
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   577   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   578   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   579   * \param mode The operating mode for the T12 channels
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   580   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   581   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   582  IFX_INLINE void IfxCcu6_setT12ChannelMode(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, IfxCcu6_T12ChannelMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   583  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   584  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   585   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   586   * \param mode Operating mode of Timer 12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   587   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   588   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   589  IFX_INLINE void IfxCcu6_setT12CountMode(Ifx_CCU6 *ccu6, IfxCcu6_T12CountMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   590  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   591  /** \brief Sets the 16-bit counter value of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   592   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   593   * \param value Counter value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   595   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   596  IFX_INLINE void IfxCcu6_setT12CounterValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   597  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   598  /** \brief Sets the period value that leads Timer12 counter value to a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   599   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   600   * \param value Period value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   601   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   602   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   603  IFX_INLINE void IfxCcu6_setT12PeriodValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   604  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   605  /** \brief Sets the 16-bit compare value of Timer13 (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   606   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   607   * \param value Compare value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   609   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   610  IFX_INLINE void IfxCcu6_setT13CompareValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   611  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   612  /** \brief Sets the 16-bit counter value of Timer13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   613   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   614   * \param value counter value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   616   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   617  IFX_INLINE void IfxCcu6_setT13CounterValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   618  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   619  /** \brief Sets the period value that leads Timer13 counter value to a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   620   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   621   * \param value period value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   622   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   623   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   624  IFX_INLINE void IfxCcu6_setT13PeriodValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   625  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   626  /** \brief Sets the Timer13 trigger event direction
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   627   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   628   * \param direction T13 trigger event direction
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   630   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   631  IFX_INLINE void IfxCcu6_setT13TriggerEventDirection(Ifx_CCU6 *ccu6, IfxCcu6_T13TriggerDirection direction);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   632  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   633  /** \brief Sets the trigger event to start Timer13 (automatic set of T13R for synchronization to Timer12 compare signals)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   634   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   635   * \param mode The trigger event to start T13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   636   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   637   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   638  IFX_INLINE void IfxCcu6_setT13TriggerEventMode(Ifx_CCU6 *ccu6, IfxCcu6_T13TriggerEvent mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   639  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   640  /** \brief Sets the mode of clearing the trap flag TRPF after the trap input condition is no longer valid
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   641   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   642   * \param mode Trap mode selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   643   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   644   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   645  IFX_INLINE void IfxCcu6_setTrapMode(Ifx_CCU6 *ccu6, IfxCcu6_TrapMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   646  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   647  /** \brief Sets behaviour of the selected outputs when leaving the trap state after the trap condition has become inactive again.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   648   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   649   * \param state Trap state selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   650   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   651   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   652  IFX_INLINE void IfxCcu6_setTrapState(Ifx_CCU6 *ccu6, IfxCcu6_TrapState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   653  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   654  /** \brief starts the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   655   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   656   * \param t12 Timer12 start choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   657   * \param t13 Timer13 start choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   658   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   659   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   660  IFX_INLINE void IfxCcu6_startTimer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   661  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   662  /** \brief starts the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   663   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   664   * \param t12 Timer12 stop choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   665   * \param t13 Timer13 stop choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   666   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   667   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   668  IFX_INLINE void IfxCcu6_stopTimer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   669  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   670  /** \brief Updates the hall pattern (current hall, expected hall, moduleation output), in a single write
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   671   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   672   * \param currentHall Current hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   673   * \param expectedHall Expected hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   674   * \param output Output pattern for the multichannel mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   675   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   676   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   677  IFX_INLINE void IfxCcu6_updateHallPattern(Ifx_CCU6 *ccu6, uint8 currentHall, uint8 expectedHall, uint8 output);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   678  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   679  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   680  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   681  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   682  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   683  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   684   * \param ccu6 Specifies Ccu6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   685   * \param outputLine Output Line
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   686   * \param selectedTrigger Trigger selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   687   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   688   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   689  IFX_EXTERN void IfxCcu6_connectTrigger(Ifx_CCU6 *ccu6, IfxCcu6_TrigOut outputLine, IfxCcu6_TrigSel selectedTrigger);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   690  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   691  /** \brief Routes the interrupt node pointer to the selected service requests
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   692   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   693   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   694   * \param serviceRequest Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   696   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   697  IFX_EXTERN void IfxCcu6_routeInterruptNode(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source, IfxCcu6_ServiceRequest serviceRequest);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   698  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   699  /** \brief Sets the passive state level of the PWM outputs of the module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   700   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   701   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   702   * \param state FALSE: The passive level is 0.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   703   * TRUE : The passive level is 1.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   704   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   705   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   706  IFX_EXTERN void IfxCcu6_setOutputPassiveLevel(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut, boolean state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   707  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   708  /** \brief Sets software-control (independent set and clear conditions) for the Timer12 channel state bits CC6xST (x=0,1,2)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   709   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   710   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   711   * \param state capture/compare state selection (set / clear / toggle)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   712   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   713   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   714  IFX_EXTERN void IfxCcu6_setT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, IfxCcu6_CaptureCompareState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   715  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   716  /** \brief Sets the 16-bit compare value of Timer12 (writes into shadow registers)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   717   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   718   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   719   * \param value Compare value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   720   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   721   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   722  IFX_EXTERN void IfxCcu6_setT12CompareValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   723  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   724  /** \brief Sets the frequency and clock input of the Timer 12.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   725   * Caution: If desired frequency cannot achieved (by successive divisions by 2) :
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   726   * Then the nearest frequency value is set ( >= desired value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   727   * The resulting frequency is captured in the handler element : CaptureFrequency.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   728   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   729   * \param frequency Requested timer frequency in Hz
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   730   * \param period period value to be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   731   * \param countMode Counting mode of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   732   * \return Zero, if the function failed to fulfill requested frequency and resolution\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   733   * Positive, if the function can find settings close to the requested frequency and resolution above the requested
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   734   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   735  IFX_EXTERN float32 IfxCcu6_setT12Frequency(Ifx_CCU6 *ccu6, float32 frequency, Ifx_TimerValue period, IfxCcu6_T12CountMode countMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   736  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   737  /** \brief selects the actual input signal for the timer inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   738   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   739   * \param extInput External input signal for the Timer 12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   740   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   741   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   742  IFX_EXTERN void IfxCcu6_setT12InputSignal(Ifx_CCU6 *ccu6, IfxCcu6_T12hr_In *extInput);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   743  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   744  /** \brief Sets software-control (independent set and clear conditions) for the Timer13 channel state bits CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   745   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   746   * \param state capture/compare state selection (set / clear / toggle)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   747   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   748   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   749  IFX_EXTERN void IfxCcu6_setT13CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_CaptureCompareState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   750  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   751  /** \brief Sets the frequency and clock input of the Timer 13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   752   * Caution: If desired frequency cannot achieved (by successive divisions by 2) :
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   753   * Then the nearest frequency value is set ( >= desired value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   754   * The resulting frequency is captured in the handler element : captureFrequency.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   755   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   756   * \param frequency Requested timer frequency in Hz
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   757   * \param period period value to be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   758   * \return Zero, if the function failed to fulfill requested frequency and resolution\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   759   * Positive, if the function can find settings close to the requested frequency and resolution above the requested
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   760   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   761  IFX_EXTERN float32 IfxCcu6_setT13Frequency(Ifx_CCU6 *ccu6, float32 frequency, Ifx_TimerValue period);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   762  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   763  /** \brief selects the actual input signal for the timer inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   764   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   765   * \param extInput External input signal for the Timer 13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   766   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   767   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   768  IFX_EXTERN void IfxCcu6_setT13InputSignal(Ifx_CCU6 *ccu6, IfxCcu6_T13hr_In *extInput);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   769  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   770  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   771  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   772  /** \addtogroup IfxLld_Ccu6_Std_Utility
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   773   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   774  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   775  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   776  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   777  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   778  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   779  /** \brief Indicate the status of the dead time generation for each compare channel (0, 1, 2) of timer T12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   780   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   781   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   782   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   783   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   784  IFX_INLINE boolean IfxCcu6_getDeadTimeStatus(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   785  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   786  /** \brief Returns the value of the input Hall pattern of the Timer12 capture/compare channels CC6POS6x (x = 0, 1, 2)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   787   * that has been compared to the current and expected value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   788   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   789   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   790   * \return Status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   791   * TRUE : The input CCPOSx has been sampled as 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   792   * FALSE : The input CCPOSx has been sampled as 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   793   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   794  IFX_INLINE boolean IfxCcu6_getHallPatternSampleState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   795  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   796  /** \brief Gets the status of the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   797   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   798   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   799   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   800   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   801  IFX_INLINE boolean IfxCcu6_getInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   802  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   803  /** \brief indicates if the multi-channel mode functionality is available
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   804   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   805   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   806   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   807  IFX_INLINE boolean IfxCcu6_getMultiChannelModeAvailabilityStatus(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   808  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   809  /** \brief Gets the status of the shadow transfer request from MCMPS to MCMP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   810   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   811   * \return Status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   812   * FALSE: A shadow transfer MCM_ST is not requested\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   813   * TRUE:  A shadow transfer MCM_ST is requested, but has not yet been executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   814   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   815  IFX_INLINE boolean IfxCcu6_getMultiChannelPWMPatternShadowTransferStatus(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   816  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   817  /** \brief Returns the Timer (T12 / T13) shadow transfer enable status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   818   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   819   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   820   * \return Status (TRUE: enable / FALSE: disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   821   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   822  IFX_INLINE boolean IfxCcu6_getShadowTransferStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   823  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   824  /** \brief Returns the state of the Timer12 capture/compare channels CC6xST (x = 0, 1, 2)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   825   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   826   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   827   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   828   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   829  IFX_INLINE boolean IfxCcu6_getT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   830  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   831  /** \brief Returns the current counting direction of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   832   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   833   * \return direction (up / down)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   834   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   835  IFX_INLINE IfxCcu6_T12CountDirection IfxCcu6_getT12CountDirection(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   836  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   837  /** \brief Returns the state of the Timer13 capture/compare channel CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   838   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   839   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   840   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   841  IFX_INLINE boolean IfxCcu6_getT13CaptureCompareState(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   842  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   843  /** \brief indicates the Timer blocks (T12 / T13) availability
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   844   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   845   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   846   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   847   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   848  IFX_INLINE boolean IfxCcu6_getTimerAvailabilityStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   849  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   850  /** \brief Returns the Timer (T12 / T13) run status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   851   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   852   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   853   * \return Status (stopped / running)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   854   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   855  IFX_INLINE IfxCcu6_TimerRunStatus IfxCcu6_getTimerRunStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   856  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   857  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   858   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   859   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   860   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   861   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   862   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   863  IFX_INLINE boolean IfxCcu6_isModuleSuspended(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   864  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   865  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   866   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   867   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   868   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   869   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   870   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   871  IFX_INLINE void IfxCcu6_setSuspendMode(Ifx_CCU6 *ccu6, IfxCcu6_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   872  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   873  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   874  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   875  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   876  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   877  /** \brief Returns the module index of the selected CCU6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   878   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   879   * \return CCU6 module register address
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   880   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   881  IFX_EXTERN Ifx_CCU6 *IfxCcu6_getAddress(IfxCcu6_Index ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   882  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   883  /** \brief Returns the capture register value of the selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   884   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   885   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   886   * \return current value of the capture register of a selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   887   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   888  IFX_EXTERN uint32 IfxCcu6_getCaptureRegisterValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   889  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   890  /** \brief Returns the capture shadow register value of the selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   891   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   892   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   893   * \return current value of the capture shadow register of a selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   894   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   895  IFX_EXTERN uint32 IfxCcu6_getCaptureShadowRegisterValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   896  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   897  /** \brief Returns CCU6 index
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   898   * \param ccu6 Specifies the pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   899   * \return Returns index. returns -1 in case of unknown index
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   900   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   901  IFX_EXTERN IfxCcu6_Index IfxCcu6_getIndex(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   902  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   903  /** \brief Returns the service request register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   904   * \param ccu6 Specifies Ccu6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   905   * \param serviceRequest Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   906   * \return The service request register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   907   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   908  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxCcu6_getSrcAddress(Ifx_CCU6 *ccu6, IfxCcu6_ServiceRequest serviceRequest);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   909  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   910  /** \brief Returns the current value of the timer register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   911   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   912   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   913   * \return current value of the timer register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   914   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   915  IFX_EXTERN uint32 IfxCcu6_readTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   916  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   917  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   918  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   919  /** \addtogroup IfxLld_Ccu6_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   920   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   921  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   922  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   923  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   924  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   925  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   926  /** \brief Clears all Interrupt flags
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   927   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   928   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   929   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   930  IFX_INLINE void IfxCcu6_clearAllInterruptStatusFlags(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   931  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   932  /** \brief Disables the additional prescaler of 1/256 can be enabled for the prescaler of T12 or T13 to support higher clock frequencies
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   933   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   934   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   935   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   936   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   937  IFX_INLINE void IfxCcu6_disableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   938  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   939  /** \brief Disables the dead time generation for each compare channel (0, 1, 2) of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   940   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   941   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   942   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   943   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   944  IFX_INLINE void IfxCcu6_disableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   945  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   946  /** \brief Disables the delay of the source signal for the sampling of the Hall input pattern (selected by HSYNC)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   947   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   948   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   949   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   950  IFX_INLINE void IfxCcu6_disableDelayBypass(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   951  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   952  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   953   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   954   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   955   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   956   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   957  IFX_INLINE void IfxCcu6_disableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   958  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   959  /** \brief Sets multi channel mode unavailable, A write access to MCMOUTS is ignored
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   960   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   961   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   962   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   963  IFX_INLINE void IfxCcu6_disableMultiChannelMode(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   964  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   965  /** \brief Disables shadow transfers of the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   966   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   967   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   968   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   969   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   970   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   971  IFX_INLINE void IfxCcu6_disableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   972  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   973  /** \brief Disables the single shot-mode of Timers (T12 T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   974   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   975   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   976   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   977   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   978  IFX_INLINE void IfxCcu6_disableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   979  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   980  /** \brief Disables the Inversion of T13 signal for the modulation of the CC6x and COUT6x (x = 0, 1, 2) signals\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   981   * T13 output CC63_O is equal to CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   982   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   983   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   984   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   985  IFX_INLINE void IfxCcu6_disableT13InvertedModulation(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   986  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   987  /** \brief Sets Timer12 block unavailable, A write access to T12PR is ignored
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   988   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   989   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   990   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   991   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   992  IFX_INLINE void IfxCcu6_disableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   993  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   994  /** \brief Disables the trap functionality for the corresponding output signals
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   995   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   996   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   997   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   998   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   999  IFX_INLINE void IfxCcu6_disableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1000  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1001  /** \brief Disables the input (pin) function for the trap generation
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1002   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1003   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1004   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1005  IFX_INLINE void IfxCcu6_disableTrapPin(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1006  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1007  /** \brief Enables the additional prescaler of 1/256 can be enabled for the prescaler of T12 or T13 to support higher clock frequencies
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1008   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1009   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1010   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1011   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1012  IFX_INLINE void IfxCcu6_enableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1013  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1014  /** \brief Sets the single shot-mode of Timers (T12, T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1015   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1016   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1017   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1018   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1019   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1020  IFX_INLINE void IfxCcu6_enableCountEvent(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1021  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1022  /** \brief Enables the dead time generation for each compare channel (0, 1, 2) of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1023   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1024   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1025   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1026   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1027  IFX_INLINE void IfxCcu6_enableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1028  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1029  /** \brief Enables the delay of the source signal for the sampling of the Hall input pattern (selected by HSYNC) by the Dead-Time Counter 0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1030   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1031   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1032   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1033  IFX_INLINE void IfxCcu6_enableDelayBypass(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1034  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1035  /** \brief Sets HP_ST immediately to update bit fields EXPH and CURH by EXPHS and CURHS
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1036   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1037   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1038   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1039  IFX_INLINE void IfxCcu6_enableHallPatternShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1040  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1041  /** \brief Enables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1042   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1043   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1044   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1045   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1046  IFX_INLINE void IfxCcu6_enableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1047  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1048  /** \brief Sets multi channel mode available, A write access to MCMOUTS is executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1049   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1050   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1051   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1052  IFX_INLINE void IfxCcu6_enableMultiChannelMode(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1053  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1054  /** \brief Enables the Multi Channel Mode Availability
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1055   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1056   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1057   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1058  IFX_INLINE void IfxCcu6_enableMultiChannelModeAvailability(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1059  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1060  /** \brief Sets MCM_ST immediately to update bit field MCMP by the value of MCMPS.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1061   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1062   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1063   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1064  IFX_INLINE void IfxCcu6_enableMultiChannelPwmPatternShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1065  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1066  /** \brief Enables the shadow transfer T12_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1067   * becomes set while a T12 one match is detected while counting down
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1068   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1069   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1070   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1071  IFX_INLINE void IfxCcu6_enableMultiChannelT12DowncountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1072  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1073  /** \brief Enables the shadow transfer T12_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1074   * becomes set while a T12 period match is detected while counting up
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1075   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1076   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1077   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1078  IFX_INLINE void IfxCcu6_enableMultiChannelT12UpcountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1079  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1080  /** \brief Enables the shadow transfer T13_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1081   * becomes set while a T13 period match is detected
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1082   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1083   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1084   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1085  IFX_INLINE void IfxCcu6_enableMultiChannelT13UpcountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1086  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1087  /** \brief Enables shadow transfers of the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1088   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1089   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1090   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1091   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1092   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1093  IFX_INLINE void IfxCcu6_enableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1094  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1095  /** \brief Enables the single shot-mode of Timers (T12 T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1096   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1097   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1098   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1099   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1100  IFX_INLINE void IfxCcu6_enableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1101  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1102  /** \brief Enables the Inversion of T13 signal for the modulation of the CC6x and COUT6x (x = 0, 1, 2) signals\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1103   * T13 output CC63_O is equal to CC63ST.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1104   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1105   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1106   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1107  IFX_INLINE void IfxCcu6_enableT13InvertedModulation(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1108  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1109  /** \brief Sets Timer12 block available, A write access to T12PR is executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1110   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1111   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1112   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1113   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1114  IFX_INLINE void IfxCcu6_enableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1115  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1116  /** \brief Enables the trap functionality for the corresponding output signals
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1117   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1118   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1119   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1120   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1121  IFX_INLINE void IfxCcu6_enableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1122  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1123  /** \brief Enables the input (pin) function for the trap generation
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1124   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1125   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1126   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1127  IFX_INLINE void IfxCcu6_enableTrapPin(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1128  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1129  /** \brief selects the actual input signal for the capture compare inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1130   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1131   * \param input Input selection, ( CC6x capture input / CTRAP input / CCPOSx input  )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1132   * \param signal selection of actual input signal for the module inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1133   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1134   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1135  IFX_INLINE void IfxCcu6_setCaptureCompareInputSignal(Ifx_CCU6 *ccu6, IfxCcu6_CaptureCompareInput input, IfxCcu6_CaptureCompareInputSignal signal);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1136  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1137  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1138  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1139  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1140  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1141  /** \brief Disables the modulation of the corresponding output signal by PWM pattern generated by the timers T12 and T13.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1142   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1143   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1144   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1145   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1146   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1147  IFX_EXTERN void IfxCcu6_disableModulationOutput(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1148  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1149  /** \brief Disables the selected CCU6 kernel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1150   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1151   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1152   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1153  IFX_EXTERN void IfxCcu6_disableModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1154  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1155  /** \brief Enables the modulation of the corresponding output signal by PWM pattern generated by the timers T12 and T13.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1156   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1157   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1158   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1159   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1160   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1161  IFX_EXTERN void IfxCcu6_enableModulationOutput(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1162  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1163  /** \brief Enables the selected CCU6 kernel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1164   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1165   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1166   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1167  IFX_EXTERN void IfxCcu6_enableModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1168  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1169  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1170  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1171  /** \addtogroup IfxLld_Ccu6_Std_IO
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1172   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1173  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1174  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1175  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1176  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1177  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1178  /** \brief Initialises a CC60 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1179   * \param cc60In CC60 capture input CC60IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1180   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1181   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1182   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1183  IFX_INLINE void IfxCcu6_initCc60InPin(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1184  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1185  /** \brief Initialises a CC60 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1186   * \param cc60Out CC60 compare output CC0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1187   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1188   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1189   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1190   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1191  IFX_INLINE void IfxCcu6_initCc60OutPin(const IfxCcu6_Cc60_Out *cc60Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1192  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1193  /** \brief Initialises a CC61 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1194   * \param cc61In CC61 capture input CC61IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1195   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1196   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1197   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1198  IFX_INLINE void IfxCcu6_initCc61InPin(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1199  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1200  /** \brief Initialises a CC61 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1201   * \param cc61Out CC61 compare output CC1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1202   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1203   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1204   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1205   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1206  IFX_INLINE void IfxCcu6_initCc61OutPin(const IfxCcu6_Cc61_Out *cc61Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1207  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1208  /** \brief Initialises a CC62 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1209   * \param cc62In CC62 capture input CC62IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1210   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1211   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1212   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1213  IFX_INLINE void IfxCcu6_initCc62InPin(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1214  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1215  /** \brief Initialises a CC62 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1216   * \param cc62Out CC62 compare output CC2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1217   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1218   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1219   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1220   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1221  IFX_INLINE void IfxCcu6_initCc62OutPin(const IfxCcu6_Cc62_Out *cc62Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1222  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1223  /** \brief Initialises a CCPOS0 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1224   * \param ccpos0 CC60 capture input CCPOS0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1225   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1228  IFX_INLINE void IfxCcu6_initCcpos0Pin(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1229  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1230  /** \brief Initialises a CCPOS1 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1231   * \param ccpos1 CC61 capture input CCPOS1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1232   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1233   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1235  IFX_INLINE void IfxCcu6_initCcpos1Pin(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1236  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1237  /** \brief Initialises a CCPOS0 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1238   * \param ccpos2 CC62 capture input CCPOS2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1239   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1242  IFX_INLINE void IfxCcu6_initCcpos2Pin(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1243  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1244  /** \brief Initialises a COUT60 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1245   * \param cout60 CC60 compare output COUT0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1246   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1247   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1248   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1249   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1250  IFX_INLINE void IfxCcu6_initCout60Pin(const IfxCcu6_Cout60_Out *cout60, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1251  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1252  /** \brief Initialises a COUT61 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1253   * \param cout61 CC61 compare output COUT1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1254   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1255   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1256   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1257   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1258  IFX_INLINE void IfxCcu6_initCout61Pin(const IfxCcu6_Cout61_Out *cout61, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1259  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1260  /** \brief Initialises a COUT62 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1261   * \param cout62 CC62 compare output COUT2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1262   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1263   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1264   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1265   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1266  IFX_INLINE void IfxCcu6_initCout62Pin(const IfxCcu6_Cout62_Out *cout62, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1267  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1268  /** \brief Initialises a COUT63 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1269   * \param cout63 CC63 compare output COUT3
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1270   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1271   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1272   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1273   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1274  IFX_INLINE void IfxCcu6_initCout63Pin(const IfxCcu6_Cout63_Out *cout63, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1275  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1276  /** \brief Initialises a CTRAP input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1277   * \param ctrap CTRAP input
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1278   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1279   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1280   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1281  IFX_INLINE void IfxCcu6_initCtrapPin(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1282  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1283  /** \brief Initialises a T12HR input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1284   * \param t12hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1285   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1286   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1287   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1288  IFX_INLINE void IfxCcu6_initT12hrPin(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1289  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1290  /** \brief Initialises a T13HR input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1291   * \param t13hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1292   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1293   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1294   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1295  IFX_INLINE void IfxCcu6_initT13hrPin(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1296  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1297  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1298  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1299  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1300  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1301  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1302  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1303  /** \brief Provides functionality for both setting of CC60 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1304   * \param cc60In CC60 capture input CC60IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1305   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1306   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1307   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1308   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1309  IFX_INLINE void IfxCcu6_initCc60InPinWithPadLevel(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1310  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1311  /** \brief Provides functionality for both setting of CC61 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1312   * \param cc61In CC61 capture input CC61IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1313   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1314   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1315   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1316   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1317  IFX_INLINE void IfxCcu6_initCc61InPinWithPadLevel(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1318  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1319  /** \brief Provides functionality for both setting of CC62 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1320   * \param cc62In CC62 capture input CC62IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1321   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1322   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1323   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1324   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1325  IFX_INLINE void IfxCcu6_initCc62InPinWithPadLevel(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1326  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1327  /** \brief Provides functionality for both setting of CCPOS0 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1328   * \param ccpos0 CC60 capture input CCPOS0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1329   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1330   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1331   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1332   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1333  IFX_INLINE void IfxCcu6_initCcpos0PinWithPadLevel(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1334  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1335  /** \brief Provides functionality for both setting of CCPOS1 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1336   * \param ccpos1 CC61 capture input CCPOS1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1337   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1338   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1339   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1340   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1341  IFX_INLINE void IfxCcu6_initCcpos1PinWithPadLevel(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1342  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1343  /** \brief Provides functionality for both setting of CCPOS2 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1344   * \param ccpos2 CC62 capture input CCPOS2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1345   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1346   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1347   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1348   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1349  IFX_INLINE void IfxCcu6_initCcpos2PinWithPadLevel(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1350  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1351  /** \brief Provides functionality for both setting of CTRAP pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1352   * \param ctrap CTRAP input
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1353   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1354   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1355   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1356   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1357  IFX_INLINE void IfxCcu6_initCtrapPinWithPadLevel(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1358  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1359  /** \brief Provides functionality for both setting of T12HR pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1360   * \param t12hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1361   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1362   * \param padDriver Pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1363   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1364   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1365  IFX_INLINE void IfxCcu6_initT12hrPinWithPadLevel(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1366  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1367  /** \brief Provides functionality for both setting of T13HR pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1368   * \param t13hrIn Timer 13 HR input T13HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1369   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1370   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1371   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1372   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1373  IFX_INLINE void IfxCcu6_initT13hrPinWithPadLevel(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1374  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1375  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1376   * \param ccu6 pointer to CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1377   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1378   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1379   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1380  IFX_INLINE void IfxCcu6_setSleepMode(Ifx_CCU6 *ccu6, IfxCcu6_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1381  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1382  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1383  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1384  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1385  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1386  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1387   * \param ccu6 pointer to ccu6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1388   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1389   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1390  IFX_EXTERN void IfxCcu6_resetModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1391  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1392  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1393  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1394  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1395  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1396  IFX_INLINE void IfxCcu6_clearAllInterruptStatusFlags(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1397  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1398      ccu6->ISR.U = 0xFFFF;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1399  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1400  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1401  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1402  IFX_INLINE void IfxCcu6_clearCounter(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1403  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1404      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1405      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1406      tctr4.B.T12RES = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1407      tctr4.B.T13RES = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1408      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1409  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1410  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1411  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1412  IFX_INLINE void IfxCcu6_clearDeadTimeCounters(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1413  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1414      ccu6->TCTR4.B.DTRES = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1415  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1416  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1417  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1418  IFX_INLINE void IfxCcu6_clearInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1419  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1420      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1421      ccu6->ISR.U = mask;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1422  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1423  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1424  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1425  IFX_INLINE void IfxCcu6_clearT12OneNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1426  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1427      ccu6->ISR.B.RT12OM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1428  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1429  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1430  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1431  IFX_INLINE void IfxCcu6_clearT12PeriodNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1432  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1433      ccu6->ISR.B.RT12PM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1434  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1435  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1436  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1437  IFX_INLINE void IfxCcu6_clearT13CompareNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1438  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1439      ccu6->ISR.B.RT13CM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1440  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1441  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1442  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1443  IFX_INLINE void IfxCcu6_disableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1444  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1445      uint32 shift = ((timer * 8) + 3);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1446      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1447      ccu6->TCTR0.U = ccu6->TCTR0.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1448  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1449  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1450  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1451  IFX_INLINE void IfxCcu6_disableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1452  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1453      uint32 shift = (8 + channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1454      uint32 mask  = (1 << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1455      ccu6->T12DTC.U = ccu6->T12DTC.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1456  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1457  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1458  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1459  IFX_INLINE void IfxCcu6_disableDelayBypass(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1460  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1461      ccu6->T12MSEL.B.DBYP = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1462  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1463  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1464  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1465  IFX_INLINE void IfxCcu6_disableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1466  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1467      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1468      ccu6->IEN.U = ccu6->IEN.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1469  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1470  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1471  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1472  IFX_INLINE void IfxCcu6_disableMultiChannelMode(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1473  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1474      ccu6->MODCTR.B.MCMEN = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1475  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1476  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1477  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1478  IFX_INLINE void IfxCcu6_disableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1479  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1480      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1481      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1482      tctr4.B.T12STD = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1483      tctr4.B.T13STD = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1484      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1485  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1486  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1487  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1488  IFX_INLINE void IfxCcu6_disableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1489  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1490      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1491      ccu6->TCTR2.U = ccu6->TCTR2.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1492  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1493  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1494  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1495  IFX_INLINE void IfxCcu6_disableT13InvertedModulation(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1496  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1497      ccu6->CMPSTAT.B.T13IM = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1498  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1499  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1500  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1501  IFX_INLINE void IfxCcu6_disableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1502  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1503      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1504      ccu6->MCFG.U = ccu6->MCFG.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1505  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1506  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1507  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1508  IFX_INLINE void IfxCcu6_disableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1509  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1510      uint32 shift = (8 + channelOut);    // offset at location TRPCTR.8 for output CC60
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1511      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1512      ccu6->TRPCTR.U = ccu6->TRPCTR.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1513  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1514  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1515  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1516  IFX_INLINE void IfxCcu6_disableTrapPin(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1517  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1518      ccu6->TRPCTR.B.TRPPEN = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1519  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1520  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1521  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1522  IFX_INLINE void IfxCcu6_enableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1523  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1524      uint32 shift = ((timer * 8) + 3);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1525      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1526      ccu6->TCTR0.U = ccu6->TCTR0.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1527  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1528  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1529  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1530  IFX_INLINE void IfxCcu6_enableCountEvent(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1531  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1532      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1533      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1534      tctr4.B.T12CNT = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1535      tctr4.B.T13CNT = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1536      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1537  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1538  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1539  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1540  IFX_INLINE void IfxCcu6_enableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1541  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1542      uint32 shift = (8 + channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1543      uint32 mask  = (1 << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1544      ccu6->T12DTC.U = ccu6->T12DTC.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1545  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1546  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1547  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1548  IFX_INLINE void IfxCcu6_enableDelayBypass(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1549  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1550      ccu6->T12MSEL.B.DBYP = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1551  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1552  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1553  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1554  IFX_INLINE void IfxCcu6_enableHallPatternShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1555  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1556      ccu6->MCMOUTS.B.STRHP = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1557  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1558  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1559  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1560  IFX_INLINE void IfxCcu6_enableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1561  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1562      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1563      ccu6->IEN.U = ccu6->IEN.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1564  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1565  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1566  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1567  IFX_INLINE void IfxCcu6_enableMultiChannelMode(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1568  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1569      ccu6->MODCTR.B.MCMEN = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1570  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1571  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1572  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1573  IFX_INLINE void IfxCcu6_enableMultiChannelModeAvailability(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1574  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1575      ccu6->MCFG.B.MCM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1576  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1577  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1578  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1579  IFX_INLINE void IfxCcu6_enableMultiChannelPwmPatternShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1580  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1581      ccu6->MCMOUTS.B.STRMCM = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1582  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1583  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1584  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1585  IFX_INLINE void IfxCcu6_enableMultiChannelT12DowncountingShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1586  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1587      ccu6->MCMCTR.B.STE12D = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1588  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1589  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1590  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1591  IFX_INLINE void IfxCcu6_enableMultiChannelT12UpcountingShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1592  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1593      ccu6->MCMCTR.B.STE12U = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1594  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1595  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1596  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1597  IFX_INLINE void IfxCcu6_enableMultiChannelT13UpcountingShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1598  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1599      ccu6->MCMCTR.B.STE13U = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1600  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1601  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1602  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1603  IFX_INLINE void IfxCcu6_enableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1604  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1605      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1606      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1607      tctr4.B.T12STR = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1608      tctr4.B.T13STR = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1609      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1610  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1611  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1612  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1613  IFX_INLINE void IfxCcu6_enableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1614  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1615      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1616      ccu6->TCTR2.U = ccu6->TCTR2.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1617  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1618  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1619  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1620  IFX_INLINE void IfxCcu6_enableT13InvertedModulation(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1621  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1622      ccu6->CMPSTAT.B.T13IM = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1623  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1624  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1625  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1626  IFX_INLINE void IfxCcu6_enableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1627  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1628      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1629      ccu6->MCFG.U = ccu6->MCFG.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1630  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1631  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1632  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1633  IFX_INLINE void IfxCcu6_enableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1634  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1635      uint32 shift = (8 + channelOut);    // offset at location TRPCTR.8 for output CC60
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1636      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1637      ccu6->TRPCTR.U = ccu6->TRPCTR.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1638  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1639  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1640  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1641  IFX_INLINE void IfxCcu6_enableTrapPin(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1642  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1643      ccu6->TRPCTR.B.TRPPEN = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1644  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1645  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1646  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1647  IFX_INLINE boolean IfxCcu6_getDeadTimeStatus(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1648  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1649      uint32 shift = (12 + channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1650      uint32 mask  = 1 << shift;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1651      return (ccu6->T12DTC.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1652  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1653  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1654  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1655  IFX_INLINE boolean IfxCcu6_getHallPatternSampleState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1656  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1657      uint32 shift = (channel + 3);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1658      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1659      return (ccu6->CMPSTAT.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1660  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1661  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1662  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1663  IFX_INLINE boolean IfxCcu6_getInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1664  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1665      uint32 shift = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1666      return (ccu6->IS.U & shift) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1668  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1669  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1670  IFX_INLINE boolean IfxCcu6_getMultiChannelModeAvailabilityStatus(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1672      return ccu6->MCFG.B.MCM != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1674  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1675  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1676  IFX_INLINE boolean IfxCcu6_getMultiChannelPWMPatternShadowTransferStatus(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1678      return ccu6->MCMOUT.B.R != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1680  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1681  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1682  IFX_INLINE boolean IfxCcu6_getShadowTransferStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1684      uint32 shift = ((timer * 8) + 5);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1685      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1686      return (ccu6->TCTR0.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1687  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1688  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1689  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1690  IFX_INLINE boolean IfxCcu6_getT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1691  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1692      uint32 mask = (1U << channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1693      return (ccu6->CMPSTAT.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1694  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1695  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1696  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1697  IFX_INLINE IfxCcu6_T12CountDirection IfxCcu6_getT12CountDirection(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1698  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1699      return (IfxCcu6_T12CountDirection)((ccu6->TCTR0.B.CDIR) ? TRUE : FALSE);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1700  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1701  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1702  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1703  IFX_INLINE volatile uint32 *IfxCcu6_getT12TimerPointer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1704  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1705      return (volatile uint32 *)&ccu6->T12PR;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1706  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1707  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1708  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1709  IFX_INLINE boolean IfxCcu6_getT13CaptureCompareState(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1710  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1711      return ccu6->CMPSTAT.B.CC63ST != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1712  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1713  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1714  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1715  IFX_INLINE boolean IfxCcu6_getTimerAvailabilityStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1716  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1717      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1718      return (ccu6->MCFG.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1719  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1720  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1721  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1722  IFX_INLINE IfxCcu6_TimerRunStatus IfxCcu6_getTimerRunStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1723  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1724      uint32 shift = ((timer * 8) + 4);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1725      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1726      return (IfxCcu6_TimerRunStatus)((ccu6->TCTR0.U & mask) ? TRUE : FALSE);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1728  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1729  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1730  IFX_INLINE void IfxCcu6_initCc60InPin(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1732      IfxPort_setPinModeInput(cc60In->pin.port, cc60In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1733      IfxCcu6_setCaptureCompareInputSignal(cc60In->module, IfxCcu6_CaptureCompareInput_cC60, (IfxCcu6_CaptureCompareInputSignal)cc60In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1734  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1735  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1736  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1737  IFX_INLINE void IfxCcu6_initCc60InPinWithPadLevel(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1738  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1739      IfxPort_setPinModeInput(cc60In->pin.port, cc60In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1740      IfxPort_setPinPadDriver(cc60In->pin.port, cc60In->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1741      IfxCcu6_setCaptureCompareInputSignal(cc60In->module, IfxCcu6_CaptureCompareInput_cC60, (IfxCcu6_CaptureCompareInputSignal)cc60In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1742  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1743  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1744  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1745  IFX_INLINE void IfxCcu6_initCc60OutPin(const IfxCcu6_Cc60_Out *cc60Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1746  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1747      IfxPort_setPinModeOutput(cc60Out->pin.port, cc60Out->pin.pinIndex, outputMode, cc60Out->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1748      IfxPort_setPinPadDriver(cc60Out->pin.port, cc60Out->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1749  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1750  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1751  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1752  IFX_INLINE void IfxCcu6_initCc61InPin(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1753  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1754      IfxPort_setPinModeInput(cc61In->pin.port, cc61In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1755      IfxCcu6_setCaptureCompareInputSignal(cc61In->module, IfxCcu6_CaptureCompareInput_cC61, (IfxCcu6_CaptureCompareInputSignal)cc61In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1756  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1757  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1758  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1759  IFX_INLINE void IfxCcu6_initCc61InPinWithPadLevel(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1760  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1761      IfxPort_setPinModeInput(cc61In->pin.port, cc61In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1762      IfxPort_setPinPadDriver(cc61In->pin.port, cc61In->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1763      IfxCcu6_setCaptureCompareInputSignal(cc61In->module, IfxCcu6_CaptureCompareInput_cC61, (IfxCcu6_CaptureCompareInputSignal)cc61In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1764  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1765  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1766  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1767  IFX_INLINE void IfxCcu6_initCc61OutPin(const IfxCcu6_Cc61_Out *cc61Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1768  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1769      IfxPort_setPinModeOutput(cc61Out->pin.port, cc61Out->pin.pinIndex, outputMode, cc61Out->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1770      IfxPort_setPinPadDriver(cc61Out->pin.port, cc61Out->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1771  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1772  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1773  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1774  IFX_INLINE void IfxCcu6_initCc62InPin(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1775  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1776      IfxPort_setPinModeInput(cc62In->pin.port, cc62In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1777      IfxCcu6_setCaptureCompareInputSignal(cc62In->module, IfxCcu6_CaptureCompareInput_cC62, (IfxCcu6_CaptureCompareInputSignal)cc62In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1778  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1779  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1780  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1781  IFX_INLINE void IfxCcu6_initCc62InPinWithPadLevel(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1782  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1783      IfxPort_setPinModeInput(cc62In->pin.port, cc62In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1784      IfxPort_setPinPadDriver(cc62In->pin.port, cc62In->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1785      IfxCcu6_setCaptureCompareInputSignal(cc62In->module, IfxCcu6_CaptureCompareInput_cC62, (IfxCcu6_CaptureCompareInputSignal)cc62In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1786  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1787  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1788  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1789  IFX_INLINE void IfxCcu6_initCc62OutPin(const IfxCcu6_Cc62_Out *cc62Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1790  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1791      IfxPort_setPinModeOutput(cc62Out->pin.port, cc62Out->pin.pinIndex, outputMode, cc62Out->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1792      IfxPort_setPinPadDriver(cc62Out->pin.port, cc62Out->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1794  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1795  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1796  IFX_INLINE void IfxCcu6_initCcpos0Pin(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1798      IfxPort_setPinModeInput(ccpos0->pin.port, ccpos0->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1799      IfxCcu6_setCaptureCompareInputSignal(ccpos0->module, IfxCcu6_CaptureCompareInput_cCPOS0, (IfxCcu6_CaptureCompareInputSignal)ccpos0->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1800  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1801  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1802  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1803  IFX_INLINE void IfxCcu6_initCcpos0PinWithPadLevel(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1804  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1805      IfxPort_setPinModeInput(ccpos0->pin.port, ccpos0->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1806      IfxPort_setPinPadDriver(ccpos0->pin.port, ccpos0->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1807      IfxCcu6_setCaptureCompareInputSignal(ccpos0->module, IfxCcu6_CaptureCompareInput_cCPOS0, (IfxCcu6_CaptureCompareInputSignal)ccpos0->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1808  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1809  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1810  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1811  IFX_INLINE void IfxCcu6_initCcpos1Pin(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1812  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1813      IfxPort_setPinModeInput(ccpos1->pin.port, ccpos1->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1814      IfxCcu6_setCaptureCompareInputSignal(ccpos1->module, IfxCcu6_CaptureCompareInput_cCPOS1, (IfxCcu6_CaptureCompareInputSignal)ccpos1->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1815  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1816  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1817  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1818  IFX_INLINE void IfxCcu6_initCcpos1PinWithPadLevel(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1819  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1820      IfxPort_setPinModeInput(ccpos1->pin.port, ccpos1->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1821      IfxPort_setPinPadDriver(ccpos1->pin.port, ccpos1->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1822      IfxCcu6_setCaptureCompareInputSignal(ccpos1->module, IfxCcu6_CaptureCompareInput_cCPOS1, (IfxCcu6_CaptureCompareInputSignal)ccpos1->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1824  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1825  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1826  IFX_INLINE void IfxCcu6_initCcpos2Pin(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1828      IfxPort_setPinModeInput(ccpos2->pin.port, ccpos2->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1829      IfxCcu6_setCaptureCompareInputSignal(ccpos2->module, IfxCcu6_CaptureCompareInput_cCPOS2, (IfxCcu6_CaptureCompareInputSignal)ccpos2->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1830  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1831  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1832  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1833  IFX_INLINE void IfxCcu6_initCcpos2PinWithPadLevel(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1834  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1835      IfxPort_setPinModeInput(ccpos2->pin.port, ccpos2->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1836      IfxPort_setPinPadDriver(ccpos2->pin.port, ccpos2->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1837      IfxCcu6_setCaptureCompareInputSignal(ccpos2->module, IfxCcu6_CaptureCompareInput_cCPOS2, (IfxCcu6_CaptureCompareInputSignal)ccpos2->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1838  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1839  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1840  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1841  IFX_INLINE void IfxCcu6_initCout60Pin(const IfxCcu6_Cout60_Out *cout60, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1842  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1843      IfxPort_setPinModeOutput(cout60->pin.port, cout60->pin.pinIndex, outputMode, cout60->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1844      IfxPort_setPinPadDriver(cout60->pin.port, cout60->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1845  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1846  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1847  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1848  IFX_INLINE void IfxCcu6_initCout61Pin(const IfxCcu6_Cout61_Out *cout61, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1849  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1850      IfxPort_setPinModeOutput(cout61->pin.port, cout61->pin.pinIndex, outputMode, cout61->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1851      IfxPort_setPinPadDriver(cout61->pin.port, cout61->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1852  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1853  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1854  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1855  IFX_INLINE void IfxCcu6_initCout62Pin(const IfxCcu6_Cout62_Out *cout62, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1856  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1857      IfxPort_setPinModeOutput(cout62->pin.port, cout62->pin.pinIndex, outputMode, cout62->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1858      IfxPort_setPinPadDriver(cout62->pin.port, cout62->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1860  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1861  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1862  IFX_INLINE void IfxCcu6_initCout63Pin(const IfxCcu6_Cout63_Out *cout63, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1864      IfxPort_setPinModeOutput(cout63->pin.port, cout63->pin.pinIndex, outputMode, cout63->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1865      IfxPort_setPinPadDriver(cout63->pin.port, cout63->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1866  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1867  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1868  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1869  IFX_INLINE void IfxCcu6_initCtrapPin(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1870  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1871      IfxPort_setPinModeInput(ctrap->pin.port, ctrap->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1872      IfxCcu6_setCaptureCompareInputSignal(ctrap->module, IfxCcu6_CaptureCompareInput_cTRAP, (IfxCcu6_CaptureCompareInputSignal)ctrap->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1873  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1874  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1875  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1876  IFX_INLINE void IfxCcu6_initCtrapPinWithPadLevel(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1877  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1878      IfxPort_setPinModeInput(ctrap->pin.port, ctrap->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1879      IfxPort_setPinPadDriver(ctrap->pin.port, ctrap->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1880      IfxCcu6_setCaptureCompareInputSignal(ctrap->module, IfxCcu6_CaptureCompareInput_cTRAP, (IfxCcu6_CaptureCompareInputSignal)ctrap->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1881  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1882  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1883  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1884  IFX_INLINE void IfxCcu6_initT12hrPin(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1885  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1886      IfxPort_setPinModeInput(t12hrIn->pin.port, t12hrIn->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1887      IfxCcu6_setT12InputSignal(t12hrIn->module, t12hrIn);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1888  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1889  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1890  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1891  IFX_INLINE void IfxCcu6_initT12hrPinWithPadLevel(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1892  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1893      IfxPort_setPinModeInput(t12hrIn->pin.port, t12hrIn->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1894      IfxPort_setPinPadDriver(t12hrIn->pin.port, t12hrIn->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1895      IfxCcu6_setT12InputSignal(t12hrIn->module, t12hrIn);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1896  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1897  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1898  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1899  IFX_INLINE void IfxCcu6_initT13hrPin(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1900  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1901      IfxPort_setPinModeInput(t13hrIn->pin.port, t13hrIn->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1902      IfxCcu6_setT13InputSignal(t13hrIn->module, t13hrIn);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1903  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1904  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1905  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1906  IFX_INLINE void IfxCcu6_initT13hrPinWithPadLevel(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1907  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1908      IfxPort_setPinModeInput(t13hrIn->pin.port, t13hrIn->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1909      IfxPort_setPinPadDriver(t13hrIn->pin.port, t13hrIn->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1910      IfxCcu6_setT13InputSignal(t13hrIn->module, t13hrIn);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1911  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1912  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1913  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1914  IFX_INLINE boolean IfxCcu6_isModuleEnabled(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1915  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1916      return ccu6->CLC.B.DISS == 0;
	ld.bu	d15,[a15]
.L393:
	jz.t	d15:1,.L7
.L649:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   110      {}
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   111  }
	ret
.L389:
	
__IfxCcu6_disableModule_function_end:
	.size	IfxCcu6_disableModule,__IfxCcu6_disableModule_function_end-IfxCcu6_disableModule
.L205:
	; End of function
	
	.sdecl	'.text.IfxCcu6.IfxCcu6_enableModulationOutput',code,cluster('IfxCcu6_enableModulationOutput')
	.sect	'.text.IfxCcu6.IfxCcu6_enableModulationOutput'
	.align	2
	
	.global	IfxCcu6_enableModulationOutput

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   112  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   113  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   114  void IfxCcu6_enableModulationOutput(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ChannelOut channelOut)
; Function IfxCcu6_enableModulationOutput
.L77:
IfxCcu6_enableModulationOutput:	.type	func

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   115  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   116      uint32 shift, mask;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   117  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   118      if (timer != IfxCcu6_TimerId_t13)
	jeq	d4,#1,.L8
.L654:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   119      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   120          if (channelOut != IfxCcu6_ChannelOut_cout3)
	jeq	d5,#6,.L9
.L655:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   121          {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   122              shift          = channelOut;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   123              mask           = (1 << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   124              ccu6->MODCTR.U = ccu6->MODCTR.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   125          }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   126          else
	j	.L10
.L8:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   127          {}
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   128      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   129      else
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   130      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   131          if (channelOut != IfxCcu6_ChannelOut_cout3)
	jeq	d5,#6,.L11
.L656:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   132          {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   133              shift          = channelOut + 8;
	add	d5,d5,#8
.L10:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   134              mask           = (1 << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   135              ccu6->MODCTR.U = ccu6->MODCTR.U | (mask);
	mov	d0,#1
	ld.w	d15,[a4]128
.L657:
	sha	d0,d0,d5
.L658:
	or	d15,d0
	st.w	[a4]128,d15
.L9:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   136          }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   137          else
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   138          {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   139              ccu6->MODCTR.B.ECT13O = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   140          }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   141      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   142  }
	ret
.L11:
	ld.bu	d15,[a4]129
.L659:
	or	d15,#128
	st.b	[a4]129,d15
.L660:
	ret
.L397:
	
__IfxCcu6_enableModulationOutput_function_end:
	.size	IfxCcu6_enableModulationOutput,__IfxCcu6_enableModulationOutput_function_end-IfxCcu6_enableModulationOutput
.L210:
	; End of function
	
	.sdecl	'.text.IfxCcu6.IfxCcu6_enableModule',code,cluster('IfxCcu6_enableModule')
	.sect	'.text.IfxCcu6.IfxCcu6_enableModule'
	.align	2
	
	.global	IfxCcu6_enableModule

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   143  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   144  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   145  void IfxCcu6_enableModule(Ifx_CCU6 *ccu6)
; Function IfxCcu6_enableModule
.L79:
IfxCcu6_enableModule:	.type	func
	mov.aa	a15,a4
.L418:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   146  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   147      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L417:
	mov	d15,d2
.L420:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   148      IfxScuWdt_clearCpuEndinit(passwd);
	mov	d4,d15
	call	IfxScuWdt_clearCpuEndinit
.L419:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   149      ccu6->CLC.B.DISR = 0U; /* Enable module */
	ld.bu	d0,[a15]
.L665:
	insert	d0,d0,#0,#0,#1
	st.b	[a15],d0
.L666:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   150      IfxScuWdt_setCpuEndinit(passwd);
	mov	d4,d15
	call	IfxScuWdt_setCpuEndinit

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   151  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   152      /* Wait until module is enabled */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   153      while (IfxCcu6_isModuleEnabled(ccu6) == FALSE)
.L13:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     2   * \file IfxCcu6.h
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     3   * \brief CCU6  basic functionality
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     4   * \ingroup IfxLld_Ccu6
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     5   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     8   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     9   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    11   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    16   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    18   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    25   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    32   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    40   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    41   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    42   * \defgroup IfxLld_Ccu6_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    43   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    44   * \defgroup IfxLld_Ccu6_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    45   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    46   * \defgroup IfxLld_Ccu6_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    47   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    48   * \defgroup IfxLld_Ccu6_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    49   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    50   * \defgroup IfxLld_Ccu6_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    51   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    52   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    53  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    54  #ifndef IFXCCU6_H
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    55  #define IFXCCU6_H 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    56  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    57  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    58  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    59  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    60  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    61  #include "_Impl/IfxCcu6_cfg.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    62  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    63  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    64  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    65  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    66  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    67  #include "_PinMap/IfxCcu6_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    68  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    69  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    70  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    72  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    73  /** \addtogroup IfxLld_Ccu6_Std_Enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    74   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    75  /** \brief Input selection, ( CC6x capture input / CTRAP input / CCPOSx input )\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    76   * Definition in Ifx_CCU.PISEL0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    77   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    78  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    79  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    80      IfxCcu6_CaptureCompareInput_cC60   = IFX_CCU6_PISEL0_ISCC60_OFF,  /**< \brief CC60 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    81      IfxCcu6_CaptureCompareInput_cC61   = IFX_CCU6_PISEL0_ISCC61_OFF,  /**< \brief CC61 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    82      IfxCcu6_CaptureCompareInput_cC62   = IFX_CCU6_PISEL0_ISCC62_OFF,  /**< \brief CC62 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    83      IfxCcu6_CaptureCompareInput_cTRAP  = IFX_CCU6_PISEL0_ISTRP_OFF,   /**< \brief CTRAP input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    84      IfxCcu6_CaptureCompareInput_cCPOS0 = IFX_CCU6_PISEL0_ISPOS0_OFF,  /**< \brief CCPOS0 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    85      IfxCcu6_CaptureCompareInput_cCPOS1 = IFX_CCU6_PISEL0_ISPOS1_OFF,  /**< \brief CCPOS1 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    86      IfxCcu6_CaptureCompareInput_cCPOS2 = IFX_CCU6_PISEL0_ISPOS2_OFF   /**< \brief CCPOS2 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    87  } IfxCcu6_CaptureCompareInput;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    88  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    89  /** \brief Selection of actual input signal for the capture compare inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    90   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    91  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    92  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    93      IfxCcu6_CaptureCompareInputSignal_a = 0,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    94      IfxCcu6_CaptureCompareInputSignal_b = 1,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    95      IfxCcu6_CaptureCompareInputSignal_c = 2,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    96      IfxCcu6_CaptureCompareInputSignal_d = 3   /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    97  } IfxCcu6_CaptureCompareInputSignal;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    98  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    99  /** \brief capture/compare state to set / clear the CC6xST-bits
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   100   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   101  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   102  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   103      IfxCcu6_CaptureCompareState_set    = 0, /**< \brief Bit CC6xST is set */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   104      IfxCcu6_CaptureCompareState_clear  = 1, /**< \brief Bit CC6xST is cleared */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   105      IfxCcu6_CaptureCompareState_toggle = 2  /**< \brief Bit CC6xST is toggled */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   106  } IfxCcu6_CaptureCompareState;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   107  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   108  /** \brief Capture compare output pins
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   109   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   110  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   111  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   112      IfxCcu6_ChannelOut_cc0   = 0,  /**< \brief CC60 compare output CC0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   113      IfxCcu6_ChannelOut_cout0 = 1,  /**< \brief CC60 compare output COUT0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   114      IfxCcu6_ChannelOut_cc1   = 2,  /**< \brief CC61 compare output CC1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   115      IfxCcu6_ChannelOut_cout1 = 3,  /**< \brief CC61 compare output COUT1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   116      IfxCcu6_ChannelOut_cc2   = 4,  /**< \brief CC62 compare output CC2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   117      IfxCcu6_ChannelOut_cout2 = 5,  /**< \brief CC62 compare output COUT2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   118      IfxCcu6_ChannelOut_cout3 = 6   /**< \brief CC63 compare output COUT3 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   119  } IfxCcu6_ChannelOut;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   120  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   121  /** \brief Defines the input event leading to a counting action of the timer (T12 / T13)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   122   * Definition in Ifx_CCU.PISEL2.B.ISCNT12 / Ifx_CCU.PISEL2.B.ISCNT13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   123   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   124  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   125  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   126      IfxCcu6_CountingInputMode_internal        = 0, /**< \brief The T1x prescaler generates the counting events,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   127                                                      * Bit TCTR4.T1xCNT is not taken into account. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   128      IfxCcu6_CountingInputMode_manual          = 1, /**< \brief Bit TCTR4.T1xCNT written with 1 is a counting
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   129                                                      * event. The T1x prescaler is not taken into account */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   130      IfxCcu6_CountingInputMode_externalRising  = 2, /**< \brief The timer T1x is counting each rising edge
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   131                                                      * detected in the selected T1xHR signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   132      IfxCcu6_CountingInputMode_externalFalling = 3  /**< \brief The timer T1x is counting each falling edge
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   133                                                      * detected in the selected T1xHR signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   134  } IfxCcu6_CountingInputMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   135  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   136  /** \brief Controls whether the source signal for the sampling of the Hall input pattern (selected by HSYNC) is delayed by the Dead-Time Counter 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   137   * Definition in Ifx_CCU.T12MSEL.B.DBYP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   138   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   139  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   140  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   141      IfxCcu6_DelayBypass_notActive = 0,  /**< \brief Dead-Time Counter 0 is generating a delay after
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   142                                           * the source signal becomes active */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   143      IfxCcu6_DelayBypass_active    = 1   /**< \brief Dead-Time Counter 0 is not used for a delay */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   144  } IfxCcu6_DelayBypass;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   145  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   146  /** \brief Defines the event of signal T1xHR that can set the run bit T1xR by HW\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   147   * Definition in Ifx_CCU.TCTR2.B.T12RSEL / IIfx_CCU.TCTR2.B.T13RSEL
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   148   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   149  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   150  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   151      IfxCcu6_ExternalTriggerMode_disable     = 0,  /**< \brief The external setting of T1xR is disabled */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   152      IfxCcu6_ExternalTriggerMode_risingEdge  = 1,  /**< \brief Bit T1xR is set if a rising edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   153                                                     * detected. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   154      IfxCcu6_ExternalTriggerMode_fallingEdge = 2,  /**< \brief Bit T1xR is set if a falling edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   155                                                     * detected. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   156      IfxCcu6_ExternalTriggerMode_anyEdge     = 3   /**< \brief Bit T1xR is set if an edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   157                                                     * detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   158  } IfxCcu6_ExternalTriggerMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   159  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   160  /** \brief Defines the source for the sampling of the Hall input pattern and the comparison to the current and the expected Hall pattern bit fields\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   161   * Definition in Ifx_CCU.T12MSEL.HSYNC
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   162   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   163  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   164  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   165      IfxCcu6_HallSensorTriggerMode_permanentCheck    = 0,  /**< \brief Any edge at any of the inputs CCPOSx, independent from any PWM
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   166                                                             * signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   167      IfxCcu6_HallSensorTriggerMode_cM63              = 1,  /**< \brief A T13 Compare-Match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   168      IfxCcu6_HallSensorTriggerMode_t13PM             = 2,  /**< \brief A T13 Period-Match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   169      IfxCcu6_HallSensorTriggerMode_off               = 3,  /**< \brief Hall sampling triggered by HW sources is switched off */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   170      IfxCcu6_HallSensorTriggerMode_t12PMCountingUp   = 4,  /**< \brief A T12 Period-Match while counting up (T12_PM and CDIR = 0) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   171      IfxCcu6_HallSensorTriggerMode_t12OMCountingDown = 5,  /**< \brief A T12 One-Match while counting down (T12_PM and CDIR = 1) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   172      IfxCcu6_HallSensorTriggerMode_cM61CountingUp    = 6,  /**< \brief A T12 Compare-Match of compare channel CC61 while counting up (CM_61 and CDIR = 0) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   173      IfxCcu6_HallSensorTriggerMode_cM61CountingDown  = 7   /**< \brief A T12 Compare-Match of compare channel CC61 while counting down (CM_61 and CDIR = 1) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   174  } IfxCcu6_HallSensorTriggerMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   175  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   176  /** \brief Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   177   * Description in Ifx_CCU.IEN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   178   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   179  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   180  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   181      IfxCcu6_InterruptSource_cc60RisingEdge   = IFX_CCU6_IS_ICC60R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   182                                                                          * enable for channel CC60 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   183      IfxCcu6_InterruptSource_cc60FallingEdge  = IFX_CCU6_IS_ICC60F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   184                                                                          * enable for channel CC60 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   185      IfxCcu6_InterruptSource_cc61RisingEdge   = IFX_CCU6_IS_ICC61R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   186                                                                          * enable for channel CC61 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   187      IfxCcu6_InterruptSource_cc61FallingEdge  = IFX_CCU6_IS_ICC61F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   188                                                                          * enable for channel CC61 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   189      IfxCcu6_InterruptSource_cc62RisingEdge   = IFX_CCU6_IS_ICC62R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   190                                                                          * enable for channel CC62 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   191      IfxCcu6_InterruptSource_cc62FallingEdge  = IFX_CCU6_IS_ICC62F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   192                                                                          * enable for channel CC62 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   193      IfxCcu6_InterruptSource_t12OneMatch      = IFX_CCU6_IS_T12OM_OFF,  /**< \brief Interrupt enable for T12 one-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   194      IfxCcu6_InterruptSource_t12PeriodMatch   = IFX_CCU6_IS_T12PM_OFF,  /**< \brief Interrupt enable for T12 period-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   195      IfxCcu6_InterruptSource_t13CompareMatch  = IFX_CCU6_IS_T13CM_OFF,  /**< \brief Interrupt enable for T13 compare-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   196      IfxCcu6_InterruptSource_t13PeriodMatch   = IFX_CCU6_IS_T13PM_OFF,  /**< \brief Interrupt enable for T13 period-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   197      IfxCcu6_InterruptSource_trap             = IFX_CCU6_IS_TRPF_OFF,   /**< \brief Interrupt enable for trap flag */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   198      IfxCcu6_InterruptSource_correctHallEvent = IFX_CCU6_IS_CHE_OFF,    /**< \brief Interrupt enable for correct hall event */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   199      IfxCcu6_InterruptSource_wrongHallEvent   = IFX_CCU6_IS_WHE_OFF     /**< \brief Interrupt enable for wrong hall event */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   200  } IfxCcu6_InterruptSource;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   201  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   202  /** \brief Selection of the trigger request source (next multi-channel event) for the shadow transfer MCM_ST from MCMPS to MCMP\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   203   * Definition in Ifx_CCU.MCMCTR.B.SWSEL
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   204   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   205  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   206  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   207      IfxCcu6_MultiChannelSwitchingSelect_noEvent                 = 0,  /**< \brief No trigger request will be generated */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   208      IfxCcu6_MultiChannelSwitchingSelect_correctHallEvent        = 1,  /**< \brief Correct Hall pattern detected (CM_CHE) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   209      IfxCcu6_MultiChannelSwitchingSelect_t13PeriodMatch          = 2,  /**< \brief T13 period-match detected (while counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   210      IfxCcu6_MultiChannelSwitchingSelect_t12OneMatch             = 3,  /**< \brief T12 one-match (while counting down) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   211      IfxCcu6_MultiChannelSwitchingSelect_t12Channel1CompareMatch = 4,  /**< \brief T12 channel 1 compare-match detected (phase
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   212                                                                         * delay function) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   213      IfxCcu6_MultiChannelSwitchingSelect_t12PeriodMatch          = 5   /**< \brief T12 period match detected (while counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   214  } IfxCcu6_MultiChannelSwitchingSelect;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   215  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   216  /** \brief Selection of the synchronization mechanism for the shadow transfer event MCM_ST\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   217   * Definition in Ifx_CCU.MCMCTR.B.SWSYN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   218   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   219  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   220  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   221      IfxCcu6_MultiChannelSwitchingSync_direct       = 0,  /**< \brief Direct, the trigger event immediately leads to the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   222                                                            * shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   223      IfxCcu6_MultiChannelSwitchingSync_t13ZeroMatch = 1,  /**< \brief A T13 zero-match triggers the shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   224      IfxCcu6_MultiChannelSwitchingSync_t12ZeroMatch = 2   /**< \brief A T12 zero-match (while counting up) triggers the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   225                                                            * shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   226  } IfxCcu6_MultiChannelSwitchingSync;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   227  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   228  /** \brief Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   229   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   230  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   231  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   232      IfxCcu6_ServiceRequest_0 = 0,      /**< \brief Service request output SR0  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   233      IfxCcu6_ServiceRequest_1,          /**< \brief Service request output SR1  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   234      IfxCcu6_ServiceRequest_2,          /**< \brief Service request output SR2  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   235      IfxCcu6_ServiceRequest_3           /**< \brief Service request output SR3  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   236  } IfxCcu6_ServiceRequest;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   237  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   238  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   239   * Definition in Ifx_CCU6.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   240   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   241  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   242  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   243      IfxCcu6_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   244      IfxCcu6_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   245  } IfxCcu6_SleepMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   246  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   247  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   248   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   249  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   250  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   251      IfxCcu6_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   252      IfxCcu6_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   253      IfxCcu6_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   254  } IfxCcu6_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   255  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   256  /** \brief Capture compare channel of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   257   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   258  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   259  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   260      IfxCcu6_T12Channel_0 = 0,      /**< \brief T12 channel CC60  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   261      IfxCcu6_T12Channel_1,          /**< \brief T12 channel CC61  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   262      IfxCcu6_T12Channel_2           /**< \brief T12 channel CC62  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   263  } IfxCcu6_T12Channel;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   264  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   265  /** \brief The operating mode for the T12 channels are defined by the bit fields Ifx_CCU.T12MSEL.MSEL6x.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   266   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   267  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   268  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   269      IfxCcu6_T12ChannelMode_off                                   = 0,  /**< \brief Capture/Compare modes switched off */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   270      IfxCcu6_T12ChannelMode_compareMode                           = 1,  /**< \brief Compare mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   271      IfxCcu6_T12ChannelMode_doubleRegisterCaptureRisingAndFalling = 4,  /**< \brief CC6xIN rising edge: T12 stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   272      IfxCcu6_T12ChannelMode_doubleRegisterCaptureRising           = 5,  /**< \brief CC6xIN rising edge: CC6nSR stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   273      IfxCcu6_T12ChannelMode_doubleRegisterCaptureFalling          = 6,  /**< \brief CC6xIN rising edge: CC6nSR stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   274      IfxCcu6_T12ChannelMode_doubleRegisterCaptureAny              = 7,  /**< \brief CC6xIN any active edge: CC6nSR stored in CC6xR, any active edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   275      IfxCcu6_T12ChannelMode_hallSensor                            = 8,  /**< \brief Hall Sensor Mode, In order to properly enable this mode, all three MSEL6x fields have to be
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   276                                                                          * programmed to Hall Sensor mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   277      IfxCcu6_T12ChannelMode_hysteresisLikecompare                 = 9,  /**< \brief Hysteresis-like compare mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   278      IfxCcu6_T12ChannelMode_multiInputCaptureRisingAndFalling     = 10, /**< \brief CC6xIN rising edge: T12 stored in CC6xR, CCPOSx falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   279      IfxCcu6_T12ChannelMode_multiInputCaptureFallingAndRising     = 11, /**< \brief CC6xIN falling edge: T12 stored in CC6xR, CCPOSx rising edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   280      IfxCcu6_T12ChannelMode_multiInputCaptureBothRising           = 12, /**< \brief CC6xIN rising edge: T12 stored in CC6xR, CCPOSx rising edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   281      IfxCcu6_T12ChannelMode_multiInputCaptureBothFalling          = 13, /**< \brief CC6xIN falling edge: T12 stored in CC6xR, CCPOSx falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   282      IfxCcu6_T12ChannelMode_multiInputCaptureAny                  = 14  /**< \brief CC6xIN any active edge : T12 stored in CC6xR, CCPOSx any active edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   283  } IfxCcu6_T12ChannelMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   284  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   285  /** \brief Counting direction of Timer12\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   286   * Definition in Ifx_CCU.TCTR0.B.CDIR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   287   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   288  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   289  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   290      IfxCcu6_T12CountDirection_up   = 0, /**< \brief Counting up */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   291      IfxCcu6_T12CountDirection_down = 1  /**< \brief Counting down */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   292  } IfxCcu6_T12CountDirection;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   293  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   294  /** \brief Operating mode of Timer 12\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   295   * Definition in Ifx_CCU.TCTR0.B.CTM
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   296   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   297  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   298  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   299      IfxCcu6_T12CountMode_edgeAligned   = 0, /**< \brief T12 always counts up and continues counting
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   300                                               * from zero after reaching the period value. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   301      IfxCcu6_T12CountMode_centerAligned = 1  /**< \brief T12 counts down after detecting a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   302                                               * and counts up after detecting a one-match. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   303  } IfxCcu6_T12CountMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   304  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   305  /** \brief Delivers additional information to control the automatic set of bit T13R in the case that the trigger action defined by T13 trigger event control (T13TEC) is detected.\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   306   * Definition in Ifx_CCU.TCTR2.B.T13TED
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   307   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   308  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   309  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   310      IfxCcu6_T13TriggerDirection_noAction          = 0,  /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   311      IfxCcu6_T13TriggerDirection_onT12CountingUp   = 1,  /**< \brief while T12 is counting up */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   312      IfxCcu6_T13TriggerDirection_onT12CountingDown = 2,  /**< \brief while T12 is counting down */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   313      IfxCcu6_T13TriggerDirection_anyT12            = 3   /**< \brief independent on the count direction of T12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   314  } IfxCcu6_T13TriggerDirection;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   315  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   316  /** \brief Selects the trigger event to start T13 (automatic set of T13R for synchronization to T12 compare signals)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   317   * Definition in Ifx_CCU.TCTR2.B.T13TEC
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   318   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   319  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   320  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   321      IfxCcu6_T13TriggerEvent_noAction        = 0,  /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   322      IfxCcu6_T13TriggerEvent_onCC60RCompare  = 1,  /**< \brief set T13R on a T12 compare event on channel 0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   323      IfxCcu6_T13TriggerEvent_onCC61RCompare  = 2,  /**< \brief set T13R on a T12 compare event on channel 1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   324      IfxCcu6_T13TriggerEvent_onCC62RCompare  = 3,  /**< \brief set T13R on a T12 compare event on channel 2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   325      IfxCcu6_T13TriggerEvent_onAnyT12Compare = 4,  /**< \brief set T13R on any T12 compare event (ch. 0, 1, 2) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   326      IfxCcu6_T13TriggerEvent_onT12Period     = 5,  /**< \brief set T13R upon a period-match of T12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   327      IfxCcu6_T13TriggerEvent_onT12Zero       = 6,  /**< \brief set T13R upon a zero-match of T12 (while
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   328                                                     * counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   329      IfxCcu6_T13TriggerEvent_onCCPOSxEdge    = 7   /**< \brief set T13R on any edge of inputs CCPOSx */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   330  } IfxCcu6_T13TriggerEvent;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   331  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   332  /** \brief Timer number ( T12 / T13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   333   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   334  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   335  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   336      IfxCcu6_TimerId_t12 = 0,  /**< \brief Timer 12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   337      IfxCcu6_TimerId_t13 = 1   /**< \brief Timer 13 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   338  } IfxCcu6_TimerId;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   339  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   340  /** \brief Selects the input clock for timers (T12 or T13) that is derived from the peripheral clock according to the equation\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   341   * Definition in Ifx_CCU.TCTR0.B.T12CLK / Ifx_CCU.TCTR0.B.T13CLK
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   342   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   343  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   344  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   345      IfxCcu6_TimerInputClock_fcc6      = 0, /**< \brief fcc6 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   346      IfxCcu6_TimerInputClock_fcc6By2   = 1, /**< \brief fcc6 / 2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   347      IfxCcu6_TimerInputClock_fcc6By4   = 2, /**< \brief fcc6 / 4 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   348      IfxCcu6_TimerInputClock_fcc6By8   = 3, /**< \brief fcc6 / 8 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   349      IfxCcu6_TimerInputClock_fcc6By16  = 4, /**< \brief fcc6 / 16 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   350      IfxCcu6_TimerInputClock_fcc6By32  = 5, /**< \brief fcc6 / 32 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   351      IfxCcu6_TimerInputClock_fcc6By64  = 6, /**< \brief fcc6 / 64 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   352      IfxCcu6_TimerInputClock_fcc6By128 = 7  /**< \brief fcc6 / 128 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   353  } IfxCcu6_TimerInputClock;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   354  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   355  /** \brief Selection of actual input signal for the timer inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   356   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   357  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   358  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   359      IfxCcu6_TimerInputSignal_a = 0,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   360      IfxCcu6_TimerInputSignal_b = 1,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   361      IfxCcu6_TimerInputSignal_c = 2,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   362      IfxCcu6_TimerInputSignal_d = 3,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   363      IfxCcu6_TimerInputSignal_e = 0,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   364      IfxCcu6_TimerInputSignal_f = 1,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   365      IfxCcu6_TimerInputSignal_g = 2,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   366      IfxCcu6_TimerInputSignal_h = 3   /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   367  } IfxCcu6_TimerInputSignal;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   368  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   369  /** \brief Timer (T12 / T13) run status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   370   * Definition in Ifx_CCU.TCTR0.B.T12R and Ifx_CCU.TCTR0.B.T13R
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   371   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   373  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   374      IfxCcu6_TimerRunStatus_stopped = 0,  /**< \brief Timer T1x is stopped. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   375      IfxCcu6_TimerRunStatus_running = 1   /**< \brief Timer T1x is running. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   376  } IfxCcu6_TimerRunStatus;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   377  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   378  /** \brief Defines how the trap flag TRPF can be cleared after the trap input condition is no longer valid (either by CTRAP = 1 or by TRPPEN = 0)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   379   * Definition in Ifx_CCU.TRPCTR.B.TRPM2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   380   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   381  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   382  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   383      IfxCcu6_TrapMode_automatic = 0,  /**< \brief Bit TRPF is cleared by HW */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   384      IfxCcu6_TrapMode_manual    = 1   /**< \brief Bit TRPF stays 0, It has to be cleared by SW by writing
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   385                                        * ISR.RTRPF = 1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   386  } IfxCcu6_TrapMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   387  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   388  /** \brief Defines the behavior of the selected outputs when leaving the trap state, after the trap condition has become inactive again\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   389   * Definition in Ifx_CCU.TRPCTR.B.TRPMx (x = 0, 1)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   390   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   391  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   392  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   393      IfxCcu6_TrapState_t12Sync   = 0, /**< \brief The trap state is left when a zero-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   394                                        * of T12 (while counting up) is detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   395      IfxCcu6_TrapState_t13Sync   = 1, /**< \brief The trap state is left when a zeromatch
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   396                                        * of T13 is detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   397      IfxCcu6_TrapState_immediate = 3  /**< \brief The trap state is left immediately without any synchronization to T12 or T13 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   398  } IfxCcu6_TrapState;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   399  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   400  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   401  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   402  /** \addtogroup IfxLld_Ccu6_Std_Operative
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   403   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   404  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   405  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   406  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   407  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   408  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   409  /** \brief Clears the counters of the Timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   410   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   411   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   412   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   413   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   414   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   415  IFX_INLINE void IfxCcu6_clearCounter(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   416  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   417  /** \brief Clears all the three dead-time counter channels to zero.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   418   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   419   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   420   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   421  IFX_INLINE void IfxCcu6_clearDeadTimeCounters(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   422  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   423  /** \brief Clears the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   424   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   425   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   426   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   427   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   428  IFX_INLINE void IfxCcu6_clearInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   429  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   430  /** \brief Clears the T12  One notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   431   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   432   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   433   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   434  IFX_INLINE void IfxCcu6_clearT12OneNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   435  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   436  /** \brief Clears the T12  period notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   437   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   438   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   439   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   440  IFX_INLINE void IfxCcu6_clearT12PeriodNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   441  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   442  /** \brief Clears the T13  compare notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   443   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   444   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   445   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   446  IFX_INLINE void IfxCcu6_clearT13CompareNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   447  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   448  /** \brief Returns the Timer pointer
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   449   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   450   * \return Timer pointer
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   451   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   452  IFX_INLINE volatile uint32 *IfxCcu6_getT12TimerPointer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   453  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   454  /** \brief Returns the status of module enabled or disabled
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   455   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   456   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   457   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   458  IFX_INLINE boolean IfxCcu6_isModuleEnabled(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   459  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   460  /** \brief Returns the status of T12 one notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   461   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   462   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   463   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   464  IFX_INLINE boolean IfxCcu6_isT12OneNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   465  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   466  /** \brief Returns the status of T12 period notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   467   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   468   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   469   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   470  IFX_INLINE boolean IfxCcu6_isT12PeriodNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   471  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   472  /** \brief Returns the status of T13 compare notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   473   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   474   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   475   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   476  IFX_INLINE boolean IfxCcu6_isT13CompareNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   477  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   478  /** \brief Sets the input event leading to a counting action of Timers (T12 / T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   479   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   480   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   481   * \param mode Input event leading to a counting action of the timer (T12 / T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   482   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   483   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   484  IFX_INLINE void IfxCcu6_setCountingInputMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_CountingInputMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   485  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   486  /** \brief Sets the current hall pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   487   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   488   * \param pattern Current hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   489   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   490   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   491  IFX_INLINE void IfxCcu6_setCurrentHallPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   492  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   493  /** \brief Sets the delay between switching from the passive state to the active state of the selected outputs (dead time)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   494   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   495   * \param value Value of the dead time to be induced
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   496   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   497   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   498  IFX_INLINE void IfxCcu6_setDeadTimeValue(Ifx_CCU6 *ccu6, uint8 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   499  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   500  /** \brief Sets the expected hall pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   501   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   502   * \param pattern Expected hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   503   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   504   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   505  IFX_INLINE void IfxCcu6_setExpectedHallPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   506  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   507  /** \brief Sets the event of signal T1xHR that can set the run bit T1xR by HW
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   508   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   509   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   510   * \param mode External trigger mode
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   511   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   512   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   513  IFX_INLINE void IfxCcu6_setExternalRunMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ExternalTriggerMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   514  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   515  /** \brief Sets source for the sampling of the Hall input pattern and the comparison to the current and the expected Hall pattern bit fields
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   516   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   517   * \param mode Hall sensor input trigger event
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   518   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   519   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   520  IFX_INLINE void IfxCcu6_setHallSensorTriggerMode(Ifx_CCU6 *ccu6, IfxCcu6_HallSensorTriggerMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   521  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   522  /** \brief Sets the input clock for timers (T12 or T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   523   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   524   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   525   * \param frequency Input clock for timers (T12 or T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   526   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   527   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   528  IFX_INLINE void IfxCcu6_setInputClockFrequency(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_TimerInputClock frequency);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   529  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   530  /** \brief Sets the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   531   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   532   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   533   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   534   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   535  IFX_INLINE void IfxCcu6_setInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   536  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   537  /** \brief Sets the output pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   538   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   539   * \param pattern Output pattern for the multichannel mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   540   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   541   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   542  IFX_INLINE void IfxCcu6_setMultiChannelPwmPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   543  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   544  /** \brief Sets the trigger request source (next multi-channel event) for the shadow transfer MCM_ST from MCMPS to MCMP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   545   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   546   * \param mode Trigger request source (next multi-channel event) for the shadow transfer MCM_ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   547   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   548   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   549  IFX_INLINE void IfxCcu6_setMultiChannelSwitchingMode(Ifx_CCU6 *ccu6, IfxCcu6_MultiChannelSwitchingSelect mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   550  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   551  /** \brief Sets the synchronization mechanism of the shadow transfer event MCM_ST\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   552   * if it has been requested before (flag R set by an event selected by SWSEL) and if MCMEN = 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   553   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   554   * \param sync Synchronization mechanism of the shadow transfer event MCM_ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   555   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   556   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   557  IFX_INLINE void IfxCcu6_setMultiChannelSwitchingSync(Ifx_CCU6 *ccu6, IfxCcu6_MultiChannelSwitchingSync sync);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   558  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   559  /** \brief Sets the state of the corresponding compare channel, that is considered to be the passive state
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   560   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   561   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   562   * \param state FALSE: passive state when CC6xST == 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   563   * TRUE : passive state when CC6xST == 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   564   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   565   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   566  IFX_INLINE void IfxCcu6_setOutputPassiveState(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut, boolean state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   567  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   568  /** \brief Enables / Disables the single shot mode of Timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   569   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   570   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   571   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   573   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   574  IFX_INLINE void IfxCcu6_setSingleShotModeEnable(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   575  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   576  /** \brief Sets the operating mode of the Timer12 capture/compare channels
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   577   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   578   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   579   * \param mode The operating mode for the T12 channels
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   580   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   581   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   582  IFX_INLINE void IfxCcu6_setT12ChannelMode(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, IfxCcu6_T12ChannelMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   583  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   584  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   585   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   586   * \param mode Operating mode of Timer 12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   587   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   588   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   589  IFX_INLINE void IfxCcu6_setT12CountMode(Ifx_CCU6 *ccu6, IfxCcu6_T12CountMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   590  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   591  /** \brief Sets the 16-bit counter value of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   592   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   593   * \param value Counter value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   595   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   596  IFX_INLINE void IfxCcu6_setT12CounterValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   597  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   598  /** \brief Sets the period value that leads Timer12 counter value to a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   599   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   600   * \param value Period value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   601   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   602   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   603  IFX_INLINE void IfxCcu6_setT12PeriodValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   604  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   605  /** \brief Sets the 16-bit compare value of Timer13 (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   606   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   607   * \param value Compare value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   609   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   610  IFX_INLINE void IfxCcu6_setT13CompareValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   611  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   612  /** \brief Sets the 16-bit counter value of Timer13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   613   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   614   * \param value counter value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   616   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   617  IFX_INLINE void IfxCcu6_setT13CounterValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   618  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   619  /** \brief Sets the period value that leads Timer13 counter value to a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   620   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   621   * \param value period value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   622   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   623   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   624  IFX_INLINE void IfxCcu6_setT13PeriodValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   625  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   626  /** \brief Sets the Timer13 trigger event direction
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   627   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   628   * \param direction T13 trigger event direction
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   630   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   631  IFX_INLINE void IfxCcu6_setT13TriggerEventDirection(Ifx_CCU6 *ccu6, IfxCcu6_T13TriggerDirection direction);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   632  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   633  /** \brief Sets the trigger event to start Timer13 (automatic set of T13R for synchronization to Timer12 compare signals)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   634   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   635   * \param mode The trigger event to start T13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   636   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   637   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   638  IFX_INLINE void IfxCcu6_setT13TriggerEventMode(Ifx_CCU6 *ccu6, IfxCcu6_T13TriggerEvent mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   639  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   640  /** \brief Sets the mode of clearing the trap flag TRPF after the trap input condition is no longer valid
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   641   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   642   * \param mode Trap mode selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   643   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   644   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   645  IFX_INLINE void IfxCcu6_setTrapMode(Ifx_CCU6 *ccu6, IfxCcu6_TrapMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   646  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   647  /** \brief Sets behaviour of the selected outputs when leaving the trap state after the trap condition has become inactive again.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   648   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   649   * \param state Trap state selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   650   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   651   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   652  IFX_INLINE void IfxCcu6_setTrapState(Ifx_CCU6 *ccu6, IfxCcu6_TrapState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   653  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   654  /** \brief starts the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   655   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   656   * \param t12 Timer12 start choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   657   * \param t13 Timer13 start choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   658   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   659   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   660  IFX_INLINE void IfxCcu6_startTimer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   661  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   662  /** \brief starts the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   663   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   664   * \param t12 Timer12 stop choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   665   * \param t13 Timer13 stop choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   666   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   667   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   668  IFX_INLINE void IfxCcu6_stopTimer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   669  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   670  /** \brief Updates the hall pattern (current hall, expected hall, moduleation output), in a single write
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   671   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   672   * \param currentHall Current hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   673   * \param expectedHall Expected hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   674   * \param output Output pattern for the multichannel mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   675   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   676   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   677  IFX_INLINE void IfxCcu6_updateHallPattern(Ifx_CCU6 *ccu6, uint8 currentHall, uint8 expectedHall, uint8 output);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   678  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   679  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   680  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   681  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   682  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   683  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   684   * \param ccu6 Specifies Ccu6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   685   * \param outputLine Output Line
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   686   * \param selectedTrigger Trigger selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   687   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   688   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   689  IFX_EXTERN void IfxCcu6_connectTrigger(Ifx_CCU6 *ccu6, IfxCcu6_TrigOut outputLine, IfxCcu6_TrigSel selectedTrigger);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   690  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   691  /** \brief Routes the interrupt node pointer to the selected service requests
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   692   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   693   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   694   * \param serviceRequest Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   696   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   697  IFX_EXTERN void IfxCcu6_routeInterruptNode(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source, IfxCcu6_ServiceRequest serviceRequest);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   698  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   699  /** \brief Sets the passive state level of the PWM outputs of the module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   700   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   701   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   702   * \param state FALSE: The passive level is 0.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   703   * TRUE : The passive level is 1.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   704   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   705   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   706  IFX_EXTERN void IfxCcu6_setOutputPassiveLevel(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut, boolean state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   707  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   708  /** \brief Sets software-control (independent set and clear conditions) for the Timer12 channel state bits CC6xST (x=0,1,2)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   709   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   710   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   711   * \param state capture/compare state selection (set / clear / toggle)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   712   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   713   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   714  IFX_EXTERN void IfxCcu6_setT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, IfxCcu6_CaptureCompareState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   715  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   716  /** \brief Sets the 16-bit compare value of Timer12 (writes into shadow registers)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   717   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   718   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   719   * \param value Compare value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   720   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   721   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   722  IFX_EXTERN void IfxCcu6_setT12CompareValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   723  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   724  /** \brief Sets the frequency and clock input of the Timer 12.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   725   * Caution: If desired frequency cannot achieved (by successive divisions by 2) :
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   726   * Then the nearest frequency value is set ( >= desired value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   727   * The resulting frequency is captured in the handler element : CaptureFrequency.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   728   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   729   * \param frequency Requested timer frequency in Hz
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   730   * \param period period value to be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   731   * \param countMode Counting mode of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   732   * \return Zero, if the function failed to fulfill requested frequency and resolution\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   733   * Positive, if the function can find settings close to the requested frequency and resolution above the requested
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   734   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   735  IFX_EXTERN float32 IfxCcu6_setT12Frequency(Ifx_CCU6 *ccu6, float32 frequency, Ifx_TimerValue period, IfxCcu6_T12CountMode countMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   736  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   737  /** \brief selects the actual input signal for the timer inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   738   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   739   * \param extInput External input signal for the Timer 12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   740   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   741   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   742  IFX_EXTERN void IfxCcu6_setT12InputSignal(Ifx_CCU6 *ccu6, IfxCcu6_T12hr_In *extInput);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   743  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   744  /** \brief Sets software-control (independent set and clear conditions) for the Timer13 channel state bits CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   745   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   746   * \param state capture/compare state selection (set / clear / toggle)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   747   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   748   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   749  IFX_EXTERN void IfxCcu6_setT13CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_CaptureCompareState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   750  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   751  /** \brief Sets the frequency and clock input of the Timer 13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   752   * Caution: If desired frequency cannot achieved (by successive divisions by 2) :
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   753   * Then the nearest frequency value is set ( >= desired value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   754   * The resulting frequency is captured in the handler element : captureFrequency.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   755   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   756   * \param frequency Requested timer frequency in Hz
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   757   * \param period period value to be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   758   * \return Zero, if the function failed to fulfill requested frequency and resolution\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   759   * Positive, if the function can find settings close to the requested frequency and resolution above the requested
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   760   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   761  IFX_EXTERN float32 IfxCcu6_setT13Frequency(Ifx_CCU6 *ccu6, float32 frequency, Ifx_TimerValue period);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   762  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   763  /** \brief selects the actual input signal for the timer inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   764   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   765   * \param extInput External input signal for the Timer 13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   766   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   767   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   768  IFX_EXTERN void IfxCcu6_setT13InputSignal(Ifx_CCU6 *ccu6, IfxCcu6_T13hr_In *extInput);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   769  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   770  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   771  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   772  /** \addtogroup IfxLld_Ccu6_Std_Utility
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   773   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   774  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   775  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   776  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   777  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   778  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   779  /** \brief Indicate the status of the dead time generation for each compare channel (0, 1, 2) of timer T12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   780   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   781   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   782   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   783   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   784  IFX_INLINE boolean IfxCcu6_getDeadTimeStatus(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   785  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   786  /** \brief Returns the value of the input Hall pattern of the Timer12 capture/compare channels CC6POS6x (x = 0, 1, 2)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   787   * that has been compared to the current and expected value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   788   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   789   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   790   * \return Status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   791   * TRUE : The input CCPOSx has been sampled as 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   792   * FALSE : The input CCPOSx has been sampled as 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   793   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   794  IFX_INLINE boolean IfxCcu6_getHallPatternSampleState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   795  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   796  /** \brief Gets the status of the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   797   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   798   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   799   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   800   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   801  IFX_INLINE boolean IfxCcu6_getInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   802  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   803  /** \brief indicates if the multi-channel mode functionality is available
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   804   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   805   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   806   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   807  IFX_INLINE boolean IfxCcu6_getMultiChannelModeAvailabilityStatus(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   808  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   809  /** \brief Gets the status of the shadow transfer request from MCMPS to MCMP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   810   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   811   * \return Status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   812   * FALSE: A shadow transfer MCM_ST is not requested\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   813   * TRUE:  A shadow transfer MCM_ST is requested, but has not yet been executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   814   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   815  IFX_INLINE boolean IfxCcu6_getMultiChannelPWMPatternShadowTransferStatus(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   816  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   817  /** \brief Returns the Timer (T12 / T13) shadow transfer enable status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   818   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   819   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   820   * \return Status (TRUE: enable / FALSE: disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   821   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   822  IFX_INLINE boolean IfxCcu6_getShadowTransferStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   823  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   824  /** \brief Returns the state of the Timer12 capture/compare channels CC6xST (x = 0, 1, 2)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   825   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   826   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   827   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   828   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   829  IFX_INLINE boolean IfxCcu6_getT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   830  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   831  /** \brief Returns the current counting direction of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   832   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   833   * \return direction (up / down)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   834   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   835  IFX_INLINE IfxCcu6_T12CountDirection IfxCcu6_getT12CountDirection(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   836  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   837  /** \brief Returns the state of the Timer13 capture/compare channel CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   838   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   839   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   840   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   841  IFX_INLINE boolean IfxCcu6_getT13CaptureCompareState(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   842  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   843  /** \brief indicates the Timer blocks (T12 / T13) availability
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   844   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   845   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   846   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   847   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   848  IFX_INLINE boolean IfxCcu6_getTimerAvailabilityStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   849  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   850  /** \brief Returns the Timer (T12 / T13) run status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   851   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   852   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   853   * \return Status (stopped / running)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   854   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   855  IFX_INLINE IfxCcu6_TimerRunStatus IfxCcu6_getTimerRunStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   856  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   857  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   858   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   859   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   860   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   861   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   862   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   863  IFX_INLINE boolean IfxCcu6_isModuleSuspended(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   864  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   865  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   866   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   867   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   868   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   869   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   870   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   871  IFX_INLINE void IfxCcu6_setSuspendMode(Ifx_CCU6 *ccu6, IfxCcu6_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   872  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   873  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   874  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   875  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   876  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   877  /** \brief Returns the module index of the selected CCU6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   878   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   879   * \return CCU6 module register address
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   880   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   881  IFX_EXTERN Ifx_CCU6 *IfxCcu6_getAddress(IfxCcu6_Index ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   882  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   883  /** \brief Returns the capture register value of the selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   884   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   885   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   886   * \return current value of the capture register of a selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   887   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   888  IFX_EXTERN uint32 IfxCcu6_getCaptureRegisterValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   889  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   890  /** \brief Returns the capture shadow register value of the selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   891   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   892   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   893   * \return current value of the capture shadow register of a selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   894   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   895  IFX_EXTERN uint32 IfxCcu6_getCaptureShadowRegisterValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   896  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   897  /** \brief Returns CCU6 index
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   898   * \param ccu6 Specifies the pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   899   * \return Returns index. returns -1 in case of unknown index
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   900   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   901  IFX_EXTERN IfxCcu6_Index IfxCcu6_getIndex(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   902  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   903  /** \brief Returns the service request register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   904   * \param ccu6 Specifies Ccu6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   905   * \param serviceRequest Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   906   * \return The service request register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   907   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   908  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxCcu6_getSrcAddress(Ifx_CCU6 *ccu6, IfxCcu6_ServiceRequest serviceRequest);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   909  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   910  /** \brief Returns the current value of the timer register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   911   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   912   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   913   * \return current value of the timer register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   914   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   915  IFX_EXTERN uint32 IfxCcu6_readTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   916  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   917  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   918  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   919  /** \addtogroup IfxLld_Ccu6_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   920   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   921  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   922  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   923  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   924  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   925  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   926  /** \brief Clears all Interrupt flags
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   927   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   928   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   929   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   930  IFX_INLINE void IfxCcu6_clearAllInterruptStatusFlags(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   931  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   932  /** \brief Disables the additional prescaler of 1/256 can be enabled for the prescaler of T12 or T13 to support higher clock frequencies
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   933   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   934   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   935   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   936   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   937  IFX_INLINE void IfxCcu6_disableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   938  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   939  /** \brief Disables the dead time generation for each compare channel (0, 1, 2) of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   940   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   941   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   942   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   943   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   944  IFX_INLINE void IfxCcu6_disableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   945  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   946  /** \brief Disables the delay of the source signal for the sampling of the Hall input pattern (selected by HSYNC)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   947   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   948   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   949   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   950  IFX_INLINE void IfxCcu6_disableDelayBypass(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   951  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   952  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   953   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   954   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   955   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   956   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   957  IFX_INLINE void IfxCcu6_disableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   958  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   959  /** \brief Sets multi channel mode unavailable, A write access to MCMOUTS is ignored
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   960   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   961   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   962   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   963  IFX_INLINE void IfxCcu6_disableMultiChannelMode(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   964  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   965  /** \brief Disables shadow transfers of the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   966   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   967   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   968   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   969   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   970   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   971  IFX_INLINE void IfxCcu6_disableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   972  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   973  /** \brief Disables the single shot-mode of Timers (T12 T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   974   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   975   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   976   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   977   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   978  IFX_INLINE void IfxCcu6_disableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   979  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   980  /** \brief Disables the Inversion of T13 signal for the modulation of the CC6x and COUT6x (x = 0, 1, 2) signals\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   981   * T13 output CC63_O is equal to CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   982   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   983   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   984   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   985  IFX_INLINE void IfxCcu6_disableT13InvertedModulation(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   986  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   987  /** \brief Sets Timer12 block unavailable, A write access to T12PR is ignored
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   988   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   989   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   990   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   991   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   992  IFX_INLINE void IfxCcu6_disableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   993  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   994  /** \brief Disables the trap functionality for the corresponding output signals
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   995   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   996   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   997   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   998   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   999  IFX_INLINE void IfxCcu6_disableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1000  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1001  /** \brief Disables the input (pin) function for the trap generation
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1002   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1003   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1004   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1005  IFX_INLINE void IfxCcu6_disableTrapPin(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1006  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1007  /** \brief Enables the additional prescaler of 1/256 can be enabled for the prescaler of T12 or T13 to support higher clock frequencies
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1008   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1009   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1010   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1011   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1012  IFX_INLINE void IfxCcu6_enableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1013  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1014  /** \brief Sets the single shot-mode of Timers (T12, T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1015   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1016   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1017   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1018   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1019   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1020  IFX_INLINE void IfxCcu6_enableCountEvent(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1021  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1022  /** \brief Enables the dead time generation for each compare channel (0, 1, 2) of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1023   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1024   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1025   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1026   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1027  IFX_INLINE void IfxCcu6_enableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1028  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1029  /** \brief Enables the delay of the source signal for the sampling of the Hall input pattern (selected by HSYNC) by the Dead-Time Counter 0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1030   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1031   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1032   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1033  IFX_INLINE void IfxCcu6_enableDelayBypass(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1034  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1035  /** \brief Sets HP_ST immediately to update bit fields EXPH and CURH by EXPHS and CURHS
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1036   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1037   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1038   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1039  IFX_INLINE void IfxCcu6_enableHallPatternShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1040  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1041  /** \brief Enables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1042   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1043   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1044   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1045   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1046  IFX_INLINE void IfxCcu6_enableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1047  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1048  /** \brief Sets multi channel mode available, A write access to MCMOUTS is executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1049   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1050   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1051   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1052  IFX_INLINE void IfxCcu6_enableMultiChannelMode(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1053  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1054  /** \brief Enables the Multi Channel Mode Availability
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1055   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1056   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1057   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1058  IFX_INLINE void IfxCcu6_enableMultiChannelModeAvailability(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1059  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1060  /** \brief Sets MCM_ST immediately to update bit field MCMP by the value of MCMPS.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1061   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1062   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1063   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1064  IFX_INLINE void IfxCcu6_enableMultiChannelPwmPatternShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1065  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1066  /** \brief Enables the shadow transfer T12_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1067   * becomes set while a T12 one match is detected while counting down
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1068   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1069   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1070   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1071  IFX_INLINE void IfxCcu6_enableMultiChannelT12DowncountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1072  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1073  /** \brief Enables the shadow transfer T12_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1074   * becomes set while a T12 period match is detected while counting up
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1075   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1076   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1077   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1078  IFX_INLINE void IfxCcu6_enableMultiChannelT12UpcountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1079  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1080  /** \brief Enables the shadow transfer T13_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1081   * becomes set while a T13 period match is detected
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1082   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1083   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1084   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1085  IFX_INLINE void IfxCcu6_enableMultiChannelT13UpcountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1086  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1087  /** \brief Enables shadow transfers of the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1088   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1089   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1090   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1091   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1092   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1093  IFX_INLINE void IfxCcu6_enableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1094  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1095  /** \brief Enables the single shot-mode of Timers (T12 T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1096   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1097   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1098   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1099   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1100  IFX_INLINE void IfxCcu6_enableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1101  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1102  /** \brief Enables the Inversion of T13 signal for the modulation of the CC6x and COUT6x (x = 0, 1, 2) signals\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1103   * T13 output CC63_O is equal to CC63ST.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1104   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1105   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1106   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1107  IFX_INLINE void IfxCcu6_enableT13InvertedModulation(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1108  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1109  /** \brief Sets Timer12 block available, A write access to T12PR is executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1110   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1111   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1112   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1113   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1114  IFX_INLINE void IfxCcu6_enableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1115  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1116  /** \brief Enables the trap functionality for the corresponding output signals
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1117   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1118   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1119   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1120   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1121  IFX_INLINE void IfxCcu6_enableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1122  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1123  /** \brief Enables the input (pin) function for the trap generation
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1124   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1125   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1126   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1127  IFX_INLINE void IfxCcu6_enableTrapPin(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1128  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1129  /** \brief selects the actual input signal for the capture compare inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1130   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1131   * \param input Input selection, ( CC6x capture input / CTRAP input / CCPOSx input  )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1132   * \param signal selection of actual input signal for the module inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1133   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1134   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1135  IFX_INLINE void IfxCcu6_setCaptureCompareInputSignal(Ifx_CCU6 *ccu6, IfxCcu6_CaptureCompareInput input, IfxCcu6_CaptureCompareInputSignal signal);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1136  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1137  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1138  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1139  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1140  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1141  /** \brief Disables the modulation of the corresponding output signal by PWM pattern generated by the timers T12 and T13.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1142   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1143   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1144   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1145   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1146   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1147  IFX_EXTERN void IfxCcu6_disableModulationOutput(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1148  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1149  /** \brief Disables the selected CCU6 kernel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1150   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1151   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1152   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1153  IFX_EXTERN void IfxCcu6_disableModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1154  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1155  /** \brief Enables the modulation of the corresponding output signal by PWM pattern generated by the timers T12 and T13.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1156   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1157   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1158   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1159   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1160   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1161  IFX_EXTERN void IfxCcu6_enableModulationOutput(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1162  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1163  /** \brief Enables the selected CCU6 kernel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1164   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1165   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1166   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1167  IFX_EXTERN void IfxCcu6_enableModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1168  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1169  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1170  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1171  /** \addtogroup IfxLld_Ccu6_Std_IO
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1172   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1173  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1174  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1175  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1176  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1177  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1178  /** \brief Initialises a CC60 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1179   * \param cc60In CC60 capture input CC60IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1180   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1181   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1182   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1183  IFX_INLINE void IfxCcu6_initCc60InPin(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1184  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1185  /** \brief Initialises a CC60 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1186   * \param cc60Out CC60 compare output CC0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1187   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1188   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1189   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1190   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1191  IFX_INLINE void IfxCcu6_initCc60OutPin(const IfxCcu6_Cc60_Out *cc60Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1192  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1193  /** \brief Initialises a CC61 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1194   * \param cc61In CC61 capture input CC61IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1195   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1196   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1197   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1198  IFX_INLINE void IfxCcu6_initCc61InPin(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1199  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1200  /** \brief Initialises a CC61 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1201   * \param cc61Out CC61 compare output CC1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1202   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1203   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1204   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1205   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1206  IFX_INLINE void IfxCcu6_initCc61OutPin(const IfxCcu6_Cc61_Out *cc61Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1207  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1208  /** \brief Initialises a CC62 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1209   * \param cc62In CC62 capture input CC62IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1210   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1211   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1212   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1213  IFX_INLINE void IfxCcu6_initCc62InPin(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1214  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1215  /** \brief Initialises a CC62 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1216   * \param cc62Out CC62 compare output CC2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1217   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1218   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1219   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1220   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1221  IFX_INLINE void IfxCcu6_initCc62OutPin(const IfxCcu6_Cc62_Out *cc62Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1222  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1223  /** \brief Initialises a CCPOS0 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1224   * \param ccpos0 CC60 capture input CCPOS0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1225   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1228  IFX_INLINE void IfxCcu6_initCcpos0Pin(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1229  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1230  /** \brief Initialises a CCPOS1 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1231   * \param ccpos1 CC61 capture input CCPOS1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1232   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1233   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1235  IFX_INLINE void IfxCcu6_initCcpos1Pin(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1236  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1237  /** \brief Initialises a CCPOS0 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1238   * \param ccpos2 CC62 capture input CCPOS2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1239   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1242  IFX_INLINE void IfxCcu6_initCcpos2Pin(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1243  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1244  /** \brief Initialises a COUT60 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1245   * \param cout60 CC60 compare output COUT0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1246   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1247   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1248   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1249   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1250  IFX_INLINE void IfxCcu6_initCout60Pin(const IfxCcu6_Cout60_Out *cout60, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1251  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1252  /** \brief Initialises a COUT61 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1253   * \param cout61 CC61 compare output COUT1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1254   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1255   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1256   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1257   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1258  IFX_INLINE void IfxCcu6_initCout61Pin(const IfxCcu6_Cout61_Out *cout61, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1259  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1260  /** \brief Initialises a COUT62 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1261   * \param cout62 CC62 compare output COUT2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1262   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1263   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1264   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1265   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1266  IFX_INLINE void IfxCcu6_initCout62Pin(const IfxCcu6_Cout62_Out *cout62, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1267  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1268  /** \brief Initialises a COUT63 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1269   * \param cout63 CC63 compare output COUT3
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1270   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1271   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1272   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1273   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1274  IFX_INLINE void IfxCcu6_initCout63Pin(const IfxCcu6_Cout63_Out *cout63, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1275  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1276  /** \brief Initialises a CTRAP input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1277   * \param ctrap CTRAP input
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1278   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1279   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1280   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1281  IFX_INLINE void IfxCcu6_initCtrapPin(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1282  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1283  /** \brief Initialises a T12HR input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1284   * \param t12hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1285   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1286   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1287   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1288  IFX_INLINE void IfxCcu6_initT12hrPin(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1289  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1290  /** \brief Initialises a T13HR input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1291   * \param t13hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1292   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1293   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1294   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1295  IFX_INLINE void IfxCcu6_initT13hrPin(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1296  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1297  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1298  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1299  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1300  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1301  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1302  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1303  /** \brief Provides functionality for both setting of CC60 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1304   * \param cc60In CC60 capture input CC60IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1305   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1306   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1307   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1308   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1309  IFX_INLINE void IfxCcu6_initCc60InPinWithPadLevel(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1310  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1311  /** \brief Provides functionality for both setting of CC61 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1312   * \param cc61In CC61 capture input CC61IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1313   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1314   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1315   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1316   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1317  IFX_INLINE void IfxCcu6_initCc61InPinWithPadLevel(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1318  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1319  /** \brief Provides functionality for both setting of CC62 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1320   * \param cc62In CC62 capture input CC62IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1321   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1322   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1323   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1324   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1325  IFX_INLINE void IfxCcu6_initCc62InPinWithPadLevel(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1326  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1327  /** \brief Provides functionality for both setting of CCPOS0 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1328   * \param ccpos0 CC60 capture input CCPOS0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1329   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1330   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1331   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1332   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1333  IFX_INLINE void IfxCcu6_initCcpos0PinWithPadLevel(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1334  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1335  /** \brief Provides functionality for both setting of CCPOS1 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1336   * \param ccpos1 CC61 capture input CCPOS1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1337   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1338   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1339   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1340   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1341  IFX_INLINE void IfxCcu6_initCcpos1PinWithPadLevel(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1342  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1343  /** \brief Provides functionality for both setting of CCPOS2 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1344   * \param ccpos2 CC62 capture input CCPOS2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1345   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1346   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1347   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1348   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1349  IFX_INLINE void IfxCcu6_initCcpos2PinWithPadLevel(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1350  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1351  /** \brief Provides functionality for both setting of CTRAP pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1352   * \param ctrap CTRAP input
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1353   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1354   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1355   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1356   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1357  IFX_INLINE void IfxCcu6_initCtrapPinWithPadLevel(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1358  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1359  /** \brief Provides functionality for both setting of T12HR pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1360   * \param t12hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1361   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1362   * \param padDriver Pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1363   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1364   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1365  IFX_INLINE void IfxCcu6_initT12hrPinWithPadLevel(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1366  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1367  /** \brief Provides functionality for both setting of T13HR pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1368   * \param t13hrIn Timer 13 HR input T13HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1369   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1370   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1371   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1372   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1373  IFX_INLINE void IfxCcu6_initT13hrPinWithPadLevel(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1374  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1375  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1376   * \param ccu6 pointer to CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1377   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1378   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1379   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1380  IFX_INLINE void IfxCcu6_setSleepMode(Ifx_CCU6 *ccu6, IfxCcu6_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1381  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1382  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1383  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1384  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1385  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1386  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1387   * \param ccu6 pointer to ccu6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1388   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1389   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1390  IFX_EXTERN void IfxCcu6_resetModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1391  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1392  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1393  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1394  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1395  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1396  IFX_INLINE void IfxCcu6_clearAllInterruptStatusFlags(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1397  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1398      ccu6->ISR.U = 0xFFFF;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1399  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1400  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1401  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1402  IFX_INLINE void IfxCcu6_clearCounter(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1403  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1404      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1405      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1406      tctr4.B.T12RES = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1407      tctr4.B.T13RES = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1408      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1409  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1410  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1411  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1412  IFX_INLINE void IfxCcu6_clearDeadTimeCounters(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1413  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1414      ccu6->TCTR4.B.DTRES = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1415  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1416  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1417  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1418  IFX_INLINE void IfxCcu6_clearInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1419  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1420      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1421      ccu6->ISR.U = mask;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1422  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1423  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1424  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1425  IFX_INLINE void IfxCcu6_clearT12OneNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1426  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1427      ccu6->ISR.B.RT12OM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1428  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1429  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1430  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1431  IFX_INLINE void IfxCcu6_clearT12PeriodNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1432  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1433      ccu6->ISR.B.RT12PM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1434  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1435  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1436  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1437  IFX_INLINE void IfxCcu6_clearT13CompareNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1438  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1439      ccu6->ISR.B.RT13CM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1440  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1441  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1442  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1443  IFX_INLINE void IfxCcu6_disableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1444  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1445      uint32 shift = ((timer * 8) + 3);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1446      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1447      ccu6->TCTR0.U = ccu6->TCTR0.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1448  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1449  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1450  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1451  IFX_INLINE void IfxCcu6_disableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1452  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1453      uint32 shift = (8 + channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1454      uint32 mask  = (1 << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1455      ccu6->T12DTC.U = ccu6->T12DTC.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1456  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1457  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1458  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1459  IFX_INLINE void IfxCcu6_disableDelayBypass(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1460  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1461      ccu6->T12MSEL.B.DBYP = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1462  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1463  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1464  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1465  IFX_INLINE void IfxCcu6_disableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1466  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1467      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1468      ccu6->IEN.U = ccu6->IEN.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1469  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1470  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1471  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1472  IFX_INLINE void IfxCcu6_disableMultiChannelMode(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1473  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1474      ccu6->MODCTR.B.MCMEN = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1475  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1476  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1477  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1478  IFX_INLINE void IfxCcu6_disableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1479  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1480      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1481      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1482      tctr4.B.T12STD = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1483      tctr4.B.T13STD = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1484      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1485  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1486  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1487  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1488  IFX_INLINE void IfxCcu6_disableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1489  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1490      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1491      ccu6->TCTR2.U = ccu6->TCTR2.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1492  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1493  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1494  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1495  IFX_INLINE void IfxCcu6_disableT13InvertedModulation(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1496  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1497      ccu6->CMPSTAT.B.T13IM = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1498  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1499  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1500  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1501  IFX_INLINE void IfxCcu6_disableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1502  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1503      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1504      ccu6->MCFG.U = ccu6->MCFG.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1505  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1506  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1507  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1508  IFX_INLINE void IfxCcu6_disableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1509  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1510      uint32 shift = (8 + channelOut);    // offset at location TRPCTR.8 for output CC60
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1511      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1512      ccu6->TRPCTR.U = ccu6->TRPCTR.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1513  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1514  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1515  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1516  IFX_INLINE void IfxCcu6_disableTrapPin(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1517  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1518      ccu6->TRPCTR.B.TRPPEN = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1519  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1520  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1521  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1522  IFX_INLINE void IfxCcu6_enableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1523  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1524      uint32 shift = ((timer * 8) + 3);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1525      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1526      ccu6->TCTR0.U = ccu6->TCTR0.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1527  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1528  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1529  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1530  IFX_INLINE void IfxCcu6_enableCountEvent(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1531  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1532      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1533      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1534      tctr4.B.T12CNT = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1535      tctr4.B.T13CNT = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1536      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1537  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1538  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1539  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1540  IFX_INLINE void IfxCcu6_enableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1541  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1542      uint32 shift = (8 + channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1543      uint32 mask  = (1 << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1544      ccu6->T12DTC.U = ccu6->T12DTC.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1545  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1546  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1547  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1548  IFX_INLINE void IfxCcu6_enableDelayBypass(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1549  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1550      ccu6->T12MSEL.B.DBYP = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1551  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1552  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1553  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1554  IFX_INLINE void IfxCcu6_enableHallPatternShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1555  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1556      ccu6->MCMOUTS.B.STRHP = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1557  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1558  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1559  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1560  IFX_INLINE void IfxCcu6_enableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1561  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1562      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1563      ccu6->IEN.U = ccu6->IEN.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1564  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1565  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1566  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1567  IFX_INLINE void IfxCcu6_enableMultiChannelMode(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1568  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1569      ccu6->MODCTR.B.MCMEN = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1570  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1571  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1572  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1573  IFX_INLINE void IfxCcu6_enableMultiChannelModeAvailability(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1574  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1575      ccu6->MCFG.B.MCM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1576  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1577  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1578  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1579  IFX_INLINE void IfxCcu6_enableMultiChannelPwmPatternShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1580  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1581      ccu6->MCMOUTS.B.STRMCM = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1582  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1583  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1584  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1585  IFX_INLINE void IfxCcu6_enableMultiChannelT12DowncountingShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1586  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1587      ccu6->MCMCTR.B.STE12D = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1588  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1589  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1590  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1591  IFX_INLINE void IfxCcu6_enableMultiChannelT12UpcountingShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1592  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1593      ccu6->MCMCTR.B.STE12U = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1594  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1595  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1596  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1597  IFX_INLINE void IfxCcu6_enableMultiChannelT13UpcountingShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1598  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1599      ccu6->MCMCTR.B.STE13U = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1600  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1601  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1602  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1603  IFX_INLINE void IfxCcu6_enableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1604  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1605      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1606      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1607      tctr4.B.T12STR = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1608      tctr4.B.T13STR = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1609      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1610  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1611  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1612  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1613  IFX_INLINE void IfxCcu6_enableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1614  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1615      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1616      ccu6->TCTR2.U = ccu6->TCTR2.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1617  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1618  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1619  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1620  IFX_INLINE void IfxCcu6_enableT13InvertedModulation(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1621  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1622      ccu6->CMPSTAT.B.T13IM = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1623  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1624  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1625  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1626  IFX_INLINE void IfxCcu6_enableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1627  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1628      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1629      ccu6->MCFG.U = ccu6->MCFG.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1630  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1631  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1632  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1633  IFX_INLINE void IfxCcu6_enableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1634  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1635      uint32 shift = (8 + channelOut);    // offset at location TRPCTR.8 for output CC60
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1636      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1637      ccu6->TRPCTR.U = ccu6->TRPCTR.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1638  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1639  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1640  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1641  IFX_INLINE void IfxCcu6_enableTrapPin(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1642  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1643      ccu6->TRPCTR.B.TRPPEN = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1644  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1645  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1646  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1647  IFX_INLINE boolean IfxCcu6_getDeadTimeStatus(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1648  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1649      uint32 shift = (12 + channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1650      uint32 mask  = 1 << shift;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1651      return (ccu6->T12DTC.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1652  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1653  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1654  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1655  IFX_INLINE boolean IfxCcu6_getHallPatternSampleState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1656  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1657      uint32 shift = (channel + 3);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1658      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1659      return (ccu6->CMPSTAT.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1660  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1661  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1662  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1663  IFX_INLINE boolean IfxCcu6_getInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1664  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1665      uint32 shift = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1666      return (ccu6->IS.U & shift) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1668  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1669  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1670  IFX_INLINE boolean IfxCcu6_getMultiChannelModeAvailabilityStatus(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1672      return ccu6->MCFG.B.MCM != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1674  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1675  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1676  IFX_INLINE boolean IfxCcu6_getMultiChannelPWMPatternShadowTransferStatus(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1678      return ccu6->MCMOUT.B.R != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1680  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1681  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1682  IFX_INLINE boolean IfxCcu6_getShadowTransferStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1684      uint32 shift = ((timer * 8) + 5);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1685      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1686      return (ccu6->TCTR0.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1687  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1688  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1689  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1690  IFX_INLINE boolean IfxCcu6_getT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1691  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1692      uint32 mask = (1U << channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1693      return (ccu6->CMPSTAT.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1694  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1695  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1696  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1697  IFX_INLINE IfxCcu6_T12CountDirection IfxCcu6_getT12CountDirection(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1698  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1699      return (IfxCcu6_T12CountDirection)((ccu6->TCTR0.B.CDIR) ? TRUE : FALSE);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1700  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1701  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1702  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1703  IFX_INLINE volatile uint32 *IfxCcu6_getT12TimerPointer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1704  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1705      return (volatile uint32 *)&ccu6->T12PR;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1706  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1707  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1708  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1709  IFX_INLINE boolean IfxCcu6_getT13CaptureCompareState(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1710  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1711      return ccu6->CMPSTAT.B.CC63ST != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1712  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1713  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1714  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1715  IFX_INLINE boolean IfxCcu6_getTimerAvailabilityStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1716  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1717      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1718      return (ccu6->MCFG.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1719  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1720  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1721  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1722  IFX_INLINE IfxCcu6_TimerRunStatus IfxCcu6_getTimerRunStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1723  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1724      uint32 shift = ((timer * 8) + 4);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1725      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1726      return (IfxCcu6_TimerRunStatus)((ccu6->TCTR0.U & mask) ? TRUE : FALSE);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1728  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1729  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1730  IFX_INLINE void IfxCcu6_initCc60InPin(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1732      IfxPort_setPinModeInput(cc60In->pin.port, cc60In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1733      IfxCcu6_setCaptureCompareInputSignal(cc60In->module, IfxCcu6_CaptureCompareInput_cC60, (IfxCcu6_CaptureCompareInputSignal)cc60In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1734  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1735  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1736  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1737  IFX_INLINE void IfxCcu6_initCc60InPinWithPadLevel(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1738  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1739      IfxPort_setPinModeInput(cc60In->pin.port, cc60In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1740      IfxPort_setPinPadDriver(cc60In->pin.port, cc60In->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1741      IfxCcu6_setCaptureCompareInputSignal(cc60In->module, IfxCcu6_CaptureCompareInput_cC60, (IfxCcu6_CaptureCompareInputSignal)cc60In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1742  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1743  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1744  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1745  IFX_INLINE void IfxCcu6_initCc60OutPin(const IfxCcu6_Cc60_Out *cc60Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1746  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1747      IfxPort_setPinModeOutput(cc60Out->pin.port, cc60Out->pin.pinIndex, outputMode, cc60Out->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1748      IfxPort_setPinPadDriver(cc60Out->pin.port, cc60Out->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1749  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1750  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1751  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1752  IFX_INLINE void IfxCcu6_initCc61InPin(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1753  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1754      IfxPort_setPinModeInput(cc61In->pin.port, cc61In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1755      IfxCcu6_setCaptureCompareInputSignal(cc61In->module, IfxCcu6_CaptureCompareInput_cC61, (IfxCcu6_CaptureCompareInputSignal)cc61In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1756  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1757  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1758  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1759  IFX_INLINE void IfxCcu6_initCc61InPinWithPadLevel(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1760  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1761      IfxPort_setPinModeInput(cc61In->pin.port, cc61In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1762      IfxPort_setPinPadDriver(cc61In->pin.port, cc61In->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1763      IfxCcu6_setCaptureCompareInputSignal(cc61In->module, IfxCcu6_CaptureCompareInput_cC61, (IfxCcu6_CaptureCompareInputSignal)cc61In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1764  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1765  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1766  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1767  IFX_INLINE void IfxCcu6_initCc61OutPin(const IfxCcu6_Cc61_Out *cc61Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1768  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1769      IfxPort_setPinModeOutput(cc61Out->pin.port, cc61Out->pin.pinIndex, outputMode, cc61Out->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1770      IfxPort_setPinPadDriver(cc61Out->pin.port, cc61Out->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1771  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1772  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1773  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1774  IFX_INLINE void IfxCcu6_initCc62InPin(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1775  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1776      IfxPort_setPinModeInput(cc62In->pin.port, cc62In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1777      IfxCcu6_setCaptureCompareInputSignal(cc62In->module, IfxCcu6_CaptureCompareInput_cC62, (IfxCcu6_CaptureCompareInputSignal)cc62In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1778  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1779  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1780  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1781  IFX_INLINE void IfxCcu6_initCc62InPinWithPadLevel(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1782  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1783      IfxPort_setPinModeInput(cc62In->pin.port, cc62In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1784      IfxPort_setPinPadDriver(cc62In->pin.port, cc62In->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1785      IfxCcu6_setCaptureCompareInputSignal(cc62In->module, IfxCcu6_CaptureCompareInput_cC62, (IfxCcu6_CaptureCompareInputSignal)cc62In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1786  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1787  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1788  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1789  IFX_INLINE void IfxCcu6_initCc62OutPin(const IfxCcu6_Cc62_Out *cc62Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1790  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1791      IfxPort_setPinModeOutput(cc62Out->pin.port, cc62Out->pin.pinIndex, outputMode, cc62Out->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1792      IfxPort_setPinPadDriver(cc62Out->pin.port, cc62Out->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1794  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1795  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1796  IFX_INLINE void IfxCcu6_initCcpos0Pin(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1798      IfxPort_setPinModeInput(ccpos0->pin.port, ccpos0->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1799      IfxCcu6_setCaptureCompareInputSignal(ccpos0->module, IfxCcu6_CaptureCompareInput_cCPOS0, (IfxCcu6_CaptureCompareInputSignal)ccpos0->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1800  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1801  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1802  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1803  IFX_INLINE void IfxCcu6_initCcpos0PinWithPadLevel(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1804  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1805      IfxPort_setPinModeInput(ccpos0->pin.port, ccpos0->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1806      IfxPort_setPinPadDriver(ccpos0->pin.port, ccpos0->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1807      IfxCcu6_setCaptureCompareInputSignal(ccpos0->module, IfxCcu6_CaptureCompareInput_cCPOS0, (IfxCcu6_CaptureCompareInputSignal)ccpos0->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1808  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1809  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1810  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1811  IFX_INLINE void IfxCcu6_initCcpos1Pin(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1812  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1813      IfxPort_setPinModeInput(ccpos1->pin.port, ccpos1->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1814      IfxCcu6_setCaptureCompareInputSignal(ccpos1->module, IfxCcu6_CaptureCompareInput_cCPOS1, (IfxCcu6_CaptureCompareInputSignal)ccpos1->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1815  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1816  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1817  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1818  IFX_INLINE void IfxCcu6_initCcpos1PinWithPadLevel(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1819  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1820      IfxPort_setPinModeInput(ccpos1->pin.port, ccpos1->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1821      IfxPort_setPinPadDriver(ccpos1->pin.port, ccpos1->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1822      IfxCcu6_setCaptureCompareInputSignal(ccpos1->module, IfxCcu6_CaptureCompareInput_cCPOS1, (IfxCcu6_CaptureCompareInputSignal)ccpos1->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1824  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1825  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1826  IFX_INLINE void IfxCcu6_initCcpos2Pin(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1828      IfxPort_setPinModeInput(ccpos2->pin.port, ccpos2->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1829      IfxCcu6_setCaptureCompareInputSignal(ccpos2->module, IfxCcu6_CaptureCompareInput_cCPOS2, (IfxCcu6_CaptureCompareInputSignal)ccpos2->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1830  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1831  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1832  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1833  IFX_INLINE void IfxCcu6_initCcpos2PinWithPadLevel(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1834  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1835      IfxPort_setPinModeInput(ccpos2->pin.port, ccpos2->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1836      IfxPort_setPinPadDriver(ccpos2->pin.port, ccpos2->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1837      IfxCcu6_setCaptureCompareInputSignal(ccpos2->module, IfxCcu6_CaptureCompareInput_cCPOS2, (IfxCcu6_CaptureCompareInputSignal)ccpos2->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1838  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1839  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1840  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1841  IFX_INLINE void IfxCcu6_initCout60Pin(const IfxCcu6_Cout60_Out *cout60, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1842  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1843      IfxPort_setPinModeOutput(cout60->pin.port, cout60->pin.pinIndex, outputMode, cout60->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1844      IfxPort_setPinPadDriver(cout60->pin.port, cout60->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1845  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1846  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1847  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1848  IFX_INLINE void IfxCcu6_initCout61Pin(const IfxCcu6_Cout61_Out *cout61, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1849  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1850      IfxPort_setPinModeOutput(cout61->pin.port, cout61->pin.pinIndex, outputMode, cout61->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1851      IfxPort_setPinPadDriver(cout61->pin.port, cout61->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1852  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1853  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1854  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1855  IFX_INLINE void IfxCcu6_initCout62Pin(const IfxCcu6_Cout62_Out *cout62, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1856  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1857      IfxPort_setPinModeOutput(cout62->pin.port, cout62->pin.pinIndex, outputMode, cout62->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1858      IfxPort_setPinPadDriver(cout62->pin.port, cout62->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1860  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1861  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1862  IFX_INLINE void IfxCcu6_initCout63Pin(const IfxCcu6_Cout63_Out *cout63, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1864      IfxPort_setPinModeOutput(cout63->pin.port, cout63->pin.pinIndex, outputMode, cout63->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1865      IfxPort_setPinPadDriver(cout63->pin.port, cout63->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1866  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1867  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1868  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1869  IFX_INLINE void IfxCcu6_initCtrapPin(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1870  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1871      IfxPort_setPinModeInput(ctrap->pin.port, ctrap->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1872      IfxCcu6_setCaptureCompareInputSignal(ctrap->module, IfxCcu6_CaptureCompareInput_cTRAP, (IfxCcu6_CaptureCompareInputSignal)ctrap->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1873  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1874  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1875  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1876  IFX_INLINE void IfxCcu6_initCtrapPinWithPadLevel(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1877  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1878      IfxPort_setPinModeInput(ctrap->pin.port, ctrap->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1879      IfxPort_setPinPadDriver(ctrap->pin.port, ctrap->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1880      IfxCcu6_setCaptureCompareInputSignal(ctrap->module, IfxCcu6_CaptureCompareInput_cTRAP, (IfxCcu6_CaptureCompareInputSignal)ctrap->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1881  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1882  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1883  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1884  IFX_INLINE void IfxCcu6_initT12hrPin(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1885  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1886      IfxPort_setPinModeInput(t12hrIn->pin.port, t12hrIn->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1887      IfxCcu6_setT12InputSignal(t12hrIn->module, t12hrIn);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1888  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1889  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1890  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1891  IFX_INLINE void IfxCcu6_initT12hrPinWithPadLevel(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1892  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1893      IfxPort_setPinModeInput(t12hrIn->pin.port, t12hrIn->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1894      IfxPort_setPinPadDriver(t12hrIn->pin.port, t12hrIn->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1895      IfxCcu6_setT12InputSignal(t12hrIn->module, t12hrIn);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1896  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1897  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1898  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1899  IFX_INLINE void IfxCcu6_initT13hrPin(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1900  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1901      IfxPort_setPinModeInput(t13hrIn->pin.port, t13hrIn->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1902      IfxCcu6_setT13InputSignal(t13hrIn->module, t13hrIn);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1903  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1904  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1905  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1906  IFX_INLINE void IfxCcu6_initT13hrPinWithPadLevel(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1907  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1908      IfxPort_setPinModeInput(t13hrIn->pin.port, t13hrIn->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1909      IfxPort_setPinPadDriver(t13hrIn->pin.port, t13hrIn->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1910      IfxCcu6_setT13InputSignal(t13hrIn->module, t13hrIn);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1911  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1912  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1913  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1914  IFX_INLINE boolean IfxCcu6_isModuleEnabled(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1915  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1916      return ccu6->CLC.B.DISS == 0;
	ld.bu	d15,[a15]
.L405:
	jnz.t	d15:1,.L13
.L667:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   154      {}
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   155  }
	ret
.L402:
	
__IfxCcu6_enableModule_function_end:
	.size	IfxCcu6_enableModule,__IfxCcu6_enableModule_function_end-IfxCcu6_enableModule
.L215:
	; End of function
	
	.sdecl	'.text.IfxCcu6.IfxCcu6_getAddress',code,cluster('IfxCcu6_getAddress')
	.sect	'.text.IfxCcu6.IfxCcu6_getAddress'
	.align	2
	
	.global	IfxCcu6_getAddress

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   156  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   157  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   158  Ifx_CCU6 *IfxCcu6_getAddress(IfxCcu6_Index ccu6)
; Function IfxCcu6_getAddress
.L81:
IfxCcu6_getAddress:	.type	func

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   159  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   160      Ifx_CCU6 *module;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   161  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   162      if (ccu6 < IFXCCU6_NUM_MODULES)
	jge	d4,#2,.L14
.L595:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   163      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   164          module = (Ifx_CCU6 *)IfxCcu6_cfg_indexMap[ccu6].module;
	movh.a	a15,#@his(IfxCcu6_cfg_indexMap)
	lea	a15,[a15]@los(IfxCcu6_cfg_indexMap)
.L596:
	addsc.a	a15,a15,d4,#3
.L597:
	ld.a	a2,[a15]
.L421:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   165      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   166      else
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   167      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   168          module = NULL_PTR;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   169      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   170  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   171      return module;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   172  }
	ret
.L14:
	mov.a	a2,#0
.L422:
	ret
.L359:
	
__IfxCcu6_getAddress_function_end:
	.size	IfxCcu6_getAddress,__IfxCcu6_getAddress_function_end-IfxCcu6_getAddress
.L170:
	; End of function
	
	.sdecl	'.text.IfxCcu6.IfxCcu6_getCaptureRegisterValue',code,cluster('IfxCcu6_getCaptureRegisterValue')
	.sect	'.text.IfxCcu6.IfxCcu6_getCaptureRegisterValue'
	.align	2
	
	.global	IfxCcu6_getCaptureRegisterValue

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   173  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   174  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   175  uint32 IfxCcu6_getCaptureRegisterValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; Function IfxCcu6_getCaptureRegisterValue
.L83:
IfxCcu6_getCaptureRegisterValue:	.type	func

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   176  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   177      return ccu6->CC6R[channel].U;
	addsc.a	a15,a4,d4,#2
.L602:
	ld.w	d2,[a15]48
.L603:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   178  }
	ret
.L363:
	
__IfxCcu6_getCaptureRegisterValue_function_end:
	.size	IfxCcu6_getCaptureRegisterValue,__IfxCcu6_getCaptureRegisterValue_function_end-IfxCcu6_getCaptureRegisterValue
.L175:
	; End of function
	
	.sdecl	'.text.IfxCcu6.IfxCcu6_getCaptureShadowRegisterValue',code,cluster('IfxCcu6_getCaptureShadowRegisterValue')
	.sect	'.text.IfxCcu6.IfxCcu6_getCaptureShadowRegisterValue'
	.align	2
	
	.global	IfxCcu6_getCaptureShadowRegisterValue

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   179  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   180  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   181  uint32 IfxCcu6_getCaptureShadowRegisterValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; Function IfxCcu6_getCaptureShadowRegisterValue
.L85:
IfxCcu6_getCaptureShadowRegisterValue:	.type	func

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   182  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   183      return ccu6->CC6SR[channel].U;
	addsc.a	a15,a4,d4,#2
.L608:
	ld.w	d2,[a15]64
.L609:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   184  }
	ret
.L366:
	
__IfxCcu6_getCaptureShadowRegisterValue_function_end:
	.size	IfxCcu6_getCaptureShadowRegisterValue,__IfxCcu6_getCaptureShadowRegisterValue_function_end-IfxCcu6_getCaptureShadowRegisterValue
.L180:
	; End of function
	
	.sdecl	'.text.IfxCcu6.IfxCcu6_getIndex',code,cluster('IfxCcu6_getIndex')
	.sect	'.text.IfxCcu6.IfxCcu6_getIndex'
	.align	2
	
	.global	IfxCcu6_getIndex

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   185  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   186  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   187  IfxCcu6_Index IfxCcu6_getIndex(Ifx_CCU6 *ccu6)
; Function IfxCcu6_getIndex
.L87:
IfxCcu6_getIndex:	.type	func

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   188  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   189      uint32        index;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   190      IfxCcu6_Index result;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   191  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   192      result = IfxCcu6_Index_none;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   193  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   194      for (index = 0; index < IFXCCU6_NUM_MODULES; index++)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   195      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   196          if (IfxCcu6_cfg_indexMap[index].module == ccu6)
	mov	d2,#-1
	movh.a	a15,#@his(IfxCcu6_cfg_indexMap)
.L423:
	lea	a15,[a15]@los(IfxCcu6_cfg_indexMap)
.L614:
	mov.a	a2,#1
.L19:
	ld.a	a5,[a15]
.L615:
	jne.a	a5,a4,.L20
.L616:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   197          {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   198              result = (IfxCcu6_Index)IfxCcu6_cfg_indexMap[index].index;
	ld.w	d15,[a15]4
.L617:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   199              break;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   200          }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   201      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   202  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   203      return result;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   204  }
	extr	d2,d15,#0,#8
	ret
.L20:
	lea	a15,[a15]8
	loop	a2,.L19
.L618:
	ret
.L369:
	
__IfxCcu6_getIndex_function_end:
	.size	IfxCcu6_getIndex,__IfxCcu6_getIndex_function_end-IfxCcu6_getIndex
.L185:
	; End of function
	
	.sdecl	'.text.IfxCcu6.IfxCcu6_getSrcAddress',code,cluster('IfxCcu6_getSrcAddress')
	.sect	'.text.IfxCcu6.IfxCcu6_getSrcAddress'
	.align	2
	
	.global	IfxCcu6_getSrcAddress

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   205  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   206  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   207  volatile Ifx_SRC_SRCR *IfxCcu6_getSrcAddress(Ifx_CCU6 *ccu6, IfxCcu6_ServiceRequest serviceRequest)
; Function IfxCcu6_getSrcAddress
.L89:
IfxCcu6_getSrcAddress:	.type	func

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   208  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   209      sint32                 moduleIdx = IfxCcu6_getIndex(ccu6);
	mov	d15,d4
	call	IfxCcu6_getIndex
.L424:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   210      volatile Ifx_SRC_SRCR *srcr;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   211  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   212      srcr = &(MODULE_SRC.CCU6.CCU[moduleIdx].SR[0]);
	ld.w	d0,.2.cnt
.L623:
	sha	d2,#4
.L425:
	add	d0,d2
.L624:
	mov.a	a15,d0
.L625:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   213  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   214      return &(srcr[serviceRequest]);
	addsc.a	a2,a15,d15,#2
.L626:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   215  }
	ret
.L374:
	
__IfxCcu6_getSrcAddress_function_end:
	.size	IfxCcu6_getSrcAddress,__IfxCcu6_getSrcAddress_function_end-IfxCcu6_getSrcAddress
.L190:
	; End of function
	
	.sdecl	'.text.IfxCcu6.IfxCcu6_readTimer',code,cluster('IfxCcu6_readTimer')
	.sect	'.text.IfxCcu6.IfxCcu6_readTimer'
	.align	2
	
	.global	IfxCcu6_readTimer

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   216  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   217  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   218  uint32 IfxCcu6_readTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; Function IfxCcu6_readTimer
.L91:
IfxCcu6_readTimer:	.type	func

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   219  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   220      uint32 result = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   221  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   222      if (timer != IfxCcu6_TimerId_t13)
	jeq	d4,#1,.L24
.L631:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   223      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   224          result = ccu6->T12.U;
	ld.w	d2,[a4]32
.L426:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   225      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   226      else
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   227      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   228          result = ccu6->T13.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   229      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   230  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   231      return result;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   232  }
	ret
.L24:
	ld.w	d2,[a4]80
.L427:
	ret
.L379:
	
__IfxCcu6_readTimer_function_end:
	.size	IfxCcu6_readTimer,__IfxCcu6_readTimer_function_end-IfxCcu6_readTimer
.L195:
	; End of function
	
	.sdecl	'.text.IfxCcu6.IfxCcu6_resetModule',code,cluster('IfxCcu6_resetModule')
	.sect	'.text.IfxCcu6.IfxCcu6_resetModule'
	.align	2
	
	.global	IfxCcu6_resetModule

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   233  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   234  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   235  void IfxCcu6_resetModule(Ifx_CCU6 *ccu6)
; Function IfxCcu6_resetModule
.L93:
IfxCcu6_resetModule:	.type	func
	mov.aa	a15,a4
.L429:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   236  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   237      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L428:
	mov	d8,d2
.L431:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   238  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   239      IfxScuWdt_clearCpuEndinit(passwd);
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L430:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   240      ccu6->KRST0.B.RST = 1;          /* Only if both Kernel reset bits are set a reset is executed */
	ld.bu	d15,[a15]244
.L672:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   241      ccu6->KRST1.B.RST = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   242      IfxScuWdt_setCpuEndinit(passwd);
	mov	d4,d8
.L432:
	or	d15,#1
	st.b	[a15]244,d15
.L673:
	ld.bu	d15,[a15]240
.L674:
	or	d15,#1
	st.b	[a15]240,d15
.L675:
	call	IfxScuWdt_setCpuEndinit

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   243  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   244      while (0 == ccu6->KRST0.B.RSTSTAT)  /* Wait until reset is executed */
.L27:
	ld.bu	d15,[a15]244
.L676:
	jz.t	d15:1,.L27
.L677:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   245  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   246      {}
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   247  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   248      IfxScuWdt_clearCpuEndinit(passwd);
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L678:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   249      ccu6->KRSTCLR.B.CLR = 1;            /* Clear Kernel reset status bit */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   250      IfxScuWdt_setCpuEndinit(passwd);
	mov	d4,d8
	ld.bu	d15,[a15]236
.L433:
	or	d15,#1
	st.b	[a15]236,d15
.L679:
	j	IfxScuWdt_setCpuEndinit
.L407:
	
__IfxCcu6_resetModule_function_end:
	.size	IfxCcu6_resetModule,__IfxCcu6_resetModule_function_end-IfxCcu6_resetModule
.L220:
	; End of function
	
	.sdecl	'.text.IfxCcu6.IfxCcu6_routeInterruptNode',code,cluster('IfxCcu6_routeInterruptNode')
	.sect	'.text.IfxCcu6.IfxCcu6_routeInterruptNode'
	.align	2
	
	.global	IfxCcu6_routeInterruptNode

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   251  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   252  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   253  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   254  void IfxCcu6_routeInterruptNode(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source, IfxCcu6_ServiceRequest serviceRequest)
; Function IfxCcu6_routeInterruptNode
.L95:
IfxCcu6_routeInterruptNode:	.type	func

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   255  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   256      if ((source == IfxCcu6_InterruptSource_cc60RisingEdge) || (source == IfxCcu6_InterruptSource_cc60FallingEdge))
	jeq	d4,#0,.L28
.L471:
	jne	d4,#1,.L29
.L28:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   257      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   258          ccu6->INP.B.INPCC60 = serviceRequest;
	ld.bu	d15,[a4]172
.L472:
	insert	d15,d15,d5,#0,#2
	j	.L30
.L29:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   259      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   260      else if ((source == IfxCcu6_InterruptSource_cc61RisingEdge) || (source == IfxCcu6_InterruptSource_cc61FallingEdge))
	jeq	d4,#2,.L31
.L473:
	jne	d4,#3,.L32
.L31:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   261      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   262          ccu6->INP.B.INPCC61 = serviceRequest;
	ld.bu	d15,[a4]172
.L474:
	insert	d15,d15,d5,#2,#2
	j	.L33
.L32:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   263      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   264      else if ((source == IfxCcu6_InterruptSource_cc62RisingEdge) || (source == IfxCcu6_InterruptSource_cc62FallingEdge))
	jeq	d4,#4,.L34
.L475:
	jne	d4,#5,.L35
.L34:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   265      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   266          ccu6->INP.B.INPCC62 = serviceRequest;
	ld.bu	d15,[a4]172
.L476:
	insert	d15,d15,d5,#4,#2
	j	.L36
.L35:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   267      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   268      else if ((source == IfxCcu6_InterruptSource_correctHallEvent))
	mov	d15,#12
.L477:
	jne	d15,d4,.L37
.L478:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   269      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   270          ccu6->INP.B.INPCHE = serviceRequest;
	ld.bu	d15,[a4]172
.L479:
	insert	d15,d15,d5,#6,#2
.L36:
.L33:
.L30:
	st.b	[a4]172,d15
.L480:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   271      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   272      else if ((source == IfxCcu6_InterruptSource_trap) || (source == IfxCcu6_InterruptSource_wrongHallEvent))
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   273      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   274          ccu6->INP.B.INPERR = serviceRequest;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   275      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   276      else if ((source == IfxCcu6_InterruptSource_t12OneMatch) || (source == IfxCcu6_InterruptSource_t12PeriodMatch))
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   277      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   278          ccu6->INP.B.INPT12 = serviceRequest;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   279      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   280      else if ((source == IfxCcu6_InterruptSource_t13CompareMatch) || (source == IfxCcu6_InterruptSource_t13PeriodMatch))
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   281      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   282          ccu6->INP.B.INPT13 = serviceRequest;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   283      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   284      else
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   285      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   286          __debug();
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   287      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   288  }
	ret
.L37:
	mov	d15,#10
.L481:
	jeq	d15,d4,.L39
.L482:
	mov	d15,#13
.L483:
	jne	d15,d4,.L40
.L39:
	ld.bu	d15,[a4]173
.L484:
	insert	d15,d15,d5,#0,#2
	j	.L41
.L40:
	jeq	d4,#6,.L42
.L485:
	jne	d4,#7,.L43
.L42:
	ld.bu	d15,[a4]173
.L486:
	insert	d15,d15,d5,#2,#2
	j	.L44
.L43:
	mov	d15,#8
.L487:
	jeq	d15,d4,.L45
.L488:
	mov	d15,#9
.L489:
	jne	d15,d4,.L46
.L45:
	ld.bu	d15,[a4]173
.L490:
	insert	d15,d15,d5,#4,#2
.L44:
.L41:
	st.b	[a4]173,d15
.L491:
	ret
.L46:
	debug
.L492:
	ret
.L242:
	
__IfxCcu6_routeInterruptNode_function_end:
	.size	IfxCcu6_routeInterruptNode,__IfxCcu6_routeInterruptNode_function_end-IfxCcu6_routeInterruptNode
.L125:
	; End of function
	
	.sdecl	'.text.IfxCcu6.IfxCcu6_setOutputPassiveLevel',code,cluster('IfxCcu6_setOutputPassiveLevel')
	.sect	'.text.IfxCcu6.IfxCcu6_setOutputPassiveLevel'
	.align	2
	
	.global	IfxCcu6_setOutputPassiveLevel

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   289  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   290  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   291  void IfxCcu6_setOutputPassiveLevel(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut, boolean state)
; Function IfxCcu6_setOutputPassiveLevel
.L97:
IfxCcu6_setOutputPassiveLevel:	.type	func

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   292  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   293      if (channelOut != IfxCcu6_ChannelOut_cout3)
	jeq	d4,#6,.L48
.L254:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   294      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   295          uint32 shift = channelOut;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   296          uint32 mask  = (1 << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   297          ccu6->PSLR.U = (ccu6->PSLR.U & ~mask) | ((uint32)state << shift);
	mov	d0,#1
	ld.w	d15,[a4]136
.L497:
	sha	d0,d0,d4
.L498:
	mov	d1,#-1
	xor	d0,d1
.L499:
	and	d15,d0
.L500:
	sh	d5,d5,d4
.L434:
	or	d15,d5
	st.w	[a4]136,d15
.L255:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   298      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   299      else
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   300      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   301          ccu6->PSLR.B.PSL63 = state;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   302      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   303  }
	ret
.L48:
	ld.bu	d15,[a4]136
.L501:
	insert	d15,d15,d5,#7,#1
	st.b	[a4]136,d15
.L502:
	ret
.L248:
	
__IfxCcu6_setOutputPassiveLevel_function_end:
	.size	IfxCcu6_setOutputPassiveLevel,__IfxCcu6_setOutputPassiveLevel_function_end-IfxCcu6_setOutputPassiveLevel
.L130:
	; End of function
	
	.sdecl	'.text.IfxCcu6.IfxCcu6_setT12CaptureCompareState',code,cluster('IfxCcu6_setT12CaptureCompareState')
	.sect	'.text.IfxCcu6.IfxCcu6_setT12CaptureCompareState'
	.align	2
	
	.global	IfxCcu6_setT12CaptureCompareState

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   304  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   305  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   306  void IfxCcu6_setT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, IfxCcu6_CaptureCompareState state)
; Function IfxCcu6_setT12CaptureCompareState
.L99:
IfxCcu6_setT12CaptureCompareState:	.type	func
	mov	d15,d5
.L435:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   307  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   308      uint32 mask = (0x0101U << channel);
	mov	d0,#257
.L507:
	sh	d0,d0,d4
.L437:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   309      uint32 mode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   310  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   311      if (state == IfxCcu6_CaptureCompareState_set)
	jne	d15,#0,.L50
.L508:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   312      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   313          mode             = 0x0001U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   314          ccu6->CMPMODIF.U = (ccu6->CMPMODIF.U & ~mask) | (mode << channel);
	mov	d2,#-1
	ld.w	d1,[a4]100
.L509:
	xor	d2,d0
.L510:
	and	d1,d2
.L511:
	mov	d2,#1
.L512:
	sh	d2,d2,d4
.L513:
	or	d1,d2
	st.w	[a4]100,d1
.L50:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   315      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   316  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   317      if (state == IfxCcu6_CaptureCompareState_clear)
	jne	d15,#1,.L51
.L514:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   318      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   319          mode             = 0x0100U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   320          ccu6->CMPMODIF.U = (ccu6->CMPMODIF.U & ~mask) | (mode << channel);
	mov	d2,#-1
	ld.w	d1,[a4]100
.L515:
	xor	d2,d0
.L516:
	and	d1,d2
.L517:
	mov	d2,#256
.L518:
	sh	d2,d2,d4
.L519:
	or	d1,d2
	st.w	[a4]100,d1
.L51:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   321      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   322  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   323      if (state == IfxCcu6_CaptureCompareState_toggle)
	jne	d15,#2,.L52
.L520:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   324      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   325          mode             = 0x0101U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   326          ccu6->CMPMODIF.U = (ccu6->CMPMODIF.U & ~mask) | (mode << channel);
	mov	d1,#-1
	ld.w	d15,[a4]100
.L436:
	xor	d0,d1
.L438:
	and	d15,d0
.L521:
	mov	d0,#257
.L522:
	sh	d0,d0,d4
.L523:
	or	d15,d0
	st.w	[a4]100,d15
.L52:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   327      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   328  }
	ret
.L258:
	
__IfxCcu6_setT12CaptureCompareState_function_end:
	.size	IfxCcu6_setT12CaptureCompareState,__IfxCcu6_setT12CaptureCompareState_function_end-IfxCcu6_setT12CaptureCompareState
.L135:
	; End of function
	
	.sdecl	'.text.IfxCcu6.IfxCcu6_setT12CompareValue',code,cluster('IfxCcu6_setT12CompareValue')
	.sect	'.text.IfxCcu6.IfxCcu6_setT12CompareValue'
	.align	2
	
	.global	IfxCcu6_setT12CompareValue

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   329  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   330  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   331  void IfxCcu6_setT12CompareValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, uint16 value)
; Function IfxCcu6_setT12CompareValue
.L101:
IfxCcu6_setT12CompareValue:	.type	func

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   332  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   333      ccu6->CC6SR[channel].B.CCS = value;
	addsc.a	a15,a4,d4,#2
.L528:
	st.h	[a15]64,d5
.L529:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   334  }
	ret
.L265:
	
__IfxCcu6_setT12CompareValue_function_end:
	.size	IfxCcu6_setT12CompareValue,__IfxCcu6_setT12CompareValue_function_end-IfxCcu6_setT12CompareValue
.L140:
	; End of function
	
	.sdecl	'.text.IfxCcu6.IfxCcu6_setT12Frequency',code,cluster('IfxCcu6_setT12Frequency')
	.sect	'.text.IfxCcu6.IfxCcu6_setT12Frequency'
	.align	2
	
	.global	IfxCcu6_setT12Frequency

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   335  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   336  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   337  float32 IfxCcu6_setT12Frequency(Ifx_CCU6 *ccu6, float32 frequency, Ifx_TimerValue period, IfxCcu6_T12CountMode countMode)
; Function IfxCcu6_setT12Frequency
.L103:
IfxCcu6_setT12Frequency:	.type	func
	mov	d10,d6
	mov.aa	a15,a4
.L440:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   338  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   339      uint16  prescaler;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   340      float32 freqCC6   = IfxScuCcu_getSpbFrequency();
	mov	e8,d4,d5
	call	IfxScuCcu_getSpbFrequency
.L439:
	mov	d11,d2
.L442:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   341      uint16  divFactor = freqCC6 / frequency;
	div.f	d4,d11,d9
	call	__f_ftous
.L441:
	mov	d15,d2
.L443:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   342  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   343      for (prescaler = 0; prescaler < 16; prescaler++)
	mov	d1,#0
	mov.a	a2,#15
.L53:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   344      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   345          divFactor = divFactor / 2;
	sha	d15,#-1
.L534:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   346  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   347          if (divFactor == (uint8)0)
	jeq	d15,#0,.L54
.L535:
	add	d1,#1
	loop	a2,.L53

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   348          {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   349              break;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   350          }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   351      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   352  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   353      if (prescaler < 16)
.L54:
	mov	d15,#16
.L444:
	jge.u	d1,d15,.L55
.L279:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   354      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   355          uint16                  periodVal;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   356          boolean                 additionalPrescaler;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   357          IfxCcu6_TimerInputClock clockInput;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   358  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   359          periodVal = (uint16)((countMode != IfxCcu6_T12CountMode_edgeAligned) ? ((period / 2) - 1) : (period - 1));
	jeq	d10,#0,.L56
.L536:
	sh	d8,#-1
.L56:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     2   * \file IfxCcu6.h
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     3   * \brief CCU6  basic functionality
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     4   * \ingroup IfxLld_Ccu6
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     5   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     8   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     9   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    11   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    16   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    18   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    25   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    32   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    40   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    41   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    42   * \defgroup IfxLld_Ccu6_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    43   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    44   * \defgroup IfxLld_Ccu6_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    45   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    46   * \defgroup IfxLld_Ccu6_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    47   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    48   * \defgroup IfxLld_Ccu6_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    49   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    50   * \defgroup IfxLld_Ccu6_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    51   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    52   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    53  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    54  #ifndef IFXCCU6_H
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    55  #define IFXCCU6_H 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    56  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    57  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    58  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    59  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    60  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    61  #include "_Impl/IfxCcu6_cfg.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    62  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    63  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    64  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    65  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    66  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    67  #include "_PinMap/IfxCcu6_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    68  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    69  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    70  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    72  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    73  /** \addtogroup IfxLld_Ccu6_Std_Enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    74   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    75  /** \brief Input selection, ( CC6x capture input / CTRAP input / CCPOSx input )\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    76   * Definition in Ifx_CCU.PISEL0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    77   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    78  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    79  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    80      IfxCcu6_CaptureCompareInput_cC60   = IFX_CCU6_PISEL0_ISCC60_OFF,  /**< \brief CC60 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    81      IfxCcu6_CaptureCompareInput_cC61   = IFX_CCU6_PISEL0_ISCC61_OFF,  /**< \brief CC61 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    82      IfxCcu6_CaptureCompareInput_cC62   = IFX_CCU6_PISEL0_ISCC62_OFF,  /**< \brief CC62 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    83      IfxCcu6_CaptureCompareInput_cTRAP  = IFX_CCU6_PISEL0_ISTRP_OFF,   /**< \brief CTRAP input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    84      IfxCcu6_CaptureCompareInput_cCPOS0 = IFX_CCU6_PISEL0_ISPOS0_OFF,  /**< \brief CCPOS0 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    85      IfxCcu6_CaptureCompareInput_cCPOS1 = IFX_CCU6_PISEL0_ISPOS1_OFF,  /**< \brief CCPOS1 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    86      IfxCcu6_CaptureCompareInput_cCPOS2 = IFX_CCU6_PISEL0_ISPOS2_OFF   /**< \brief CCPOS2 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    87  } IfxCcu6_CaptureCompareInput;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    88  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    89  /** \brief Selection of actual input signal for the capture compare inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    90   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    91  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    92  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    93      IfxCcu6_CaptureCompareInputSignal_a = 0,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    94      IfxCcu6_CaptureCompareInputSignal_b = 1,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    95      IfxCcu6_CaptureCompareInputSignal_c = 2,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    96      IfxCcu6_CaptureCompareInputSignal_d = 3   /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    97  } IfxCcu6_CaptureCompareInputSignal;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    98  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    99  /** \brief capture/compare state to set / clear the CC6xST-bits
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   100   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   101  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   102  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   103      IfxCcu6_CaptureCompareState_set    = 0, /**< \brief Bit CC6xST is set */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   104      IfxCcu6_CaptureCompareState_clear  = 1, /**< \brief Bit CC6xST is cleared */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   105      IfxCcu6_CaptureCompareState_toggle = 2  /**< \brief Bit CC6xST is toggled */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   106  } IfxCcu6_CaptureCompareState;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   107  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   108  /** \brief Capture compare output pins
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   109   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   110  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   111  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   112      IfxCcu6_ChannelOut_cc0   = 0,  /**< \brief CC60 compare output CC0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   113      IfxCcu6_ChannelOut_cout0 = 1,  /**< \brief CC60 compare output COUT0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   114      IfxCcu6_ChannelOut_cc1   = 2,  /**< \brief CC61 compare output CC1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   115      IfxCcu6_ChannelOut_cout1 = 3,  /**< \brief CC61 compare output COUT1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   116      IfxCcu6_ChannelOut_cc2   = 4,  /**< \brief CC62 compare output CC2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   117      IfxCcu6_ChannelOut_cout2 = 5,  /**< \brief CC62 compare output COUT2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   118      IfxCcu6_ChannelOut_cout3 = 6   /**< \brief CC63 compare output COUT3 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   119  } IfxCcu6_ChannelOut;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   120  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   121  /** \brief Defines the input event leading to a counting action of the timer (T12 / T13)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   122   * Definition in Ifx_CCU.PISEL2.B.ISCNT12 / Ifx_CCU.PISEL2.B.ISCNT13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   123   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   124  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   125  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   126      IfxCcu6_CountingInputMode_internal        = 0, /**< \brief The T1x prescaler generates the counting events,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   127                                                      * Bit TCTR4.T1xCNT is not taken into account. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   128      IfxCcu6_CountingInputMode_manual          = 1, /**< \brief Bit TCTR4.T1xCNT written with 1 is a counting
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   129                                                      * event. The T1x prescaler is not taken into account */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   130      IfxCcu6_CountingInputMode_externalRising  = 2, /**< \brief The timer T1x is counting each rising edge
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   131                                                      * detected in the selected T1xHR signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   132      IfxCcu6_CountingInputMode_externalFalling = 3  /**< \brief The timer T1x is counting each falling edge
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   133                                                      * detected in the selected T1xHR signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   134  } IfxCcu6_CountingInputMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   135  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   136  /** \brief Controls whether the source signal for the sampling of the Hall input pattern (selected by HSYNC) is delayed by the Dead-Time Counter 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   137   * Definition in Ifx_CCU.T12MSEL.B.DBYP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   138   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   139  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   140  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   141      IfxCcu6_DelayBypass_notActive = 0,  /**< \brief Dead-Time Counter 0 is generating a delay after
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   142                                           * the source signal becomes active */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   143      IfxCcu6_DelayBypass_active    = 1   /**< \brief Dead-Time Counter 0 is not used for a delay */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   144  } IfxCcu6_DelayBypass;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   145  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   146  /** \brief Defines the event of signal T1xHR that can set the run bit T1xR by HW\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   147   * Definition in Ifx_CCU.TCTR2.B.T12RSEL / IIfx_CCU.TCTR2.B.T13RSEL
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   148   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   149  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   150  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   151      IfxCcu6_ExternalTriggerMode_disable     = 0,  /**< \brief The external setting of T1xR is disabled */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   152      IfxCcu6_ExternalTriggerMode_risingEdge  = 1,  /**< \brief Bit T1xR is set if a rising edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   153                                                     * detected. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   154      IfxCcu6_ExternalTriggerMode_fallingEdge = 2,  /**< \brief Bit T1xR is set if a falling edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   155                                                     * detected. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   156      IfxCcu6_ExternalTriggerMode_anyEdge     = 3   /**< \brief Bit T1xR is set if an edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   157                                                     * detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   158  } IfxCcu6_ExternalTriggerMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   159  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   160  /** \brief Defines the source for the sampling of the Hall input pattern and the comparison to the current and the expected Hall pattern bit fields\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   161   * Definition in Ifx_CCU.T12MSEL.HSYNC
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   162   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   163  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   164  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   165      IfxCcu6_HallSensorTriggerMode_permanentCheck    = 0,  /**< \brief Any edge at any of the inputs CCPOSx, independent from any PWM
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   166                                                             * signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   167      IfxCcu6_HallSensorTriggerMode_cM63              = 1,  /**< \brief A T13 Compare-Match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   168      IfxCcu6_HallSensorTriggerMode_t13PM             = 2,  /**< \brief A T13 Period-Match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   169      IfxCcu6_HallSensorTriggerMode_off               = 3,  /**< \brief Hall sampling triggered by HW sources is switched off */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   170      IfxCcu6_HallSensorTriggerMode_t12PMCountingUp   = 4,  /**< \brief A T12 Period-Match while counting up (T12_PM and CDIR = 0) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   171      IfxCcu6_HallSensorTriggerMode_t12OMCountingDown = 5,  /**< \brief A T12 One-Match while counting down (T12_PM and CDIR = 1) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   172      IfxCcu6_HallSensorTriggerMode_cM61CountingUp    = 6,  /**< \brief A T12 Compare-Match of compare channel CC61 while counting up (CM_61 and CDIR = 0) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   173      IfxCcu6_HallSensorTriggerMode_cM61CountingDown  = 7   /**< \brief A T12 Compare-Match of compare channel CC61 while counting down (CM_61 and CDIR = 1) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   174  } IfxCcu6_HallSensorTriggerMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   175  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   176  /** \brief Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   177   * Description in Ifx_CCU.IEN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   178   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   179  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   180  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   181      IfxCcu6_InterruptSource_cc60RisingEdge   = IFX_CCU6_IS_ICC60R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   182                                                                          * enable for channel CC60 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   183      IfxCcu6_InterruptSource_cc60FallingEdge  = IFX_CCU6_IS_ICC60F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   184                                                                          * enable for channel CC60 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   185      IfxCcu6_InterruptSource_cc61RisingEdge   = IFX_CCU6_IS_ICC61R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   186                                                                          * enable for channel CC61 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   187      IfxCcu6_InterruptSource_cc61FallingEdge  = IFX_CCU6_IS_ICC61F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   188                                                                          * enable for channel CC61 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   189      IfxCcu6_InterruptSource_cc62RisingEdge   = IFX_CCU6_IS_ICC62R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   190                                                                          * enable for channel CC62 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   191      IfxCcu6_InterruptSource_cc62FallingEdge  = IFX_CCU6_IS_ICC62F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   192                                                                          * enable for channel CC62 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   193      IfxCcu6_InterruptSource_t12OneMatch      = IFX_CCU6_IS_T12OM_OFF,  /**< \brief Interrupt enable for T12 one-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   194      IfxCcu6_InterruptSource_t12PeriodMatch   = IFX_CCU6_IS_T12PM_OFF,  /**< \brief Interrupt enable for T12 period-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   195      IfxCcu6_InterruptSource_t13CompareMatch  = IFX_CCU6_IS_T13CM_OFF,  /**< \brief Interrupt enable for T13 compare-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   196      IfxCcu6_InterruptSource_t13PeriodMatch   = IFX_CCU6_IS_T13PM_OFF,  /**< \brief Interrupt enable for T13 period-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   197      IfxCcu6_InterruptSource_trap             = IFX_CCU6_IS_TRPF_OFF,   /**< \brief Interrupt enable for trap flag */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   198      IfxCcu6_InterruptSource_correctHallEvent = IFX_CCU6_IS_CHE_OFF,    /**< \brief Interrupt enable for correct hall event */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   199      IfxCcu6_InterruptSource_wrongHallEvent   = IFX_CCU6_IS_WHE_OFF     /**< \brief Interrupt enable for wrong hall event */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   200  } IfxCcu6_InterruptSource;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   201  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   202  /** \brief Selection of the trigger request source (next multi-channel event) for the shadow transfer MCM_ST from MCMPS to MCMP\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   203   * Definition in Ifx_CCU.MCMCTR.B.SWSEL
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   204   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   205  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   206  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   207      IfxCcu6_MultiChannelSwitchingSelect_noEvent                 = 0,  /**< \brief No trigger request will be generated */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   208      IfxCcu6_MultiChannelSwitchingSelect_correctHallEvent        = 1,  /**< \brief Correct Hall pattern detected (CM_CHE) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   209      IfxCcu6_MultiChannelSwitchingSelect_t13PeriodMatch          = 2,  /**< \brief T13 period-match detected (while counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   210      IfxCcu6_MultiChannelSwitchingSelect_t12OneMatch             = 3,  /**< \brief T12 one-match (while counting down) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   211      IfxCcu6_MultiChannelSwitchingSelect_t12Channel1CompareMatch = 4,  /**< \brief T12 channel 1 compare-match detected (phase
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   212                                                                         * delay function) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   213      IfxCcu6_MultiChannelSwitchingSelect_t12PeriodMatch          = 5   /**< \brief T12 period match detected (while counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   214  } IfxCcu6_MultiChannelSwitchingSelect;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   215  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   216  /** \brief Selection of the synchronization mechanism for the shadow transfer event MCM_ST\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   217   * Definition in Ifx_CCU.MCMCTR.B.SWSYN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   218   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   219  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   220  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   221      IfxCcu6_MultiChannelSwitchingSync_direct       = 0,  /**< \brief Direct, the trigger event immediately leads to the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   222                                                            * shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   223      IfxCcu6_MultiChannelSwitchingSync_t13ZeroMatch = 1,  /**< \brief A T13 zero-match triggers the shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   224      IfxCcu6_MultiChannelSwitchingSync_t12ZeroMatch = 2   /**< \brief A T12 zero-match (while counting up) triggers the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   225                                                            * shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   226  } IfxCcu6_MultiChannelSwitchingSync;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   227  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   228  /** \brief Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   229   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   230  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   231  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   232      IfxCcu6_ServiceRequest_0 = 0,      /**< \brief Service request output SR0  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   233      IfxCcu6_ServiceRequest_1,          /**< \brief Service request output SR1  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   234      IfxCcu6_ServiceRequest_2,          /**< \brief Service request output SR2  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   235      IfxCcu6_ServiceRequest_3           /**< \brief Service request output SR3  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   236  } IfxCcu6_ServiceRequest;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   237  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   238  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   239   * Definition in Ifx_CCU6.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   240   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   241  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   242  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   243      IfxCcu6_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   244      IfxCcu6_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   245  } IfxCcu6_SleepMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   246  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   247  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   248   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   249  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   250  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   251      IfxCcu6_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   252      IfxCcu6_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   253      IfxCcu6_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   254  } IfxCcu6_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   255  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   256  /** \brief Capture compare channel of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   257   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   258  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   259  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   260      IfxCcu6_T12Channel_0 = 0,      /**< \brief T12 channel CC60  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   261      IfxCcu6_T12Channel_1,          /**< \brief T12 channel CC61  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   262      IfxCcu6_T12Channel_2           /**< \brief T12 channel CC62  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   263  } IfxCcu6_T12Channel;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   264  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   265  /** \brief The operating mode for the T12 channels are defined by the bit fields Ifx_CCU.T12MSEL.MSEL6x.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   266   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   267  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   268  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   269      IfxCcu6_T12ChannelMode_off                                   = 0,  /**< \brief Capture/Compare modes switched off */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   270      IfxCcu6_T12ChannelMode_compareMode                           = 1,  /**< \brief Compare mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   271      IfxCcu6_T12ChannelMode_doubleRegisterCaptureRisingAndFalling = 4,  /**< \brief CC6xIN rising edge: T12 stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   272      IfxCcu6_T12ChannelMode_doubleRegisterCaptureRising           = 5,  /**< \brief CC6xIN rising edge: CC6nSR stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   273      IfxCcu6_T12ChannelMode_doubleRegisterCaptureFalling          = 6,  /**< \brief CC6xIN rising edge: CC6nSR stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   274      IfxCcu6_T12ChannelMode_doubleRegisterCaptureAny              = 7,  /**< \brief CC6xIN any active edge: CC6nSR stored in CC6xR, any active edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   275      IfxCcu6_T12ChannelMode_hallSensor                            = 8,  /**< \brief Hall Sensor Mode, In order to properly enable this mode, all three MSEL6x fields have to be
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   276                                                                          * programmed to Hall Sensor mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   277      IfxCcu6_T12ChannelMode_hysteresisLikecompare                 = 9,  /**< \brief Hysteresis-like compare mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   278      IfxCcu6_T12ChannelMode_multiInputCaptureRisingAndFalling     = 10, /**< \brief CC6xIN rising edge: T12 stored in CC6xR, CCPOSx falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   279      IfxCcu6_T12ChannelMode_multiInputCaptureFallingAndRising     = 11, /**< \brief CC6xIN falling edge: T12 stored in CC6xR, CCPOSx rising edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   280      IfxCcu6_T12ChannelMode_multiInputCaptureBothRising           = 12, /**< \brief CC6xIN rising edge: T12 stored in CC6xR, CCPOSx rising edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   281      IfxCcu6_T12ChannelMode_multiInputCaptureBothFalling          = 13, /**< \brief CC6xIN falling edge: T12 stored in CC6xR, CCPOSx falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   282      IfxCcu6_T12ChannelMode_multiInputCaptureAny                  = 14  /**< \brief CC6xIN any active edge : T12 stored in CC6xR, CCPOSx any active edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   283  } IfxCcu6_T12ChannelMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   284  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   285  /** \brief Counting direction of Timer12\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   286   * Definition in Ifx_CCU.TCTR0.B.CDIR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   287   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   288  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   289  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   290      IfxCcu6_T12CountDirection_up   = 0, /**< \brief Counting up */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   291      IfxCcu6_T12CountDirection_down = 1  /**< \brief Counting down */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   292  } IfxCcu6_T12CountDirection;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   293  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   294  /** \brief Operating mode of Timer 12\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   295   * Definition in Ifx_CCU.TCTR0.B.CTM
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   296   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   297  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   298  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   299      IfxCcu6_T12CountMode_edgeAligned   = 0, /**< \brief T12 always counts up and continues counting
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   300                                               * from zero after reaching the period value. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   301      IfxCcu6_T12CountMode_centerAligned = 1  /**< \brief T12 counts down after detecting a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   302                                               * and counts up after detecting a one-match. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   303  } IfxCcu6_T12CountMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   304  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   305  /** \brief Delivers additional information to control the automatic set of bit T13R in the case that the trigger action defined by T13 trigger event control (T13TEC) is detected.\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   306   * Definition in Ifx_CCU.TCTR2.B.T13TED
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   307   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   308  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   309  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   310      IfxCcu6_T13TriggerDirection_noAction          = 0,  /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   311      IfxCcu6_T13TriggerDirection_onT12CountingUp   = 1,  /**< \brief while T12 is counting up */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   312      IfxCcu6_T13TriggerDirection_onT12CountingDown = 2,  /**< \brief while T12 is counting down */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   313      IfxCcu6_T13TriggerDirection_anyT12            = 3   /**< \brief independent on the count direction of T12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   314  } IfxCcu6_T13TriggerDirection;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   315  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   316  /** \brief Selects the trigger event to start T13 (automatic set of T13R for synchronization to T12 compare signals)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   317   * Definition in Ifx_CCU.TCTR2.B.T13TEC
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   318   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   319  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   320  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   321      IfxCcu6_T13TriggerEvent_noAction        = 0,  /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   322      IfxCcu6_T13TriggerEvent_onCC60RCompare  = 1,  /**< \brief set T13R on a T12 compare event on channel 0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   323      IfxCcu6_T13TriggerEvent_onCC61RCompare  = 2,  /**< \brief set T13R on a T12 compare event on channel 1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   324      IfxCcu6_T13TriggerEvent_onCC62RCompare  = 3,  /**< \brief set T13R on a T12 compare event on channel 2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   325      IfxCcu6_T13TriggerEvent_onAnyT12Compare = 4,  /**< \brief set T13R on any T12 compare event (ch. 0, 1, 2) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   326      IfxCcu6_T13TriggerEvent_onT12Period     = 5,  /**< \brief set T13R upon a period-match of T12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   327      IfxCcu6_T13TriggerEvent_onT12Zero       = 6,  /**< \brief set T13R upon a zero-match of T12 (while
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   328                                                     * counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   329      IfxCcu6_T13TriggerEvent_onCCPOSxEdge    = 7   /**< \brief set T13R on any edge of inputs CCPOSx */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   330  } IfxCcu6_T13TriggerEvent;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   331  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   332  /** \brief Timer number ( T12 / T13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   333   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   334  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   335  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   336      IfxCcu6_TimerId_t12 = 0,  /**< \brief Timer 12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   337      IfxCcu6_TimerId_t13 = 1   /**< \brief Timer 13 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   338  } IfxCcu6_TimerId;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   339  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   340  /** \brief Selects the input clock for timers (T12 or T13) that is derived from the peripheral clock according to the equation\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   341   * Definition in Ifx_CCU.TCTR0.B.T12CLK / Ifx_CCU.TCTR0.B.T13CLK
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   342   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   343  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   344  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   345      IfxCcu6_TimerInputClock_fcc6      = 0, /**< \brief fcc6 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   346      IfxCcu6_TimerInputClock_fcc6By2   = 1, /**< \brief fcc6 / 2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   347      IfxCcu6_TimerInputClock_fcc6By4   = 2, /**< \brief fcc6 / 4 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   348      IfxCcu6_TimerInputClock_fcc6By8   = 3, /**< \brief fcc6 / 8 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   349      IfxCcu6_TimerInputClock_fcc6By16  = 4, /**< \brief fcc6 / 16 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   350      IfxCcu6_TimerInputClock_fcc6By32  = 5, /**< \brief fcc6 / 32 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   351      IfxCcu6_TimerInputClock_fcc6By64  = 6, /**< \brief fcc6 / 64 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   352      IfxCcu6_TimerInputClock_fcc6By128 = 7  /**< \brief fcc6 / 128 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   353  } IfxCcu6_TimerInputClock;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   354  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   355  /** \brief Selection of actual input signal for the timer inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   356   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   357  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   358  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   359      IfxCcu6_TimerInputSignal_a = 0,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   360      IfxCcu6_TimerInputSignal_b = 1,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   361      IfxCcu6_TimerInputSignal_c = 2,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   362      IfxCcu6_TimerInputSignal_d = 3,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   363      IfxCcu6_TimerInputSignal_e = 0,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   364      IfxCcu6_TimerInputSignal_f = 1,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   365      IfxCcu6_TimerInputSignal_g = 2,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   366      IfxCcu6_TimerInputSignal_h = 3   /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   367  } IfxCcu6_TimerInputSignal;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   368  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   369  /** \brief Timer (T12 / T13) run status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   370   * Definition in Ifx_CCU.TCTR0.B.T12R and Ifx_CCU.TCTR0.B.T13R
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   371   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   373  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   374      IfxCcu6_TimerRunStatus_stopped = 0,  /**< \brief Timer T1x is stopped. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   375      IfxCcu6_TimerRunStatus_running = 1   /**< \brief Timer T1x is running. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   376  } IfxCcu6_TimerRunStatus;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   377  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   378  /** \brief Defines how the trap flag TRPF can be cleared after the trap input condition is no longer valid (either by CTRAP = 1 or by TRPPEN = 0)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   379   * Definition in Ifx_CCU.TRPCTR.B.TRPM2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   380   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   381  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   382  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   383      IfxCcu6_TrapMode_automatic = 0,  /**< \brief Bit TRPF is cleared by HW */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   384      IfxCcu6_TrapMode_manual    = 1   /**< \brief Bit TRPF stays 0, It has to be cleared by SW by writing
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   385                                        * ISR.RTRPF = 1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   386  } IfxCcu6_TrapMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   387  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   388  /** \brief Defines the behavior of the selected outputs when leaving the trap state, after the trap condition has become inactive again\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   389   * Definition in Ifx_CCU.TRPCTR.B.TRPMx (x = 0, 1)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   390   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   391  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   392  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   393      IfxCcu6_TrapState_t12Sync   = 0, /**< \brief The trap state is left when a zero-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   394                                        * of T12 (while counting up) is detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   395      IfxCcu6_TrapState_t13Sync   = 1, /**< \brief The trap state is left when a zeromatch
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   396                                        * of T13 is detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   397      IfxCcu6_TrapState_immediate = 3  /**< \brief The trap state is left immediately without any synchronization to T12 or T13 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   398  } IfxCcu6_TrapState;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   399  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   400  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   401  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   402  /** \addtogroup IfxLld_Ccu6_Std_Operative
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   403   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   404  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   405  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   406  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   407  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   408  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   409  /** \brief Clears the counters of the Timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   410   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   411   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   412   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   413   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   414   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   415  IFX_INLINE void IfxCcu6_clearCounter(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   416  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   417  /** \brief Clears all the three dead-time counter channels to zero.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   418   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   419   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   420   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   421  IFX_INLINE void IfxCcu6_clearDeadTimeCounters(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   422  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   423  /** \brief Clears the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   424   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   425   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   426   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   427   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   428  IFX_INLINE void IfxCcu6_clearInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   429  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   430  /** \brief Clears the T12  One notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   431   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   432   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   433   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   434  IFX_INLINE void IfxCcu6_clearT12OneNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   435  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   436  /** \brief Clears the T12  period notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   437   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   438   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   439   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   440  IFX_INLINE void IfxCcu6_clearT12PeriodNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   441  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   442  /** \brief Clears the T13  compare notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   443   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   444   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   445   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   446  IFX_INLINE void IfxCcu6_clearT13CompareNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   447  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   448  /** \brief Returns the Timer pointer
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   449   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   450   * \return Timer pointer
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   451   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   452  IFX_INLINE volatile uint32 *IfxCcu6_getT12TimerPointer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   453  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   454  /** \brief Returns the status of module enabled or disabled
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   455   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   456   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   457   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   458  IFX_INLINE boolean IfxCcu6_isModuleEnabled(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   459  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   460  /** \brief Returns the status of T12 one notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   461   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   462   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   463   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   464  IFX_INLINE boolean IfxCcu6_isT12OneNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   465  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   466  /** \brief Returns the status of T12 period notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   467   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   468   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   469   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   470  IFX_INLINE boolean IfxCcu6_isT12PeriodNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   471  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   472  /** \brief Returns the status of T13 compare notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   473   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   474   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   475   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   476  IFX_INLINE boolean IfxCcu6_isT13CompareNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   477  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   478  /** \brief Sets the input event leading to a counting action of Timers (T12 / T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   479   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   480   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   481   * \param mode Input event leading to a counting action of the timer (T12 / T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   482   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   483   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   484  IFX_INLINE void IfxCcu6_setCountingInputMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_CountingInputMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   485  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   486  /** \brief Sets the current hall pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   487   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   488   * \param pattern Current hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   489   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   490   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   491  IFX_INLINE void IfxCcu6_setCurrentHallPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   492  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   493  /** \brief Sets the delay between switching from the passive state to the active state of the selected outputs (dead time)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   494   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   495   * \param value Value of the dead time to be induced
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   496   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   497   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   498  IFX_INLINE void IfxCcu6_setDeadTimeValue(Ifx_CCU6 *ccu6, uint8 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   499  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   500  /** \brief Sets the expected hall pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   501   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   502   * \param pattern Expected hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   503   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   504   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   505  IFX_INLINE void IfxCcu6_setExpectedHallPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   506  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   507  /** \brief Sets the event of signal T1xHR that can set the run bit T1xR by HW
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   508   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   509   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   510   * \param mode External trigger mode
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   511   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   512   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   513  IFX_INLINE void IfxCcu6_setExternalRunMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ExternalTriggerMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   514  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   515  /** \brief Sets source for the sampling of the Hall input pattern and the comparison to the current and the expected Hall pattern bit fields
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   516   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   517   * \param mode Hall sensor input trigger event
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   518   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   519   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   520  IFX_INLINE void IfxCcu6_setHallSensorTriggerMode(Ifx_CCU6 *ccu6, IfxCcu6_HallSensorTriggerMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   521  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   522  /** \brief Sets the input clock for timers (T12 or T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   523   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   524   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   525   * \param frequency Input clock for timers (T12 or T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   526   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   527   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   528  IFX_INLINE void IfxCcu6_setInputClockFrequency(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_TimerInputClock frequency);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   529  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   530  /** \brief Sets the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   531   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   532   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   533   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   534   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   535  IFX_INLINE void IfxCcu6_setInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   536  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   537  /** \brief Sets the output pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   538   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   539   * \param pattern Output pattern for the multichannel mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   540   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   541   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   542  IFX_INLINE void IfxCcu6_setMultiChannelPwmPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   543  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   544  /** \brief Sets the trigger request source (next multi-channel event) for the shadow transfer MCM_ST from MCMPS to MCMP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   545   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   546   * \param mode Trigger request source (next multi-channel event) for the shadow transfer MCM_ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   547   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   548   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   549  IFX_INLINE void IfxCcu6_setMultiChannelSwitchingMode(Ifx_CCU6 *ccu6, IfxCcu6_MultiChannelSwitchingSelect mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   550  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   551  /** \brief Sets the synchronization mechanism of the shadow transfer event MCM_ST\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   552   * if it has been requested before (flag R set by an event selected by SWSEL) and if MCMEN = 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   553   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   554   * \param sync Synchronization mechanism of the shadow transfer event MCM_ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   555   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   556   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   557  IFX_INLINE void IfxCcu6_setMultiChannelSwitchingSync(Ifx_CCU6 *ccu6, IfxCcu6_MultiChannelSwitchingSync sync);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   558  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   559  /** \brief Sets the state of the corresponding compare channel, that is considered to be the passive state
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   560   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   561   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   562   * \param state FALSE: passive state when CC6xST == 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   563   * TRUE : passive state when CC6xST == 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   564   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   565   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   566  IFX_INLINE void IfxCcu6_setOutputPassiveState(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut, boolean state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   567  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   568  /** \brief Enables / Disables the single shot mode of Timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   569   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   570   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   571   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   573   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   574  IFX_INLINE void IfxCcu6_setSingleShotModeEnable(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   575  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   576  /** \brief Sets the operating mode of the Timer12 capture/compare channels
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   577   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   578   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   579   * \param mode The operating mode for the T12 channels
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   580   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   581   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   582  IFX_INLINE void IfxCcu6_setT12ChannelMode(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, IfxCcu6_T12ChannelMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   583  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   584  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   585   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   586   * \param mode Operating mode of Timer 12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   587   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   588   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   589  IFX_INLINE void IfxCcu6_setT12CountMode(Ifx_CCU6 *ccu6, IfxCcu6_T12CountMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   590  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   591  /** \brief Sets the 16-bit counter value of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   592   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   593   * \param value Counter value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   595   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   596  IFX_INLINE void IfxCcu6_setT12CounterValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   597  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   598  /** \brief Sets the period value that leads Timer12 counter value to a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   599   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   600   * \param value Period value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   601   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   602   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   603  IFX_INLINE void IfxCcu6_setT12PeriodValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   604  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   605  /** \brief Sets the 16-bit compare value of Timer13 (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   606   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   607   * \param value Compare value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   609   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   610  IFX_INLINE void IfxCcu6_setT13CompareValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   611  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   612  /** \brief Sets the 16-bit counter value of Timer13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   613   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   614   * \param value counter value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   616   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   617  IFX_INLINE void IfxCcu6_setT13CounterValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   618  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   619  /** \brief Sets the period value that leads Timer13 counter value to a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   620   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   621   * \param value period value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   622   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   623   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   624  IFX_INLINE void IfxCcu6_setT13PeriodValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   625  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   626  /** \brief Sets the Timer13 trigger event direction
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   627   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   628   * \param direction T13 trigger event direction
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   630   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   631  IFX_INLINE void IfxCcu6_setT13TriggerEventDirection(Ifx_CCU6 *ccu6, IfxCcu6_T13TriggerDirection direction);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   632  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   633  /** \brief Sets the trigger event to start Timer13 (automatic set of T13R for synchronization to Timer12 compare signals)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   634   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   635   * \param mode The trigger event to start T13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   636   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   637   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   638  IFX_INLINE void IfxCcu6_setT13TriggerEventMode(Ifx_CCU6 *ccu6, IfxCcu6_T13TriggerEvent mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   639  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   640  /** \brief Sets the mode of clearing the trap flag TRPF after the trap input condition is no longer valid
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   641   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   642   * \param mode Trap mode selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   643   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   644   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   645  IFX_INLINE void IfxCcu6_setTrapMode(Ifx_CCU6 *ccu6, IfxCcu6_TrapMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   646  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   647  /** \brief Sets behaviour of the selected outputs when leaving the trap state after the trap condition has become inactive again.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   648   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   649   * \param state Trap state selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   650   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   651   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   652  IFX_INLINE void IfxCcu6_setTrapState(Ifx_CCU6 *ccu6, IfxCcu6_TrapState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   653  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   654  /** \brief starts the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   655   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   656   * \param t12 Timer12 start choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   657   * \param t13 Timer13 start choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   658   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   659   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   660  IFX_INLINE void IfxCcu6_startTimer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   661  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   662  /** \brief starts the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   663   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   664   * \param t12 Timer12 stop choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   665   * \param t13 Timer13 stop choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   666   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   667   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   668  IFX_INLINE void IfxCcu6_stopTimer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   669  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   670  /** \brief Updates the hall pattern (current hall, expected hall, moduleation output), in a single write
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   671   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   672   * \param currentHall Current hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   673   * \param expectedHall Expected hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   674   * \param output Output pattern for the multichannel mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   675   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   676   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   677  IFX_INLINE void IfxCcu6_updateHallPattern(Ifx_CCU6 *ccu6, uint8 currentHall, uint8 expectedHall, uint8 output);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   678  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   679  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   680  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   681  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   682  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   683  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   684   * \param ccu6 Specifies Ccu6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   685   * \param outputLine Output Line
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   686   * \param selectedTrigger Trigger selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   687   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   688   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   689  IFX_EXTERN void IfxCcu6_connectTrigger(Ifx_CCU6 *ccu6, IfxCcu6_TrigOut outputLine, IfxCcu6_TrigSel selectedTrigger);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   690  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   691  /** \brief Routes the interrupt node pointer to the selected service requests
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   692   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   693   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   694   * \param serviceRequest Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   696   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   697  IFX_EXTERN void IfxCcu6_routeInterruptNode(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source, IfxCcu6_ServiceRequest serviceRequest);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   698  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   699  /** \brief Sets the passive state level of the PWM outputs of the module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   700   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   701   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   702   * \param state FALSE: The passive level is 0.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   703   * TRUE : The passive level is 1.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   704   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   705   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   706  IFX_EXTERN void IfxCcu6_setOutputPassiveLevel(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut, boolean state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   707  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   708  /** \brief Sets software-control (independent set and clear conditions) for the Timer12 channel state bits CC6xST (x=0,1,2)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   709   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   710   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   711   * \param state capture/compare state selection (set / clear / toggle)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   712   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   713   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   714  IFX_EXTERN void IfxCcu6_setT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, IfxCcu6_CaptureCompareState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   715  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   716  /** \brief Sets the 16-bit compare value of Timer12 (writes into shadow registers)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   717   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   718   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   719   * \param value Compare value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   720   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   721   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   722  IFX_EXTERN void IfxCcu6_setT12CompareValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   723  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   724  /** \brief Sets the frequency and clock input of the Timer 12.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   725   * Caution: If desired frequency cannot achieved (by successive divisions by 2) :
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   726   * Then the nearest frequency value is set ( >= desired value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   727   * The resulting frequency is captured in the handler element : CaptureFrequency.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   728   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   729   * \param frequency Requested timer frequency in Hz
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   730   * \param period period value to be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   731   * \param countMode Counting mode of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   732   * \return Zero, if the function failed to fulfill requested frequency and resolution\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   733   * Positive, if the function can find settings close to the requested frequency and resolution above the requested
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   734   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   735  IFX_EXTERN float32 IfxCcu6_setT12Frequency(Ifx_CCU6 *ccu6, float32 frequency, Ifx_TimerValue period, IfxCcu6_T12CountMode countMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   736  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   737  /** \brief selects the actual input signal for the timer inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   738   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   739   * \param extInput External input signal for the Timer 12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   740   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   741   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   742  IFX_EXTERN void IfxCcu6_setT12InputSignal(Ifx_CCU6 *ccu6, IfxCcu6_T12hr_In *extInput);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   743  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   744  /** \brief Sets software-control (independent set and clear conditions) for the Timer13 channel state bits CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   745   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   746   * \param state capture/compare state selection (set / clear / toggle)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   747   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   748   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   749  IFX_EXTERN void IfxCcu6_setT13CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_CaptureCompareState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   750  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   751  /** \brief Sets the frequency and clock input of the Timer 13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   752   * Caution: If desired frequency cannot achieved (by successive divisions by 2) :
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   753   * Then the nearest frequency value is set ( >= desired value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   754   * The resulting frequency is captured in the handler element : captureFrequency.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   755   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   756   * \param frequency Requested timer frequency in Hz
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   757   * \param period period value to be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   758   * \return Zero, if the function failed to fulfill requested frequency and resolution\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   759   * Positive, if the function can find settings close to the requested frequency and resolution above the requested
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   760   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   761  IFX_EXTERN float32 IfxCcu6_setT13Frequency(Ifx_CCU6 *ccu6, float32 frequency, Ifx_TimerValue period);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   762  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   763  /** \brief selects the actual input signal for the timer inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   764   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   765   * \param extInput External input signal for the Timer 13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   766   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   767   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   768  IFX_EXTERN void IfxCcu6_setT13InputSignal(Ifx_CCU6 *ccu6, IfxCcu6_T13hr_In *extInput);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   769  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   770  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   771  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   772  /** \addtogroup IfxLld_Ccu6_Std_Utility
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   773   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   774  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   775  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   776  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   777  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   778  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   779  /** \brief Indicate the status of the dead time generation for each compare channel (0, 1, 2) of timer T12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   780   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   781   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   782   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   783   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   784  IFX_INLINE boolean IfxCcu6_getDeadTimeStatus(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   785  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   786  /** \brief Returns the value of the input Hall pattern of the Timer12 capture/compare channels CC6POS6x (x = 0, 1, 2)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   787   * that has been compared to the current and expected value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   788   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   789   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   790   * \return Status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   791   * TRUE : The input CCPOSx has been sampled as 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   792   * FALSE : The input CCPOSx has been sampled as 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   793   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   794  IFX_INLINE boolean IfxCcu6_getHallPatternSampleState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   795  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   796  /** \brief Gets the status of the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   797   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   798   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   799   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   800   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   801  IFX_INLINE boolean IfxCcu6_getInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   802  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   803  /** \brief indicates if the multi-channel mode functionality is available
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   804   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   805   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   806   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   807  IFX_INLINE boolean IfxCcu6_getMultiChannelModeAvailabilityStatus(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   808  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   809  /** \brief Gets the status of the shadow transfer request from MCMPS to MCMP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   810   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   811   * \return Status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   812   * FALSE: A shadow transfer MCM_ST is not requested\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   813   * TRUE:  A shadow transfer MCM_ST is requested, but has not yet been executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   814   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   815  IFX_INLINE boolean IfxCcu6_getMultiChannelPWMPatternShadowTransferStatus(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   816  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   817  /** \brief Returns the Timer (T12 / T13) shadow transfer enable status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   818   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   819   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   820   * \return Status (TRUE: enable / FALSE: disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   821   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   822  IFX_INLINE boolean IfxCcu6_getShadowTransferStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   823  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   824  /** \brief Returns the state of the Timer12 capture/compare channels CC6xST (x = 0, 1, 2)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   825   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   826   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   827   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   828   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   829  IFX_INLINE boolean IfxCcu6_getT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   830  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   831  /** \brief Returns the current counting direction of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   832   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   833   * \return direction (up / down)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   834   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   835  IFX_INLINE IfxCcu6_T12CountDirection IfxCcu6_getT12CountDirection(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   836  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   837  /** \brief Returns the state of the Timer13 capture/compare channel CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   838   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   839   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   840   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   841  IFX_INLINE boolean IfxCcu6_getT13CaptureCompareState(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   842  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   843  /** \brief indicates the Timer blocks (T12 / T13) availability
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   844   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   845   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   846   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   847   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   848  IFX_INLINE boolean IfxCcu6_getTimerAvailabilityStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   849  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   850  /** \brief Returns the Timer (T12 / T13) run status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   851   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   852   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   853   * \return Status (stopped / running)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   854   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   855  IFX_INLINE IfxCcu6_TimerRunStatus IfxCcu6_getTimerRunStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   856  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   857  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   858   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   859   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   860   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   861   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   862   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   863  IFX_INLINE boolean IfxCcu6_isModuleSuspended(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   864  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   865  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   866   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   867   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   868   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   869   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   870   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   871  IFX_INLINE void IfxCcu6_setSuspendMode(Ifx_CCU6 *ccu6, IfxCcu6_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   872  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   873  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   874  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   875  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   876  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   877  /** \brief Returns the module index of the selected CCU6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   878   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   879   * \return CCU6 module register address
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   880   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   881  IFX_EXTERN Ifx_CCU6 *IfxCcu6_getAddress(IfxCcu6_Index ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   882  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   883  /** \brief Returns the capture register value of the selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   884   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   885   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   886   * \return current value of the capture register of a selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   887   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   888  IFX_EXTERN uint32 IfxCcu6_getCaptureRegisterValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   889  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   890  /** \brief Returns the capture shadow register value of the selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   891   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   892   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   893   * \return current value of the capture shadow register of a selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   894   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   895  IFX_EXTERN uint32 IfxCcu6_getCaptureShadowRegisterValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   896  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   897  /** \brief Returns CCU6 index
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   898   * \param ccu6 Specifies the pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   899   * \return Returns index. returns -1 in case of unknown index
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   900   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   901  IFX_EXTERN IfxCcu6_Index IfxCcu6_getIndex(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   902  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   903  /** \brief Returns the service request register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   904   * \param ccu6 Specifies Ccu6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   905   * \param serviceRequest Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   906   * \return The service request register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   907   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   908  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxCcu6_getSrcAddress(Ifx_CCU6 *ccu6, IfxCcu6_ServiceRequest serviceRequest);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   909  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   910  /** \brief Returns the current value of the timer register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   911   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   912   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   913   * \return current value of the timer register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   914   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   915  IFX_EXTERN uint32 IfxCcu6_readTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   916  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   917  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   918  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   919  /** \addtogroup IfxLld_Ccu6_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   920   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   921  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   922  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   923  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   924  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   925  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   926  /** \brief Clears all Interrupt flags
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   927   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   928   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   929   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   930  IFX_INLINE void IfxCcu6_clearAllInterruptStatusFlags(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   931  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   932  /** \brief Disables the additional prescaler of 1/256 can be enabled for the prescaler of T12 or T13 to support higher clock frequencies
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   933   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   934   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   935   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   936   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   937  IFX_INLINE void IfxCcu6_disableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   938  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   939  /** \brief Disables the dead time generation for each compare channel (0, 1, 2) of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   940   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   941   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   942   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   943   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   944  IFX_INLINE void IfxCcu6_disableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   945  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   946  /** \brief Disables the delay of the source signal for the sampling of the Hall input pattern (selected by HSYNC)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   947   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   948   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   949   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   950  IFX_INLINE void IfxCcu6_disableDelayBypass(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   951  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   952  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   953   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   954   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   955   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   956   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   957  IFX_INLINE void IfxCcu6_disableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   958  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   959  /** \brief Sets multi channel mode unavailable, A write access to MCMOUTS is ignored
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   960   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   961   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   962   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   963  IFX_INLINE void IfxCcu6_disableMultiChannelMode(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   964  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   965  /** \brief Disables shadow transfers of the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   966   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   967   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   968   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   969   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   970   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   971  IFX_INLINE void IfxCcu6_disableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   972  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   973  /** \brief Disables the single shot-mode of Timers (T12 T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   974   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   975   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   976   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   977   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   978  IFX_INLINE void IfxCcu6_disableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   979  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   980  /** \brief Disables the Inversion of T13 signal for the modulation of the CC6x and COUT6x (x = 0, 1, 2) signals\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   981   * T13 output CC63_O is equal to CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   982   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   983   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   984   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   985  IFX_INLINE void IfxCcu6_disableT13InvertedModulation(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   986  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   987  /** \brief Sets Timer12 block unavailable, A write access to T12PR is ignored
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   988   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   989   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   990   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   991   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   992  IFX_INLINE void IfxCcu6_disableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   993  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   994  /** \brief Disables the trap functionality for the corresponding output signals
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   995   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   996   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   997   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   998   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   999  IFX_INLINE void IfxCcu6_disableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1000  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1001  /** \brief Disables the input (pin) function for the trap generation
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1002   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1003   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1004   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1005  IFX_INLINE void IfxCcu6_disableTrapPin(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1006  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1007  /** \brief Enables the additional prescaler of 1/256 can be enabled for the prescaler of T12 or T13 to support higher clock frequencies
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1008   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1009   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1010   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1011   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1012  IFX_INLINE void IfxCcu6_enableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1013  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1014  /** \brief Sets the single shot-mode of Timers (T12, T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1015   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1016   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1017   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1018   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1019   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1020  IFX_INLINE void IfxCcu6_enableCountEvent(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1021  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1022  /** \brief Enables the dead time generation for each compare channel (0, 1, 2) of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1023   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1024   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1025   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1026   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1027  IFX_INLINE void IfxCcu6_enableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1028  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1029  /** \brief Enables the delay of the source signal for the sampling of the Hall input pattern (selected by HSYNC) by the Dead-Time Counter 0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1030   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1031   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1032   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1033  IFX_INLINE void IfxCcu6_enableDelayBypass(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1034  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1035  /** \brief Sets HP_ST immediately to update bit fields EXPH and CURH by EXPHS and CURHS
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1036   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1037   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1038   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1039  IFX_INLINE void IfxCcu6_enableHallPatternShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1040  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1041  /** \brief Enables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1042   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1043   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1044   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1045   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1046  IFX_INLINE void IfxCcu6_enableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1047  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1048  /** \brief Sets multi channel mode available, A write access to MCMOUTS is executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1049   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1050   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1051   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1052  IFX_INLINE void IfxCcu6_enableMultiChannelMode(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1053  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1054  /** \brief Enables the Multi Channel Mode Availability
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1055   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1056   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1057   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1058  IFX_INLINE void IfxCcu6_enableMultiChannelModeAvailability(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1059  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1060  /** \brief Sets MCM_ST immediately to update bit field MCMP by the value of MCMPS.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1061   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1062   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1063   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1064  IFX_INLINE void IfxCcu6_enableMultiChannelPwmPatternShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1065  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1066  /** \brief Enables the shadow transfer T12_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1067   * becomes set while a T12 one match is detected while counting down
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1068   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1069   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1070   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1071  IFX_INLINE void IfxCcu6_enableMultiChannelT12DowncountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1072  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1073  /** \brief Enables the shadow transfer T12_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1074   * becomes set while a T12 period match is detected while counting up
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1075   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1076   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1077   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1078  IFX_INLINE void IfxCcu6_enableMultiChannelT12UpcountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1079  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1080  /** \brief Enables the shadow transfer T13_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1081   * becomes set while a T13 period match is detected
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1082   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1083   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1084   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1085  IFX_INLINE void IfxCcu6_enableMultiChannelT13UpcountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1086  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1087  /** \brief Enables shadow transfers of the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1088   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1089   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1090   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1091   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1092   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1093  IFX_INLINE void IfxCcu6_enableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1094  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1095  /** \brief Enables the single shot-mode of Timers (T12 T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1096   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1097   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1098   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1099   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1100  IFX_INLINE void IfxCcu6_enableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1101  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1102  /** \brief Enables the Inversion of T13 signal for the modulation of the CC6x and COUT6x (x = 0, 1, 2) signals\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1103   * T13 output CC63_O is equal to CC63ST.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1104   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1105   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1106   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1107  IFX_INLINE void IfxCcu6_enableT13InvertedModulation(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1108  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1109  /** \brief Sets Timer12 block available, A write access to T12PR is executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1110   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1111   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1112   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1113   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1114  IFX_INLINE void IfxCcu6_enableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1115  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1116  /** \brief Enables the trap functionality for the corresponding output signals
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1117   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1118   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1119   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1120   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1121  IFX_INLINE void IfxCcu6_enableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1122  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1123  /** \brief Enables the input (pin) function for the trap generation
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1124   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1125   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1126   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1127  IFX_INLINE void IfxCcu6_enableTrapPin(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1128  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1129  /** \brief selects the actual input signal for the capture compare inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1130   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1131   * \param input Input selection, ( CC6x capture input / CTRAP input / CCPOSx input  )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1132   * \param signal selection of actual input signal for the module inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1133   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1134   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1135  IFX_INLINE void IfxCcu6_setCaptureCompareInputSignal(Ifx_CCU6 *ccu6, IfxCcu6_CaptureCompareInput input, IfxCcu6_CaptureCompareInputSignal signal);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1136  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1137  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1138  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1139  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1140  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1141  /** \brief Disables the modulation of the corresponding output signal by PWM pattern generated by the timers T12 and T13.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1142   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1143   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1144   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1145   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1146   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1147  IFX_EXTERN void IfxCcu6_disableModulationOutput(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1148  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1149  /** \brief Disables the selected CCU6 kernel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1150   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1151   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1152   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1153  IFX_EXTERN void IfxCcu6_disableModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1154  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1155  /** \brief Enables the modulation of the corresponding output signal by PWM pattern generated by the timers T12 and T13.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1156   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1157   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1158   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1159   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1160   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1161  IFX_EXTERN void IfxCcu6_enableModulationOutput(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1162  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1163  /** \brief Enables the selected CCU6 kernel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1164   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1165   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1166   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1167  IFX_EXTERN void IfxCcu6_enableModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1168  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1169  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1170  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1171  /** \addtogroup IfxLld_Ccu6_Std_IO
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1172   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1173  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1174  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1175  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1176  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1177  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1178  /** \brief Initialises a CC60 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1179   * \param cc60In CC60 capture input CC60IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1180   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1181   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1182   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1183  IFX_INLINE void IfxCcu6_initCc60InPin(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1184  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1185  /** \brief Initialises a CC60 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1186   * \param cc60Out CC60 compare output CC0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1187   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1188   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1189   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1190   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1191  IFX_INLINE void IfxCcu6_initCc60OutPin(const IfxCcu6_Cc60_Out *cc60Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1192  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1193  /** \brief Initialises a CC61 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1194   * \param cc61In CC61 capture input CC61IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1195   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1196   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1197   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1198  IFX_INLINE void IfxCcu6_initCc61InPin(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1199  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1200  /** \brief Initialises a CC61 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1201   * \param cc61Out CC61 compare output CC1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1202   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1203   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1204   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1205   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1206  IFX_INLINE void IfxCcu6_initCc61OutPin(const IfxCcu6_Cc61_Out *cc61Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1207  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1208  /** \brief Initialises a CC62 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1209   * \param cc62In CC62 capture input CC62IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1210   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1211   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1212   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1213  IFX_INLINE void IfxCcu6_initCc62InPin(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1214  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1215  /** \brief Initialises a CC62 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1216   * \param cc62Out CC62 compare output CC2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1217   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1218   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1219   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1220   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1221  IFX_INLINE void IfxCcu6_initCc62OutPin(const IfxCcu6_Cc62_Out *cc62Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1222  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1223  /** \brief Initialises a CCPOS0 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1224   * \param ccpos0 CC60 capture input CCPOS0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1225   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1228  IFX_INLINE void IfxCcu6_initCcpos0Pin(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1229  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1230  /** \brief Initialises a CCPOS1 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1231   * \param ccpos1 CC61 capture input CCPOS1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1232   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1233   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1235  IFX_INLINE void IfxCcu6_initCcpos1Pin(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1236  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1237  /** \brief Initialises a CCPOS0 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1238   * \param ccpos2 CC62 capture input CCPOS2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1239   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1242  IFX_INLINE void IfxCcu6_initCcpos2Pin(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1243  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1244  /** \brief Initialises a COUT60 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1245   * \param cout60 CC60 compare output COUT0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1246   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1247   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1248   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1249   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1250  IFX_INLINE void IfxCcu6_initCout60Pin(const IfxCcu6_Cout60_Out *cout60, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1251  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1252  /** \brief Initialises a COUT61 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1253   * \param cout61 CC61 compare output COUT1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1254   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1255   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1256   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1257   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1258  IFX_INLINE void IfxCcu6_initCout61Pin(const IfxCcu6_Cout61_Out *cout61, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1259  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1260  /** \brief Initialises a COUT62 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1261   * \param cout62 CC62 compare output COUT2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1262   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1263   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1264   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1265   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1266  IFX_INLINE void IfxCcu6_initCout62Pin(const IfxCcu6_Cout62_Out *cout62, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1267  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1268  /** \brief Initialises a COUT63 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1269   * \param cout63 CC63 compare output COUT3
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1270   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1271   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1272   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1273   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1274  IFX_INLINE void IfxCcu6_initCout63Pin(const IfxCcu6_Cout63_Out *cout63, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1275  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1276  /** \brief Initialises a CTRAP input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1277   * \param ctrap CTRAP input
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1278   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1279   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1280   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1281  IFX_INLINE void IfxCcu6_initCtrapPin(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1282  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1283  /** \brief Initialises a T12HR input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1284   * \param t12hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1285   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1286   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1287   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1288  IFX_INLINE void IfxCcu6_initT12hrPin(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1289  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1290  /** \brief Initialises a T13HR input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1291   * \param t13hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1292   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1293   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1294   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1295  IFX_INLINE void IfxCcu6_initT13hrPin(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1296  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1297  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1298  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1299  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1300  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1301  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1302  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1303  /** \brief Provides functionality for both setting of CC60 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1304   * \param cc60In CC60 capture input CC60IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1305   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1306   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1307   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1308   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1309  IFX_INLINE void IfxCcu6_initCc60InPinWithPadLevel(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1310  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1311  /** \brief Provides functionality for both setting of CC61 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1312   * \param cc61In CC61 capture input CC61IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1313   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1314   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1315   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1316   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1317  IFX_INLINE void IfxCcu6_initCc61InPinWithPadLevel(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1318  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1319  /** \brief Provides functionality for both setting of CC62 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1320   * \param cc62In CC62 capture input CC62IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1321   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1322   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1323   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1324   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1325  IFX_INLINE void IfxCcu6_initCc62InPinWithPadLevel(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1326  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1327  /** \brief Provides functionality for both setting of CCPOS0 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1328   * \param ccpos0 CC60 capture input CCPOS0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1329   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1330   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1331   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1332   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1333  IFX_INLINE void IfxCcu6_initCcpos0PinWithPadLevel(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1334  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1335  /** \brief Provides functionality for both setting of CCPOS1 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1336   * \param ccpos1 CC61 capture input CCPOS1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1337   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1338   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1339   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1340   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1341  IFX_INLINE void IfxCcu6_initCcpos1PinWithPadLevel(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1342  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1343  /** \brief Provides functionality for both setting of CCPOS2 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1344   * \param ccpos2 CC62 capture input CCPOS2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1345   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1346   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1347   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1348   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1349  IFX_INLINE void IfxCcu6_initCcpos2PinWithPadLevel(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1350  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1351  /** \brief Provides functionality for both setting of CTRAP pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1352   * \param ctrap CTRAP input
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1353   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1354   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1355   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1356   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1357  IFX_INLINE void IfxCcu6_initCtrapPinWithPadLevel(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1358  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1359  /** \brief Provides functionality for both setting of T12HR pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1360   * \param t12hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1361   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1362   * \param padDriver Pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1363   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1364   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1365  IFX_INLINE void IfxCcu6_initT12hrPinWithPadLevel(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1366  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1367  /** \brief Provides functionality for both setting of T13HR pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1368   * \param t13hrIn Timer 13 HR input T13HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1369   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1370   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1371   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1372   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1373  IFX_INLINE void IfxCcu6_initT13hrPinWithPadLevel(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1374  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1375  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1376   * \param ccu6 pointer to CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1377   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1378   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1379   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1380  IFX_INLINE void IfxCcu6_setSleepMode(Ifx_CCU6 *ccu6, IfxCcu6_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1381  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1382  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1383  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1384  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1385  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1386  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1387   * \param ccu6 pointer to ccu6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1388   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1389   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1390  IFX_EXTERN void IfxCcu6_resetModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1391  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1392  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1393  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1394  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1395  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1396  IFX_INLINE void IfxCcu6_clearAllInterruptStatusFlags(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1397  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1398      ccu6->ISR.U = 0xFFFF;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1399  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1400  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1401  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1402  IFX_INLINE void IfxCcu6_clearCounter(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1403  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1404      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1405      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1406      tctr4.B.T12RES = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1407      tctr4.B.T13RES = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1408      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1409  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1410  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1411  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1412  IFX_INLINE void IfxCcu6_clearDeadTimeCounters(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1413  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1414      ccu6->TCTR4.B.DTRES = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1415  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1416  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1417  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1418  IFX_INLINE void IfxCcu6_clearInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1419  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1420      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1421      ccu6->ISR.U = mask;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1422  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1423  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1424  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1425  IFX_INLINE void IfxCcu6_clearT12OneNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1426  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1427      ccu6->ISR.B.RT12OM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1428  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1429  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1430  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1431  IFX_INLINE void IfxCcu6_clearT12PeriodNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1432  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1433      ccu6->ISR.B.RT12PM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1434  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1435  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1436  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1437  IFX_INLINE void IfxCcu6_clearT13CompareNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1438  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1439      ccu6->ISR.B.RT13CM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1440  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1441  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1442  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1443  IFX_INLINE void IfxCcu6_disableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1444  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1445      uint32 shift = ((timer * 8) + 3);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1446      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1447      ccu6->TCTR0.U = ccu6->TCTR0.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1448  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1449  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1450  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1451  IFX_INLINE void IfxCcu6_disableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1452  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1453      uint32 shift = (8 + channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1454      uint32 mask  = (1 << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1455      ccu6->T12DTC.U = ccu6->T12DTC.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1456  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1457  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1458  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1459  IFX_INLINE void IfxCcu6_disableDelayBypass(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1460  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1461      ccu6->T12MSEL.B.DBYP = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1462  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1463  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1464  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1465  IFX_INLINE void IfxCcu6_disableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1466  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1467      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1468      ccu6->IEN.U = ccu6->IEN.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1469  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1470  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1471  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1472  IFX_INLINE void IfxCcu6_disableMultiChannelMode(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1473  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1474      ccu6->MODCTR.B.MCMEN = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1475  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1476  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1477  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1478  IFX_INLINE void IfxCcu6_disableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1479  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1480      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1481      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1482      tctr4.B.T12STD = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1483      tctr4.B.T13STD = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1484      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1485  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1486  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1487  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1488  IFX_INLINE void IfxCcu6_disableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1489  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1490      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1491      ccu6->TCTR2.U = ccu6->TCTR2.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1492  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1493  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1494  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1495  IFX_INLINE void IfxCcu6_disableT13InvertedModulation(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1496  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1497      ccu6->CMPSTAT.B.T13IM = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1498  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1499  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1500  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1501  IFX_INLINE void IfxCcu6_disableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1502  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1503      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1504      ccu6->MCFG.U = ccu6->MCFG.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1505  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1506  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1507  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1508  IFX_INLINE void IfxCcu6_disableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1509  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1510      uint32 shift = (8 + channelOut);    // offset at location TRPCTR.8 for output CC60
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1511      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1512      ccu6->TRPCTR.U = ccu6->TRPCTR.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1513  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1514  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1515  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1516  IFX_INLINE void IfxCcu6_disableTrapPin(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1517  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1518      ccu6->TRPCTR.B.TRPPEN = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1519  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1520  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1521  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1522  IFX_INLINE void IfxCcu6_enableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1523  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1524      uint32 shift = ((timer * 8) + 3);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1525      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1526      ccu6->TCTR0.U = ccu6->TCTR0.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1527  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1528  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1529  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1530  IFX_INLINE void IfxCcu6_enableCountEvent(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1531  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1532      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1533      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1534      tctr4.B.T12CNT = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1535      tctr4.B.T13CNT = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1536      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1537  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1538  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1539  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1540  IFX_INLINE void IfxCcu6_enableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1541  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1542      uint32 shift = (8 + channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1543      uint32 mask  = (1 << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1544      ccu6->T12DTC.U = ccu6->T12DTC.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1545  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1546  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1547  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1548  IFX_INLINE void IfxCcu6_enableDelayBypass(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1549  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1550      ccu6->T12MSEL.B.DBYP = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1551  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1552  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1553  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1554  IFX_INLINE void IfxCcu6_enableHallPatternShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1555  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1556      ccu6->MCMOUTS.B.STRHP = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1557  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1558  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1559  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1560  IFX_INLINE void IfxCcu6_enableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1561  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1562      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1563      ccu6->IEN.U = ccu6->IEN.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1564  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1565  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1566  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1567  IFX_INLINE void IfxCcu6_enableMultiChannelMode(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1568  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1569      ccu6->MODCTR.B.MCMEN = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1570  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1571  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1572  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1573  IFX_INLINE void IfxCcu6_enableMultiChannelModeAvailability(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1574  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1575      ccu6->MCFG.B.MCM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1576  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1577  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1578  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1579  IFX_INLINE void IfxCcu6_enableMultiChannelPwmPatternShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1580  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1581      ccu6->MCMOUTS.B.STRMCM = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1582  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1583  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1584  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1585  IFX_INLINE void IfxCcu6_enableMultiChannelT12DowncountingShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1586  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1587      ccu6->MCMCTR.B.STE12D = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1588  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1589  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1590  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1591  IFX_INLINE void IfxCcu6_enableMultiChannelT12UpcountingShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1592  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1593      ccu6->MCMCTR.B.STE12U = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1594  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1595  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1596  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1597  IFX_INLINE void IfxCcu6_enableMultiChannelT13UpcountingShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1598  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1599      ccu6->MCMCTR.B.STE13U = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1600  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1601  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1602  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1603  IFX_INLINE void IfxCcu6_enableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1604  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1605      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1606      tctr4.U        = 0;
	mov	d0,#0
.L445:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1607      tctr4.B.T12STR = t12;
	insert	d0,d0,#1,#6,#1
.L281:
	add	d15,d8,#-1

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     2   * \file IfxCcu6.h
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     3   * \brief CCU6  basic functionality
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     4   * \ingroup IfxLld_Ccu6
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     5   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     8   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     9   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    11   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    16   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    18   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    25   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    32   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    40   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    41   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    42   * \defgroup IfxLld_Ccu6_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    43   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    44   * \defgroup IfxLld_Ccu6_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    45   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    46   * \defgroup IfxLld_Ccu6_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    47   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    48   * \defgroup IfxLld_Ccu6_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    49   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    50   * \defgroup IfxLld_Ccu6_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    51   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    52   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    53  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    54  #ifndef IFXCCU6_H
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    55  #define IFXCCU6_H 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    56  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    57  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    58  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    59  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    60  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    61  #include "_Impl/IfxCcu6_cfg.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    62  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    63  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    64  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    65  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    66  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    67  #include "_PinMap/IfxCcu6_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    68  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    69  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    70  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    72  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    73  /** \addtogroup IfxLld_Ccu6_Std_Enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    74   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    75  /** \brief Input selection, ( CC6x capture input / CTRAP input / CCPOSx input )\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    76   * Definition in Ifx_CCU.PISEL0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    77   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    78  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    79  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    80      IfxCcu6_CaptureCompareInput_cC60   = IFX_CCU6_PISEL0_ISCC60_OFF,  /**< \brief CC60 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    81      IfxCcu6_CaptureCompareInput_cC61   = IFX_CCU6_PISEL0_ISCC61_OFF,  /**< \brief CC61 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    82      IfxCcu6_CaptureCompareInput_cC62   = IFX_CCU6_PISEL0_ISCC62_OFF,  /**< \brief CC62 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    83      IfxCcu6_CaptureCompareInput_cTRAP  = IFX_CCU6_PISEL0_ISTRP_OFF,   /**< \brief CTRAP input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    84      IfxCcu6_CaptureCompareInput_cCPOS0 = IFX_CCU6_PISEL0_ISPOS0_OFF,  /**< \brief CCPOS0 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    85      IfxCcu6_CaptureCompareInput_cCPOS1 = IFX_CCU6_PISEL0_ISPOS1_OFF,  /**< \brief CCPOS1 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    86      IfxCcu6_CaptureCompareInput_cCPOS2 = IFX_CCU6_PISEL0_ISPOS2_OFF   /**< \brief CCPOS2 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    87  } IfxCcu6_CaptureCompareInput;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    88  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    89  /** \brief Selection of actual input signal for the capture compare inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    90   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    91  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    92  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    93      IfxCcu6_CaptureCompareInputSignal_a = 0,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    94      IfxCcu6_CaptureCompareInputSignal_b = 1,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    95      IfxCcu6_CaptureCompareInputSignal_c = 2,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    96      IfxCcu6_CaptureCompareInputSignal_d = 3   /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    97  } IfxCcu6_CaptureCompareInputSignal;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    98  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    99  /** \brief capture/compare state to set / clear the CC6xST-bits
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   100   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   101  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   102  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   103      IfxCcu6_CaptureCompareState_set    = 0, /**< \brief Bit CC6xST is set */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   104      IfxCcu6_CaptureCompareState_clear  = 1, /**< \brief Bit CC6xST is cleared */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   105      IfxCcu6_CaptureCompareState_toggle = 2  /**< \brief Bit CC6xST is toggled */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   106  } IfxCcu6_CaptureCompareState;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   107  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   108  /** \brief Capture compare output pins
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   109   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   110  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   111  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   112      IfxCcu6_ChannelOut_cc0   = 0,  /**< \brief CC60 compare output CC0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   113      IfxCcu6_ChannelOut_cout0 = 1,  /**< \brief CC60 compare output COUT0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   114      IfxCcu6_ChannelOut_cc1   = 2,  /**< \brief CC61 compare output CC1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   115      IfxCcu6_ChannelOut_cout1 = 3,  /**< \brief CC61 compare output COUT1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   116      IfxCcu6_ChannelOut_cc2   = 4,  /**< \brief CC62 compare output CC2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   117      IfxCcu6_ChannelOut_cout2 = 5,  /**< \brief CC62 compare output COUT2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   118      IfxCcu6_ChannelOut_cout3 = 6   /**< \brief CC63 compare output COUT3 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   119  } IfxCcu6_ChannelOut;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   120  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   121  /** \brief Defines the input event leading to a counting action of the timer (T12 / T13)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   122   * Definition in Ifx_CCU.PISEL2.B.ISCNT12 / Ifx_CCU.PISEL2.B.ISCNT13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   123   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   124  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   125  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   126      IfxCcu6_CountingInputMode_internal        = 0, /**< \brief The T1x prescaler generates the counting events,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   127                                                      * Bit TCTR4.T1xCNT is not taken into account. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   128      IfxCcu6_CountingInputMode_manual          = 1, /**< \brief Bit TCTR4.T1xCNT written with 1 is a counting
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   129                                                      * event. The T1x prescaler is not taken into account */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   130      IfxCcu6_CountingInputMode_externalRising  = 2, /**< \brief The timer T1x is counting each rising edge
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   131                                                      * detected in the selected T1xHR signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   132      IfxCcu6_CountingInputMode_externalFalling = 3  /**< \brief The timer T1x is counting each falling edge
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   133                                                      * detected in the selected T1xHR signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   134  } IfxCcu6_CountingInputMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   135  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   136  /** \brief Controls whether the source signal for the sampling of the Hall input pattern (selected by HSYNC) is delayed by the Dead-Time Counter 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   137   * Definition in Ifx_CCU.T12MSEL.B.DBYP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   138   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   139  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   140  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   141      IfxCcu6_DelayBypass_notActive = 0,  /**< \brief Dead-Time Counter 0 is generating a delay after
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   142                                           * the source signal becomes active */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   143      IfxCcu6_DelayBypass_active    = 1   /**< \brief Dead-Time Counter 0 is not used for a delay */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   144  } IfxCcu6_DelayBypass;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   145  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   146  /** \brief Defines the event of signal T1xHR that can set the run bit T1xR by HW\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   147   * Definition in Ifx_CCU.TCTR2.B.T12RSEL / IIfx_CCU.TCTR2.B.T13RSEL
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   148   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   149  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   150  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   151      IfxCcu6_ExternalTriggerMode_disable     = 0,  /**< \brief The external setting of T1xR is disabled */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   152      IfxCcu6_ExternalTriggerMode_risingEdge  = 1,  /**< \brief Bit T1xR is set if a rising edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   153                                                     * detected. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   154      IfxCcu6_ExternalTriggerMode_fallingEdge = 2,  /**< \brief Bit T1xR is set if a falling edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   155                                                     * detected. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   156      IfxCcu6_ExternalTriggerMode_anyEdge     = 3   /**< \brief Bit T1xR is set if an edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   157                                                     * detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   158  } IfxCcu6_ExternalTriggerMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   159  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   160  /** \brief Defines the source for the sampling of the Hall input pattern and the comparison to the current and the expected Hall pattern bit fields\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   161   * Definition in Ifx_CCU.T12MSEL.HSYNC
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   162   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   163  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   164  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   165      IfxCcu6_HallSensorTriggerMode_permanentCheck    = 0,  /**< \brief Any edge at any of the inputs CCPOSx, independent from any PWM
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   166                                                             * signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   167      IfxCcu6_HallSensorTriggerMode_cM63              = 1,  /**< \brief A T13 Compare-Match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   168      IfxCcu6_HallSensorTriggerMode_t13PM             = 2,  /**< \brief A T13 Period-Match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   169      IfxCcu6_HallSensorTriggerMode_off               = 3,  /**< \brief Hall sampling triggered by HW sources is switched off */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   170      IfxCcu6_HallSensorTriggerMode_t12PMCountingUp   = 4,  /**< \brief A T12 Period-Match while counting up (T12_PM and CDIR = 0) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   171      IfxCcu6_HallSensorTriggerMode_t12OMCountingDown = 5,  /**< \brief A T12 One-Match while counting down (T12_PM and CDIR = 1) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   172      IfxCcu6_HallSensorTriggerMode_cM61CountingUp    = 6,  /**< \brief A T12 Compare-Match of compare channel CC61 while counting up (CM_61 and CDIR = 0) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   173      IfxCcu6_HallSensorTriggerMode_cM61CountingDown  = 7   /**< \brief A T12 Compare-Match of compare channel CC61 while counting down (CM_61 and CDIR = 1) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   174  } IfxCcu6_HallSensorTriggerMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   175  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   176  /** \brief Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   177   * Description in Ifx_CCU.IEN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   178   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   179  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   180  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   181      IfxCcu6_InterruptSource_cc60RisingEdge   = IFX_CCU6_IS_ICC60R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   182                                                                          * enable for channel CC60 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   183      IfxCcu6_InterruptSource_cc60FallingEdge  = IFX_CCU6_IS_ICC60F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   184                                                                          * enable for channel CC60 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   185      IfxCcu6_InterruptSource_cc61RisingEdge   = IFX_CCU6_IS_ICC61R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   186                                                                          * enable for channel CC61 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   187      IfxCcu6_InterruptSource_cc61FallingEdge  = IFX_CCU6_IS_ICC61F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   188                                                                          * enable for channel CC61 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   189      IfxCcu6_InterruptSource_cc62RisingEdge   = IFX_CCU6_IS_ICC62R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   190                                                                          * enable for channel CC62 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   191      IfxCcu6_InterruptSource_cc62FallingEdge  = IFX_CCU6_IS_ICC62F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   192                                                                          * enable for channel CC62 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   193      IfxCcu6_InterruptSource_t12OneMatch      = IFX_CCU6_IS_T12OM_OFF,  /**< \brief Interrupt enable for T12 one-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   194      IfxCcu6_InterruptSource_t12PeriodMatch   = IFX_CCU6_IS_T12PM_OFF,  /**< \brief Interrupt enable for T12 period-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   195      IfxCcu6_InterruptSource_t13CompareMatch  = IFX_CCU6_IS_T13CM_OFF,  /**< \brief Interrupt enable for T13 compare-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   196      IfxCcu6_InterruptSource_t13PeriodMatch   = IFX_CCU6_IS_T13PM_OFF,  /**< \brief Interrupt enable for T13 period-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   197      IfxCcu6_InterruptSource_trap             = IFX_CCU6_IS_TRPF_OFF,   /**< \brief Interrupt enable for trap flag */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   198      IfxCcu6_InterruptSource_correctHallEvent = IFX_CCU6_IS_CHE_OFF,    /**< \brief Interrupt enable for correct hall event */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   199      IfxCcu6_InterruptSource_wrongHallEvent   = IFX_CCU6_IS_WHE_OFF     /**< \brief Interrupt enable for wrong hall event */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   200  } IfxCcu6_InterruptSource;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   201  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   202  /** \brief Selection of the trigger request source (next multi-channel event) for the shadow transfer MCM_ST from MCMPS to MCMP\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   203   * Definition in Ifx_CCU.MCMCTR.B.SWSEL
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   204   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   205  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   206  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   207      IfxCcu6_MultiChannelSwitchingSelect_noEvent                 = 0,  /**< \brief No trigger request will be generated */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   208      IfxCcu6_MultiChannelSwitchingSelect_correctHallEvent        = 1,  /**< \brief Correct Hall pattern detected (CM_CHE) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   209      IfxCcu6_MultiChannelSwitchingSelect_t13PeriodMatch          = 2,  /**< \brief T13 period-match detected (while counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   210      IfxCcu6_MultiChannelSwitchingSelect_t12OneMatch             = 3,  /**< \brief T12 one-match (while counting down) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   211      IfxCcu6_MultiChannelSwitchingSelect_t12Channel1CompareMatch = 4,  /**< \brief T12 channel 1 compare-match detected (phase
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   212                                                                         * delay function) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   213      IfxCcu6_MultiChannelSwitchingSelect_t12PeriodMatch          = 5   /**< \brief T12 period match detected (while counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   214  } IfxCcu6_MultiChannelSwitchingSelect;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   215  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   216  /** \brief Selection of the synchronization mechanism for the shadow transfer event MCM_ST\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   217   * Definition in Ifx_CCU.MCMCTR.B.SWSYN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   218   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   219  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   220  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   221      IfxCcu6_MultiChannelSwitchingSync_direct       = 0,  /**< \brief Direct, the trigger event immediately leads to the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   222                                                            * shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   223      IfxCcu6_MultiChannelSwitchingSync_t13ZeroMatch = 1,  /**< \brief A T13 zero-match triggers the shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   224      IfxCcu6_MultiChannelSwitchingSync_t12ZeroMatch = 2   /**< \brief A T12 zero-match (while counting up) triggers the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   225                                                            * shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   226  } IfxCcu6_MultiChannelSwitchingSync;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   227  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   228  /** \brief Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   229   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   230  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   231  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   232      IfxCcu6_ServiceRequest_0 = 0,      /**< \brief Service request output SR0  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   233      IfxCcu6_ServiceRequest_1,          /**< \brief Service request output SR1  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   234      IfxCcu6_ServiceRequest_2,          /**< \brief Service request output SR2  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   235      IfxCcu6_ServiceRequest_3           /**< \brief Service request output SR3  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   236  } IfxCcu6_ServiceRequest;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   237  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   238  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   239   * Definition in Ifx_CCU6.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   240   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   241  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   242  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   243      IfxCcu6_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   244      IfxCcu6_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   245  } IfxCcu6_SleepMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   246  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   247  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   248   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   249  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   250  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   251      IfxCcu6_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   252      IfxCcu6_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   253      IfxCcu6_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   254  } IfxCcu6_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   255  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   256  /** \brief Capture compare channel of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   257   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   258  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   259  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   260      IfxCcu6_T12Channel_0 = 0,      /**< \brief T12 channel CC60  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   261      IfxCcu6_T12Channel_1,          /**< \brief T12 channel CC61  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   262      IfxCcu6_T12Channel_2           /**< \brief T12 channel CC62  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   263  } IfxCcu6_T12Channel;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   264  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   265  /** \brief The operating mode for the T12 channels are defined by the bit fields Ifx_CCU.T12MSEL.MSEL6x.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   266   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   267  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   268  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   269      IfxCcu6_T12ChannelMode_off                                   = 0,  /**< \brief Capture/Compare modes switched off */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   270      IfxCcu6_T12ChannelMode_compareMode                           = 1,  /**< \brief Compare mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   271      IfxCcu6_T12ChannelMode_doubleRegisterCaptureRisingAndFalling = 4,  /**< \brief CC6xIN rising edge: T12 stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   272      IfxCcu6_T12ChannelMode_doubleRegisterCaptureRising           = 5,  /**< \brief CC6xIN rising edge: CC6nSR stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   273      IfxCcu6_T12ChannelMode_doubleRegisterCaptureFalling          = 6,  /**< \brief CC6xIN rising edge: CC6nSR stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   274      IfxCcu6_T12ChannelMode_doubleRegisterCaptureAny              = 7,  /**< \brief CC6xIN any active edge: CC6nSR stored in CC6xR, any active edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   275      IfxCcu6_T12ChannelMode_hallSensor                            = 8,  /**< \brief Hall Sensor Mode, In order to properly enable this mode, all three MSEL6x fields have to be
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   276                                                                          * programmed to Hall Sensor mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   277      IfxCcu6_T12ChannelMode_hysteresisLikecompare                 = 9,  /**< \brief Hysteresis-like compare mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   278      IfxCcu6_T12ChannelMode_multiInputCaptureRisingAndFalling     = 10, /**< \brief CC6xIN rising edge: T12 stored in CC6xR, CCPOSx falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   279      IfxCcu6_T12ChannelMode_multiInputCaptureFallingAndRising     = 11, /**< \brief CC6xIN falling edge: T12 stored in CC6xR, CCPOSx rising edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   280      IfxCcu6_T12ChannelMode_multiInputCaptureBothRising           = 12, /**< \brief CC6xIN rising edge: T12 stored in CC6xR, CCPOSx rising edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   281      IfxCcu6_T12ChannelMode_multiInputCaptureBothFalling          = 13, /**< \brief CC6xIN falling edge: T12 stored in CC6xR, CCPOSx falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   282      IfxCcu6_T12ChannelMode_multiInputCaptureAny                  = 14  /**< \brief CC6xIN any active edge : T12 stored in CC6xR, CCPOSx any active edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   283  } IfxCcu6_T12ChannelMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   284  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   285  /** \brief Counting direction of Timer12\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   286   * Definition in Ifx_CCU.TCTR0.B.CDIR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   287   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   288  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   289  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   290      IfxCcu6_T12CountDirection_up   = 0, /**< \brief Counting up */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   291      IfxCcu6_T12CountDirection_down = 1  /**< \brief Counting down */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   292  } IfxCcu6_T12CountDirection;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   293  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   294  /** \brief Operating mode of Timer 12\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   295   * Definition in Ifx_CCU.TCTR0.B.CTM
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   296   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   297  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   298  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   299      IfxCcu6_T12CountMode_edgeAligned   = 0, /**< \brief T12 always counts up and continues counting
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   300                                               * from zero after reaching the period value. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   301      IfxCcu6_T12CountMode_centerAligned = 1  /**< \brief T12 counts down after detecting a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   302                                               * and counts up after detecting a one-match. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   303  } IfxCcu6_T12CountMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   304  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   305  /** \brief Delivers additional information to control the automatic set of bit T13R in the case that the trigger action defined by T13 trigger event control (T13TEC) is detected.\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   306   * Definition in Ifx_CCU.TCTR2.B.T13TED
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   307   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   308  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   309  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   310      IfxCcu6_T13TriggerDirection_noAction          = 0,  /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   311      IfxCcu6_T13TriggerDirection_onT12CountingUp   = 1,  /**< \brief while T12 is counting up */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   312      IfxCcu6_T13TriggerDirection_onT12CountingDown = 2,  /**< \brief while T12 is counting down */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   313      IfxCcu6_T13TriggerDirection_anyT12            = 3   /**< \brief independent on the count direction of T12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   314  } IfxCcu6_T13TriggerDirection;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   315  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   316  /** \brief Selects the trigger event to start T13 (automatic set of T13R for synchronization to T12 compare signals)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   317   * Definition in Ifx_CCU.TCTR2.B.T13TEC
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   318   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   319  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   320  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   321      IfxCcu6_T13TriggerEvent_noAction        = 0,  /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   322      IfxCcu6_T13TriggerEvent_onCC60RCompare  = 1,  /**< \brief set T13R on a T12 compare event on channel 0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   323      IfxCcu6_T13TriggerEvent_onCC61RCompare  = 2,  /**< \brief set T13R on a T12 compare event on channel 1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   324      IfxCcu6_T13TriggerEvent_onCC62RCompare  = 3,  /**< \brief set T13R on a T12 compare event on channel 2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   325      IfxCcu6_T13TriggerEvent_onAnyT12Compare = 4,  /**< \brief set T13R on any T12 compare event (ch. 0, 1, 2) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   326      IfxCcu6_T13TriggerEvent_onT12Period     = 5,  /**< \brief set T13R upon a period-match of T12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   327      IfxCcu6_T13TriggerEvent_onT12Zero       = 6,  /**< \brief set T13R upon a zero-match of T12 (while
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   328                                                     * counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   329      IfxCcu6_T13TriggerEvent_onCCPOSxEdge    = 7   /**< \brief set T13R on any edge of inputs CCPOSx */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   330  } IfxCcu6_T13TriggerEvent;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   331  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   332  /** \brief Timer number ( T12 / T13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   333   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   334  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   335  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   336      IfxCcu6_TimerId_t12 = 0,  /**< \brief Timer 12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   337      IfxCcu6_TimerId_t13 = 1   /**< \brief Timer 13 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   338  } IfxCcu6_TimerId;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   339  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   340  /** \brief Selects the input clock for timers (T12 or T13) that is derived from the peripheral clock according to the equation\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   341   * Definition in Ifx_CCU.TCTR0.B.T12CLK / Ifx_CCU.TCTR0.B.T13CLK
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   342   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   343  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   344  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   345      IfxCcu6_TimerInputClock_fcc6      = 0, /**< \brief fcc6 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   346      IfxCcu6_TimerInputClock_fcc6By2   = 1, /**< \brief fcc6 / 2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   347      IfxCcu6_TimerInputClock_fcc6By4   = 2, /**< \brief fcc6 / 4 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   348      IfxCcu6_TimerInputClock_fcc6By8   = 3, /**< \brief fcc6 / 8 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   349      IfxCcu6_TimerInputClock_fcc6By16  = 4, /**< \brief fcc6 / 16 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   350      IfxCcu6_TimerInputClock_fcc6By32  = 5, /**< \brief fcc6 / 32 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   351      IfxCcu6_TimerInputClock_fcc6By64  = 6, /**< \brief fcc6 / 64 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   352      IfxCcu6_TimerInputClock_fcc6By128 = 7  /**< \brief fcc6 / 128 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   353  } IfxCcu6_TimerInputClock;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   354  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   355  /** \brief Selection of actual input signal for the timer inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   356   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   357  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   358  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   359      IfxCcu6_TimerInputSignal_a = 0,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   360      IfxCcu6_TimerInputSignal_b = 1,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   361      IfxCcu6_TimerInputSignal_c = 2,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   362      IfxCcu6_TimerInputSignal_d = 3,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   363      IfxCcu6_TimerInputSignal_e = 0,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   364      IfxCcu6_TimerInputSignal_f = 1,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   365      IfxCcu6_TimerInputSignal_g = 2,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   366      IfxCcu6_TimerInputSignal_h = 3   /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   367  } IfxCcu6_TimerInputSignal;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   368  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   369  /** \brief Timer (T12 / T13) run status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   370   * Definition in Ifx_CCU.TCTR0.B.T12R and Ifx_CCU.TCTR0.B.T13R
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   371   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   373  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   374      IfxCcu6_TimerRunStatus_stopped = 0,  /**< \brief Timer T1x is stopped. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   375      IfxCcu6_TimerRunStatus_running = 1   /**< \brief Timer T1x is running. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   376  } IfxCcu6_TimerRunStatus;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   377  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   378  /** \brief Defines how the trap flag TRPF can be cleared after the trap input condition is no longer valid (either by CTRAP = 1 or by TRPPEN = 0)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   379   * Definition in Ifx_CCU.TRPCTR.B.TRPM2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   380   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   381  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   382  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   383      IfxCcu6_TrapMode_automatic = 0,  /**< \brief Bit TRPF is cleared by HW */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   384      IfxCcu6_TrapMode_manual    = 1   /**< \brief Bit TRPF stays 0, It has to be cleared by SW by writing
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   385                                        * ISR.RTRPF = 1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   386  } IfxCcu6_TrapMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   387  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   388  /** \brief Defines the behavior of the selected outputs when leaving the trap state, after the trap condition has become inactive again\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   389   * Definition in Ifx_CCU.TRPCTR.B.TRPMx (x = 0, 1)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   390   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   391  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   392  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   393      IfxCcu6_TrapState_t12Sync   = 0, /**< \brief The trap state is left when a zero-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   394                                        * of T12 (while counting up) is detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   395      IfxCcu6_TrapState_t13Sync   = 1, /**< \brief The trap state is left when a zeromatch
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   396                                        * of T13 is detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   397      IfxCcu6_TrapState_immediate = 3  /**< \brief The trap state is left immediately without any synchronization to T12 or T13 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   398  } IfxCcu6_TrapState;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   399  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   400  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   401  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   402  /** \addtogroup IfxLld_Ccu6_Std_Operative
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   403   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   404  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   405  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   406  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   407  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   408  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   409  /** \brief Clears the counters of the Timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   410   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   411   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   412   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   413   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   414   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   415  IFX_INLINE void IfxCcu6_clearCounter(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   416  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   417  /** \brief Clears all the three dead-time counter channels to zero.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   418   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   419   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   420   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   421  IFX_INLINE void IfxCcu6_clearDeadTimeCounters(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   422  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   423  /** \brief Clears the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   424   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   425   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   426   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   427   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   428  IFX_INLINE void IfxCcu6_clearInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   429  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   430  /** \brief Clears the T12  One notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   431   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   432   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   433   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   434  IFX_INLINE void IfxCcu6_clearT12OneNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   435  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   436  /** \brief Clears the T12  period notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   437   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   438   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   439   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   440  IFX_INLINE void IfxCcu6_clearT12PeriodNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   441  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   442  /** \brief Clears the T13  compare notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   443   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   444   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   445   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   446  IFX_INLINE void IfxCcu6_clearT13CompareNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   447  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   448  /** \brief Returns the Timer pointer
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   449   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   450   * \return Timer pointer
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   451   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   452  IFX_INLINE volatile uint32 *IfxCcu6_getT12TimerPointer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   453  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   454  /** \brief Returns the status of module enabled or disabled
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   455   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   456   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   457   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   458  IFX_INLINE boolean IfxCcu6_isModuleEnabled(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   459  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   460  /** \brief Returns the status of T12 one notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   461   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   462   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   463   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   464  IFX_INLINE boolean IfxCcu6_isT12OneNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   465  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   466  /** \brief Returns the status of T12 period notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   467   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   468   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   469   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   470  IFX_INLINE boolean IfxCcu6_isT12PeriodNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   471  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   472  /** \brief Returns the status of T13 compare notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   473   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   474   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   475   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   476  IFX_INLINE boolean IfxCcu6_isT13CompareNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   477  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   478  /** \brief Sets the input event leading to a counting action of Timers (T12 / T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   479   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   480   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   481   * \param mode Input event leading to a counting action of the timer (T12 / T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   482   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   483   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   484  IFX_INLINE void IfxCcu6_setCountingInputMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_CountingInputMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   485  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   486  /** \brief Sets the current hall pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   487   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   488   * \param pattern Current hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   489   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   490   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   491  IFX_INLINE void IfxCcu6_setCurrentHallPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   492  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   493  /** \brief Sets the delay between switching from the passive state to the active state of the selected outputs (dead time)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   494   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   495   * \param value Value of the dead time to be induced
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   496   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   497   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   498  IFX_INLINE void IfxCcu6_setDeadTimeValue(Ifx_CCU6 *ccu6, uint8 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   499  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   500  /** \brief Sets the expected hall pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   501   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   502   * \param pattern Expected hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   503   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   504   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   505  IFX_INLINE void IfxCcu6_setExpectedHallPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   506  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   507  /** \brief Sets the event of signal T1xHR that can set the run bit T1xR by HW
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   508   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   509   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   510   * \param mode External trigger mode
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   511   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   512   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   513  IFX_INLINE void IfxCcu6_setExternalRunMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ExternalTriggerMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   514  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   515  /** \brief Sets source for the sampling of the Hall input pattern and the comparison to the current and the expected Hall pattern bit fields
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   516   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   517   * \param mode Hall sensor input trigger event
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   518   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   519   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   520  IFX_INLINE void IfxCcu6_setHallSensorTriggerMode(Ifx_CCU6 *ccu6, IfxCcu6_HallSensorTriggerMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   521  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   522  /** \brief Sets the input clock for timers (T12 or T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   523   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   524   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   525   * \param frequency Input clock for timers (T12 or T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   526   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   527   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   528  IFX_INLINE void IfxCcu6_setInputClockFrequency(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_TimerInputClock frequency);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   529  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   530  /** \brief Sets the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   531   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   532   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   533   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   534   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   535  IFX_INLINE void IfxCcu6_setInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   536  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   537  /** \brief Sets the output pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   538   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   539   * \param pattern Output pattern for the multichannel mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   540   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   541   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   542  IFX_INLINE void IfxCcu6_setMultiChannelPwmPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   543  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   544  /** \brief Sets the trigger request source (next multi-channel event) for the shadow transfer MCM_ST from MCMPS to MCMP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   545   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   546   * \param mode Trigger request source (next multi-channel event) for the shadow transfer MCM_ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   547   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   548   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   549  IFX_INLINE void IfxCcu6_setMultiChannelSwitchingMode(Ifx_CCU6 *ccu6, IfxCcu6_MultiChannelSwitchingSelect mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   550  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   551  /** \brief Sets the synchronization mechanism of the shadow transfer event MCM_ST\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   552   * if it has been requested before (flag R set by an event selected by SWSEL) and if MCMEN = 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   553   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   554   * \param sync Synchronization mechanism of the shadow transfer event MCM_ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   555   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   556   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   557  IFX_INLINE void IfxCcu6_setMultiChannelSwitchingSync(Ifx_CCU6 *ccu6, IfxCcu6_MultiChannelSwitchingSync sync);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   558  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   559  /** \brief Sets the state of the corresponding compare channel, that is considered to be the passive state
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   560   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   561   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   562   * \param state FALSE: passive state when CC6xST == 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   563   * TRUE : passive state when CC6xST == 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   564   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   565   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   566  IFX_INLINE void IfxCcu6_setOutputPassiveState(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut, boolean state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   567  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   568  /** \brief Enables / Disables the single shot mode of Timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   569   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   570   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   571   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   573   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   574  IFX_INLINE void IfxCcu6_setSingleShotModeEnable(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   575  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   576  /** \brief Sets the operating mode of the Timer12 capture/compare channels
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   577   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   578   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   579   * \param mode The operating mode for the T12 channels
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   580   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   581   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   582  IFX_INLINE void IfxCcu6_setT12ChannelMode(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, IfxCcu6_T12ChannelMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   583  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   584  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   585   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   586   * \param mode Operating mode of Timer 12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   587   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   588   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   589  IFX_INLINE void IfxCcu6_setT12CountMode(Ifx_CCU6 *ccu6, IfxCcu6_T12CountMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   590  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   591  /** \brief Sets the 16-bit counter value of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   592   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   593   * \param value Counter value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   595   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   596  IFX_INLINE void IfxCcu6_setT12CounterValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   597  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   598  /** \brief Sets the period value that leads Timer12 counter value to a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   599   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   600   * \param value Period value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   601   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   602   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   603  IFX_INLINE void IfxCcu6_setT12PeriodValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   604  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   605  /** \brief Sets the 16-bit compare value of Timer13 (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   606   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   607   * \param value Compare value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   609   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   610  IFX_INLINE void IfxCcu6_setT13CompareValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   611  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   612  /** \brief Sets the 16-bit counter value of Timer13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   613   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   614   * \param value counter value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   616   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   617  IFX_INLINE void IfxCcu6_setT13CounterValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   618  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   619  /** \brief Sets the period value that leads Timer13 counter value to a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   620   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   621   * \param value period value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   622   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   623   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   624  IFX_INLINE void IfxCcu6_setT13PeriodValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   625  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   626  /** \brief Sets the Timer13 trigger event direction
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   627   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   628   * \param direction T13 trigger event direction
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   630   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   631  IFX_INLINE void IfxCcu6_setT13TriggerEventDirection(Ifx_CCU6 *ccu6, IfxCcu6_T13TriggerDirection direction);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   632  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   633  /** \brief Sets the trigger event to start Timer13 (automatic set of T13R for synchronization to Timer12 compare signals)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   634   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   635   * \param mode The trigger event to start T13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   636   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   637   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   638  IFX_INLINE void IfxCcu6_setT13TriggerEventMode(Ifx_CCU6 *ccu6, IfxCcu6_T13TriggerEvent mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   639  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   640  /** \brief Sets the mode of clearing the trap flag TRPF after the trap input condition is no longer valid
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   641   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   642   * \param mode Trap mode selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   643   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   644   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   645  IFX_INLINE void IfxCcu6_setTrapMode(Ifx_CCU6 *ccu6, IfxCcu6_TrapMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   646  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   647  /** \brief Sets behaviour of the selected outputs when leaving the trap state after the trap condition has become inactive again.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   648   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   649   * \param state Trap state selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   650   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   651   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   652  IFX_INLINE void IfxCcu6_setTrapState(Ifx_CCU6 *ccu6, IfxCcu6_TrapState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   653  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   654  /** \brief starts the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   655   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   656   * \param t12 Timer12 start choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   657   * \param t13 Timer13 start choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   658   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   659   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   660  IFX_INLINE void IfxCcu6_startTimer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   661  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   662  /** \brief starts the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   663   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   664   * \param t12 Timer12 stop choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   665   * \param t13 Timer13 stop choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   666   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   667   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   668  IFX_INLINE void IfxCcu6_stopTimer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   669  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   670  /** \brief Updates the hall pattern (current hall, expected hall, moduleation output), in a single write
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   671   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   672   * \param currentHall Current hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   673   * \param expectedHall Expected hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   674   * \param output Output pattern for the multichannel mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   675   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   676   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   677  IFX_INLINE void IfxCcu6_updateHallPattern(Ifx_CCU6 *ccu6, uint8 currentHall, uint8 expectedHall, uint8 output);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   678  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   679  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   680  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   681  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   682  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   683  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   684   * \param ccu6 Specifies Ccu6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   685   * \param outputLine Output Line
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   686   * \param selectedTrigger Trigger selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   687   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   688   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   689  IFX_EXTERN void IfxCcu6_connectTrigger(Ifx_CCU6 *ccu6, IfxCcu6_TrigOut outputLine, IfxCcu6_TrigSel selectedTrigger);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   690  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   691  /** \brief Routes the interrupt node pointer to the selected service requests
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   692   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   693   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   694   * \param serviceRequest Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   696   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   697  IFX_EXTERN void IfxCcu6_routeInterruptNode(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source, IfxCcu6_ServiceRequest serviceRequest);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   698  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   699  /** \brief Sets the passive state level of the PWM outputs of the module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   700   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   701   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   702   * \param state FALSE: The passive level is 0.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   703   * TRUE : The passive level is 1.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   704   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   705   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   706  IFX_EXTERN void IfxCcu6_setOutputPassiveLevel(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut, boolean state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   707  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   708  /** \brief Sets software-control (independent set and clear conditions) for the Timer12 channel state bits CC6xST (x=0,1,2)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   709   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   710   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   711   * \param state capture/compare state selection (set / clear / toggle)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   712   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   713   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   714  IFX_EXTERN void IfxCcu6_setT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, IfxCcu6_CaptureCompareState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   715  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   716  /** \brief Sets the 16-bit compare value of Timer12 (writes into shadow registers)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   717   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   718   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   719   * \param value Compare value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   720   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   721   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   722  IFX_EXTERN void IfxCcu6_setT12CompareValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   723  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   724  /** \brief Sets the frequency and clock input of the Timer 12.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   725   * Caution: If desired frequency cannot achieved (by successive divisions by 2) :
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   726   * Then the nearest frequency value is set ( >= desired value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   727   * The resulting frequency is captured in the handler element : CaptureFrequency.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   728   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   729   * \param frequency Requested timer frequency in Hz
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   730   * \param period period value to be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   731   * \param countMode Counting mode of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   732   * \return Zero, if the function failed to fulfill requested frequency and resolution\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   733   * Positive, if the function can find settings close to the requested frequency and resolution above the requested
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   734   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   735  IFX_EXTERN float32 IfxCcu6_setT12Frequency(Ifx_CCU6 *ccu6, float32 frequency, Ifx_TimerValue period, IfxCcu6_T12CountMode countMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   736  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   737  /** \brief selects the actual input signal for the timer inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   738   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   739   * \param extInput External input signal for the Timer 12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   740   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   741   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   742  IFX_EXTERN void IfxCcu6_setT12InputSignal(Ifx_CCU6 *ccu6, IfxCcu6_T12hr_In *extInput);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   743  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   744  /** \brief Sets software-control (independent set and clear conditions) for the Timer13 channel state bits CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   745   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   746   * \param state capture/compare state selection (set / clear / toggle)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   747   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   748   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   749  IFX_EXTERN void IfxCcu6_setT13CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_CaptureCompareState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   750  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   751  /** \brief Sets the frequency and clock input of the Timer 13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   752   * Caution: If desired frequency cannot achieved (by successive divisions by 2) :
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   753   * Then the nearest frequency value is set ( >= desired value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   754   * The resulting frequency is captured in the handler element : captureFrequency.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   755   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   756   * \param frequency Requested timer frequency in Hz
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   757   * \param period period value to be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   758   * \return Zero, if the function failed to fulfill requested frequency and resolution\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   759   * Positive, if the function can find settings close to the requested frequency and resolution above the requested
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   760   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   761  IFX_EXTERN float32 IfxCcu6_setT13Frequency(Ifx_CCU6 *ccu6, float32 frequency, Ifx_TimerValue period);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   762  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   763  /** \brief selects the actual input signal for the timer inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   764   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   765   * \param extInput External input signal for the Timer 13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   766   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   767   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   768  IFX_EXTERN void IfxCcu6_setT13InputSignal(Ifx_CCU6 *ccu6, IfxCcu6_T13hr_In *extInput);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   769  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   770  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   771  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   772  /** \addtogroup IfxLld_Ccu6_Std_Utility
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   773   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   774  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   775  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   776  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   777  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   778  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   779  /** \brief Indicate the status of the dead time generation for each compare channel (0, 1, 2) of timer T12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   780   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   781   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   782   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   783   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   784  IFX_INLINE boolean IfxCcu6_getDeadTimeStatus(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   785  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   786  /** \brief Returns the value of the input Hall pattern of the Timer12 capture/compare channels CC6POS6x (x = 0, 1, 2)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   787   * that has been compared to the current and expected value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   788   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   789   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   790   * \return Status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   791   * TRUE : The input CCPOSx has been sampled as 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   792   * FALSE : The input CCPOSx has been sampled as 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   793   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   794  IFX_INLINE boolean IfxCcu6_getHallPatternSampleState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   795  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   796  /** \brief Gets the status of the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   797   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   798   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   799   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   800   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   801  IFX_INLINE boolean IfxCcu6_getInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   802  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   803  /** \brief indicates if the multi-channel mode functionality is available
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   804   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   805   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   806   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   807  IFX_INLINE boolean IfxCcu6_getMultiChannelModeAvailabilityStatus(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   808  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   809  /** \brief Gets the status of the shadow transfer request from MCMPS to MCMP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   810   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   811   * \return Status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   812   * FALSE: A shadow transfer MCM_ST is not requested\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   813   * TRUE:  A shadow transfer MCM_ST is requested, but has not yet been executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   814   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   815  IFX_INLINE boolean IfxCcu6_getMultiChannelPWMPatternShadowTransferStatus(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   816  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   817  /** \brief Returns the Timer (T12 / T13) shadow transfer enable status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   818   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   819   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   820   * \return Status (TRUE: enable / FALSE: disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   821   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   822  IFX_INLINE boolean IfxCcu6_getShadowTransferStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   823  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   824  /** \brief Returns the state of the Timer12 capture/compare channels CC6xST (x = 0, 1, 2)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   825   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   826   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   827   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   828   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   829  IFX_INLINE boolean IfxCcu6_getT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   830  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   831  /** \brief Returns the current counting direction of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   832   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   833   * \return direction (up / down)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   834   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   835  IFX_INLINE IfxCcu6_T12CountDirection IfxCcu6_getT12CountDirection(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   836  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   837  /** \brief Returns the state of the Timer13 capture/compare channel CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   838   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   839   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   840   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   841  IFX_INLINE boolean IfxCcu6_getT13CaptureCompareState(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   842  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   843  /** \brief indicates the Timer blocks (T12 / T13) availability
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   844   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   845   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   846   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   847   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   848  IFX_INLINE boolean IfxCcu6_getTimerAvailabilityStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   849  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   850  /** \brief Returns the Timer (T12 / T13) run status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   851   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   852   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   853   * \return Status (stopped / running)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   854   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   855  IFX_INLINE IfxCcu6_TimerRunStatus IfxCcu6_getTimerRunStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   856  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   857  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   858   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   859   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   860   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   861   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   862   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   863  IFX_INLINE boolean IfxCcu6_isModuleSuspended(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   864  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   865  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   866   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   867   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   868   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   869   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   870   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   871  IFX_INLINE void IfxCcu6_setSuspendMode(Ifx_CCU6 *ccu6, IfxCcu6_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   872  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   873  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   874  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   875  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   876  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   877  /** \brief Returns the module index of the selected CCU6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   878   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   879   * \return CCU6 module register address
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   880   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   881  IFX_EXTERN Ifx_CCU6 *IfxCcu6_getAddress(IfxCcu6_Index ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   882  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   883  /** \brief Returns the capture register value of the selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   884   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   885   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   886   * \return current value of the capture register of a selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   887   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   888  IFX_EXTERN uint32 IfxCcu6_getCaptureRegisterValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   889  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   890  /** \brief Returns the capture shadow register value of the selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   891   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   892   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   893   * \return current value of the capture shadow register of a selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   894   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   895  IFX_EXTERN uint32 IfxCcu6_getCaptureShadowRegisterValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   896  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   897  /** \brief Returns CCU6 index
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   898   * \param ccu6 Specifies the pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   899   * \return Returns index. returns -1 in case of unknown index
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   900   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   901  IFX_EXTERN IfxCcu6_Index IfxCcu6_getIndex(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   902  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   903  /** \brief Returns the service request register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   904   * \param ccu6 Specifies Ccu6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   905   * \param serviceRequest Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   906   * \return The service request register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   907   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   908  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxCcu6_getSrcAddress(Ifx_CCU6 *ccu6, IfxCcu6_ServiceRequest serviceRequest);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   909  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   910  /** \brief Returns the current value of the timer register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   911   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   912   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   913   * \return current value of the timer register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   914   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   915  IFX_EXTERN uint32 IfxCcu6_readTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   916  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   917  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   918  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   919  /** \addtogroup IfxLld_Ccu6_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   920   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   921  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   922  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   923  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   924  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   925  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   926  /** \brief Clears all Interrupt flags
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   927   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   928   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   929   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   930  IFX_INLINE void IfxCcu6_clearAllInterruptStatusFlags(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   931  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   932  /** \brief Disables the additional prescaler of 1/256 can be enabled for the prescaler of T12 or T13 to support higher clock frequencies
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   933   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   934   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   935   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   936   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   937  IFX_INLINE void IfxCcu6_disableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   938  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   939  /** \brief Disables the dead time generation for each compare channel (0, 1, 2) of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   940   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   941   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   942   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   943   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   944  IFX_INLINE void IfxCcu6_disableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   945  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   946  /** \brief Disables the delay of the source signal for the sampling of the Hall input pattern (selected by HSYNC)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   947   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   948   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   949   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   950  IFX_INLINE void IfxCcu6_disableDelayBypass(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   951  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   952  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   953   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   954   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   955   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   956   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   957  IFX_INLINE void IfxCcu6_disableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   958  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   959  /** \brief Sets multi channel mode unavailable, A write access to MCMOUTS is ignored
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   960   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   961   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   962   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   963  IFX_INLINE void IfxCcu6_disableMultiChannelMode(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   964  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   965  /** \brief Disables shadow transfers of the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   966   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   967   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   968   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   969   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   970   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   971  IFX_INLINE void IfxCcu6_disableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   972  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   973  /** \brief Disables the single shot-mode of Timers (T12 T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   974   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   975   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   976   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   977   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   978  IFX_INLINE void IfxCcu6_disableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   979  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   980  /** \brief Disables the Inversion of T13 signal for the modulation of the CC6x and COUT6x (x = 0, 1, 2) signals\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   981   * T13 output CC63_O is equal to CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   982   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   983   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   984   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   985  IFX_INLINE void IfxCcu6_disableT13InvertedModulation(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   986  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   987  /** \brief Sets Timer12 block unavailable, A write access to T12PR is ignored
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   988   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   989   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   990   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   991   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   992  IFX_INLINE void IfxCcu6_disableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   993  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   994  /** \brief Disables the trap functionality for the corresponding output signals
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   995   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   996   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   997   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   998   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   999  IFX_INLINE void IfxCcu6_disableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1000  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1001  /** \brief Disables the input (pin) function for the trap generation
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1002   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1003   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1004   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1005  IFX_INLINE void IfxCcu6_disableTrapPin(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1006  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1007  /** \brief Enables the additional prescaler of 1/256 can be enabled for the prescaler of T12 or T13 to support higher clock frequencies
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1008   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1009   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1010   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1011   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1012  IFX_INLINE void IfxCcu6_enableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1013  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1014  /** \brief Sets the single shot-mode of Timers (T12, T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1015   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1016   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1017   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1018   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1019   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1020  IFX_INLINE void IfxCcu6_enableCountEvent(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1021  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1022  /** \brief Enables the dead time generation for each compare channel (0, 1, 2) of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1023   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1024   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1025   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1026   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1027  IFX_INLINE void IfxCcu6_enableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1028  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1029  /** \brief Enables the delay of the source signal for the sampling of the Hall input pattern (selected by HSYNC) by the Dead-Time Counter 0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1030   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1031   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1032   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1033  IFX_INLINE void IfxCcu6_enableDelayBypass(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1034  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1035  /** \brief Sets HP_ST immediately to update bit fields EXPH and CURH by EXPHS and CURHS
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1036   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1037   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1038   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1039  IFX_INLINE void IfxCcu6_enableHallPatternShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1040  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1041  /** \brief Enables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1042   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1043   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1044   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1045   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1046  IFX_INLINE void IfxCcu6_enableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1047  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1048  /** \brief Sets multi channel mode available, A write access to MCMOUTS is executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1049   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1050   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1051   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1052  IFX_INLINE void IfxCcu6_enableMultiChannelMode(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1053  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1054  /** \brief Enables the Multi Channel Mode Availability
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1055   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1056   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1057   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1058  IFX_INLINE void IfxCcu6_enableMultiChannelModeAvailability(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1059  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1060  /** \brief Sets MCM_ST immediately to update bit field MCMP by the value of MCMPS.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1061   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1062   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1063   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1064  IFX_INLINE void IfxCcu6_enableMultiChannelPwmPatternShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1065  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1066  /** \brief Enables the shadow transfer T12_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1067   * becomes set while a T12 one match is detected while counting down
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1068   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1069   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1070   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1071  IFX_INLINE void IfxCcu6_enableMultiChannelT12DowncountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1072  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1073  /** \brief Enables the shadow transfer T12_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1074   * becomes set while a T12 period match is detected while counting up
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1075   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1076   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1077   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1078  IFX_INLINE void IfxCcu6_enableMultiChannelT12UpcountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1079  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1080  /** \brief Enables the shadow transfer T13_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1081   * becomes set while a T13 period match is detected
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1082   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1083   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1084   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1085  IFX_INLINE void IfxCcu6_enableMultiChannelT13UpcountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1086  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1087  /** \brief Enables shadow transfers of the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1088   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1089   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1090   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1091   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1092   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1093  IFX_INLINE void IfxCcu6_enableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1094  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1095  /** \brief Enables the single shot-mode of Timers (T12 T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1096   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1097   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1098   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1099   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1100  IFX_INLINE void IfxCcu6_enableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1101  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1102  /** \brief Enables the Inversion of T13 signal for the modulation of the CC6x and COUT6x (x = 0, 1, 2) signals\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1103   * T13 output CC63_O is equal to CC63ST.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1104   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1105   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1106   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1107  IFX_INLINE void IfxCcu6_enableT13InvertedModulation(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1108  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1109  /** \brief Sets Timer12 block available, A write access to T12PR is executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1110   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1111   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1112   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1113   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1114  IFX_INLINE void IfxCcu6_enableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1115  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1116  /** \brief Enables the trap functionality for the corresponding output signals
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1117   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1118   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1119   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1120   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1121  IFX_INLINE void IfxCcu6_enableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1122  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1123  /** \brief Enables the input (pin) function for the trap generation
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1124   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1125   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1126   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1127  IFX_INLINE void IfxCcu6_enableTrapPin(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1128  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1129  /** \brief selects the actual input signal for the capture compare inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1130   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1131   * \param input Input selection, ( CC6x capture input / CTRAP input / CCPOSx input  )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1132   * \param signal selection of actual input signal for the module inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1133   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1134   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1135  IFX_INLINE void IfxCcu6_setCaptureCompareInputSignal(Ifx_CCU6 *ccu6, IfxCcu6_CaptureCompareInput input, IfxCcu6_CaptureCompareInputSignal signal);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1136  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1137  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1138  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1139  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1140  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1141  /** \brief Disables the modulation of the corresponding output signal by PWM pattern generated by the timers T12 and T13.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1142   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1143   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1144   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1145   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1146   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1147  IFX_EXTERN void IfxCcu6_disableModulationOutput(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1148  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1149  /** \brief Disables the selected CCU6 kernel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1150   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1151   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1152   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1153  IFX_EXTERN void IfxCcu6_disableModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1154  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1155  /** \brief Enables the modulation of the corresponding output signal by PWM pattern generated by the timers T12 and T13.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1156   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1157   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1158   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1159   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1160   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1161  IFX_EXTERN void IfxCcu6_enableModulationOutput(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1162  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1163  /** \brief Enables the selected CCU6 kernel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1164   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1165   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1166   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1167  IFX_EXTERN void IfxCcu6_enableModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1168  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1169  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1170  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1171  /** \addtogroup IfxLld_Ccu6_Std_IO
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1172   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1173  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1174  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1175  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1176  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1177  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1178  /** \brief Initialises a CC60 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1179   * \param cc60In CC60 capture input CC60IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1180   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1181   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1182   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1183  IFX_INLINE void IfxCcu6_initCc60InPin(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1184  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1185  /** \brief Initialises a CC60 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1186   * \param cc60Out CC60 compare output CC0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1187   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1188   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1189   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1190   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1191  IFX_INLINE void IfxCcu6_initCc60OutPin(const IfxCcu6_Cc60_Out *cc60Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1192  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1193  /** \brief Initialises a CC61 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1194   * \param cc61In CC61 capture input CC61IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1195   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1196   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1197   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1198  IFX_INLINE void IfxCcu6_initCc61InPin(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1199  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1200  /** \brief Initialises a CC61 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1201   * \param cc61Out CC61 compare output CC1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1202   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1203   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1204   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1205   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1206  IFX_INLINE void IfxCcu6_initCc61OutPin(const IfxCcu6_Cc61_Out *cc61Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1207  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1208  /** \brief Initialises a CC62 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1209   * \param cc62In CC62 capture input CC62IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1210   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1211   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1212   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1213  IFX_INLINE void IfxCcu6_initCc62InPin(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1214  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1215  /** \brief Initialises a CC62 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1216   * \param cc62Out CC62 compare output CC2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1217   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1218   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1219   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1220   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1221  IFX_INLINE void IfxCcu6_initCc62OutPin(const IfxCcu6_Cc62_Out *cc62Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1222  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1223  /** \brief Initialises a CCPOS0 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1224   * \param ccpos0 CC60 capture input CCPOS0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1225   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1228  IFX_INLINE void IfxCcu6_initCcpos0Pin(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1229  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1230  /** \brief Initialises a CCPOS1 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1231   * \param ccpos1 CC61 capture input CCPOS1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1232   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1233   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1235  IFX_INLINE void IfxCcu6_initCcpos1Pin(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1236  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1237  /** \brief Initialises a CCPOS0 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1238   * \param ccpos2 CC62 capture input CCPOS2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1239   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1242  IFX_INLINE void IfxCcu6_initCcpos2Pin(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1243  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1244  /** \brief Initialises a COUT60 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1245   * \param cout60 CC60 compare output COUT0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1246   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1247   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1248   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1249   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1250  IFX_INLINE void IfxCcu6_initCout60Pin(const IfxCcu6_Cout60_Out *cout60, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1251  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1252  /** \brief Initialises a COUT61 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1253   * \param cout61 CC61 compare output COUT1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1254   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1255   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1256   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1257   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1258  IFX_INLINE void IfxCcu6_initCout61Pin(const IfxCcu6_Cout61_Out *cout61, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1259  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1260  /** \brief Initialises a COUT62 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1261   * \param cout62 CC62 compare output COUT2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1262   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1263   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1264   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1265   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1266  IFX_INLINE void IfxCcu6_initCout62Pin(const IfxCcu6_Cout62_Out *cout62, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1267  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1268  /** \brief Initialises a COUT63 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1269   * \param cout63 CC63 compare output COUT3
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1270   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1271   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1272   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1273   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1274  IFX_INLINE void IfxCcu6_initCout63Pin(const IfxCcu6_Cout63_Out *cout63, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1275  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1276  /** \brief Initialises a CTRAP input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1277   * \param ctrap CTRAP input
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1278   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1279   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1280   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1281  IFX_INLINE void IfxCcu6_initCtrapPin(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1282  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1283  /** \brief Initialises a T12HR input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1284   * \param t12hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1285   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1286   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1287   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1288  IFX_INLINE void IfxCcu6_initT12hrPin(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1289  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1290  /** \brief Initialises a T13HR input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1291   * \param t13hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1292   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1293   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1294   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1295  IFX_INLINE void IfxCcu6_initT13hrPin(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1296  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1297  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1298  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1299  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1300  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1301  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1302  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1303  /** \brief Provides functionality for both setting of CC60 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1304   * \param cc60In CC60 capture input CC60IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1305   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1306   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1307   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1308   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1309  IFX_INLINE void IfxCcu6_initCc60InPinWithPadLevel(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1310  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1311  /** \brief Provides functionality for both setting of CC61 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1312   * \param cc61In CC61 capture input CC61IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1313   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1314   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1315   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1316   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1317  IFX_INLINE void IfxCcu6_initCc61InPinWithPadLevel(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1318  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1319  /** \brief Provides functionality for both setting of CC62 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1320   * \param cc62In CC62 capture input CC62IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1321   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1322   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1323   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1324   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1325  IFX_INLINE void IfxCcu6_initCc62InPinWithPadLevel(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1326  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1327  /** \brief Provides functionality for both setting of CCPOS0 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1328   * \param ccpos0 CC60 capture input CCPOS0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1329   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1330   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1331   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1332   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1333  IFX_INLINE void IfxCcu6_initCcpos0PinWithPadLevel(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1334  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1335  /** \brief Provides functionality for both setting of CCPOS1 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1336   * \param ccpos1 CC61 capture input CCPOS1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1337   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1338   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1339   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1340   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1341  IFX_INLINE void IfxCcu6_initCcpos1PinWithPadLevel(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1342  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1343  /** \brief Provides functionality for both setting of CCPOS2 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1344   * \param ccpos2 CC62 capture input CCPOS2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1345   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1346   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1347   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1348   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1349  IFX_INLINE void IfxCcu6_initCcpos2PinWithPadLevel(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1350  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1351  /** \brief Provides functionality for both setting of CTRAP pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1352   * \param ctrap CTRAP input
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1353   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1354   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1355   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1356   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1357  IFX_INLINE void IfxCcu6_initCtrapPinWithPadLevel(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1358  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1359  /** \brief Provides functionality for both setting of T12HR pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1360   * \param t12hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1361   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1362   * \param padDriver Pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1363   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1364   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1365  IFX_INLINE void IfxCcu6_initT12hrPinWithPadLevel(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1366  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1367  /** \brief Provides functionality for both setting of T13HR pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1368   * \param t13hrIn Timer 13 HR input T13HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1369   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1370   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1371   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1372   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1373  IFX_INLINE void IfxCcu6_initT13hrPinWithPadLevel(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1374  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1375  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1376   * \param ccu6 pointer to CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1377   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1378   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1379   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1380  IFX_INLINE void IfxCcu6_setSleepMode(Ifx_CCU6 *ccu6, IfxCcu6_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1381  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1382  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1383  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1384  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1385  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1386  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1387   * \param ccu6 pointer to ccu6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1388   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1389   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1390  IFX_EXTERN void IfxCcu6_resetModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1391  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1392  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1393  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1394  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1395  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1396  IFX_INLINE void IfxCcu6_clearAllInterruptStatusFlags(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1397  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1398      ccu6->ISR.U = 0xFFFF;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1399  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1400  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1401  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1402  IFX_INLINE void IfxCcu6_clearCounter(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1403  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1404      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1405      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1406      tctr4.B.T12RES = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1407      tctr4.B.T13RES = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1408      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1409  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1410  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1411  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1412  IFX_INLINE void IfxCcu6_clearDeadTimeCounters(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1413  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1414      ccu6->TCTR4.B.DTRES = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1415  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1416  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1417  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1418  IFX_INLINE void IfxCcu6_clearInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1419  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1420      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1421      ccu6->ISR.U = mask;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1422  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1423  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1424  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1425  IFX_INLINE void IfxCcu6_clearT12OneNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1426  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1427      ccu6->ISR.B.RT12OM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1428  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1429  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1430  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1431  IFX_INLINE void IfxCcu6_clearT12PeriodNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1432  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1433      ccu6->ISR.B.RT12PM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1434  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1435  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1436  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1437  IFX_INLINE void IfxCcu6_clearT13CompareNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1438  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1439      ccu6->ISR.B.RT13CM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1440  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1441  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1442  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1443  IFX_INLINE void IfxCcu6_disableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1444  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1445      uint32 shift = ((timer * 8) + 3);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1446      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1447      ccu6->TCTR0.U = ccu6->TCTR0.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1448  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1449  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1450  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1451  IFX_INLINE void IfxCcu6_disableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1452  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1453      uint32 shift = (8 + channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1454      uint32 mask  = (1 << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1455      ccu6->T12DTC.U = ccu6->T12DTC.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1456  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1457  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1458  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1459  IFX_INLINE void IfxCcu6_disableDelayBypass(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1460  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1461      ccu6->T12MSEL.B.DBYP = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1462  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1463  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1464  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1465  IFX_INLINE void IfxCcu6_disableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1466  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1467      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1468      ccu6->IEN.U = ccu6->IEN.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1469  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1470  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1471  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1472  IFX_INLINE void IfxCcu6_disableMultiChannelMode(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1473  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1474      ccu6->MODCTR.B.MCMEN = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1475  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1476  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1477  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1478  IFX_INLINE void IfxCcu6_disableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1479  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1480      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1481      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1482      tctr4.B.T12STD = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1483      tctr4.B.T13STD = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1484      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1485  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1486  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1487  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1488  IFX_INLINE void IfxCcu6_disableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1489  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1490      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1491      ccu6->TCTR2.U = ccu6->TCTR2.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1492  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1493  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1494  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1495  IFX_INLINE void IfxCcu6_disableT13InvertedModulation(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1496  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1497      ccu6->CMPSTAT.B.T13IM = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1498  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1499  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1500  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1501  IFX_INLINE void IfxCcu6_disableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1502  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1503      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1504      ccu6->MCFG.U = ccu6->MCFG.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1505  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1506  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1507  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1508  IFX_INLINE void IfxCcu6_disableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1509  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1510      uint32 shift = (8 + channelOut);    // offset at location TRPCTR.8 for output CC60
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1511      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1512      ccu6->TRPCTR.U = ccu6->TRPCTR.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1513  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1514  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1515  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1516  IFX_INLINE void IfxCcu6_disableTrapPin(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1517  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1518      ccu6->TRPCTR.B.TRPPEN = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1519  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1520  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1521  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1522  IFX_INLINE void IfxCcu6_enableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1523  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1524      uint32 shift = ((timer * 8) + 3);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1525      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1526      ccu6->TCTR0.U = ccu6->TCTR0.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1527  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1528  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1529  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1530  IFX_INLINE void IfxCcu6_enableCountEvent(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1531  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1532      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1533      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1534      tctr4.B.T12CNT = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1535      tctr4.B.T13CNT = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1536      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1537  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1538  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1539  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1540  IFX_INLINE void IfxCcu6_enableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1541  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1542      uint32 shift = (8 + channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1543      uint32 mask  = (1 << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1544      ccu6->T12DTC.U = ccu6->T12DTC.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1545  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1546  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1547  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1548  IFX_INLINE void IfxCcu6_enableDelayBypass(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1549  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1550      ccu6->T12MSEL.B.DBYP = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1551  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1552  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1553  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1554  IFX_INLINE void IfxCcu6_enableHallPatternShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1555  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1556      ccu6->MCMOUTS.B.STRHP = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1557  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1558  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1559  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1560  IFX_INLINE void IfxCcu6_enableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1561  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1562      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1563      ccu6->IEN.U = ccu6->IEN.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1564  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1565  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1566  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1567  IFX_INLINE void IfxCcu6_enableMultiChannelMode(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1568  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1569      ccu6->MODCTR.B.MCMEN = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1570  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1571  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1572  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1573  IFX_INLINE void IfxCcu6_enableMultiChannelModeAvailability(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1574  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1575      ccu6->MCFG.B.MCM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1576  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1577  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1578  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1579  IFX_INLINE void IfxCcu6_enableMultiChannelPwmPatternShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1580  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1581      ccu6->MCMOUTS.B.STRMCM = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1582  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1583  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1584  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1585  IFX_INLINE void IfxCcu6_enableMultiChannelT12DowncountingShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1586  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1587      ccu6->MCMCTR.B.STE12D = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1588  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1589  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1590  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1591  IFX_INLINE void IfxCcu6_enableMultiChannelT12UpcountingShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1592  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1593      ccu6->MCMCTR.B.STE12U = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1594  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1595  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1596  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1597  IFX_INLINE void IfxCcu6_enableMultiChannelT13UpcountingShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1598  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1599      ccu6->MCMCTR.B.STE13U = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1600  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1601  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1602  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1603  IFX_INLINE void IfxCcu6_enableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1604  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1605      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1606      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1607      tctr4.B.T12STR = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1608      tctr4.B.T13STR = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1609      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1610  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1611  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1612  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1613  IFX_INLINE void IfxCcu6_enableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1614  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1615      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1616      ccu6->TCTR2.U = ccu6->TCTR2.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1617  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1618  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1619  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1620  IFX_INLINE void IfxCcu6_enableT13InvertedModulation(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1621  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1622      ccu6->CMPSTAT.B.T13IM = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1623  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1624  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1625  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1626  IFX_INLINE void IfxCcu6_enableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1627  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1628      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1629      ccu6->MCFG.U = ccu6->MCFG.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1630  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1631  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1632  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1633  IFX_INLINE void IfxCcu6_enableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1634  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1635      uint32 shift = (8 + channelOut);    // offset at location TRPCTR.8 for output CC60
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1636      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1637      ccu6->TRPCTR.U = ccu6->TRPCTR.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1638  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1639  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1640  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1641  IFX_INLINE void IfxCcu6_enableTrapPin(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1642  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1643      ccu6->TRPCTR.B.TRPPEN = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1644  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1645  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1646  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1647  IFX_INLINE boolean IfxCcu6_getDeadTimeStatus(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1648  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1649      uint32 shift = (12 + channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1650      uint32 mask  = 1 << shift;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1651      return (ccu6->T12DTC.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1652  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1653  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1654  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1655  IFX_INLINE boolean IfxCcu6_getHallPatternSampleState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1656  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1657      uint32 shift = (channel + 3);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1658      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1659      return (ccu6->CMPSTAT.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1660  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1661  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1662  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1663  IFX_INLINE boolean IfxCcu6_getInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1664  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1665      uint32 shift = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1666      return (ccu6->IS.U & shift) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1668  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1669  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1670  IFX_INLINE boolean IfxCcu6_getMultiChannelModeAvailabilityStatus(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1672      return ccu6->MCFG.B.MCM != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1674  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1675  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1676  IFX_INLINE boolean IfxCcu6_getMultiChannelPWMPatternShadowTransferStatus(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1678      return ccu6->MCMOUT.B.R != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1680  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1681  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1682  IFX_INLINE boolean IfxCcu6_getShadowTransferStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1684      uint32 shift = ((timer * 8) + 5);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1685      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1686      return (ccu6->TCTR0.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1687  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1688  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1689  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1690  IFX_INLINE boolean IfxCcu6_getT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1691  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1692      uint32 mask = (1U << channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1693      return (ccu6->CMPSTAT.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1694  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1695  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1696  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1697  IFX_INLINE IfxCcu6_T12CountDirection IfxCcu6_getT12CountDirection(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1698  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1699      return (IfxCcu6_T12CountDirection)((ccu6->TCTR0.B.CDIR) ? TRUE : FALSE);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1700  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1701  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1702  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1703  IFX_INLINE volatile uint32 *IfxCcu6_getT12TimerPointer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1704  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1705      return (volatile uint32 *)&ccu6->T12PR;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1706  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1707  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1708  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1709  IFX_INLINE boolean IfxCcu6_getT13CaptureCompareState(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1710  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1711      return ccu6->CMPSTAT.B.CC63ST != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1712  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1713  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1714  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1715  IFX_INLINE boolean IfxCcu6_getTimerAvailabilityStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1716  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1717      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1718      return (ccu6->MCFG.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1719  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1720  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1721  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1722  IFX_INLINE IfxCcu6_TimerRunStatus IfxCcu6_getTimerRunStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1723  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1724      uint32 shift = ((timer * 8) + 4);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1725      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1726      return (IfxCcu6_TimerRunStatus)((ccu6->TCTR0.U & mask) ? TRUE : FALSE);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1728  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1729  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1730  IFX_INLINE void IfxCcu6_initCc60InPin(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1732      IfxPort_setPinModeInput(cc60In->pin.port, cc60In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1733      IfxCcu6_setCaptureCompareInputSignal(cc60In->module, IfxCcu6_CaptureCompareInput_cC60, (IfxCcu6_CaptureCompareInputSignal)cc60In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1734  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1735  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1736  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1737  IFX_INLINE void IfxCcu6_initCc60InPinWithPadLevel(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1738  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1739      IfxPort_setPinModeInput(cc60In->pin.port, cc60In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1740      IfxPort_setPinPadDriver(cc60In->pin.port, cc60In->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1741      IfxCcu6_setCaptureCompareInputSignal(cc60In->module, IfxCcu6_CaptureCompareInput_cC60, (IfxCcu6_CaptureCompareInputSignal)cc60In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1742  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1743  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1744  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1745  IFX_INLINE void IfxCcu6_initCc60OutPin(const IfxCcu6_Cc60_Out *cc60Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1746  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1747      IfxPort_setPinModeOutput(cc60Out->pin.port, cc60Out->pin.pinIndex, outputMode, cc60Out->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1748      IfxPort_setPinPadDriver(cc60Out->pin.port, cc60Out->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1749  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1750  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1751  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1752  IFX_INLINE void IfxCcu6_initCc61InPin(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1753  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1754      IfxPort_setPinModeInput(cc61In->pin.port, cc61In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1755      IfxCcu6_setCaptureCompareInputSignal(cc61In->module, IfxCcu6_CaptureCompareInput_cC61, (IfxCcu6_CaptureCompareInputSignal)cc61In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1756  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1757  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1758  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1759  IFX_INLINE void IfxCcu6_initCc61InPinWithPadLevel(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1760  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1761      IfxPort_setPinModeInput(cc61In->pin.port, cc61In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1762      IfxPort_setPinPadDriver(cc61In->pin.port, cc61In->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1763      IfxCcu6_setCaptureCompareInputSignal(cc61In->module, IfxCcu6_CaptureCompareInput_cC61, (IfxCcu6_CaptureCompareInputSignal)cc61In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1764  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1765  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1766  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1767  IFX_INLINE void IfxCcu6_initCc61OutPin(const IfxCcu6_Cc61_Out *cc61Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1768  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1769      IfxPort_setPinModeOutput(cc61Out->pin.port, cc61Out->pin.pinIndex, outputMode, cc61Out->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1770      IfxPort_setPinPadDriver(cc61Out->pin.port, cc61Out->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1771  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1772  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1773  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1774  IFX_INLINE void IfxCcu6_initCc62InPin(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1775  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1776      IfxPort_setPinModeInput(cc62In->pin.port, cc62In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1777      IfxCcu6_setCaptureCompareInputSignal(cc62In->module, IfxCcu6_CaptureCompareInput_cC62, (IfxCcu6_CaptureCompareInputSignal)cc62In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1778  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1779  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1780  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1781  IFX_INLINE void IfxCcu6_initCc62InPinWithPadLevel(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1782  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1783      IfxPort_setPinModeInput(cc62In->pin.port, cc62In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1784      IfxPort_setPinPadDriver(cc62In->pin.port, cc62In->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1785      IfxCcu6_setCaptureCompareInputSignal(cc62In->module, IfxCcu6_CaptureCompareInput_cC62, (IfxCcu6_CaptureCompareInputSignal)cc62In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1786  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1787  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1788  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1789  IFX_INLINE void IfxCcu6_initCc62OutPin(const IfxCcu6_Cc62_Out *cc62Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1790  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1791      IfxPort_setPinModeOutput(cc62Out->pin.port, cc62Out->pin.pinIndex, outputMode, cc62Out->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1792      IfxPort_setPinPadDriver(cc62Out->pin.port, cc62Out->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1794  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1795  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1796  IFX_INLINE void IfxCcu6_initCcpos0Pin(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1798      IfxPort_setPinModeInput(ccpos0->pin.port, ccpos0->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1799      IfxCcu6_setCaptureCompareInputSignal(ccpos0->module, IfxCcu6_CaptureCompareInput_cCPOS0, (IfxCcu6_CaptureCompareInputSignal)ccpos0->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1800  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1801  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1802  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1803  IFX_INLINE void IfxCcu6_initCcpos0PinWithPadLevel(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1804  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1805      IfxPort_setPinModeInput(ccpos0->pin.port, ccpos0->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1806      IfxPort_setPinPadDriver(ccpos0->pin.port, ccpos0->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1807      IfxCcu6_setCaptureCompareInputSignal(ccpos0->module, IfxCcu6_CaptureCompareInput_cCPOS0, (IfxCcu6_CaptureCompareInputSignal)ccpos0->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1808  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1809  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1810  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1811  IFX_INLINE void IfxCcu6_initCcpos1Pin(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1812  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1813      IfxPort_setPinModeInput(ccpos1->pin.port, ccpos1->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1814      IfxCcu6_setCaptureCompareInputSignal(ccpos1->module, IfxCcu6_CaptureCompareInput_cCPOS1, (IfxCcu6_CaptureCompareInputSignal)ccpos1->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1815  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1816  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1817  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1818  IFX_INLINE void IfxCcu6_initCcpos1PinWithPadLevel(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1819  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1820      IfxPort_setPinModeInput(ccpos1->pin.port, ccpos1->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1821      IfxPort_setPinPadDriver(ccpos1->pin.port, ccpos1->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1822      IfxCcu6_setCaptureCompareInputSignal(ccpos1->module, IfxCcu6_CaptureCompareInput_cCPOS1, (IfxCcu6_CaptureCompareInputSignal)ccpos1->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1824  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1825  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1826  IFX_INLINE void IfxCcu6_initCcpos2Pin(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1828      IfxPort_setPinModeInput(ccpos2->pin.port, ccpos2->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1829      IfxCcu6_setCaptureCompareInputSignal(ccpos2->module, IfxCcu6_CaptureCompareInput_cCPOS2, (IfxCcu6_CaptureCompareInputSignal)ccpos2->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1830  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1831  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1832  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1833  IFX_INLINE void IfxCcu6_initCcpos2PinWithPadLevel(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1834  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1835      IfxPort_setPinModeInput(ccpos2->pin.port, ccpos2->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1836      IfxPort_setPinPadDriver(ccpos2->pin.port, ccpos2->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1837      IfxCcu6_setCaptureCompareInputSignal(ccpos2->module, IfxCcu6_CaptureCompareInput_cCPOS2, (IfxCcu6_CaptureCompareInputSignal)ccpos2->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1838  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1839  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1840  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1841  IFX_INLINE void IfxCcu6_initCout60Pin(const IfxCcu6_Cout60_Out *cout60, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1842  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1843      IfxPort_setPinModeOutput(cout60->pin.port, cout60->pin.pinIndex, outputMode, cout60->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1844      IfxPort_setPinPadDriver(cout60->pin.port, cout60->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1845  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1846  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1847  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1848  IFX_INLINE void IfxCcu6_initCout61Pin(const IfxCcu6_Cout61_Out *cout61, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1849  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1850      IfxPort_setPinModeOutput(cout61->pin.port, cout61->pin.pinIndex, outputMode, cout61->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1851      IfxPort_setPinPadDriver(cout61->pin.port, cout61->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1852  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1853  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1854  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1855  IFX_INLINE void IfxCcu6_initCout62Pin(const IfxCcu6_Cout62_Out *cout62, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1856  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1857      IfxPort_setPinModeOutput(cout62->pin.port, cout62->pin.pinIndex, outputMode, cout62->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1858      IfxPort_setPinPadDriver(cout62->pin.port, cout62->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1860  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1861  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1862  IFX_INLINE void IfxCcu6_initCout63Pin(const IfxCcu6_Cout63_Out *cout63, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1864      IfxPort_setPinModeOutput(cout63->pin.port, cout63->pin.pinIndex, outputMode, cout63->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1865      IfxPort_setPinPadDriver(cout63->pin.port, cout63->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1866  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1867  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1868  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1869  IFX_INLINE void IfxCcu6_initCtrapPin(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1870  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1871      IfxPort_setPinModeInput(ctrap->pin.port, ctrap->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1872      IfxCcu6_setCaptureCompareInputSignal(ctrap->module, IfxCcu6_CaptureCompareInput_cTRAP, (IfxCcu6_CaptureCompareInputSignal)ctrap->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1873  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1874  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1875  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1876  IFX_INLINE void IfxCcu6_initCtrapPinWithPadLevel(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1877  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1878      IfxPort_setPinModeInput(ctrap->pin.port, ctrap->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1879      IfxPort_setPinPadDriver(ctrap->pin.port, ctrap->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1880      IfxCcu6_setCaptureCompareInputSignal(ctrap->module, IfxCcu6_CaptureCompareInput_cTRAP, (IfxCcu6_CaptureCompareInputSignal)ctrap->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1881  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1882  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1883  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1884  IFX_INLINE void IfxCcu6_initT12hrPin(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1885  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1886      IfxPort_setPinModeInput(t12hrIn->pin.port, t12hrIn->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1887      IfxCcu6_setT12InputSignal(t12hrIn->module, t12hrIn);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1888  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1889  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1890  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1891  IFX_INLINE void IfxCcu6_initT12hrPinWithPadLevel(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1892  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1893      IfxPort_setPinModeInput(t12hrIn->pin.port, t12hrIn->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1894      IfxPort_setPinPadDriver(t12hrIn->pin.port, t12hrIn->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1895      IfxCcu6_setT12InputSignal(t12hrIn->module, t12hrIn);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1896  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1897  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1898  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1899  IFX_INLINE void IfxCcu6_initT13hrPin(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1900  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1901      IfxPort_setPinModeInput(t13hrIn->pin.port, t13hrIn->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1902      IfxCcu6_setT13InputSignal(t13hrIn->module, t13hrIn);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1903  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1904  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1905  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1906  IFX_INLINE void IfxCcu6_initT13hrPinWithPadLevel(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1907  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1908      IfxPort_setPinModeInput(t13hrIn->pin.port, t13hrIn->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1909      IfxPort_setPinPadDriver(t13hrIn->pin.port, t13hrIn->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1910      IfxCcu6_setT13InputSignal(t13hrIn->module, t13hrIn);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1911  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1912  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1913  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1914  IFX_INLINE boolean IfxCcu6_isModuleEnabled(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1915  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1916      return ccu6->CLC.B.DISS == 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1917  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1918  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1919  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1920  IFX_INLINE boolean IfxCcu6_isModuleSuspended(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1921  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1922      Ifx_CCU6_OCS ocs;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1923  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1924      // read the status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1925      ocs.U = ccu6->OCS.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1926  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1927      // return the status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1928      return ocs.B.SUSSTA;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1929  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1930  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1931  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1932  IFX_INLINE boolean IfxCcu6_isT12OneNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1933  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1934      return ccu6->IS.B.T12OM != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1935  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1936  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1937  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1938  IFX_INLINE boolean IfxCcu6_isT12PeriodNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1939  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1940      return ccu6->IS.B.T12PM != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1941  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1942  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1943  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1944  IFX_INLINE boolean IfxCcu6_isT13CompareNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1945  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1946      return ccu6->IS.B.T13CM != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1947  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1948  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1949  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1950  IFX_INLINE void IfxCcu6_setCaptureCompareInputSignal(Ifx_CCU6 *ccu6, IfxCcu6_CaptureCompareInput input, IfxCcu6_CaptureCompareInputSignal signal)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1951  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1952      uint32 shift = (uint32)input;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1953      uint32 mask  = (0x3U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1954      ccu6->PISEL0.U = (ccu6->PISEL0.U & ~mask) | ((uint32)signal << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1955  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1956  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1957  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1958  IFX_INLINE void IfxCcu6_setCountingInputMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_CountingInputMode mode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1959  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1960      uint32 shift = ((timer * 2) + 2);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1961      uint32 mask  = (0x3U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1962      ccu6->PISEL2.U = (ccu6->PISEL2.U & ~mask) | ((uint32)mode << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1963  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1964  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1965  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1966  IFX_INLINE void IfxCcu6_setCurrentHallPattern(Ifx_CCU6 *ccu6, uint8 pattern)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1967  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1968      ccu6->MCMOUTS.B.CURHS = pattern;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1969  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1970  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1971  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1972  IFX_INLINE void IfxCcu6_setDeadTimeValue(Ifx_CCU6 *ccu6, uint8 value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1973  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1974      ccu6->T12DTC.B.DTM = value;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1975  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1976  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1977  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1978  IFX_INLINE void IfxCcu6_setExpectedHallPattern(Ifx_CCU6 *ccu6, uint8 pattern)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1979  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1980      ccu6->MCMOUTS.B.EXPHS = pattern;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1981  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1982  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1983  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1984  IFX_INLINE void IfxCcu6_setExternalRunMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ExternalTriggerMode mode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1985  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1986      uint32 shift = ((timer * 2) + 8);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1987      uint32 mask  = (0x3U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1988      ccu6->TCTR2.U = (ccu6->TCTR2.U & ~mask) | ((uint32)mode << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1989  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1990  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1991  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1992  IFX_INLINE void IfxCcu6_setHallSensorTriggerMode(Ifx_CCU6 *ccu6, IfxCcu6_HallSensorTriggerMode mode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1993  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1994      uint32 shift = 12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1995      uint32 mask  = (0x7U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1996      ccu6->T12MSEL.U = (ccu6->T12MSEL.U & ~mask) | ((uint32)mode << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1997  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1998  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1999  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2000  IFX_INLINE void IfxCcu6_setInputClockFrequency(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_TimerInputClock frequency)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2001  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2002      uint32 shift = (timer * 8);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2003      uint32 mask  = (0x7U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2004      ccu6->TCTR0.U = (ccu6->TCTR0.U & ~mask) | ((uint32)frequency << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2005  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2006  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2007  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2008  IFX_INLINE void IfxCcu6_setInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2009  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2010      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2011      ccu6->ISS.U = ccu6->ISS.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2012  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2013  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2014  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2015  IFX_INLINE void IfxCcu6_setMultiChannelPwmPattern(Ifx_CCU6 *ccu6, uint8 pattern)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2016  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2017      ccu6->MCMOUTS.B.MCMPS = pattern;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2018  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2019  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2020  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2021  IFX_INLINE void IfxCcu6_setMultiChannelSwitchingMode(Ifx_CCU6 *ccu6, IfxCcu6_MultiChannelSwitchingSelect mode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2022  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2023      ccu6->MCMCTR.B.SWSEL = mode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2024  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2025  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2026  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2027  IFX_INLINE void IfxCcu6_setMultiChannelSwitchingSync(Ifx_CCU6 *ccu6, IfxCcu6_MultiChannelSwitchingSync sync)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2028  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2029      ccu6->MCMCTR.B.SWSYN = sync;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2030  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2031  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2032  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2033  IFX_INLINE void IfxCcu6_setOutputPassiveState(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut, boolean state)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2034  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2035      uint32 shift = (channelOut + 8); // offset at location CC60PS
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2036      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2037      ccu6->CMPSTAT.U = (ccu6->CMPSTAT.U & ~mask) | ((uint32)state << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2038  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2039  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2040  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2041  IFX_INLINE void IfxCcu6_setSingleShotModeEnable(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2042  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2043      Ifx_CCU6_TCTR2 tctr2;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2044      tctr2.U        = ccu6->TCTR2.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2045      tctr2.B.T12SSC = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2046      tctr2.B.T13SSC = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2047      ccu6->TCTR2.U  = tctr2.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2048  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2049  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2050  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2051  IFX_INLINE void IfxCcu6_setSleepMode(Ifx_CCU6 *ccu6, IfxCcu6_SleepMode mode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2052  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2053      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2054      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2055      ccu6->CLC.B.EDIS = mode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2056      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2057  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2058  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2059  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2060  IFX_INLINE void IfxCcu6_setSuspendMode(Ifx_CCU6 *ccu6, IfxCcu6_SuspendMode mode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2061  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2062      Ifx_CCU6_OCS ocs;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2063  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2064      // remove protection and configure the suspend mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2065      ocs.B.SUS_P = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2066      ocs.B.SUS   = mode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2067      ccu6->OCS.U = ocs.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2068  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2069  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2070  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2071  IFX_INLINE void IfxCcu6_setT12ChannelMode(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, IfxCcu6_T12ChannelMode mode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2072  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2073      uint32 shift = (4 * channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2074      uint32 mask  = (0xFU << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2075      ccu6->T12MSEL.U = (ccu6->T12MSEL.U & ~mask) | ((uint32)mode << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2076  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2077  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2078  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2079  IFX_INLINE void IfxCcu6_setT12CountMode(Ifx_CCU6 *ccu6, IfxCcu6_T12CountMode mode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2080  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2081      ccu6->TCTR0.B.CTM = mode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2082  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2083  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2084  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2085  IFX_INLINE void IfxCcu6_setT12CounterValue(Ifx_CCU6 *ccu6, uint16 value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2086  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2087      ccu6->T12.B.T12CV = value;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2088  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2089  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2090  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2091  IFX_INLINE void IfxCcu6_setT12PeriodValue(Ifx_CCU6 *ccu6, uint16 value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2092  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2093      ccu6->T12PR.B.T12PV = value;
	st.h	[a15]36,d15
.L295:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   360          IfxCcu6_setT12PeriodValue(ccu6, periodVal);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   361          IfxCcu6_enableShadowTransfer(ccu6, TRUE, FALSE);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   362  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   363          clockInput = (IfxCcu6_TimerInputClock)(prescaler & 0x7U);
	and	d15,d1,#7
.L290:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     2   * \file IfxCcu6.h
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     3   * \brief CCU6  basic functionality
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     4   * \ingroup IfxLld_Ccu6
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     5   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     8   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     9   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    11   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    16   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    18   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    25   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    32   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    40   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    41   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    42   * \defgroup IfxLld_Ccu6_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    43   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    44   * \defgroup IfxLld_Ccu6_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    45   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    46   * \defgroup IfxLld_Ccu6_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    47   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    48   * \defgroup IfxLld_Ccu6_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    49   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    50   * \defgroup IfxLld_Ccu6_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    51   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    52   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    53  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    54  #ifndef IFXCCU6_H
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    55  #define IFXCCU6_H 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    56  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    57  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    58  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    59  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    60  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    61  #include "_Impl/IfxCcu6_cfg.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    62  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    63  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    64  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    65  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    66  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    67  #include "_PinMap/IfxCcu6_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    68  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    69  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    70  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    72  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    73  /** \addtogroup IfxLld_Ccu6_Std_Enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    74   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    75  /** \brief Input selection, ( CC6x capture input / CTRAP input / CCPOSx input )\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    76   * Definition in Ifx_CCU.PISEL0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    77   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    78  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    79  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    80      IfxCcu6_CaptureCompareInput_cC60   = IFX_CCU6_PISEL0_ISCC60_OFF,  /**< \brief CC60 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    81      IfxCcu6_CaptureCompareInput_cC61   = IFX_CCU6_PISEL0_ISCC61_OFF,  /**< \brief CC61 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    82      IfxCcu6_CaptureCompareInput_cC62   = IFX_CCU6_PISEL0_ISCC62_OFF,  /**< \brief CC62 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    83      IfxCcu6_CaptureCompareInput_cTRAP  = IFX_CCU6_PISEL0_ISTRP_OFF,   /**< \brief CTRAP input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    84      IfxCcu6_CaptureCompareInput_cCPOS0 = IFX_CCU6_PISEL0_ISPOS0_OFF,  /**< \brief CCPOS0 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    85      IfxCcu6_CaptureCompareInput_cCPOS1 = IFX_CCU6_PISEL0_ISPOS1_OFF,  /**< \brief CCPOS1 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    86      IfxCcu6_CaptureCompareInput_cCPOS2 = IFX_CCU6_PISEL0_ISPOS2_OFF   /**< \brief CCPOS2 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    87  } IfxCcu6_CaptureCompareInput;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    88  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    89  /** \brief Selection of actual input signal for the capture compare inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    90   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    91  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    92  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    93      IfxCcu6_CaptureCompareInputSignal_a = 0,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    94      IfxCcu6_CaptureCompareInputSignal_b = 1,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    95      IfxCcu6_CaptureCompareInputSignal_c = 2,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    96      IfxCcu6_CaptureCompareInputSignal_d = 3   /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    97  } IfxCcu6_CaptureCompareInputSignal;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    98  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    99  /** \brief capture/compare state to set / clear the CC6xST-bits
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   100   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   101  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   102  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   103      IfxCcu6_CaptureCompareState_set    = 0, /**< \brief Bit CC6xST is set */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   104      IfxCcu6_CaptureCompareState_clear  = 1, /**< \brief Bit CC6xST is cleared */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   105      IfxCcu6_CaptureCompareState_toggle = 2  /**< \brief Bit CC6xST is toggled */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   106  } IfxCcu6_CaptureCompareState;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   107  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   108  /** \brief Capture compare output pins
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   109   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   110  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   111  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   112      IfxCcu6_ChannelOut_cc0   = 0,  /**< \brief CC60 compare output CC0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   113      IfxCcu6_ChannelOut_cout0 = 1,  /**< \brief CC60 compare output COUT0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   114      IfxCcu6_ChannelOut_cc1   = 2,  /**< \brief CC61 compare output CC1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   115      IfxCcu6_ChannelOut_cout1 = 3,  /**< \brief CC61 compare output COUT1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   116      IfxCcu6_ChannelOut_cc2   = 4,  /**< \brief CC62 compare output CC2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   117      IfxCcu6_ChannelOut_cout2 = 5,  /**< \brief CC62 compare output COUT2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   118      IfxCcu6_ChannelOut_cout3 = 6   /**< \brief CC63 compare output COUT3 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   119  } IfxCcu6_ChannelOut;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   120  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   121  /** \brief Defines the input event leading to a counting action of the timer (T12 / T13)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   122   * Definition in Ifx_CCU.PISEL2.B.ISCNT12 / Ifx_CCU.PISEL2.B.ISCNT13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   123   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   124  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   125  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   126      IfxCcu6_CountingInputMode_internal        = 0, /**< \brief The T1x prescaler generates the counting events,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   127                                                      * Bit TCTR4.T1xCNT is not taken into account. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   128      IfxCcu6_CountingInputMode_manual          = 1, /**< \brief Bit TCTR4.T1xCNT written with 1 is a counting
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   129                                                      * event. The T1x prescaler is not taken into account */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   130      IfxCcu6_CountingInputMode_externalRising  = 2, /**< \brief The timer T1x is counting each rising edge
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   131                                                      * detected in the selected T1xHR signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   132      IfxCcu6_CountingInputMode_externalFalling = 3  /**< \brief The timer T1x is counting each falling edge
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   133                                                      * detected in the selected T1xHR signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   134  } IfxCcu6_CountingInputMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   135  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   136  /** \brief Controls whether the source signal for the sampling of the Hall input pattern (selected by HSYNC) is delayed by the Dead-Time Counter 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   137   * Definition in Ifx_CCU.T12MSEL.B.DBYP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   138   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   139  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   140  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   141      IfxCcu6_DelayBypass_notActive = 0,  /**< \brief Dead-Time Counter 0 is generating a delay after
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   142                                           * the source signal becomes active */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   143      IfxCcu6_DelayBypass_active    = 1   /**< \brief Dead-Time Counter 0 is not used for a delay */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   144  } IfxCcu6_DelayBypass;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   145  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   146  /** \brief Defines the event of signal T1xHR that can set the run bit T1xR by HW\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   147   * Definition in Ifx_CCU.TCTR2.B.T12RSEL / IIfx_CCU.TCTR2.B.T13RSEL
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   148   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   149  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   150  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   151      IfxCcu6_ExternalTriggerMode_disable     = 0,  /**< \brief The external setting of T1xR is disabled */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   152      IfxCcu6_ExternalTriggerMode_risingEdge  = 1,  /**< \brief Bit T1xR is set if a rising edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   153                                                     * detected. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   154      IfxCcu6_ExternalTriggerMode_fallingEdge = 2,  /**< \brief Bit T1xR is set if a falling edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   155                                                     * detected. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   156      IfxCcu6_ExternalTriggerMode_anyEdge     = 3   /**< \brief Bit T1xR is set if an edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   157                                                     * detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   158  } IfxCcu6_ExternalTriggerMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   159  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   160  /** \brief Defines the source for the sampling of the Hall input pattern and the comparison to the current and the expected Hall pattern bit fields\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   161   * Definition in Ifx_CCU.T12MSEL.HSYNC
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   162   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   163  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   164  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   165      IfxCcu6_HallSensorTriggerMode_permanentCheck    = 0,  /**< \brief Any edge at any of the inputs CCPOSx, independent from any PWM
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   166                                                             * signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   167      IfxCcu6_HallSensorTriggerMode_cM63              = 1,  /**< \brief A T13 Compare-Match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   168      IfxCcu6_HallSensorTriggerMode_t13PM             = 2,  /**< \brief A T13 Period-Match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   169      IfxCcu6_HallSensorTriggerMode_off               = 3,  /**< \brief Hall sampling triggered by HW sources is switched off */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   170      IfxCcu6_HallSensorTriggerMode_t12PMCountingUp   = 4,  /**< \brief A T12 Period-Match while counting up (T12_PM and CDIR = 0) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   171      IfxCcu6_HallSensorTriggerMode_t12OMCountingDown = 5,  /**< \brief A T12 One-Match while counting down (T12_PM and CDIR = 1) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   172      IfxCcu6_HallSensorTriggerMode_cM61CountingUp    = 6,  /**< \brief A T12 Compare-Match of compare channel CC61 while counting up (CM_61 and CDIR = 0) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   173      IfxCcu6_HallSensorTriggerMode_cM61CountingDown  = 7   /**< \brief A T12 Compare-Match of compare channel CC61 while counting down (CM_61 and CDIR = 1) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   174  } IfxCcu6_HallSensorTriggerMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   175  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   176  /** \brief Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   177   * Description in Ifx_CCU.IEN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   178   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   179  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   180  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   181      IfxCcu6_InterruptSource_cc60RisingEdge   = IFX_CCU6_IS_ICC60R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   182                                                                          * enable for channel CC60 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   183      IfxCcu6_InterruptSource_cc60FallingEdge  = IFX_CCU6_IS_ICC60F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   184                                                                          * enable for channel CC60 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   185      IfxCcu6_InterruptSource_cc61RisingEdge   = IFX_CCU6_IS_ICC61R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   186                                                                          * enable for channel CC61 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   187      IfxCcu6_InterruptSource_cc61FallingEdge  = IFX_CCU6_IS_ICC61F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   188                                                                          * enable for channel CC61 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   189      IfxCcu6_InterruptSource_cc62RisingEdge   = IFX_CCU6_IS_ICC62R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   190                                                                          * enable for channel CC62 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   191      IfxCcu6_InterruptSource_cc62FallingEdge  = IFX_CCU6_IS_ICC62F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   192                                                                          * enable for channel CC62 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   193      IfxCcu6_InterruptSource_t12OneMatch      = IFX_CCU6_IS_T12OM_OFF,  /**< \brief Interrupt enable for T12 one-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   194      IfxCcu6_InterruptSource_t12PeriodMatch   = IFX_CCU6_IS_T12PM_OFF,  /**< \brief Interrupt enable for T12 period-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   195      IfxCcu6_InterruptSource_t13CompareMatch  = IFX_CCU6_IS_T13CM_OFF,  /**< \brief Interrupt enable for T13 compare-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   196      IfxCcu6_InterruptSource_t13PeriodMatch   = IFX_CCU6_IS_T13PM_OFF,  /**< \brief Interrupt enable for T13 period-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   197      IfxCcu6_InterruptSource_trap             = IFX_CCU6_IS_TRPF_OFF,   /**< \brief Interrupt enable for trap flag */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   198      IfxCcu6_InterruptSource_correctHallEvent = IFX_CCU6_IS_CHE_OFF,    /**< \brief Interrupt enable for correct hall event */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   199      IfxCcu6_InterruptSource_wrongHallEvent   = IFX_CCU6_IS_WHE_OFF     /**< \brief Interrupt enable for wrong hall event */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   200  } IfxCcu6_InterruptSource;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   201  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   202  /** \brief Selection of the trigger request source (next multi-channel event) for the shadow transfer MCM_ST from MCMPS to MCMP\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   203   * Definition in Ifx_CCU.MCMCTR.B.SWSEL
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   204   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   205  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   206  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   207      IfxCcu6_MultiChannelSwitchingSelect_noEvent                 = 0,  /**< \brief No trigger request will be generated */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   208      IfxCcu6_MultiChannelSwitchingSelect_correctHallEvent        = 1,  /**< \brief Correct Hall pattern detected (CM_CHE) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   209      IfxCcu6_MultiChannelSwitchingSelect_t13PeriodMatch          = 2,  /**< \brief T13 period-match detected (while counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   210      IfxCcu6_MultiChannelSwitchingSelect_t12OneMatch             = 3,  /**< \brief T12 one-match (while counting down) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   211      IfxCcu6_MultiChannelSwitchingSelect_t12Channel1CompareMatch = 4,  /**< \brief T12 channel 1 compare-match detected (phase
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   212                                                                         * delay function) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   213      IfxCcu6_MultiChannelSwitchingSelect_t12PeriodMatch          = 5   /**< \brief T12 period match detected (while counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   214  } IfxCcu6_MultiChannelSwitchingSelect;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   215  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   216  /** \brief Selection of the synchronization mechanism for the shadow transfer event MCM_ST\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   217   * Definition in Ifx_CCU.MCMCTR.B.SWSYN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   218   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   219  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   220  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   221      IfxCcu6_MultiChannelSwitchingSync_direct       = 0,  /**< \brief Direct, the trigger event immediately leads to the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   222                                                            * shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   223      IfxCcu6_MultiChannelSwitchingSync_t13ZeroMatch = 1,  /**< \brief A T13 zero-match triggers the shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   224      IfxCcu6_MultiChannelSwitchingSync_t12ZeroMatch = 2   /**< \brief A T12 zero-match (while counting up) triggers the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   225                                                            * shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   226  } IfxCcu6_MultiChannelSwitchingSync;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   227  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   228  /** \brief Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   229   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   230  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   231  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   232      IfxCcu6_ServiceRequest_0 = 0,      /**< \brief Service request output SR0  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   233      IfxCcu6_ServiceRequest_1,          /**< \brief Service request output SR1  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   234      IfxCcu6_ServiceRequest_2,          /**< \brief Service request output SR2  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   235      IfxCcu6_ServiceRequest_3           /**< \brief Service request output SR3  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   236  } IfxCcu6_ServiceRequest;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   237  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   238  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   239   * Definition in Ifx_CCU6.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   240   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   241  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   242  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   243      IfxCcu6_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   244      IfxCcu6_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   245  } IfxCcu6_SleepMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   246  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   247  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   248   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   249  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   250  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   251      IfxCcu6_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   252      IfxCcu6_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   253      IfxCcu6_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   254  } IfxCcu6_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   255  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   256  /** \brief Capture compare channel of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   257   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   258  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   259  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   260      IfxCcu6_T12Channel_0 = 0,      /**< \brief T12 channel CC60  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   261      IfxCcu6_T12Channel_1,          /**< \brief T12 channel CC61  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   262      IfxCcu6_T12Channel_2           /**< \brief T12 channel CC62  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   263  } IfxCcu6_T12Channel;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   264  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   265  /** \brief The operating mode for the T12 channels are defined by the bit fields Ifx_CCU.T12MSEL.MSEL6x.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   266   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   267  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   268  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   269      IfxCcu6_T12ChannelMode_off                                   = 0,  /**< \brief Capture/Compare modes switched off */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   270      IfxCcu6_T12ChannelMode_compareMode                           = 1,  /**< \brief Compare mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   271      IfxCcu6_T12ChannelMode_doubleRegisterCaptureRisingAndFalling = 4,  /**< \brief CC6xIN rising edge: T12 stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   272      IfxCcu6_T12ChannelMode_doubleRegisterCaptureRising           = 5,  /**< \brief CC6xIN rising edge: CC6nSR stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   273      IfxCcu6_T12ChannelMode_doubleRegisterCaptureFalling          = 6,  /**< \brief CC6xIN rising edge: CC6nSR stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   274      IfxCcu6_T12ChannelMode_doubleRegisterCaptureAny              = 7,  /**< \brief CC6xIN any active edge: CC6nSR stored in CC6xR, any active edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   275      IfxCcu6_T12ChannelMode_hallSensor                            = 8,  /**< \brief Hall Sensor Mode, In order to properly enable this mode, all three MSEL6x fields have to be
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   276                                                                          * programmed to Hall Sensor mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   277      IfxCcu6_T12ChannelMode_hysteresisLikecompare                 = 9,  /**< \brief Hysteresis-like compare mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   278      IfxCcu6_T12ChannelMode_multiInputCaptureRisingAndFalling     = 10, /**< \brief CC6xIN rising edge: T12 stored in CC6xR, CCPOSx falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   279      IfxCcu6_T12ChannelMode_multiInputCaptureFallingAndRising     = 11, /**< \brief CC6xIN falling edge: T12 stored in CC6xR, CCPOSx rising edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   280      IfxCcu6_T12ChannelMode_multiInputCaptureBothRising           = 12, /**< \brief CC6xIN rising edge: T12 stored in CC6xR, CCPOSx rising edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   281      IfxCcu6_T12ChannelMode_multiInputCaptureBothFalling          = 13, /**< \brief CC6xIN falling edge: T12 stored in CC6xR, CCPOSx falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   282      IfxCcu6_T12ChannelMode_multiInputCaptureAny                  = 14  /**< \brief CC6xIN any active edge : T12 stored in CC6xR, CCPOSx any active edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   283  } IfxCcu6_T12ChannelMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   284  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   285  /** \brief Counting direction of Timer12\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   286   * Definition in Ifx_CCU.TCTR0.B.CDIR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   287   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   288  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   289  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   290      IfxCcu6_T12CountDirection_up   = 0, /**< \brief Counting up */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   291      IfxCcu6_T12CountDirection_down = 1  /**< \brief Counting down */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   292  } IfxCcu6_T12CountDirection;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   293  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   294  /** \brief Operating mode of Timer 12\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   295   * Definition in Ifx_CCU.TCTR0.B.CTM
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   296   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   297  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   298  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   299      IfxCcu6_T12CountMode_edgeAligned   = 0, /**< \brief T12 always counts up and continues counting
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   300                                               * from zero after reaching the period value. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   301      IfxCcu6_T12CountMode_centerAligned = 1  /**< \brief T12 counts down after detecting a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   302                                               * and counts up after detecting a one-match. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   303  } IfxCcu6_T12CountMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   304  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   305  /** \brief Delivers additional information to control the automatic set of bit T13R in the case that the trigger action defined by T13 trigger event control (T13TEC) is detected.\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   306   * Definition in Ifx_CCU.TCTR2.B.T13TED
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   307   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   308  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   309  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   310      IfxCcu6_T13TriggerDirection_noAction          = 0,  /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   311      IfxCcu6_T13TriggerDirection_onT12CountingUp   = 1,  /**< \brief while T12 is counting up */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   312      IfxCcu6_T13TriggerDirection_onT12CountingDown = 2,  /**< \brief while T12 is counting down */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   313      IfxCcu6_T13TriggerDirection_anyT12            = 3   /**< \brief independent on the count direction of T12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   314  } IfxCcu6_T13TriggerDirection;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   315  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   316  /** \brief Selects the trigger event to start T13 (automatic set of T13R for synchronization to T12 compare signals)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   317   * Definition in Ifx_CCU.TCTR2.B.T13TEC
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   318   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   319  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   320  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   321      IfxCcu6_T13TriggerEvent_noAction        = 0,  /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   322      IfxCcu6_T13TriggerEvent_onCC60RCompare  = 1,  /**< \brief set T13R on a T12 compare event on channel 0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   323      IfxCcu6_T13TriggerEvent_onCC61RCompare  = 2,  /**< \brief set T13R on a T12 compare event on channel 1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   324      IfxCcu6_T13TriggerEvent_onCC62RCompare  = 3,  /**< \brief set T13R on a T12 compare event on channel 2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   325      IfxCcu6_T13TriggerEvent_onAnyT12Compare = 4,  /**< \brief set T13R on any T12 compare event (ch. 0, 1, 2) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   326      IfxCcu6_T13TriggerEvent_onT12Period     = 5,  /**< \brief set T13R upon a period-match of T12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   327      IfxCcu6_T13TriggerEvent_onT12Zero       = 6,  /**< \brief set T13R upon a zero-match of T12 (while
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   328                                                     * counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   329      IfxCcu6_T13TriggerEvent_onCCPOSxEdge    = 7   /**< \brief set T13R on any edge of inputs CCPOSx */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   330  } IfxCcu6_T13TriggerEvent;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   331  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   332  /** \brief Timer number ( T12 / T13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   333   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   334  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   335  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   336      IfxCcu6_TimerId_t12 = 0,  /**< \brief Timer 12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   337      IfxCcu6_TimerId_t13 = 1   /**< \brief Timer 13 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   338  } IfxCcu6_TimerId;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   339  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   340  /** \brief Selects the input clock for timers (T12 or T13) that is derived from the peripheral clock according to the equation\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   341   * Definition in Ifx_CCU.TCTR0.B.T12CLK / Ifx_CCU.TCTR0.B.T13CLK
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   342   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   343  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   344  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   345      IfxCcu6_TimerInputClock_fcc6      = 0, /**< \brief fcc6 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   346      IfxCcu6_TimerInputClock_fcc6By2   = 1, /**< \brief fcc6 / 2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   347      IfxCcu6_TimerInputClock_fcc6By4   = 2, /**< \brief fcc6 / 4 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   348      IfxCcu6_TimerInputClock_fcc6By8   = 3, /**< \brief fcc6 / 8 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   349      IfxCcu6_TimerInputClock_fcc6By16  = 4, /**< \brief fcc6 / 16 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   350      IfxCcu6_TimerInputClock_fcc6By32  = 5, /**< \brief fcc6 / 32 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   351      IfxCcu6_TimerInputClock_fcc6By64  = 6, /**< \brief fcc6 / 64 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   352      IfxCcu6_TimerInputClock_fcc6By128 = 7  /**< \brief fcc6 / 128 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   353  } IfxCcu6_TimerInputClock;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   354  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   355  /** \brief Selection of actual input signal for the timer inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   356   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   357  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   358  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   359      IfxCcu6_TimerInputSignal_a = 0,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   360      IfxCcu6_TimerInputSignal_b = 1,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   361      IfxCcu6_TimerInputSignal_c = 2,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   362      IfxCcu6_TimerInputSignal_d = 3,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   363      IfxCcu6_TimerInputSignal_e = 0,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   364      IfxCcu6_TimerInputSignal_f = 1,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   365      IfxCcu6_TimerInputSignal_g = 2,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   366      IfxCcu6_TimerInputSignal_h = 3   /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   367  } IfxCcu6_TimerInputSignal;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   368  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   369  /** \brief Timer (T12 / T13) run status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   370   * Definition in Ifx_CCU.TCTR0.B.T12R and Ifx_CCU.TCTR0.B.T13R
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   371   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   373  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   374      IfxCcu6_TimerRunStatus_stopped = 0,  /**< \brief Timer T1x is stopped. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   375      IfxCcu6_TimerRunStatus_running = 1   /**< \brief Timer T1x is running. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   376  } IfxCcu6_TimerRunStatus;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   377  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   378  /** \brief Defines how the trap flag TRPF can be cleared after the trap input condition is no longer valid (either by CTRAP = 1 or by TRPPEN = 0)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   379   * Definition in Ifx_CCU.TRPCTR.B.TRPM2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   380   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   381  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   382  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   383      IfxCcu6_TrapMode_automatic = 0,  /**< \brief Bit TRPF is cleared by HW */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   384      IfxCcu6_TrapMode_manual    = 1   /**< \brief Bit TRPF stays 0, It has to be cleared by SW by writing
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   385                                        * ISR.RTRPF = 1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   386  } IfxCcu6_TrapMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   387  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   388  /** \brief Defines the behavior of the selected outputs when leaving the trap state, after the trap condition has become inactive again\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   389   * Definition in Ifx_CCU.TRPCTR.B.TRPMx (x = 0, 1)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   390   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   391  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   392  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   393      IfxCcu6_TrapState_t12Sync   = 0, /**< \brief The trap state is left when a zero-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   394                                        * of T12 (while counting up) is detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   395      IfxCcu6_TrapState_t13Sync   = 1, /**< \brief The trap state is left when a zeromatch
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   396                                        * of T13 is detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   397      IfxCcu6_TrapState_immediate = 3  /**< \brief The trap state is left immediately without any synchronization to T12 or T13 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   398  } IfxCcu6_TrapState;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   399  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   400  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   401  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   402  /** \addtogroup IfxLld_Ccu6_Std_Operative
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   403   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   404  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   405  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   406  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   407  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   408  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   409  /** \brief Clears the counters of the Timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   410   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   411   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   412   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   413   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   414   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   415  IFX_INLINE void IfxCcu6_clearCounter(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   416  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   417  /** \brief Clears all the three dead-time counter channels to zero.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   418   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   419   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   420   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   421  IFX_INLINE void IfxCcu6_clearDeadTimeCounters(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   422  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   423  /** \brief Clears the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   424   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   425   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   426   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   427   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   428  IFX_INLINE void IfxCcu6_clearInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   429  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   430  /** \brief Clears the T12  One notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   431   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   432   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   433   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   434  IFX_INLINE void IfxCcu6_clearT12OneNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   435  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   436  /** \brief Clears the T12  period notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   437   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   438   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   439   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   440  IFX_INLINE void IfxCcu6_clearT12PeriodNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   441  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   442  /** \brief Clears the T13  compare notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   443   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   444   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   445   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   446  IFX_INLINE void IfxCcu6_clearT13CompareNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   447  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   448  /** \brief Returns the Timer pointer
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   449   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   450   * \return Timer pointer
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   451   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   452  IFX_INLINE volatile uint32 *IfxCcu6_getT12TimerPointer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   453  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   454  /** \brief Returns the status of module enabled or disabled
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   455   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   456   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   457   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   458  IFX_INLINE boolean IfxCcu6_isModuleEnabled(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   459  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   460  /** \brief Returns the status of T12 one notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   461   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   462   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   463   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   464  IFX_INLINE boolean IfxCcu6_isT12OneNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   465  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   466  /** \brief Returns the status of T12 period notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   467   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   468   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   469   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   470  IFX_INLINE boolean IfxCcu6_isT12PeriodNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   471  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   472  /** \brief Returns the status of T13 compare notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   473   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   474   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   475   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   476  IFX_INLINE boolean IfxCcu6_isT13CompareNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   477  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   478  /** \brief Sets the input event leading to a counting action of Timers (T12 / T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   479   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   480   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   481   * \param mode Input event leading to a counting action of the timer (T12 / T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   482   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   483   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   484  IFX_INLINE void IfxCcu6_setCountingInputMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_CountingInputMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   485  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   486  /** \brief Sets the current hall pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   487   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   488   * \param pattern Current hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   489   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   490   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   491  IFX_INLINE void IfxCcu6_setCurrentHallPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   492  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   493  /** \brief Sets the delay between switching from the passive state to the active state of the selected outputs (dead time)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   494   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   495   * \param value Value of the dead time to be induced
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   496   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   497   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   498  IFX_INLINE void IfxCcu6_setDeadTimeValue(Ifx_CCU6 *ccu6, uint8 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   499  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   500  /** \brief Sets the expected hall pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   501   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   502   * \param pattern Expected hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   503   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   504   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   505  IFX_INLINE void IfxCcu6_setExpectedHallPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   506  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   507  /** \brief Sets the event of signal T1xHR that can set the run bit T1xR by HW
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   508   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   509   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   510   * \param mode External trigger mode
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   511   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   512   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   513  IFX_INLINE void IfxCcu6_setExternalRunMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ExternalTriggerMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   514  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   515  /** \brief Sets source for the sampling of the Hall input pattern and the comparison to the current and the expected Hall pattern bit fields
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   516   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   517   * \param mode Hall sensor input trigger event
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   518   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   519   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   520  IFX_INLINE void IfxCcu6_setHallSensorTriggerMode(Ifx_CCU6 *ccu6, IfxCcu6_HallSensorTriggerMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   521  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   522  /** \brief Sets the input clock for timers (T12 or T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   523   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   524   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   525   * \param frequency Input clock for timers (T12 or T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   526   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   527   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   528  IFX_INLINE void IfxCcu6_setInputClockFrequency(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_TimerInputClock frequency);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   529  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   530  /** \brief Sets the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   531   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   532   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   533   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   534   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   535  IFX_INLINE void IfxCcu6_setInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   536  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   537  /** \brief Sets the output pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   538   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   539   * \param pattern Output pattern for the multichannel mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   540   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   541   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   542  IFX_INLINE void IfxCcu6_setMultiChannelPwmPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   543  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   544  /** \brief Sets the trigger request source (next multi-channel event) for the shadow transfer MCM_ST from MCMPS to MCMP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   545   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   546   * \param mode Trigger request source (next multi-channel event) for the shadow transfer MCM_ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   547   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   548   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   549  IFX_INLINE void IfxCcu6_setMultiChannelSwitchingMode(Ifx_CCU6 *ccu6, IfxCcu6_MultiChannelSwitchingSelect mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   550  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   551  /** \brief Sets the synchronization mechanism of the shadow transfer event MCM_ST\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   552   * if it has been requested before (flag R set by an event selected by SWSEL) and if MCMEN = 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   553   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   554   * \param sync Synchronization mechanism of the shadow transfer event MCM_ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   555   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   556   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   557  IFX_INLINE void IfxCcu6_setMultiChannelSwitchingSync(Ifx_CCU6 *ccu6, IfxCcu6_MultiChannelSwitchingSync sync);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   558  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   559  /** \brief Sets the state of the corresponding compare channel, that is considered to be the passive state
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   560   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   561   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   562   * \param state FALSE: passive state when CC6xST == 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   563   * TRUE : passive state when CC6xST == 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   564   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   565   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   566  IFX_INLINE void IfxCcu6_setOutputPassiveState(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut, boolean state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   567  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   568  /** \brief Enables / Disables the single shot mode of Timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   569   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   570   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   571   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   573   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   574  IFX_INLINE void IfxCcu6_setSingleShotModeEnable(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   575  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   576  /** \brief Sets the operating mode of the Timer12 capture/compare channels
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   577   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   578   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   579   * \param mode The operating mode for the T12 channels
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   580   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   581   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   582  IFX_INLINE void IfxCcu6_setT12ChannelMode(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, IfxCcu6_T12ChannelMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   583  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   584  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   585   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   586   * \param mode Operating mode of Timer 12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   587   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   588   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   589  IFX_INLINE void IfxCcu6_setT12CountMode(Ifx_CCU6 *ccu6, IfxCcu6_T12CountMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   590  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   591  /** \brief Sets the 16-bit counter value of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   592   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   593   * \param value Counter value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   595   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   596  IFX_INLINE void IfxCcu6_setT12CounterValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   597  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   598  /** \brief Sets the period value that leads Timer12 counter value to a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   599   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   600   * \param value Period value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   601   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   602   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   603  IFX_INLINE void IfxCcu6_setT12PeriodValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   604  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   605  /** \brief Sets the 16-bit compare value of Timer13 (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   606   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   607   * \param value Compare value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   609   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   610  IFX_INLINE void IfxCcu6_setT13CompareValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   611  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   612  /** \brief Sets the 16-bit counter value of Timer13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   613   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   614   * \param value counter value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   616   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   617  IFX_INLINE void IfxCcu6_setT13CounterValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   618  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   619  /** \brief Sets the period value that leads Timer13 counter value to a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   620   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   621   * \param value period value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   622   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   623   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   624  IFX_INLINE void IfxCcu6_setT13PeriodValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   625  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   626  /** \brief Sets the Timer13 trigger event direction
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   627   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   628   * \param direction T13 trigger event direction
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   630   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   631  IFX_INLINE void IfxCcu6_setT13TriggerEventDirection(Ifx_CCU6 *ccu6, IfxCcu6_T13TriggerDirection direction);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   632  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   633  /** \brief Sets the trigger event to start Timer13 (automatic set of T13R for synchronization to Timer12 compare signals)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   634   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   635   * \param mode The trigger event to start T13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   636   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   637   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   638  IFX_INLINE void IfxCcu6_setT13TriggerEventMode(Ifx_CCU6 *ccu6, IfxCcu6_T13TriggerEvent mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   639  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   640  /** \brief Sets the mode of clearing the trap flag TRPF after the trap input condition is no longer valid
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   641   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   642   * \param mode Trap mode selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   643   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   644   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   645  IFX_INLINE void IfxCcu6_setTrapMode(Ifx_CCU6 *ccu6, IfxCcu6_TrapMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   646  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   647  /** \brief Sets behaviour of the selected outputs when leaving the trap state after the trap condition has become inactive again.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   648   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   649   * \param state Trap state selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   650   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   651   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   652  IFX_INLINE void IfxCcu6_setTrapState(Ifx_CCU6 *ccu6, IfxCcu6_TrapState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   653  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   654  /** \brief starts the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   655   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   656   * \param t12 Timer12 start choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   657   * \param t13 Timer13 start choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   658   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   659   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   660  IFX_INLINE void IfxCcu6_startTimer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   661  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   662  /** \brief starts the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   663   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   664   * \param t12 Timer12 stop choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   665   * \param t13 Timer13 stop choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   666   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   667   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   668  IFX_INLINE void IfxCcu6_stopTimer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   669  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   670  /** \brief Updates the hall pattern (current hall, expected hall, moduleation output), in a single write
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   671   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   672   * \param currentHall Current hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   673   * \param expectedHall Expected hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   674   * \param output Output pattern for the multichannel mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   675   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   676   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   677  IFX_INLINE void IfxCcu6_updateHallPattern(Ifx_CCU6 *ccu6, uint8 currentHall, uint8 expectedHall, uint8 output);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   678  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   679  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   680  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   681  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   682  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   683  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   684   * \param ccu6 Specifies Ccu6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   685   * \param outputLine Output Line
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   686   * \param selectedTrigger Trigger selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   687   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   688   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   689  IFX_EXTERN void IfxCcu6_connectTrigger(Ifx_CCU6 *ccu6, IfxCcu6_TrigOut outputLine, IfxCcu6_TrigSel selectedTrigger);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   690  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   691  /** \brief Routes the interrupt node pointer to the selected service requests
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   692   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   693   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   694   * \param serviceRequest Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   696   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   697  IFX_EXTERN void IfxCcu6_routeInterruptNode(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source, IfxCcu6_ServiceRequest serviceRequest);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   698  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   699  /** \brief Sets the passive state level of the PWM outputs of the module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   700   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   701   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   702   * \param state FALSE: The passive level is 0.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   703   * TRUE : The passive level is 1.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   704   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   705   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   706  IFX_EXTERN void IfxCcu6_setOutputPassiveLevel(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut, boolean state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   707  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   708  /** \brief Sets software-control (independent set and clear conditions) for the Timer12 channel state bits CC6xST (x=0,1,2)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   709   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   710   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   711   * \param state capture/compare state selection (set / clear / toggle)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   712   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   713   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   714  IFX_EXTERN void IfxCcu6_setT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, IfxCcu6_CaptureCompareState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   715  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   716  /** \brief Sets the 16-bit compare value of Timer12 (writes into shadow registers)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   717   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   718   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   719   * \param value Compare value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   720   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   721   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   722  IFX_EXTERN void IfxCcu6_setT12CompareValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   723  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   724  /** \brief Sets the frequency and clock input of the Timer 12.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   725   * Caution: If desired frequency cannot achieved (by successive divisions by 2) :
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   726   * Then the nearest frequency value is set ( >= desired value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   727   * The resulting frequency is captured in the handler element : CaptureFrequency.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   728   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   729   * \param frequency Requested timer frequency in Hz
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   730   * \param period period value to be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   731   * \param countMode Counting mode of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   732   * \return Zero, if the function failed to fulfill requested frequency and resolution\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   733   * Positive, if the function can find settings close to the requested frequency and resolution above the requested
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   734   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   735  IFX_EXTERN float32 IfxCcu6_setT12Frequency(Ifx_CCU6 *ccu6, float32 frequency, Ifx_TimerValue period, IfxCcu6_T12CountMode countMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   736  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   737  /** \brief selects the actual input signal for the timer inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   738   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   739   * \param extInput External input signal for the Timer 12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   740   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   741   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   742  IFX_EXTERN void IfxCcu6_setT12InputSignal(Ifx_CCU6 *ccu6, IfxCcu6_T12hr_In *extInput);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   743  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   744  /** \brief Sets software-control (independent set and clear conditions) for the Timer13 channel state bits CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   745   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   746   * \param state capture/compare state selection (set / clear / toggle)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   747   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   748   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   749  IFX_EXTERN void IfxCcu6_setT13CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_CaptureCompareState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   750  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   751  /** \brief Sets the frequency and clock input of the Timer 13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   752   * Caution: If desired frequency cannot achieved (by successive divisions by 2) :
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   753   * Then the nearest frequency value is set ( >= desired value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   754   * The resulting frequency is captured in the handler element : captureFrequency.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   755   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   756   * \param frequency Requested timer frequency in Hz
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   757   * \param period period value to be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   758   * \return Zero, if the function failed to fulfill requested frequency and resolution\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   759   * Positive, if the function can find settings close to the requested frequency and resolution above the requested
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   760   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   761  IFX_EXTERN float32 IfxCcu6_setT13Frequency(Ifx_CCU6 *ccu6, float32 frequency, Ifx_TimerValue period);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   762  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   763  /** \brief selects the actual input signal for the timer inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   764   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   765   * \param extInput External input signal for the Timer 13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   766   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   767   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   768  IFX_EXTERN void IfxCcu6_setT13InputSignal(Ifx_CCU6 *ccu6, IfxCcu6_T13hr_In *extInput);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   769  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   770  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   771  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   772  /** \addtogroup IfxLld_Ccu6_Std_Utility
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   773   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   774  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   775  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   776  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   777  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   778  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   779  /** \brief Indicate the status of the dead time generation for each compare channel (0, 1, 2) of timer T12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   780   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   781   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   782   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   783   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   784  IFX_INLINE boolean IfxCcu6_getDeadTimeStatus(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   785  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   786  /** \brief Returns the value of the input Hall pattern of the Timer12 capture/compare channels CC6POS6x (x = 0, 1, 2)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   787   * that has been compared to the current and expected value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   788   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   789   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   790   * \return Status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   791   * TRUE : The input CCPOSx has been sampled as 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   792   * FALSE : The input CCPOSx has been sampled as 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   793   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   794  IFX_INLINE boolean IfxCcu6_getHallPatternSampleState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   795  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   796  /** \brief Gets the status of the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   797   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   798   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   799   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   800   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   801  IFX_INLINE boolean IfxCcu6_getInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   802  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   803  /** \brief indicates if the multi-channel mode functionality is available
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   804   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   805   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   806   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   807  IFX_INLINE boolean IfxCcu6_getMultiChannelModeAvailabilityStatus(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   808  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   809  /** \brief Gets the status of the shadow transfer request from MCMPS to MCMP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   810   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   811   * \return Status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   812   * FALSE: A shadow transfer MCM_ST is not requested\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   813   * TRUE:  A shadow transfer MCM_ST is requested, but has not yet been executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   814   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   815  IFX_INLINE boolean IfxCcu6_getMultiChannelPWMPatternShadowTransferStatus(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   816  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   817  /** \brief Returns the Timer (T12 / T13) shadow transfer enable status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   818   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   819   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   820   * \return Status (TRUE: enable / FALSE: disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   821   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   822  IFX_INLINE boolean IfxCcu6_getShadowTransferStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   823  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   824  /** \brief Returns the state of the Timer12 capture/compare channels CC6xST (x = 0, 1, 2)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   825   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   826   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   827   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   828   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   829  IFX_INLINE boolean IfxCcu6_getT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   830  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   831  /** \brief Returns the current counting direction of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   832   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   833   * \return direction (up / down)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   834   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   835  IFX_INLINE IfxCcu6_T12CountDirection IfxCcu6_getT12CountDirection(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   836  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   837  /** \brief Returns the state of the Timer13 capture/compare channel CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   838   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   839   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   840   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   841  IFX_INLINE boolean IfxCcu6_getT13CaptureCompareState(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   842  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   843  /** \brief indicates the Timer blocks (T12 / T13) availability
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   844   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   845   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   846   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   847   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   848  IFX_INLINE boolean IfxCcu6_getTimerAvailabilityStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   849  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   850  /** \brief Returns the Timer (T12 / T13) run status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   851   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   852   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   853   * \return Status (stopped / running)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   854   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   855  IFX_INLINE IfxCcu6_TimerRunStatus IfxCcu6_getTimerRunStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   856  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   857  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   858   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   859   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   860   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   861   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   862   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   863  IFX_INLINE boolean IfxCcu6_isModuleSuspended(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   864  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   865  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   866   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   867   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   868   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   869   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   870   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   871  IFX_INLINE void IfxCcu6_setSuspendMode(Ifx_CCU6 *ccu6, IfxCcu6_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   872  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   873  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   874  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   875  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   876  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   877  /** \brief Returns the module index of the selected CCU6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   878   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   879   * \return CCU6 module register address
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   880   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   881  IFX_EXTERN Ifx_CCU6 *IfxCcu6_getAddress(IfxCcu6_Index ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   882  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   883  /** \brief Returns the capture register value of the selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   884   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   885   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   886   * \return current value of the capture register of a selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   887   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   888  IFX_EXTERN uint32 IfxCcu6_getCaptureRegisterValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   889  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   890  /** \brief Returns the capture shadow register value of the selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   891   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   892   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   893   * \return current value of the capture shadow register of a selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   894   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   895  IFX_EXTERN uint32 IfxCcu6_getCaptureShadowRegisterValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   896  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   897  /** \brief Returns CCU6 index
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   898   * \param ccu6 Specifies the pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   899   * \return Returns index. returns -1 in case of unknown index
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   900   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   901  IFX_EXTERN IfxCcu6_Index IfxCcu6_getIndex(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   902  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   903  /** \brief Returns the service request register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   904   * \param ccu6 Specifies Ccu6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   905   * \param serviceRequest Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   906   * \return The service request register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   907   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   908  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxCcu6_getSrcAddress(Ifx_CCU6 *ccu6, IfxCcu6_ServiceRequest serviceRequest);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   909  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   910  /** \brief Returns the current value of the timer register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   911   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   912   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   913   * \return current value of the timer register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   914   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   915  IFX_EXTERN uint32 IfxCcu6_readTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   916  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   917  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   918  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   919  /** \addtogroup IfxLld_Ccu6_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   920   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   921  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   922  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   923  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   924  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   925  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   926  /** \brief Clears all Interrupt flags
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   927   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   928   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   929   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   930  IFX_INLINE void IfxCcu6_clearAllInterruptStatusFlags(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   931  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   932  /** \brief Disables the additional prescaler of 1/256 can be enabled for the prescaler of T12 or T13 to support higher clock frequencies
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   933   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   934   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   935   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   936   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   937  IFX_INLINE void IfxCcu6_disableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   938  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   939  /** \brief Disables the dead time generation for each compare channel (0, 1, 2) of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   940   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   941   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   942   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   943   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   944  IFX_INLINE void IfxCcu6_disableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   945  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   946  /** \brief Disables the delay of the source signal for the sampling of the Hall input pattern (selected by HSYNC)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   947   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   948   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   949   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   950  IFX_INLINE void IfxCcu6_disableDelayBypass(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   951  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   952  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   953   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   954   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   955   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   956   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   957  IFX_INLINE void IfxCcu6_disableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   958  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   959  /** \brief Sets multi channel mode unavailable, A write access to MCMOUTS is ignored
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   960   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   961   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   962   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   963  IFX_INLINE void IfxCcu6_disableMultiChannelMode(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   964  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   965  /** \brief Disables shadow transfers of the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   966   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   967   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   968   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   969   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   970   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   971  IFX_INLINE void IfxCcu6_disableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   972  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   973  /** \brief Disables the single shot-mode of Timers (T12 T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   974   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   975   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   976   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   977   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   978  IFX_INLINE void IfxCcu6_disableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   979  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   980  /** \brief Disables the Inversion of T13 signal for the modulation of the CC6x and COUT6x (x = 0, 1, 2) signals\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   981   * T13 output CC63_O is equal to CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   982   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   983   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   984   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   985  IFX_INLINE void IfxCcu6_disableT13InvertedModulation(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   986  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   987  /** \brief Sets Timer12 block unavailable, A write access to T12PR is ignored
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   988   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   989   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   990   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   991   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   992  IFX_INLINE void IfxCcu6_disableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   993  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   994  /** \brief Disables the trap functionality for the corresponding output signals
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   995   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   996   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   997   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   998   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   999  IFX_INLINE void IfxCcu6_disableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1000  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1001  /** \brief Disables the input (pin) function for the trap generation
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1002   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1003   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1004   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1005  IFX_INLINE void IfxCcu6_disableTrapPin(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1006  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1007  /** \brief Enables the additional prescaler of 1/256 can be enabled for the prescaler of T12 or T13 to support higher clock frequencies
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1008   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1009   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1010   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1011   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1012  IFX_INLINE void IfxCcu6_enableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1013  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1014  /** \brief Sets the single shot-mode of Timers (T12, T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1015   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1016   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1017   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1018   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1019   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1020  IFX_INLINE void IfxCcu6_enableCountEvent(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1021  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1022  /** \brief Enables the dead time generation for each compare channel (0, 1, 2) of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1023   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1024   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1025   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1026   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1027  IFX_INLINE void IfxCcu6_enableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1028  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1029  /** \brief Enables the delay of the source signal for the sampling of the Hall input pattern (selected by HSYNC) by the Dead-Time Counter 0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1030   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1031   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1032   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1033  IFX_INLINE void IfxCcu6_enableDelayBypass(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1034  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1035  /** \brief Sets HP_ST immediately to update bit fields EXPH and CURH by EXPHS and CURHS
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1036   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1037   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1038   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1039  IFX_INLINE void IfxCcu6_enableHallPatternShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1040  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1041  /** \brief Enables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1042   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1043   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1044   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1045   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1046  IFX_INLINE void IfxCcu6_enableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1047  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1048  /** \brief Sets multi channel mode available, A write access to MCMOUTS is executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1049   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1050   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1051   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1052  IFX_INLINE void IfxCcu6_enableMultiChannelMode(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1053  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1054  /** \brief Enables the Multi Channel Mode Availability
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1055   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1056   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1057   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1058  IFX_INLINE void IfxCcu6_enableMultiChannelModeAvailability(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1059  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1060  /** \brief Sets MCM_ST immediately to update bit field MCMP by the value of MCMPS.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1061   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1062   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1063   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1064  IFX_INLINE void IfxCcu6_enableMultiChannelPwmPatternShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1065  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1066  /** \brief Enables the shadow transfer T12_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1067   * becomes set while a T12 one match is detected while counting down
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1068   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1069   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1070   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1071  IFX_INLINE void IfxCcu6_enableMultiChannelT12DowncountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1072  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1073  /** \brief Enables the shadow transfer T12_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1074   * becomes set while a T12 period match is detected while counting up
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1075   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1076   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1077   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1078  IFX_INLINE void IfxCcu6_enableMultiChannelT12UpcountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1079  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1080  /** \brief Enables the shadow transfer T13_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1081   * becomes set while a T13 period match is detected
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1082   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1083   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1084   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1085  IFX_INLINE void IfxCcu6_enableMultiChannelT13UpcountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1086  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1087  /** \brief Enables shadow transfers of the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1088   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1089   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1090   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1091   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1092   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1093  IFX_INLINE void IfxCcu6_enableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1094  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1095  /** \brief Enables the single shot-mode of Timers (T12 T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1096   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1097   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1098   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1099   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1100  IFX_INLINE void IfxCcu6_enableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1101  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1102  /** \brief Enables the Inversion of T13 signal for the modulation of the CC6x and COUT6x (x = 0, 1, 2) signals\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1103   * T13 output CC63_O is equal to CC63ST.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1104   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1105   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1106   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1107  IFX_INLINE void IfxCcu6_enableT13InvertedModulation(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1108  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1109  /** \brief Sets Timer12 block available, A write access to T12PR is executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1110   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1111   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1112   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1113   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1114  IFX_INLINE void IfxCcu6_enableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1115  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1116  /** \brief Enables the trap functionality for the corresponding output signals
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1117   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1118   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1119   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1120   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1121  IFX_INLINE void IfxCcu6_enableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1122  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1123  /** \brief Enables the input (pin) function for the trap generation
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1124   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1125   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1126   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1127  IFX_INLINE void IfxCcu6_enableTrapPin(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1128  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1129  /** \brief selects the actual input signal for the capture compare inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1130   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1131   * \param input Input selection, ( CC6x capture input / CTRAP input / CCPOSx input  )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1132   * \param signal selection of actual input signal for the module inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1133   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1134   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1135  IFX_INLINE void IfxCcu6_setCaptureCompareInputSignal(Ifx_CCU6 *ccu6, IfxCcu6_CaptureCompareInput input, IfxCcu6_CaptureCompareInputSignal signal);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1136  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1137  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1138  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1139  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1140  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1141  /** \brief Disables the modulation of the corresponding output signal by PWM pattern generated by the timers T12 and T13.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1142   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1143   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1144   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1145   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1146   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1147  IFX_EXTERN void IfxCcu6_disableModulationOutput(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1148  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1149  /** \brief Disables the selected CCU6 kernel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1150   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1151   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1152   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1153  IFX_EXTERN void IfxCcu6_disableModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1154  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1155  /** \brief Enables the modulation of the corresponding output signal by PWM pattern generated by the timers T12 and T13.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1156   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1157   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1158   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1159   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1160   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1161  IFX_EXTERN void IfxCcu6_enableModulationOutput(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1162  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1163  /** \brief Enables the selected CCU6 kernel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1164   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1165   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1166   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1167  IFX_EXTERN void IfxCcu6_enableModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1168  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1169  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1170  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1171  /** \addtogroup IfxLld_Ccu6_Std_IO
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1172   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1173  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1174  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1175  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1176  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1177  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1178  /** \brief Initialises a CC60 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1179   * \param cc60In CC60 capture input CC60IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1180   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1181   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1182   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1183  IFX_INLINE void IfxCcu6_initCc60InPin(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1184  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1185  /** \brief Initialises a CC60 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1186   * \param cc60Out CC60 compare output CC0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1187   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1188   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1189   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1190   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1191  IFX_INLINE void IfxCcu6_initCc60OutPin(const IfxCcu6_Cc60_Out *cc60Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1192  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1193  /** \brief Initialises a CC61 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1194   * \param cc61In CC61 capture input CC61IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1195   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1196   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1197   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1198  IFX_INLINE void IfxCcu6_initCc61InPin(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1199  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1200  /** \brief Initialises a CC61 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1201   * \param cc61Out CC61 compare output CC1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1202   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1203   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1204   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1205   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1206  IFX_INLINE void IfxCcu6_initCc61OutPin(const IfxCcu6_Cc61_Out *cc61Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1207  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1208  /** \brief Initialises a CC62 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1209   * \param cc62In CC62 capture input CC62IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1210   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1211   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1212   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1213  IFX_INLINE void IfxCcu6_initCc62InPin(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1214  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1215  /** \brief Initialises a CC62 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1216   * \param cc62Out CC62 compare output CC2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1217   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1218   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1219   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1220   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1221  IFX_INLINE void IfxCcu6_initCc62OutPin(const IfxCcu6_Cc62_Out *cc62Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1222  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1223  /** \brief Initialises a CCPOS0 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1224   * \param ccpos0 CC60 capture input CCPOS0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1225   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1228  IFX_INLINE void IfxCcu6_initCcpos0Pin(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1229  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1230  /** \brief Initialises a CCPOS1 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1231   * \param ccpos1 CC61 capture input CCPOS1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1232   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1233   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1235  IFX_INLINE void IfxCcu6_initCcpos1Pin(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1236  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1237  /** \brief Initialises a CCPOS0 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1238   * \param ccpos2 CC62 capture input CCPOS2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1239   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1242  IFX_INLINE void IfxCcu6_initCcpos2Pin(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1243  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1244  /** \brief Initialises a COUT60 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1245   * \param cout60 CC60 compare output COUT0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1246   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1247   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1248   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1249   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1250  IFX_INLINE void IfxCcu6_initCout60Pin(const IfxCcu6_Cout60_Out *cout60, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1251  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1252  /** \brief Initialises a COUT61 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1253   * \param cout61 CC61 compare output COUT1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1254   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1255   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1256   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1257   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1258  IFX_INLINE void IfxCcu6_initCout61Pin(const IfxCcu6_Cout61_Out *cout61, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1259  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1260  /** \brief Initialises a COUT62 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1261   * \param cout62 CC62 compare output COUT2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1262   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1263   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1264   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1265   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1266  IFX_INLINE void IfxCcu6_initCout62Pin(const IfxCcu6_Cout62_Out *cout62, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1267  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1268  /** \brief Initialises a COUT63 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1269   * \param cout63 CC63 compare output COUT3
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1270   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1271   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1272   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1273   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1274  IFX_INLINE void IfxCcu6_initCout63Pin(const IfxCcu6_Cout63_Out *cout63, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1275  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1276  /** \brief Initialises a CTRAP input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1277   * \param ctrap CTRAP input
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1278   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1279   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1280   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1281  IFX_INLINE void IfxCcu6_initCtrapPin(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1282  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1283  /** \brief Initialises a T12HR input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1284   * \param t12hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1285   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1286   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1287   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1288  IFX_INLINE void IfxCcu6_initT12hrPin(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1289  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1290  /** \brief Initialises a T13HR input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1291   * \param t13hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1292   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1293   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1294   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1295  IFX_INLINE void IfxCcu6_initT13hrPin(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1296  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1297  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1298  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1299  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1300  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1301  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1302  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1303  /** \brief Provides functionality for both setting of CC60 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1304   * \param cc60In CC60 capture input CC60IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1305   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1306   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1307   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1308   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1309  IFX_INLINE void IfxCcu6_initCc60InPinWithPadLevel(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1310  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1311  /** \brief Provides functionality for both setting of CC61 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1312   * \param cc61In CC61 capture input CC61IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1313   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1314   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1315   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1316   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1317  IFX_INLINE void IfxCcu6_initCc61InPinWithPadLevel(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1318  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1319  /** \brief Provides functionality for both setting of CC62 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1320   * \param cc62In CC62 capture input CC62IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1321   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1322   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1323   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1324   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1325  IFX_INLINE void IfxCcu6_initCc62InPinWithPadLevel(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1326  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1327  /** \brief Provides functionality for both setting of CCPOS0 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1328   * \param ccpos0 CC60 capture input CCPOS0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1329   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1330   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1331   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1332   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1333  IFX_INLINE void IfxCcu6_initCcpos0PinWithPadLevel(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1334  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1335  /** \brief Provides functionality for both setting of CCPOS1 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1336   * \param ccpos1 CC61 capture input CCPOS1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1337   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1338   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1339   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1340   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1341  IFX_INLINE void IfxCcu6_initCcpos1PinWithPadLevel(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1342  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1343  /** \brief Provides functionality for both setting of CCPOS2 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1344   * \param ccpos2 CC62 capture input CCPOS2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1345   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1346   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1347   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1348   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1349  IFX_INLINE void IfxCcu6_initCcpos2PinWithPadLevel(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1350  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1351  /** \brief Provides functionality for both setting of CTRAP pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1352   * \param ctrap CTRAP input
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1353   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1354   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1355   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1356   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1357  IFX_INLINE void IfxCcu6_initCtrapPinWithPadLevel(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1358  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1359  /** \brief Provides functionality for both setting of T12HR pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1360   * \param t12hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1361   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1362   * \param padDriver Pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1363   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1364   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1365  IFX_INLINE void IfxCcu6_initT12hrPinWithPadLevel(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1366  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1367  /** \brief Provides functionality for both setting of T13HR pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1368   * \param t13hrIn Timer 13 HR input T13HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1369   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1370   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1371   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1372   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1373  IFX_INLINE void IfxCcu6_initT13hrPinWithPadLevel(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1374  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1375  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1376   * \param ccu6 pointer to CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1377   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1378   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1379   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1380  IFX_INLINE void IfxCcu6_setSleepMode(Ifx_CCU6 *ccu6, IfxCcu6_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1381  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1382  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1383  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1384  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1385  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1386  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1387   * \param ccu6 pointer to ccu6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1388   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1389   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1390  IFX_EXTERN void IfxCcu6_resetModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1391  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1392  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1393  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1394  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1395  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1396  IFX_INLINE void IfxCcu6_clearAllInterruptStatusFlags(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1397  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1398      ccu6->ISR.U = 0xFFFF;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1399  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1400  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1401  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1402  IFX_INLINE void IfxCcu6_clearCounter(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1403  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1404      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1405      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1406      tctr4.B.T12RES = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1407      tctr4.B.T13RES = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1408      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1409  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1410  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1411  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1412  IFX_INLINE void IfxCcu6_clearDeadTimeCounters(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1413  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1414      ccu6->TCTR4.B.DTRES = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1415  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1416  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1417  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1418  IFX_INLINE void IfxCcu6_clearInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1419  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1420      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1421      ccu6->ISR.U = mask;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1422  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1423  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1424  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1425  IFX_INLINE void IfxCcu6_clearT12OneNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1426  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1427      ccu6->ISR.B.RT12OM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1428  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1429  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1430  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1431  IFX_INLINE void IfxCcu6_clearT12PeriodNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1432  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1433      ccu6->ISR.B.RT12PM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1434  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1435  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1436  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1437  IFX_INLINE void IfxCcu6_clearT13CompareNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1438  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1439      ccu6->ISR.B.RT13CM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1440  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1441  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1442  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1443  IFX_INLINE void IfxCcu6_disableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1444  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1445      uint32 shift = ((timer * 8) + 3);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1446      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1447      ccu6->TCTR0.U = ccu6->TCTR0.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1448  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1449  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1450  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1451  IFX_INLINE void IfxCcu6_disableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1452  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1453      uint32 shift = (8 + channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1454      uint32 mask  = (1 << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1455      ccu6->T12DTC.U = ccu6->T12DTC.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1456  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1457  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1458  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1459  IFX_INLINE void IfxCcu6_disableDelayBypass(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1460  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1461      ccu6->T12MSEL.B.DBYP = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1462  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1463  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1464  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1465  IFX_INLINE void IfxCcu6_disableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1466  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1467      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1468      ccu6->IEN.U = ccu6->IEN.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1469  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1470  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1471  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1472  IFX_INLINE void IfxCcu6_disableMultiChannelMode(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1473  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1474      ccu6->MODCTR.B.MCMEN = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1475  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1476  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1477  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1478  IFX_INLINE void IfxCcu6_disableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1479  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1480      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1481      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1482      tctr4.B.T12STD = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1483      tctr4.B.T13STD = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1484      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1485  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1486  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1487  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1488  IFX_INLINE void IfxCcu6_disableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1489  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1490      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1491      ccu6->TCTR2.U = ccu6->TCTR2.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1492  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1493  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1494  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1495  IFX_INLINE void IfxCcu6_disableT13InvertedModulation(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1496  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1497      ccu6->CMPSTAT.B.T13IM = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1498  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1499  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1500  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1501  IFX_INLINE void IfxCcu6_disableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1502  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1503      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1504      ccu6->MCFG.U = ccu6->MCFG.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1505  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1506  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1507  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1508  IFX_INLINE void IfxCcu6_disableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1509  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1510      uint32 shift = (8 + channelOut);    // offset at location TRPCTR.8 for output CC60
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1511      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1512      ccu6->TRPCTR.U = ccu6->TRPCTR.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1513  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1514  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1515  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1516  IFX_INLINE void IfxCcu6_disableTrapPin(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1517  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1518      ccu6->TRPCTR.B.TRPPEN = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1519  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1520  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1521  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1522  IFX_INLINE void IfxCcu6_enableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1523  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1524      uint32 shift = ((timer * 8) + 3);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1525      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1526      ccu6->TCTR0.U = ccu6->TCTR0.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1527  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1528  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1529  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1530  IFX_INLINE void IfxCcu6_enableCountEvent(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1531  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1532      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1533      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1534      tctr4.B.T12CNT = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1535      tctr4.B.T13CNT = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1536      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1537  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1538  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1539  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1540  IFX_INLINE void IfxCcu6_enableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1541  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1542      uint32 shift = (8 + channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1543      uint32 mask  = (1 << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1544      ccu6->T12DTC.U = ccu6->T12DTC.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1545  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1546  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1547  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1548  IFX_INLINE void IfxCcu6_enableDelayBypass(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1549  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1550      ccu6->T12MSEL.B.DBYP = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1551  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1552  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1553  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1554  IFX_INLINE void IfxCcu6_enableHallPatternShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1555  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1556      ccu6->MCMOUTS.B.STRHP = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1557  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1558  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1559  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1560  IFX_INLINE void IfxCcu6_enableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1561  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1562      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1563      ccu6->IEN.U = ccu6->IEN.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1564  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1565  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1566  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1567  IFX_INLINE void IfxCcu6_enableMultiChannelMode(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1568  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1569      ccu6->MODCTR.B.MCMEN = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1570  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1571  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1572  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1573  IFX_INLINE void IfxCcu6_enableMultiChannelModeAvailability(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1574  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1575      ccu6->MCFG.B.MCM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1576  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1577  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1578  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1579  IFX_INLINE void IfxCcu6_enableMultiChannelPwmPatternShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1580  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1581      ccu6->MCMOUTS.B.STRMCM = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1582  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1583  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1584  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1585  IFX_INLINE void IfxCcu6_enableMultiChannelT12DowncountingShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1586  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1587      ccu6->MCMCTR.B.STE12D = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1588  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1589  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1590  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1591  IFX_INLINE void IfxCcu6_enableMultiChannelT12UpcountingShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1592  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1593      ccu6->MCMCTR.B.STE12U = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1594  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1595  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1596  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1597  IFX_INLINE void IfxCcu6_enableMultiChannelT13UpcountingShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1598  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1599      ccu6->MCMCTR.B.STE13U = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1600  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1601  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1602  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1603  IFX_INLINE void IfxCcu6_enableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1604  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1605      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1606      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1607      tctr4.B.T12STR = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1608      tctr4.B.T13STR = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1609      ccu6->TCTR4.U  = tctr4.U;
	insert	d0,d0,#0,#14,#1
	st.w	[a15]120,d0
.L291:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1610  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1611  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1612  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1613  IFX_INLINE void IfxCcu6_enableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1614  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1615      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1616      ccu6->TCTR2.U = ccu6->TCTR2.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1617  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1618  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1619  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1620  IFX_INLINE void IfxCcu6_enableT13InvertedModulation(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1621  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1622      ccu6->CMPSTAT.B.T13IM = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1623  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1624  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1625  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1626  IFX_INLINE void IfxCcu6_enableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1627  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1628      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1629      ccu6->MCFG.U = ccu6->MCFG.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1630  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1631  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1632  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1633  IFX_INLINE void IfxCcu6_enableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1634  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1635      uint32 shift = (8 + channelOut);    // offset at location TRPCTR.8 for output CC60
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1636      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1637      ccu6->TRPCTR.U = ccu6->TRPCTR.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1638  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1639  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1640  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1641  IFX_INLINE void IfxCcu6_enableTrapPin(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1642  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1643      ccu6->TRPCTR.B.TRPPEN = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1644  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1645  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1646  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1647  IFX_INLINE boolean IfxCcu6_getDeadTimeStatus(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1648  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1649      uint32 shift = (12 + channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1650      uint32 mask  = 1 << shift;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1651      return (ccu6->T12DTC.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1652  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1653  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1654  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1655  IFX_INLINE boolean IfxCcu6_getHallPatternSampleState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1656  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1657      uint32 shift = (channel + 3);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1658      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1659      return (ccu6->CMPSTAT.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1660  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1661  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1662  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1663  IFX_INLINE boolean IfxCcu6_getInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1664  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1665      uint32 shift = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1666      return (ccu6->IS.U & shift) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1668  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1669  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1670  IFX_INLINE boolean IfxCcu6_getMultiChannelModeAvailabilityStatus(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1672      return ccu6->MCFG.B.MCM != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1674  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1675  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1676  IFX_INLINE boolean IfxCcu6_getMultiChannelPWMPatternShadowTransferStatus(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1678      return ccu6->MCMOUT.B.R != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1680  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1681  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1682  IFX_INLINE boolean IfxCcu6_getShadowTransferStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1684      uint32 shift = ((timer * 8) + 5);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1685      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1686      return (ccu6->TCTR0.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1687  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1688  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1689  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1690  IFX_INLINE boolean IfxCcu6_getT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1691  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1692      uint32 mask = (1U << channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1693      return (ccu6->CMPSTAT.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1694  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1695  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1696  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1697  IFX_INLINE IfxCcu6_T12CountDirection IfxCcu6_getT12CountDirection(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1698  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1699      return (IfxCcu6_T12CountDirection)((ccu6->TCTR0.B.CDIR) ? TRUE : FALSE);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1700  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1701  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1702  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1703  IFX_INLINE volatile uint32 *IfxCcu6_getT12TimerPointer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1704  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1705      return (volatile uint32 *)&ccu6->T12PR;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1706  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1707  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1708  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1709  IFX_INLINE boolean IfxCcu6_getT13CaptureCompareState(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1710  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1711      return ccu6->CMPSTAT.B.CC63ST != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1712  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1713  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1714  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1715  IFX_INLINE boolean IfxCcu6_getTimerAvailabilityStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1716  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1717      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1718      return (ccu6->MCFG.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1719  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1720  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1721  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1722  IFX_INLINE IfxCcu6_TimerRunStatus IfxCcu6_getTimerRunStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1723  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1724      uint32 shift = ((timer * 8) + 4);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1725      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1726      return (IfxCcu6_TimerRunStatus)((ccu6->TCTR0.U & mask) ? TRUE : FALSE);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1728  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1729  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1730  IFX_INLINE void IfxCcu6_initCc60InPin(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1732      IfxPort_setPinModeInput(cc60In->pin.port, cc60In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1733      IfxCcu6_setCaptureCompareInputSignal(cc60In->module, IfxCcu6_CaptureCompareInput_cC60, (IfxCcu6_CaptureCompareInputSignal)cc60In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1734  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1735  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1736  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1737  IFX_INLINE void IfxCcu6_initCc60InPinWithPadLevel(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1738  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1739      IfxPort_setPinModeInput(cc60In->pin.port, cc60In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1740      IfxPort_setPinPadDriver(cc60In->pin.port, cc60In->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1741      IfxCcu6_setCaptureCompareInputSignal(cc60In->module, IfxCcu6_CaptureCompareInput_cC60, (IfxCcu6_CaptureCompareInputSignal)cc60In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1742  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1743  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1744  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1745  IFX_INLINE void IfxCcu6_initCc60OutPin(const IfxCcu6_Cc60_Out *cc60Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1746  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1747      IfxPort_setPinModeOutput(cc60Out->pin.port, cc60Out->pin.pinIndex, outputMode, cc60Out->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1748      IfxPort_setPinPadDriver(cc60Out->pin.port, cc60Out->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1749  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1750  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1751  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1752  IFX_INLINE void IfxCcu6_initCc61InPin(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1753  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1754      IfxPort_setPinModeInput(cc61In->pin.port, cc61In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1755      IfxCcu6_setCaptureCompareInputSignal(cc61In->module, IfxCcu6_CaptureCompareInput_cC61, (IfxCcu6_CaptureCompareInputSignal)cc61In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1756  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1757  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1758  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1759  IFX_INLINE void IfxCcu6_initCc61InPinWithPadLevel(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1760  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1761      IfxPort_setPinModeInput(cc61In->pin.port, cc61In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1762      IfxPort_setPinPadDriver(cc61In->pin.port, cc61In->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1763      IfxCcu6_setCaptureCompareInputSignal(cc61In->module, IfxCcu6_CaptureCompareInput_cC61, (IfxCcu6_CaptureCompareInputSignal)cc61In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1764  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1765  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1766  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1767  IFX_INLINE void IfxCcu6_initCc61OutPin(const IfxCcu6_Cc61_Out *cc61Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1768  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1769      IfxPort_setPinModeOutput(cc61Out->pin.port, cc61Out->pin.pinIndex, outputMode, cc61Out->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1770      IfxPort_setPinPadDriver(cc61Out->pin.port, cc61Out->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1771  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1772  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1773  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1774  IFX_INLINE void IfxCcu6_initCc62InPin(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1775  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1776      IfxPort_setPinModeInput(cc62In->pin.port, cc62In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1777      IfxCcu6_setCaptureCompareInputSignal(cc62In->module, IfxCcu6_CaptureCompareInput_cC62, (IfxCcu6_CaptureCompareInputSignal)cc62In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1778  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1779  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1780  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1781  IFX_INLINE void IfxCcu6_initCc62InPinWithPadLevel(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1782  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1783      IfxPort_setPinModeInput(cc62In->pin.port, cc62In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1784      IfxPort_setPinPadDriver(cc62In->pin.port, cc62In->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1785      IfxCcu6_setCaptureCompareInputSignal(cc62In->module, IfxCcu6_CaptureCompareInput_cC62, (IfxCcu6_CaptureCompareInputSignal)cc62In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1786  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1787  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1788  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1789  IFX_INLINE void IfxCcu6_initCc62OutPin(const IfxCcu6_Cc62_Out *cc62Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1790  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1791      IfxPort_setPinModeOutput(cc62Out->pin.port, cc62Out->pin.pinIndex, outputMode, cc62Out->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1792      IfxPort_setPinPadDriver(cc62Out->pin.port, cc62Out->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1794  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1795  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1796  IFX_INLINE void IfxCcu6_initCcpos0Pin(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1798      IfxPort_setPinModeInput(ccpos0->pin.port, ccpos0->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1799      IfxCcu6_setCaptureCompareInputSignal(ccpos0->module, IfxCcu6_CaptureCompareInput_cCPOS0, (IfxCcu6_CaptureCompareInputSignal)ccpos0->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1800  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1801  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1802  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1803  IFX_INLINE void IfxCcu6_initCcpos0PinWithPadLevel(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1804  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1805      IfxPort_setPinModeInput(ccpos0->pin.port, ccpos0->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1806      IfxPort_setPinPadDriver(ccpos0->pin.port, ccpos0->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1807      IfxCcu6_setCaptureCompareInputSignal(ccpos0->module, IfxCcu6_CaptureCompareInput_cCPOS0, (IfxCcu6_CaptureCompareInputSignal)ccpos0->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1808  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1809  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1810  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1811  IFX_INLINE void IfxCcu6_initCcpos1Pin(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1812  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1813      IfxPort_setPinModeInput(ccpos1->pin.port, ccpos1->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1814      IfxCcu6_setCaptureCompareInputSignal(ccpos1->module, IfxCcu6_CaptureCompareInput_cCPOS1, (IfxCcu6_CaptureCompareInputSignal)ccpos1->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1815  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1816  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1817  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1818  IFX_INLINE void IfxCcu6_initCcpos1PinWithPadLevel(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1819  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1820      IfxPort_setPinModeInput(ccpos1->pin.port, ccpos1->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1821      IfxPort_setPinPadDriver(ccpos1->pin.port, ccpos1->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1822      IfxCcu6_setCaptureCompareInputSignal(ccpos1->module, IfxCcu6_CaptureCompareInput_cCPOS1, (IfxCcu6_CaptureCompareInputSignal)ccpos1->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1824  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1825  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1826  IFX_INLINE void IfxCcu6_initCcpos2Pin(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1828      IfxPort_setPinModeInput(ccpos2->pin.port, ccpos2->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1829      IfxCcu6_setCaptureCompareInputSignal(ccpos2->module, IfxCcu6_CaptureCompareInput_cCPOS2, (IfxCcu6_CaptureCompareInputSignal)ccpos2->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1830  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1831  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1832  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1833  IFX_INLINE void IfxCcu6_initCcpos2PinWithPadLevel(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1834  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1835      IfxPort_setPinModeInput(ccpos2->pin.port, ccpos2->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1836      IfxPort_setPinPadDriver(ccpos2->pin.port, ccpos2->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1837      IfxCcu6_setCaptureCompareInputSignal(ccpos2->module, IfxCcu6_CaptureCompareInput_cCPOS2, (IfxCcu6_CaptureCompareInputSignal)ccpos2->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1838  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1839  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1840  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1841  IFX_INLINE void IfxCcu6_initCout60Pin(const IfxCcu6_Cout60_Out *cout60, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1842  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1843      IfxPort_setPinModeOutput(cout60->pin.port, cout60->pin.pinIndex, outputMode, cout60->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1844      IfxPort_setPinPadDriver(cout60->pin.port, cout60->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1845  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1846  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1847  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1848  IFX_INLINE void IfxCcu6_initCout61Pin(const IfxCcu6_Cout61_Out *cout61, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1849  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1850      IfxPort_setPinModeOutput(cout61->pin.port, cout61->pin.pinIndex, outputMode, cout61->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1851      IfxPort_setPinPadDriver(cout61->pin.port, cout61->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1852  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1853  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1854  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1855  IFX_INLINE void IfxCcu6_initCout62Pin(const IfxCcu6_Cout62_Out *cout62, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1856  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1857      IfxPort_setPinModeOutput(cout62->pin.port, cout62->pin.pinIndex, outputMode, cout62->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1858      IfxPort_setPinPadDriver(cout62->pin.port, cout62->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1860  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1861  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1862  IFX_INLINE void IfxCcu6_initCout63Pin(const IfxCcu6_Cout63_Out *cout63, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1864      IfxPort_setPinModeOutput(cout63->pin.port, cout63->pin.pinIndex, outputMode, cout63->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1865      IfxPort_setPinPadDriver(cout63->pin.port, cout63->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1866  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1867  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1868  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1869  IFX_INLINE void IfxCcu6_initCtrapPin(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1870  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1871      IfxPort_setPinModeInput(ctrap->pin.port, ctrap->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1872      IfxCcu6_setCaptureCompareInputSignal(ctrap->module, IfxCcu6_CaptureCompareInput_cTRAP, (IfxCcu6_CaptureCompareInputSignal)ctrap->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1873  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1874  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1875  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1876  IFX_INLINE void IfxCcu6_initCtrapPinWithPadLevel(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1877  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1878      IfxPort_setPinModeInput(ctrap->pin.port, ctrap->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1879      IfxPort_setPinPadDriver(ctrap->pin.port, ctrap->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1880      IfxCcu6_setCaptureCompareInputSignal(ctrap->module, IfxCcu6_CaptureCompareInput_cTRAP, (IfxCcu6_CaptureCompareInputSignal)ctrap->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1881  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1882  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1883  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1884  IFX_INLINE void IfxCcu6_initT12hrPin(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1885  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1886      IfxPort_setPinModeInput(t12hrIn->pin.port, t12hrIn->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1887      IfxCcu6_setT12InputSignal(t12hrIn->module, t12hrIn);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1888  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1889  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1890  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1891  IFX_INLINE void IfxCcu6_initT12hrPinWithPadLevel(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1892  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1893      IfxPort_setPinModeInput(t12hrIn->pin.port, t12hrIn->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1894      IfxPort_setPinPadDriver(t12hrIn->pin.port, t12hrIn->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1895      IfxCcu6_setT12InputSignal(t12hrIn->module, t12hrIn);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1896  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1897  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1898  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1899  IFX_INLINE void IfxCcu6_initT13hrPin(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1900  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1901      IfxPort_setPinModeInput(t13hrIn->pin.port, t13hrIn->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1902      IfxCcu6_setT13InputSignal(t13hrIn->module, t13hrIn);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1903  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1904  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1905  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1906  IFX_INLINE void IfxCcu6_initT13hrPinWithPadLevel(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1907  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1908      IfxPort_setPinModeInput(t13hrIn->pin.port, t13hrIn->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1909      IfxPort_setPinPadDriver(t13hrIn->pin.port, t13hrIn->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1910      IfxCcu6_setT13InputSignal(t13hrIn->module, t13hrIn);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1911  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1912  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1913  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1914  IFX_INLINE boolean IfxCcu6_isModuleEnabled(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1915  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1916      return ccu6->CLC.B.DISS == 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1917  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1918  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1919  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1920  IFX_INLINE boolean IfxCcu6_isModuleSuspended(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1921  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1922      Ifx_CCU6_OCS ocs;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1923  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1924      // read the status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1925      ocs.U = ccu6->OCS.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1926  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1927      // return the status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1928      return ocs.B.SUSSTA;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1929  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1930  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1931  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1932  IFX_INLINE boolean IfxCcu6_isT12OneNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1933  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1934      return ccu6->IS.B.T12OM != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1935  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1936  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1937  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1938  IFX_INLINE boolean IfxCcu6_isT12PeriodNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1939  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1940      return ccu6->IS.B.T12PM != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1941  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1942  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1943  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1944  IFX_INLINE boolean IfxCcu6_isT13CompareNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1945  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1946      return ccu6->IS.B.T13CM != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1947  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1948  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1949  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1950  IFX_INLINE void IfxCcu6_setCaptureCompareInputSignal(Ifx_CCU6 *ccu6, IfxCcu6_CaptureCompareInput input, IfxCcu6_CaptureCompareInputSignal signal)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1951  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1952      uint32 shift = (uint32)input;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1953      uint32 mask  = (0x3U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1954      ccu6->PISEL0.U = (ccu6->PISEL0.U & ~mask) | ((uint32)signal << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1955  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1956  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1957  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1958  IFX_INLINE void IfxCcu6_setCountingInputMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_CountingInputMode mode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1959  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1960      uint32 shift = ((timer * 2) + 2);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1961      uint32 mask  = (0x3U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1962      ccu6->PISEL2.U = (ccu6->PISEL2.U & ~mask) | ((uint32)mode << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1963  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1964  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1965  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1966  IFX_INLINE void IfxCcu6_setCurrentHallPattern(Ifx_CCU6 *ccu6, uint8 pattern)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1967  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1968      ccu6->MCMOUTS.B.CURHS = pattern;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1969  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1970  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1971  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1972  IFX_INLINE void IfxCcu6_setDeadTimeValue(Ifx_CCU6 *ccu6, uint8 value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1973  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1974      ccu6->T12DTC.B.DTM = value;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1975  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1976  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1977  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1978  IFX_INLINE void IfxCcu6_setExpectedHallPattern(Ifx_CCU6 *ccu6, uint8 pattern)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1979  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1980      ccu6->MCMOUTS.B.EXPHS = pattern;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1981  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1982  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1983  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1984  IFX_INLINE void IfxCcu6_setExternalRunMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ExternalTriggerMode mode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1985  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1986      uint32 shift = ((timer * 2) + 8);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1987      uint32 mask  = (0x3U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1988      ccu6->TCTR2.U = (ccu6->TCTR2.U & ~mask) | ((uint32)mode << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1989  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1990  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1991  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1992  IFX_INLINE void IfxCcu6_setHallSensorTriggerMode(Ifx_CCU6 *ccu6, IfxCcu6_HallSensorTriggerMode mode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1993  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1994      uint32 shift = 12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1995      uint32 mask  = (0x7U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1996      ccu6->T12MSEL.U = (ccu6->T12MSEL.U & ~mask) | ((uint32)mode << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1997  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1998  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1999  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2000  IFX_INLINE void IfxCcu6_setInputClockFrequency(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_TimerInputClock frequency)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2001  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2002      uint32 shift = (timer * 8);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2003      uint32 mask  = (0x7U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2004      ccu6->TCTR0.U = (ccu6->TCTR0.U & ~mask) | ((uint32)frequency << shift);
	ld.w	d0,[a15]112
.L446:
	insert	d0,d0,#0,#0,#3
.L537:
	or	d0,d15
	st.w	[a15]112,d0
.L304:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   364          IfxCcu6_setInputClockFrequency(ccu6, IfxCcu6_TimerId_t12, clockInput);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   365  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   366          additionalPrescaler = ((prescaler & 0x8U) != 0);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   367  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   368          if (additionalPrescaler)
	jz.t	d1:3,.L58
.L306:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     2   * \file IfxCcu6.h
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     3   * \brief CCU6  basic functionality
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     4   * \ingroup IfxLld_Ccu6
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     5   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     8   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     9   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    11   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    16   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    18   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    25   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    32   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    40   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    41   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    42   * \defgroup IfxLld_Ccu6_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    43   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    44   * \defgroup IfxLld_Ccu6_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    45   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    46   * \defgroup IfxLld_Ccu6_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    47   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    48   * \defgroup IfxLld_Ccu6_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    49   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    50   * \defgroup IfxLld_Ccu6_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    51   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    52   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    53  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    54  #ifndef IFXCCU6_H
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    55  #define IFXCCU6_H 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    56  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    57  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    58  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    59  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    60  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    61  #include "_Impl/IfxCcu6_cfg.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    62  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    63  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    64  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    65  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    66  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    67  #include "_PinMap/IfxCcu6_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    68  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    69  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    70  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    72  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    73  /** \addtogroup IfxLld_Ccu6_Std_Enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    74   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    75  /** \brief Input selection, ( CC6x capture input / CTRAP input / CCPOSx input )\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    76   * Definition in Ifx_CCU.PISEL0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    77   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    78  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    79  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    80      IfxCcu6_CaptureCompareInput_cC60   = IFX_CCU6_PISEL0_ISCC60_OFF,  /**< \brief CC60 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    81      IfxCcu6_CaptureCompareInput_cC61   = IFX_CCU6_PISEL0_ISCC61_OFF,  /**< \brief CC61 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    82      IfxCcu6_CaptureCompareInput_cC62   = IFX_CCU6_PISEL0_ISCC62_OFF,  /**< \brief CC62 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    83      IfxCcu6_CaptureCompareInput_cTRAP  = IFX_CCU6_PISEL0_ISTRP_OFF,   /**< \brief CTRAP input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    84      IfxCcu6_CaptureCompareInput_cCPOS0 = IFX_CCU6_PISEL0_ISPOS0_OFF,  /**< \brief CCPOS0 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    85      IfxCcu6_CaptureCompareInput_cCPOS1 = IFX_CCU6_PISEL0_ISPOS1_OFF,  /**< \brief CCPOS1 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    86      IfxCcu6_CaptureCompareInput_cCPOS2 = IFX_CCU6_PISEL0_ISPOS2_OFF   /**< \brief CCPOS2 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    87  } IfxCcu6_CaptureCompareInput;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    88  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    89  /** \brief Selection of actual input signal for the capture compare inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    90   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    91  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    92  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    93      IfxCcu6_CaptureCompareInputSignal_a = 0,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    94      IfxCcu6_CaptureCompareInputSignal_b = 1,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    95      IfxCcu6_CaptureCompareInputSignal_c = 2,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    96      IfxCcu6_CaptureCompareInputSignal_d = 3   /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    97  } IfxCcu6_CaptureCompareInputSignal;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    98  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    99  /** \brief capture/compare state to set / clear the CC6xST-bits
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   100   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   101  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   102  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   103      IfxCcu6_CaptureCompareState_set    = 0, /**< \brief Bit CC6xST is set */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   104      IfxCcu6_CaptureCompareState_clear  = 1, /**< \brief Bit CC6xST is cleared */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   105      IfxCcu6_CaptureCompareState_toggle = 2  /**< \brief Bit CC6xST is toggled */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   106  } IfxCcu6_CaptureCompareState;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   107  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   108  /** \brief Capture compare output pins
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   109   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   110  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   111  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   112      IfxCcu6_ChannelOut_cc0   = 0,  /**< \brief CC60 compare output CC0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   113      IfxCcu6_ChannelOut_cout0 = 1,  /**< \brief CC60 compare output COUT0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   114      IfxCcu6_ChannelOut_cc1   = 2,  /**< \brief CC61 compare output CC1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   115      IfxCcu6_ChannelOut_cout1 = 3,  /**< \brief CC61 compare output COUT1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   116      IfxCcu6_ChannelOut_cc2   = 4,  /**< \brief CC62 compare output CC2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   117      IfxCcu6_ChannelOut_cout2 = 5,  /**< \brief CC62 compare output COUT2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   118      IfxCcu6_ChannelOut_cout3 = 6   /**< \brief CC63 compare output COUT3 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   119  } IfxCcu6_ChannelOut;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   120  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   121  /** \brief Defines the input event leading to a counting action of the timer (T12 / T13)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   122   * Definition in Ifx_CCU.PISEL2.B.ISCNT12 / Ifx_CCU.PISEL2.B.ISCNT13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   123   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   124  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   125  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   126      IfxCcu6_CountingInputMode_internal        = 0, /**< \brief The T1x prescaler generates the counting events,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   127                                                      * Bit TCTR4.T1xCNT is not taken into account. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   128      IfxCcu6_CountingInputMode_manual          = 1, /**< \brief Bit TCTR4.T1xCNT written with 1 is a counting
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   129                                                      * event. The T1x prescaler is not taken into account */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   130      IfxCcu6_CountingInputMode_externalRising  = 2, /**< \brief The timer T1x is counting each rising edge
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   131                                                      * detected in the selected T1xHR signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   132      IfxCcu6_CountingInputMode_externalFalling = 3  /**< \brief The timer T1x is counting each falling edge
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   133                                                      * detected in the selected T1xHR signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   134  } IfxCcu6_CountingInputMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   135  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   136  /** \brief Controls whether the source signal for the sampling of the Hall input pattern (selected by HSYNC) is delayed by the Dead-Time Counter 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   137   * Definition in Ifx_CCU.T12MSEL.B.DBYP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   138   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   139  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   140  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   141      IfxCcu6_DelayBypass_notActive = 0,  /**< \brief Dead-Time Counter 0 is generating a delay after
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   142                                           * the source signal becomes active */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   143      IfxCcu6_DelayBypass_active    = 1   /**< \brief Dead-Time Counter 0 is not used for a delay */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   144  } IfxCcu6_DelayBypass;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   145  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   146  /** \brief Defines the event of signal T1xHR that can set the run bit T1xR by HW\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   147   * Definition in Ifx_CCU.TCTR2.B.T12RSEL / IIfx_CCU.TCTR2.B.T13RSEL
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   148   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   149  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   150  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   151      IfxCcu6_ExternalTriggerMode_disable     = 0,  /**< \brief The external setting of T1xR is disabled */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   152      IfxCcu6_ExternalTriggerMode_risingEdge  = 1,  /**< \brief Bit T1xR is set if a rising edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   153                                                     * detected. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   154      IfxCcu6_ExternalTriggerMode_fallingEdge = 2,  /**< \brief Bit T1xR is set if a falling edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   155                                                     * detected. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   156      IfxCcu6_ExternalTriggerMode_anyEdge     = 3   /**< \brief Bit T1xR is set if an edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   157                                                     * detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   158  } IfxCcu6_ExternalTriggerMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   159  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   160  /** \brief Defines the source for the sampling of the Hall input pattern and the comparison to the current and the expected Hall pattern bit fields\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   161   * Definition in Ifx_CCU.T12MSEL.HSYNC
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   162   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   163  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   164  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   165      IfxCcu6_HallSensorTriggerMode_permanentCheck    = 0,  /**< \brief Any edge at any of the inputs CCPOSx, independent from any PWM
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   166                                                             * signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   167      IfxCcu6_HallSensorTriggerMode_cM63              = 1,  /**< \brief A T13 Compare-Match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   168      IfxCcu6_HallSensorTriggerMode_t13PM             = 2,  /**< \brief A T13 Period-Match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   169      IfxCcu6_HallSensorTriggerMode_off               = 3,  /**< \brief Hall sampling triggered by HW sources is switched off */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   170      IfxCcu6_HallSensorTriggerMode_t12PMCountingUp   = 4,  /**< \brief A T12 Period-Match while counting up (T12_PM and CDIR = 0) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   171      IfxCcu6_HallSensorTriggerMode_t12OMCountingDown = 5,  /**< \brief A T12 One-Match while counting down (T12_PM and CDIR = 1) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   172      IfxCcu6_HallSensorTriggerMode_cM61CountingUp    = 6,  /**< \brief A T12 Compare-Match of compare channel CC61 while counting up (CM_61 and CDIR = 0) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   173      IfxCcu6_HallSensorTriggerMode_cM61CountingDown  = 7   /**< \brief A T12 Compare-Match of compare channel CC61 while counting down (CM_61 and CDIR = 1) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   174  } IfxCcu6_HallSensorTriggerMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   175  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   176  /** \brief Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   177   * Description in Ifx_CCU.IEN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   178   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   179  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   180  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   181      IfxCcu6_InterruptSource_cc60RisingEdge   = IFX_CCU6_IS_ICC60R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   182                                                                          * enable for channel CC60 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   183      IfxCcu6_InterruptSource_cc60FallingEdge  = IFX_CCU6_IS_ICC60F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   184                                                                          * enable for channel CC60 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   185      IfxCcu6_InterruptSource_cc61RisingEdge   = IFX_CCU6_IS_ICC61R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   186                                                                          * enable for channel CC61 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   187      IfxCcu6_InterruptSource_cc61FallingEdge  = IFX_CCU6_IS_ICC61F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   188                                                                          * enable for channel CC61 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   189      IfxCcu6_InterruptSource_cc62RisingEdge   = IFX_CCU6_IS_ICC62R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   190                                                                          * enable for channel CC62 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   191      IfxCcu6_InterruptSource_cc62FallingEdge  = IFX_CCU6_IS_ICC62F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   192                                                                          * enable for channel CC62 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   193      IfxCcu6_InterruptSource_t12OneMatch      = IFX_CCU6_IS_T12OM_OFF,  /**< \brief Interrupt enable for T12 one-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   194      IfxCcu6_InterruptSource_t12PeriodMatch   = IFX_CCU6_IS_T12PM_OFF,  /**< \brief Interrupt enable for T12 period-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   195      IfxCcu6_InterruptSource_t13CompareMatch  = IFX_CCU6_IS_T13CM_OFF,  /**< \brief Interrupt enable for T13 compare-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   196      IfxCcu6_InterruptSource_t13PeriodMatch   = IFX_CCU6_IS_T13PM_OFF,  /**< \brief Interrupt enable for T13 period-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   197      IfxCcu6_InterruptSource_trap             = IFX_CCU6_IS_TRPF_OFF,   /**< \brief Interrupt enable for trap flag */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   198      IfxCcu6_InterruptSource_correctHallEvent = IFX_CCU6_IS_CHE_OFF,    /**< \brief Interrupt enable for correct hall event */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   199      IfxCcu6_InterruptSource_wrongHallEvent   = IFX_CCU6_IS_WHE_OFF     /**< \brief Interrupt enable for wrong hall event */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   200  } IfxCcu6_InterruptSource;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   201  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   202  /** \brief Selection of the trigger request source (next multi-channel event) for the shadow transfer MCM_ST from MCMPS to MCMP\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   203   * Definition in Ifx_CCU.MCMCTR.B.SWSEL
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   204   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   205  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   206  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   207      IfxCcu6_MultiChannelSwitchingSelect_noEvent                 = 0,  /**< \brief No trigger request will be generated */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   208      IfxCcu6_MultiChannelSwitchingSelect_correctHallEvent        = 1,  /**< \brief Correct Hall pattern detected (CM_CHE) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   209      IfxCcu6_MultiChannelSwitchingSelect_t13PeriodMatch          = 2,  /**< \brief T13 period-match detected (while counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   210      IfxCcu6_MultiChannelSwitchingSelect_t12OneMatch             = 3,  /**< \brief T12 one-match (while counting down) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   211      IfxCcu6_MultiChannelSwitchingSelect_t12Channel1CompareMatch = 4,  /**< \brief T12 channel 1 compare-match detected (phase
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   212                                                                         * delay function) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   213      IfxCcu6_MultiChannelSwitchingSelect_t12PeriodMatch          = 5   /**< \brief T12 period match detected (while counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   214  } IfxCcu6_MultiChannelSwitchingSelect;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   215  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   216  /** \brief Selection of the synchronization mechanism for the shadow transfer event MCM_ST\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   217   * Definition in Ifx_CCU.MCMCTR.B.SWSYN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   218   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   219  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   220  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   221      IfxCcu6_MultiChannelSwitchingSync_direct       = 0,  /**< \brief Direct, the trigger event immediately leads to the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   222                                                            * shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   223      IfxCcu6_MultiChannelSwitchingSync_t13ZeroMatch = 1,  /**< \brief A T13 zero-match triggers the shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   224      IfxCcu6_MultiChannelSwitchingSync_t12ZeroMatch = 2   /**< \brief A T12 zero-match (while counting up) triggers the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   225                                                            * shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   226  } IfxCcu6_MultiChannelSwitchingSync;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   227  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   228  /** \brief Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   229   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   230  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   231  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   232      IfxCcu6_ServiceRequest_0 = 0,      /**< \brief Service request output SR0  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   233      IfxCcu6_ServiceRequest_1,          /**< \brief Service request output SR1  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   234      IfxCcu6_ServiceRequest_2,          /**< \brief Service request output SR2  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   235      IfxCcu6_ServiceRequest_3           /**< \brief Service request output SR3  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   236  } IfxCcu6_ServiceRequest;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   237  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   238  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   239   * Definition in Ifx_CCU6.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   240   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   241  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   242  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   243      IfxCcu6_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   244      IfxCcu6_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   245  } IfxCcu6_SleepMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   246  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   247  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   248   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   249  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   250  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   251      IfxCcu6_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   252      IfxCcu6_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   253      IfxCcu6_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   254  } IfxCcu6_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   255  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   256  /** \brief Capture compare channel of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   257   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   258  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   259  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   260      IfxCcu6_T12Channel_0 = 0,      /**< \brief T12 channel CC60  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   261      IfxCcu6_T12Channel_1,          /**< \brief T12 channel CC61  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   262      IfxCcu6_T12Channel_2           /**< \brief T12 channel CC62  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   263  } IfxCcu6_T12Channel;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   264  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   265  /** \brief The operating mode for the T12 channels are defined by the bit fields Ifx_CCU.T12MSEL.MSEL6x.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   266   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   267  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   268  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   269      IfxCcu6_T12ChannelMode_off                                   = 0,  /**< \brief Capture/Compare modes switched off */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   270      IfxCcu6_T12ChannelMode_compareMode                           = 1,  /**< \brief Compare mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   271      IfxCcu6_T12ChannelMode_doubleRegisterCaptureRisingAndFalling = 4,  /**< \brief CC6xIN rising edge: T12 stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   272      IfxCcu6_T12ChannelMode_doubleRegisterCaptureRising           = 5,  /**< \brief CC6xIN rising edge: CC6nSR stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   273      IfxCcu6_T12ChannelMode_doubleRegisterCaptureFalling          = 6,  /**< \brief CC6xIN rising edge: CC6nSR stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   274      IfxCcu6_T12ChannelMode_doubleRegisterCaptureAny              = 7,  /**< \brief CC6xIN any active edge: CC6nSR stored in CC6xR, any active edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   275      IfxCcu6_T12ChannelMode_hallSensor                            = 8,  /**< \brief Hall Sensor Mode, In order to properly enable this mode, all three MSEL6x fields have to be
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   276                                                                          * programmed to Hall Sensor mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   277      IfxCcu6_T12ChannelMode_hysteresisLikecompare                 = 9,  /**< \brief Hysteresis-like compare mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   278      IfxCcu6_T12ChannelMode_multiInputCaptureRisingAndFalling     = 10, /**< \brief CC6xIN rising edge: T12 stored in CC6xR, CCPOSx falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   279      IfxCcu6_T12ChannelMode_multiInputCaptureFallingAndRising     = 11, /**< \brief CC6xIN falling edge: T12 stored in CC6xR, CCPOSx rising edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   280      IfxCcu6_T12ChannelMode_multiInputCaptureBothRising           = 12, /**< \brief CC6xIN rising edge: T12 stored in CC6xR, CCPOSx rising edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   281      IfxCcu6_T12ChannelMode_multiInputCaptureBothFalling          = 13, /**< \brief CC6xIN falling edge: T12 stored in CC6xR, CCPOSx falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   282      IfxCcu6_T12ChannelMode_multiInputCaptureAny                  = 14  /**< \brief CC6xIN any active edge : T12 stored in CC6xR, CCPOSx any active edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   283  } IfxCcu6_T12ChannelMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   284  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   285  /** \brief Counting direction of Timer12\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   286   * Definition in Ifx_CCU.TCTR0.B.CDIR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   287   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   288  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   289  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   290      IfxCcu6_T12CountDirection_up   = 0, /**< \brief Counting up */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   291      IfxCcu6_T12CountDirection_down = 1  /**< \brief Counting down */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   292  } IfxCcu6_T12CountDirection;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   293  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   294  /** \brief Operating mode of Timer 12\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   295   * Definition in Ifx_CCU.TCTR0.B.CTM
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   296   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   297  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   298  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   299      IfxCcu6_T12CountMode_edgeAligned   = 0, /**< \brief T12 always counts up and continues counting
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   300                                               * from zero after reaching the period value. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   301      IfxCcu6_T12CountMode_centerAligned = 1  /**< \brief T12 counts down after detecting a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   302                                               * and counts up after detecting a one-match. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   303  } IfxCcu6_T12CountMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   304  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   305  /** \brief Delivers additional information to control the automatic set of bit T13R in the case that the trigger action defined by T13 trigger event control (T13TEC) is detected.\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   306   * Definition in Ifx_CCU.TCTR2.B.T13TED
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   307   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   308  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   309  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   310      IfxCcu6_T13TriggerDirection_noAction          = 0,  /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   311      IfxCcu6_T13TriggerDirection_onT12CountingUp   = 1,  /**< \brief while T12 is counting up */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   312      IfxCcu6_T13TriggerDirection_onT12CountingDown = 2,  /**< \brief while T12 is counting down */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   313      IfxCcu6_T13TriggerDirection_anyT12            = 3   /**< \brief independent on the count direction of T12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   314  } IfxCcu6_T13TriggerDirection;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   315  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   316  /** \brief Selects the trigger event to start T13 (automatic set of T13R for synchronization to T12 compare signals)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   317   * Definition in Ifx_CCU.TCTR2.B.T13TEC
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   318   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   319  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   320  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   321      IfxCcu6_T13TriggerEvent_noAction        = 0,  /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   322      IfxCcu6_T13TriggerEvent_onCC60RCompare  = 1,  /**< \brief set T13R on a T12 compare event on channel 0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   323      IfxCcu6_T13TriggerEvent_onCC61RCompare  = 2,  /**< \brief set T13R on a T12 compare event on channel 1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   324      IfxCcu6_T13TriggerEvent_onCC62RCompare  = 3,  /**< \brief set T13R on a T12 compare event on channel 2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   325      IfxCcu6_T13TriggerEvent_onAnyT12Compare = 4,  /**< \brief set T13R on any T12 compare event (ch. 0, 1, 2) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   326      IfxCcu6_T13TriggerEvent_onT12Period     = 5,  /**< \brief set T13R upon a period-match of T12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   327      IfxCcu6_T13TriggerEvent_onT12Zero       = 6,  /**< \brief set T13R upon a zero-match of T12 (while
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   328                                                     * counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   329      IfxCcu6_T13TriggerEvent_onCCPOSxEdge    = 7   /**< \brief set T13R on any edge of inputs CCPOSx */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   330  } IfxCcu6_T13TriggerEvent;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   331  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   332  /** \brief Timer number ( T12 / T13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   333   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   334  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   335  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   336      IfxCcu6_TimerId_t12 = 0,  /**< \brief Timer 12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   337      IfxCcu6_TimerId_t13 = 1   /**< \brief Timer 13 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   338  } IfxCcu6_TimerId;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   339  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   340  /** \brief Selects the input clock for timers (T12 or T13) that is derived from the peripheral clock according to the equation\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   341   * Definition in Ifx_CCU.TCTR0.B.T12CLK / Ifx_CCU.TCTR0.B.T13CLK
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   342   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   343  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   344  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   345      IfxCcu6_TimerInputClock_fcc6      = 0, /**< \brief fcc6 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   346      IfxCcu6_TimerInputClock_fcc6By2   = 1, /**< \brief fcc6 / 2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   347      IfxCcu6_TimerInputClock_fcc6By4   = 2, /**< \brief fcc6 / 4 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   348      IfxCcu6_TimerInputClock_fcc6By8   = 3, /**< \brief fcc6 / 8 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   349      IfxCcu6_TimerInputClock_fcc6By16  = 4, /**< \brief fcc6 / 16 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   350      IfxCcu6_TimerInputClock_fcc6By32  = 5, /**< \brief fcc6 / 32 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   351      IfxCcu6_TimerInputClock_fcc6By64  = 6, /**< \brief fcc6 / 64 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   352      IfxCcu6_TimerInputClock_fcc6By128 = 7  /**< \brief fcc6 / 128 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   353  } IfxCcu6_TimerInputClock;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   354  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   355  /** \brief Selection of actual input signal for the timer inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   356   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   357  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   358  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   359      IfxCcu6_TimerInputSignal_a = 0,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   360      IfxCcu6_TimerInputSignal_b = 1,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   361      IfxCcu6_TimerInputSignal_c = 2,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   362      IfxCcu6_TimerInputSignal_d = 3,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   363      IfxCcu6_TimerInputSignal_e = 0,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   364      IfxCcu6_TimerInputSignal_f = 1,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   365      IfxCcu6_TimerInputSignal_g = 2,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   366      IfxCcu6_TimerInputSignal_h = 3   /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   367  } IfxCcu6_TimerInputSignal;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   368  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   369  /** \brief Timer (T12 / T13) run status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   370   * Definition in Ifx_CCU.TCTR0.B.T12R and Ifx_CCU.TCTR0.B.T13R
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   371   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   373  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   374      IfxCcu6_TimerRunStatus_stopped = 0,  /**< \brief Timer T1x is stopped. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   375      IfxCcu6_TimerRunStatus_running = 1   /**< \brief Timer T1x is running. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   376  } IfxCcu6_TimerRunStatus;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   377  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   378  /** \brief Defines how the trap flag TRPF can be cleared after the trap input condition is no longer valid (either by CTRAP = 1 or by TRPPEN = 0)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   379   * Definition in Ifx_CCU.TRPCTR.B.TRPM2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   380   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   381  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   382  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   383      IfxCcu6_TrapMode_automatic = 0,  /**< \brief Bit TRPF is cleared by HW */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   384      IfxCcu6_TrapMode_manual    = 1   /**< \brief Bit TRPF stays 0, It has to be cleared by SW by writing
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   385                                        * ISR.RTRPF = 1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   386  } IfxCcu6_TrapMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   387  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   388  /** \brief Defines the behavior of the selected outputs when leaving the trap state, after the trap condition has become inactive again\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   389   * Definition in Ifx_CCU.TRPCTR.B.TRPMx (x = 0, 1)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   390   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   391  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   392  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   393      IfxCcu6_TrapState_t12Sync   = 0, /**< \brief The trap state is left when a zero-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   394                                        * of T12 (while counting up) is detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   395      IfxCcu6_TrapState_t13Sync   = 1, /**< \brief The trap state is left when a zeromatch
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   396                                        * of T13 is detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   397      IfxCcu6_TrapState_immediate = 3  /**< \brief The trap state is left immediately without any synchronization to T12 or T13 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   398  } IfxCcu6_TrapState;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   399  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   400  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   401  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   402  /** \addtogroup IfxLld_Ccu6_Std_Operative
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   403   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   404  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   405  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   406  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   407  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   408  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   409  /** \brief Clears the counters of the Timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   410   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   411   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   412   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   413   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   414   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   415  IFX_INLINE void IfxCcu6_clearCounter(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   416  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   417  /** \brief Clears all the three dead-time counter channels to zero.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   418   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   419   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   420   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   421  IFX_INLINE void IfxCcu6_clearDeadTimeCounters(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   422  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   423  /** \brief Clears the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   424   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   425   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   426   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   427   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   428  IFX_INLINE void IfxCcu6_clearInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   429  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   430  /** \brief Clears the T12  One notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   431   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   432   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   433   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   434  IFX_INLINE void IfxCcu6_clearT12OneNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   435  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   436  /** \brief Clears the T12  period notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   437   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   438   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   439   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   440  IFX_INLINE void IfxCcu6_clearT12PeriodNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   441  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   442  /** \brief Clears the T13  compare notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   443   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   444   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   445   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   446  IFX_INLINE void IfxCcu6_clearT13CompareNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   447  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   448  /** \brief Returns the Timer pointer
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   449   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   450   * \return Timer pointer
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   451   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   452  IFX_INLINE volatile uint32 *IfxCcu6_getT12TimerPointer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   453  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   454  /** \brief Returns the status of module enabled or disabled
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   455   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   456   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   457   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   458  IFX_INLINE boolean IfxCcu6_isModuleEnabled(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   459  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   460  /** \brief Returns the status of T12 one notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   461   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   462   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   463   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   464  IFX_INLINE boolean IfxCcu6_isT12OneNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   465  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   466  /** \brief Returns the status of T12 period notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   467   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   468   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   469   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   470  IFX_INLINE boolean IfxCcu6_isT12PeriodNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   471  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   472  /** \brief Returns the status of T13 compare notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   473   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   474   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   475   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   476  IFX_INLINE boolean IfxCcu6_isT13CompareNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   477  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   478  /** \brief Sets the input event leading to a counting action of Timers (T12 / T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   479   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   480   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   481   * \param mode Input event leading to a counting action of the timer (T12 / T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   482   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   483   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   484  IFX_INLINE void IfxCcu6_setCountingInputMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_CountingInputMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   485  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   486  /** \brief Sets the current hall pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   487   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   488   * \param pattern Current hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   489   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   490   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   491  IFX_INLINE void IfxCcu6_setCurrentHallPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   492  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   493  /** \brief Sets the delay between switching from the passive state to the active state of the selected outputs (dead time)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   494   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   495   * \param value Value of the dead time to be induced
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   496   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   497   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   498  IFX_INLINE void IfxCcu6_setDeadTimeValue(Ifx_CCU6 *ccu6, uint8 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   499  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   500  /** \brief Sets the expected hall pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   501   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   502   * \param pattern Expected hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   503   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   504   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   505  IFX_INLINE void IfxCcu6_setExpectedHallPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   506  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   507  /** \brief Sets the event of signal T1xHR that can set the run bit T1xR by HW
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   508   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   509   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   510   * \param mode External trigger mode
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   511   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   512   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   513  IFX_INLINE void IfxCcu6_setExternalRunMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ExternalTriggerMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   514  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   515  /** \brief Sets source for the sampling of the Hall input pattern and the comparison to the current and the expected Hall pattern bit fields
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   516   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   517   * \param mode Hall sensor input trigger event
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   518   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   519   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   520  IFX_INLINE void IfxCcu6_setHallSensorTriggerMode(Ifx_CCU6 *ccu6, IfxCcu6_HallSensorTriggerMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   521  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   522  /** \brief Sets the input clock for timers (T12 or T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   523   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   524   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   525   * \param frequency Input clock for timers (T12 or T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   526   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   527   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   528  IFX_INLINE void IfxCcu6_setInputClockFrequency(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_TimerInputClock frequency);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   529  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   530  /** \brief Sets the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   531   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   532   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   533   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   534   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   535  IFX_INLINE void IfxCcu6_setInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   536  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   537  /** \brief Sets the output pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   538   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   539   * \param pattern Output pattern for the multichannel mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   540   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   541   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   542  IFX_INLINE void IfxCcu6_setMultiChannelPwmPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   543  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   544  /** \brief Sets the trigger request source (next multi-channel event) for the shadow transfer MCM_ST from MCMPS to MCMP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   545   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   546   * \param mode Trigger request source (next multi-channel event) for the shadow transfer MCM_ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   547   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   548   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   549  IFX_INLINE void IfxCcu6_setMultiChannelSwitchingMode(Ifx_CCU6 *ccu6, IfxCcu6_MultiChannelSwitchingSelect mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   550  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   551  /** \brief Sets the synchronization mechanism of the shadow transfer event MCM_ST\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   552   * if it has been requested before (flag R set by an event selected by SWSEL) and if MCMEN = 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   553   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   554   * \param sync Synchronization mechanism of the shadow transfer event MCM_ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   555   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   556   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   557  IFX_INLINE void IfxCcu6_setMultiChannelSwitchingSync(Ifx_CCU6 *ccu6, IfxCcu6_MultiChannelSwitchingSync sync);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   558  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   559  /** \brief Sets the state of the corresponding compare channel, that is considered to be the passive state
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   560   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   561   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   562   * \param state FALSE: passive state when CC6xST == 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   563   * TRUE : passive state when CC6xST == 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   564   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   565   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   566  IFX_INLINE void IfxCcu6_setOutputPassiveState(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut, boolean state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   567  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   568  /** \brief Enables / Disables the single shot mode of Timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   569   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   570   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   571   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   573   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   574  IFX_INLINE void IfxCcu6_setSingleShotModeEnable(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   575  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   576  /** \brief Sets the operating mode of the Timer12 capture/compare channels
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   577   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   578   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   579   * \param mode The operating mode for the T12 channels
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   580   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   581   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   582  IFX_INLINE void IfxCcu6_setT12ChannelMode(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, IfxCcu6_T12ChannelMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   583  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   584  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   585   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   586   * \param mode Operating mode of Timer 12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   587   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   588   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   589  IFX_INLINE void IfxCcu6_setT12CountMode(Ifx_CCU6 *ccu6, IfxCcu6_T12CountMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   590  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   591  /** \brief Sets the 16-bit counter value of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   592   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   593   * \param value Counter value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   595   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   596  IFX_INLINE void IfxCcu6_setT12CounterValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   597  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   598  /** \brief Sets the period value that leads Timer12 counter value to a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   599   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   600   * \param value Period value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   601   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   602   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   603  IFX_INLINE void IfxCcu6_setT12PeriodValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   604  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   605  /** \brief Sets the 16-bit compare value of Timer13 (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   606   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   607   * \param value Compare value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   609   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   610  IFX_INLINE void IfxCcu6_setT13CompareValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   611  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   612  /** \brief Sets the 16-bit counter value of Timer13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   613   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   614   * \param value counter value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   616   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   617  IFX_INLINE void IfxCcu6_setT13CounterValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   618  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   619  /** \brief Sets the period value that leads Timer13 counter value to a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   620   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   621   * \param value period value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   622   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   623   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   624  IFX_INLINE void IfxCcu6_setT13PeriodValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   625  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   626  /** \brief Sets the Timer13 trigger event direction
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   627   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   628   * \param direction T13 trigger event direction
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   630   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   631  IFX_INLINE void IfxCcu6_setT13TriggerEventDirection(Ifx_CCU6 *ccu6, IfxCcu6_T13TriggerDirection direction);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   632  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   633  /** \brief Sets the trigger event to start Timer13 (automatic set of T13R for synchronization to Timer12 compare signals)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   634   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   635   * \param mode The trigger event to start T13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   636   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   637   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   638  IFX_INLINE void IfxCcu6_setT13TriggerEventMode(Ifx_CCU6 *ccu6, IfxCcu6_T13TriggerEvent mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   639  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   640  /** \brief Sets the mode of clearing the trap flag TRPF after the trap input condition is no longer valid
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   641   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   642   * \param mode Trap mode selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   643   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   644   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   645  IFX_INLINE void IfxCcu6_setTrapMode(Ifx_CCU6 *ccu6, IfxCcu6_TrapMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   646  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   647  /** \brief Sets behaviour of the selected outputs when leaving the trap state after the trap condition has become inactive again.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   648   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   649   * \param state Trap state selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   650   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   651   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   652  IFX_INLINE void IfxCcu6_setTrapState(Ifx_CCU6 *ccu6, IfxCcu6_TrapState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   653  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   654  /** \brief starts the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   655   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   656   * \param t12 Timer12 start choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   657   * \param t13 Timer13 start choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   658   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   659   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   660  IFX_INLINE void IfxCcu6_startTimer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   661  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   662  /** \brief starts the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   663   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   664   * \param t12 Timer12 stop choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   665   * \param t13 Timer13 stop choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   666   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   667   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   668  IFX_INLINE void IfxCcu6_stopTimer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   669  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   670  /** \brief Updates the hall pattern (current hall, expected hall, moduleation output), in a single write
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   671   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   672   * \param currentHall Current hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   673   * \param expectedHall Expected hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   674   * \param output Output pattern for the multichannel mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   675   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   676   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   677  IFX_INLINE void IfxCcu6_updateHallPattern(Ifx_CCU6 *ccu6, uint8 currentHall, uint8 expectedHall, uint8 output);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   678  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   679  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   680  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   681  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   682  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   683  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   684   * \param ccu6 Specifies Ccu6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   685   * \param outputLine Output Line
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   686   * \param selectedTrigger Trigger selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   687   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   688   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   689  IFX_EXTERN void IfxCcu6_connectTrigger(Ifx_CCU6 *ccu6, IfxCcu6_TrigOut outputLine, IfxCcu6_TrigSel selectedTrigger);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   690  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   691  /** \brief Routes the interrupt node pointer to the selected service requests
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   692   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   693   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   694   * \param serviceRequest Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   696   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   697  IFX_EXTERN void IfxCcu6_routeInterruptNode(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source, IfxCcu6_ServiceRequest serviceRequest);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   698  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   699  /** \brief Sets the passive state level of the PWM outputs of the module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   700   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   701   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   702   * \param state FALSE: The passive level is 0.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   703   * TRUE : The passive level is 1.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   704   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   705   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   706  IFX_EXTERN void IfxCcu6_setOutputPassiveLevel(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut, boolean state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   707  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   708  /** \brief Sets software-control (independent set and clear conditions) for the Timer12 channel state bits CC6xST (x=0,1,2)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   709   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   710   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   711   * \param state capture/compare state selection (set / clear / toggle)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   712   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   713   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   714  IFX_EXTERN void IfxCcu6_setT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, IfxCcu6_CaptureCompareState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   715  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   716  /** \brief Sets the 16-bit compare value of Timer12 (writes into shadow registers)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   717   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   718   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   719   * \param value Compare value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   720   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   721   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   722  IFX_EXTERN void IfxCcu6_setT12CompareValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   723  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   724  /** \brief Sets the frequency and clock input of the Timer 12.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   725   * Caution: If desired frequency cannot achieved (by successive divisions by 2) :
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   726   * Then the nearest frequency value is set ( >= desired value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   727   * The resulting frequency is captured in the handler element : CaptureFrequency.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   728   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   729   * \param frequency Requested timer frequency in Hz
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   730   * \param period period value to be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   731   * \param countMode Counting mode of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   732   * \return Zero, if the function failed to fulfill requested frequency and resolution\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   733   * Positive, if the function can find settings close to the requested frequency and resolution above the requested
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   734   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   735  IFX_EXTERN float32 IfxCcu6_setT12Frequency(Ifx_CCU6 *ccu6, float32 frequency, Ifx_TimerValue period, IfxCcu6_T12CountMode countMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   736  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   737  /** \brief selects the actual input signal for the timer inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   738   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   739   * \param extInput External input signal for the Timer 12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   740   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   741   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   742  IFX_EXTERN void IfxCcu6_setT12InputSignal(Ifx_CCU6 *ccu6, IfxCcu6_T12hr_In *extInput);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   743  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   744  /** \brief Sets software-control (independent set and clear conditions) for the Timer13 channel state bits CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   745   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   746   * \param state capture/compare state selection (set / clear / toggle)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   747   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   748   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   749  IFX_EXTERN void IfxCcu6_setT13CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_CaptureCompareState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   750  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   751  /** \brief Sets the frequency and clock input of the Timer 13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   752   * Caution: If desired frequency cannot achieved (by successive divisions by 2) :
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   753   * Then the nearest frequency value is set ( >= desired value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   754   * The resulting frequency is captured in the handler element : captureFrequency.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   755   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   756   * \param frequency Requested timer frequency in Hz
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   757   * \param period period value to be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   758   * \return Zero, if the function failed to fulfill requested frequency and resolution\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   759   * Positive, if the function can find settings close to the requested frequency and resolution above the requested
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   760   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   761  IFX_EXTERN float32 IfxCcu6_setT13Frequency(Ifx_CCU6 *ccu6, float32 frequency, Ifx_TimerValue period);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   762  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   763  /** \brief selects the actual input signal for the timer inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   764   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   765   * \param extInput External input signal for the Timer 13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   766   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   767   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   768  IFX_EXTERN void IfxCcu6_setT13InputSignal(Ifx_CCU6 *ccu6, IfxCcu6_T13hr_In *extInput);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   769  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   770  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   771  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   772  /** \addtogroup IfxLld_Ccu6_Std_Utility
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   773   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   774  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   775  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   776  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   777  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   778  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   779  /** \brief Indicate the status of the dead time generation for each compare channel (0, 1, 2) of timer T12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   780   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   781   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   782   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   783   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   784  IFX_INLINE boolean IfxCcu6_getDeadTimeStatus(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   785  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   786  /** \brief Returns the value of the input Hall pattern of the Timer12 capture/compare channels CC6POS6x (x = 0, 1, 2)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   787   * that has been compared to the current and expected value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   788   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   789   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   790   * \return Status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   791   * TRUE : The input CCPOSx has been sampled as 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   792   * FALSE : The input CCPOSx has been sampled as 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   793   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   794  IFX_INLINE boolean IfxCcu6_getHallPatternSampleState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   795  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   796  /** \brief Gets the status of the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   797   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   798   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   799   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   800   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   801  IFX_INLINE boolean IfxCcu6_getInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   802  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   803  /** \brief indicates if the multi-channel mode functionality is available
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   804   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   805   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   806   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   807  IFX_INLINE boolean IfxCcu6_getMultiChannelModeAvailabilityStatus(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   808  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   809  /** \brief Gets the status of the shadow transfer request from MCMPS to MCMP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   810   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   811   * \return Status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   812   * FALSE: A shadow transfer MCM_ST is not requested\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   813   * TRUE:  A shadow transfer MCM_ST is requested, but has not yet been executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   814   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   815  IFX_INLINE boolean IfxCcu6_getMultiChannelPWMPatternShadowTransferStatus(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   816  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   817  /** \brief Returns the Timer (T12 / T13) shadow transfer enable status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   818   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   819   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   820   * \return Status (TRUE: enable / FALSE: disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   821   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   822  IFX_INLINE boolean IfxCcu6_getShadowTransferStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   823  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   824  /** \brief Returns the state of the Timer12 capture/compare channels CC6xST (x = 0, 1, 2)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   825   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   826   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   827   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   828   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   829  IFX_INLINE boolean IfxCcu6_getT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   830  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   831  /** \brief Returns the current counting direction of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   832   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   833   * \return direction (up / down)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   834   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   835  IFX_INLINE IfxCcu6_T12CountDirection IfxCcu6_getT12CountDirection(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   836  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   837  /** \brief Returns the state of the Timer13 capture/compare channel CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   838   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   839   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   840   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   841  IFX_INLINE boolean IfxCcu6_getT13CaptureCompareState(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   842  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   843  /** \brief indicates the Timer blocks (T12 / T13) availability
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   844   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   845   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   846   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   847   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   848  IFX_INLINE boolean IfxCcu6_getTimerAvailabilityStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   849  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   850  /** \brief Returns the Timer (T12 / T13) run status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   851   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   852   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   853   * \return Status (stopped / running)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   854   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   855  IFX_INLINE IfxCcu6_TimerRunStatus IfxCcu6_getTimerRunStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   856  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   857  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   858   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   859   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   860   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   861   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   862   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   863  IFX_INLINE boolean IfxCcu6_isModuleSuspended(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   864  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   865  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   866   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   867   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   868   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   869   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   870   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   871  IFX_INLINE void IfxCcu6_setSuspendMode(Ifx_CCU6 *ccu6, IfxCcu6_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   872  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   873  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   874  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   875  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   876  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   877  /** \brief Returns the module index of the selected CCU6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   878   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   879   * \return CCU6 module register address
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   880   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   881  IFX_EXTERN Ifx_CCU6 *IfxCcu6_getAddress(IfxCcu6_Index ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   882  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   883  /** \brief Returns the capture register value of the selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   884   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   885   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   886   * \return current value of the capture register of a selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   887   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   888  IFX_EXTERN uint32 IfxCcu6_getCaptureRegisterValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   889  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   890  /** \brief Returns the capture shadow register value of the selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   891   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   892   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   893   * \return current value of the capture shadow register of a selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   894   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   895  IFX_EXTERN uint32 IfxCcu6_getCaptureShadowRegisterValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   896  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   897  /** \brief Returns CCU6 index
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   898   * \param ccu6 Specifies the pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   899   * \return Returns index. returns -1 in case of unknown index
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   900   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   901  IFX_EXTERN IfxCcu6_Index IfxCcu6_getIndex(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   902  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   903  /** \brief Returns the service request register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   904   * \param ccu6 Specifies Ccu6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   905   * \param serviceRequest Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   906   * \return The service request register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   907   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   908  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxCcu6_getSrcAddress(Ifx_CCU6 *ccu6, IfxCcu6_ServiceRequest serviceRequest);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   909  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   910  /** \brief Returns the current value of the timer register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   911   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   912   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   913   * \return current value of the timer register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   914   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   915  IFX_EXTERN uint32 IfxCcu6_readTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   916  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   917  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   918  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   919  /** \addtogroup IfxLld_Ccu6_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   920   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   921  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   922  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   923  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   924  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   925  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   926  /** \brief Clears all Interrupt flags
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   927   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   928   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   929   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   930  IFX_INLINE void IfxCcu6_clearAllInterruptStatusFlags(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   931  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   932  /** \brief Disables the additional prescaler of 1/256 can be enabled for the prescaler of T12 or T13 to support higher clock frequencies
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   933   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   934   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   935   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   936   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   937  IFX_INLINE void IfxCcu6_disableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   938  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   939  /** \brief Disables the dead time generation for each compare channel (0, 1, 2) of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   940   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   941   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   942   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   943   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   944  IFX_INLINE void IfxCcu6_disableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   945  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   946  /** \brief Disables the delay of the source signal for the sampling of the Hall input pattern (selected by HSYNC)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   947   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   948   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   949   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   950  IFX_INLINE void IfxCcu6_disableDelayBypass(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   951  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   952  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   953   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   954   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   955   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   956   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   957  IFX_INLINE void IfxCcu6_disableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   958  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   959  /** \brief Sets multi channel mode unavailable, A write access to MCMOUTS is ignored
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   960   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   961   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   962   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   963  IFX_INLINE void IfxCcu6_disableMultiChannelMode(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   964  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   965  /** \brief Disables shadow transfers of the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   966   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   967   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   968   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   969   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   970   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   971  IFX_INLINE void IfxCcu6_disableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   972  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   973  /** \brief Disables the single shot-mode of Timers (T12 T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   974   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   975   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   976   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   977   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   978  IFX_INLINE void IfxCcu6_disableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   979  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   980  /** \brief Disables the Inversion of T13 signal for the modulation of the CC6x and COUT6x (x = 0, 1, 2) signals\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   981   * T13 output CC63_O is equal to CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   982   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   983   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   984   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   985  IFX_INLINE void IfxCcu6_disableT13InvertedModulation(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   986  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   987  /** \brief Sets Timer12 block unavailable, A write access to T12PR is ignored
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   988   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   989   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   990   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   991   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   992  IFX_INLINE void IfxCcu6_disableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   993  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   994  /** \brief Disables the trap functionality for the corresponding output signals
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   995   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   996   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   997   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   998   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   999  IFX_INLINE void IfxCcu6_disableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1000  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1001  /** \brief Disables the input (pin) function for the trap generation
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1002   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1003   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1004   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1005  IFX_INLINE void IfxCcu6_disableTrapPin(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1006  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1007  /** \brief Enables the additional prescaler of 1/256 can be enabled for the prescaler of T12 or T13 to support higher clock frequencies
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1008   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1009   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1010   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1011   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1012  IFX_INLINE void IfxCcu6_enableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1013  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1014  /** \brief Sets the single shot-mode of Timers (T12, T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1015   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1016   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1017   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1018   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1019   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1020  IFX_INLINE void IfxCcu6_enableCountEvent(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1021  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1022  /** \brief Enables the dead time generation for each compare channel (0, 1, 2) of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1023   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1024   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1025   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1026   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1027  IFX_INLINE void IfxCcu6_enableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1028  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1029  /** \brief Enables the delay of the source signal for the sampling of the Hall input pattern (selected by HSYNC) by the Dead-Time Counter 0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1030   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1031   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1032   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1033  IFX_INLINE void IfxCcu6_enableDelayBypass(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1034  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1035  /** \brief Sets HP_ST immediately to update bit fields EXPH and CURH by EXPHS and CURHS
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1036   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1037   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1038   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1039  IFX_INLINE void IfxCcu6_enableHallPatternShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1040  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1041  /** \brief Enables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1042   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1043   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1044   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1045   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1046  IFX_INLINE void IfxCcu6_enableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1047  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1048  /** \brief Sets multi channel mode available, A write access to MCMOUTS is executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1049   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1050   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1051   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1052  IFX_INLINE void IfxCcu6_enableMultiChannelMode(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1053  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1054  /** \brief Enables the Multi Channel Mode Availability
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1055   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1056   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1057   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1058  IFX_INLINE void IfxCcu6_enableMultiChannelModeAvailability(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1059  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1060  /** \brief Sets MCM_ST immediately to update bit field MCMP by the value of MCMPS.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1061   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1062   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1063   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1064  IFX_INLINE void IfxCcu6_enableMultiChannelPwmPatternShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1065  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1066  /** \brief Enables the shadow transfer T12_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1067   * becomes set while a T12 one match is detected while counting down
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1068   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1069   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1070   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1071  IFX_INLINE void IfxCcu6_enableMultiChannelT12DowncountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1072  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1073  /** \brief Enables the shadow transfer T12_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1074   * becomes set while a T12 period match is detected while counting up
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1075   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1076   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1077   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1078  IFX_INLINE void IfxCcu6_enableMultiChannelT12UpcountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1079  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1080  /** \brief Enables the shadow transfer T13_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1081   * becomes set while a T13 period match is detected
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1082   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1083   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1084   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1085  IFX_INLINE void IfxCcu6_enableMultiChannelT13UpcountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1086  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1087  /** \brief Enables shadow transfers of the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1088   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1089   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1090   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1091   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1092   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1093  IFX_INLINE void IfxCcu6_enableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1094  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1095  /** \brief Enables the single shot-mode of Timers (T12 T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1096   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1097   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1098   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1099   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1100  IFX_INLINE void IfxCcu6_enableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1101  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1102  /** \brief Enables the Inversion of T13 signal for the modulation of the CC6x and COUT6x (x = 0, 1, 2) signals\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1103   * T13 output CC63_O is equal to CC63ST.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1104   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1105   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1106   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1107  IFX_INLINE void IfxCcu6_enableT13InvertedModulation(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1108  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1109  /** \brief Sets Timer12 block available, A write access to T12PR is executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1110   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1111   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1112   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1113   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1114  IFX_INLINE void IfxCcu6_enableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1115  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1116  /** \brief Enables the trap functionality for the corresponding output signals
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1117   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1118   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1119   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1120   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1121  IFX_INLINE void IfxCcu6_enableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1122  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1123  /** \brief Enables the input (pin) function for the trap generation
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1124   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1125   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1126   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1127  IFX_INLINE void IfxCcu6_enableTrapPin(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1128  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1129  /** \brief selects the actual input signal for the capture compare inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1130   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1131   * \param input Input selection, ( CC6x capture input / CTRAP input / CCPOSx input  )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1132   * \param signal selection of actual input signal for the module inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1133   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1134   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1135  IFX_INLINE void IfxCcu6_setCaptureCompareInputSignal(Ifx_CCU6 *ccu6, IfxCcu6_CaptureCompareInput input, IfxCcu6_CaptureCompareInputSignal signal);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1136  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1137  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1138  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1139  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1140  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1141  /** \brief Disables the modulation of the corresponding output signal by PWM pattern generated by the timers T12 and T13.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1142   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1143   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1144   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1145   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1146   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1147  IFX_EXTERN void IfxCcu6_disableModulationOutput(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1148  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1149  /** \brief Disables the selected CCU6 kernel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1150   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1151   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1152   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1153  IFX_EXTERN void IfxCcu6_disableModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1154  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1155  /** \brief Enables the modulation of the corresponding output signal by PWM pattern generated by the timers T12 and T13.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1156   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1157   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1158   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1159   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1160   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1161  IFX_EXTERN void IfxCcu6_enableModulationOutput(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1162  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1163  /** \brief Enables the selected CCU6 kernel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1164   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1165   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1166   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1167  IFX_EXTERN void IfxCcu6_enableModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1168  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1169  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1170  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1171  /** \addtogroup IfxLld_Ccu6_Std_IO
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1172   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1173  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1174  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1175  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1176  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1177  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1178  /** \brief Initialises a CC60 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1179   * \param cc60In CC60 capture input CC60IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1180   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1181   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1182   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1183  IFX_INLINE void IfxCcu6_initCc60InPin(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1184  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1185  /** \brief Initialises a CC60 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1186   * \param cc60Out CC60 compare output CC0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1187   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1188   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1189   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1190   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1191  IFX_INLINE void IfxCcu6_initCc60OutPin(const IfxCcu6_Cc60_Out *cc60Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1192  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1193  /** \brief Initialises a CC61 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1194   * \param cc61In CC61 capture input CC61IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1195   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1196   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1197   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1198  IFX_INLINE void IfxCcu6_initCc61InPin(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1199  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1200  /** \brief Initialises a CC61 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1201   * \param cc61Out CC61 compare output CC1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1202   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1203   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1204   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1205   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1206  IFX_INLINE void IfxCcu6_initCc61OutPin(const IfxCcu6_Cc61_Out *cc61Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1207  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1208  /** \brief Initialises a CC62 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1209   * \param cc62In CC62 capture input CC62IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1210   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1211   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1212   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1213  IFX_INLINE void IfxCcu6_initCc62InPin(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1214  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1215  /** \brief Initialises a CC62 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1216   * \param cc62Out CC62 compare output CC2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1217   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1218   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1219   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1220   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1221  IFX_INLINE void IfxCcu6_initCc62OutPin(const IfxCcu6_Cc62_Out *cc62Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1222  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1223  /** \brief Initialises a CCPOS0 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1224   * \param ccpos0 CC60 capture input CCPOS0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1225   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1228  IFX_INLINE void IfxCcu6_initCcpos0Pin(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1229  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1230  /** \brief Initialises a CCPOS1 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1231   * \param ccpos1 CC61 capture input CCPOS1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1232   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1233   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1235  IFX_INLINE void IfxCcu6_initCcpos1Pin(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1236  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1237  /** \brief Initialises a CCPOS0 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1238   * \param ccpos2 CC62 capture input CCPOS2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1239   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1242  IFX_INLINE void IfxCcu6_initCcpos2Pin(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1243  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1244  /** \brief Initialises a COUT60 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1245   * \param cout60 CC60 compare output COUT0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1246   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1247   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1248   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1249   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1250  IFX_INLINE void IfxCcu6_initCout60Pin(const IfxCcu6_Cout60_Out *cout60, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1251  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1252  /** \brief Initialises a COUT61 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1253   * \param cout61 CC61 compare output COUT1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1254   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1255   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1256   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1257   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1258  IFX_INLINE void IfxCcu6_initCout61Pin(const IfxCcu6_Cout61_Out *cout61, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1259  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1260  /** \brief Initialises a COUT62 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1261   * \param cout62 CC62 compare output COUT2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1262   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1263   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1264   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1265   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1266  IFX_INLINE void IfxCcu6_initCout62Pin(const IfxCcu6_Cout62_Out *cout62, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1267  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1268  /** \brief Initialises a COUT63 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1269   * \param cout63 CC63 compare output COUT3
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1270   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1271   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1272   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1273   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1274  IFX_INLINE void IfxCcu6_initCout63Pin(const IfxCcu6_Cout63_Out *cout63, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1275  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1276  /** \brief Initialises a CTRAP input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1277   * \param ctrap CTRAP input
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1278   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1279   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1280   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1281  IFX_INLINE void IfxCcu6_initCtrapPin(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1282  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1283  /** \brief Initialises a T12HR input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1284   * \param t12hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1285   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1286   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1287   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1288  IFX_INLINE void IfxCcu6_initT12hrPin(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1289  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1290  /** \brief Initialises a T13HR input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1291   * \param t13hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1292   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1293   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1294   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1295  IFX_INLINE void IfxCcu6_initT13hrPin(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1296  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1297  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1298  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1299  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1300  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1301  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1302  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1303  /** \brief Provides functionality for both setting of CC60 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1304   * \param cc60In CC60 capture input CC60IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1305   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1306   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1307   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1308   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1309  IFX_INLINE void IfxCcu6_initCc60InPinWithPadLevel(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1310  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1311  /** \brief Provides functionality for both setting of CC61 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1312   * \param cc61In CC61 capture input CC61IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1313   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1314   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1315   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1316   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1317  IFX_INLINE void IfxCcu6_initCc61InPinWithPadLevel(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1318  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1319  /** \brief Provides functionality for both setting of CC62 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1320   * \param cc62In CC62 capture input CC62IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1321   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1322   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1323   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1324   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1325  IFX_INLINE void IfxCcu6_initCc62InPinWithPadLevel(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1326  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1327  /** \brief Provides functionality for both setting of CCPOS0 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1328   * \param ccpos0 CC60 capture input CCPOS0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1329   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1330   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1331   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1332   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1333  IFX_INLINE void IfxCcu6_initCcpos0PinWithPadLevel(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1334  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1335  /** \brief Provides functionality for both setting of CCPOS1 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1336   * \param ccpos1 CC61 capture input CCPOS1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1337   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1338   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1339   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1340   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1341  IFX_INLINE void IfxCcu6_initCcpos1PinWithPadLevel(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1342  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1343  /** \brief Provides functionality for both setting of CCPOS2 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1344   * \param ccpos2 CC62 capture input CCPOS2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1345   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1346   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1347   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1348   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1349  IFX_INLINE void IfxCcu6_initCcpos2PinWithPadLevel(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1350  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1351  /** \brief Provides functionality for both setting of CTRAP pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1352   * \param ctrap CTRAP input
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1353   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1354   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1355   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1356   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1357  IFX_INLINE void IfxCcu6_initCtrapPinWithPadLevel(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1358  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1359  /** \brief Provides functionality for both setting of T12HR pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1360   * \param t12hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1361   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1362   * \param padDriver Pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1363   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1364   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1365  IFX_INLINE void IfxCcu6_initT12hrPinWithPadLevel(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1366  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1367  /** \brief Provides functionality for both setting of T13HR pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1368   * \param t13hrIn Timer 13 HR input T13HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1369   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1370   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1371   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1372   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1373  IFX_INLINE void IfxCcu6_initT13hrPinWithPadLevel(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1374  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1375  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1376   * \param ccu6 pointer to CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1377   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1378   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1379   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1380  IFX_INLINE void IfxCcu6_setSleepMode(Ifx_CCU6 *ccu6, IfxCcu6_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1381  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1382  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1383  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1384  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1385  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1386  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1387   * \param ccu6 pointer to ccu6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1388   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1389   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1390  IFX_EXTERN void IfxCcu6_resetModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1391  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1392  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1393  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1394  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1395  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1396  IFX_INLINE void IfxCcu6_clearAllInterruptStatusFlags(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1397  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1398      ccu6->ISR.U = 0xFFFF;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1399  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1400  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1401  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1402  IFX_INLINE void IfxCcu6_clearCounter(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1403  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1404      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1405      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1406      tctr4.B.T12RES = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1407      tctr4.B.T13RES = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1408      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1409  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1410  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1411  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1412  IFX_INLINE void IfxCcu6_clearDeadTimeCounters(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1413  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1414      ccu6->TCTR4.B.DTRES = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1415  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1416  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1417  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1418  IFX_INLINE void IfxCcu6_clearInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1419  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1420      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1421      ccu6->ISR.U = mask;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1422  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1423  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1424  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1425  IFX_INLINE void IfxCcu6_clearT12OneNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1426  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1427      ccu6->ISR.B.RT12OM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1428  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1429  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1430  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1431  IFX_INLINE void IfxCcu6_clearT12PeriodNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1432  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1433      ccu6->ISR.B.RT12PM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1434  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1435  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1436  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1437  IFX_INLINE void IfxCcu6_clearT13CompareNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1438  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1439      ccu6->ISR.B.RT13CM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1440  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1441  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1442  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1443  IFX_INLINE void IfxCcu6_disableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1444  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1445      uint32 shift = ((timer * 8) + 3);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1446      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1447      ccu6->TCTR0.U = ccu6->TCTR0.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1448  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1449  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1450  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1451  IFX_INLINE void IfxCcu6_disableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1452  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1453      uint32 shift = (8 + channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1454      uint32 mask  = (1 << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1455      ccu6->T12DTC.U = ccu6->T12DTC.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1456  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1457  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1458  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1459  IFX_INLINE void IfxCcu6_disableDelayBypass(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1460  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1461      ccu6->T12MSEL.B.DBYP = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1462  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1463  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1464  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1465  IFX_INLINE void IfxCcu6_disableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1466  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1467      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1468      ccu6->IEN.U = ccu6->IEN.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1469  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1470  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1471  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1472  IFX_INLINE void IfxCcu6_disableMultiChannelMode(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1473  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1474      ccu6->MODCTR.B.MCMEN = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1475  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1476  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1477  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1478  IFX_INLINE void IfxCcu6_disableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1479  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1480      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1481      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1482      tctr4.B.T12STD = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1483      tctr4.B.T13STD = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1484      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1485  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1486  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1487  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1488  IFX_INLINE void IfxCcu6_disableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1489  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1490      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1491      ccu6->TCTR2.U = ccu6->TCTR2.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1492  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1493  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1494  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1495  IFX_INLINE void IfxCcu6_disableT13InvertedModulation(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1496  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1497      ccu6->CMPSTAT.B.T13IM = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1498  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1499  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1500  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1501  IFX_INLINE void IfxCcu6_disableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1502  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1503      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1504      ccu6->MCFG.U = ccu6->MCFG.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1505  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1506  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1507  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1508  IFX_INLINE void IfxCcu6_disableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1509  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1510      uint32 shift = (8 + channelOut);    // offset at location TRPCTR.8 for output CC60
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1511      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1512      ccu6->TRPCTR.U = ccu6->TRPCTR.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1513  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1514  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1515  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1516  IFX_INLINE void IfxCcu6_disableTrapPin(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1517  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1518      ccu6->TRPCTR.B.TRPPEN = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1519  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1520  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1521  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1522  IFX_INLINE void IfxCcu6_enableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1523  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1524      uint32 shift = ((timer * 8) + 3);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1525      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1526      ccu6->TCTR0.U = ccu6->TCTR0.U | (mask);
	ld.w	d15,[a15]112
.L538:
	or	d15,#8
	st.w	[a15]112,d15
.L58:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     2   * \file IfxCcu6.h
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     3   * \brief CCU6  basic functionality
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     4   * \ingroup IfxLld_Ccu6
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     5   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     8   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     9   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    11   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    16   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    18   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    25   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    32   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    40   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    41   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    42   * \defgroup IfxLld_Ccu6_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    43   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    44   * \defgroup IfxLld_Ccu6_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    45   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    46   * \defgroup IfxLld_Ccu6_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    47   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    48   * \defgroup IfxLld_Ccu6_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    49   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    50   * \defgroup IfxLld_Ccu6_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    51   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    52   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    53  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    54  #ifndef IFXCCU6_H
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    55  #define IFXCCU6_H 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    56  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    57  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    58  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    59  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    60  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    61  #include "_Impl/IfxCcu6_cfg.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    62  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    63  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    64  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    65  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    66  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    67  #include "_PinMap/IfxCcu6_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    68  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    69  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    70  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    72  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    73  /** \addtogroup IfxLld_Ccu6_Std_Enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    74   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    75  /** \brief Input selection, ( CC6x capture input / CTRAP input / CCPOSx input )\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    76   * Definition in Ifx_CCU.PISEL0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    77   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    78  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    79  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    80      IfxCcu6_CaptureCompareInput_cC60   = IFX_CCU6_PISEL0_ISCC60_OFF,  /**< \brief CC60 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    81      IfxCcu6_CaptureCompareInput_cC61   = IFX_CCU6_PISEL0_ISCC61_OFF,  /**< \brief CC61 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    82      IfxCcu6_CaptureCompareInput_cC62   = IFX_CCU6_PISEL0_ISCC62_OFF,  /**< \brief CC62 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    83      IfxCcu6_CaptureCompareInput_cTRAP  = IFX_CCU6_PISEL0_ISTRP_OFF,   /**< \brief CTRAP input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    84      IfxCcu6_CaptureCompareInput_cCPOS0 = IFX_CCU6_PISEL0_ISPOS0_OFF,  /**< \brief CCPOS0 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    85      IfxCcu6_CaptureCompareInput_cCPOS1 = IFX_CCU6_PISEL0_ISPOS1_OFF,  /**< \brief CCPOS1 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    86      IfxCcu6_CaptureCompareInput_cCPOS2 = IFX_CCU6_PISEL0_ISPOS2_OFF   /**< \brief CCPOS2 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    87  } IfxCcu6_CaptureCompareInput;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    88  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    89  /** \brief Selection of actual input signal for the capture compare inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    90   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    91  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    92  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    93      IfxCcu6_CaptureCompareInputSignal_a = 0,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    94      IfxCcu6_CaptureCompareInputSignal_b = 1,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    95      IfxCcu6_CaptureCompareInputSignal_c = 2,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    96      IfxCcu6_CaptureCompareInputSignal_d = 3   /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    97  } IfxCcu6_CaptureCompareInputSignal;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    98  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    99  /** \brief capture/compare state to set / clear the CC6xST-bits
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   100   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   101  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   102  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   103      IfxCcu6_CaptureCompareState_set    = 0, /**< \brief Bit CC6xST is set */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   104      IfxCcu6_CaptureCompareState_clear  = 1, /**< \brief Bit CC6xST is cleared */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   105      IfxCcu6_CaptureCompareState_toggle = 2  /**< \brief Bit CC6xST is toggled */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   106  } IfxCcu6_CaptureCompareState;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   107  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   108  /** \brief Capture compare output pins
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   109   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   110  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   111  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   112      IfxCcu6_ChannelOut_cc0   = 0,  /**< \brief CC60 compare output CC0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   113      IfxCcu6_ChannelOut_cout0 = 1,  /**< \brief CC60 compare output COUT0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   114      IfxCcu6_ChannelOut_cc1   = 2,  /**< \brief CC61 compare output CC1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   115      IfxCcu6_ChannelOut_cout1 = 3,  /**< \brief CC61 compare output COUT1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   116      IfxCcu6_ChannelOut_cc2   = 4,  /**< \brief CC62 compare output CC2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   117      IfxCcu6_ChannelOut_cout2 = 5,  /**< \brief CC62 compare output COUT2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   118      IfxCcu6_ChannelOut_cout3 = 6   /**< \brief CC63 compare output COUT3 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   119  } IfxCcu6_ChannelOut;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   120  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   121  /** \brief Defines the input event leading to a counting action of the timer (T12 / T13)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   122   * Definition in Ifx_CCU.PISEL2.B.ISCNT12 / Ifx_CCU.PISEL2.B.ISCNT13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   123   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   124  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   125  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   126      IfxCcu6_CountingInputMode_internal        = 0, /**< \brief The T1x prescaler generates the counting events,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   127                                                      * Bit TCTR4.T1xCNT is not taken into account. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   128      IfxCcu6_CountingInputMode_manual          = 1, /**< \brief Bit TCTR4.T1xCNT written with 1 is a counting
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   129                                                      * event. The T1x prescaler is not taken into account */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   130      IfxCcu6_CountingInputMode_externalRising  = 2, /**< \brief The timer T1x is counting each rising edge
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   131                                                      * detected in the selected T1xHR signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   132      IfxCcu6_CountingInputMode_externalFalling = 3  /**< \brief The timer T1x is counting each falling edge
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   133                                                      * detected in the selected T1xHR signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   134  } IfxCcu6_CountingInputMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   135  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   136  /** \brief Controls whether the source signal for the sampling of the Hall input pattern (selected by HSYNC) is delayed by the Dead-Time Counter 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   137   * Definition in Ifx_CCU.T12MSEL.B.DBYP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   138   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   139  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   140  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   141      IfxCcu6_DelayBypass_notActive = 0,  /**< \brief Dead-Time Counter 0 is generating a delay after
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   142                                           * the source signal becomes active */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   143      IfxCcu6_DelayBypass_active    = 1   /**< \brief Dead-Time Counter 0 is not used for a delay */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   144  } IfxCcu6_DelayBypass;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   145  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   146  /** \brief Defines the event of signal T1xHR that can set the run bit T1xR by HW\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   147   * Definition in Ifx_CCU.TCTR2.B.T12RSEL / IIfx_CCU.TCTR2.B.T13RSEL
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   148   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   149  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   150  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   151      IfxCcu6_ExternalTriggerMode_disable     = 0,  /**< \brief The external setting of T1xR is disabled */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   152      IfxCcu6_ExternalTriggerMode_risingEdge  = 1,  /**< \brief Bit T1xR is set if a rising edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   153                                                     * detected. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   154      IfxCcu6_ExternalTriggerMode_fallingEdge = 2,  /**< \brief Bit T1xR is set if a falling edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   155                                                     * detected. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   156      IfxCcu6_ExternalTriggerMode_anyEdge     = 3   /**< \brief Bit T1xR is set if an edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   157                                                     * detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   158  } IfxCcu6_ExternalTriggerMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   159  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   160  /** \brief Defines the source for the sampling of the Hall input pattern and the comparison to the current and the expected Hall pattern bit fields\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   161   * Definition in Ifx_CCU.T12MSEL.HSYNC
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   162   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   163  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   164  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   165      IfxCcu6_HallSensorTriggerMode_permanentCheck    = 0,  /**< \brief Any edge at any of the inputs CCPOSx, independent from any PWM
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   166                                                             * signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   167      IfxCcu6_HallSensorTriggerMode_cM63              = 1,  /**< \brief A T13 Compare-Match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   168      IfxCcu6_HallSensorTriggerMode_t13PM             = 2,  /**< \brief A T13 Period-Match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   169      IfxCcu6_HallSensorTriggerMode_off               = 3,  /**< \brief Hall sampling triggered by HW sources is switched off */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   170      IfxCcu6_HallSensorTriggerMode_t12PMCountingUp   = 4,  /**< \brief A T12 Period-Match while counting up (T12_PM and CDIR = 0) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   171      IfxCcu6_HallSensorTriggerMode_t12OMCountingDown = 5,  /**< \brief A T12 One-Match while counting down (T12_PM and CDIR = 1) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   172      IfxCcu6_HallSensorTriggerMode_cM61CountingUp    = 6,  /**< \brief A T12 Compare-Match of compare channel CC61 while counting up (CM_61 and CDIR = 0) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   173      IfxCcu6_HallSensorTriggerMode_cM61CountingDown  = 7   /**< \brief A T12 Compare-Match of compare channel CC61 while counting down (CM_61 and CDIR = 1) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   174  } IfxCcu6_HallSensorTriggerMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   175  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   176  /** \brief Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   177   * Description in Ifx_CCU.IEN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   178   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   179  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   180  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   181      IfxCcu6_InterruptSource_cc60RisingEdge   = IFX_CCU6_IS_ICC60R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   182                                                                          * enable for channel CC60 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   183      IfxCcu6_InterruptSource_cc60FallingEdge  = IFX_CCU6_IS_ICC60F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   184                                                                          * enable for channel CC60 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   185      IfxCcu6_InterruptSource_cc61RisingEdge   = IFX_CCU6_IS_ICC61R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   186                                                                          * enable for channel CC61 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   187      IfxCcu6_InterruptSource_cc61FallingEdge  = IFX_CCU6_IS_ICC61F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   188                                                                          * enable for channel CC61 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   189      IfxCcu6_InterruptSource_cc62RisingEdge   = IFX_CCU6_IS_ICC62R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   190                                                                          * enable for channel CC62 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   191      IfxCcu6_InterruptSource_cc62FallingEdge  = IFX_CCU6_IS_ICC62F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   192                                                                          * enable for channel CC62 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   193      IfxCcu6_InterruptSource_t12OneMatch      = IFX_CCU6_IS_T12OM_OFF,  /**< \brief Interrupt enable for T12 one-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   194      IfxCcu6_InterruptSource_t12PeriodMatch   = IFX_CCU6_IS_T12PM_OFF,  /**< \brief Interrupt enable for T12 period-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   195      IfxCcu6_InterruptSource_t13CompareMatch  = IFX_CCU6_IS_T13CM_OFF,  /**< \brief Interrupt enable for T13 compare-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   196      IfxCcu6_InterruptSource_t13PeriodMatch   = IFX_CCU6_IS_T13PM_OFF,  /**< \brief Interrupt enable for T13 period-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   197      IfxCcu6_InterruptSource_trap             = IFX_CCU6_IS_TRPF_OFF,   /**< \brief Interrupt enable for trap flag */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   198      IfxCcu6_InterruptSource_correctHallEvent = IFX_CCU6_IS_CHE_OFF,    /**< \brief Interrupt enable for correct hall event */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   199      IfxCcu6_InterruptSource_wrongHallEvent   = IFX_CCU6_IS_WHE_OFF     /**< \brief Interrupt enable for wrong hall event */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   200  } IfxCcu6_InterruptSource;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   201  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   202  /** \brief Selection of the trigger request source (next multi-channel event) for the shadow transfer MCM_ST from MCMPS to MCMP\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   203   * Definition in Ifx_CCU.MCMCTR.B.SWSEL
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   204   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   205  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   206  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   207      IfxCcu6_MultiChannelSwitchingSelect_noEvent                 = 0,  /**< \brief No trigger request will be generated */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   208      IfxCcu6_MultiChannelSwitchingSelect_correctHallEvent        = 1,  /**< \brief Correct Hall pattern detected (CM_CHE) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   209      IfxCcu6_MultiChannelSwitchingSelect_t13PeriodMatch          = 2,  /**< \brief T13 period-match detected (while counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   210      IfxCcu6_MultiChannelSwitchingSelect_t12OneMatch             = 3,  /**< \brief T12 one-match (while counting down) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   211      IfxCcu6_MultiChannelSwitchingSelect_t12Channel1CompareMatch = 4,  /**< \brief T12 channel 1 compare-match detected (phase
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   212                                                                         * delay function) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   213      IfxCcu6_MultiChannelSwitchingSelect_t12PeriodMatch          = 5   /**< \brief T12 period match detected (while counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   214  } IfxCcu6_MultiChannelSwitchingSelect;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   215  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   216  /** \brief Selection of the synchronization mechanism for the shadow transfer event MCM_ST\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   217   * Definition in Ifx_CCU.MCMCTR.B.SWSYN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   218   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   219  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   220  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   221      IfxCcu6_MultiChannelSwitchingSync_direct       = 0,  /**< \brief Direct, the trigger event immediately leads to the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   222                                                            * shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   223      IfxCcu6_MultiChannelSwitchingSync_t13ZeroMatch = 1,  /**< \brief A T13 zero-match triggers the shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   224      IfxCcu6_MultiChannelSwitchingSync_t12ZeroMatch = 2   /**< \brief A T12 zero-match (while counting up) triggers the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   225                                                            * shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   226  } IfxCcu6_MultiChannelSwitchingSync;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   227  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   228  /** \brief Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   229   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   230  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   231  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   232      IfxCcu6_ServiceRequest_0 = 0,      /**< \brief Service request output SR0  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   233      IfxCcu6_ServiceRequest_1,          /**< \brief Service request output SR1  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   234      IfxCcu6_ServiceRequest_2,          /**< \brief Service request output SR2  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   235      IfxCcu6_ServiceRequest_3           /**< \brief Service request output SR3  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   236  } IfxCcu6_ServiceRequest;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   237  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   238  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   239   * Definition in Ifx_CCU6.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   240   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   241  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   242  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   243      IfxCcu6_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   244      IfxCcu6_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   245  } IfxCcu6_SleepMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   246  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   247  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   248   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   249  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   250  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   251      IfxCcu6_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   252      IfxCcu6_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   253      IfxCcu6_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   254  } IfxCcu6_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   255  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   256  /** \brief Capture compare channel of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   257   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   258  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   259  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   260      IfxCcu6_T12Channel_0 = 0,      /**< \brief T12 channel CC60  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   261      IfxCcu6_T12Channel_1,          /**< \brief T12 channel CC61  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   262      IfxCcu6_T12Channel_2           /**< \brief T12 channel CC62  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   263  } IfxCcu6_T12Channel;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   264  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   265  /** \brief The operating mode for the T12 channels are defined by the bit fields Ifx_CCU.T12MSEL.MSEL6x.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   266   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   267  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   268  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   269      IfxCcu6_T12ChannelMode_off                                   = 0,  /**< \brief Capture/Compare modes switched off */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   270      IfxCcu6_T12ChannelMode_compareMode                           = 1,  /**< \brief Compare mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   271      IfxCcu6_T12ChannelMode_doubleRegisterCaptureRisingAndFalling = 4,  /**< \brief CC6xIN rising edge: T12 stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   272      IfxCcu6_T12ChannelMode_doubleRegisterCaptureRising           = 5,  /**< \brief CC6xIN rising edge: CC6nSR stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   273      IfxCcu6_T12ChannelMode_doubleRegisterCaptureFalling          = 6,  /**< \brief CC6xIN rising edge: CC6nSR stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   274      IfxCcu6_T12ChannelMode_doubleRegisterCaptureAny              = 7,  /**< \brief CC6xIN any active edge: CC6nSR stored in CC6xR, any active edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   275      IfxCcu6_T12ChannelMode_hallSensor                            = 8,  /**< \brief Hall Sensor Mode, In order to properly enable this mode, all three MSEL6x fields have to be
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   276                                                                          * programmed to Hall Sensor mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   277      IfxCcu6_T12ChannelMode_hysteresisLikecompare                 = 9,  /**< \brief Hysteresis-like compare mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   278      IfxCcu6_T12ChannelMode_multiInputCaptureRisingAndFalling     = 10, /**< \brief CC6xIN rising edge: T12 stored in CC6xR, CCPOSx falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   279      IfxCcu6_T12ChannelMode_multiInputCaptureFallingAndRising     = 11, /**< \brief CC6xIN falling edge: T12 stored in CC6xR, CCPOSx rising edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   280      IfxCcu6_T12ChannelMode_multiInputCaptureBothRising           = 12, /**< \brief CC6xIN rising edge: T12 stored in CC6xR, CCPOSx rising edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   281      IfxCcu6_T12ChannelMode_multiInputCaptureBothFalling          = 13, /**< \brief CC6xIN falling edge: T12 stored in CC6xR, CCPOSx falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   282      IfxCcu6_T12ChannelMode_multiInputCaptureAny                  = 14  /**< \brief CC6xIN any active edge : T12 stored in CC6xR, CCPOSx any active edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   283  } IfxCcu6_T12ChannelMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   284  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   285  /** \brief Counting direction of Timer12\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   286   * Definition in Ifx_CCU.TCTR0.B.CDIR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   287   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   288  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   289  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   290      IfxCcu6_T12CountDirection_up   = 0, /**< \brief Counting up */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   291      IfxCcu6_T12CountDirection_down = 1  /**< \brief Counting down */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   292  } IfxCcu6_T12CountDirection;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   293  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   294  /** \brief Operating mode of Timer 12\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   295   * Definition in Ifx_CCU.TCTR0.B.CTM
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   296   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   297  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   298  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   299      IfxCcu6_T12CountMode_edgeAligned   = 0, /**< \brief T12 always counts up and continues counting
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   300                                               * from zero after reaching the period value. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   301      IfxCcu6_T12CountMode_centerAligned = 1  /**< \brief T12 counts down after detecting a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   302                                               * and counts up after detecting a one-match. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   303  } IfxCcu6_T12CountMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   304  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   305  /** \brief Delivers additional information to control the automatic set of bit T13R in the case that the trigger action defined by T13 trigger event control (T13TEC) is detected.\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   306   * Definition in Ifx_CCU.TCTR2.B.T13TED
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   307   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   308  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   309  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   310      IfxCcu6_T13TriggerDirection_noAction          = 0,  /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   311      IfxCcu6_T13TriggerDirection_onT12CountingUp   = 1,  /**< \brief while T12 is counting up */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   312      IfxCcu6_T13TriggerDirection_onT12CountingDown = 2,  /**< \brief while T12 is counting down */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   313      IfxCcu6_T13TriggerDirection_anyT12            = 3   /**< \brief independent on the count direction of T12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   314  } IfxCcu6_T13TriggerDirection;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   315  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   316  /** \brief Selects the trigger event to start T13 (automatic set of T13R for synchronization to T12 compare signals)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   317   * Definition in Ifx_CCU.TCTR2.B.T13TEC
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   318   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   319  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   320  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   321      IfxCcu6_T13TriggerEvent_noAction        = 0,  /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   322      IfxCcu6_T13TriggerEvent_onCC60RCompare  = 1,  /**< \brief set T13R on a T12 compare event on channel 0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   323      IfxCcu6_T13TriggerEvent_onCC61RCompare  = 2,  /**< \brief set T13R on a T12 compare event on channel 1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   324      IfxCcu6_T13TriggerEvent_onCC62RCompare  = 3,  /**< \brief set T13R on a T12 compare event on channel 2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   325      IfxCcu6_T13TriggerEvent_onAnyT12Compare = 4,  /**< \brief set T13R on any T12 compare event (ch. 0, 1, 2) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   326      IfxCcu6_T13TriggerEvent_onT12Period     = 5,  /**< \brief set T13R upon a period-match of T12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   327      IfxCcu6_T13TriggerEvent_onT12Zero       = 6,  /**< \brief set T13R upon a zero-match of T12 (while
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   328                                                     * counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   329      IfxCcu6_T13TriggerEvent_onCCPOSxEdge    = 7   /**< \brief set T13R on any edge of inputs CCPOSx */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   330  } IfxCcu6_T13TriggerEvent;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   331  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   332  /** \brief Timer number ( T12 / T13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   333   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   334  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   335  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   336      IfxCcu6_TimerId_t12 = 0,  /**< \brief Timer 12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   337      IfxCcu6_TimerId_t13 = 1   /**< \brief Timer 13 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   338  } IfxCcu6_TimerId;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   339  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   340  /** \brief Selects the input clock for timers (T12 or T13) that is derived from the peripheral clock according to the equation\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   341   * Definition in Ifx_CCU.TCTR0.B.T12CLK / Ifx_CCU.TCTR0.B.T13CLK
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   342   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   343  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   344  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   345      IfxCcu6_TimerInputClock_fcc6      = 0, /**< \brief fcc6 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   346      IfxCcu6_TimerInputClock_fcc6By2   = 1, /**< \brief fcc6 / 2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   347      IfxCcu6_TimerInputClock_fcc6By4   = 2, /**< \brief fcc6 / 4 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   348      IfxCcu6_TimerInputClock_fcc6By8   = 3, /**< \brief fcc6 / 8 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   349      IfxCcu6_TimerInputClock_fcc6By16  = 4, /**< \brief fcc6 / 16 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   350      IfxCcu6_TimerInputClock_fcc6By32  = 5, /**< \brief fcc6 / 32 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   351      IfxCcu6_TimerInputClock_fcc6By64  = 6, /**< \brief fcc6 / 64 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   352      IfxCcu6_TimerInputClock_fcc6By128 = 7  /**< \brief fcc6 / 128 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   353  } IfxCcu6_TimerInputClock;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   354  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   355  /** \brief Selection of actual input signal for the timer inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   356   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   357  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   358  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   359      IfxCcu6_TimerInputSignal_a = 0,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   360      IfxCcu6_TimerInputSignal_b = 1,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   361      IfxCcu6_TimerInputSignal_c = 2,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   362      IfxCcu6_TimerInputSignal_d = 3,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   363      IfxCcu6_TimerInputSignal_e = 0,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   364      IfxCcu6_TimerInputSignal_f = 1,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   365      IfxCcu6_TimerInputSignal_g = 2,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   366      IfxCcu6_TimerInputSignal_h = 3   /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   367  } IfxCcu6_TimerInputSignal;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   368  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   369  /** \brief Timer (T12 / T13) run status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   370   * Definition in Ifx_CCU.TCTR0.B.T12R and Ifx_CCU.TCTR0.B.T13R
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   371   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   373  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   374      IfxCcu6_TimerRunStatus_stopped = 0,  /**< \brief Timer T1x is stopped. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   375      IfxCcu6_TimerRunStatus_running = 1   /**< \brief Timer T1x is running. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   376  } IfxCcu6_TimerRunStatus;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   377  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   378  /** \brief Defines how the trap flag TRPF can be cleared after the trap input condition is no longer valid (either by CTRAP = 1 or by TRPPEN = 0)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   379   * Definition in Ifx_CCU.TRPCTR.B.TRPM2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   380   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   381  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   382  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   383      IfxCcu6_TrapMode_automatic = 0,  /**< \brief Bit TRPF is cleared by HW */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   384      IfxCcu6_TrapMode_manual    = 1   /**< \brief Bit TRPF stays 0, It has to be cleared by SW by writing
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   385                                        * ISR.RTRPF = 1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   386  } IfxCcu6_TrapMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   387  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   388  /** \brief Defines the behavior of the selected outputs when leaving the trap state, after the trap condition has become inactive again\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   389   * Definition in Ifx_CCU.TRPCTR.B.TRPMx (x = 0, 1)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   390   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   391  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   392  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   393      IfxCcu6_TrapState_t12Sync   = 0, /**< \brief The trap state is left when a zero-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   394                                        * of T12 (while counting up) is detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   395      IfxCcu6_TrapState_t13Sync   = 1, /**< \brief The trap state is left when a zeromatch
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   396                                        * of T13 is detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   397      IfxCcu6_TrapState_immediate = 3  /**< \brief The trap state is left immediately without any synchronization to T12 or T13 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   398  } IfxCcu6_TrapState;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   399  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   400  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   401  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   402  /** \addtogroup IfxLld_Ccu6_Std_Operative
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   403   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   404  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   405  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   406  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   407  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   408  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   409  /** \brief Clears the counters of the Timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   410   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   411   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   412   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   413   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   414   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   415  IFX_INLINE void IfxCcu6_clearCounter(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   416  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   417  /** \brief Clears all the three dead-time counter channels to zero.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   418   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   419   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   420   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   421  IFX_INLINE void IfxCcu6_clearDeadTimeCounters(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   422  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   423  /** \brief Clears the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   424   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   425   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   426   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   427   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   428  IFX_INLINE void IfxCcu6_clearInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   429  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   430  /** \brief Clears the T12  One notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   431   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   432   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   433   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   434  IFX_INLINE void IfxCcu6_clearT12OneNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   435  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   436  /** \brief Clears the T12  period notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   437   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   438   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   439   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   440  IFX_INLINE void IfxCcu6_clearT12PeriodNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   441  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   442  /** \brief Clears the T13  compare notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   443   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   444   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   445   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   446  IFX_INLINE void IfxCcu6_clearT13CompareNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   447  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   448  /** \brief Returns the Timer pointer
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   449   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   450   * \return Timer pointer
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   451   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   452  IFX_INLINE volatile uint32 *IfxCcu6_getT12TimerPointer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   453  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   454  /** \brief Returns the status of module enabled or disabled
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   455   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   456   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   457   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   458  IFX_INLINE boolean IfxCcu6_isModuleEnabled(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   459  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   460  /** \brief Returns the status of T12 one notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   461   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   462   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   463   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   464  IFX_INLINE boolean IfxCcu6_isT12OneNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   465  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   466  /** \brief Returns the status of T12 period notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   467   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   468   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   469   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   470  IFX_INLINE boolean IfxCcu6_isT12PeriodNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   471  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   472  /** \brief Returns the status of T13 compare notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   473   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   474   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   475   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   476  IFX_INLINE boolean IfxCcu6_isT13CompareNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   477  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   478  /** \brief Sets the input event leading to a counting action of Timers (T12 / T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   479   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   480   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   481   * \param mode Input event leading to a counting action of the timer (T12 / T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   482   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   483   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   484  IFX_INLINE void IfxCcu6_setCountingInputMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_CountingInputMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   485  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   486  /** \brief Sets the current hall pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   487   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   488   * \param pattern Current hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   489   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   490   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   491  IFX_INLINE void IfxCcu6_setCurrentHallPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   492  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   493  /** \brief Sets the delay between switching from the passive state to the active state of the selected outputs (dead time)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   494   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   495   * \param value Value of the dead time to be induced
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   496   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   497   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   498  IFX_INLINE void IfxCcu6_setDeadTimeValue(Ifx_CCU6 *ccu6, uint8 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   499  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   500  /** \brief Sets the expected hall pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   501   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   502   * \param pattern Expected hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   503   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   504   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   505  IFX_INLINE void IfxCcu6_setExpectedHallPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   506  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   507  /** \brief Sets the event of signal T1xHR that can set the run bit T1xR by HW
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   508   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   509   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   510   * \param mode External trigger mode
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   511   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   512   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   513  IFX_INLINE void IfxCcu6_setExternalRunMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ExternalTriggerMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   514  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   515  /** \brief Sets source for the sampling of the Hall input pattern and the comparison to the current and the expected Hall pattern bit fields
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   516   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   517   * \param mode Hall sensor input trigger event
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   518   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   519   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   520  IFX_INLINE void IfxCcu6_setHallSensorTriggerMode(Ifx_CCU6 *ccu6, IfxCcu6_HallSensorTriggerMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   521  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   522  /** \brief Sets the input clock for timers (T12 or T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   523   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   524   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   525   * \param frequency Input clock for timers (T12 or T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   526   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   527   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   528  IFX_INLINE void IfxCcu6_setInputClockFrequency(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_TimerInputClock frequency);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   529  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   530  /** \brief Sets the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   531   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   532   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   533   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   534   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   535  IFX_INLINE void IfxCcu6_setInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   536  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   537  /** \brief Sets the output pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   538   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   539   * \param pattern Output pattern for the multichannel mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   540   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   541   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   542  IFX_INLINE void IfxCcu6_setMultiChannelPwmPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   543  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   544  /** \brief Sets the trigger request source (next multi-channel event) for the shadow transfer MCM_ST from MCMPS to MCMP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   545   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   546   * \param mode Trigger request source (next multi-channel event) for the shadow transfer MCM_ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   547   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   548   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   549  IFX_INLINE void IfxCcu6_setMultiChannelSwitchingMode(Ifx_CCU6 *ccu6, IfxCcu6_MultiChannelSwitchingSelect mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   550  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   551  /** \brief Sets the synchronization mechanism of the shadow transfer event MCM_ST\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   552   * if it has been requested before (flag R set by an event selected by SWSEL) and if MCMEN = 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   553   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   554   * \param sync Synchronization mechanism of the shadow transfer event MCM_ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   555   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   556   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   557  IFX_INLINE void IfxCcu6_setMultiChannelSwitchingSync(Ifx_CCU6 *ccu6, IfxCcu6_MultiChannelSwitchingSync sync);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   558  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   559  /** \brief Sets the state of the corresponding compare channel, that is considered to be the passive state
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   560   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   561   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   562   * \param state FALSE: passive state when CC6xST == 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   563   * TRUE : passive state when CC6xST == 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   564   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   565   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   566  IFX_INLINE void IfxCcu6_setOutputPassiveState(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut, boolean state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   567  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   568  /** \brief Enables / Disables the single shot mode of Timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   569   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   570   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   571   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   573   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   574  IFX_INLINE void IfxCcu6_setSingleShotModeEnable(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   575  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   576  /** \brief Sets the operating mode of the Timer12 capture/compare channels
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   577   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   578   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   579   * \param mode The operating mode for the T12 channels
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   580   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   581   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   582  IFX_INLINE void IfxCcu6_setT12ChannelMode(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, IfxCcu6_T12ChannelMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   583  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   584  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   585   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   586   * \param mode Operating mode of Timer 12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   587   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   588   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   589  IFX_INLINE void IfxCcu6_setT12CountMode(Ifx_CCU6 *ccu6, IfxCcu6_T12CountMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   590  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   591  /** \brief Sets the 16-bit counter value of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   592   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   593   * \param value Counter value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   595   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   596  IFX_INLINE void IfxCcu6_setT12CounterValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   597  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   598  /** \brief Sets the period value that leads Timer12 counter value to a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   599   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   600   * \param value Period value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   601   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   602   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   603  IFX_INLINE void IfxCcu6_setT12PeriodValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   604  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   605  /** \brief Sets the 16-bit compare value of Timer13 (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   606   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   607   * \param value Compare value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   609   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   610  IFX_INLINE void IfxCcu6_setT13CompareValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   611  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   612  /** \brief Sets the 16-bit counter value of Timer13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   613   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   614   * \param value counter value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   616   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   617  IFX_INLINE void IfxCcu6_setT13CounterValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   618  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   619  /** \brief Sets the period value that leads Timer13 counter value to a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   620   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   621   * \param value period value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   622   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   623   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   624  IFX_INLINE void IfxCcu6_setT13PeriodValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   625  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   626  /** \brief Sets the Timer13 trigger event direction
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   627   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   628   * \param direction T13 trigger event direction
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   630   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   631  IFX_INLINE void IfxCcu6_setT13TriggerEventDirection(Ifx_CCU6 *ccu6, IfxCcu6_T13TriggerDirection direction);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   632  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   633  /** \brief Sets the trigger event to start Timer13 (automatic set of T13R for synchronization to Timer12 compare signals)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   634   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   635   * \param mode The trigger event to start T13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   636   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   637   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   638  IFX_INLINE void IfxCcu6_setT13TriggerEventMode(Ifx_CCU6 *ccu6, IfxCcu6_T13TriggerEvent mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   639  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   640  /** \brief Sets the mode of clearing the trap flag TRPF after the trap input condition is no longer valid
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   641   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   642   * \param mode Trap mode selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   643   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   644   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   645  IFX_INLINE void IfxCcu6_setTrapMode(Ifx_CCU6 *ccu6, IfxCcu6_TrapMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   646  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   647  /** \brief Sets behaviour of the selected outputs when leaving the trap state after the trap condition has become inactive again.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   648   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   649   * \param state Trap state selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   650   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   651   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   652  IFX_INLINE void IfxCcu6_setTrapState(Ifx_CCU6 *ccu6, IfxCcu6_TrapState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   653  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   654  /** \brief starts the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   655   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   656   * \param t12 Timer12 start choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   657   * \param t13 Timer13 start choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   658   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   659   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   660  IFX_INLINE void IfxCcu6_startTimer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   661  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   662  /** \brief starts the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   663   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   664   * \param t12 Timer12 stop choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   665   * \param t13 Timer13 stop choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   666   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   667   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   668  IFX_INLINE void IfxCcu6_stopTimer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   669  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   670  /** \brief Updates the hall pattern (current hall, expected hall, moduleation output), in a single write
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   671   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   672   * \param currentHall Current hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   673   * \param expectedHall Expected hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   674   * \param output Output pattern for the multichannel mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   675   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   676   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   677  IFX_INLINE void IfxCcu6_updateHallPattern(Ifx_CCU6 *ccu6, uint8 currentHall, uint8 expectedHall, uint8 output);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   678  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   679  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   680  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   681  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   682  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   683  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   684   * \param ccu6 Specifies Ccu6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   685   * \param outputLine Output Line
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   686   * \param selectedTrigger Trigger selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   687   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   688   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   689  IFX_EXTERN void IfxCcu6_connectTrigger(Ifx_CCU6 *ccu6, IfxCcu6_TrigOut outputLine, IfxCcu6_TrigSel selectedTrigger);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   690  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   691  /** \brief Routes the interrupt node pointer to the selected service requests
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   692   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   693   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   694   * \param serviceRequest Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   696   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   697  IFX_EXTERN void IfxCcu6_routeInterruptNode(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source, IfxCcu6_ServiceRequest serviceRequest);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   698  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   699  /** \brief Sets the passive state level of the PWM outputs of the module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   700   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   701   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   702   * \param state FALSE: The passive level is 0.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   703   * TRUE : The passive level is 1.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   704   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   705   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   706  IFX_EXTERN void IfxCcu6_setOutputPassiveLevel(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut, boolean state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   707  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   708  /** \brief Sets software-control (independent set and clear conditions) for the Timer12 channel state bits CC6xST (x=0,1,2)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   709   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   710   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   711   * \param state capture/compare state selection (set / clear / toggle)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   712   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   713   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   714  IFX_EXTERN void IfxCcu6_setT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, IfxCcu6_CaptureCompareState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   715  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   716  /** \brief Sets the 16-bit compare value of Timer12 (writes into shadow registers)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   717   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   718   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   719   * \param value Compare value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   720   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   721   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   722  IFX_EXTERN void IfxCcu6_setT12CompareValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   723  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   724  /** \brief Sets the frequency and clock input of the Timer 12.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   725   * Caution: If desired frequency cannot achieved (by successive divisions by 2) :
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   726   * Then the nearest frequency value is set ( >= desired value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   727   * The resulting frequency is captured in the handler element : CaptureFrequency.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   728   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   729   * \param frequency Requested timer frequency in Hz
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   730   * \param period period value to be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   731   * \param countMode Counting mode of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   732   * \return Zero, if the function failed to fulfill requested frequency and resolution\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   733   * Positive, if the function can find settings close to the requested frequency and resolution above the requested
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   734   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   735  IFX_EXTERN float32 IfxCcu6_setT12Frequency(Ifx_CCU6 *ccu6, float32 frequency, Ifx_TimerValue period, IfxCcu6_T12CountMode countMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   736  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   737  /** \brief selects the actual input signal for the timer inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   738   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   739   * \param extInput External input signal for the Timer 12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   740   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   741   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   742  IFX_EXTERN void IfxCcu6_setT12InputSignal(Ifx_CCU6 *ccu6, IfxCcu6_T12hr_In *extInput);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   743  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   744  /** \brief Sets software-control (independent set and clear conditions) for the Timer13 channel state bits CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   745   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   746   * \param state capture/compare state selection (set / clear / toggle)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   747   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   748   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   749  IFX_EXTERN void IfxCcu6_setT13CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_CaptureCompareState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   750  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   751  /** \brief Sets the frequency and clock input of the Timer 13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   752   * Caution: If desired frequency cannot achieved (by successive divisions by 2) :
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   753   * Then the nearest frequency value is set ( >= desired value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   754   * The resulting frequency is captured in the handler element : captureFrequency.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   755   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   756   * \param frequency Requested timer frequency in Hz
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   757   * \param period period value to be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   758   * \return Zero, if the function failed to fulfill requested frequency and resolution\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   759   * Positive, if the function can find settings close to the requested frequency and resolution above the requested
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   760   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   761  IFX_EXTERN float32 IfxCcu6_setT13Frequency(Ifx_CCU6 *ccu6, float32 frequency, Ifx_TimerValue period);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   762  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   763  /** \brief selects the actual input signal for the timer inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   764   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   765   * \param extInput External input signal for the Timer 13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   766   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   767   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   768  IFX_EXTERN void IfxCcu6_setT13InputSignal(Ifx_CCU6 *ccu6, IfxCcu6_T13hr_In *extInput);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   769  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   770  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   771  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   772  /** \addtogroup IfxLld_Ccu6_Std_Utility
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   773   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   774  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   775  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   776  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   777  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   778  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   779  /** \brief Indicate the status of the dead time generation for each compare channel (0, 1, 2) of timer T12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   780   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   781   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   782   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   783   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   784  IFX_INLINE boolean IfxCcu6_getDeadTimeStatus(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   785  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   786  /** \brief Returns the value of the input Hall pattern of the Timer12 capture/compare channels CC6POS6x (x = 0, 1, 2)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   787   * that has been compared to the current and expected value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   788   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   789   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   790   * \return Status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   791   * TRUE : The input CCPOSx has been sampled as 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   792   * FALSE : The input CCPOSx has been sampled as 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   793   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   794  IFX_INLINE boolean IfxCcu6_getHallPatternSampleState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   795  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   796  /** \brief Gets the status of the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   797   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   798   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   799   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   800   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   801  IFX_INLINE boolean IfxCcu6_getInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   802  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   803  /** \brief indicates if the multi-channel mode functionality is available
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   804   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   805   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   806   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   807  IFX_INLINE boolean IfxCcu6_getMultiChannelModeAvailabilityStatus(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   808  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   809  /** \brief Gets the status of the shadow transfer request from MCMPS to MCMP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   810   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   811   * \return Status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   812   * FALSE: A shadow transfer MCM_ST is not requested\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   813   * TRUE:  A shadow transfer MCM_ST is requested, but has not yet been executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   814   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   815  IFX_INLINE boolean IfxCcu6_getMultiChannelPWMPatternShadowTransferStatus(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   816  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   817  /** \brief Returns the Timer (T12 / T13) shadow transfer enable status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   818   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   819   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   820   * \return Status (TRUE: enable / FALSE: disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   821   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   822  IFX_INLINE boolean IfxCcu6_getShadowTransferStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   823  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   824  /** \brief Returns the state of the Timer12 capture/compare channels CC6xST (x = 0, 1, 2)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   825   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   826   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   827   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   828   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   829  IFX_INLINE boolean IfxCcu6_getT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   830  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   831  /** \brief Returns the current counting direction of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   832   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   833   * \return direction (up / down)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   834   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   835  IFX_INLINE IfxCcu6_T12CountDirection IfxCcu6_getT12CountDirection(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   836  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   837  /** \brief Returns the state of the Timer13 capture/compare channel CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   838   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   839   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   840   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   841  IFX_INLINE boolean IfxCcu6_getT13CaptureCompareState(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   842  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   843  /** \brief indicates the Timer blocks (T12 / T13) availability
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   844   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   845   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   846   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   847   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   848  IFX_INLINE boolean IfxCcu6_getTimerAvailabilityStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   849  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   850  /** \brief Returns the Timer (T12 / T13) run status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   851   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   852   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   853   * \return Status (stopped / running)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   854   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   855  IFX_INLINE IfxCcu6_TimerRunStatus IfxCcu6_getTimerRunStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   856  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   857  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   858   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   859   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   860   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   861   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   862   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   863  IFX_INLINE boolean IfxCcu6_isModuleSuspended(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   864  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   865  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   866   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   867   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   868   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   869   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   870   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   871  IFX_INLINE void IfxCcu6_setSuspendMode(Ifx_CCU6 *ccu6, IfxCcu6_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   872  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   873  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   874  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   875  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   876  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   877  /** \brief Returns the module index of the selected CCU6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   878   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   879   * \return CCU6 module register address
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   880   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   881  IFX_EXTERN Ifx_CCU6 *IfxCcu6_getAddress(IfxCcu6_Index ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   882  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   883  /** \brief Returns the capture register value of the selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   884   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   885   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   886   * \return current value of the capture register of a selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   887   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   888  IFX_EXTERN uint32 IfxCcu6_getCaptureRegisterValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   889  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   890  /** \brief Returns the capture shadow register value of the selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   891   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   892   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   893   * \return current value of the capture shadow register of a selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   894   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   895  IFX_EXTERN uint32 IfxCcu6_getCaptureShadowRegisterValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   896  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   897  /** \brief Returns CCU6 index
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   898   * \param ccu6 Specifies the pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   899   * \return Returns index. returns -1 in case of unknown index
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   900   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   901  IFX_EXTERN IfxCcu6_Index IfxCcu6_getIndex(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   902  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   903  /** \brief Returns the service request register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   904   * \param ccu6 Specifies Ccu6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   905   * \param serviceRequest Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   906   * \return The service request register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   907   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   908  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxCcu6_getSrcAddress(Ifx_CCU6 *ccu6, IfxCcu6_ServiceRequest serviceRequest);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   909  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   910  /** \brief Returns the current value of the timer register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   911   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   912   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   913   * \return current value of the timer register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   914   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   915  IFX_EXTERN uint32 IfxCcu6_readTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   916  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   917  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   918  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   919  /** \addtogroup IfxLld_Ccu6_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   920   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   921  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   922  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   923  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   924  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   925  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   926  /** \brief Clears all Interrupt flags
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   927   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   928   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   929   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   930  IFX_INLINE void IfxCcu6_clearAllInterruptStatusFlags(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   931  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   932  /** \brief Disables the additional prescaler of 1/256 can be enabled for the prescaler of T12 or T13 to support higher clock frequencies
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   933   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   934   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   935   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   936   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   937  IFX_INLINE void IfxCcu6_disableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   938  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   939  /** \brief Disables the dead time generation for each compare channel (0, 1, 2) of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   940   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   941   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   942   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   943   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   944  IFX_INLINE void IfxCcu6_disableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   945  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   946  /** \brief Disables the delay of the source signal for the sampling of the Hall input pattern (selected by HSYNC)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   947   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   948   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   949   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   950  IFX_INLINE void IfxCcu6_disableDelayBypass(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   951  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   952  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   953   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   954   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   955   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   956   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   957  IFX_INLINE void IfxCcu6_disableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   958  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   959  /** \brief Sets multi channel mode unavailable, A write access to MCMOUTS is ignored
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   960   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   961   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   962   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   963  IFX_INLINE void IfxCcu6_disableMultiChannelMode(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   964  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   965  /** \brief Disables shadow transfers of the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   966   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   967   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   968   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   969   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   970   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   971  IFX_INLINE void IfxCcu6_disableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   972  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   973  /** \brief Disables the single shot-mode of Timers (T12 T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   974   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   975   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   976   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   977   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   978  IFX_INLINE void IfxCcu6_disableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   979  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   980  /** \brief Disables the Inversion of T13 signal for the modulation of the CC6x and COUT6x (x = 0, 1, 2) signals\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   981   * T13 output CC63_O is equal to CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   982   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   983   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   984   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   985  IFX_INLINE void IfxCcu6_disableT13InvertedModulation(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   986  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   987  /** \brief Sets Timer12 block unavailable, A write access to T12PR is ignored
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   988   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   989   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   990   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   991   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   992  IFX_INLINE void IfxCcu6_disableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   993  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   994  /** \brief Disables the trap functionality for the corresponding output signals
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   995   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   996   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   997   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   998   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   999  IFX_INLINE void IfxCcu6_disableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1000  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1001  /** \brief Disables the input (pin) function for the trap generation
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1002   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1003   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1004   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1005  IFX_INLINE void IfxCcu6_disableTrapPin(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1006  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1007  /** \brief Enables the additional prescaler of 1/256 can be enabled for the prescaler of T12 or T13 to support higher clock frequencies
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1008   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1009   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1010   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1011   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1012  IFX_INLINE void IfxCcu6_enableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1013  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1014  /** \brief Sets the single shot-mode of Timers (T12, T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1015   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1016   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1017   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1018   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1019   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1020  IFX_INLINE void IfxCcu6_enableCountEvent(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1021  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1022  /** \brief Enables the dead time generation for each compare channel (0, 1, 2) of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1023   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1024   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1025   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1026   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1027  IFX_INLINE void IfxCcu6_enableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1028  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1029  /** \brief Enables the delay of the source signal for the sampling of the Hall input pattern (selected by HSYNC) by the Dead-Time Counter 0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1030   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1031   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1032   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1033  IFX_INLINE void IfxCcu6_enableDelayBypass(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1034  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1035  /** \brief Sets HP_ST immediately to update bit fields EXPH and CURH by EXPHS and CURHS
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1036   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1037   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1038   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1039  IFX_INLINE void IfxCcu6_enableHallPatternShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1040  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1041  /** \brief Enables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1042   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1043   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1044   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1045   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1046  IFX_INLINE void IfxCcu6_enableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1047  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1048  /** \brief Sets multi channel mode available, A write access to MCMOUTS is executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1049   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1050   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1051   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1052  IFX_INLINE void IfxCcu6_enableMultiChannelMode(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1053  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1054  /** \brief Enables the Multi Channel Mode Availability
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1055   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1056   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1057   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1058  IFX_INLINE void IfxCcu6_enableMultiChannelModeAvailability(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1059  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1060  /** \brief Sets MCM_ST immediately to update bit field MCMP by the value of MCMPS.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1061   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1062   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1063   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1064  IFX_INLINE void IfxCcu6_enableMultiChannelPwmPatternShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1065  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1066  /** \brief Enables the shadow transfer T12_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1067   * becomes set while a T12 one match is detected while counting down
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1068   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1069   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1070   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1071  IFX_INLINE void IfxCcu6_enableMultiChannelT12DowncountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1072  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1073  /** \brief Enables the shadow transfer T12_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1074   * becomes set while a T12 period match is detected while counting up
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1075   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1076   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1077   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1078  IFX_INLINE void IfxCcu6_enableMultiChannelT12UpcountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1079  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1080  /** \brief Enables the shadow transfer T13_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1081   * becomes set while a T13 period match is detected
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1082   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1083   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1084   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1085  IFX_INLINE void IfxCcu6_enableMultiChannelT13UpcountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1086  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1087  /** \brief Enables shadow transfers of the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1088   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1089   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1090   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1091   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1092   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1093  IFX_INLINE void IfxCcu6_enableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1094  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1095  /** \brief Enables the single shot-mode of Timers (T12 T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1096   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1097   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1098   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1099   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1100  IFX_INLINE void IfxCcu6_enableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1101  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1102  /** \brief Enables the Inversion of T13 signal for the modulation of the CC6x and COUT6x (x = 0, 1, 2) signals\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1103   * T13 output CC63_O is equal to CC63ST.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1104   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1105   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1106   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1107  IFX_INLINE void IfxCcu6_enableT13InvertedModulation(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1108  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1109  /** \brief Sets Timer12 block available, A write access to T12PR is executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1110   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1111   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1112   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1113   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1114  IFX_INLINE void IfxCcu6_enableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1115  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1116  /** \brief Enables the trap functionality for the corresponding output signals
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1117   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1118   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1119   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1120   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1121  IFX_INLINE void IfxCcu6_enableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1122  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1123  /** \brief Enables the input (pin) function for the trap generation
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1124   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1125   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1126   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1127  IFX_INLINE void IfxCcu6_enableTrapPin(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1128  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1129  /** \brief selects the actual input signal for the capture compare inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1130   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1131   * \param input Input selection, ( CC6x capture input / CTRAP input / CCPOSx input  )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1132   * \param signal selection of actual input signal for the module inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1133   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1134   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1135  IFX_INLINE void IfxCcu6_setCaptureCompareInputSignal(Ifx_CCU6 *ccu6, IfxCcu6_CaptureCompareInput input, IfxCcu6_CaptureCompareInputSignal signal);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1136  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1137  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1138  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1139  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1140  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1141  /** \brief Disables the modulation of the corresponding output signal by PWM pattern generated by the timers T12 and T13.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1142   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1143   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1144   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1145   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1146   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1147  IFX_EXTERN void IfxCcu6_disableModulationOutput(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1148  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1149  /** \brief Disables the selected CCU6 kernel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1150   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1151   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1152   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1153  IFX_EXTERN void IfxCcu6_disableModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1154  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1155  /** \brief Enables the modulation of the corresponding output signal by PWM pattern generated by the timers T12 and T13.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1156   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1157   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1158   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1159   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1160   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1161  IFX_EXTERN void IfxCcu6_enableModulationOutput(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1162  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1163  /** \brief Enables the selected CCU6 kernel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1164   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1165   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1166   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1167  IFX_EXTERN void IfxCcu6_enableModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1168  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1169  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1170  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1171  /** \addtogroup IfxLld_Ccu6_Std_IO
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1172   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1173  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1174  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1175  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1176  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1177  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1178  /** \brief Initialises a CC60 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1179   * \param cc60In CC60 capture input CC60IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1180   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1181   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1182   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1183  IFX_INLINE void IfxCcu6_initCc60InPin(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1184  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1185  /** \brief Initialises a CC60 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1186   * \param cc60Out CC60 compare output CC0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1187   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1188   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1189   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1190   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1191  IFX_INLINE void IfxCcu6_initCc60OutPin(const IfxCcu6_Cc60_Out *cc60Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1192  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1193  /** \brief Initialises a CC61 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1194   * \param cc61In CC61 capture input CC61IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1195   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1196   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1197   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1198  IFX_INLINE void IfxCcu6_initCc61InPin(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1199  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1200  /** \brief Initialises a CC61 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1201   * \param cc61Out CC61 compare output CC1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1202   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1203   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1204   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1205   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1206  IFX_INLINE void IfxCcu6_initCc61OutPin(const IfxCcu6_Cc61_Out *cc61Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1207  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1208  /** \brief Initialises a CC62 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1209   * \param cc62In CC62 capture input CC62IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1210   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1211   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1212   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1213  IFX_INLINE void IfxCcu6_initCc62InPin(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1214  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1215  /** \brief Initialises a CC62 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1216   * \param cc62Out CC62 compare output CC2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1217   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1218   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1219   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1220   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1221  IFX_INLINE void IfxCcu6_initCc62OutPin(const IfxCcu6_Cc62_Out *cc62Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1222  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1223  /** \brief Initialises a CCPOS0 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1224   * \param ccpos0 CC60 capture input CCPOS0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1225   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1228  IFX_INLINE void IfxCcu6_initCcpos0Pin(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1229  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1230  /** \brief Initialises a CCPOS1 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1231   * \param ccpos1 CC61 capture input CCPOS1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1232   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1233   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1235  IFX_INLINE void IfxCcu6_initCcpos1Pin(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1236  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1237  /** \brief Initialises a CCPOS0 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1238   * \param ccpos2 CC62 capture input CCPOS2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1239   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1242  IFX_INLINE void IfxCcu6_initCcpos2Pin(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1243  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1244  /** \brief Initialises a COUT60 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1245   * \param cout60 CC60 compare output COUT0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1246   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1247   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1248   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1249   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1250  IFX_INLINE void IfxCcu6_initCout60Pin(const IfxCcu6_Cout60_Out *cout60, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1251  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1252  /** \brief Initialises a COUT61 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1253   * \param cout61 CC61 compare output COUT1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1254   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1255   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1256   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1257   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1258  IFX_INLINE void IfxCcu6_initCout61Pin(const IfxCcu6_Cout61_Out *cout61, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1259  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1260  /** \brief Initialises a COUT62 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1261   * \param cout62 CC62 compare output COUT2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1262   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1263   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1264   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1265   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1266  IFX_INLINE void IfxCcu6_initCout62Pin(const IfxCcu6_Cout62_Out *cout62, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1267  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1268  /** \brief Initialises a COUT63 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1269   * \param cout63 CC63 compare output COUT3
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1270   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1271   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1272   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1273   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1274  IFX_INLINE void IfxCcu6_initCout63Pin(const IfxCcu6_Cout63_Out *cout63, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1275  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1276  /** \brief Initialises a CTRAP input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1277   * \param ctrap CTRAP input
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1278   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1279   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1280   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1281  IFX_INLINE void IfxCcu6_initCtrapPin(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1282  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1283  /** \brief Initialises a T12HR input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1284   * \param t12hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1285   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1286   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1287   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1288  IFX_INLINE void IfxCcu6_initT12hrPin(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1289  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1290  /** \brief Initialises a T13HR input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1291   * \param t13hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1292   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1293   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1294   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1295  IFX_INLINE void IfxCcu6_initT13hrPin(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1296  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1297  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1298  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1299  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1300  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1301  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1302  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1303  /** \brief Provides functionality for both setting of CC60 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1304   * \param cc60In CC60 capture input CC60IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1305   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1306   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1307   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1308   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1309  IFX_INLINE void IfxCcu6_initCc60InPinWithPadLevel(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1310  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1311  /** \brief Provides functionality for both setting of CC61 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1312   * \param cc61In CC61 capture input CC61IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1313   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1314   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1315   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1316   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1317  IFX_INLINE void IfxCcu6_initCc61InPinWithPadLevel(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1318  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1319  /** \brief Provides functionality for both setting of CC62 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1320   * \param cc62In CC62 capture input CC62IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1321   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1322   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1323   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1324   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1325  IFX_INLINE void IfxCcu6_initCc62InPinWithPadLevel(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1326  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1327  /** \brief Provides functionality for both setting of CCPOS0 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1328   * \param ccpos0 CC60 capture input CCPOS0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1329   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1330   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1331   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1332   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1333  IFX_INLINE void IfxCcu6_initCcpos0PinWithPadLevel(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1334  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1335  /** \brief Provides functionality for both setting of CCPOS1 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1336   * \param ccpos1 CC61 capture input CCPOS1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1337   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1338   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1339   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1340   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1341  IFX_INLINE void IfxCcu6_initCcpos1PinWithPadLevel(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1342  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1343  /** \brief Provides functionality for both setting of CCPOS2 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1344   * \param ccpos2 CC62 capture input CCPOS2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1345   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1346   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1347   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1348   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1349  IFX_INLINE void IfxCcu6_initCcpos2PinWithPadLevel(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1350  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1351  /** \brief Provides functionality for both setting of CTRAP pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1352   * \param ctrap CTRAP input
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1353   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1354   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1355   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1356   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1357  IFX_INLINE void IfxCcu6_initCtrapPinWithPadLevel(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1358  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1359  /** \brief Provides functionality for both setting of T12HR pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1360   * \param t12hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1361   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1362   * \param padDriver Pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1363   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1364   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1365  IFX_INLINE void IfxCcu6_initT12hrPinWithPadLevel(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1366  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1367  /** \brief Provides functionality for both setting of T13HR pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1368   * \param t13hrIn Timer 13 HR input T13HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1369   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1370   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1371   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1372   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1373  IFX_INLINE void IfxCcu6_initT13hrPinWithPadLevel(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1374  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1375  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1376   * \param ccu6 pointer to CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1377   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1378   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1379   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1380  IFX_INLINE void IfxCcu6_setSleepMode(Ifx_CCU6 *ccu6, IfxCcu6_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1381  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1382  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1383  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1384  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1385  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1386  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1387   * \param ccu6 pointer to ccu6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1388   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1389   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1390  IFX_EXTERN void IfxCcu6_resetModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1391  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1392  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1393  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1394  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1395  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1396  IFX_INLINE void IfxCcu6_clearAllInterruptStatusFlags(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1397  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1398      ccu6->ISR.U = 0xFFFF;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1399  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1400  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1401  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1402  IFX_INLINE void IfxCcu6_clearCounter(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1403  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1404      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1405      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1406      tctr4.B.T12RES = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1407      tctr4.B.T13RES = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1408      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1409  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1410  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1411  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1412  IFX_INLINE void IfxCcu6_clearDeadTimeCounters(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1413  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1414      ccu6->TCTR4.B.DTRES = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1415  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1416  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1417  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1418  IFX_INLINE void IfxCcu6_clearInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1419  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1420      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1421      ccu6->ISR.U = mask;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1422  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1423  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1424  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1425  IFX_INLINE void IfxCcu6_clearT12OneNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1426  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1427      ccu6->ISR.B.RT12OM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1428  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1429  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1430  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1431  IFX_INLINE void IfxCcu6_clearT12PeriodNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1432  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1433      ccu6->ISR.B.RT12PM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1434  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1435  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1436  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1437  IFX_INLINE void IfxCcu6_clearT13CompareNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1438  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1439      ccu6->ISR.B.RT13CM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1440  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1441  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1442  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1443  IFX_INLINE void IfxCcu6_disableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1444  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1445      uint32 shift = ((timer * 8) + 3);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1446      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1447      ccu6->TCTR0.U = ccu6->TCTR0.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1448  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1449  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1450  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1451  IFX_INLINE void IfxCcu6_disableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1452  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1453      uint32 shift = (8 + channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1454      uint32 mask  = (1 << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1455      ccu6->T12DTC.U = ccu6->T12DTC.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1456  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1457  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1458  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1459  IFX_INLINE void IfxCcu6_disableDelayBypass(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1460  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1461      ccu6->T12MSEL.B.DBYP = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1462  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1463  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1464  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1465  IFX_INLINE void IfxCcu6_disableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1466  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1467      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1468      ccu6->IEN.U = ccu6->IEN.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1469  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1470  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1471  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1472  IFX_INLINE void IfxCcu6_disableMultiChannelMode(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1473  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1474      ccu6->MODCTR.B.MCMEN = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1475  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1476  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1477  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1478  IFX_INLINE void IfxCcu6_disableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1479  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1480      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1481      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1482      tctr4.B.T12STD = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1483      tctr4.B.T13STD = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1484      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1485  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1486  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1487  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1488  IFX_INLINE void IfxCcu6_disableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1489  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1490      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1491      ccu6->TCTR2.U = ccu6->TCTR2.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1492  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1493  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1494  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1495  IFX_INLINE void IfxCcu6_disableT13InvertedModulation(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1496  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1497      ccu6->CMPSTAT.B.T13IM = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1498  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1499  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1500  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1501  IFX_INLINE void IfxCcu6_disableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1502  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1503      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1504      ccu6->MCFG.U = ccu6->MCFG.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1505  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1506  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1507  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1508  IFX_INLINE void IfxCcu6_disableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1509  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1510      uint32 shift = (8 + channelOut);    // offset at location TRPCTR.8 for output CC60
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1511      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1512      ccu6->TRPCTR.U = ccu6->TRPCTR.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1513  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1514  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1515  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1516  IFX_INLINE void IfxCcu6_disableTrapPin(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1517  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1518      ccu6->TRPCTR.B.TRPPEN = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1519  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1520  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1521  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1522  IFX_INLINE void IfxCcu6_enableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1523  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1524      uint32 shift = ((timer * 8) + 3);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1525      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1526      ccu6->TCTR0.U = ccu6->TCTR0.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1527  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1528  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1529  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1530  IFX_INLINE void IfxCcu6_enableCountEvent(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1531  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1532      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1533      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1534      tctr4.B.T12CNT = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1535      tctr4.B.T13CNT = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1536      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1537  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1538  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1539  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1540  IFX_INLINE void IfxCcu6_enableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1541  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1542      uint32 shift = (8 + channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1543      uint32 mask  = (1 << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1544      ccu6->T12DTC.U = ccu6->T12DTC.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1545  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1546  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1547  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1548  IFX_INLINE void IfxCcu6_enableDelayBypass(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1549  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1550      ccu6->T12MSEL.B.DBYP = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1551  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1552  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1553  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1554  IFX_INLINE void IfxCcu6_enableHallPatternShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1555  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1556      ccu6->MCMOUTS.B.STRHP = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1557  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1558  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1559  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1560  IFX_INLINE void IfxCcu6_enableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1561  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1562      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1563      ccu6->IEN.U = ccu6->IEN.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1564  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1565  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1566  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1567  IFX_INLINE void IfxCcu6_enableMultiChannelMode(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1568  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1569      ccu6->MODCTR.B.MCMEN = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1570  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1571  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1572  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1573  IFX_INLINE void IfxCcu6_enableMultiChannelModeAvailability(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1574  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1575      ccu6->MCFG.B.MCM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1576  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1577  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1578  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1579  IFX_INLINE void IfxCcu6_enableMultiChannelPwmPatternShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1580  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1581      ccu6->MCMOUTS.B.STRMCM = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1582  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1583  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1584  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1585  IFX_INLINE void IfxCcu6_enableMultiChannelT12DowncountingShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1586  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1587      ccu6->MCMCTR.B.STE12D = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1588  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1589  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1590  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1591  IFX_INLINE void IfxCcu6_enableMultiChannelT12UpcountingShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1592  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1593      ccu6->MCMCTR.B.STE12U = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1594  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1595  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1596  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1597  IFX_INLINE void IfxCcu6_enableMultiChannelT13UpcountingShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1598  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1599      ccu6->MCMCTR.B.STE13U = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1600  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1601  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1602  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1603  IFX_INLINE void IfxCcu6_enableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1604  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1605      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1606      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1607      tctr4.B.T12STR = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1608      tctr4.B.T13STR = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1609      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1610  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1611  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1612  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1613  IFX_INLINE void IfxCcu6_enableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1614  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1615      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1616      ccu6->TCTR2.U = ccu6->TCTR2.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1617  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1618  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1619  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1620  IFX_INLINE void IfxCcu6_enableT13InvertedModulation(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1621  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1622      ccu6->CMPSTAT.B.T13IM = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1623  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1624  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1625  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1626  IFX_INLINE void IfxCcu6_enableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1627  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1628      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1629      ccu6->MCFG.U = ccu6->MCFG.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1630  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1631  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1632  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1633  IFX_INLINE void IfxCcu6_enableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1634  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1635      uint32 shift = (8 + channelOut);    // offset at location TRPCTR.8 for output CC60
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1636      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1637      ccu6->TRPCTR.U = ccu6->TRPCTR.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1638  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1639  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1640  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1641  IFX_INLINE void IfxCcu6_enableTrapPin(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1642  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1643      ccu6->TRPCTR.B.TRPPEN = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1644  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1645  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1646  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1647  IFX_INLINE boolean IfxCcu6_getDeadTimeStatus(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1648  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1649      uint32 shift = (12 + channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1650      uint32 mask  = 1 << shift;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1651      return (ccu6->T12DTC.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1652  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1653  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1654  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1655  IFX_INLINE boolean IfxCcu6_getHallPatternSampleState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1656  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1657      uint32 shift = (channel + 3);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1658      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1659      return (ccu6->CMPSTAT.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1660  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1661  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1662  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1663  IFX_INLINE boolean IfxCcu6_getInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1664  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1665      uint32 shift = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1666      return (ccu6->IS.U & shift) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1668  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1669  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1670  IFX_INLINE boolean IfxCcu6_getMultiChannelModeAvailabilityStatus(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1672      return ccu6->MCFG.B.MCM != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1674  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1675  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1676  IFX_INLINE boolean IfxCcu6_getMultiChannelPWMPatternShadowTransferStatus(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1678      return ccu6->MCMOUT.B.R != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1680  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1681  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1682  IFX_INLINE boolean IfxCcu6_getShadowTransferStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1684      uint32 shift = ((timer * 8) + 5);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1685      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1686      return (ccu6->TCTR0.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1687  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1688  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1689  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1690  IFX_INLINE boolean IfxCcu6_getT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1691  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1692      uint32 mask = (1U << channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1693      return (ccu6->CMPSTAT.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1694  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1695  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1696  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1697  IFX_INLINE IfxCcu6_T12CountDirection IfxCcu6_getT12CountDirection(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1698  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1699      return (IfxCcu6_T12CountDirection)((ccu6->TCTR0.B.CDIR) ? TRUE : FALSE);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1700  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1701  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1702  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1703  IFX_INLINE volatile uint32 *IfxCcu6_getT12TimerPointer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1704  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1705      return (volatile uint32 *)&ccu6->T12PR;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1706  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1707  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1708  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1709  IFX_INLINE boolean IfxCcu6_getT13CaptureCompareState(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1710  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1711      return ccu6->CMPSTAT.B.CC63ST != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1712  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1713  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1714  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1715  IFX_INLINE boolean IfxCcu6_getTimerAvailabilityStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1716  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1717      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1718      return (ccu6->MCFG.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1719  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1720  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1721  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1722  IFX_INLINE IfxCcu6_TimerRunStatus IfxCcu6_getTimerRunStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1723  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1724      uint32 shift = ((timer * 8) + 4);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1725      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1726      return (IfxCcu6_TimerRunStatus)((ccu6->TCTR0.U & mask) ? TRUE : FALSE);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1728  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1729  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1730  IFX_INLINE void IfxCcu6_initCc60InPin(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1732      IfxPort_setPinModeInput(cc60In->pin.port, cc60In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1733      IfxCcu6_setCaptureCompareInputSignal(cc60In->module, IfxCcu6_CaptureCompareInput_cC60, (IfxCcu6_CaptureCompareInputSignal)cc60In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1734  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1735  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1736  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1737  IFX_INLINE void IfxCcu6_initCc60InPinWithPadLevel(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1738  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1739      IfxPort_setPinModeInput(cc60In->pin.port, cc60In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1740      IfxPort_setPinPadDriver(cc60In->pin.port, cc60In->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1741      IfxCcu6_setCaptureCompareInputSignal(cc60In->module, IfxCcu6_CaptureCompareInput_cC60, (IfxCcu6_CaptureCompareInputSignal)cc60In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1742  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1743  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1744  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1745  IFX_INLINE void IfxCcu6_initCc60OutPin(const IfxCcu6_Cc60_Out *cc60Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1746  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1747      IfxPort_setPinModeOutput(cc60Out->pin.port, cc60Out->pin.pinIndex, outputMode, cc60Out->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1748      IfxPort_setPinPadDriver(cc60Out->pin.port, cc60Out->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1749  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1750  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1751  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1752  IFX_INLINE void IfxCcu6_initCc61InPin(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1753  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1754      IfxPort_setPinModeInput(cc61In->pin.port, cc61In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1755      IfxCcu6_setCaptureCompareInputSignal(cc61In->module, IfxCcu6_CaptureCompareInput_cC61, (IfxCcu6_CaptureCompareInputSignal)cc61In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1756  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1757  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1758  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1759  IFX_INLINE void IfxCcu6_initCc61InPinWithPadLevel(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1760  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1761      IfxPort_setPinModeInput(cc61In->pin.port, cc61In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1762      IfxPort_setPinPadDriver(cc61In->pin.port, cc61In->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1763      IfxCcu6_setCaptureCompareInputSignal(cc61In->module, IfxCcu6_CaptureCompareInput_cC61, (IfxCcu6_CaptureCompareInputSignal)cc61In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1764  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1765  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1766  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1767  IFX_INLINE void IfxCcu6_initCc61OutPin(const IfxCcu6_Cc61_Out *cc61Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1768  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1769      IfxPort_setPinModeOutput(cc61Out->pin.port, cc61Out->pin.pinIndex, outputMode, cc61Out->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1770      IfxPort_setPinPadDriver(cc61Out->pin.port, cc61Out->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1771  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1772  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1773  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1774  IFX_INLINE void IfxCcu6_initCc62InPin(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1775  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1776      IfxPort_setPinModeInput(cc62In->pin.port, cc62In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1777      IfxCcu6_setCaptureCompareInputSignal(cc62In->module, IfxCcu6_CaptureCompareInput_cC62, (IfxCcu6_CaptureCompareInputSignal)cc62In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1778  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1779  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1780  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1781  IFX_INLINE void IfxCcu6_initCc62InPinWithPadLevel(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1782  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1783      IfxPort_setPinModeInput(cc62In->pin.port, cc62In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1784      IfxPort_setPinPadDriver(cc62In->pin.port, cc62In->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1785      IfxCcu6_setCaptureCompareInputSignal(cc62In->module, IfxCcu6_CaptureCompareInput_cC62, (IfxCcu6_CaptureCompareInputSignal)cc62In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1786  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1787  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1788  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1789  IFX_INLINE void IfxCcu6_initCc62OutPin(const IfxCcu6_Cc62_Out *cc62Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1790  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1791      IfxPort_setPinModeOutput(cc62Out->pin.port, cc62Out->pin.pinIndex, outputMode, cc62Out->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1792      IfxPort_setPinPadDriver(cc62Out->pin.port, cc62Out->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1794  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1795  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1796  IFX_INLINE void IfxCcu6_initCcpos0Pin(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1798      IfxPort_setPinModeInput(ccpos0->pin.port, ccpos0->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1799      IfxCcu6_setCaptureCompareInputSignal(ccpos0->module, IfxCcu6_CaptureCompareInput_cCPOS0, (IfxCcu6_CaptureCompareInputSignal)ccpos0->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1800  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1801  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1802  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1803  IFX_INLINE void IfxCcu6_initCcpos0PinWithPadLevel(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1804  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1805      IfxPort_setPinModeInput(ccpos0->pin.port, ccpos0->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1806      IfxPort_setPinPadDriver(ccpos0->pin.port, ccpos0->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1807      IfxCcu6_setCaptureCompareInputSignal(ccpos0->module, IfxCcu6_CaptureCompareInput_cCPOS0, (IfxCcu6_CaptureCompareInputSignal)ccpos0->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1808  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1809  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1810  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1811  IFX_INLINE void IfxCcu6_initCcpos1Pin(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1812  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1813      IfxPort_setPinModeInput(ccpos1->pin.port, ccpos1->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1814      IfxCcu6_setCaptureCompareInputSignal(ccpos1->module, IfxCcu6_CaptureCompareInput_cCPOS1, (IfxCcu6_CaptureCompareInputSignal)ccpos1->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1815  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1816  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1817  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1818  IFX_INLINE void IfxCcu6_initCcpos1PinWithPadLevel(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1819  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1820      IfxPort_setPinModeInput(ccpos1->pin.port, ccpos1->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1821      IfxPort_setPinPadDriver(ccpos1->pin.port, ccpos1->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1822      IfxCcu6_setCaptureCompareInputSignal(ccpos1->module, IfxCcu6_CaptureCompareInput_cCPOS1, (IfxCcu6_CaptureCompareInputSignal)ccpos1->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1824  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1825  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1826  IFX_INLINE void IfxCcu6_initCcpos2Pin(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1828      IfxPort_setPinModeInput(ccpos2->pin.port, ccpos2->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1829      IfxCcu6_setCaptureCompareInputSignal(ccpos2->module, IfxCcu6_CaptureCompareInput_cCPOS2, (IfxCcu6_CaptureCompareInputSignal)ccpos2->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1830  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1831  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1832  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1833  IFX_INLINE void IfxCcu6_initCcpos2PinWithPadLevel(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1834  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1835      IfxPort_setPinModeInput(ccpos2->pin.port, ccpos2->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1836      IfxPort_setPinPadDriver(ccpos2->pin.port, ccpos2->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1837      IfxCcu6_setCaptureCompareInputSignal(ccpos2->module, IfxCcu6_CaptureCompareInput_cCPOS2, (IfxCcu6_CaptureCompareInputSignal)ccpos2->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1838  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1839  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1840  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1841  IFX_INLINE void IfxCcu6_initCout60Pin(const IfxCcu6_Cout60_Out *cout60, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1842  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1843      IfxPort_setPinModeOutput(cout60->pin.port, cout60->pin.pinIndex, outputMode, cout60->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1844      IfxPort_setPinPadDriver(cout60->pin.port, cout60->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1845  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1846  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1847  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1848  IFX_INLINE void IfxCcu6_initCout61Pin(const IfxCcu6_Cout61_Out *cout61, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1849  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1850      IfxPort_setPinModeOutput(cout61->pin.port, cout61->pin.pinIndex, outputMode, cout61->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1851      IfxPort_setPinPadDriver(cout61->pin.port, cout61->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1852  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1853  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1854  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1855  IFX_INLINE void IfxCcu6_initCout62Pin(const IfxCcu6_Cout62_Out *cout62, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1856  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1857      IfxPort_setPinModeOutput(cout62->pin.port, cout62->pin.pinIndex, outputMode, cout62->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1858      IfxPort_setPinPadDriver(cout62->pin.port, cout62->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1860  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1861  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1862  IFX_INLINE void IfxCcu6_initCout63Pin(const IfxCcu6_Cout63_Out *cout63, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1864      IfxPort_setPinModeOutput(cout63->pin.port, cout63->pin.pinIndex, outputMode, cout63->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1865      IfxPort_setPinPadDriver(cout63->pin.port, cout63->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1866  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1867  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1868  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1869  IFX_INLINE void IfxCcu6_initCtrapPin(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1870  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1871      IfxPort_setPinModeInput(ctrap->pin.port, ctrap->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1872      IfxCcu6_setCaptureCompareInputSignal(ctrap->module, IfxCcu6_CaptureCompareInput_cTRAP, (IfxCcu6_CaptureCompareInputSignal)ctrap->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1873  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1874  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1875  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1876  IFX_INLINE void IfxCcu6_initCtrapPinWithPadLevel(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1877  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1878      IfxPort_setPinModeInput(ctrap->pin.port, ctrap->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1879      IfxPort_setPinPadDriver(ctrap->pin.port, ctrap->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1880      IfxCcu6_setCaptureCompareInputSignal(ctrap->module, IfxCcu6_CaptureCompareInput_cTRAP, (IfxCcu6_CaptureCompareInputSignal)ctrap->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1881  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1882  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1883  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1884  IFX_INLINE void IfxCcu6_initT12hrPin(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1885  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1886      IfxPort_setPinModeInput(t12hrIn->pin.port, t12hrIn->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1887      IfxCcu6_setT12InputSignal(t12hrIn->module, t12hrIn);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1888  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1889  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1890  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1891  IFX_INLINE void IfxCcu6_initT12hrPinWithPadLevel(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1892  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1893      IfxPort_setPinModeInput(t12hrIn->pin.port, t12hrIn->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1894      IfxPort_setPinPadDriver(t12hrIn->pin.port, t12hrIn->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1895      IfxCcu6_setT12InputSignal(t12hrIn->module, t12hrIn);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1896  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1897  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1898  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1899  IFX_INLINE void IfxCcu6_initT13hrPin(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1900  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1901      IfxPort_setPinModeInput(t13hrIn->pin.port, t13hrIn->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1902      IfxCcu6_setT13InputSignal(t13hrIn->module, t13hrIn);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1903  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1904  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1905  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1906  IFX_INLINE void IfxCcu6_initT13hrPinWithPadLevel(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1907  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1908      IfxPort_setPinModeInput(t13hrIn->pin.port, t13hrIn->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1909      IfxPort_setPinPadDriver(t13hrIn->pin.port, t13hrIn->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1910      IfxCcu6_setT13InputSignal(t13hrIn->module, t13hrIn);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1911  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1912  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1913  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1914  IFX_INLINE boolean IfxCcu6_isModuleEnabled(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1915  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1916      return ccu6->CLC.B.DISS == 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1917  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1918  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1919  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1920  IFX_INLINE boolean IfxCcu6_isModuleSuspended(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1921  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1922      Ifx_CCU6_OCS ocs;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1923  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1924      // read the status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1925      ocs.U = ccu6->OCS.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1926  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1927      // return the status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1928      return ocs.B.SUSSTA;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1929  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1930  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1931  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1932  IFX_INLINE boolean IfxCcu6_isT12OneNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1933  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1934      return ccu6->IS.B.T12OM != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1935  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1936  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1937  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1938  IFX_INLINE boolean IfxCcu6_isT12PeriodNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1939  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1940      return ccu6->IS.B.T12PM != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1941  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1942  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1943  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1944  IFX_INLINE boolean IfxCcu6_isT13CompareNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1945  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1946      return ccu6->IS.B.T13CM != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1947  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1948  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1949  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1950  IFX_INLINE void IfxCcu6_setCaptureCompareInputSignal(Ifx_CCU6 *ccu6, IfxCcu6_CaptureCompareInput input, IfxCcu6_CaptureCompareInputSignal signal)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1951  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1952      uint32 shift = (uint32)input;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1953      uint32 mask  = (0x3U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1954      ccu6->PISEL0.U = (ccu6->PISEL0.U & ~mask) | ((uint32)signal << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1955  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1956  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1957  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1958  IFX_INLINE void IfxCcu6_setCountingInputMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_CountingInputMode mode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1959  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1960      uint32 shift = ((timer * 2) + 2);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1961      uint32 mask  = (0x3U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1962      ccu6->PISEL2.U = (ccu6->PISEL2.U & ~mask) | ((uint32)mode << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1963  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1964  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1965  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1966  IFX_INLINE void IfxCcu6_setCurrentHallPattern(Ifx_CCU6 *ccu6, uint8 pattern)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1967  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1968      ccu6->MCMOUTS.B.CURHS = pattern;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1969  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1970  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1971  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1972  IFX_INLINE void IfxCcu6_setDeadTimeValue(Ifx_CCU6 *ccu6, uint8 value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1973  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1974      ccu6->T12DTC.B.DTM = value;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1975  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1976  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1977  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1978  IFX_INLINE void IfxCcu6_setExpectedHallPattern(Ifx_CCU6 *ccu6, uint8 pattern)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1979  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1980      ccu6->MCMOUTS.B.EXPHS = pattern;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1981  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1982  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1983  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1984  IFX_INLINE void IfxCcu6_setExternalRunMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ExternalTriggerMode mode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1985  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1986      uint32 shift = ((timer * 2) + 8);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1987      uint32 mask  = (0x3U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1988      ccu6->TCTR2.U = (ccu6->TCTR2.U & ~mask) | ((uint32)mode << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1989  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1990  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1991  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1992  IFX_INLINE void IfxCcu6_setHallSensorTriggerMode(Ifx_CCU6 *ccu6, IfxCcu6_HallSensorTriggerMode mode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1993  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1994      uint32 shift = 12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1995      uint32 mask  = (0x7U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1996      ccu6->T12MSEL.U = (ccu6->T12MSEL.U & ~mask) | ((uint32)mode << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1997  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1998  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1999  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2000  IFX_INLINE void IfxCcu6_setInputClockFrequency(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_TimerInputClock frequency)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2001  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2002      uint32 shift = (timer * 8);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2003      uint32 mask  = (0x7U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2004      ccu6->TCTR0.U = (ccu6->TCTR0.U & ~mask) | ((uint32)frequency << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2005  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2006  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2007  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2008  IFX_INLINE void IfxCcu6_setInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2009  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2010      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2011      ccu6->ISS.U = ccu6->ISS.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2012  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2013  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2014  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2015  IFX_INLINE void IfxCcu6_setMultiChannelPwmPattern(Ifx_CCU6 *ccu6, uint8 pattern)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2016  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2017      ccu6->MCMOUTS.B.MCMPS = pattern;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2018  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2019  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2020  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2021  IFX_INLINE void IfxCcu6_setMultiChannelSwitchingMode(Ifx_CCU6 *ccu6, IfxCcu6_MultiChannelSwitchingSelect mode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2022  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2023      ccu6->MCMCTR.B.SWSEL = mode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2024  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2025  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2026  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2027  IFX_INLINE void IfxCcu6_setMultiChannelSwitchingSync(Ifx_CCU6 *ccu6, IfxCcu6_MultiChannelSwitchingSync sync)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2028  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2029      ccu6->MCMCTR.B.SWSYN = sync;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2030  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2031  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2032  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2033  IFX_INLINE void IfxCcu6_setOutputPassiveState(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut, boolean state)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2034  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2035      uint32 shift = (channelOut + 8); // offset at location CC60PS
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2036      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2037      ccu6->CMPSTAT.U = (ccu6->CMPSTAT.U & ~mask) | ((uint32)state << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2038  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2039  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2040  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2041  IFX_INLINE void IfxCcu6_setSingleShotModeEnable(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2042  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2043      Ifx_CCU6_TCTR2 tctr2;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2044      tctr2.U        = ccu6->TCTR2.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2045      tctr2.B.T12SSC = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2046      tctr2.B.T13SSC = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2047      ccu6->TCTR2.U  = tctr2.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2048  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2049  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2050  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2051  IFX_INLINE void IfxCcu6_setSleepMode(Ifx_CCU6 *ccu6, IfxCcu6_SleepMode mode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2052  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2053      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2054      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2055      ccu6->CLC.B.EDIS = mode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2056      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2057  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2058  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2059  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2060  IFX_INLINE void IfxCcu6_setSuspendMode(Ifx_CCU6 *ccu6, IfxCcu6_SuspendMode mode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2061  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2062      Ifx_CCU6_OCS ocs;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2063  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2064      // remove protection and configure the suspend mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2065      ocs.B.SUS_P = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2066      ocs.B.SUS   = mode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2067      ccu6->OCS.U = ocs.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2068  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2069  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2070  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2071  IFX_INLINE void IfxCcu6_setT12ChannelMode(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, IfxCcu6_T12ChannelMode mode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2072  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2073      uint32 shift = (4 * channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2074      uint32 mask  = (0xFU << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2075      ccu6->T12MSEL.U = (ccu6->T12MSEL.U & ~mask) | ((uint32)mode << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2076  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2077  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2078  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2079  IFX_INLINE void IfxCcu6_setT12CountMode(Ifx_CCU6 *ccu6, IfxCcu6_T12CountMode mode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2080  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2081      ccu6->TCTR0.B.CTM = mode;
	ld.bu	d0,[a15]112
.L539:
	insert	d15,d0,d10,#7,#1
	st.b	[a15]112,d15
.L313:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   369          {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   370              IfxCcu6_enableAdditionalPrescaler(ccu6, IfxCcu6_TimerId_t12);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   371          }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   372  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   373          IfxCcu6_setT12CountMode(ccu6, countMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   374  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   375          frequency = freqCC6 / (0x1u << prescaler); // Frequency = FREQ_CCU6 / (2 ^ prescaler)
	mov	d15,#1
.L540:
	sh	d15,d15,d1
	utof	d15,d15
.L541:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   376      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   377      else
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   378      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   379          frequency = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   380      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   381  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   382      return frequency;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   383  }
	div.f	d2,d11,d15
	ret
.L55:
	mov	d2,#0
	ret
.L270:
	
__IfxCcu6_setT12Frequency_function_end:
	.size	IfxCcu6_setT12Frequency,__IfxCcu6_setT12Frequency_function_end-IfxCcu6_setT12Frequency
.L145:
	; End of function
	
	.sdecl	'.text.IfxCcu6.IfxCcu6_setT12InputSignal',code,cluster('IfxCcu6_setT12InputSignal')
	.sect	'.text.IfxCcu6.IfxCcu6_setT12InputSignal'
	.align	2
	
	.global	IfxCcu6_setT12InputSignal

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   384  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   385  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   386  void IfxCcu6_setT12InputSignal(Ifx_CCU6 *ccu6, IfxCcu6_T12hr_In *extInput)
; Function IfxCcu6_setT12InputSignal
.L105:
IfxCcu6_setT12InputSignal:	.type	func

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   387  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   388      ccu6->PISEL2.B.T12EXT  = extInput->select >= Ifx_RxSel_e;
	ld.bu	d15,[a5]12
.L546:
	ld.bu	d0,[a4]20
.L547:
	ge.u	d15,d15,#4
.L548:
	insert	d15,d0,d15,#6,#1
	st.b	[a4]20,d15
.L549:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   389      ccu6->PISEL0.B.IST12HR = extInput->select;
	ld.bu	d15,[a5]12
.L550:
	ld.bu	d0,[a4]17
.L551:
	insert	d15,d0,d15,#6,#2
	st.b	[a4]17,d15
.L552:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   390  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   391      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, extInput->module == ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   392  }
	ret
.L319:
	
__IfxCcu6_setT12InputSignal_function_end:
	.size	IfxCcu6_setT12InputSignal,__IfxCcu6_setT12InputSignal_function_end-IfxCcu6_setT12InputSignal
.L150:
	; End of function
	
	.sdecl	'.text.IfxCcu6.IfxCcu6_setT13CaptureCompareState',code,cluster('IfxCcu6_setT13CaptureCompareState')
	.sect	'.text.IfxCcu6.IfxCcu6_setT13CaptureCompareState'
	.align	2
	
	.global	IfxCcu6_setT13CaptureCompareState

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   393  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   394  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   395  void IfxCcu6_setT13CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_CaptureCompareState state)
; Function IfxCcu6_setT13CaptureCompareState
.L107:
IfxCcu6_setT13CaptureCompareState:	.type	func

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   396  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   397      uint32 shift = 6;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   398      uint32 mask  = (0x0101U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   399      uint32 mode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   400  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   401      if (state == IfxCcu6_CaptureCompareState_set)
	jne	d4,#0,.L61
.L557:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   402      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   403          mode             = 0x0001U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   404          ccu6->CMPMODIF.U = (ccu6->CMPMODIF.U & ~mask) | (mode << shift);
	ld.w	d15,[a4]100
.L558:
	mov	d0,#-16449
.L559:
	and	d15,d0
.L560:
	or	d15,#64
	st.w	[a4]100,d15
.L61:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   405      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   406  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   407      if (state == IfxCcu6_CaptureCompareState_clear)
	jne	d4,#1,.L62
.L561:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   408      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   409          mode             = 0x0100U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   410          ccu6->CMPMODIF.U = (ccu6->CMPMODIF.U & ~mask) | (mode << shift);
	ld.w	d15,[a4]100
.L562:
	mov	d0,#-16449
.L563:
	and	d15,d0
.L564:
	insert	d15,d15,#1,#14,#1
	st.w	[a4]100,d15
.L62:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   411      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   412  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   413      if (state == IfxCcu6_CaptureCompareState_toggle)
	jne	d4,#2,.L63
.L565:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   414      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   415          mode             = 0x0101U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   416          ccu6->CMPMODIF.U = (ccu6->CMPMODIF.U & ~mask) | (mode << shift);
	ld.w	d15,[a4]100
.L566:
	mov	d0,#16448
.L567:
	or	d15,d0
	st.w	[a4]100,d15
.L63:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   417      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   418  }
	ret
.L323:
	
__IfxCcu6_setT13CaptureCompareState_function_end:
	.size	IfxCcu6_setT13CaptureCompareState,__IfxCcu6_setT13CaptureCompareState_function_end-IfxCcu6_setT13CaptureCompareState
.L155:
	; End of function
	
	.sdecl	'.text.IfxCcu6.IfxCcu6_setT13Frequency',code,cluster('IfxCcu6_setT13Frequency')
	.sect	'.text.IfxCcu6.IfxCcu6_setT13Frequency'
	.align	2
	
	.global	IfxCcu6_setT13Frequency

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   419  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   420  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   421  float32 IfxCcu6_setT13Frequency(Ifx_CCU6 *ccu6, float32 frequency, Ifx_TimerValue period)
; Function IfxCcu6_setT13Frequency
.L109:
IfxCcu6_setT13Frequency:	.type	func
	mov	d15,d4
	mov.aa	a15,a4
.L448:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   422  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   423      uint16  prescaler;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   424      float32 freqCC6   = IfxScuCcu_getSpbFrequency();
	mov	d8,d5
	call	IfxScuCcu_getSpbFrequency
.L447:
	mov	d9,d2
.L451:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   425      uint16  divFactor = freqCC6 / frequency;
	div.f	d4,d9,d15
	call	__f_ftous
.L450:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   426  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   427      for (prescaler = 0; prescaler < 16; prescaler++)
	mov	d0,#0
	mov.a	a2,#15
.L64:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   428      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   429          divFactor = divFactor / 2;
	sha	d2,#-1
.L572:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   430  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   431          if (divFactor == (uint8)0)
	jeq	d2,#0,.L65
.L573:
	add	d0,#1
	loop	a2,.L64

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   432          {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   433              break;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   434          }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   435      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   436  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   437      if (prescaler < 16)
.L65:
	mov	d15,#16
.L449:
	jge.u	d0,d15,.L66
.L333:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     2   * \file IfxCcu6.h
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     3   * \brief CCU6  basic functionality
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     4   * \ingroup IfxLld_Ccu6
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     5   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     8   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     9   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    11   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    16   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    18   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    25   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    32   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    40   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    41   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    42   * \defgroup IfxLld_Ccu6_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    43   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    44   * \defgroup IfxLld_Ccu6_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    45   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    46   * \defgroup IfxLld_Ccu6_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    47   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    48   * \defgroup IfxLld_Ccu6_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    49   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    50   * \defgroup IfxLld_Ccu6_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    51   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    52   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    53  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    54  #ifndef IFXCCU6_H
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    55  #define IFXCCU6_H 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    56  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    57  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    58  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    59  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    60  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    61  #include "_Impl/IfxCcu6_cfg.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    62  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    63  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    64  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    65  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    66  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    67  #include "_PinMap/IfxCcu6_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    68  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    69  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    70  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    72  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    73  /** \addtogroup IfxLld_Ccu6_Std_Enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    74   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    75  /** \brief Input selection, ( CC6x capture input / CTRAP input / CCPOSx input )\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    76   * Definition in Ifx_CCU.PISEL0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    77   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    78  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    79  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    80      IfxCcu6_CaptureCompareInput_cC60   = IFX_CCU6_PISEL0_ISCC60_OFF,  /**< \brief CC60 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    81      IfxCcu6_CaptureCompareInput_cC61   = IFX_CCU6_PISEL0_ISCC61_OFF,  /**< \brief CC61 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    82      IfxCcu6_CaptureCompareInput_cC62   = IFX_CCU6_PISEL0_ISCC62_OFF,  /**< \brief CC62 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    83      IfxCcu6_CaptureCompareInput_cTRAP  = IFX_CCU6_PISEL0_ISTRP_OFF,   /**< \brief CTRAP input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    84      IfxCcu6_CaptureCompareInput_cCPOS0 = IFX_CCU6_PISEL0_ISPOS0_OFF,  /**< \brief CCPOS0 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    85      IfxCcu6_CaptureCompareInput_cCPOS1 = IFX_CCU6_PISEL0_ISPOS1_OFF,  /**< \brief CCPOS1 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    86      IfxCcu6_CaptureCompareInput_cCPOS2 = IFX_CCU6_PISEL0_ISPOS2_OFF   /**< \brief CCPOS2 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    87  } IfxCcu6_CaptureCompareInput;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    88  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    89  /** \brief Selection of actual input signal for the capture compare inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    90   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    91  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    92  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    93      IfxCcu6_CaptureCompareInputSignal_a = 0,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    94      IfxCcu6_CaptureCompareInputSignal_b = 1,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    95      IfxCcu6_CaptureCompareInputSignal_c = 2,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    96      IfxCcu6_CaptureCompareInputSignal_d = 3   /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    97  } IfxCcu6_CaptureCompareInputSignal;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    98  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    99  /** \brief capture/compare state to set / clear the CC6xST-bits
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   100   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   101  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   102  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   103      IfxCcu6_CaptureCompareState_set    = 0, /**< \brief Bit CC6xST is set */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   104      IfxCcu6_CaptureCompareState_clear  = 1, /**< \brief Bit CC6xST is cleared */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   105      IfxCcu6_CaptureCompareState_toggle = 2  /**< \brief Bit CC6xST is toggled */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   106  } IfxCcu6_CaptureCompareState;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   107  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   108  /** \brief Capture compare output pins
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   109   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   110  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   111  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   112      IfxCcu6_ChannelOut_cc0   = 0,  /**< \brief CC60 compare output CC0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   113      IfxCcu6_ChannelOut_cout0 = 1,  /**< \brief CC60 compare output COUT0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   114      IfxCcu6_ChannelOut_cc1   = 2,  /**< \brief CC61 compare output CC1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   115      IfxCcu6_ChannelOut_cout1 = 3,  /**< \brief CC61 compare output COUT1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   116      IfxCcu6_ChannelOut_cc2   = 4,  /**< \brief CC62 compare output CC2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   117      IfxCcu6_ChannelOut_cout2 = 5,  /**< \brief CC62 compare output COUT2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   118      IfxCcu6_ChannelOut_cout3 = 6   /**< \brief CC63 compare output COUT3 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   119  } IfxCcu6_ChannelOut;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   120  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   121  /** \brief Defines the input event leading to a counting action of the timer (T12 / T13)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   122   * Definition in Ifx_CCU.PISEL2.B.ISCNT12 / Ifx_CCU.PISEL2.B.ISCNT13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   123   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   124  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   125  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   126      IfxCcu6_CountingInputMode_internal        = 0, /**< \brief The T1x prescaler generates the counting events,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   127                                                      * Bit TCTR4.T1xCNT is not taken into account. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   128      IfxCcu6_CountingInputMode_manual          = 1, /**< \brief Bit TCTR4.T1xCNT written with 1 is a counting
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   129                                                      * event. The T1x prescaler is not taken into account */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   130      IfxCcu6_CountingInputMode_externalRising  = 2, /**< \brief The timer T1x is counting each rising edge
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   131                                                      * detected in the selected T1xHR signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   132      IfxCcu6_CountingInputMode_externalFalling = 3  /**< \brief The timer T1x is counting each falling edge
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   133                                                      * detected in the selected T1xHR signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   134  } IfxCcu6_CountingInputMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   135  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   136  /** \brief Controls whether the source signal for the sampling of the Hall input pattern (selected by HSYNC) is delayed by the Dead-Time Counter 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   137   * Definition in Ifx_CCU.T12MSEL.B.DBYP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   138   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   139  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   140  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   141      IfxCcu6_DelayBypass_notActive = 0,  /**< \brief Dead-Time Counter 0 is generating a delay after
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   142                                           * the source signal becomes active */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   143      IfxCcu6_DelayBypass_active    = 1   /**< \brief Dead-Time Counter 0 is not used for a delay */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   144  } IfxCcu6_DelayBypass;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   145  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   146  /** \brief Defines the event of signal T1xHR that can set the run bit T1xR by HW\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   147   * Definition in Ifx_CCU.TCTR2.B.T12RSEL / IIfx_CCU.TCTR2.B.T13RSEL
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   148   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   149  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   150  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   151      IfxCcu6_ExternalTriggerMode_disable     = 0,  /**< \brief The external setting of T1xR is disabled */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   152      IfxCcu6_ExternalTriggerMode_risingEdge  = 1,  /**< \brief Bit T1xR is set if a rising edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   153                                                     * detected. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   154      IfxCcu6_ExternalTriggerMode_fallingEdge = 2,  /**< \brief Bit T1xR is set if a falling edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   155                                                     * detected. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   156      IfxCcu6_ExternalTriggerMode_anyEdge     = 3   /**< \brief Bit T1xR is set if an edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   157                                                     * detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   158  } IfxCcu6_ExternalTriggerMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   159  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   160  /** \brief Defines the source for the sampling of the Hall input pattern and the comparison to the current and the expected Hall pattern bit fields\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   161   * Definition in Ifx_CCU.T12MSEL.HSYNC
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   162   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   163  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   164  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   165      IfxCcu6_HallSensorTriggerMode_permanentCheck    = 0,  /**< \brief Any edge at any of the inputs CCPOSx, independent from any PWM
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   166                                                             * signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   167      IfxCcu6_HallSensorTriggerMode_cM63              = 1,  /**< \brief A T13 Compare-Match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   168      IfxCcu6_HallSensorTriggerMode_t13PM             = 2,  /**< \brief A T13 Period-Match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   169      IfxCcu6_HallSensorTriggerMode_off               = 3,  /**< \brief Hall sampling triggered by HW sources is switched off */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   170      IfxCcu6_HallSensorTriggerMode_t12PMCountingUp   = 4,  /**< \brief A T12 Period-Match while counting up (T12_PM and CDIR = 0) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   171      IfxCcu6_HallSensorTriggerMode_t12OMCountingDown = 5,  /**< \brief A T12 One-Match while counting down (T12_PM and CDIR = 1) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   172      IfxCcu6_HallSensorTriggerMode_cM61CountingUp    = 6,  /**< \brief A T12 Compare-Match of compare channel CC61 while counting up (CM_61 and CDIR = 0) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   173      IfxCcu6_HallSensorTriggerMode_cM61CountingDown  = 7   /**< \brief A T12 Compare-Match of compare channel CC61 while counting down (CM_61 and CDIR = 1) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   174  } IfxCcu6_HallSensorTriggerMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   175  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   176  /** \brief Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   177   * Description in Ifx_CCU.IEN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   178   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   179  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   180  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   181      IfxCcu6_InterruptSource_cc60RisingEdge   = IFX_CCU6_IS_ICC60R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   182                                                                          * enable for channel CC60 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   183      IfxCcu6_InterruptSource_cc60FallingEdge  = IFX_CCU6_IS_ICC60F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   184                                                                          * enable for channel CC60 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   185      IfxCcu6_InterruptSource_cc61RisingEdge   = IFX_CCU6_IS_ICC61R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   186                                                                          * enable for channel CC61 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   187      IfxCcu6_InterruptSource_cc61FallingEdge  = IFX_CCU6_IS_ICC61F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   188                                                                          * enable for channel CC61 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   189      IfxCcu6_InterruptSource_cc62RisingEdge   = IFX_CCU6_IS_ICC62R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   190                                                                          * enable for channel CC62 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   191      IfxCcu6_InterruptSource_cc62FallingEdge  = IFX_CCU6_IS_ICC62F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   192                                                                          * enable for channel CC62 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   193      IfxCcu6_InterruptSource_t12OneMatch      = IFX_CCU6_IS_T12OM_OFF,  /**< \brief Interrupt enable for T12 one-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   194      IfxCcu6_InterruptSource_t12PeriodMatch   = IFX_CCU6_IS_T12PM_OFF,  /**< \brief Interrupt enable for T12 period-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   195      IfxCcu6_InterruptSource_t13CompareMatch  = IFX_CCU6_IS_T13CM_OFF,  /**< \brief Interrupt enable for T13 compare-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   196      IfxCcu6_InterruptSource_t13PeriodMatch   = IFX_CCU6_IS_T13PM_OFF,  /**< \brief Interrupt enable for T13 period-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   197      IfxCcu6_InterruptSource_trap             = IFX_CCU6_IS_TRPF_OFF,   /**< \brief Interrupt enable for trap flag */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   198      IfxCcu6_InterruptSource_correctHallEvent = IFX_CCU6_IS_CHE_OFF,    /**< \brief Interrupt enable for correct hall event */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   199      IfxCcu6_InterruptSource_wrongHallEvent   = IFX_CCU6_IS_WHE_OFF     /**< \brief Interrupt enable for wrong hall event */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   200  } IfxCcu6_InterruptSource;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   201  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   202  /** \brief Selection of the trigger request source (next multi-channel event) for the shadow transfer MCM_ST from MCMPS to MCMP\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   203   * Definition in Ifx_CCU.MCMCTR.B.SWSEL
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   204   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   205  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   206  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   207      IfxCcu6_MultiChannelSwitchingSelect_noEvent                 = 0,  /**< \brief No trigger request will be generated */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   208      IfxCcu6_MultiChannelSwitchingSelect_correctHallEvent        = 1,  /**< \brief Correct Hall pattern detected (CM_CHE) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   209      IfxCcu6_MultiChannelSwitchingSelect_t13PeriodMatch          = 2,  /**< \brief T13 period-match detected (while counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   210      IfxCcu6_MultiChannelSwitchingSelect_t12OneMatch             = 3,  /**< \brief T12 one-match (while counting down) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   211      IfxCcu6_MultiChannelSwitchingSelect_t12Channel1CompareMatch = 4,  /**< \brief T12 channel 1 compare-match detected (phase
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   212                                                                         * delay function) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   213      IfxCcu6_MultiChannelSwitchingSelect_t12PeriodMatch          = 5   /**< \brief T12 period match detected (while counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   214  } IfxCcu6_MultiChannelSwitchingSelect;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   215  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   216  /** \brief Selection of the synchronization mechanism for the shadow transfer event MCM_ST\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   217   * Definition in Ifx_CCU.MCMCTR.B.SWSYN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   218   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   219  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   220  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   221      IfxCcu6_MultiChannelSwitchingSync_direct       = 0,  /**< \brief Direct, the trigger event immediately leads to the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   222                                                            * shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   223      IfxCcu6_MultiChannelSwitchingSync_t13ZeroMatch = 1,  /**< \brief A T13 zero-match triggers the shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   224      IfxCcu6_MultiChannelSwitchingSync_t12ZeroMatch = 2   /**< \brief A T12 zero-match (while counting up) triggers the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   225                                                            * shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   226  } IfxCcu6_MultiChannelSwitchingSync;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   227  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   228  /** \brief Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   229   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   230  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   231  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   232      IfxCcu6_ServiceRequest_0 = 0,      /**< \brief Service request output SR0  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   233      IfxCcu6_ServiceRequest_1,          /**< \brief Service request output SR1  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   234      IfxCcu6_ServiceRequest_2,          /**< \brief Service request output SR2  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   235      IfxCcu6_ServiceRequest_3           /**< \brief Service request output SR3  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   236  } IfxCcu6_ServiceRequest;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   237  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   238  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   239   * Definition in Ifx_CCU6.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   240   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   241  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   242  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   243      IfxCcu6_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   244      IfxCcu6_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   245  } IfxCcu6_SleepMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   246  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   247  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   248   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   249  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   250  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   251      IfxCcu6_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   252      IfxCcu6_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   253      IfxCcu6_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   254  } IfxCcu6_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   255  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   256  /** \brief Capture compare channel of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   257   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   258  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   259  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   260      IfxCcu6_T12Channel_0 = 0,      /**< \brief T12 channel CC60  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   261      IfxCcu6_T12Channel_1,          /**< \brief T12 channel CC61  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   262      IfxCcu6_T12Channel_2           /**< \brief T12 channel CC62  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   263  } IfxCcu6_T12Channel;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   264  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   265  /** \brief The operating mode for the T12 channels are defined by the bit fields Ifx_CCU.T12MSEL.MSEL6x.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   266   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   267  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   268  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   269      IfxCcu6_T12ChannelMode_off                                   = 0,  /**< \brief Capture/Compare modes switched off */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   270      IfxCcu6_T12ChannelMode_compareMode                           = 1,  /**< \brief Compare mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   271      IfxCcu6_T12ChannelMode_doubleRegisterCaptureRisingAndFalling = 4,  /**< \brief CC6xIN rising edge: T12 stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   272      IfxCcu6_T12ChannelMode_doubleRegisterCaptureRising           = 5,  /**< \brief CC6xIN rising edge: CC6nSR stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   273      IfxCcu6_T12ChannelMode_doubleRegisterCaptureFalling          = 6,  /**< \brief CC6xIN rising edge: CC6nSR stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   274      IfxCcu6_T12ChannelMode_doubleRegisterCaptureAny              = 7,  /**< \brief CC6xIN any active edge: CC6nSR stored in CC6xR, any active edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   275      IfxCcu6_T12ChannelMode_hallSensor                            = 8,  /**< \brief Hall Sensor Mode, In order to properly enable this mode, all three MSEL6x fields have to be
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   276                                                                          * programmed to Hall Sensor mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   277      IfxCcu6_T12ChannelMode_hysteresisLikecompare                 = 9,  /**< \brief Hysteresis-like compare mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   278      IfxCcu6_T12ChannelMode_multiInputCaptureRisingAndFalling     = 10, /**< \brief CC6xIN rising edge: T12 stored in CC6xR, CCPOSx falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   279      IfxCcu6_T12ChannelMode_multiInputCaptureFallingAndRising     = 11, /**< \brief CC6xIN falling edge: T12 stored in CC6xR, CCPOSx rising edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   280      IfxCcu6_T12ChannelMode_multiInputCaptureBothRising           = 12, /**< \brief CC6xIN rising edge: T12 stored in CC6xR, CCPOSx rising edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   281      IfxCcu6_T12ChannelMode_multiInputCaptureBothFalling          = 13, /**< \brief CC6xIN falling edge: T12 stored in CC6xR, CCPOSx falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   282      IfxCcu6_T12ChannelMode_multiInputCaptureAny                  = 14  /**< \brief CC6xIN any active edge : T12 stored in CC6xR, CCPOSx any active edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   283  } IfxCcu6_T12ChannelMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   284  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   285  /** \brief Counting direction of Timer12\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   286   * Definition in Ifx_CCU.TCTR0.B.CDIR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   287   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   288  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   289  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   290      IfxCcu6_T12CountDirection_up   = 0, /**< \brief Counting up */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   291      IfxCcu6_T12CountDirection_down = 1  /**< \brief Counting down */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   292  } IfxCcu6_T12CountDirection;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   293  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   294  /** \brief Operating mode of Timer 12\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   295   * Definition in Ifx_CCU.TCTR0.B.CTM
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   296   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   297  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   298  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   299      IfxCcu6_T12CountMode_edgeAligned   = 0, /**< \brief T12 always counts up and continues counting
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   300                                               * from zero after reaching the period value. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   301      IfxCcu6_T12CountMode_centerAligned = 1  /**< \brief T12 counts down after detecting a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   302                                               * and counts up after detecting a one-match. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   303  } IfxCcu6_T12CountMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   304  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   305  /** \brief Delivers additional information to control the automatic set of bit T13R in the case that the trigger action defined by T13 trigger event control (T13TEC) is detected.\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   306   * Definition in Ifx_CCU.TCTR2.B.T13TED
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   307   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   308  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   309  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   310      IfxCcu6_T13TriggerDirection_noAction          = 0,  /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   311      IfxCcu6_T13TriggerDirection_onT12CountingUp   = 1,  /**< \brief while T12 is counting up */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   312      IfxCcu6_T13TriggerDirection_onT12CountingDown = 2,  /**< \brief while T12 is counting down */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   313      IfxCcu6_T13TriggerDirection_anyT12            = 3   /**< \brief independent on the count direction of T12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   314  } IfxCcu6_T13TriggerDirection;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   315  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   316  /** \brief Selects the trigger event to start T13 (automatic set of T13R for synchronization to T12 compare signals)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   317   * Definition in Ifx_CCU.TCTR2.B.T13TEC
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   318   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   319  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   320  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   321      IfxCcu6_T13TriggerEvent_noAction        = 0,  /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   322      IfxCcu6_T13TriggerEvent_onCC60RCompare  = 1,  /**< \brief set T13R on a T12 compare event on channel 0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   323      IfxCcu6_T13TriggerEvent_onCC61RCompare  = 2,  /**< \brief set T13R on a T12 compare event on channel 1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   324      IfxCcu6_T13TriggerEvent_onCC62RCompare  = 3,  /**< \brief set T13R on a T12 compare event on channel 2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   325      IfxCcu6_T13TriggerEvent_onAnyT12Compare = 4,  /**< \brief set T13R on any T12 compare event (ch. 0, 1, 2) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   326      IfxCcu6_T13TriggerEvent_onT12Period     = 5,  /**< \brief set T13R upon a period-match of T12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   327      IfxCcu6_T13TriggerEvent_onT12Zero       = 6,  /**< \brief set T13R upon a zero-match of T12 (while
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   328                                                     * counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   329      IfxCcu6_T13TriggerEvent_onCCPOSxEdge    = 7   /**< \brief set T13R on any edge of inputs CCPOSx */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   330  } IfxCcu6_T13TriggerEvent;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   331  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   332  /** \brief Timer number ( T12 / T13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   333   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   334  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   335  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   336      IfxCcu6_TimerId_t12 = 0,  /**< \brief Timer 12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   337      IfxCcu6_TimerId_t13 = 1   /**< \brief Timer 13 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   338  } IfxCcu6_TimerId;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   339  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   340  /** \brief Selects the input clock for timers (T12 or T13) that is derived from the peripheral clock according to the equation\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   341   * Definition in Ifx_CCU.TCTR0.B.T12CLK / Ifx_CCU.TCTR0.B.T13CLK
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   342   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   343  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   344  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   345      IfxCcu6_TimerInputClock_fcc6      = 0, /**< \brief fcc6 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   346      IfxCcu6_TimerInputClock_fcc6By2   = 1, /**< \brief fcc6 / 2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   347      IfxCcu6_TimerInputClock_fcc6By4   = 2, /**< \brief fcc6 / 4 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   348      IfxCcu6_TimerInputClock_fcc6By8   = 3, /**< \brief fcc6 / 8 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   349      IfxCcu6_TimerInputClock_fcc6By16  = 4, /**< \brief fcc6 / 16 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   350      IfxCcu6_TimerInputClock_fcc6By32  = 5, /**< \brief fcc6 / 32 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   351      IfxCcu6_TimerInputClock_fcc6By64  = 6, /**< \brief fcc6 / 64 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   352      IfxCcu6_TimerInputClock_fcc6By128 = 7  /**< \brief fcc6 / 128 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   353  } IfxCcu6_TimerInputClock;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   354  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   355  /** \brief Selection of actual input signal for the timer inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   356   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   357  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   358  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   359      IfxCcu6_TimerInputSignal_a = 0,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   360      IfxCcu6_TimerInputSignal_b = 1,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   361      IfxCcu6_TimerInputSignal_c = 2,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   362      IfxCcu6_TimerInputSignal_d = 3,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   363      IfxCcu6_TimerInputSignal_e = 0,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   364      IfxCcu6_TimerInputSignal_f = 1,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   365      IfxCcu6_TimerInputSignal_g = 2,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   366      IfxCcu6_TimerInputSignal_h = 3   /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   367  } IfxCcu6_TimerInputSignal;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   368  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   369  /** \brief Timer (T12 / T13) run status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   370   * Definition in Ifx_CCU.TCTR0.B.T12R and Ifx_CCU.TCTR0.B.T13R
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   371   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   373  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   374      IfxCcu6_TimerRunStatus_stopped = 0,  /**< \brief Timer T1x is stopped. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   375      IfxCcu6_TimerRunStatus_running = 1   /**< \brief Timer T1x is running. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   376  } IfxCcu6_TimerRunStatus;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   377  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   378  /** \brief Defines how the trap flag TRPF can be cleared after the trap input condition is no longer valid (either by CTRAP = 1 or by TRPPEN = 0)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   379   * Definition in Ifx_CCU.TRPCTR.B.TRPM2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   380   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   381  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   382  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   383      IfxCcu6_TrapMode_automatic = 0,  /**< \brief Bit TRPF is cleared by HW */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   384      IfxCcu6_TrapMode_manual    = 1   /**< \brief Bit TRPF stays 0, It has to be cleared by SW by writing
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   385                                        * ISR.RTRPF = 1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   386  } IfxCcu6_TrapMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   387  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   388  /** \brief Defines the behavior of the selected outputs when leaving the trap state, after the trap condition has become inactive again\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   389   * Definition in Ifx_CCU.TRPCTR.B.TRPMx (x = 0, 1)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   390   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   391  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   392  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   393      IfxCcu6_TrapState_t12Sync   = 0, /**< \brief The trap state is left when a zero-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   394                                        * of T12 (while counting up) is detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   395      IfxCcu6_TrapState_t13Sync   = 1, /**< \brief The trap state is left when a zeromatch
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   396                                        * of T13 is detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   397      IfxCcu6_TrapState_immediate = 3  /**< \brief The trap state is left immediately without any synchronization to T12 or T13 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   398  } IfxCcu6_TrapState;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   399  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   400  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   401  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   402  /** \addtogroup IfxLld_Ccu6_Std_Operative
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   403   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   404  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   405  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   406  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   407  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   408  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   409  /** \brief Clears the counters of the Timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   410   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   411   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   412   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   413   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   414   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   415  IFX_INLINE void IfxCcu6_clearCounter(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   416  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   417  /** \brief Clears all the three dead-time counter channels to zero.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   418   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   419   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   420   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   421  IFX_INLINE void IfxCcu6_clearDeadTimeCounters(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   422  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   423  /** \brief Clears the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   424   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   425   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   426   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   427   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   428  IFX_INLINE void IfxCcu6_clearInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   429  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   430  /** \brief Clears the T12  One notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   431   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   432   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   433   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   434  IFX_INLINE void IfxCcu6_clearT12OneNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   435  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   436  /** \brief Clears the T12  period notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   437   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   438   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   439   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   440  IFX_INLINE void IfxCcu6_clearT12PeriodNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   441  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   442  /** \brief Clears the T13  compare notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   443   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   444   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   445   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   446  IFX_INLINE void IfxCcu6_clearT13CompareNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   447  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   448  /** \brief Returns the Timer pointer
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   449   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   450   * \return Timer pointer
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   451   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   452  IFX_INLINE volatile uint32 *IfxCcu6_getT12TimerPointer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   453  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   454  /** \brief Returns the status of module enabled or disabled
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   455   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   456   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   457   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   458  IFX_INLINE boolean IfxCcu6_isModuleEnabled(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   459  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   460  /** \brief Returns the status of T12 one notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   461   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   462   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   463   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   464  IFX_INLINE boolean IfxCcu6_isT12OneNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   465  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   466  /** \brief Returns the status of T12 period notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   467   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   468   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   469   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   470  IFX_INLINE boolean IfxCcu6_isT12PeriodNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   471  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   472  /** \brief Returns the status of T13 compare notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   473   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   474   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   475   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   476  IFX_INLINE boolean IfxCcu6_isT13CompareNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   477  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   478  /** \brief Sets the input event leading to a counting action of Timers (T12 / T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   479   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   480   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   481   * \param mode Input event leading to a counting action of the timer (T12 / T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   482   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   483   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   484  IFX_INLINE void IfxCcu6_setCountingInputMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_CountingInputMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   485  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   486  /** \brief Sets the current hall pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   487   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   488   * \param pattern Current hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   489   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   490   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   491  IFX_INLINE void IfxCcu6_setCurrentHallPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   492  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   493  /** \brief Sets the delay between switching from the passive state to the active state of the selected outputs (dead time)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   494   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   495   * \param value Value of the dead time to be induced
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   496   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   497   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   498  IFX_INLINE void IfxCcu6_setDeadTimeValue(Ifx_CCU6 *ccu6, uint8 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   499  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   500  /** \brief Sets the expected hall pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   501   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   502   * \param pattern Expected hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   503   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   504   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   505  IFX_INLINE void IfxCcu6_setExpectedHallPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   506  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   507  /** \brief Sets the event of signal T1xHR that can set the run bit T1xR by HW
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   508   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   509   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   510   * \param mode External trigger mode
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   511   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   512   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   513  IFX_INLINE void IfxCcu6_setExternalRunMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ExternalTriggerMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   514  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   515  /** \brief Sets source for the sampling of the Hall input pattern and the comparison to the current and the expected Hall pattern bit fields
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   516   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   517   * \param mode Hall sensor input trigger event
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   518   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   519   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   520  IFX_INLINE void IfxCcu6_setHallSensorTriggerMode(Ifx_CCU6 *ccu6, IfxCcu6_HallSensorTriggerMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   521  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   522  /** \brief Sets the input clock for timers (T12 or T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   523   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   524   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   525   * \param frequency Input clock for timers (T12 or T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   526   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   527   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   528  IFX_INLINE void IfxCcu6_setInputClockFrequency(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_TimerInputClock frequency);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   529  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   530  /** \brief Sets the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   531   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   532   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   533   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   534   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   535  IFX_INLINE void IfxCcu6_setInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   536  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   537  /** \brief Sets the output pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   538   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   539   * \param pattern Output pattern for the multichannel mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   540   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   541   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   542  IFX_INLINE void IfxCcu6_setMultiChannelPwmPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   543  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   544  /** \brief Sets the trigger request source (next multi-channel event) for the shadow transfer MCM_ST from MCMPS to MCMP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   545   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   546   * \param mode Trigger request source (next multi-channel event) for the shadow transfer MCM_ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   547   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   548   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   549  IFX_INLINE void IfxCcu6_setMultiChannelSwitchingMode(Ifx_CCU6 *ccu6, IfxCcu6_MultiChannelSwitchingSelect mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   550  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   551  /** \brief Sets the synchronization mechanism of the shadow transfer event MCM_ST\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   552   * if it has been requested before (flag R set by an event selected by SWSEL) and if MCMEN = 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   553   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   554   * \param sync Synchronization mechanism of the shadow transfer event MCM_ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   555   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   556   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   557  IFX_INLINE void IfxCcu6_setMultiChannelSwitchingSync(Ifx_CCU6 *ccu6, IfxCcu6_MultiChannelSwitchingSync sync);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   558  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   559  /** \brief Sets the state of the corresponding compare channel, that is considered to be the passive state
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   560   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   561   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   562   * \param state FALSE: passive state when CC6xST == 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   563   * TRUE : passive state when CC6xST == 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   564   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   565   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   566  IFX_INLINE void IfxCcu6_setOutputPassiveState(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut, boolean state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   567  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   568  /** \brief Enables / Disables the single shot mode of Timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   569   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   570   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   571   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   573   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   574  IFX_INLINE void IfxCcu6_setSingleShotModeEnable(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   575  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   576  /** \brief Sets the operating mode of the Timer12 capture/compare channels
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   577   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   578   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   579   * \param mode The operating mode for the T12 channels
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   580   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   581   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   582  IFX_INLINE void IfxCcu6_setT12ChannelMode(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, IfxCcu6_T12ChannelMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   583  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   584  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   585   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   586   * \param mode Operating mode of Timer 12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   587   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   588   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   589  IFX_INLINE void IfxCcu6_setT12CountMode(Ifx_CCU6 *ccu6, IfxCcu6_T12CountMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   590  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   591  /** \brief Sets the 16-bit counter value of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   592   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   593   * \param value Counter value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   595   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   596  IFX_INLINE void IfxCcu6_setT12CounterValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   597  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   598  /** \brief Sets the period value that leads Timer12 counter value to a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   599   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   600   * \param value Period value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   601   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   602   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   603  IFX_INLINE void IfxCcu6_setT12PeriodValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   604  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   605  /** \brief Sets the 16-bit compare value of Timer13 (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   606   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   607   * \param value Compare value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   609   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   610  IFX_INLINE void IfxCcu6_setT13CompareValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   611  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   612  /** \brief Sets the 16-bit counter value of Timer13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   613   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   614   * \param value counter value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   616   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   617  IFX_INLINE void IfxCcu6_setT13CounterValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   618  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   619  /** \brief Sets the period value that leads Timer13 counter value to a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   620   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   621   * \param value period value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   622   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   623   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   624  IFX_INLINE void IfxCcu6_setT13PeriodValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   625  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   626  /** \brief Sets the Timer13 trigger event direction
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   627   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   628   * \param direction T13 trigger event direction
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   630   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   631  IFX_INLINE void IfxCcu6_setT13TriggerEventDirection(Ifx_CCU6 *ccu6, IfxCcu6_T13TriggerDirection direction);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   632  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   633  /** \brief Sets the trigger event to start Timer13 (automatic set of T13R for synchronization to Timer12 compare signals)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   634   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   635   * \param mode The trigger event to start T13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   636   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   637   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   638  IFX_INLINE void IfxCcu6_setT13TriggerEventMode(Ifx_CCU6 *ccu6, IfxCcu6_T13TriggerEvent mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   639  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   640  /** \brief Sets the mode of clearing the trap flag TRPF after the trap input condition is no longer valid
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   641   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   642   * \param mode Trap mode selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   643   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   644   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   645  IFX_INLINE void IfxCcu6_setTrapMode(Ifx_CCU6 *ccu6, IfxCcu6_TrapMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   646  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   647  /** \brief Sets behaviour of the selected outputs when leaving the trap state after the trap condition has become inactive again.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   648   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   649   * \param state Trap state selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   650   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   651   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   652  IFX_INLINE void IfxCcu6_setTrapState(Ifx_CCU6 *ccu6, IfxCcu6_TrapState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   653  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   654  /** \brief starts the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   655   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   656   * \param t12 Timer12 start choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   657   * \param t13 Timer13 start choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   658   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   659   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   660  IFX_INLINE void IfxCcu6_startTimer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   661  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   662  /** \brief starts the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   663   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   664   * \param t12 Timer12 stop choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   665   * \param t13 Timer13 stop choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   666   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   667   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   668  IFX_INLINE void IfxCcu6_stopTimer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   669  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   670  /** \brief Updates the hall pattern (current hall, expected hall, moduleation output), in a single write
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   671   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   672   * \param currentHall Current hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   673   * \param expectedHall Expected hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   674   * \param output Output pattern for the multichannel mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   675   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   676   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   677  IFX_INLINE void IfxCcu6_updateHallPattern(Ifx_CCU6 *ccu6, uint8 currentHall, uint8 expectedHall, uint8 output);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   678  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   679  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   680  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   681  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   682  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   683  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   684   * \param ccu6 Specifies Ccu6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   685   * \param outputLine Output Line
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   686   * \param selectedTrigger Trigger selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   687   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   688   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   689  IFX_EXTERN void IfxCcu6_connectTrigger(Ifx_CCU6 *ccu6, IfxCcu6_TrigOut outputLine, IfxCcu6_TrigSel selectedTrigger);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   690  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   691  /** \brief Routes the interrupt node pointer to the selected service requests
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   692   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   693   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   694   * \param serviceRequest Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   696   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   697  IFX_EXTERN void IfxCcu6_routeInterruptNode(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source, IfxCcu6_ServiceRequest serviceRequest);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   698  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   699  /** \brief Sets the passive state level of the PWM outputs of the module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   700   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   701   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   702   * \param state FALSE: The passive level is 0.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   703   * TRUE : The passive level is 1.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   704   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   705   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   706  IFX_EXTERN void IfxCcu6_setOutputPassiveLevel(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut, boolean state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   707  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   708  /** \brief Sets software-control (independent set and clear conditions) for the Timer12 channel state bits CC6xST (x=0,1,2)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   709   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   710   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   711   * \param state capture/compare state selection (set / clear / toggle)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   712   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   713   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   714  IFX_EXTERN void IfxCcu6_setT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, IfxCcu6_CaptureCompareState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   715  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   716  /** \brief Sets the 16-bit compare value of Timer12 (writes into shadow registers)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   717   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   718   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   719   * \param value Compare value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   720   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   721   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   722  IFX_EXTERN void IfxCcu6_setT12CompareValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   723  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   724  /** \brief Sets the frequency and clock input of the Timer 12.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   725   * Caution: If desired frequency cannot achieved (by successive divisions by 2) :
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   726   * Then the nearest frequency value is set ( >= desired value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   727   * The resulting frequency is captured in the handler element : CaptureFrequency.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   728   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   729   * \param frequency Requested timer frequency in Hz
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   730   * \param period period value to be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   731   * \param countMode Counting mode of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   732   * \return Zero, if the function failed to fulfill requested frequency and resolution\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   733   * Positive, if the function can find settings close to the requested frequency and resolution above the requested
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   734   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   735  IFX_EXTERN float32 IfxCcu6_setT12Frequency(Ifx_CCU6 *ccu6, float32 frequency, Ifx_TimerValue period, IfxCcu6_T12CountMode countMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   736  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   737  /** \brief selects the actual input signal for the timer inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   738   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   739   * \param extInput External input signal for the Timer 12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   740   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   741   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   742  IFX_EXTERN void IfxCcu6_setT12InputSignal(Ifx_CCU6 *ccu6, IfxCcu6_T12hr_In *extInput);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   743  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   744  /** \brief Sets software-control (independent set and clear conditions) for the Timer13 channel state bits CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   745   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   746   * \param state capture/compare state selection (set / clear / toggle)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   747   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   748   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   749  IFX_EXTERN void IfxCcu6_setT13CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_CaptureCompareState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   750  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   751  /** \brief Sets the frequency and clock input of the Timer 13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   752   * Caution: If desired frequency cannot achieved (by successive divisions by 2) :
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   753   * Then the nearest frequency value is set ( >= desired value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   754   * The resulting frequency is captured in the handler element : captureFrequency.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   755   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   756   * \param frequency Requested timer frequency in Hz
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   757   * \param period period value to be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   758   * \return Zero, if the function failed to fulfill requested frequency and resolution\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   759   * Positive, if the function can find settings close to the requested frequency and resolution above the requested
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   760   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   761  IFX_EXTERN float32 IfxCcu6_setT13Frequency(Ifx_CCU6 *ccu6, float32 frequency, Ifx_TimerValue period);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   762  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   763  /** \brief selects the actual input signal for the timer inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   764   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   765   * \param extInput External input signal for the Timer 13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   766   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   767   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   768  IFX_EXTERN void IfxCcu6_setT13InputSignal(Ifx_CCU6 *ccu6, IfxCcu6_T13hr_In *extInput);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   769  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   770  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   771  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   772  /** \addtogroup IfxLld_Ccu6_Std_Utility
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   773   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   774  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   775  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   776  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   777  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   778  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   779  /** \brief Indicate the status of the dead time generation for each compare channel (0, 1, 2) of timer T12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   780   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   781   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   782   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   783   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   784  IFX_INLINE boolean IfxCcu6_getDeadTimeStatus(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   785  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   786  /** \brief Returns the value of the input Hall pattern of the Timer12 capture/compare channels CC6POS6x (x = 0, 1, 2)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   787   * that has been compared to the current and expected value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   788   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   789   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   790   * \return Status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   791   * TRUE : The input CCPOSx has been sampled as 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   792   * FALSE : The input CCPOSx has been sampled as 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   793   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   794  IFX_INLINE boolean IfxCcu6_getHallPatternSampleState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   795  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   796  /** \brief Gets the status of the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   797   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   798   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   799   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   800   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   801  IFX_INLINE boolean IfxCcu6_getInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   802  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   803  /** \brief indicates if the multi-channel mode functionality is available
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   804   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   805   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   806   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   807  IFX_INLINE boolean IfxCcu6_getMultiChannelModeAvailabilityStatus(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   808  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   809  /** \brief Gets the status of the shadow transfer request from MCMPS to MCMP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   810   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   811   * \return Status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   812   * FALSE: A shadow transfer MCM_ST is not requested\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   813   * TRUE:  A shadow transfer MCM_ST is requested, but has not yet been executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   814   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   815  IFX_INLINE boolean IfxCcu6_getMultiChannelPWMPatternShadowTransferStatus(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   816  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   817  /** \brief Returns the Timer (T12 / T13) shadow transfer enable status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   818   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   819   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   820   * \return Status (TRUE: enable / FALSE: disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   821   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   822  IFX_INLINE boolean IfxCcu6_getShadowTransferStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   823  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   824  /** \brief Returns the state of the Timer12 capture/compare channels CC6xST (x = 0, 1, 2)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   825   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   826   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   827   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   828   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   829  IFX_INLINE boolean IfxCcu6_getT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   830  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   831  /** \brief Returns the current counting direction of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   832   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   833   * \return direction (up / down)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   834   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   835  IFX_INLINE IfxCcu6_T12CountDirection IfxCcu6_getT12CountDirection(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   836  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   837  /** \brief Returns the state of the Timer13 capture/compare channel CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   838   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   839   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   840   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   841  IFX_INLINE boolean IfxCcu6_getT13CaptureCompareState(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   842  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   843  /** \brief indicates the Timer blocks (T12 / T13) availability
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   844   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   845   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   846   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   847   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   848  IFX_INLINE boolean IfxCcu6_getTimerAvailabilityStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   849  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   850  /** \brief Returns the Timer (T12 / T13) run status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   851   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   852   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   853   * \return Status (stopped / running)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   854   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   855  IFX_INLINE IfxCcu6_TimerRunStatus IfxCcu6_getTimerRunStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   856  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   857  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   858   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   859   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   860   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   861   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   862   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   863  IFX_INLINE boolean IfxCcu6_isModuleSuspended(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   864  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   865  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   866   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   867   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   868   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   869   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   870   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   871  IFX_INLINE void IfxCcu6_setSuspendMode(Ifx_CCU6 *ccu6, IfxCcu6_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   872  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   873  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   874  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   875  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   876  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   877  /** \brief Returns the module index of the selected CCU6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   878   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   879   * \return CCU6 module register address
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   880   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   881  IFX_EXTERN Ifx_CCU6 *IfxCcu6_getAddress(IfxCcu6_Index ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   882  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   883  /** \brief Returns the capture register value of the selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   884   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   885   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   886   * \return current value of the capture register of a selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   887   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   888  IFX_EXTERN uint32 IfxCcu6_getCaptureRegisterValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   889  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   890  /** \brief Returns the capture shadow register value of the selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   891   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   892   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   893   * \return current value of the capture shadow register of a selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   894   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   895  IFX_EXTERN uint32 IfxCcu6_getCaptureShadowRegisterValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   896  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   897  /** \brief Returns CCU6 index
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   898   * \param ccu6 Specifies the pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   899   * \return Returns index. returns -1 in case of unknown index
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   900   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   901  IFX_EXTERN IfxCcu6_Index IfxCcu6_getIndex(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   902  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   903  /** \brief Returns the service request register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   904   * \param ccu6 Specifies Ccu6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   905   * \param serviceRequest Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   906   * \return The service request register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   907   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   908  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxCcu6_getSrcAddress(Ifx_CCU6 *ccu6, IfxCcu6_ServiceRequest serviceRequest);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   909  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   910  /** \brief Returns the current value of the timer register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   911   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   912   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   913   * \return current value of the timer register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   914   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   915  IFX_EXTERN uint32 IfxCcu6_readTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   916  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   917  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   918  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   919  /** \addtogroup IfxLld_Ccu6_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   920   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   921  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   922  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   923  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   924  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   925  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   926  /** \brief Clears all Interrupt flags
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   927   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   928   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   929   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   930  IFX_INLINE void IfxCcu6_clearAllInterruptStatusFlags(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   931  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   932  /** \brief Disables the additional prescaler of 1/256 can be enabled for the prescaler of T12 or T13 to support higher clock frequencies
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   933   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   934   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   935   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   936   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   937  IFX_INLINE void IfxCcu6_disableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   938  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   939  /** \brief Disables the dead time generation for each compare channel (0, 1, 2) of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   940   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   941   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   942   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   943   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   944  IFX_INLINE void IfxCcu6_disableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   945  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   946  /** \brief Disables the delay of the source signal for the sampling of the Hall input pattern (selected by HSYNC)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   947   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   948   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   949   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   950  IFX_INLINE void IfxCcu6_disableDelayBypass(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   951  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   952  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   953   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   954   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   955   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   956   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   957  IFX_INLINE void IfxCcu6_disableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   958  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   959  /** \brief Sets multi channel mode unavailable, A write access to MCMOUTS is ignored
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   960   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   961   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   962   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   963  IFX_INLINE void IfxCcu6_disableMultiChannelMode(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   964  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   965  /** \brief Disables shadow transfers of the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   966   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   967   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   968   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   969   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   970   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   971  IFX_INLINE void IfxCcu6_disableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   972  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   973  /** \brief Disables the single shot-mode of Timers (T12 T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   974   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   975   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   976   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   977   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   978  IFX_INLINE void IfxCcu6_disableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   979  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   980  /** \brief Disables the Inversion of T13 signal for the modulation of the CC6x and COUT6x (x = 0, 1, 2) signals\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   981   * T13 output CC63_O is equal to CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   982   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   983   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   984   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   985  IFX_INLINE void IfxCcu6_disableT13InvertedModulation(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   986  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   987  /** \brief Sets Timer12 block unavailable, A write access to T12PR is ignored
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   988   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   989   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   990   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   991   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   992  IFX_INLINE void IfxCcu6_disableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   993  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   994  /** \brief Disables the trap functionality for the corresponding output signals
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   995   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   996   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   997   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   998   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   999  IFX_INLINE void IfxCcu6_disableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1000  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1001  /** \brief Disables the input (pin) function for the trap generation
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1002   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1003   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1004   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1005  IFX_INLINE void IfxCcu6_disableTrapPin(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1006  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1007  /** \brief Enables the additional prescaler of 1/256 can be enabled for the prescaler of T12 or T13 to support higher clock frequencies
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1008   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1009   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1010   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1011   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1012  IFX_INLINE void IfxCcu6_enableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1013  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1014  /** \brief Sets the single shot-mode of Timers (T12, T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1015   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1016   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1017   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1018   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1019   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1020  IFX_INLINE void IfxCcu6_enableCountEvent(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1021  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1022  /** \brief Enables the dead time generation for each compare channel (0, 1, 2) of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1023   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1024   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1025   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1026   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1027  IFX_INLINE void IfxCcu6_enableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1028  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1029  /** \brief Enables the delay of the source signal for the sampling of the Hall input pattern (selected by HSYNC) by the Dead-Time Counter 0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1030   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1031   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1032   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1033  IFX_INLINE void IfxCcu6_enableDelayBypass(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1034  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1035  /** \brief Sets HP_ST immediately to update bit fields EXPH and CURH by EXPHS and CURHS
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1036   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1037   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1038   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1039  IFX_INLINE void IfxCcu6_enableHallPatternShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1040  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1041  /** \brief Enables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1042   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1043   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1044   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1045   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1046  IFX_INLINE void IfxCcu6_enableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1047  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1048  /** \brief Sets multi channel mode available, A write access to MCMOUTS is executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1049   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1050   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1051   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1052  IFX_INLINE void IfxCcu6_enableMultiChannelMode(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1053  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1054  /** \brief Enables the Multi Channel Mode Availability
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1055   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1056   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1057   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1058  IFX_INLINE void IfxCcu6_enableMultiChannelModeAvailability(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1059  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1060  /** \brief Sets MCM_ST immediately to update bit field MCMP by the value of MCMPS.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1061   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1062   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1063   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1064  IFX_INLINE void IfxCcu6_enableMultiChannelPwmPatternShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1065  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1066  /** \brief Enables the shadow transfer T12_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1067   * becomes set while a T12 one match is detected while counting down
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1068   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1069   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1070   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1071  IFX_INLINE void IfxCcu6_enableMultiChannelT12DowncountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1072  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1073  /** \brief Enables the shadow transfer T12_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1074   * becomes set while a T12 period match is detected while counting up
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1075   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1076   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1077   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1078  IFX_INLINE void IfxCcu6_enableMultiChannelT12UpcountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1079  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1080  /** \brief Enables the shadow transfer T13_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1081   * becomes set while a T13 period match is detected
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1082   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1083   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1084   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1085  IFX_INLINE void IfxCcu6_enableMultiChannelT13UpcountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1086  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1087  /** \brief Enables shadow transfers of the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1088   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1089   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1090   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1091   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1092   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1093  IFX_INLINE void IfxCcu6_enableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1094  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1095  /** \brief Enables the single shot-mode of Timers (T12 T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1096   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1097   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1098   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1099   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1100  IFX_INLINE void IfxCcu6_enableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1101  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1102  /** \brief Enables the Inversion of T13 signal for the modulation of the CC6x and COUT6x (x = 0, 1, 2) signals\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1103   * T13 output CC63_O is equal to CC63ST.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1104   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1105   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1106   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1107  IFX_INLINE void IfxCcu6_enableT13InvertedModulation(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1108  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1109  /** \brief Sets Timer12 block available, A write access to T12PR is executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1110   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1111   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1112   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1113   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1114  IFX_INLINE void IfxCcu6_enableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1115  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1116  /** \brief Enables the trap functionality for the corresponding output signals
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1117   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1118   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1119   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1120   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1121  IFX_INLINE void IfxCcu6_enableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1122  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1123  /** \brief Enables the input (pin) function for the trap generation
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1124   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1125   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1126   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1127  IFX_INLINE void IfxCcu6_enableTrapPin(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1128  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1129  /** \brief selects the actual input signal for the capture compare inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1130   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1131   * \param input Input selection, ( CC6x capture input / CTRAP input / CCPOSx input  )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1132   * \param signal selection of actual input signal for the module inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1133   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1134   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1135  IFX_INLINE void IfxCcu6_setCaptureCompareInputSignal(Ifx_CCU6 *ccu6, IfxCcu6_CaptureCompareInput input, IfxCcu6_CaptureCompareInputSignal signal);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1136  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1137  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1138  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1139  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1140  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1141  /** \brief Disables the modulation of the corresponding output signal by PWM pattern generated by the timers T12 and T13.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1142   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1143   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1144   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1145   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1146   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1147  IFX_EXTERN void IfxCcu6_disableModulationOutput(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1148  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1149  /** \brief Disables the selected CCU6 kernel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1150   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1151   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1152   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1153  IFX_EXTERN void IfxCcu6_disableModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1154  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1155  /** \brief Enables the modulation of the corresponding output signal by PWM pattern generated by the timers T12 and T13.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1156   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1157   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1158   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1159   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1160   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1161  IFX_EXTERN void IfxCcu6_enableModulationOutput(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1162  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1163  /** \brief Enables the selected CCU6 kernel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1164   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1165   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1166   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1167  IFX_EXTERN void IfxCcu6_enableModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1168  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1169  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1170  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1171  /** \addtogroup IfxLld_Ccu6_Std_IO
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1172   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1173  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1174  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1175  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1176  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1177  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1178  /** \brief Initialises a CC60 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1179   * \param cc60In CC60 capture input CC60IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1180   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1181   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1182   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1183  IFX_INLINE void IfxCcu6_initCc60InPin(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1184  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1185  /** \brief Initialises a CC60 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1186   * \param cc60Out CC60 compare output CC0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1187   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1188   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1189   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1190   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1191  IFX_INLINE void IfxCcu6_initCc60OutPin(const IfxCcu6_Cc60_Out *cc60Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1192  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1193  /** \brief Initialises a CC61 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1194   * \param cc61In CC61 capture input CC61IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1195   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1196   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1197   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1198  IFX_INLINE void IfxCcu6_initCc61InPin(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1199  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1200  /** \brief Initialises a CC61 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1201   * \param cc61Out CC61 compare output CC1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1202   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1203   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1204   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1205   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1206  IFX_INLINE void IfxCcu6_initCc61OutPin(const IfxCcu6_Cc61_Out *cc61Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1207  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1208  /** \brief Initialises a CC62 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1209   * \param cc62In CC62 capture input CC62IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1210   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1211   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1212   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1213  IFX_INLINE void IfxCcu6_initCc62InPin(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1214  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1215  /** \brief Initialises a CC62 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1216   * \param cc62Out CC62 compare output CC2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1217   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1218   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1219   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1220   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1221  IFX_INLINE void IfxCcu6_initCc62OutPin(const IfxCcu6_Cc62_Out *cc62Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1222  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1223  /** \brief Initialises a CCPOS0 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1224   * \param ccpos0 CC60 capture input CCPOS0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1225   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1228  IFX_INLINE void IfxCcu6_initCcpos0Pin(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1229  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1230  /** \brief Initialises a CCPOS1 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1231   * \param ccpos1 CC61 capture input CCPOS1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1232   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1233   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1235  IFX_INLINE void IfxCcu6_initCcpos1Pin(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1236  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1237  /** \brief Initialises a CCPOS0 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1238   * \param ccpos2 CC62 capture input CCPOS2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1239   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1242  IFX_INLINE void IfxCcu6_initCcpos2Pin(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1243  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1244  /** \brief Initialises a COUT60 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1245   * \param cout60 CC60 compare output COUT0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1246   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1247   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1248   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1249   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1250  IFX_INLINE void IfxCcu6_initCout60Pin(const IfxCcu6_Cout60_Out *cout60, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1251  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1252  /** \brief Initialises a COUT61 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1253   * \param cout61 CC61 compare output COUT1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1254   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1255   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1256   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1257   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1258  IFX_INLINE void IfxCcu6_initCout61Pin(const IfxCcu6_Cout61_Out *cout61, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1259  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1260  /** \brief Initialises a COUT62 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1261   * \param cout62 CC62 compare output COUT2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1262   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1263   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1264   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1265   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1266  IFX_INLINE void IfxCcu6_initCout62Pin(const IfxCcu6_Cout62_Out *cout62, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1267  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1268  /** \brief Initialises a COUT63 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1269   * \param cout63 CC63 compare output COUT3
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1270   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1271   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1272   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1273   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1274  IFX_INLINE void IfxCcu6_initCout63Pin(const IfxCcu6_Cout63_Out *cout63, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1275  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1276  /** \brief Initialises a CTRAP input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1277   * \param ctrap CTRAP input
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1278   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1279   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1280   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1281  IFX_INLINE void IfxCcu6_initCtrapPin(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1282  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1283  /** \brief Initialises a T12HR input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1284   * \param t12hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1285   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1286   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1287   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1288  IFX_INLINE void IfxCcu6_initT12hrPin(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1289  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1290  /** \brief Initialises a T13HR input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1291   * \param t13hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1292   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1293   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1294   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1295  IFX_INLINE void IfxCcu6_initT13hrPin(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1296  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1297  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1298  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1299  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1300  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1301  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1302  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1303  /** \brief Provides functionality for both setting of CC60 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1304   * \param cc60In CC60 capture input CC60IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1305   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1306   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1307   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1308   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1309  IFX_INLINE void IfxCcu6_initCc60InPinWithPadLevel(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1310  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1311  /** \brief Provides functionality for both setting of CC61 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1312   * \param cc61In CC61 capture input CC61IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1313   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1314   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1315   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1316   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1317  IFX_INLINE void IfxCcu6_initCc61InPinWithPadLevel(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1318  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1319  /** \brief Provides functionality for both setting of CC62 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1320   * \param cc62In CC62 capture input CC62IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1321   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1322   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1323   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1324   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1325  IFX_INLINE void IfxCcu6_initCc62InPinWithPadLevel(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1326  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1327  /** \brief Provides functionality for both setting of CCPOS0 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1328   * \param ccpos0 CC60 capture input CCPOS0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1329   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1330   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1331   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1332   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1333  IFX_INLINE void IfxCcu6_initCcpos0PinWithPadLevel(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1334  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1335  /** \brief Provides functionality for both setting of CCPOS1 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1336   * \param ccpos1 CC61 capture input CCPOS1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1337   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1338   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1339   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1340   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1341  IFX_INLINE void IfxCcu6_initCcpos1PinWithPadLevel(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1342  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1343  /** \brief Provides functionality for both setting of CCPOS2 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1344   * \param ccpos2 CC62 capture input CCPOS2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1345   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1346   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1347   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1348   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1349  IFX_INLINE void IfxCcu6_initCcpos2PinWithPadLevel(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1350  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1351  /** \brief Provides functionality for both setting of CTRAP pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1352   * \param ctrap CTRAP input
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1353   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1354   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1355   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1356   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1357  IFX_INLINE void IfxCcu6_initCtrapPinWithPadLevel(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1358  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1359  /** \brief Provides functionality for both setting of T12HR pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1360   * \param t12hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1361   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1362   * \param padDriver Pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1363   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1364   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1365  IFX_INLINE void IfxCcu6_initT12hrPinWithPadLevel(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1366  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1367  /** \brief Provides functionality for both setting of T13HR pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1368   * \param t13hrIn Timer 13 HR input T13HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1369   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1370   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1371   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1372   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1373  IFX_INLINE void IfxCcu6_initT13hrPinWithPadLevel(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1374  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1375  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1376   * \param ccu6 pointer to CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1377   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1378   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1379   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1380  IFX_INLINE void IfxCcu6_setSleepMode(Ifx_CCU6 *ccu6, IfxCcu6_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1381  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1382  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1383  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1384  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1385  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1386  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1387   * \param ccu6 pointer to ccu6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1388   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1389   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1390  IFX_EXTERN void IfxCcu6_resetModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1391  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1392  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1393  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1394  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1395  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1396  IFX_INLINE void IfxCcu6_clearAllInterruptStatusFlags(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1397  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1398      ccu6->ISR.U = 0xFFFF;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1399  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1400  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1401  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1402  IFX_INLINE void IfxCcu6_clearCounter(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1403  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1404      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1405      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1406      tctr4.B.T12RES = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1407      tctr4.B.T13RES = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1408      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1409  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1410  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1411  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1412  IFX_INLINE void IfxCcu6_clearDeadTimeCounters(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1413  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1414      ccu6->TCTR4.B.DTRES = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1415  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1416  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1417  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1418  IFX_INLINE void IfxCcu6_clearInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1419  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1420      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1421      ccu6->ISR.U = mask;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1422  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1423  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1424  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1425  IFX_INLINE void IfxCcu6_clearT12OneNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1426  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1427      ccu6->ISR.B.RT12OM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1428  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1429  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1430  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1431  IFX_INLINE void IfxCcu6_clearT12PeriodNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1432  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1433      ccu6->ISR.B.RT12PM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1434  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1435  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1436  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1437  IFX_INLINE void IfxCcu6_clearT13CompareNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1438  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1439      ccu6->ISR.B.RT13CM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1440  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1441  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1442  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1443  IFX_INLINE void IfxCcu6_disableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1444  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1445      uint32 shift = ((timer * 8) + 3);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1446      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1447      ccu6->TCTR0.U = ccu6->TCTR0.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1448  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1449  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1450  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1451  IFX_INLINE void IfxCcu6_disableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1452  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1453      uint32 shift = (8 + channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1454      uint32 mask  = (1 << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1455      ccu6->T12DTC.U = ccu6->T12DTC.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1456  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1457  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1458  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1459  IFX_INLINE void IfxCcu6_disableDelayBypass(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1460  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1461      ccu6->T12MSEL.B.DBYP = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1462  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1463  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1464  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1465  IFX_INLINE void IfxCcu6_disableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1466  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1467      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1468      ccu6->IEN.U = ccu6->IEN.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1469  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1470  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1471  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1472  IFX_INLINE void IfxCcu6_disableMultiChannelMode(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1473  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1474      ccu6->MODCTR.B.MCMEN = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1475  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1476  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1477  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1478  IFX_INLINE void IfxCcu6_disableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1479  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1480      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1481      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1482      tctr4.B.T12STD = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1483      tctr4.B.T13STD = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1484      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1485  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1486  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1487  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1488  IFX_INLINE void IfxCcu6_disableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1489  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1490      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1491      ccu6->TCTR2.U = ccu6->TCTR2.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1492  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1493  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1494  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1495  IFX_INLINE void IfxCcu6_disableT13InvertedModulation(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1496  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1497      ccu6->CMPSTAT.B.T13IM = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1498  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1499  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1500  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1501  IFX_INLINE void IfxCcu6_disableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1502  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1503      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1504      ccu6->MCFG.U = ccu6->MCFG.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1505  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1506  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1507  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1508  IFX_INLINE void IfxCcu6_disableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1509  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1510      uint32 shift = (8 + channelOut);    // offset at location TRPCTR.8 for output CC60
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1511      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1512      ccu6->TRPCTR.U = ccu6->TRPCTR.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1513  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1514  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1515  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1516  IFX_INLINE void IfxCcu6_disableTrapPin(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1517  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1518      ccu6->TRPCTR.B.TRPPEN = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1519  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1520  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1521  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1522  IFX_INLINE void IfxCcu6_enableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1523  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1524      uint32 shift = ((timer * 8) + 3);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1525      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1526      ccu6->TCTR0.U = ccu6->TCTR0.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1527  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1528  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1529  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1530  IFX_INLINE void IfxCcu6_enableCountEvent(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1531  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1532      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1533      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1534      tctr4.B.T12CNT = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1535      tctr4.B.T13CNT = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1536      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1537  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1538  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1539  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1540  IFX_INLINE void IfxCcu6_enableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1541  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1542      uint32 shift = (8 + channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1543      uint32 mask  = (1 << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1544      ccu6->T12DTC.U = ccu6->T12DTC.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1545  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1546  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1547  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1548  IFX_INLINE void IfxCcu6_enableDelayBypass(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1549  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1550      ccu6->T12MSEL.B.DBYP = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1551  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1552  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1553  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1554  IFX_INLINE void IfxCcu6_enableHallPatternShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1555  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1556      ccu6->MCMOUTS.B.STRHP = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1557  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1558  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1559  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1560  IFX_INLINE void IfxCcu6_enableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1561  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1562      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1563      ccu6->IEN.U = ccu6->IEN.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1564  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1565  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1566  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1567  IFX_INLINE void IfxCcu6_enableMultiChannelMode(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1568  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1569      ccu6->MODCTR.B.MCMEN = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1570  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1571  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1572  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1573  IFX_INLINE void IfxCcu6_enableMultiChannelModeAvailability(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1574  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1575      ccu6->MCFG.B.MCM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1576  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1577  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1578  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1579  IFX_INLINE void IfxCcu6_enableMultiChannelPwmPatternShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1580  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1581      ccu6->MCMOUTS.B.STRMCM = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1582  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1583  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1584  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1585  IFX_INLINE void IfxCcu6_enableMultiChannelT12DowncountingShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1586  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1587      ccu6->MCMCTR.B.STE12D = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1588  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1589  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1590  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1591  IFX_INLINE void IfxCcu6_enableMultiChannelT12UpcountingShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1592  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1593      ccu6->MCMCTR.B.STE12U = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1594  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1595  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1596  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1597  IFX_INLINE void IfxCcu6_enableMultiChannelT13UpcountingShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1598  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1599      ccu6->MCMCTR.B.STE13U = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1600  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1601  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1602  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1603  IFX_INLINE void IfxCcu6_enableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1604  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1605      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1606      tctr4.U        = 0;
	mov	d15,#0
.L452:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1607      tctr4.B.T12STR = t12;
	insert	d15,d15,#0,#6,#1
.L334:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   438      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   439          uint16                  periodVal;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   440          boolean                 additionalPrescaler;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   441          IfxCcu6_TimerInputClock clockInput;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   442  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   443          periodVal = (uint16)(period - 1);
	add	d8,#-1

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     2   * \file IfxCcu6.h
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     3   * \brief CCU6  basic functionality
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     4   * \ingroup IfxLld_Ccu6
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     5   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     8   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     9   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    11   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    16   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    18   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    25   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    32   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    40   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    41   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    42   * \defgroup IfxLld_Ccu6_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    43   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    44   * \defgroup IfxLld_Ccu6_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    45   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    46   * \defgroup IfxLld_Ccu6_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    47   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    48   * \defgroup IfxLld_Ccu6_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    49   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    50   * \defgroup IfxLld_Ccu6_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    51   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    52   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    53  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    54  #ifndef IFXCCU6_H
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    55  #define IFXCCU6_H 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    56  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    57  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    58  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    59  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    60  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    61  #include "_Impl/IfxCcu6_cfg.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    62  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    63  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    64  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    65  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    66  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    67  #include "_PinMap/IfxCcu6_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    68  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    69  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    70  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    72  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    73  /** \addtogroup IfxLld_Ccu6_Std_Enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    74   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    75  /** \brief Input selection, ( CC6x capture input / CTRAP input / CCPOSx input )\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    76   * Definition in Ifx_CCU.PISEL0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    77   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    78  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    79  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    80      IfxCcu6_CaptureCompareInput_cC60   = IFX_CCU6_PISEL0_ISCC60_OFF,  /**< \brief CC60 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    81      IfxCcu6_CaptureCompareInput_cC61   = IFX_CCU6_PISEL0_ISCC61_OFF,  /**< \brief CC61 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    82      IfxCcu6_CaptureCompareInput_cC62   = IFX_CCU6_PISEL0_ISCC62_OFF,  /**< \brief CC62 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    83      IfxCcu6_CaptureCompareInput_cTRAP  = IFX_CCU6_PISEL0_ISTRP_OFF,   /**< \brief CTRAP input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    84      IfxCcu6_CaptureCompareInput_cCPOS0 = IFX_CCU6_PISEL0_ISPOS0_OFF,  /**< \brief CCPOS0 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    85      IfxCcu6_CaptureCompareInput_cCPOS1 = IFX_CCU6_PISEL0_ISPOS1_OFF,  /**< \brief CCPOS1 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    86      IfxCcu6_CaptureCompareInput_cCPOS2 = IFX_CCU6_PISEL0_ISPOS2_OFF   /**< \brief CCPOS2 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    87  } IfxCcu6_CaptureCompareInput;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    88  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    89  /** \brief Selection of actual input signal for the capture compare inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    90   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    91  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    92  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    93      IfxCcu6_CaptureCompareInputSignal_a = 0,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    94      IfxCcu6_CaptureCompareInputSignal_b = 1,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    95      IfxCcu6_CaptureCompareInputSignal_c = 2,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    96      IfxCcu6_CaptureCompareInputSignal_d = 3   /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    97  } IfxCcu6_CaptureCompareInputSignal;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    98  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    99  /** \brief capture/compare state to set / clear the CC6xST-bits
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   100   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   101  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   102  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   103      IfxCcu6_CaptureCompareState_set    = 0, /**< \brief Bit CC6xST is set */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   104      IfxCcu6_CaptureCompareState_clear  = 1, /**< \brief Bit CC6xST is cleared */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   105      IfxCcu6_CaptureCompareState_toggle = 2  /**< \brief Bit CC6xST is toggled */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   106  } IfxCcu6_CaptureCompareState;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   107  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   108  /** \brief Capture compare output pins
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   109   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   110  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   111  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   112      IfxCcu6_ChannelOut_cc0   = 0,  /**< \brief CC60 compare output CC0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   113      IfxCcu6_ChannelOut_cout0 = 1,  /**< \brief CC60 compare output COUT0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   114      IfxCcu6_ChannelOut_cc1   = 2,  /**< \brief CC61 compare output CC1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   115      IfxCcu6_ChannelOut_cout1 = 3,  /**< \brief CC61 compare output COUT1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   116      IfxCcu6_ChannelOut_cc2   = 4,  /**< \brief CC62 compare output CC2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   117      IfxCcu6_ChannelOut_cout2 = 5,  /**< \brief CC62 compare output COUT2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   118      IfxCcu6_ChannelOut_cout3 = 6   /**< \brief CC63 compare output COUT3 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   119  } IfxCcu6_ChannelOut;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   120  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   121  /** \brief Defines the input event leading to a counting action of the timer (T12 / T13)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   122   * Definition in Ifx_CCU.PISEL2.B.ISCNT12 / Ifx_CCU.PISEL2.B.ISCNT13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   123   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   124  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   125  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   126      IfxCcu6_CountingInputMode_internal        = 0, /**< \brief The T1x prescaler generates the counting events,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   127                                                      * Bit TCTR4.T1xCNT is not taken into account. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   128      IfxCcu6_CountingInputMode_manual          = 1, /**< \brief Bit TCTR4.T1xCNT written with 1 is a counting
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   129                                                      * event. The T1x prescaler is not taken into account */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   130      IfxCcu6_CountingInputMode_externalRising  = 2, /**< \brief The timer T1x is counting each rising edge
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   131                                                      * detected in the selected T1xHR signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   132      IfxCcu6_CountingInputMode_externalFalling = 3  /**< \brief The timer T1x is counting each falling edge
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   133                                                      * detected in the selected T1xHR signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   134  } IfxCcu6_CountingInputMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   135  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   136  /** \brief Controls whether the source signal for the sampling of the Hall input pattern (selected by HSYNC) is delayed by the Dead-Time Counter 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   137   * Definition in Ifx_CCU.T12MSEL.B.DBYP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   138   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   139  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   140  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   141      IfxCcu6_DelayBypass_notActive = 0,  /**< \brief Dead-Time Counter 0 is generating a delay after
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   142                                           * the source signal becomes active */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   143      IfxCcu6_DelayBypass_active    = 1   /**< \brief Dead-Time Counter 0 is not used for a delay */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   144  } IfxCcu6_DelayBypass;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   145  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   146  /** \brief Defines the event of signal T1xHR that can set the run bit T1xR by HW\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   147   * Definition in Ifx_CCU.TCTR2.B.T12RSEL / IIfx_CCU.TCTR2.B.T13RSEL
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   148   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   149  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   150  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   151      IfxCcu6_ExternalTriggerMode_disable     = 0,  /**< \brief The external setting of T1xR is disabled */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   152      IfxCcu6_ExternalTriggerMode_risingEdge  = 1,  /**< \brief Bit T1xR is set if a rising edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   153                                                     * detected. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   154      IfxCcu6_ExternalTriggerMode_fallingEdge = 2,  /**< \brief Bit T1xR is set if a falling edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   155                                                     * detected. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   156      IfxCcu6_ExternalTriggerMode_anyEdge     = 3   /**< \brief Bit T1xR is set if an edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   157                                                     * detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   158  } IfxCcu6_ExternalTriggerMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   159  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   160  /** \brief Defines the source for the sampling of the Hall input pattern and the comparison to the current and the expected Hall pattern bit fields\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   161   * Definition in Ifx_CCU.T12MSEL.HSYNC
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   162   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   163  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   164  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   165      IfxCcu6_HallSensorTriggerMode_permanentCheck    = 0,  /**< \brief Any edge at any of the inputs CCPOSx, independent from any PWM
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   166                                                             * signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   167      IfxCcu6_HallSensorTriggerMode_cM63              = 1,  /**< \brief A T13 Compare-Match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   168      IfxCcu6_HallSensorTriggerMode_t13PM             = 2,  /**< \brief A T13 Period-Match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   169      IfxCcu6_HallSensorTriggerMode_off               = 3,  /**< \brief Hall sampling triggered by HW sources is switched off */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   170      IfxCcu6_HallSensorTriggerMode_t12PMCountingUp   = 4,  /**< \brief A T12 Period-Match while counting up (T12_PM and CDIR = 0) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   171      IfxCcu6_HallSensorTriggerMode_t12OMCountingDown = 5,  /**< \brief A T12 One-Match while counting down (T12_PM and CDIR = 1) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   172      IfxCcu6_HallSensorTriggerMode_cM61CountingUp    = 6,  /**< \brief A T12 Compare-Match of compare channel CC61 while counting up (CM_61 and CDIR = 0) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   173      IfxCcu6_HallSensorTriggerMode_cM61CountingDown  = 7   /**< \brief A T12 Compare-Match of compare channel CC61 while counting down (CM_61 and CDIR = 1) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   174  } IfxCcu6_HallSensorTriggerMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   175  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   176  /** \brief Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   177   * Description in Ifx_CCU.IEN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   178   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   179  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   180  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   181      IfxCcu6_InterruptSource_cc60RisingEdge   = IFX_CCU6_IS_ICC60R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   182                                                                          * enable for channel CC60 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   183      IfxCcu6_InterruptSource_cc60FallingEdge  = IFX_CCU6_IS_ICC60F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   184                                                                          * enable for channel CC60 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   185      IfxCcu6_InterruptSource_cc61RisingEdge   = IFX_CCU6_IS_ICC61R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   186                                                                          * enable for channel CC61 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   187      IfxCcu6_InterruptSource_cc61FallingEdge  = IFX_CCU6_IS_ICC61F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   188                                                                          * enable for channel CC61 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   189      IfxCcu6_InterruptSource_cc62RisingEdge   = IFX_CCU6_IS_ICC62R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   190                                                                          * enable for channel CC62 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   191      IfxCcu6_InterruptSource_cc62FallingEdge  = IFX_CCU6_IS_ICC62F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   192                                                                          * enable for channel CC62 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   193      IfxCcu6_InterruptSource_t12OneMatch      = IFX_CCU6_IS_T12OM_OFF,  /**< \brief Interrupt enable for T12 one-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   194      IfxCcu6_InterruptSource_t12PeriodMatch   = IFX_CCU6_IS_T12PM_OFF,  /**< \brief Interrupt enable for T12 period-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   195      IfxCcu6_InterruptSource_t13CompareMatch  = IFX_CCU6_IS_T13CM_OFF,  /**< \brief Interrupt enable for T13 compare-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   196      IfxCcu6_InterruptSource_t13PeriodMatch   = IFX_CCU6_IS_T13PM_OFF,  /**< \brief Interrupt enable for T13 period-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   197      IfxCcu6_InterruptSource_trap             = IFX_CCU6_IS_TRPF_OFF,   /**< \brief Interrupt enable for trap flag */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   198      IfxCcu6_InterruptSource_correctHallEvent = IFX_CCU6_IS_CHE_OFF,    /**< \brief Interrupt enable for correct hall event */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   199      IfxCcu6_InterruptSource_wrongHallEvent   = IFX_CCU6_IS_WHE_OFF     /**< \brief Interrupt enable for wrong hall event */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   200  } IfxCcu6_InterruptSource;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   201  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   202  /** \brief Selection of the trigger request source (next multi-channel event) for the shadow transfer MCM_ST from MCMPS to MCMP\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   203   * Definition in Ifx_CCU.MCMCTR.B.SWSEL
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   204   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   205  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   206  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   207      IfxCcu6_MultiChannelSwitchingSelect_noEvent                 = 0,  /**< \brief No trigger request will be generated */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   208      IfxCcu6_MultiChannelSwitchingSelect_correctHallEvent        = 1,  /**< \brief Correct Hall pattern detected (CM_CHE) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   209      IfxCcu6_MultiChannelSwitchingSelect_t13PeriodMatch          = 2,  /**< \brief T13 period-match detected (while counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   210      IfxCcu6_MultiChannelSwitchingSelect_t12OneMatch             = 3,  /**< \brief T12 one-match (while counting down) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   211      IfxCcu6_MultiChannelSwitchingSelect_t12Channel1CompareMatch = 4,  /**< \brief T12 channel 1 compare-match detected (phase
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   212                                                                         * delay function) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   213      IfxCcu6_MultiChannelSwitchingSelect_t12PeriodMatch          = 5   /**< \brief T12 period match detected (while counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   214  } IfxCcu6_MultiChannelSwitchingSelect;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   215  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   216  /** \brief Selection of the synchronization mechanism for the shadow transfer event MCM_ST\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   217   * Definition in Ifx_CCU.MCMCTR.B.SWSYN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   218   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   219  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   220  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   221      IfxCcu6_MultiChannelSwitchingSync_direct       = 0,  /**< \brief Direct, the trigger event immediately leads to the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   222                                                            * shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   223      IfxCcu6_MultiChannelSwitchingSync_t13ZeroMatch = 1,  /**< \brief A T13 zero-match triggers the shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   224      IfxCcu6_MultiChannelSwitchingSync_t12ZeroMatch = 2   /**< \brief A T12 zero-match (while counting up) triggers the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   225                                                            * shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   226  } IfxCcu6_MultiChannelSwitchingSync;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   227  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   228  /** \brief Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   229   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   230  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   231  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   232      IfxCcu6_ServiceRequest_0 = 0,      /**< \brief Service request output SR0  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   233      IfxCcu6_ServiceRequest_1,          /**< \brief Service request output SR1  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   234      IfxCcu6_ServiceRequest_2,          /**< \brief Service request output SR2  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   235      IfxCcu6_ServiceRequest_3           /**< \brief Service request output SR3  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   236  } IfxCcu6_ServiceRequest;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   237  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   238  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   239   * Definition in Ifx_CCU6.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   240   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   241  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   242  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   243      IfxCcu6_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   244      IfxCcu6_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   245  } IfxCcu6_SleepMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   246  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   247  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   248   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   249  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   250  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   251      IfxCcu6_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   252      IfxCcu6_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   253      IfxCcu6_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   254  } IfxCcu6_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   255  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   256  /** \brief Capture compare channel of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   257   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   258  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   259  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   260      IfxCcu6_T12Channel_0 = 0,      /**< \brief T12 channel CC60  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   261      IfxCcu6_T12Channel_1,          /**< \brief T12 channel CC61  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   262      IfxCcu6_T12Channel_2           /**< \brief T12 channel CC62  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   263  } IfxCcu6_T12Channel;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   264  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   265  /** \brief The operating mode for the T12 channels are defined by the bit fields Ifx_CCU.T12MSEL.MSEL6x.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   266   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   267  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   268  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   269      IfxCcu6_T12ChannelMode_off                                   = 0,  /**< \brief Capture/Compare modes switched off */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   270      IfxCcu6_T12ChannelMode_compareMode                           = 1,  /**< \brief Compare mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   271      IfxCcu6_T12ChannelMode_doubleRegisterCaptureRisingAndFalling = 4,  /**< \brief CC6xIN rising edge: T12 stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   272      IfxCcu6_T12ChannelMode_doubleRegisterCaptureRising           = 5,  /**< \brief CC6xIN rising edge: CC6nSR stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   273      IfxCcu6_T12ChannelMode_doubleRegisterCaptureFalling          = 6,  /**< \brief CC6xIN rising edge: CC6nSR stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   274      IfxCcu6_T12ChannelMode_doubleRegisterCaptureAny              = 7,  /**< \brief CC6xIN any active edge: CC6nSR stored in CC6xR, any active edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   275      IfxCcu6_T12ChannelMode_hallSensor                            = 8,  /**< \brief Hall Sensor Mode, In order to properly enable this mode, all three MSEL6x fields have to be
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   276                                                                          * programmed to Hall Sensor mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   277      IfxCcu6_T12ChannelMode_hysteresisLikecompare                 = 9,  /**< \brief Hysteresis-like compare mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   278      IfxCcu6_T12ChannelMode_multiInputCaptureRisingAndFalling     = 10, /**< \brief CC6xIN rising edge: T12 stored in CC6xR, CCPOSx falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   279      IfxCcu6_T12ChannelMode_multiInputCaptureFallingAndRising     = 11, /**< \brief CC6xIN falling edge: T12 stored in CC6xR, CCPOSx rising edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   280      IfxCcu6_T12ChannelMode_multiInputCaptureBothRising           = 12, /**< \brief CC6xIN rising edge: T12 stored in CC6xR, CCPOSx rising edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   281      IfxCcu6_T12ChannelMode_multiInputCaptureBothFalling          = 13, /**< \brief CC6xIN falling edge: T12 stored in CC6xR, CCPOSx falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   282      IfxCcu6_T12ChannelMode_multiInputCaptureAny                  = 14  /**< \brief CC6xIN any active edge : T12 stored in CC6xR, CCPOSx any active edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   283  } IfxCcu6_T12ChannelMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   284  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   285  /** \brief Counting direction of Timer12\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   286   * Definition in Ifx_CCU.TCTR0.B.CDIR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   287   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   288  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   289  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   290      IfxCcu6_T12CountDirection_up   = 0, /**< \brief Counting up */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   291      IfxCcu6_T12CountDirection_down = 1  /**< \brief Counting down */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   292  } IfxCcu6_T12CountDirection;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   293  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   294  /** \brief Operating mode of Timer 12\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   295   * Definition in Ifx_CCU.TCTR0.B.CTM
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   296   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   297  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   298  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   299      IfxCcu6_T12CountMode_edgeAligned   = 0, /**< \brief T12 always counts up and continues counting
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   300                                               * from zero after reaching the period value. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   301      IfxCcu6_T12CountMode_centerAligned = 1  /**< \brief T12 counts down after detecting a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   302                                               * and counts up after detecting a one-match. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   303  } IfxCcu6_T12CountMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   304  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   305  /** \brief Delivers additional information to control the automatic set of bit T13R in the case that the trigger action defined by T13 trigger event control (T13TEC) is detected.\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   306   * Definition in Ifx_CCU.TCTR2.B.T13TED
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   307   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   308  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   309  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   310      IfxCcu6_T13TriggerDirection_noAction          = 0,  /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   311      IfxCcu6_T13TriggerDirection_onT12CountingUp   = 1,  /**< \brief while T12 is counting up */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   312      IfxCcu6_T13TriggerDirection_onT12CountingDown = 2,  /**< \brief while T12 is counting down */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   313      IfxCcu6_T13TriggerDirection_anyT12            = 3   /**< \brief independent on the count direction of T12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   314  } IfxCcu6_T13TriggerDirection;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   315  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   316  /** \brief Selects the trigger event to start T13 (automatic set of T13R for synchronization to T12 compare signals)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   317   * Definition in Ifx_CCU.TCTR2.B.T13TEC
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   318   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   319  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   320  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   321      IfxCcu6_T13TriggerEvent_noAction        = 0,  /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   322      IfxCcu6_T13TriggerEvent_onCC60RCompare  = 1,  /**< \brief set T13R on a T12 compare event on channel 0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   323      IfxCcu6_T13TriggerEvent_onCC61RCompare  = 2,  /**< \brief set T13R on a T12 compare event on channel 1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   324      IfxCcu6_T13TriggerEvent_onCC62RCompare  = 3,  /**< \brief set T13R on a T12 compare event on channel 2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   325      IfxCcu6_T13TriggerEvent_onAnyT12Compare = 4,  /**< \brief set T13R on any T12 compare event (ch. 0, 1, 2) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   326      IfxCcu6_T13TriggerEvent_onT12Period     = 5,  /**< \brief set T13R upon a period-match of T12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   327      IfxCcu6_T13TriggerEvent_onT12Zero       = 6,  /**< \brief set T13R upon a zero-match of T12 (while
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   328                                                     * counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   329      IfxCcu6_T13TriggerEvent_onCCPOSxEdge    = 7   /**< \brief set T13R on any edge of inputs CCPOSx */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   330  } IfxCcu6_T13TriggerEvent;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   331  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   332  /** \brief Timer number ( T12 / T13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   333   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   334  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   335  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   336      IfxCcu6_TimerId_t12 = 0,  /**< \brief Timer 12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   337      IfxCcu6_TimerId_t13 = 1   /**< \brief Timer 13 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   338  } IfxCcu6_TimerId;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   339  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   340  /** \brief Selects the input clock for timers (T12 or T13) that is derived from the peripheral clock according to the equation\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   341   * Definition in Ifx_CCU.TCTR0.B.T12CLK / Ifx_CCU.TCTR0.B.T13CLK
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   342   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   343  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   344  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   345      IfxCcu6_TimerInputClock_fcc6      = 0, /**< \brief fcc6 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   346      IfxCcu6_TimerInputClock_fcc6By2   = 1, /**< \brief fcc6 / 2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   347      IfxCcu6_TimerInputClock_fcc6By4   = 2, /**< \brief fcc6 / 4 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   348      IfxCcu6_TimerInputClock_fcc6By8   = 3, /**< \brief fcc6 / 8 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   349      IfxCcu6_TimerInputClock_fcc6By16  = 4, /**< \brief fcc6 / 16 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   350      IfxCcu6_TimerInputClock_fcc6By32  = 5, /**< \brief fcc6 / 32 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   351      IfxCcu6_TimerInputClock_fcc6By64  = 6, /**< \brief fcc6 / 64 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   352      IfxCcu6_TimerInputClock_fcc6By128 = 7  /**< \brief fcc6 / 128 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   353  } IfxCcu6_TimerInputClock;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   354  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   355  /** \brief Selection of actual input signal for the timer inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   356   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   357  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   358  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   359      IfxCcu6_TimerInputSignal_a = 0,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   360      IfxCcu6_TimerInputSignal_b = 1,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   361      IfxCcu6_TimerInputSignal_c = 2,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   362      IfxCcu6_TimerInputSignal_d = 3,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   363      IfxCcu6_TimerInputSignal_e = 0,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   364      IfxCcu6_TimerInputSignal_f = 1,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   365      IfxCcu6_TimerInputSignal_g = 2,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   366      IfxCcu6_TimerInputSignal_h = 3   /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   367  } IfxCcu6_TimerInputSignal;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   368  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   369  /** \brief Timer (T12 / T13) run status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   370   * Definition in Ifx_CCU.TCTR0.B.T12R and Ifx_CCU.TCTR0.B.T13R
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   371   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   373  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   374      IfxCcu6_TimerRunStatus_stopped = 0,  /**< \brief Timer T1x is stopped. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   375      IfxCcu6_TimerRunStatus_running = 1   /**< \brief Timer T1x is running. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   376  } IfxCcu6_TimerRunStatus;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   377  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   378  /** \brief Defines how the trap flag TRPF can be cleared after the trap input condition is no longer valid (either by CTRAP = 1 or by TRPPEN = 0)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   379   * Definition in Ifx_CCU.TRPCTR.B.TRPM2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   380   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   381  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   382  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   383      IfxCcu6_TrapMode_automatic = 0,  /**< \brief Bit TRPF is cleared by HW */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   384      IfxCcu6_TrapMode_manual    = 1   /**< \brief Bit TRPF stays 0, It has to be cleared by SW by writing
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   385                                        * ISR.RTRPF = 1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   386  } IfxCcu6_TrapMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   387  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   388  /** \brief Defines the behavior of the selected outputs when leaving the trap state, after the trap condition has become inactive again\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   389   * Definition in Ifx_CCU.TRPCTR.B.TRPMx (x = 0, 1)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   390   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   391  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   392  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   393      IfxCcu6_TrapState_t12Sync   = 0, /**< \brief The trap state is left when a zero-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   394                                        * of T12 (while counting up) is detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   395      IfxCcu6_TrapState_t13Sync   = 1, /**< \brief The trap state is left when a zeromatch
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   396                                        * of T13 is detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   397      IfxCcu6_TrapState_immediate = 3  /**< \brief The trap state is left immediately without any synchronization to T12 or T13 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   398  } IfxCcu6_TrapState;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   399  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   400  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   401  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   402  /** \addtogroup IfxLld_Ccu6_Std_Operative
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   403   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   404  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   405  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   406  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   407  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   408  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   409  /** \brief Clears the counters of the Timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   410   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   411   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   412   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   413   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   414   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   415  IFX_INLINE void IfxCcu6_clearCounter(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   416  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   417  /** \brief Clears all the three dead-time counter channels to zero.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   418   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   419   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   420   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   421  IFX_INLINE void IfxCcu6_clearDeadTimeCounters(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   422  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   423  /** \brief Clears the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   424   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   425   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   426   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   427   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   428  IFX_INLINE void IfxCcu6_clearInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   429  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   430  /** \brief Clears the T12  One notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   431   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   432   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   433   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   434  IFX_INLINE void IfxCcu6_clearT12OneNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   435  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   436  /** \brief Clears the T12  period notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   437   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   438   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   439   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   440  IFX_INLINE void IfxCcu6_clearT12PeriodNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   441  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   442  /** \brief Clears the T13  compare notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   443   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   444   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   445   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   446  IFX_INLINE void IfxCcu6_clearT13CompareNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   447  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   448  /** \brief Returns the Timer pointer
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   449   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   450   * \return Timer pointer
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   451   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   452  IFX_INLINE volatile uint32 *IfxCcu6_getT12TimerPointer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   453  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   454  /** \brief Returns the status of module enabled or disabled
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   455   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   456   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   457   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   458  IFX_INLINE boolean IfxCcu6_isModuleEnabled(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   459  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   460  /** \brief Returns the status of T12 one notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   461   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   462   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   463   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   464  IFX_INLINE boolean IfxCcu6_isT12OneNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   465  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   466  /** \brief Returns the status of T12 period notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   467   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   468   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   469   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   470  IFX_INLINE boolean IfxCcu6_isT12PeriodNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   471  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   472  /** \brief Returns the status of T13 compare notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   473   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   474   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   475   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   476  IFX_INLINE boolean IfxCcu6_isT13CompareNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   477  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   478  /** \brief Sets the input event leading to a counting action of Timers (T12 / T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   479   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   480   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   481   * \param mode Input event leading to a counting action of the timer (T12 / T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   482   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   483   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   484  IFX_INLINE void IfxCcu6_setCountingInputMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_CountingInputMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   485  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   486  /** \brief Sets the current hall pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   487   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   488   * \param pattern Current hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   489   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   490   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   491  IFX_INLINE void IfxCcu6_setCurrentHallPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   492  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   493  /** \brief Sets the delay between switching from the passive state to the active state of the selected outputs (dead time)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   494   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   495   * \param value Value of the dead time to be induced
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   496   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   497   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   498  IFX_INLINE void IfxCcu6_setDeadTimeValue(Ifx_CCU6 *ccu6, uint8 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   499  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   500  /** \brief Sets the expected hall pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   501   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   502   * \param pattern Expected hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   503   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   504   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   505  IFX_INLINE void IfxCcu6_setExpectedHallPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   506  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   507  /** \brief Sets the event of signal T1xHR that can set the run bit T1xR by HW
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   508   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   509   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   510   * \param mode External trigger mode
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   511   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   512   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   513  IFX_INLINE void IfxCcu6_setExternalRunMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ExternalTriggerMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   514  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   515  /** \brief Sets source for the sampling of the Hall input pattern and the comparison to the current and the expected Hall pattern bit fields
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   516   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   517   * \param mode Hall sensor input trigger event
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   518   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   519   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   520  IFX_INLINE void IfxCcu6_setHallSensorTriggerMode(Ifx_CCU6 *ccu6, IfxCcu6_HallSensorTriggerMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   521  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   522  /** \brief Sets the input clock for timers (T12 or T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   523   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   524   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   525   * \param frequency Input clock for timers (T12 or T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   526   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   527   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   528  IFX_INLINE void IfxCcu6_setInputClockFrequency(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_TimerInputClock frequency);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   529  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   530  /** \brief Sets the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   531   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   532   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   533   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   534   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   535  IFX_INLINE void IfxCcu6_setInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   536  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   537  /** \brief Sets the output pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   538   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   539   * \param pattern Output pattern for the multichannel mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   540   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   541   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   542  IFX_INLINE void IfxCcu6_setMultiChannelPwmPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   543  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   544  /** \brief Sets the trigger request source (next multi-channel event) for the shadow transfer MCM_ST from MCMPS to MCMP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   545   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   546   * \param mode Trigger request source (next multi-channel event) for the shadow transfer MCM_ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   547   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   548   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   549  IFX_INLINE void IfxCcu6_setMultiChannelSwitchingMode(Ifx_CCU6 *ccu6, IfxCcu6_MultiChannelSwitchingSelect mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   550  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   551  /** \brief Sets the synchronization mechanism of the shadow transfer event MCM_ST\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   552   * if it has been requested before (flag R set by an event selected by SWSEL) and if MCMEN = 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   553   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   554   * \param sync Synchronization mechanism of the shadow transfer event MCM_ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   555   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   556   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   557  IFX_INLINE void IfxCcu6_setMultiChannelSwitchingSync(Ifx_CCU6 *ccu6, IfxCcu6_MultiChannelSwitchingSync sync);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   558  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   559  /** \brief Sets the state of the corresponding compare channel, that is considered to be the passive state
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   560   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   561   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   562   * \param state FALSE: passive state when CC6xST == 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   563   * TRUE : passive state when CC6xST == 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   564   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   565   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   566  IFX_INLINE void IfxCcu6_setOutputPassiveState(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut, boolean state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   567  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   568  /** \brief Enables / Disables the single shot mode of Timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   569   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   570   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   571   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   573   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   574  IFX_INLINE void IfxCcu6_setSingleShotModeEnable(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   575  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   576  /** \brief Sets the operating mode of the Timer12 capture/compare channels
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   577   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   578   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   579   * \param mode The operating mode for the T12 channels
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   580   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   581   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   582  IFX_INLINE void IfxCcu6_setT12ChannelMode(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, IfxCcu6_T12ChannelMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   583  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   584  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   585   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   586   * \param mode Operating mode of Timer 12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   587   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   588   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   589  IFX_INLINE void IfxCcu6_setT12CountMode(Ifx_CCU6 *ccu6, IfxCcu6_T12CountMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   590  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   591  /** \brief Sets the 16-bit counter value of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   592   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   593   * \param value Counter value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   595   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   596  IFX_INLINE void IfxCcu6_setT12CounterValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   597  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   598  /** \brief Sets the period value that leads Timer12 counter value to a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   599   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   600   * \param value Period value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   601   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   602   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   603  IFX_INLINE void IfxCcu6_setT12PeriodValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   604  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   605  /** \brief Sets the 16-bit compare value of Timer13 (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   606   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   607   * \param value Compare value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   609   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   610  IFX_INLINE void IfxCcu6_setT13CompareValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   611  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   612  /** \brief Sets the 16-bit counter value of Timer13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   613   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   614   * \param value counter value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   616   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   617  IFX_INLINE void IfxCcu6_setT13CounterValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   618  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   619  /** \brief Sets the period value that leads Timer13 counter value to a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   620   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   621   * \param value period value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   622   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   623   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   624  IFX_INLINE void IfxCcu6_setT13PeriodValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   625  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   626  /** \brief Sets the Timer13 trigger event direction
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   627   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   628   * \param direction T13 trigger event direction
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   630   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   631  IFX_INLINE void IfxCcu6_setT13TriggerEventDirection(Ifx_CCU6 *ccu6, IfxCcu6_T13TriggerDirection direction);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   632  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   633  /** \brief Sets the trigger event to start Timer13 (automatic set of T13R for synchronization to Timer12 compare signals)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   634   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   635   * \param mode The trigger event to start T13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   636   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   637   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   638  IFX_INLINE void IfxCcu6_setT13TriggerEventMode(Ifx_CCU6 *ccu6, IfxCcu6_T13TriggerEvent mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   639  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   640  /** \brief Sets the mode of clearing the trap flag TRPF after the trap input condition is no longer valid
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   641   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   642   * \param mode Trap mode selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   643   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   644   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   645  IFX_INLINE void IfxCcu6_setTrapMode(Ifx_CCU6 *ccu6, IfxCcu6_TrapMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   646  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   647  /** \brief Sets behaviour of the selected outputs when leaving the trap state after the trap condition has become inactive again.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   648   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   649   * \param state Trap state selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   650   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   651   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   652  IFX_INLINE void IfxCcu6_setTrapState(Ifx_CCU6 *ccu6, IfxCcu6_TrapState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   653  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   654  /** \brief starts the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   655   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   656   * \param t12 Timer12 start choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   657   * \param t13 Timer13 start choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   658   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   659   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   660  IFX_INLINE void IfxCcu6_startTimer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   661  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   662  /** \brief starts the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   663   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   664   * \param t12 Timer12 stop choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   665   * \param t13 Timer13 stop choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   666   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   667   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   668  IFX_INLINE void IfxCcu6_stopTimer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   669  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   670  /** \brief Updates the hall pattern (current hall, expected hall, moduleation output), in a single write
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   671   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   672   * \param currentHall Current hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   673   * \param expectedHall Expected hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   674   * \param output Output pattern for the multichannel mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   675   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   676   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   677  IFX_INLINE void IfxCcu6_updateHallPattern(Ifx_CCU6 *ccu6, uint8 currentHall, uint8 expectedHall, uint8 output);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   678  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   679  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   680  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   681  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   682  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   683  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   684   * \param ccu6 Specifies Ccu6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   685   * \param outputLine Output Line
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   686   * \param selectedTrigger Trigger selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   687   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   688   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   689  IFX_EXTERN void IfxCcu6_connectTrigger(Ifx_CCU6 *ccu6, IfxCcu6_TrigOut outputLine, IfxCcu6_TrigSel selectedTrigger);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   690  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   691  /** \brief Routes the interrupt node pointer to the selected service requests
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   692   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   693   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   694   * \param serviceRequest Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   696   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   697  IFX_EXTERN void IfxCcu6_routeInterruptNode(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source, IfxCcu6_ServiceRequest serviceRequest);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   698  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   699  /** \brief Sets the passive state level of the PWM outputs of the module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   700   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   701   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   702   * \param state FALSE: The passive level is 0.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   703   * TRUE : The passive level is 1.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   704   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   705   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   706  IFX_EXTERN void IfxCcu6_setOutputPassiveLevel(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut, boolean state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   707  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   708  /** \brief Sets software-control (independent set and clear conditions) for the Timer12 channel state bits CC6xST (x=0,1,2)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   709   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   710   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   711   * \param state capture/compare state selection (set / clear / toggle)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   712   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   713   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   714  IFX_EXTERN void IfxCcu6_setT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, IfxCcu6_CaptureCompareState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   715  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   716  /** \brief Sets the 16-bit compare value of Timer12 (writes into shadow registers)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   717   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   718   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   719   * \param value Compare value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   720   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   721   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   722  IFX_EXTERN void IfxCcu6_setT12CompareValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   723  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   724  /** \brief Sets the frequency and clock input of the Timer 12.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   725   * Caution: If desired frequency cannot achieved (by successive divisions by 2) :
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   726   * Then the nearest frequency value is set ( >= desired value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   727   * The resulting frequency is captured in the handler element : CaptureFrequency.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   728   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   729   * \param frequency Requested timer frequency in Hz
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   730   * \param period period value to be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   731   * \param countMode Counting mode of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   732   * \return Zero, if the function failed to fulfill requested frequency and resolution\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   733   * Positive, if the function can find settings close to the requested frequency and resolution above the requested
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   734   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   735  IFX_EXTERN float32 IfxCcu6_setT12Frequency(Ifx_CCU6 *ccu6, float32 frequency, Ifx_TimerValue period, IfxCcu6_T12CountMode countMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   736  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   737  /** \brief selects the actual input signal for the timer inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   738   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   739   * \param extInput External input signal for the Timer 12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   740   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   741   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   742  IFX_EXTERN void IfxCcu6_setT12InputSignal(Ifx_CCU6 *ccu6, IfxCcu6_T12hr_In *extInput);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   743  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   744  /** \brief Sets software-control (independent set and clear conditions) for the Timer13 channel state bits CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   745   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   746   * \param state capture/compare state selection (set / clear / toggle)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   747   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   748   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   749  IFX_EXTERN void IfxCcu6_setT13CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_CaptureCompareState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   750  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   751  /** \brief Sets the frequency and clock input of the Timer 13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   752   * Caution: If desired frequency cannot achieved (by successive divisions by 2) :
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   753   * Then the nearest frequency value is set ( >= desired value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   754   * The resulting frequency is captured in the handler element : captureFrequency.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   755   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   756   * \param frequency Requested timer frequency in Hz
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   757   * \param period period value to be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   758   * \return Zero, if the function failed to fulfill requested frequency and resolution\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   759   * Positive, if the function can find settings close to the requested frequency and resolution above the requested
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   760   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   761  IFX_EXTERN float32 IfxCcu6_setT13Frequency(Ifx_CCU6 *ccu6, float32 frequency, Ifx_TimerValue period);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   762  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   763  /** \brief selects the actual input signal for the timer inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   764   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   765   * \param extInput External input signal for the Timer 13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   766   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   767   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   768  IFX_EXTERN void IfxCcu6_setT13InputSignal(Ifx_CCU6 *ccu6, IfxCcu6_T13hr_In *extInput);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   769  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   770  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   771  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   772  /** \addtogroup IfxLld_Ccu6_Std_Utility
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   773   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   774  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   775  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   776  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   777  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   778  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   779  /** \brief Indicate the status of the dead time generation for each compare channel (0, 1, 2) of timer T12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   780   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   781   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   782   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   783   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   784  IFX_INLINE boolean IfxCcu6_getDeadTimeStatus(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   785  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   786  /** \brief Returns the value of the input Hall pattern of the Timer12 capture/compare channels CC6POS6x (x = 0, 1, 2)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   787   * that has been compared to the current and expected value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   788   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   789   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   790   * \return Status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   791   * TRUE : The input CCPOSx has been sampled as 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   792   * FALSE : The input CCPOSx has been sampled as 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   793   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   794  IFX_INLINE boolean IfxCcu6_getHallPatternSampleState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   795  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   796  /** \brief Gets the status of the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   797   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   798   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   799   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   800   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   801  IFX_INLINE boolean IfxCcu6_getInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   802  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   803  /** \brief indicates if the multi-channel mode functionality is available
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   804   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   805   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   806   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   807  IFX_INLINE boolean IfxCcu6_getMultiChannelModeAvailabilityStatus(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   808  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   809  /** \brief Gets the status of the shadow transfer request from MCMPS to MCMP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   810   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   811   * \return Status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   812   * FALSE: A shadow transfer MCM_ST is not requested\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   813   * TRUE:  A shadow transfer MCM_ST is requested, but has not yet been executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   814   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   815  IFX_INLINE boolean IfxCcu6_getMultiChannelPWMPatternShadowTransferStatus(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   816  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   817  /** \brief Returns the Timer (T12 / T13) shadow transfer enable status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   818   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   819   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   820   * \return Status (TRUE: enable / FALSE: disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   821   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   822  IFX_INLINE boolean IfxCcu6_getShadowTransferStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   823  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   824  /** \brief Returns the state of the Timer12 capture/compare channels CC6xST (x = 0, 1, 2)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   825   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   826   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   827   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   828   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   829  IFX_INLINE boolean IfxCcu6_getT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   830  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   831  /** \brief Returns the current counting direction of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   832   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   833   * \return direction (up / down)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   834   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   835  IFX_INLINE IfxCcu6_T12CountDirection IfxCcu6_getT12CountDirection(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   836  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   837  /** \brief Returns the state of the Timer13 capture/compare channel CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   838   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   839   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   840   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   841  IFX_INLINE boolean IfxCcu6_getT13CaptureCompareState(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   842  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   843  /** \brief indicates the Timer blocks (T12 / T13) availability
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   844   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   845   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   846   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   847   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   848  IFX_INLINE boolean IfxCcu6_getTimerAvailabilityStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   849  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   850  /** \brief Returns the Timer (T12 / T13) run status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   851   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   852   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   853   * \return Status (stopped / running)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   854   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   855  IFX_INLINE IfxCcu6_TimerRunStatus IfxCcu6_getTimerRunStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   856  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   857  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   858   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   859   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   860   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   861   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   862   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   863  IFX_INLINE boolean IfxCcu6_isModuleSuspended(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   864  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   865  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   866   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   867   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   868   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   869   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   870   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   871  IFX_INLINE void IfxCcu6_setSuspendMode(Ifx_CCU6 *ccu6, IfxCcu6_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   872  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   873  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   874  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   875  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   876  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   877  /** \brief Returns the module index of the selected CCU6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   878   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   879   * \return CCU6 module register address
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   880   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   881  IFX_EXTERN Ifx_CCU6 *IfxCcu6_getAddress(IfxCcu6_Index ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   882  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   883  /** \brief Returns the capture register value of the selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   884   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   885   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   886   * \return current value of the capture register of a selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   887   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   888  IFX_EXTERN uint32 IfxCcu6_getCaptureRegisterValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   889  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   890  /** \brief Returns the capture shadow register value of the selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   891   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   892   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   893   * \return current value of the capture shadow register of a selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   894   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   895  IFX_EXTERN uint32 IfxCcu6_getCaptureShadowRegisterValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   896  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   897  /** \brief Returns CCU6 index
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   898   * \param ccu6 Specifies the pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   899   * \return Returns index. returns -1 in case of unknown index
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   900   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   901  IFX_EXTERN IfxCcu6_Index IfxCcu6_getIndex(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   902  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   903  /** \brief Returns the service request register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   904   * \param ccu6 Specifies Ccu6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   905   * \param serviceRequest Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   906   * \return The service request register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   907   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   908  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxCcu6_getSrcAddress(Ifx_CCU6 *ccu6, IfxCcu6_ServiceRequest serviceRequest);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   909  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   910  /** \brief Returns the current value of the timer register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   911   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   912   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   913   * \return current value of the timer register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   914   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   915  IFX_EXTERN uint32 IfxCcu6_readTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   916  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   917  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   918  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   919  /** \addtogroup IfxLld_Ccu6_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   920   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   921  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   922  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   923  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   924  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   925  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   926  /** \brief Clears all Interrupt flags
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   927   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   928   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   929   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   930  IFX_INLINE void IfxCcu6_clearAllInterruptStatusFlags(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   931  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   932  /** \brief Disables the additional prescaler of 1/256 can be enabled for the prescaler of T12 or T13 to support higher clock frequencies
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   933   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   934   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   935   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   936   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   937  IFX_INLINE void IfxCcu6_disableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   938  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   939  /** \brief Disables the dead time generation for each compare channel (0, 1, 2) of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   940   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   941   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   942   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   943   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   944  IFX_INLINE void IfxCcu6_disableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   945  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   946  /** \brief Disables the delay of the source signal for the sampling of the Hall input pattern (selected by HSYNC)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   947   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   948   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   949   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   950  IFX_INLINE void IfxCcu6_disableDelayBypass(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   951  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   952  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   953   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   954   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   955   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   956   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   957  IFX_INLINE void IfxCcu6_disableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   958  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   959  /** \brief Sets multi channel mode unavailable, A write access to MCMOUTS is ignored
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   960   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   961   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   962   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   963  IFX_INLINE void IfxCcu6_disableMultiChannelMode(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   964  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   965  /** \brief Disables shadow transfers of the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   966   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   967   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   968   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   969   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   970   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   971  IFX_INLINE void IfxCcu6_disableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   972  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   973  /** \brief Disables the single shot-mode of Timers (T12 T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   974   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   975   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   976   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   977   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   978  IFX_INLINE void IfxCcu6_disableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   979  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   980  /** \brief Disables the Inversion of T13 signal for the modulation of the CC6x and COUT6x (x = 0, 1, 2) signals\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   981   * T13 output CC63_O is equal to CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   982   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   983   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   984   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   985  IFX_INLINE void IfxCcu6_disableT13InvertedModulation(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   986  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   987  /** \brief Sets Timer12 block unavailable, A write access to T12PR is ignored
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   988   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   989   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   990   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   991   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   992  IFX_INLINE void IfxCcu6_disableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   993  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   994  /** \brief Disables the trap functionality for the corresponding output signals
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   995   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   996   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   997   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   998   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   999  IFX_INLINE void IfxCcu6_disableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1000  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1001  /** \brief Disables the input (pin) function for the trap generation
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1002   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1003   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1004   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1005  IFX_INLINE void IfxCcu6_disableTrapPin(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1006  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1007  /** \brief Enables the additional prescaler of 1/256 can be enabled for the prescaler of T12 or T13 to support higher clock frequencies
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1008   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1009   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1010   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1011   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1012  IFX_INLINE void IfxCcu6_enableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1013  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1014  /** \brief Sets the single shot-mode of Timers (T12, T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1015   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1016   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1017   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1018   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1019   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1020  IFX_INLINE void IfxCcu6_enableCountEvent(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1021  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1022  /** \brief Enables the dead time generation for each compare channel (0, 1, 2) of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1023   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1024   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1025   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1026   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1027  IFX_INLINE void IfxCcu6_enableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1028  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1029  /** \brief Enables the delay of the source signal for the sampling of the Hall input pattern (selected by HSYNC) by the Dead-Time Counter 0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1030   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1031   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1032   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1033  IFX_INLINE void IfxCcu6_enableDelayBypass(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1034  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1035  /** \brief Sets HP_ST immediately to update bit fields EXPH and CURH by EXPHS and CURHS
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1036   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1037   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1038   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1039  IFX_INLINE void IfxCcu6_enableHallPatternShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1040  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1041  /** \brief Enables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1042   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1043   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1044   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1045   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1046  IFX_INLINE void IfxCcu6_enableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1047  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1048  /** \brief Sets multi channel mode available, A write access to MCMOUTS is executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1049   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1050   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1051   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1052  IFX_INLINE void IfxCcu6_enableMultiChannelMode(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1053  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1054  /** \brief Enables the Multi Channel Mode Availability
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1055   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1056   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1057   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1058  IFX_INLINE void IfxCcu6_enableMultiChannelModeAvailability(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1059  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1060  /** \brief Sets MCM_ST immediately to update bit field MCMP by the value of MCMPS.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1061   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1062   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1063   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1064  IFX_INLINE void IfxCcu6_enableMultiChannelPwmPatternShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1065  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1066  /** \brief Enables the shadow transfer T12_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1067   * becomes set while a T12 one match is detected while counting down
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1068   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1069   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1070   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1071  IFX_INLINE void IfxCcu6_enableMultiChannelT12DowncountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1072  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1073  /** \brief Enables the shadow transfer T12_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1074   * becomes set while a T12 period match is detected while counting up
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1075   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1076   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1077   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1078  IFX_INLINE void IfxCcu6_enableMultiChannelT12UpcountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1079  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1080  /** \brief Enables the shadow transfer T13_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1081   * becomes set while a T13 period match is detected
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1082   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1083   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1084   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1085  IFX_INLINE void IfxCcu6_enableMultiChannelT13UpcountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1086  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1087  /** \brief Enables shadow transfers of the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1088   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1089   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1090   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1091   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1092   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1093  IFX_INLINE void IfxCcu6_enableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1094  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1095  /** \brief Enables the single shot-mode of Timers (T12 T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1096   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1097   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1098   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1099   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1100  IFX_INLINE void IfxCcu6_enableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1101  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1102  /** \brief Enables the Inversion of T13 signal for the modulation of the CC6x and COUT6x (x = 0, 1, 2) signals\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1103   * T13 output CC63_O is equal to CC63ST.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1104   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1105   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1106   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1107  IFX_INLINE void IfxCcu6_enableT13InvertedModulation(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1108  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1109  /** \brief Sets Timer12 block available, A write access to T12PR is executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1110   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1111   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1112   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1113   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1114  IFX_INLINE void IfxCcu6_enableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1115  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1116  /** \brief Enables the trap functionality for the corresponding output signals
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1117   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1118   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1119   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1120   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1121  IFX_INLINE void IfxCcu6_enableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1122  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1123  /** \brief Enables the input (pin) function for the trap generation
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1124   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1125   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1126   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1127  IFX_INLINE void IfxCcu6_enableTrapPin(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1128  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1129  /** \brief selects the actual input signal for the capture compare inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1130   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1131   * \param input Input selection, ( CC6x capture input / CTRAP input / CCPOSx input  )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1132   * \param signal selection of actual input signal for the module inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1133   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1134   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1135  IFX_INLINE void IfxCcu6_setCaptureCompareInputSignal(Ifx_CCU6 *ccu6, IfxCcu6_CaptureCompareInput input, IfxCcu6_CaptureCompareInputSignal signal);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1136  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1137  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1138  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1139  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1140  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1141  /** \brief Disables the modulation of the corresponding output signal by PWM pattern generated by the timers T12 and T13.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1142   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1143   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1144   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1145   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1146   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1147  IFX_EXTERN void IfxCcu6_disableModulationOutput(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1148  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1149  /** \brief Disables the selected CCU6 kernel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1150   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1151   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1152   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1153  IFX_EXTERN void IfxCcu6_disableModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1154  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1155  /** \brief Enables the modulation of the corresponding output signal by PWM pattern generated by the timers T12 and T13.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1156   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1157   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1158   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1159   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1160   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1161  IFX_EXTERN void IfxCcu6_enableModulationOutput(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1162  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1163  /** \brief Enables the selected CCU6 kernel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1164   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1165   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1166   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1167  IFX_EXTERN void IfxCcu6_enableModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1168  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1169  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1170  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1171  /** \addtogroup IfxLld_Ccu6_Std_IO
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1172   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1173  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1174  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1175  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1176  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1177  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1178  /** \brief Initialises a CC60 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1179   * \param cc60In CC60 capture input CC60IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1180   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1181   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1182   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1183  IFX_INLINE void IfxCcu6_initCc60InPin(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1184  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1185  /** \brief Initialises a CC60 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1186   * \param cc60Out CC60 compare output CC0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1187   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1188   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1189   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1190   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1191  IFX_INLINE void IfxCcu6_initCc60OutPin(const IfxCcu6_Cc60_Out *cc60Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1192  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1193  /** \brief Initialises a CC61 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1194   * \param cc61In CC61 capture input CC61IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1195   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1196   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1197   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1198  IFX_INLINE void IfxCcu6_initCc61InPin(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1199  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1200  /** \brief Initialises a CC61 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1201   * \param cc61Out CC61 compare output CC1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1202   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1203   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1204   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1205   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1206  IFX_INLINE void IfxCcu6_initCc61OutPin(const IfxCcu6_Cc61_Out *cc61Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1207  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1208  /** \brief Initialises a CC62 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1209   * \param cc62In CC62 capture input CC62IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1210   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1211   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1212   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1213  IFX_INLINE void IfxCcu6_initCc62InPin(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1214  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1215  /** \brief Initialises a CC62 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1216   * \param cc62Out CC62 compare output CC2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1217   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1218   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1219   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1220   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1221  IFX_INLINE void IfxCcu6_initCc62OutPin(const IfxCcu6_Cc62_Out *cc62Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1222  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1223  /** \brief Initialises a CCPOS0 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1224   * \param ccpos0 CC60 capture input CCPOS0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1225   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1228  IFX_INLINE void IfxCcu6_initCcpos0Pin(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1229  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1230  /** \brief Initialises a CCPOS1 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1231   * \param ccpos1 CC61 capture input CCPOS1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1232   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1233   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1235  IFX_INLINE void IfxCcu6_initCcpos1Pin(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1236  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1237  /** \brief Initialises a CCPOS0 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1238   * \param ccpos2 CC62 capture input CCPOS2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1239   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1242  IFX_INLINE void IfxCcu6_initCcpos2Pin(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1243  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1244  /** \brief Initialises a COUT60 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1245   * \param cout60 CC60 compare output COUT0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1246   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1247   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1248   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1249   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1250  IFX_INLINE void IfxCcu6_initCout60Pin(const IfxCcu6_Cout60_Out *cout60, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1251  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1252  /** \brief Initialises a COUT61 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1253   * \param cout61 CC61 compare output COUT1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1254   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1255   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1256   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1257   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1258  IFX_INLINE void IfxCcu6_initCout61Pin(const IfxCcu6_Cout61_Out *cout61, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1259  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1260  /** \brief Initialises a COUT62 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1261   * \param cout62 CC62 compare output COUT2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1262   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1263   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1264   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1265   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1266  IFX_INLINE void IfxCcu6_initCout62Pin(const IfxCcu6_Cout62_Out *cout62, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1267  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1268  /** \brief Initialises a COUT63 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1269   * \param cout63 CC63 compare output COUT3
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1270   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1271   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1272   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1273   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1274  IFX_INLINE void IfxCcu6_initCout63Pin(const IfxCcu6_Cout63_Out *cout63, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1275  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1276  /** \brief Initialises a CTRAP input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1277   * \param ctrap CTRAP input
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1278   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1279   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1280   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1281  IFX_INLINE void IfxCcu6_initCtrapPin(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1282  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1283  /** \brief Initialises a T12HR input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1284   * \param t12hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1285   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1286   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1287   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1288  IFX_INLINE void IfxCcu6_initT12hrPin(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1289  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1290  /** \brief Initialises a T13HR input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1291   * \param t13hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1292   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1293   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1294   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1295  IFX_INLINE void IfxCcu6_initT13hrPin(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1296  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1297  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1298  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1299  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1300  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1301  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1302  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1303  /** \brief Provides functionality for both setting of CC60 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1304   * \param cc60In CC60 capture input CC60IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1305   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1306   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1307   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1308   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1309  IFX_INLINE void IfxCcu6_initCc60InPinWithPadLevel(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1310  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1311  /** \brief Provides functionality for both setting of CC61 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1312   * \param cc61In CC61 capture input CC61IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1313   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1314   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1315   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1316   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1317  IFX_INLINE void IfxCcu6_initCc61InPinWithPadLevel(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1318  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1319  /** \brief Provides functionality for both setting of CC62 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1320   * \param cc62In CC62 capture input CC62IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1321   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1322   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1323   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1324   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1325  IFX_INLINE void IfxCcu6_initCc62InPinWithPadLevel(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1326  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1327  /** \brief Provides functionality for both setting of CCPOS0 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1328   * \param ccpos0 CC60 capture input CCPOS0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1329   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1330   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1331   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1332   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1333  IFX_INLINE void IfxCcu6_initCcpos0PinWithPadLevel(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1334  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1335  /** \brief Provides functionality for both setting of CCPOS1 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1336   * \param ccpos1 CC61 capture input CCPOS1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1337   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1338   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1339   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1340   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1341  IFX_INLINE void IfxCcu6_initCcpos1PinWithPadLevel(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1342  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1343  /** \brief Provides functionality for both setting of CCPOS2 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1344   * \param ccpos2 CC62 capture input CCPOS2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1345   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1346   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1347   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1348   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1349  IFX_INLINE void IfxCcu6_initCcpos2PinWithPadLevel(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1350  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1351  /** \brief Provides functionality for both setting of CTRAP pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1352   * \param ctrap CTRAP input
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1353   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1354   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1355   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1356   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1357  IFX_INLINE void IfxCcu6_initCtrapPinWithPadLevel(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1358  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1359  /** \brief Provides functionality for both setting of T12HR pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1360   * \param t12hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1361   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1362   * \param padDriver Pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1363   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1364   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1365  IFX_INLINE void IfxCcu6_initT12hrPinWithPadLevel(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1366  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1367  /** \brief Provides functionality for both setting of T13HR pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1368   * \param t13hrIn Timer 13 HR input T13HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1369   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1370   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1371   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1372   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1373  IFX_INLINE void IfxCcu6_initT13hrPinWithPadLevel(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1374  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1375  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1376   * \param ccu6 pointer to CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1377   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1378   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1379   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1380  IFX_INLINE void IfxCcu6_setSleepMode(Ifx_CCU6 *ccu6, IfxCcu6_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1381  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1382  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1383  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1384  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1385  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1386  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1387   * \param ccu6 pointer to ccu6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1388   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1389   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1390  IFX_EXTERN void IfxCcu6_resetModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1391  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1392  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1393  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1394  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1395  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1396  IFX_INLINE void IfxCcu6_clearAllInterruptStatusFlags(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1397  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1398      ccu6->ISR.U = 0xFFFF;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1399  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1400  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1401  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1402  IFX_INLINE void IfxCcu6_clearCounter(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1403  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1404      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1405      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1406      tctr4.B.T12RES = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1407      tctr4.B.T13RES = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1408      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1409  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1410  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1411  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1412  IFX_INLINE void IfxCcu6_clearDeadTimeCounters(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1413  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1414      ccu6->TCTR4.B.DTRES = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1415  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1416  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1417  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1418  IFX_INLINE void IfxCcu6_clearInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1419  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1420      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1421      ccu6->ISR.U = mask;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1422  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1423  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1424  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1425  IFX_INLINE void IfxCcu6_clearT12OneNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1426  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1427      ccu6->ISR.B.RT12OM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1428  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1429  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1430  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1431  IFX_INLINE void IfxCcu6_clearT12PeriodNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1432  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1433      ccu6->ISR.B.RT12PM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1434  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1435  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1436  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1437  IFX_INLINE void IfxCcu6_clearT13CompareNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1438  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1439      ccu6->ISR.B.RT13CM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1440  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1441  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1442  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1443  IFX_INLINE void IfxCcu6_disableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1444  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1445      uint32 shift = ((timer * 8) + 3);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1446      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1447      ccu6->TCTR0.U = ccu6->TCTR0.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1448  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1449  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1450  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1451  IFX_INLINE void IfxCcu6_disableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1452  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1453      uint32 shift = (8 + channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1454      uint32 mask  = (1 << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1455      ccu6->T12DTC.U = ccu6->T12DTC.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1456  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1457  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1458  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1459  IFX_INLINE void IfxCcu6_disableDelayBypass(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1460  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1461      ccu6->T12MSEL.B.DBYP = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1462  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1463  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1464  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1465  IFX_INLINE void IfxCcu6_disableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1466  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1467      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1468      ccu6->IEN.U = ccu6->IEN.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1469  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1470  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1471  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1472  IFX_INLINE void IfxCcu6_disableMultiChannelMode(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1473  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1474      ccu6->MODCTR.B.MCMEN = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1475  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1476  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1477  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1478  IFX_INLINE void IfxCcu6_disableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1479  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1480      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1481      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1482      tctr4.B.T12STD = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1483      tctr4.B.T13STD = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1484      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1485  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1486  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1487  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1488  IFX_INLINE void IfxCcu6_disableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1489  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1490      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1491      ccu6->TCTR2.U = ccu6->TCTR2.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1492  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1493  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1494  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1495  IFX_INLINE void IfxCcu6_disableT13InvertedModulation(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1496  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1497      ccu6->CMPSTAT.B.T13IM = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1498  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1499  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1500  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1501  IFX_INLINE void IfxCcu6_disableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1502  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1503      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1504      ccu6->MCFG.U = ccu6->MCFG.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1505  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1506  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1507  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1508  IFX_INLINE void IfxCcu6_disableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1509  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1510      uint32 shift = (8 + channelOut);    // offset at location TRPCTR.8 for output CC60
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1511      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1512      ccu6->TRPCTR.U = ccu6->TRPCTR.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1513  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1514  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1515  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1516  IFX_INLINE void IfxCcu6_disableTrapPin(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1517  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1518      ccu6->TRPCTR.B.TRPPEN = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1519  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1520  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1521  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1522  IFX_INLINE void IfxCcu6_enableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1523  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1524      uint32 shift = ((timer * 8) + 3);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1525      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1526      ccu6->TCTR0.U = ccu6->TCTR0.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1527  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1528  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1529  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1530  IFX_INLINE void IfxCcu6_enableCountEvent(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1531  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1532      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1533      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1534      tctr4.B.T12CNT = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1535      tctr4.B.T13CNT = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1536      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1537  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1538  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1539  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1540  IFX_INLINE void IfxCcu6_enableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1541  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1542      uint32 shift = (8 + channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1543      uint32 mask  = (1 << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1544      ccu6->T12DTC.U = ccu6->T12DTC.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1545  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1546  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1547  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1548  IFX_INLINE void IfxCcu6_enableDelayBypass(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1549  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1550      ccu6->T12MSEL.B.DBYP = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1551  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1552  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1553  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1554  IFX_INLINE void IfxCcu6_enableHallPatternShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1555  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1556      ccu6->MCMOUTS.B.STRHP = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1557  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1558  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1559  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1560  IFX_INLINE void IfxCcu6_enableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1561  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1562      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1563      ccu6->IEN.U = ccu6->IEN.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1564  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1565  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1566  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1567  IFX_INLINE void IfxCcu6_enableMultiChannelMode(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1568  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1569      ccu6->MODCTR.B.MCMEN = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1570  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1571  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1572  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1573  IFX_INLINE void IfxCcu6_enableMultiChannelModeAvailability(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1574  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1575      ccu6->MCFG.B.MCM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1576  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1577  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1578  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1579  IFX_INLINE void IfxCcu6_enableMultiChannelPwmPatternShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1580  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1581      ccu6->MCMOUTS.B.STRMCM = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1582  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1583  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1584  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1585  IFX_INLINE void IfxCcu6_enableMultiChannelT12DowncountingShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1586  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1587      ccu6->MCMCTR.B.STE12D = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1588  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1589  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1590  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1591  IFX_INLINE void IfxCcu6_enableMultiChannelT12UpcountingShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1592  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1593      ccu6->MCMCTR.B.STE12U = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1594  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1595  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1596  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1597  IFX_INLINE void IfxCcu6_enableMultiChannelT13UpcountingShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1598  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1599      ccu6->MCMCTR.B.STE13U = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1600  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1601  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1602  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1603  IFX_INLINE void IfxCcu6_enableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1604  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1605      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1606      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1607      tctr4.B.T12STR = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1608      tctr4.B.T13STR = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1609      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1610  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1611  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1612  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1613  IFX_INLINE void IfxCcu6_enableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1614  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1615      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1616      ccu6->TCTR2.U = ccu6->TCTR2.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1617  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1618  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1619  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1620  IFX_INLINE void IfxCcu6_enableT13InvertedModulation(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1621  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1622      ccu6->CMPSTAT.B.T13IM = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1623  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1624  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1625  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1626  IFX_INLINE void IfxCcu6_enableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1627  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1628      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1629      ccu6->MCFG.U = ccu6->MCFG.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1630  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1631  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1632  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1633  IFX_INLINE void IfxCcu6_enableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1634  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1635      uint32 shift = (8 + channelOut);    // offset at location TRPCTR.8 for output CC60
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1636      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1637      ccu6->TRPCTR.U = ccu6->TRPCTR.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1638  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1639  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1640  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1641  IFX_INLINE void IfxCcu6_enableTrapPin(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1642  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1643      ccu6->TRPCTR.B.TRPPEN = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1644  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1645  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1646  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1647  IFX_INLINE boolean IfxCcu6_getDeadTimeStatus(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1648  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1649      uint32 shift = (12 + channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1650      uint32 mask  = 1 << shift;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1651      return (ccu6->T12DTC.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1652  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1653  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1654  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1655  IFX_INLINE boolean IfxCcu6_getHallPatternSampleState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1656  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1657      uint32 shift = (channel + 3);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1658      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1659      return (ccu6->CMPSTAT.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1660  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1661  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1662  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1663  IFX_INLINE boolean IfxCcu6_getInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1664  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1665      uint32 shift = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1666      return (ccu6->IS.U & shift) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1668  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1669  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1670  IFX_INLINE boolean IfxCcu6_getMultiChannelModeAvailabilityStatus(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1672      return ccu6->MCFG.B.MCM != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1674  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1675  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1676  IFX_INLINE boolean IfxCcu6_getMultiChannelPWMPatternShadowTransferStatus(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1678      return ccu6->MCMOUT.B.R != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1680  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1681  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1682  IFX_INLINE boolean IfxCcu6_getShadowTransferStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1684      uint32 shift = ((timer * 8) + 5);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1685      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1686      return (ccu6->TCTR0.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1687  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1688  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1689  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1690  IFX_INLINE boolean IfxCcu6_getT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1691  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1692      uint32 mask = (1U << channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1693      return (ccu6->CMPSTAT.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1694  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1695  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1696  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1697  IFX_INLINE IfxCcu6_T12CountDirection IfxCcu6_getT12CountDirection(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1698  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1699      return (IfxCcu6_T12CountDirection)((ccu6->TCTR0.B.CDIR) ? TRUE : FALSE);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1700  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1701  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1702  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1703  IFX_INLINE volatile uint32 *IfxCcu6_getT12TimerPointer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1704  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1705      return (volatile uint32 *)&ccu6->T12PR;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1706  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1707  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1708  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1709  IFX_INLINE boolean IfxCcu6_getT13CaptureCompareState(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1710  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1711      return ccu6->CMPSTAT.B.CC63ST != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1712  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1713  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1714  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1715  IFX_INLINE boolean IfxCcu6_getTimerAvailabilityStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1716  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1717      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1718      return (ccu6->MCFG.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1719  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1720  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1721  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1722  IFX_INLINE IfxCcu6_TimerRunStatus IfxCcu6_getTimerRunStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1723  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1724      uint32 shift = ((timer * 8) + 4);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1725      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1726      return (IfxCcu6_TimerRunStatus)((ccu6->TCTR0.U & mask) ? TRUE : FALSE);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1728  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1729  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1730  IFX_INLINE void IfxCcu6_initCc60InPin(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1732      IfxPort_setPinModeInput(cc60In->pin.port, cc60In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1733      IfxCcu6_setCaptureCompareInputSignal(cc60In->module, IfxCcu6_CaptureCompareInput_cC60, (IfxCcu6_CaptureCompareInputSignal)cc60In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1734  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1735  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1736  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1737  IFX_INLINE void IfxCcu6_initCc60InPinWithPadLevel(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1738  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1739      IfxPort_setPinModeInput(cc60In->pin.port, cc60In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1740      IfxPort_setPinPadDriver(cc60In->pin.port, cc60In->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1741      IfxCcu6_setCaptureCompareInputSignal(cc60In->module, IfxCcu6_CaptureCompareInput_cC60, (IfxCcu6_CaptureCompareInputSignal)cc60In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1742  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1743  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1744  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1745  IFX_INLINE void IfxCcu6_initCc60OutPin(const IfxCcu6_Cc60_Out *cc60Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1746  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1747      IfxPort_setPinModeOutput(cc60Out->pin.port, cc60Out->pin.pinIndex, outputMode, cc60Out->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1748      IfxPort_setPinPadDriver(cc60Out->pin.port, cc60Out->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1749  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1750  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1751  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1752  IFX_INLINE void IfxCcu6_initCc61InPin(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1753  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1754      IfxPort_setPinModeInput(cc61In->pin.port, cc61In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1755      IfxCcu6_setCaptureCompareInputSignal(cc61In->module, IfxCcu6_CaptureCompareInput_cC61, (IfxCcu6_CaptureCompareInputSignal)cc61In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1756  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1757  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1758  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1759  IFX_INLINE void IfxCcu6_initCc61InPinWithPadLevel(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1760  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1761      IfxPort_setPinModeInput(cc61In->pin.port, cc61In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1762      IfxPort_setPinPadDriver(cc61In->pin.port, cc61In->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1763      IfxCcu6_setCaptureCompareInputSignal(cc61In->module, IfxCcu6_CaptureCompareInput_cC61, (IfxCcu6_CaptureCompareInputSignal)cc61In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1764  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1765  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1766  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1767  IFX_INLINE void IfxCcu6_initCc61OutPin(const IfxCcu6_Cc61_Out *cc61Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1768  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1769      IfxPort_setPinModeOutput(cc61Out->pin.port, cc61Out->pin.pinIndex, outputMode, cc61Out->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1770      IfxPort_setPinPadDriver(cc61Out->pin.port, cc61Out->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1771  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1772  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1773  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1774  IFX_INLINE void IfxCcu6_initCc62InPin(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1775  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1776      IfxPort_setPinModeInput(cc62In->pin.port, cc62In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1777      IfxCcu6_setCaptureCompareInputSignal(cc62In->module, IfxCcu6_CaptureCompareInput_cC62, (IfxCcu6_CaptureCompareInputSignal)cc62In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1778  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1779  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1780  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1781  IFX_INLINE void IfxCcu6_initCc62InPinWithPadLevel(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1782  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1783      IfxPort_setPinModeInput(cc62In->pin.port, cc62In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1784      IfxPort_setPinPadDriver(cc62In->pin.port, cc62In->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1785      IfxCcu6_setCaptureCompareInputSignal(cc62In->module, IfxCcu6_CaptureCompareInput_cC62, (IfxCcu6_CaptureCompareInputSignal)cc62In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1786  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1787  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1788  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1789  IFX_INLINE void IfxCcu6_initCc62OutPin(const IfxCcu6_Cc62_Out *cc62Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1790  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1791      IfxPort_setPinModeOutput(cc62Out->pin.port, cc62Out->pin.pinIndex, outputMode, cc62Out->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1792      IfxPort_setPinPadDriver(cc62Out->pin.port, cc62Out->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1794  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1795  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1796  IFX_INLINE void IfxCcu6_initCcpos0Pin(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1798      IfxPort_setPinModeInput(ccpos0->pin.port, ccpos0->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1799      IfxCcu6_setCaptureCompareInputSignal(ccpos0->module, IfxCcu6_CaptureCompareInput_cCPOS0, (IfxCcu6_CaptureCompareInputSignal)ccpos0->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1800  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1801  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1802  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1803  IFX_INLINE void IfxCcu6_initCcpos0PinWithPadLevel(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1804  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1805      IfxPort_setPinModeInput(ccpos0->pin.port, ccpos0->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1806      IfxPort_setPinPadDriver(ccpos0->pin.port, ccpos0->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1807      IfxCcu6_setCaptureCompareInputSignal(ccpos0->module, IfxCcu6_CaptureCompareInput_cCPOS0, (IfxCcu6_CaptureCompareInputSignal)ccpos0->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1808  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1809  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1810  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1811  IFX_INLINE void IfxCcu6_initCcpos1Pin(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1812  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1813      IfxPort_setPinModeInput(ccpos1->pin.port, ccpos1->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1814      IfxCcu6_setCaptureCompareInputSignal(ccpos1->module, IfxCcu6_CaptureCompareInput_cCPOS1, (IfxCcu6_CaptureCompareInputSignal)ccpos1->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1815  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1816  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1817  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1818  IFX_INLINE void IfxCcu6_initCcpos1PinWithPadLevel(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1819  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1820      IfxPort_setPinModeInput(ccpos1->pin.port, ccpos1->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1821      IfxPort_setPinPadDriver(ccpos1->pin.port, ccpos1->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1822      IfxCcu6_setCaptureCompareInputSignal(ccpos1->module, IfxCcu6_CaptureCompareInput_cCPOS1, (IfxCcu6_CaptureCompareInputSignal)ccpos1->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1824  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1825  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1826  IFX_INLINE void IfxCcu6_initCcpos2Pin(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1828      IfxPort_setPinModeInput(ccpos2->pin.port, ccpos2->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1829      IfxCcu6_setCaptureCompareInputSignal(ccpos2->module, IfxCcu6_CaptureCompareInput_cCPOS2, (IfxCcu6_CaptureCompareInputSignal)ccpos2->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1830  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1831  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1832  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1833  IFX_INLINE void IfxCcu6_initCcpos2PinWithPadLevel(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1834  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1835      IfxPort_setPinModeInput(ccpos2->pin.port, ccpos2->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1836      IfxPort_setPinPadDriver(ccpos2->pin.port, ccpos2->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1837      IfxCcu6_setCaptureCompareInputSignal(ccpos2->module, IfxCcu6_CaptureCompareInput_cCPOS2, (IfxCcu6_CaptureCompareInputSignal)ccpos2->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1838  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1839  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1840  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1841  IFX_INLINE void IfxCcu6_initCout60Pin(const IfxCcu6_Cout60_Out *cout60, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1842  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1843      IfxPort_setPinModeOutput(cout60->pin.port, cout60->pin.pinIndex, outputMode, cout60->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1844      IfxPort_setPinPadDriver(cout60->pin.port, cout60->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1845  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1846  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1847  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1848  IFX_INLINE void IfxCcu6_initCout61Pin(const IfxCcu6_Cout61_Out *cout61, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1849  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1850      IfxPort_setPinModeOutput(cout61->pin.port, cout61->pin.pinIndex, outputMode, cout61->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1851      IfxPort_setPinPadDriver(cout61->pin.port, cout61->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1852  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1853  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1854  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1855  IFX_INLINE void IfxCcu6_initCout62Pin(const IfxCcu6_Cout62_Out *cout62, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1856  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1857      IfxPort_setPinModeOutput(cout62->pin.port, cout62->pin.pinIndex, outputMode, cout62->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1858      IfxPort_setPinPadDriver(cout62->pin.port, cout62->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1860  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1861  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1862  IFX_INLINE void IfxCcu6_initCout63Pin(const IfxCcu6_Cout63_Out *cout63, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1864      IfxPort_setPinModeOutput(cout63->pin.port, cout63->pin.pinIndex, outputMode, cout63->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1865      IfxPort_setPinPadDriver(cout63->pin.port, cout63->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1866  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1867  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1868  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1869  IFX_INLINE void IfxCcu6_initCtrapPin(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1870  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1871      IfxPort_setPinModeInput(ctrap->pin.port, ctrap->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1872      IfxCcu6_setCaptureCompareInputSignal(ctrap->module, IfxCcu6_CaptureCompareInput_cTRAP, (IfxCcu6_CaptureCompareInputSignal)ctrap->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1873  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1874  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1875  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1876  IFX_INLINE void IfxCcu6_initCtrapPinWithPadLevel(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1877  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1878      IfxPort_setPinModeInput(ctrap->pin.port, ctrap->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1879      IfxPort_setPinPadDriver(ctrap->pin.port, ctrap->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1880      IfxCcu6_setCaptureCompareInputSignal(ctrap->module, IfxCcu6_CaptureCompareInput_cTRAP, (IfxCcu6_CaptureCompareInputSignal)ctrap->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1881  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1882  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1883  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1884  IFX_INLINE void IfxCcu6_initT12hrPin(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1885  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1886      IfxPort_setPinModeInput(t12hrIn->pin.port, t12hrIn->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1887      IfxCcu6_setT12InputSignal(t12hrIn->module, t12hrIn);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1888  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1889  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1890  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1891  IFX_INLINE void IfxCcu6_initT12hrPinWithPadLevel(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1892  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1893      IfxPort_setPinModeInput(t12hrIn->pin.port, t12hrIn->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1894      IfxPort_setPinPadDriver(t12hrIn->pin.port, t12hrIn->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1895      IfxCcu6_setT12InputSignal(t12hrIn->module, t12hrIn);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1896  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1897  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1898  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1899  IFX_INLINE void IfxCcu6_initT13hrPin(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1900  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1901      IfxPort_setPinModeInput(t13hrIn->pin.port, t13hrIn->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1902      IfxCcu6_setT13InputSignal(t13hrIn->module, t13hrIn);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1903  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1904  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1905  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1906  IFX_INLINE void IfxCcu6_initT13hrPinWithPadLevel(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1907  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1908      IfxPort_setPinModeInput(t13hrIn->pin.port, t13hrIn->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1909      IfxPort_setPinPadDriver(t13hrIn->pin.port, t13hrIn->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1910      IfxCcu6_setT13InputSignal(t13hrIn->module, t13hrIn);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1911  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1912  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1913  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1914  IFX_INLINE boolean IfxCcu6_isModuleEnabled(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1915  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1916      return ccu6->CLC.B.DISS == 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1917  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1918  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1919  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1920  IFX_INLINE boolean IfxCcu6_isModuleSuspended(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1921  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1922      Ifx_CCU6_OCS ocs;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1923  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1924      // read the status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1925      ocs.U = ccu6->OCS.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1926  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1927      // return the status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1928      return ocs.B.SUSSTA;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1929  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1930  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1931  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1932  IFX_INLINE boolean IfxCcu6_isT12OneNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1933  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1934      return ccu6->IS.B.T12OM != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1935  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1936  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1937  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1938  IFX_INLINE boolean IfxCcu6_isT12PeriodNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1939  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1940      return ccu6->IS.B.T12PM != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1941  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1942  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1943  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1944  IFX_INLINE boolean IfxCcu6_isT13CompareNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1945  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1946      return ccu6->IS.B.T13CM != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1947  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1948  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1949  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1950  IFX_INLINE void IfxCcu6_setCaptureCompareInputSignal(Ifx_CCU6 *ccu6, IfxCcu6_CaptureCompareInput input, IfxCcu6_CaptureCompareInputSignal signal)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1951  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1952      uint32 shift = (uint32)input;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1953      uint32 mask  = (0x3U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1954      ccu6->PISEL0.U = (ccu6->PISEL0.U & ~mask) | ((uint32)signal << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1955  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1956  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1957  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1958  IFX_INLINE void IfxCcu6_setCountingInputMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_CountingInputMode mode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1959  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1960      uint32 shift = ((timer * 2) + 2);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1961      uint32 mask  = (0x3U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1962      ccu6->PISEL2.U = (ccu6->PISEL2.U & ~mask) | ((uint32)mode << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1963  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1964  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1965  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1966  IFX_INLINE void IfxCcu6_setCurrentHallPattern(Ifx_CCU6 *ccu6, uint8 pattern)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1967  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1968      ccu6->MCMOUTS.B.CURHS = pattern;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1969  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1970  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1971  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1972  IFX_INLINE void IfxCcu6_setDeadTimeValue(Ifx_CCU6 *ccu6, uint8 value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1973  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1974      ccu6->T12DTC.B.DTM = value;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1975  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1976  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1977  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1978  IFX_INLINE void IfxCcu6_setExpectedHallPattern(Ifx_CCU6 *ccu6, uint8 pattern)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1979  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1980      ccu6->MCMOUTS.B.EXPHS = pattern;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1981  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1982  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1983  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1984  IFX_INLINE void IfxCcu6_setExternalRunMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ExternalTriggerMode mode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1985  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1986      uint32 shift = ((timer * 2) + 8);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1987      uint32 mask  = (0x3U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1988      ccu6->TCTR2.U = (ccu6->TCTR2.U & ~mask) | ((uint32)mode << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1989  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1990  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1991  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1992  IFX_INLINE void IfxCcu6_setHallSensorTriggerMode(Ifx_CCU6 *ccu6, IfxCcu6_HallSensorTriggerMode mode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1993  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1994      uint32 shift = 12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1995      uint32 mask  = (0x7U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1996      ccu6->T12MSEL.U = (ccu6->T12MSEL.U & ~mask) | ((uint32)mode << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1997  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1998  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1999  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2000  IFX_INLINE void IfxCcu6_setInputClockFrequency(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_TimerInputClock frequency)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2001  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2002      uint32 shift = (timer * 8);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2003      uint32 mask  = (0x7U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2004      ccu6->TCTR0.U = (ccu6->TCTR0.U & ~mask) | ((uint32)frequency << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2005  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2006  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2007  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2008  IFX_INLINE void IfxCcu6_setInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2009  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2010      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2011      ccu6->ISS.U = ccu6->ISS.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2012  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2013  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2014  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2015  IFX_INLINE void IfxCcu6_setMultiChannelPwmPattern(Ifx_CCU6 *ccu6, uint8 pattern)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2016  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2017      ccu6->MCMOUTS.B.MCMPS = pattern;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2018  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2019  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2020  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2021  IFX_INLINE void IfxCcu6_setMultiChannelSwitchingMode(Ifx_CCU6 *ccu6, IfxCcu6_MultiChannelSwitchingSelect mode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2022  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2023      ccu6->MCMCTR.B.SWSEL = mode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2024  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2025  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2026  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2027  IFX_INLINE void IfxCcu6_setMultiChannelSwitchingSync(Ifx_CCU6 *ccu6, IfxCcu6_MultiChannelSwitchingSync sync)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2028  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2029      ccu6->MCMCTR.B.SWSYN = sync;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2030  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2031  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2032  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2033  IFX_INLINE void IfxCcu6_setOutputPassiveState(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut, boolean state)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2034  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2035      uint32 shift = (channelOut + 8); // offset at location CC60PS
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2036      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2037      ccu6->CMPSTAT.U = (ccu6->CMPSTAT.U & ~mask) | ((uint32)state << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2038  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2039  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2040  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2041  IFX_INLINE void IfxCcu6_setSingleShotModeEnable(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2042  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2043      Ifx_CCU6_TCTR2 tctr2;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2044      tctr2.U        = ccu6->TCTR2.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2045      tctr2.B.T12SSC = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2046      tctr2.B.T13SSC = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2047      ccu6->TCTR2.U  = tctr2.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2048  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2049  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2050  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2051  IFX_INLINE void IfxCcu6_setSleepMode(Ifx_CCU6 *ccu6, IfxCcu6_SleepMode mode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2052  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2053      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2054      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2055      ccu6->CLC.B.EDIS = mode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2056      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2057  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2058  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2059  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2060  IFX_INLINE void IfxCcu6_setSuspendMode(Ifx_CCU6 *ccu6, IfxCcu6_SuspendMode mode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2061  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2062      Ifx_CCU6_OCS ocs;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2063  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2064      // remove protection and configure the suspend mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2065      ocs.B.SUS_P = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2066      ocs.B.SUS   = mode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2067      ccu6->OCS.U = ocs.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2068  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2069  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2070  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2071  IFX_INLINE void IfxCcu6_setT12ChannelMode(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, IfxCcu6_T12ChannelMode mode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2072  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2073      uint32 shift = (4 * channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2074      uint32 mask  = (0xFU << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2075      ccu6->T12MSEL.U = (ccu6->T12MSEL.U & ~mask) | ((uint32)mode << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2076  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2077  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2078  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2079  IFX_INLINE void IfxCcu6_setT12CountMode(Ifx_CCU6 *ccu6, IfxCcu6_T12CountMode mode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2080  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2081      ccu6->TCTR0.B.CTM = mode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2082  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2083  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2084  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2085  IFX_INLINE void IfxCcu6_setT12CounterValue(Ifx_CCU6 *ccu6, uint16 value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2086  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2087      ccu6->T12.B.T12CV = value;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2088  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2089  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2090  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2091  IFX_INLINE void IfxCcu6_setT12PeriodValue(Ifx_CCU6 *ccu6, uint16 value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2092  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2093      ccu6->T12PR.B.T12PV = value;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2094  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2095  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2096  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2097  IFX_INLINE void IfxCcu6_setT13CompareValue(Ifx_CCU6 *ccu6, uint16 value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2098  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2099      ccu6->CC63SR.B.CCS = value;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2100  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2101  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2102  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2103  IFX_INLINE void IfxCcu6_setT13CounterValue(Ifx_CCU6 *ccu6, uint16 value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2104  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2105      ccu6->T13.B.T13CV = value;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2106  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2107  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2108  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2109  IFX_INLINE void IfxCcu6_setT13PeriodValue(Ifx_CCU6 *ccu6, uint16 value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2110  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2111      ccu6->T13PR.B.T13PV = value;
	st.h	[a15]84,d8
.L339:
	insert	d15,d15,#1,#14,#1
	st.w	[a15]120,d15
.L340:
	ld.w	d15,[a15]112
.L453:
	insert	d1,d15,#0,#8,#3
.L574:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   444          IfxCcu6_setT13PeriodValue(ccu6, periodVal);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   445          IfxCcu6_enableShadowTransfer(ccu6, FALSE, TRUE);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   446  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   447          clockInput = (IfxCcu6_TimerInputClock)(prescaler & 0x7U);
	and	d15,d0,#7
.L575:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     2   * \file IfxCcu6.h
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     3   * \brief CCU6  basic functionality
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     4   * \ingroup IfxLld_Ccu6
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     5   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     8   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     9   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    11   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    16   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    18   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    25   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    32   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    40   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    41   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    42   * \defgroup IfxLld_Ccu6_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    43   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    44   * \defgroup IfxLld_Ccu6_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    45   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    46   * \defgroup IfxLld_Ccu6_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    47   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    48   * \defgroup IfxLld_Ccu6_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    49   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    50   * \defgroup IfxLld_Ccu6_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    51   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    52   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    53  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    54  #ifndef IFXCCU6_H
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    55  #define IFXCCU6_H 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    56  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    57  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    58  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    59  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    60  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    61  #include "_Impl/IfxCcu6_cfg.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    62  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    63  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    64  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    65  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    66  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    67  #include "_PinMap/IfxCcu6_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    68  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    69  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    70  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    72  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    73  /** \addtogroup IfxLld_Ccu6_Std_Enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    74   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    75  /** \brief Input selection, ( CC6x capture input / CTRAP input / CCPOSx input )\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    76   * Definition in Ifx_CCU.PISEL0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    77   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    78  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    79  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    80      IfxCcu6_CaptureCompareInput_cC60   = IFX_CCU6_PISEL0_ISCC60_OFF,  /**< \brief CC60 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    81      IfxCcu6_CaptureCompareInput_cC61   = IFX_CCU6_PISEL0_ISCC61_OFF,  /**< \brief CC61 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    82      IfxCcu6_CaptureCompareInput_cC62   = IFX_CCU6_PISEL0_ISCC62_OFF,  /**< \brief CC62 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    83      IfxCcu6_CaptureCompareInput_cTRAP  = IFX_CCU6_PISEL0_ISTRP_OFF,   /**< \brief CTRAP input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    84      IfxCcu6_CaptureCompareInput_cCPOS0 = IFX_CCU6_PISEL0_ISPOS0_OFF,  /**< \brief CCPOS0 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    85      IfxCcu6_CaptureCompareInput_cCPOS1 = IFX_CCU6_PISEL0_ISPOS1_OFF,  /**< \brief CCPOS1 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    86      IfxCcu6_CaptureCompareInput_cCPOS2 = IFX_CCU6_PISEL0_ISPOS2_OFF   /**< \brief CCPOS2 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    87  } IfxCcu6_CaptureCompareInput;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    88  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    89  /** \brief Selection of actual input signal for the capture compare inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    90   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    91  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    92  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    93      IfxCcu6_CaptureCompareInputSignal_a = 0,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    94      IfxCcu6_CaptureCompareInputSignal_b = 1,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    95      IfxCcu6_CaptureCompareInputSignal_c = 2,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    96      IfxCcu6_CaptureCompareInputSignal_d = 3   /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    97  } IfxCcu6_CaptureCompareInputSignal;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    98  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    99  /** \brief capture/compare state to set / clear the CC6xST-bits
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   100   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   101  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   102  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   103      IfxCcu6_CaptureCompareState_set    = 0, /**< \brief Bit CC6xST is set */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   104      IfxCcu6_CaptureCompareState_clear  = 1, /**< \brief Bit CC6xST is cleared */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   105      IfxCcu6_CaptureCompareState_toggle = 2  /**< \brief Bit CC6xST is toggled */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   106  } IfxCcu6_CaptureCompareState;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   107  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   108  /** \brief Capture compare output pins
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   109   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   110  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   111  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   112      IfxCcu6_ChannelOut_cc0   = 0,  /**< \brief CC60 compare output CC0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   113      IfxCcu6_ChannelOut_cout0 = 1,  /**< \brief CC60 compare output COUT0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   114      IfxCcu6_ChannelOut_cc1   = 2,  /**< \brief CC61 compare output CC1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   115      IfxCcu6_ChannelOut_cout1 = 3,  /**< \brief CC61 compare output COUT1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   116      IfxCcu6_ChannelOut_cc2   = 4,  /**< \brief CC62 compare output CC2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   117      IfxCcu6_ChannelOut_cout2 = 5,  /**< \brief CC62 compare output COUT2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   118      IfxCcu6_ChannelOut_cout3 = 6   /**< \brief CC63 compare output COUT3 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   119  } IfxCcu6_ChannelOut;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   120  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   121  /** \brief Defines the input event leading to a counting action of the timer (T12 / T13)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   122   * Definition in Ifx_CCU.PISEL2.B.ISCNT12 / Ifx_CCU.PISEL2.B.ISCNT13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   123   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   124  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   125  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   126      IfxCcu6_CountingInputMode_internal        = 0, /**< \brief The T1x prescaler generates the counting events,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   127                                                      * Bit TCTR4.T1xCNT is not taken into account. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   128      IfxCcu6_CountingInputMode_manual          = 1, /**< \brief Bit TCTR4.T1xCNT written with 1 is a counting
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   129                                                      * event. The T1x prescaler is not taken into account */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   130      IfxCcu6_CountingInputMode_externalRising  = 2, /**< \brief The timer T1x is counting each rising edge
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   131                                                      * detected in the selected T1xHR signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   132      IfxCcu6_CountingInputMode_externalFalling = 3  /**< \brief The timer T1x is counting each falling edge
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   133                                                      * detected in the selected T1xHR signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   134  } IfxCcu6_CountingInputMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   135  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   136  /** \brief Controls whether the source signal for the sampling of the Hall input pattern (selected by HSYNC) is delayed by the Dead-Time Counter 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   137   * Definition in Ifx_CCU.T12MSEL.B.DBYP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   138   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   139  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   140  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   141      IfxCcu6_DelayBypass_notActive = 0,  /**< \brief Dead-Time Counter 0 is generating a delay after
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   142                                           * the source signal becomes active */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   143      IfxCcu6_DelayBypass_active    = 1   /**< \brief Dead-Time Counter 0 is not used for a delay */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   144  } IfxCcu6_DelayBypass;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   145  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   146  /** \brief Defines the event of signal T1xHR that can set the run bit T1xR by HW\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   147   * Definition in Ifx_CCU.TCTR2.B.T12RSEL / IIfx_CCU.TCTR2.B.T13RSEL
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   148   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   149  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   150  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   151      IfxCcu6_ExternalTriggerMode_disable     = 0,  /**< \brief The external setting of T1xR is disabled */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   152      IfxCcu6_ExternalTriggerMode_risingEdge  = 1,  /**< \brief Bit T1xR is set if a rising edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   153                                                     * detected. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   154      IfxCcu6_ExternalTriggerMode_fallingEdge = 2,  /**< \brief Bit T1xR is set if a falling edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   155                                                     * detected. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   156      IfxCcu6_ExternalTriggerMode_anyEdge     = 3   /**< \brief Bit T1xR is set if an edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   157                                                     * detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   158  } IfxCcu6_ExternalTriggerMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   159  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   160  /** \brief Defines the source for the sampling of the Hall input pattern and the comparison to the current and the expected Hall pattern bit fields\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   161   * Definition in Ifx_CCU.T12MSEL.HSYNC
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   162   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   163  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   164  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   165      IfxCcu6_HallSensorTriggerMode_permanentCheck    = 0,  /**< \brief Any edge at any of the inputs CCPOSx, independent from any PWM
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   166                                                             * signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   167      IfxCcu6_HallSensorTriggerMode_cM63              = 1,  /**< \brief A T13 Compare-Match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   168      IfxCcu6_HallSensorTriggerMode_t13PM             = 2,  /**< \brief A T13 Period-Match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   169      IfxCcu6_HallSensorTriggerMode_off               = 3,  /**< \brief Hall sampling triggered by HW sources is switched off */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   170      IfxCcu6_HallSensorTriggerMode_t12PMCountingUp   = 4,  /**< \brief A T12 Period-Match while counting up (T12_PM and CDIR = 0) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   171      IfxCcu6_HallSensorTriggerMode_t12OMCountingDown = 5,  /**< \brief A T12 One-Match while counting down (T12_PM and CDIR = 1) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   172      IfxCcu6_HallSensorTriggerMode_cM61CountingUp    = 6,  /**< \brief A T12 Compare-Match of compare channel CC61 while counting up (CM_61 and CDIR = 0) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   173      IfxCcu6_HallSensorTriggerMode_cM61CountingDown  = 7   /**< \brief A T12 Compare-Match of compare channel CC61 while counting down (CM_61 and CDIR = 1) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   174  } IfxCcu6_HallSensorTriggerMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   175  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   176  /** \brief Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   177   * Description in Ifx_CCU.IEN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   178   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   179  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   180  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   181      IfxCcu6_InterruptSource_cc60RisingEdge   = IFX_CCU6_IS_ICC60R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   182                                                                          * enable for channel CC60 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   183      IfxCcu6_InterruptSource_cc60FallingEdge  = IFX_CCU6_IS_ICC60F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   184                                                                          * enable for channel CC60 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   185      IfxCcu6_InterruptSource_cc61RisingEdge   = IFX_CCU6_IS_ICC61R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   186                                                                          * enable for channel CC61 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   187      IfxCcu6_InterruptSource_cc61FallingEdge  = IFX_CCU6_IS_ICC61F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   188                                                                          * enable for channel CC61 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   189      IfxCcu6_InterruptSource_cc62RisingEdge   = IFX_CCU6_IS_ICC62R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   190                                                                          * enable for channel CC62 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   191      IfxCcu6_InterruptSource_cc62FallingEdge  = IFX_CCU6_IS_ICC62F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   192                                                                          * enable for channel CC62 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   193      IfxCcu6_InterruptSource_t12OneMatch      = IFX_CCU6_IS_T12OM_OFF,  /**< \brief Interrupt enable for T12 one-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   194      IfxCcu6_InterruptSource_t12PeriodMatch   = IFX_CCU6_IS_T12PM_OFF,  /**< \brief Interrupt enable for T12 period-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   195      IfxCcu6_InterruptSource_t13CompareMatch  = IFX_CCU6_IS_T13CM_OFF,  /**< \brief Interrupt enable for T13 compare-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   196      IfxCcu6_InterruptSource_t13PeriodMatch   = IFX_CCU6_IS_T13PM_OFF,  /**< \brief Interrupt enable for T13 period-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   197      IfxCcu6_InterruptSource_trap             = IFX_CCU6_IS_TRPF_OFF,   /**< \brief Interrupt enable for trap flag */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   198      IfxCcu6_InterruptSource_correctHallEvent = IFX_CCU6_IS_CHE_OFF,    /**< \brief Interrupt enable for correct hall event */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   199      IfxCcu6_InterruptSource_wrongHallEvent   = IFX_CCU6_IS_WHE_OFF     /**< \brief Interrupt enable for wrong hall event */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   200  } IfxCcu6_InterruptSource;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   201  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   202  /** \brief Selection of the trigger request source (next multi-channel event) for the shadow transfer MCM_ST from MCMPS to MCMP\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   203   * Definition in Ifx_CCU.MCMCTR.B.SWSEL
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   204   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   205  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   206  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   207      IfxCcu6_MultiChannelSwitchingSelect_noEvent                 = 0,  /**< \brief No trigger request will be generated */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   208      IfxCcu6_MultiChannelSwitchingSelect_correctHallEvent        = 1,  /**< \brief Correct Hall pattern detected (CM_CHE) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   209      IfxCcu6_MultiChannelSwitchingSelect_t13PeriodMatch          = 2,  /**< \brief T13 period-match detected (while counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   210      IfxCcu6_MultiChannelSwitchingSelect_t12OneMatch             = 3,  /**< \brief T12 one-match (while counting down) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   211      IfxCcu6_MultiChannelSwitchingSelect_t12Channel1CompareMatch = 4,  /**< \brief T12 channel 1 compare-match detected (phase
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   212                                                                         * delay function) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   213      IfxCcu6_MultiChannelSwitchingSelect_t12PeriodMatch          = 5   /**< \brief T12 period match detected (while counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   214  } IfxCcu6_MultiChannelSwitchingSelect;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   215  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   216  /** \brief Selection of the synchronization mechanism for the shadow transfer event MCM_ST\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   217   * Definition in Ifx_CCU.MCMCTR.B.SWSYN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   218   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   219  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   220  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   221      IfxCcu6_MultiChannelSwitchingSync_direct       = 0,  /**< \brief Direct, the trigger event immediately leads to the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   222                                                            * shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   223      IfxCcu6_MultiChannelSwitchingSync_t13ZeroMatch = 1,  /**< \brief A T13 zero-match triggers the shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   224      IfxCcu6_MultiChannelSwitchingSync_t12ZeroMatch = 2   /**< \brief A T12 zero-match (while counting up) triggers the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   225                                                            * shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   226  } IfxCcu6_MultiChannelSwitchingSync;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   227  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   228  /** \brief Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   229   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   230  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   231  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   232      IfxCcu6_ServiceRequest_0 = 0,      /**< \brief Service request output SR0  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   233      IfxCcu6_ServiceRequest_1,          /**< \brief Service request output SR1  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   234      IfxCcu6_ServiceRequest_2,          /**< \brief Service request output SR2  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   235      IfxCcu6_ServiceRequest_3           /**< \brief Service request output SR3  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   236  } IfxCcu6_ServiceRequest;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   237  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   238  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   239   * Definition in Ifx_CCU6.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   240   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   241  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   242  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   243      IfxCcu6_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   244      IfxCcu6_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   245  } IfxCcu6_SleepMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   246  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   247  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   248   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   249  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   250  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   251      IfxCcu6_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   252      IfxCcu6_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   253      IfxCcu6_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   254  } IfxCcu6_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   255  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   256  /** \brief Capture compare channel of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   257   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   258  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   259  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   260      IfxCcu6_T12Channel_0 = 0,      /**< \brief T12 channel CC60  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   261      IfxCcu6_T12Channel_1,          /**< \brief T12 channel CC61  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   262      IfxCcu6_T12Channel_2           /**< \brief T12 channel CC62  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   263  } IfxCcu6_T12Channel;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   264  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   265  /** \brief The operating mode for the T12 channels are defined by the bit fields Ifx_CCU.T12MSEL.MSEL6x.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   266   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   267  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   268  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   269      IfxCcu6_T12ChannelMode_off                                   = 0,  /**< \brief Capture/Compare modes switched off */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   270      IfxCcu6_T12ChannelMode_compareMode                           = 1,  /**< \brief Compare mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   271      IfxCcu6_T12ChannelMode_doubleRegisterCaptureRisingAndFalling = 4,  /**< \brief CC6xIN rising edge: T12 stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   272      IfxCcu6_T12ChannelMode_doubleRegisterCaptureRising           = 5,  /**< \brief CC6xIN rising edge: CC6nSR stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   273      IfxCcu6_T12ChannelMode_doubleRegisterCaptureFalling          = 6,  /**< \brief CC6xIN rising edge: CC6nSR stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   274      IfxCcu6_T12ChannelMode_doubleRegisterCaptureAny              = 7,  /**< \brief CC6xIN any active edge: CC6nSR stored in CC6xR, any active edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   275      IfxCcu6_T12ChannelMode_hallSensor                            = 8,  /**< \brief Hall Sensor Mode, In order to properly enable this mode, all three MSEL6x fields have to be
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   276                                                                          * programmed to Hall Sensor mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   277      IfxCcu6_T12ChannelMode_hysteresisLikecompare                 = 9,  /**< \brief Hysteresis-like compare mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   278      IfxCcu6_T12ChannelMode_multiInputCaptureRisingAndFalling     = 10, /**< \brief CC6xIN rising edge: T12 stored in CC6xR, CCPOSx falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   279      IfxCcu6_T12ChannelMode_multiInputCaptureFallingAndRising     = 11, /**< \brief CC6xIN falling edge: T12 stored in CC6xR, CCPOSx rising edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   280      IfxCcu6_T12ChannelMode_multiInputCaptureBothRising           = 12, /**< \brief CC6xIN rising edge: T12 stored in CC6xR, CCPOSx rising edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   281      IfxCcu6_T12ChannelMode_multiInputCaptureBothFalling          = 13, /**< \brief CC6xIN falling edge: T12 stored in CC6xR, CCPOSx falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   282      IfxCcu6_T12ChannelMode_multiInputCaptureAny                  = 14  /**< \brief CC6xIN any active edge : T12 stored in CC6xR, CCPOSx any active edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   283  } IfxCcu6_T12ChannelMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   284  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   285  /** \brief Counting direction of Timer12\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   286   * Definition in Ifx_CCU.TCTR0.B.CDIR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   287   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   288  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   289  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   290      IfxCcu6_T12CountDirection_up   = 0, /**< \brief Counting up */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   291      IfxCcu6_T12CountDirection_down = 1  /**< \brief Counting down */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   292  } IfxCcu6_T12CountDirection;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   293  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   294  /** \brief Operating mode of Timer 12\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   295   * Definition in Ifx_CCU.TCTR0.B.CTM
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   296   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   297  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   298  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   299      IfxCcu6_T12CountMode_edgeAligned   = 0, /**< \brief T12 always counts up and continues counting
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   300                                               * from zero after reaching the period value. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   301      IfxCcu6_T12CountMode_centerAligned = 1  /**< \brief T12 counts down after detecting a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   302                                               * and counts up after detecting a one-match. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   303  } IfxCcu6_T12CountMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   304  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   305  /** \brief Delivers additional information to control the automatic set of bit T13R in the case that the trigger action defined by T13 trigger event control (T13TEC) is detected.\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   306   * Definition in Ifx_CCU.TCTR2.B.T13TED
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   307   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   308  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   309  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   310      IfxCcu6_T13TriggerDirection_noAction          = 0,  /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   311      IfxCcu6_T13TriggerDirection_onT12CountingUp   = 1,  /**< \brief while T12 is counting up */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   312      IfxCcu6_T13TriggerDirection_onT12CountingDown = 2,  /**< \brief while T12 is counting down */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   313      IfxCcu6_T13TriggerDirection_anyT12            = 3   /**< \brief independent on the count direction of T12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   314  } IfxCcu6_T13TriggerDirection;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   315  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   316  /** \brief Selects the trigger event to start T13 (automatic set of T13R for synchronization to T12 compare signals)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   317   * Definition in Ifx_CCU.TCTR2.B.T13TEC
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   318   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   319  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   320  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   321      IfxCcu6_T13TriggerEvent_noAction        = 0,  /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   322      IfxCcu6_T13TriggerEvent_onCC60RCompare  = 1,  /**< \brief set T13R on a T12 compare event on channel 0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   323      IfxCcu6_T13TriggerEvent_onCC61RCompare  = 2,  /**< \brief set T13R on a T12 compare event on channel 1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   324      IfxCcu6_T13TriggerEvent_onCC62RCompare  = 3,  /**< \brief set T13R on a T12 compare event on channel 2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   325      IfxCcu6_T13TriggerEvent_onAnyT12Compare = 4,  /**< \brief set T13R on any T12 compare event (ch. 0, 1, 2) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   326      IfxCcu6_T13TriggerEvent_onT12Period     = 5,  /**< \brief set T13R upon a period-match of T12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   327      IfxCcu6_T13TriggerEvent_onT12Zero       = 6,  /**< \brief set T13R upon a zero-match of T12 (while
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   328                                                     * counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   329      IfxCcu6_T13TriggerEvent_onCCPOSxEdge    = 7   /**< \brief set T13R on any edge of inputs CCPOSx */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   330  } IfxCcu6_T13TriggerEvent;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   331  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   332  /** \brief Timer number ( T12 / T13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   333   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   334  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   335  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   336      IfxCcu6_TimerId_t12 = 0,  /**< \brief Timer 12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   337      IfxCcu6_TimerId_t13 = 1   /**< \brief Timer 13 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   338  } IfxCcu6_TimerId;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   339  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   340  /** \brief Selects the input clock for timers (T12 or T13) that is derived from the peripheral clock according to the equation\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   341   * Definition in Ifx_CCU.TCTR0.B.T12CLK / Ifx_CCU.TCTR0.B.T13CLK
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   342   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   343  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   344  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   345      IfxCcu6_TimerInputClock_fcc6      = 0, /**< \brief fcc6 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   346      IfxCcu6_TimerInputClock_fcc6By2   = 1, /**< \brief fcc6 / 2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   347      IfxCcu6_TimerInputClock_fcc6By4   = 2, /**< \brief fcc6 / 4 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   348      IfxCcu6_TimerInputClock_fcc6By8   = 3, /**< \brief fcc6 / 8 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   349      IfxCcu6_TimerInputClock_fcc6By16  = 4, /**< \brief fcc6 / 16 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   350      IfxCcu6_TimerInputClock_fcc6By32  = 5, /**< \brief fcc6 / 32 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   351      IfxCcu6_TimerInputClock_fcc6By64  = 6, /**< \brief fcc6 / 64 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   352      IfxCcu6_TimerInputClock_fcc6By128 = 7  /**< \brief fcc6 / 128 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   353  } IfxCcu6_TimerInputClock;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   354  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   355  /** \brief Selection of actual input signal for the timer inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   356   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   357  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   358  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   359      IfxCcu6_TimerInputSignal_a = 0,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   360      IfxCcu6_TimerInputSignal_b = 1,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   361      IfxCcu6_TimerInputSignal_c = 2,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   362      IfxCcu6_TimerInputSignal_d = 3,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   363      IfxCcu6_TimerInputSignal_e = 0,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   364      IfxCcu6_TimerInputSignal_f = 1,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   365      IfxCcu6_TimerInputSignal_g = 2,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   366      IfxCcu6_TimerInputSignal_h = 3   /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   367  } IfxCcu6_TimerInputSignal;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   368  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   369  /** \brief Timer (T12 / T13) run status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   370   * Definition in Ifx_CCU.TCTR0.B.T12R and Ifx_CCU.TCTR0.B.T13R
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   371   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   373  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   374      IfxCcu6_TimerRunStatus_stopped = 0,  /**< \brief Timer T1x is stopped. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   375      IfxCcu6_TimerRunStatus_running = 1   /**< \brief Timer T1x is running. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   376  } IfxCcu6_TimerRunStatus;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   377  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   378  /** \brief Defines how the trap flag TRPF can be cleared after the trap input condition is no longer valid (either by CTRAP = 1 or by TRPPEN = 0)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   379   * Definition in Ifx_CCU.TRPCTR.B.TRPM2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   380   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   381  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   382  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   383      IfxCcu6_TrapMode_automatic = 0,  /**< \brief Bit TRPF is cleared by HW */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   384      IfxCcu6_TrapMode_manual    = 1   /**< \brief Bit TRPF stays 0, It has to be cleared by SW by writing
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   385                                        * ISR.RTRPF = 1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   386  } IfxCcu6_TrapMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   387  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   388  /** \brief Defines the behavior of the selected outputs when leaving the trap state, after the trap condition has become inactive again\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   389   * Definition in Ifx_CCU.TRPCTR.B.TRPMx (x = 0, 1)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   390   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   391  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   392  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   393      IfxCcu6_TrapState_t12Sync   = 0, /**< \brief The trap state is left when a zero-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   394                                        * of T12 (while counting up) is detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   395      IfxCcu6_TrapState_t13Sync   = 1, /**< \brief The trap state is left when a zeromatch
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   396                                        * of T13 is detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   397      IfxCcu6_TrapState_immediate = 3  /**< \brief The trap state is left immediately without any synchronization to T12 or T13 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   398  } IfxCcu6_TrapState;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   399  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   400  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   401  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   402  /** \addtogroup IfxLld_Ccu6_Std_Operative
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   403   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   404  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   405  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   406  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   407  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   408  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   409  /** \brief Clears the counters of the Timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   410   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   411   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   412   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   413   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   414   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   415  IFX_INLINE void IfxCcu6_clearCounter(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   416  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   417  /** \brief Clears all the three dead-time counter channels to zero.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   418   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   419   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   420   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   421  IFX_INLINE void IfxCcu6_clearDeadTimeCounters(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   422  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   423  /** \brief Clears the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   424   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   425   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   426   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   427   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   428  IFX_INLINE void IfxCcu6_clearInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   429  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   430  /** \brief Clears the T12  One notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   431   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   432   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   433   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   434  IFX_INLINE void IfxCcu6_clearT12OneNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   435  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   436  /** \brief Clears the T12  period notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   437   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   438   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   439   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   440  IFX_INLINE void IfxCcu6_clearT12PeriodNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   441  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   442  /** \brief Clears the T13  compare notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   443   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   444   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   445   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   446  IFX_INLINE void IfxCcu6_clearT13CompareNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   447  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   448  /** \brief Returns the Timer pointer
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   449   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   450   * \return Timer pointer
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   451   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   452  IFX_INLINE volatile uint32 *IfxCcu6_getT12TimerPointer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   453  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   454  /** \brief Returns the status of module enabled or disabled
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   455   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   456   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   457   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   458  IFX_INLINE boolean IfxCcu6_isModuleEnabled(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   459  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   460  /** \brief Returns the status of T12 one notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   461   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   462   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   463   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   464  IFX_INLINE boolean IfxCcu6_isT12OneNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   465  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   466  /** \brief Returns the status of T12 period notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   467   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   468   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   469   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   470  IFX_INLINE boolean IfxCcu6_isT12PeriodNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   471  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   472  /** \brief Returns the status of T13 compare notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   473   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   474   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   475   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   476  IFX_INLINE boolean IfxCcu6_isT13CompareNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   477  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   478  /** \brief Sets the input event leading to a counting action of Timers (T12 / T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   479   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   480   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   481   * \param mode Input event leading to a counting action of the timer (T12 / T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   482   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   483   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   484  IFX_INLINE void IfxCcu6_setCountingInputMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_CountingInputMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   485  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   486  /** \brief Sets the current hall pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   487   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   488   * \param pattern Current hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   489   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   490   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   491  IFX_INLINE void IfxCcu6_setCurrentHallPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   492  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   493  /** \brief Sets the delay between switching from the passive state to the active state of the selected outputs (dead time)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   494   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   495   * \param value Value of the dead time to be induced
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   496   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   497   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   498  IFX_INLINE void IfxCcu6_setDeadTimeValue(Ifx_CCU6 *ccu6, uint8 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   499  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   500  /** \brief Sets the expected hall pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   501   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   502   * \param pattern Expected hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   503   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   504   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   505  IFX_INLINE void IfxCcu6_setExpectedHallPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   506  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   507  /** \brief Sets the event of signal T1xHR that can set the run bit T1xR by HW
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   508   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   509   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   510   * \param mode External trigger mode
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   511   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   512   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   513  IFX_INLINE void IfxCcu6_setExternalRunMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ExternalTriggerMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   514  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   515  /** \brief Sets source for the sampling of the Hall input pattern and the comparison to the current and the expected Hall pattern bit fields
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   516   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   517   * \param mode Hall sensor input trigger event
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   518   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   519   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   520  IFX_INLINE void IfxCcu6_setHallSensorTriggerMode(Ifx_CCU6 *ccu6, IfxCcu6_HallSensorTriggerMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   521  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   522  /** \brief Sets the input clock for timers (T12 or T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   523   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   524   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   525   * \param frequency Input clock for timers (T12 or T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   526   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   527   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   528  IFX_INLINE void IfxCcu6_setInputClockFrequency(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_TimerInputClock frequency);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   529  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   530  /** \brief Sets the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   531   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   532   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   533   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   534   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   535  IFX_INLINE void IfxCcu6_setInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   536  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   537  /** \brief Sets the output pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   538   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   539   * \param pattern Output pattern for the multichannel mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   540   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   541   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   542  IFX_INLINE void IfxCcu6_setMultiChannelPwmPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   543  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   544  /** \brief Sets the trigger request source (next multi-channel event) for the shadow transfer MCM_ST from MCMPS to MCMP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   545   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   546   * \param mode Trigger request source (next multi-channel event) for the shadow transfer MCM_ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   547   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   548   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   549  IFX_INLINE void IfxCcu6_setMultiChannelSwitchingMode(Ifx_CCU6 *ccu6, IfxCcu6_MultiChannelSwitchingSelect mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   550  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   551  /** \brief Sets the synchronization mechanism of the shadow transfer event MCM_ST\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   552   * if it has been requested before (flag R set by an event selected by SWSEL) and if MCMEN = 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   553   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   554   * \param sync Synchronization mechanism of the shadow transfer event MCM_ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   555   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   556   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   557  IFX_INLINE void IfxCcu6_setMultiChannelSwitchingSync(Ifx_CCU6 *ccu6, IfxCcu6_MultiChannelSwitchingSync sync);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   558  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   559  /** \brief Sets the state of the corresponding compare channel, that is considered to be the passive state
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   560   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   561   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   562   * \param state FALSE: passive state when CC6xST == 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   563   * TRUE : passive state when CC6xST == 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   564   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   565   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   566  IFX_INLINE void IfxCcu6_setOutputPassiveState(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut, boolean state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   567  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   568  /** \brief Enables / Disables the single shot mode of Timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   569   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   570   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   571   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   573   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   574  IFX_INLINE void IfxCcu6_setSingleShotModeEnable(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   575  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   576  /** \brief Sets the operating mode of the Timer12 capture/compare channels
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   577   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   578   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   579   * \param mode The operating mode for the T12 channels
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   580   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   581   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   582  IFX_INLINE void IfxCcu6_setT12ChannelMode(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, IfxCcu6_T12ChannelMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   583  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   584  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   585   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   586   * \param mode Operating mode of Timer 12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   587   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   588   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   589  IFX_INLINE void IfxCcu6_setT12CountMode(Ifx_CCU6 *ccu6, IfxCcu6_T12CountMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   590  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   591  /** \brief Sets the 16-bit counter value of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   592   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   593   * \param value Counter value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   595   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   596  IFX_INLINE void IfxCcu6_setT12CounterValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   597  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   598  /** \brief Sets the period value that leads Timer12 counter value to a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   599   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   600   * \param value Period value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   601   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   602   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   603  IFX_INLINE void IfxCcu6_setT12PeriodValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   604  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   605  /** \brief Sets the 16-bit compare value of Timer13 (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   606   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   607   * \param value Compare value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   609   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   610  IFX_INLINE void IfxCcu6_setT13CompareValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   611  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   612  /** \brief Sets the 16-bit counter value of Timer13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   613   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   614   * \param value counter value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   616   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   617  IFX_INLINE void IfxCcu6_setT13CounterValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   618  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   619  /** \brief Sets the period value that leads Timer13 counter value to a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   620   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   621   * \param value period value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   622   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   623   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   624  IFX_INLINE void IfxCcu6_setT13PeriodValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   625  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   626  /** \brief Sets the Timer13 trigger event direction
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   627   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   628   * \param direction T13 trigger event direction
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   630   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   631  IFX_INLINE void IfxCcu6_setT13TriggerEventDirection(Ifx_CCU6 *ccu6, IfxCcu6_T13TriggerDirection direction);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   632  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   633  /** \brief Sets the trigger event to start Timer13 (automatic set of T13R for synchronization to Timer12 compare signals)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   634   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   635   * \param mode The trigger event to start T13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   636   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   637   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   638  IFX_INLINE void IfxCcu6_setT13TriggerEventMode(Ifx_CCU6 *ccu6, IfxCcu6_T13TriggerEvent mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   639  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   640  /** \brief Sets the mode of clearing the trap flag TRPF after the trap input condition is no longer valid
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   641   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   642   * \param mode Trap mode selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   643   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   644   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   645  IFX_INLINE void IfxCcu6_setTrapMode(Ifx_CCU6 *ccu6, IfxCcu6_TrapMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   646  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   647  /** \brief Sets behaviour of the selected outputs when leaving the trap state after the trap condition has become inactive again.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   648   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   649   * \param state Trap state selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   650   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   651   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   652  IFX_INLINE void IfxCcu6_setTrapState(Ifx_CCU6 *ccu6, IfxCcu6_TrapState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   653  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   654  /** \brief starts the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   655   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   656   * \param t12 Timer12 start choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   657   * \param t13 Timer13 start choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   658   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   659   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   660  IFX_INLINE void IfxCcu6_startTimer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   661  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   662  /** \brief starts the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   663   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   664   * \param t12 Timer12 stop choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   665   * \param t13 Timer13 stop choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   666   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   667   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   668  IFX_INLINE void IfxCcu6_stopTimer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   669  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   670  /** \brief Updates the hall pattern (current hall, expected hall, moduleation output), in a single write
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   671   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   672   * \param currentHall Current hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   673   * \param expectedHall Expected hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   674   * \param output Output pattern for the multichannel mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   675   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   676   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   677  IFX_INLINE void IfxCcu6_updateHallPattern(Ifx_CCU6 *ccu6, uint8 currentHall, uint8 expectedHall, uint8 output);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   678  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   679  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   680  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   681  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   682  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   683  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   684   * \param ccu6 Specifies Ccu6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   685   * \param outputLine Output Line
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   686   * \param selectedTrigger Trigger selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   687   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   688   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   689  IFX_EXTERN void IfxCcu6_connectTrigger(Ifx_CCU6 *ccu6, IfxCcu6_TrigOut outputLine, IfxCcu6_TrigSel selectedTrigger);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   690  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   691  /** \brief Routes the interrupt node pointer to the selected service requests
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   692   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   693   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   694   * \param serviceRequest Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   696   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   697  IFX_EXTERN void IfxCcu6_routeInterruptNode(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source, IfxCcu6_ServiceRequest serviceRequest);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   698  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   699  /** \brief Sets the passive state level of the PWM outputs of the module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   700   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   701   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   702   * \param state FALSE: The passive level is 0.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   703   * TRUE : The passive level is 1.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   704   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   705   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   706  IFX_EXTERN void IfxCcu6_setOutputPassiveLevel(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut, boolean state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   707  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   708  /** \brief Sets software-control (independent set and clear conditions) for the Timer12 channel state bits CC6xST (x=0,1,2)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   709   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   710   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   711   * \param state capture/compare state selection (set / clear / toggle)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   712   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   713   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   714  IFX_EXTERN void IfxCcu6_setT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, IfxCcu6_CaptureCompareState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   715  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   716  /** \brief Sets the 16-bit compare value of Timer12 (writes into shadow registers)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   717   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   718   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   719   * \param value Compare value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   720   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   721   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   722  IFX_EXTERN void IfxCcu6_setT12CompareValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   723  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   724  /** \brief Sets the frequency and clock input of the Timer 12.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   725   * Caution: If desired frequency cannot achieved (by successive divisions by 2) :
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   726   * Then the nearest frequency value is set ( >= desired value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   727   * The resulting frequency is captured in the handler element : CaptureFrequency.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   728   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   729   * \param frequency Requested timer frequency in Hz
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   730   * \param period period value to be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   731   * \param countMode Counting mode of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   732   * \return Zero, if the function failed to fulfill requested frequency and resolution\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   733   * Positive, if the function can find settings close to the requested frequency and resolution above the requested
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   734   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   735  IFX_EXTERN float32 IfxCcu6_setT12Frequency(Ifx_CCU6 *ccu6, float32 frequency, Ifx_TimerValue period, IfxCcu6_T12CountMode countMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   736  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   737  /** \brief selects the actual input signal for the timer inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   738   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   739   * \param extInput External input signal for the Timer 12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   740   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   741   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   742  IFX_EXTERN void IfxCcu6_setT12InputSignal(Ifx_CCU6 *ccu6, IfxCcu6_T12hr_In *extInput);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   743  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   744  /** \brief Sets software-control (independent set and clear conditions) for the Timer13 channel state bits CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   745   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   746   * \param state capture/compare state selection (set / clear / toggle)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   747   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   748   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   749  IFX_EXTERN void IfxCcu6_setT13CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_CaptureCompareState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   750  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   751  /** \brief Sets the frequency and clock input of the Timer 13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   752   * Caution: If desired frequency cannot achieved (by successive divisions by 2) :
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   753   * Then the nearest frequency value is set ( >= desired value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   754   * The resulting frequency is captured in the handler element : captureFrequency.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   755   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   756   * \param frequency Requested timer frequency in Hz
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   757   * \param period period value to be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   758   * \return Zero, if the function failed to fulfill requested frequency and resolution\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   759   * Positive, if the function can find settings close to the requested frequency and resolution above the requested
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   760   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   761  IFX_EXTERN float32 IfxCcu6_setT13Frequency(Ifx_CCU6 *ccu6, float32 frequency, Ifx_TimerValue period);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   762  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   763  /** \brief selects the actual input signal for the timer inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   764   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   765   * \param extInput External input signal for the Timer 13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   766   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   767   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   768  IFX_EXTERN void IfxCcu6_setT13InputSignal(Ifx_CCU6 *ccu6, IfxCcu6_T13hr_In *extInput);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   769  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   770  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   771  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   772  /** \addtogroup IfxLld_Ccu6_Std_Utility
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   773   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   774  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   775  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   776  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   777  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   778  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   779  /** \brief Indicate the status of the dead time generation for each compare channel (0, 1, 2) of timer T12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   780   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   781   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   782   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   783   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   784  IFX_INLINE boolean IfxCcu6_getDeadTimeStatus(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   785  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   786  /** \brief Returns the value of the input Hall pattern of the Timer12 capture/compare channels CC6POS6x (x = 0, 1, 2)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   787   * that has been compared to the current and expected value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   788   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   789   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   790   * \return Status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   791   * TRUE : The input CCPOSx has been sampled as 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   792   * FALSE : The input CCPOSx has been sampled as 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   793   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   794  IFX_INLINE boolean IfxCcu6_getHallPatternSampleState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   795  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   796  /** \brief Gets the status of the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   797   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   798   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   799   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   800   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   801  IFX_INLINE boolean IfxCcu6_getInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   802  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   803  /** \brief indicates if the multi-channel mode functionality is available
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   804   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   805   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   806   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   807  IFX_INLINE boolean IfxCcu6_getMultiChannelModeAvailabilityStatus(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   808  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   809  /** \brief Gets the status of the shadow transfer request from MCMPS to MCMP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   810   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   811   * \return Status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   812   * FALSE: A shadow transfer MCM_ST is not requested\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   813   * TRUE:  A shadow transfer MCM_ST is requested, but has not yet been executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   814   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   815  IFX_INLINE boolean IfxCcu6_getMultiChannelPWMPatternShadowTransferStatus(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   816  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   817  /** \brief Returns the Timer (T12 / T13) shadow transfer enable status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   818   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   819   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   820   * \return Status (TRUE: enable / FALSE: disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   821   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   822  IFX_INLINE boolean IfxCcu6_getShadowTransferStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   823  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   824  /** \brief Returns the state of the Timer12 capture/compare channels CC6xST (x = 0, 1, 2)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   825   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   826   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   827   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   828   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   829  IFX_INLINE boolean IfxCcu6_getT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   830  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   831  /** \brief Returns the current counting direction of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   832   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   833   * \return direction (up / down)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   834   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   835  IFX_INLINE IfxCcu6_T12CountDirection IfxCcu6_getT12CountDirection(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   836  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   837  /** \brief Returns the state of the Timer13 capture/compare channel CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   838   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   839   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   840   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   841  IFX_INLINE boolean IfxCcu6_getT13CaptureCompareState(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   842  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   843  /** \brief indicates the Timer blocks (T12 / T13) availability
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   844   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   845   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   846   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   847   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   848  IFX_INLINE boolean IfxCcu6_getTimerAvailabilityStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   849  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   850  /** \brief Returns the Timer (T12 / T13) run status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   851   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   852   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   853   * \return Status (stopped / running)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   854   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   855  IFX_INLINE IfxCcu6_TimerRunStatus IfxCcu6_getTimerRunStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   856  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   857  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   858   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   859   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   860   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   861   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   862   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   863  IFX_INLINE boolean IfxCcu6_isModuleSuspended(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   864  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   865  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   866   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   867   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   868   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   869   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   870   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   871  IFX_INLINE void IfxCcu6_setSuspendMode(Ifx_CCU6 *ccu6, IfxCcu6_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   872  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   873  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   874  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   875  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   876  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   877  /** \brief Returns the module index of the selected CCU6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   878   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   879   * \return CCU6 module register address
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   880   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   881  IFX_EXTERN Ifx_CCU6 *IfxCcu6_getAddress(IfxCcu6_Index ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   882  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   883  /** \brief Returns the capture register value of the selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   884   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   885   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   886   * \return current value of the capture register of a selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   887   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   888  IFX_EXTERN uint32 IfxCcu6_getCaptureRegisterValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   889  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   890  /** \brief Returns the capture shadow register value of the selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   891   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   892   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   893   * \return current value of the capture shadow register of a selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   894   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   895  IFX_EXTERN uint32 IfxCcu6_getCaptureShadowRegisterValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   896  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   897  /** \brief Returns CCU6 index
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   898   * \param ccu6 Specifies the pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   899   * \return Returns index. returns -1 in case of unknown index
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   900   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   901  IFX_EXTERN IfxCcu6_Index IfxCcu6_getIndex(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   902  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   903  /** \brief Returns the service request register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   904   * \param ccu6 Specifies Ccu6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   905   * \param serviceRequest Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   906   * \return The service request register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   907   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   908  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxCcu6_getSrcAddress(Ifx_CCU6 *ccu6, IfxCcu6_ServiceRequest serviceRequest);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   909  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   910  /** \brief Returns the current value of the timer register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   911   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   912   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   913   * \return current value of the timer register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   914   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   915  IFX_EXTERN uint32 IfxCcu6_readTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   916  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   917  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   918  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   919  /** \addtogroup IfxLld_Ccu6_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   920   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   921  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   922  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   923  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   924  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   925  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   926  /** \brief Clears all Interrupt flags
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   927   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   928   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   929   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   930  IFX_INLINE void IfxCcu6_clearAllInterruptStatusFlags(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   931  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   932  /** \brief Disables the additional prescaler of 1/256 can be enabled for the prescaler of T12 or T13 to support higher clock frequencies
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   933   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   934   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   935   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   936   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   937  IFX_INLINE void IfxCcu6_disableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   938  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   939  /** \brief Disables the dead time generation for each compare channel (0, 1, 2) of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   940   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   941   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   942   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   943   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   944  IFX_INLINE void IfxCcu6_disableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   945  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   946  /** \brief Disables the delay of the source signal for the sampling of the Hall input pattern (selected by HSYNC)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   947   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   948   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   949   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   950  IFX_INLINE void IfxCcu6_disableDelayBypass(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   951  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   952  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   953   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   954   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   955   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   956   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   957  IFX_INLINE void IfxCcu6_disableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   958  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   959  /** \brief Sets multi channel mode unavailable, A write access to MCMOUTS is ignored
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   960   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   961   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   962   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   963  IFX_INLINE void IfxCcu6_disableMultiChannelMode(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   964  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   965  /** \brief Disables shadow transfers of the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   966   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   967   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   968   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   969   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   970   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   971  IFX_INLINE void IfxCcu6_disableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   972  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   973  /** \brief Disables the single shot-mode of Timers (T12 T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   974   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   975   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   976   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   977   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   978  IFX_INLINE void IfxCcu6_disableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   979  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   980  /** \brief Disables the Inversion of T13 signal for the modulation of the CC6x and COUT6x (x = 0, 1, 2) signals\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   981   * T13 output CC63_O is equal to CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   982   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   983   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   984   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   985  IFX_INLINE void IfxCcu6_disableT13InvertedModulation(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   986  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   987  /** \brief Sets Timer12 block unavailable, A write access to T12PR is ignored
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   988   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   989   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   990   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   991   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   992  IFX_INLINE void IfxCcu6_disableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   993  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   994  /** \brief Disables the trap functionality for the corresponding output signals
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   995   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   996   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   997   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   998   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   999  IFX_INLINE void IfxCcu6_disableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1000  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1001  /** \brief Disables the input (pin) function for the trap generation
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1002   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1003   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1004   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1005  IFX_INLINE void IfxCcu6_disableTrapPin(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1006  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1007  /** \brief Enables the additional prescaler of 1/256 can be enabled for the prescaler of T12 or T13 to support higher clock frequencies
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1008   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1009   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1010   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1011   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1012  IFX_INLINE void IfxCcu6_enableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1013  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1014  /** \brief Sets the single shot-mode of Timers (T12, T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1015   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1016   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1017   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1018   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1019   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1020  IFX_INLINE void IfxCcu6_enableCountEvent(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1021  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1022  /** \brief Enables the dead time generation for each compare channel (0, 1, 2) of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1023   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1024   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1025   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1026   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1027  IFX_INLINE void IfxCcu6_enableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1028  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1029  /** \brief Enables the delay of the source signal for the sampling of the Hall input pattern (selected by HSYNC) by the Dead-Time Counter 0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1030   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1031   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1032   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1033  IFX_INLINE void IfxCcu6_enableDelayBypass(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1034  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1035  /** \brief Sets HP_ST immediately to update bit fields EXPH and CURH by EXPHS and CURHS
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1036   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1037   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1038   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1039  IFX_INLINE void IfxCcu6_enableHallPatternShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1040  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1041  /** \brief Enables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1042   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1043   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1044   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1045   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1046  IFX_INLINE void IfxCcu6_enableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1047  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1048  /** \brief Sets multi channel mode available, A write access to MCMOUTS is executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1049   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1050   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1051   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1052  IFX_INLINE void IfxCcu6_enableMultiChannelMode(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1053  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1054  /** \brief Enables the Multi Channel Mode Availability
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1055   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1056   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1057   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1058  IFX_INLINE void IfxCcu6_enableMultiChannelModeAvailability(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1059  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1060  /** \brief Sets MCM_ST immediately to update bit field MCMP by the value of MCMPS.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1061   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1062   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1063   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1064  IFX_INLINE void IfxCcu6_enableMultiChannelPwmPatternShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1065  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1066  /** \brief Enables the shadow transfer T12_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1067   * becomes set while a T12 one match is detected while counting down
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1068   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1069   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1070   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1071  IFX_INLINE void IfxCcu6_enableMultiChannelT12DowncountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1072  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1073  /** \brief Enables the shadow transfer T12_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1074   * becomes set while a T12 period match is detected while counting up
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1075   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1076   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1077   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1078  IFX_INLINE void IfxCcu6_enableMultiChannelT12UpcountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1079  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1080  /** \brief Enables the shadow transfer T13_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1081   * becomes set while a T13 period match is detected
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1082   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1083   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1084   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1085  IFX_INLINE void IfxCcu6_enableMultiChannelT13UpcountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1086  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1087  /** \brief Enables shadow transfers of the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1088   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1089   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1090   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1091   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1092   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1093  IFX_INLINE void IfxCcu6_enableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1094  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1095  /** \brief Enables the single shot-mode of Timers (T12 T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1096   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1097   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1098   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1099   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1100  IFX_INLINE void IfxCcu6_enableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1101  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1102  /** \brief Enables the Inversion of T13 signal for the modulation of the CC6x and COUT6x (x = 0, 1, 2) signals\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1103   * T13 output CC63_O is equal to CC63ST.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1104   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1105   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1106   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1107  IFX_INLINE void IfxCcu6_enableT13InvertedModulation(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1108  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1109  /** \brief Sets Timer12 block available, A write access to T12PR is executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1110   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1111   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1112   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1113   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1114  IFX_INLINE void IfxCcu6_enableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1115  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1116  /** \brief Enables the trap functionality for the corresponding output signals
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1117   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1118   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1119   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1120   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1121  IFX_INLINE void IfxCcu6_enableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1122  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1123  /** \brief Enables the input (pin) function for the trap generation
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1124   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1125   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1126   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1127  IFX_INLINE void IfxCcu6_enableTrapPin(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1128  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1129  /** \brief selects the actual input signal for the capture compare inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1130   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1131   * \param input Input selection, ( CC6x capture input / CTRAP input / CCPOSx input  )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1132   * \param signal selection of actual input signal for the module inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1133   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1134   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1135  IFX_INLINE void IfxCcu6_setCaptureCompareInputSignal(Ifx_CCU6 *ccu6, IfxCcu6_CaptureCompareInput input, IfxCcu6_CaptureCompareInputSignal signal);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1136  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1137  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1138  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1139  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1140  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1141  /** \brief Disables the modulation of the corresponding output signal by PWM pattern generated by the timers T12 and T13.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1142   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1143   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1144   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1145   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1146   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1147  IFX_EXTERN void IfxCcu6_disableModulationOutput(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1148  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1149  /** \brief Disables the selected CCU6 kernel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1150   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1151   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1152   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1153  IFX_EXTERN void IfxCcu6_disableModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1154  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1155  /** \brief Enables the modulation of the corresponding output signal by PWM pattern generated by the timers T12 and T13.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1156   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1157   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1158   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1159   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1160   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1161  IFX_EXTERN void IfxCcu6_enableModulationOutput(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1162  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1163  /** \brief Enables the selected CCU6 kernel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1164   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1165   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1166   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1167  IFX_EXTERN void IfxCcu6_enableModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1168  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1169  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1170  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1171  /** \addtogroup IfxLld_Ccu6_Std_IO
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1172   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1173  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1174  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1175  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1176  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1177  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1178  /** \brief Initialises a CC60 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1179   * \param cc60In CC60 capture input CC60IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1180   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1181   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1182   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1183  IFX_INLINE void IfxCcu6_initCc60InPin(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1184  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1185  /** \brief Initialises a CC60 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1186   * \param cc60Out CC60 compare output CC0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1187   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1188   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1189   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1190   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1191  IFX_INLINE void IfxCcu6_initCc60OutPin(const IfxCcu6_Cc60_Out *cc60Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1192  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1193  /** \brief Initialises a CC61 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1194   * \param cc61In CC61 capture input CC61IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1195   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1196   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1197   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1198  IFX_INLINE void IfxCcu6_initCc61InPin(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1199  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1200  /** \brief Initialises a CC61 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1201   * \param cc61Out CC61 compare output CC1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1202   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1203   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1204   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1205   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1206  IFX_INLINE void IfxCcu6_initCc61OutPin(const IfxCcu6_Cc61_Out *cc61Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1207  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1208  /** \brief Initialises a CC62 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1209   * \param cc62In CC62 capture input CC62IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1210   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1211   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1212   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1213  IFX_INLINE void IfxCcu6_initCc62InPin(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1214  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1215  /** \brief Initialises a CC62 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1216   * \param cc62Out CC62 compare output CC2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1217   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1218   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1219   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1220   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1221  IFX_INLINE void IfxCcu6_initCc62OutPin(const IfxCcu6_Cc62_Out *cc62Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1222  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1223  /** \brief Initialises a CCPOS0 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1224   * \param ccpos0 CC60 capture input CCPOS0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1225   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1228  IFX_INLINE void IfxCcu6_initCcpos0Pin(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1229  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1230  /** \brief Initialises a CCPOS1 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1231   * \param ccpos1 CC61 capture input CCPOS1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1232   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1233   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1235  IFX_INLINE void IfxCcu6_initCcpos1Pin(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1236  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1237  /** \brief Initialises a CCPOS0 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1238   * \param ccpos2 CC62 capture input CCPOS2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1239   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1242  IFX_INLINE void IfxCcu6_initCcpos2Pin(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1243  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1244  /** \brief Initialises a COUT60 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1245   * \param cout60 CC60 compare output COUT0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1246   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1247   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1248   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1249   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1250  IFX_INLINE void IfxCcu6_initCout60Pin(const IfxCcu6_Cout60_Out *cout60, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1251  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1252  /** \brief Initialises a COUT61 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1253   * \param cout61 CC61 compare output COUT1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1254   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1255   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1256   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1257   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1258  IFX_INLINE void IfxCcu6_initCout61Pin(const IfxCcu6_Cout61_Out *cout61, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1259  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1260  /** \brief Initialises a COUT62 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1261   * \param cout62 CC62 compare output COUT2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1262   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1263   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1264   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1265   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1266  IFX_INLINE void IfxCcu6_initCout62Pin(const IfxCcu6_Cout62_Out *cout62, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1267  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1268  /** \brief Initialises a COUT63 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1269   * \param cout63 CC63 compare output COUT3
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1270   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1271   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1272   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1273   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1274  IFX_INLINE void IfxCcu6_initCout63Pin(const IfxCcu6_Cout63_Out *cout63, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1275  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1276  /** \brief Initialises a CTRAP input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1277   * \param ctrap CTRAP input
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1278   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1279   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1280   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1281  IFX_INLINE void IfxCcu6_initCtrapPin(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1282  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1283  /** \brief Initialises a T12HR input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1284   * \param t12hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1285   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1286   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1287   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1288  IFX_INLINE void IfxCcu6_initT12hrPin(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1289  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1290  /** \brief Initialises a T13HR input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1291   * \param t13hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1292   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1293   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1294   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1295  IFX_INLINE void IfxCcu6_initT13hrPin(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1296  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1297  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1298  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1299  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1300  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1301  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1302  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1303  /** \brief Provides functionality for both setting of CC60 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1304   * \param cc60In CC60 capture input CC60IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1305   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1306   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1307   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1308   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1309  IFX_INLINE void IfxCcu6_initCc60InPinWithPadLevel(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1310  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1311  /** \brief Provides functionality for both setting of CC61 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1312   * \param cc61In CC61 capture input CC61IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1313   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1314   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1315   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1316   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1317  IFX_INLINE void IfxCcu6_initCc61InPinWithPadLevel(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1318  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1319  /** \brief Provides functionality for both setting of CC62 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1320   * \param cc62In CC62 capture input CC62IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1321   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1322   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1323   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1324   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1325  IFX_INLINE void IfxCcu6_initCc62InPinWithPadLevel(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1326  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1327  /** \brief Provides functionality for both setting of CCPOS0 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1328   * \param ccpos0 CC60 capture input CCPOS0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1329   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1330   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1331   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1332   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1333  IFX_INLINE void IfxCcu6_initCcpos0PinWithPadLevel(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1334  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1335  /** \brief Provides functionality for both setting of CCPOS1 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1336   * \param ccpos1 CC61 capture input CCPOS1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1337   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1338   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1339   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1340   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1341  IFX_INLINE void IfxCcu6_initCcpos1PinWithPadLevel(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1342  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1343  /** \brief Provides functionality for both setting of CCPOS2 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1344   * \param ccpos2 CC62 capture input CCPOS2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1345   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1346   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1347   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1348   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1349  IFX_INLINE void IfxCcu6_initCcpos2PinWithPadLevel(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1350  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1351  /** \brief Provides functionality for both setting of CTRAP pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1352   * \param ctrap CTRAP input
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1353   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1354   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1355   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1356   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1357  IFX_INLINE void IfxCcu6_initCtrapPinWithPadLevel(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1358  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1359  /** \brief Provides functionality for both setting of T12HR pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1360   * \param t12hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1361   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1362   * \param padDriver Pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1363   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1364   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1365  IFX_INLINE void IfxCcu6_initT12hrPinWithPadLevel(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1366  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1367  /** \brief Provides functionality for both setting of T13HR pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1368   * \param t13hrIn Timer 13 HR input T13HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1369   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1370   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1371   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1372   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1373  IFX_INLINE void IfxCcu6_initT13hrPinWithPadLevel(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1374  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1375  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1376   * \param ccu6 pointer to CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1377   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1378   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1379   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1380  IFX_INLINE void IfxCcu6_setSleepMode(Ifx_CCU6 *ccu6, IfxCcu6_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1381  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1382  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1383  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1384  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1385  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1386  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1387   * \param ccu6 pointer to ccu6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1388   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1389   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1390  IFX_EXTERN void IfxCcu6_resetModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1391  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1392  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1393  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1394  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1395  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1396  IFX_INLINE void IfxCcu6_clearAllInterruptStatusFlags(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1397  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1398      ccu6->ISR.U = 0xFFFF;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1399  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1400  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1401  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1402  IFX_INLINE void IfxCcu6_clearCounter(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1403  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1404      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1405      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1406      tctr4.B.T12RES = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1407      tctr4.B.T13RES = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1408      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1409  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1410  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1411  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1412  IFX_INLINE void IfxCcu6_clearDeadTimeCounters(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1413  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1414      ccu6->TCTR4.B.DTRES = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1415  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1416  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1417  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1418  IFX_INLINE void IfxCcu6_clearInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1419  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1420      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1421      ccu6->ISR.U = mask;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1422  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1423  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1424  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1425  IFX_INLINE void IfxCcu6_clearT12OneNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1426  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1427      ccu6->ISR.B.RT12OM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1428  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1429  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1430  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1431  IFX_INLINE void IfxCcu6_clearT12PeriodNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1432  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1433      ccu6->ISR.B.RT12PM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1434  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1435  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1436  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1437  IFX_INLINE void IfxCcu6_clearT13CompareNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1438  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1439      ccu6->ISR.B.RT13CM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1440  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1441  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1442  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1443  IFX_INLINE void IfxCcu6_disableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1444  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1445      uint32 shift = ((timer * 8) + 3);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1446      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1447      ccu6->TCTR0.U = ccu6->TCTR0.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1448  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1449  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1450  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1451  IFX_INLINE void IfxCcu6_disableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1452  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1453      uint32 shift = (8 + channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1454      uint32 mask  = (1 << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1455      ccu6->T12DTC.U = ccu6->T12DTC.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1456  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1457  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1458  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1459  IFX_INLINE void IfxCcu6_disableDelayBypass(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1460  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1461      ccu6->T12MSEL.B.DBYP = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1462  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1463  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1464  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1465  IFX_INLINE void IfxCcu6_disableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1466  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1467      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1468      ccu6->IEN.U = ccu6->IEN.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1469  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1470  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1471  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1472  IFX_INLINE void IfxCcu6_disableMultiChannelMode(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1473  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1474      ccu6->MODCTR.B.MCMEN = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1475  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1476  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1477  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1478  IFX_INLINE void IfxCcu6_disableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1479  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1480      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1481      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1482      tctr4.B.T12STD = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1483      tctr4.B.T13STD = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1484      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1485  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1486  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1487  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1488  IFX_INLINE void IfxCcu6_disableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1489  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1490      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1491      ccu6->TCTR2.U = ccu6->TCTR2.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1492  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1493  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1494  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1495  IFX_INLINE void IfxCcu6_disableT13InvertedModulation(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1496  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1497      ccu6->CMPSTAT.B.T13IM = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1498  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1499  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1500  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1501  IFX_INLINE void IfxCcu6_disableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1502  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1503      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1504      ccu6->MCFG.U = ccu6->MCFG.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1505  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1506  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1507  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1508  IFX_INLINE void IfxCcu6_disableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1509  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1510      uint32 shift = (8 + channelOut);    // offset at location TRPCTR.8 for output CC60
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1511      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1512      ccu6->TRPCTR.U = ccu6->TRPCTR.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1513  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1514  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1515  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1516  IFX_INLINE void IfxCcu6_disableTrapPin(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1517  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1518      ccu6->TRPCTR.B.TRPPEN = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1519  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1520  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1521  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1522  IFX_INLINE void IfxCcu6_enableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1523  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1524      uint32 shift = ((timer * 8) + 3);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1525      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1526      ccu6->TCTR0.U = ccu6->TCTR0.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1527  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1528  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1529  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1530  IFX_INLINE void IfxCcu6_enableCountEvent(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1531  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1532      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1533      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1534      tctr4.B.T12CNT = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1535      tctr4.B.T13CNT = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1536      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1537  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1538  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1539  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1540  IFX_INLINE void IfxCcu6_enableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1541  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1542      uint32 shift = (8 + channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1543      uint32 mask  = (1 << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1544      ccu6->T12DTC.U = ccu6->T12DTC.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1545  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1546  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1547  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1548  IFX_INLINE void IfxCcu6_enableDelayBypass(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1549  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1550      ccu6->T12MSEL.B.DBYP = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1551  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1552  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1553  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1554  IFX_INLINE void IfxCcu6_enableHallPatternShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1555  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1556      ccu6->MCMOUTS.B.STRHP = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1557  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1558  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1559  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1560  IFX_INLINE void IfxCcu6_enableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1561  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1562      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1563      ccu6->IEN.U = ccu6->IEN.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1564  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1565  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1566  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1567  IFX_INLINE void IfxCcu6_enableMultiChannelMode(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1568  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1569      ccu6->MODCTR.B.MCMEN = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1570  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1571  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1572  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1573  IFX_INLINE void IfxCcu6_enableMultiChannelModeAvailability(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1574  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1575      ccu6->MCFG.B.MCM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1576  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1577  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1578  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1579  IFX_INLINE void IfxCcu6_enableMultiChannelPwmPatternShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1580  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1581      ccu6->MCMOUTS.B.STRMCM = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1582  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1583  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1584  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1585  IFX_INLINE void IfxCcu6_enableMultiChannelT12DowncountingShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1586  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1587      ccu6->MCMCTR.B.STE12D = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1588  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1589  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1590  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1591  IFX_INLINE void IfxCcu6_enableMultiChannelT12UpcountingShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1592  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1593      ccu6->MCMCTR.B.STE12U = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1594  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1595  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1596  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1597  IFX_INLINE void IfxCcu6_enableMultiChannelT13UpcountingShadowTransfer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1598  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1599      ccu6->MCMCTR.B.STE13U = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1600  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1601  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1602  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1603  IFX_INLINE void IfxCcu6_enableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1604  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1605      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1606      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1607      tctr4.B.T12STR = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1608      tctr4.B.T13STR = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1609      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1610  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1611  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1612  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1613  IFX_INLINE void IfxCcu6_enableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1614  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1615      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1616      ccu6->TCTR2.U = ccu6->TCTR2.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1617  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1618  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1619  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1620  IFX_INLINE void IfxCcu6_enableT13InvertedModulation(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1621  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1622      ccu6->CMPSTAT.B.T13IM = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1623  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1624  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1625  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1626  IFX_INLINE void IfxCcu6_enableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1627  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1628      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1629      ccu6->MCFG.U = ccu6->MCFG.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1630  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1631  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1632  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1633  IFX_INLINE void IfxCcu6_enableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1634  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1635      uint32 shift = (8 + channelOut);    // offset at location TRPCTR.8 for output CC60
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1636      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1637      ccu6->TRPCTR.U = ccu6->TRPCTR.U | (mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1638  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1639  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1640  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1641  IFX_INLINE void IfxCcu6_enableTrapPin(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1642  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1643      ccu6->TRPCTR.B.TRPPEN = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1644  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1645  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1646  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1647  IFX_INLINE boolean IfxCcu6_getDeadTimeStatus(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1648  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1649      uint32 shift = (12 + channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1650      uint32 mask  = 1 << shift;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1651      return (ccu6->T12DTC.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1652  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1653  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1654  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1655  IFX_INLINE boolean IfxCcu6_getHallPatternSampleState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1656  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1657      uint32 shift = (channel + 3);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1658      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1659      return (ccu6->CMPSTAT.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1660  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1661  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1662  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1663  IFX_INLINE boolean IfxCcu6_getInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1664  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1665      uint32 shift = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1666      return (ccu6->IS.U & shift) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1668  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1669  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1670  IFX_INLINE boolean IfxCcu6_getMultiChannelModeAvailabilityStatus(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1672      return ccu6->MCFG.B.MCM != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1674  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1675  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1676  IFX_INLINE boolean IfxCcu6_getMultiChannelPWMPatternShadowTransferStatus(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1678      return ccu6->MCMOUT.B.R != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1680  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1681  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1682  IFX_INLINE boolean IfxCcu6_getShadowTransferStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1684      uint32 shift = ((timer * 8) + 5);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1685      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1686      return (ccu6->TCTR0.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1687  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1688  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1689  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1690  IFX_INLINE boolean IfxCcu6_getT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1691  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1692      uint32 mask = (1U << channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1693      return (ccu6->CMPSTAT.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1694  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1695  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1696  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1697  IFX_INLINE IfxCcu6_T12CountDirection IfxCcu6_getT12CountDirection(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1698  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1699      return (IfxCcu6_T12CountDirection)((ccu6->TCTR0.B.CDIR) ? TRUE : FALSE);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1700  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1701  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1702  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1703  IFX_INLINE volatile uint32 *IfxCcu6_getT12TimerPointer(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1704  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1705      return (volatile uint32 *)&ccu6->T12PR;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1706  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1707  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1708  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1709  IFX_INLINE boolean IfxCcu6_getT13CaptureCompareState(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1710  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1711      return ccu6->CMPSTAT.B.CC63ST != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1712  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1713  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1714  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1715  IFX_INLINE boolean IfxCcu6_getTimerAvailabilityStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1716  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1717      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1718      return (ccu6->MCFG.U & mask) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1719  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1720  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1721  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1722  IFX_INLINE IfxCcu6_TimerRunStatus IfxCcu6_getTimerRunStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1723  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1724      uint32 shift = ((timer * 8) + 4);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1725      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1726      return (IfxCcu6_TimerRunStatus)((ccu6->TCTR0.U & mask) ? TRUE : FALSE);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1728  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1729  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1730  IFX_INLINE void IfxCcu6_initCc60InPin(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1732      IfxPort_setPinModeInput(cc60In->pin.port, cc60In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1733      IfxCcu6_setCaptureCompareInputSignal(cc60In->module, IfxCcu6_CaptureCompareInput_cC60, (IfxCcu6_CaptureCompareInputSignal)cc60In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1734  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1735  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1736  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1737  IFX_INLINE void IfxCcu6_initCc60InPinWithPadLevel(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1738  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1739      IfxPort_setPinModeInput(cc60In->pin.port, cc60In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1740      IfxPort_setPinPadDriver(cc60In->pin.port, cc60In->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1741      IfxCcu6_setCaptureCompareInputSignal(cc60In->module, IfxCcu6_CaptureCompareInput_cC60, (IfxCcu6_CaptureCompareInputSignal)cc60In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1742  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1743  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1744  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1745  IFX_INLINE void IfxCcu6_initCc60OutPin(const IfxCcu6_Cc60_Out *cc60Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1746  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1747      IfxPort_setPinModeOutput(cc60Out->pin.port, cc60Out->pin.pinIndex, outputMode, cc60Out->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1748      IfxPort_setPinPadDriver(cc60Out->pin.port, cc60Out->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1749  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1750  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1751  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1752  IFX_INLINE void IfxCcu6_initCc61InPin(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1753  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1754      IfxPort_setPinModeInput(cc61In->pin.port, cc61In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1755      IfxCcu6_setCaptureCompareInputSignal(cc61In->module, IfxCcu6_CaptureCompareInput_cC61, (IfxCcu6_CaptureCompareInputSignal)cc61In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1756  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1757  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1758  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1759  IFX_INLINE void IfxCcu6_initCc61InPinWithPadLevel(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1760  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1761      IfxPort_setPinModeInput(cc61In->pin.port, cc61In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1762      IfxPort_setPinPadDriver(cc61In->pin.port, cc61In->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1763      IfxCcu6_setCaptureCompareInputSignal(cc61In->module, IfxCcu6_CaptureCompareInput_cC61, (IfxCcu6_CaptureCompareInputSignal)cc61In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1764  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1765  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1766  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1767  IFX_INLINE void IfxCcu6_initCc61OutPin(const IfxCcu6_Cc61_Out *cc61Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1768  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1769      IfxPort_setPinModeOutput(cc61Out->pin.port, cc61Out->pin.pinIndex, outputMode, cc61Out->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1770      IfxPort_setPinPadDriver(cc61Out->pin.port, cc61Out->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1771  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1772  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1773  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1774  IFX_INLINE void IfxCcu6_initCc62InPin(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1775  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1776      IfxPort_setPinModeInput(cc62In->pin.port, cc62In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1777      IfxCcu6_setCaptureCompareInputSignal(cc62In->module, IfxCcu6_CaptureCompareInput_cC62, (IfxCcu6_CaptureCompareInputSignal)cc62In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1778  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1779  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1780  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1781  IFX_INLINE void IfxCcu6_initCc62InPinWithPadLevel(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1782  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1783      IfxPort_setPinModeInput(cc62In->pin.port, cc62In->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1784      IfxPort_setPinPadDriver(cc62In->pin.port, cc62In->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1785      IfxCcu6_setCaptureCompareInputSignal(cc62In->module, IfxCcu6_CaptureCompareInput_cC62, (IfxCcu6_CaptureCompareInputSignal)cc62In->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1786  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1787  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1788  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1789  IFX_INLINE void IfxCcu6_initCc62OutPin(const IfxCcu6_Cc62_Out *cc62Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1790  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1791      IfxPort_setPinModeOutput(cc62Out->pin.port, cc62Out->pin.pinIndex, outputMode, cc62Out->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1792      IfxPort_setPinPadDriver(cc62Out->pin.port, cc62Out->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1794  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1795  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1796  IFX_INLINE void IfxCcu6_initCcpos0Pin(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1798      IfxPort_setPinModeInput(ccpos0->pin.port, ccpos0->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1799      IfxCcu6_setCaptureCompareInputSignal(ccpos0->module, IfxCcu6_CaptureCompareInput_cCPOS0, (IfxCcu6_CaptureCompareInputSignal)ccpos0->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1800  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1801  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1802  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1803  IFX_INLINE void IfxCcu6_initCcpos0PinWithPadLevel(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1804  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1805      IfxPort_setPinModeInput(ccpos0->pin.port, ccpos0->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1806      IfxPort_setPinPadDriver(ccpos0->pin.port, ccpos0->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1807      IfxCcu6_setCaptureCompareInputSignal(ccpos0->module, IfxCcu6_CaptureCompareInput_cCPOS0, (IfxCcu6_CaptureCompareInputSignal)ccpos0->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1808  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1809  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1810  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1811  IFX_INLINE void IfxCcu6_initCcpos1Pin(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1812  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1813      IfxPort_setPinModeInput(ccpos1->pin.port, ccpos1->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1814      IfxCcu6_setCaptureCompareInputSignal(ccpos1->module, IfxCcu6_CaptureCompareInput_cCPOS1, (IfxCcu6_CaptureCompareInputSignal)ccpos1->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1815  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1816  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1817  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1818  IFX_INLINE void IfxCcu6_initCcpos1PinWithPadLevel(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1819  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1820      IfxPort_setPinModeInput(ccpos1->pin.port, ccpos1->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1821      IfxPort_setPinPadDriver(ccpos1->pin.port, ccpos1->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1822      IfxCcu6_setCaptureCompareInputSignal(ccpos1->module, IfxCcu6_CaptureCompareInput_cCPOS1, (IfxCcu6_CaptureCompareInputSignal)ccpos1->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1824  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1825  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1826  IFX_INLINE void IfxCcu6_initCcpos2Pin(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1828      IfxPort_setPinModeInput(ccpos2->pin.port, ccpos2->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1829      IfxCcu6_setCaptureCompareInputSignal(ccpos2->module, IfxCcu6_CaptureCompareInput_cCPOS2, (IfxCcu6_CaptureCompareInputSignal)ccpos2->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1830  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1831  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1832  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1833  IFX_INLINE void IfxCcu6_initCcpos2PinWithPadLevel(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1834  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1835      IfxPort_setPinModeInput(ccpos2->pin.port, ccpos2->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1836      IfxPort_setPinPadDriver(ccpos2->pin.port, ccpos2->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1837      IfxCcu6_setCaptureCompareInputSignal(ccpos2->module, IfxCcu6_CaptureCompareInput_cCPOS2, (IfxCcu6_CaptureCompareInputSignal)ccpos2->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1838  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1839  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1840  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1841  IFX_INLINE void IfxCcu6_initCout60Pin(const IfxCcu6_Cout60_Out *cout60, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1842  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1843      IfxPort_setPinModeOutput(cout60->pin.port, cout60->pin.pinIndex, outputMode, cout60->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1844      IfxPort_setPinPadDriver(cout60->pin.port, cout60->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1845  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1846  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1847  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1848  IFX_INLINE void IfxCcu6_initCout61Pin(const IfxCcu6_Cout61_Out *cout61, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1849  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1850      IfxPort_setPinModeOutput(cout61->pin.port, cout61->pin.pinIndex, outputMode, cout61->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1851      IfxPort_setPinPadDriver(cout61->pin.port, cout61->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1852  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1853  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1854  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1855  IFX_INLINE void IfxCcu6_initCout62Pin(const IfxCcu6_Cout62_Out *cout62, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1856  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1857      IfxPort_setPinModeOutput(cout62->pin.port, cout62->pin.pinIndex, outputMode, cout62->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1858      IfxPort_setPinPadDriver(cout62->pin.port, cout62->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1860  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1861  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1862  IFX_INLINE void IfxCcu6_initCout63Pin(const IfxCcu6_Cout63_Out *cout63, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1864      IfxPort_setPinModeOutput(cout63->pin.port, cout63->pin.pinIndex, outputMode, cout63->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1865      IfxPort_setPinPadDriver(cout63->pin.port, cout63->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1866  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1867  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1868  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1869  IFX_INLINE void IfxCcu6_initCtrapPin(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1870  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1871      IfxPort_setPinModeInput(ctrap->pin.port, ctrap->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1872      IfxCcu6_setCaptureCompareInputSignal(ctrap->module, IfxCcu6_CaptureCompareInput_cTRAP, (IfxCcu6_CaptureCompareInputSignal)ctrap->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1873  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1874  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1875  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1876  IFX_INLINE void IfxCcu6_initCtrapPinWithPadLevel(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1877  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1878      IfxPort_setPinModeInput(ctrap->pin.port, ctrap->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1879      IfxPort_setPinPadDriver(ctrap->pin.port, ctrap->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1880      IfxCcu6_setCaptureCompareInputSignal(ctrap->module, IfxCcu6_CaptureCompareInput_cTRAP, (IfxCcu6_CaptureCompareInputSignal)ctrap->select);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1881  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1882  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1883  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1884  IFX_INLINE void IfxCcu6_initT12hrPin(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1885  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1886      IfxPort_setPinModeInput(t12hrIn->pin.port, t12hrIn->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1887      IfxCcu6_setT12InputSignal(t12hrIn->module, t12hrIn);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1888  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1889  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1890  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1891  IFX_INLINE void IfxCcu6_initT12hrPinWithPadLevel(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1892  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1893      IfxPort_setPinModeInput(t12hrIn->pin.port, t12hrIn->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1894      IfxPort_setPinPadDriver(t12hrIn->pin.port, t12hrIn->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1895      IfxCcu6_setT12InputSignal(t12hrIn->module, t12hrIn);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1896  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1897  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1898  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1899  IFX_INLINE void IfxCcu6_initT13hrPin(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1900  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1901      IfxPort_setPinModeInput(t13hrIn->pin.port, t13hrIn->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1902      IfxCcu6_setT13InputSignal(t13hrIn->module, t13hrIn);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1903  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1904  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1905  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1906  IFX_INLINE void IfxCcu6_initT13hrPinWithPadLevel(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1907  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1908      IfxPort_setPinModeInput(t13hrIn->pin.port, t13hrIn->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1909      IfxPort_setPinPadDriver(t13hrIn->pin.port, t13hrIn->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1910      IfxCcu6_setT13InputSignal(t13hrIn->module, t13hrIn);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1911  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1912  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1913  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1914  IFX_INLINE boolean IfxCcu6_isModuleEnabled(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1915  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1916      return ccu6->CLC.B.DISS == 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1917  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1918  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1919  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1920  IFX_INLINE boolean IfxCcu6_isModuleSuspended(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1921  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1922      Ifx_CCU6_OCS ocs;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1923  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1924      // read the status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1925      ocs.U = ccu6->OCS.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1926  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1927      // return the status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1928      return ocs.B.SUSSTA;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1929  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1930  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1931  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1932  IFX_INLINE boolean IfxCcu6_isT12OneNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1933  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1934      return ccu6->IS.B.T12OM != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1935  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1936  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1937  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1938  IFX_INLINE boolean IfxCcu6_isT12PeriodNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1939  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1940      return ccu6->IS.B.T12PM != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1941  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1942  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1943  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1944  IFX_INLINE boolean IfxCcu6_isT13CompareNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1945  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1946      return ccu6->IS.B.T13CM != 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1947  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1948  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1949  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1950  IFX_INLINE void IfxCcu6_setCaptureCompareInputSignal(Ifx_CCU6 *ccu6, IfxCcu6_CaptureCompareInput input, IfxCcu6_CaptureCompareInputSignal signal)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1951  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1952      uint32 shift = (uint32)input;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1953      uint32 mask  = (0x3U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1954      ccu6->PISEL0.U = (ccu6->PISEL0.U & ~mask) | ((uint32)signal << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1955  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1956  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1957  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1958  IFX_INLINE void IfxCcu6_setCountingInputMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_CountingInputMode mode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1959  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1960      uint32 shift = ((timer * 2) + 2);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1961      uint32 mask  = (0x3U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1962      ccu6->PISEL2.U = (ccu6->PISEL2.U & ~mask) | ((uint32)mode << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1963  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1964  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1965  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1966  IFX_INLINE void IfxCcu6_setCurrentHallPattern(Ifx_CCU6 *ccu6, uint8 pattern)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1967  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1968      ccu6->MCMOUTS.B.CURHS = pattern;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1969  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1970  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1971  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1972  IFX_INLINE void IfxCcu6_setDeadTimeValue(Ifx_CCU6 *ccu6, uint8 value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1973  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1974      ccu6->T12DTC.B.DTM = value;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1975  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1976  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1977  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1978  IFX_INLINE void IfxCcu6_setExpectedHallPattern(Ifx_CCU6 *ccu6, uint8 pattern)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1979  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1980      ccu6->MCMOUTS.B.EXPHS = pattern;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1981  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1982  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1983  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1984  IFX_INLINE void IfxCcu6_setExternalRunMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ExternalTriggerMode mode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1985  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1986      uint32 shift = ((timer * 2) + 8);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1987      uint32 mask  = (0x3U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1988      ccu6->TCTR2.U = (ccu6->TCTR2.U & ~mask) | ((uint32)mode << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1989  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1990  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1991  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1992  IFX_INLINE void IfxCcu6_setHallSensorTriggerMode(Ifx_CCU6 *ccu6, IfxCcu6_HallSensorTriggerMode mode)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1993  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1994      uint32 shift = 12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1995      uint32 mask  = (0x7U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1996      ccu6->T12MSEL.U = (ccu6->T12MSEL.U & ~mask) | ((uint32)mode << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1997  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1998  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1999  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2000  IFX_INLINE void IfxCcu6_setInputClockFrequency(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_TimerInputClock frequency)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2001  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2002      uint32 shift = (timer * 8);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2003      uint32 mask  = (0x7U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  2004      ccu6->TCTR0.U = (ccu6->TCTR0.U & ~mask) | ((uint32)frequency << shift);
	sh	d15,d15,#8
.L576:
	or	d1,d15
	st.w	[a15]112,d1
.L348:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   448          IfxCcu6_setInputClockFrequency(ccu6, IfxCcu6_TimerId_t13, clockInput);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   449  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   450          additionalPrescaler = ((prescaler & 0x8U) != 0);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   451  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   452          if (additionalPrescaler)
	jz.t	d0:3,.L67
.L352:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     2   * \file IfxCcu6.h
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     3   * \brief CCU6  basic functionality
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     4   * \ingroup IfxLld_Ccu6
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     5   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     8   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	     9   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    11   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    16   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    18   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    25   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    32   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    40   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    41   *
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    42   * \defgroup IfxLld_Ccu6_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    43   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    44   * \defgroup IfxLld_Ccu6_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    45   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    46   * \defgroup IfxLld_Ccu6_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    47   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    48   * \defgroup IfxLld_Ccu6_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    49   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    50   * \defgroup IfxLld_Ccu6_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    51   * \ingroup IfxLld_Ccu6_Std
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    52   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    53  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    54  #ifndef IFXCCU6_H
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    55  #define IFXCCU6_H 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    56  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    57  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    58  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    59  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    60  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    61  #include "_Impl/IfxCcu6_cfg.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    62  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    63  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    64  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    65  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    66  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    67  #include "_PinMap/IfxCcu6_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    68  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    69  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    70  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    72  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    73  /** \addtogroup IfxLld_Ccu6_Std_Enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    74   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    75  /** \brief Input selection, ( CC6x capture input / CTRAP input / CCPOSx input )\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    76   * Definition in Ifx_CCU.PISEL0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    77   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    78  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    79  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    80      IfxCcu6_CaptureCompareInput_cC60   = IFX_CCU6_PISEL0_ISCC60_OFF,  /**< \brief CC60 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    81      IfxCcu6_CaptureCompareInput_cC61   = IFX_CCU6_PISEL0_ISCC61_OFF,  /**< \brief CC61 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    82      IfxCcu6_CaptureCompareInput_cC62   = IFX_CCU6_PISEL0_ISCC62_OFF,  /**< \brief CC62 capture input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    83      IfxCcu6_CaptureCompareInput_cTRAP  = IFX_CCU6_PISEL0_ISTRP_OFF,   /**< \brief CTRAP input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    84      IfxCcu6_CaptureCompareInput_cCPOS0 = IFX_CCU6_PISEL0_ISPOS0_OFF,  /**< \brief CCPOS0 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    85      IfxCcu6_CaptureCompareInput_cCPOS1 = IFX_CCU6_PISEL0_ISPOS1_OFF,  /**< \brief CCPOS1 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    86      IfxCcu6_CaptureCompareInput_cCPOS2 = IFX_CCU6_PISEL0_ISPOS2_OFF   /**< \brief CCPOS2 input */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    87  } IfxCcu6_CaptureCompareInput;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    88  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    89  /** \brief Selection of actual input signal for the capture compare inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    90   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    91  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    92  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    93      IfxCcu6_CaptureCompareInputSignal_a = 0,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    94      IfxCcu6_CaptureCompareInputSignal_b = 1,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    95      IfxCcu6_CaptureCompareInputSignal_c = 2,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    96      IfxCcu6_CaptureCompareInputSignal_d = 3   /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    97  } IfxCcu6_CaptureCompareInputSignal;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    98  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	    99  /** \brief capture/compare state to set / clear the CC6xST-bits
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   100   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   101  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   102  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   103      IfxCcu6_CaptureCompareState_set    = 0, /**< \brief Bit CC6xST is set */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   104      IfxCcu6_CaptureCompareState_clear  = 1, /**< \brief Bit CC6xST is cleared */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   105      IfxCcu6_CaptureCompareState_toggle = 2  /**< \brief Bit CC6xST is toggled */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   106  } IfxCcu6_CaptureCompareState;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   107  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   108  /** \brief Capture compare output pins
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   109   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   110  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   111  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   112      IfxCcu6_ChannelOut_cc0   = 0,  /**< \brief CC60 compare output CC0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   113      IfxCcu6_ChannelOut_cout0 = 1,  /**< \brief CC60 compare output COUT0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   114      IfxCcu6_ChannelOut_cc1   = 2,  /**< \brief CC61 compare output CC1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   115      IfxCcu6_ChannelOut_cout1 = 3,  /**< \brief CC61 compare output COUT1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   116      IfxCcu6_ChannelOut_cc2   = 4,  /**< \brief CC62 compare output CC2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   117      IfxCcu6_ChannelOut_cout2 = 5,  /**< \brief CC62 compare output COUT2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   118      IfxCcu6_ChannelOut_cout3 = 6   /**< \brief CC63 compare output COUT3 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   119  } IfxCcu6_ChannelOut;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   120  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   121  /** \brief Defines the input event leading to a counting action of the timer (T12 / T13)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   122   * Definition in Ifx_CCU.PISEL2.B.ISCNT12 / Ifx_CCU.PISEL2.B.ISCNT13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   123   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   124  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   125  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   126      IfxCcu6_CountingInputMode_internal        = 0, /**< \brief The T1x prescaler generates the counting events,
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   127                                                      * Bit TCTR4.T1xCNT is not taken into account. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   128      IfxCcu6_CountingInputMode_manual          = 1, /**< \brief Bit TCTR4.T1xCNT written with 1 is a counting
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   129                                                      * event. The T1x prescaler is not taken into account */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   130      IfxCcu6_CountingInputMode_externalRising  = 2, /**< \brief The timer T1x is counting each rising edge
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   131                                                      * detected in the selected T1xHR signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   132      IfxCcu6_CountingInputMode_externalFalling = 3  /**< \brief The timer T1x is counting each falling edge
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   133                                                      * detected in the selected T1xHR signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   134  } IfxCcu6_CountingInputMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   135  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   136  /** \brief Controls whether the source signal for the sampling of the Hall input pattern (selected by HSYNC) is delayed by the Dead-Time Counter 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   137   * Definition in Ifx_CCU.T12MSEL.B.DBYP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   138   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   139  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   140  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   141      IfxCcu6_DelayBypass_notActive = 0,  /**< \brief Dead-Time Counter 0 is generating a delay after
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   142                                           * the source signal becomes active */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   143      IfxCcu6_DelayBypass_active    = 1   /**< \brief Dead-Time Counter 0 is not used for a delay */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   144  } IfxCcu6_DelayBypass;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   145  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   146  /** \brief Defines the event of signal T1xHR that can set the run bit T1xR by HW\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   147   * Definition in Ifx_CCU.TCTR2.B.T12RSEL / IIfx_CCU.TCTR2.B.T13RSEL
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   148   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   149  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   150  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   151      IfxCcu6_ExternalTriggerMode_disable     = 0,  /**< \brief The external setting of T1xR is disabled */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   152      IfxCcu6_ExternalTriggerMode_risingEdge  = 1,  /**< \brief Bit T1xR is set if a rising edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   153                                                     * detected. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   154      IfxCcu6_ExternalTriggerMode_fallingEdge = 2,  /**< \brief Bit T1xR is set if a falling edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   155                                                     * detected. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   156      IfxCcu6_ExternalTriggerMode_anyEdge     = 3   /**< \brief Bit T1xR is set if an edge of signal T1xHR is
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   157                                                     * detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   158  } IfxCcu6_ExternalTriggerMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   159  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   160  /** \brief Defines the source for the sampling of the Hall input pattern and the comparison to the current and the expected Hall pattern bit fields\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   161   * Definition in Ifx_CCU.T12MSEL.HSYNC
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   162   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   163  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   164  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   165      IfxCcu6_HallSensorTriggerMode_permanentCheck    = 0,  /**< \brief Any edge at any of the inputs CCPOSx, independent from any PWM
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   166                                                             * signal */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   167      IfxCcu6_HallSensorTriggerMode_cM63              = 1,  /**< \brief A T13 Compare-Match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   168      IfxCcu6_HallSensorTriggerMode_t13PM             = 2,  /**< \brief A T13 Period-Match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   169      IfxCcu6_HallSensorTriggerMode_off               = 3,  /**< \brief Hall sampling triggered by HW sources is switched off */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   170      IfxCcu6_HallSensorTriggerMode_t12PMCountingUp   = 4,  /**< \brief A T12 Period-Match while counting up (T12_PM and CDIR = 0) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   171      IfxCcu6_HallSensorTriggerMode_t12OMCountingDown = 5,  /**< \brief A T12 One-Match while counting down (T12_PM and CDIR = 1) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   172      IfxCcu6_HallSensorTriggerMode_cM61CountingUp    = 6,  /**< \brief A T12 Compare-Match of compare channel CC61 while counting up (CM_61 and CDIR = 0) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   173      IfxCcu6_HallSensorTriggerMode_cM61CountingDown  = 7   /**< \brief A T12 Compare-Match of compare channel CC61 while counting down (CM_61 and CDIR = 1) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   174  } IfxCcu6_HallSensorTriggerMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   175  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   176  /** \brief Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   177   * Description in Ifx_CCU.IEN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   178   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   179  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   180  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   181      IfxCcu6_InterruptSource_cc60RisingEdge   = IFX_CCU6_IS_ICC60R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   182                                                                          * enable for channel CC60 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   183      IfxCcu6_InterruptSource_cc60FallingEdge  = IFX_CCU6_IS_ICC60F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   184                                                                          * enable for channel CC60 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   185      IfxCcu6_InterruptSource_cc61RisingEdge   = IFX_CCU6_IS_ICC61R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   186                                                                          * enable for channel CC61 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   187      IfxCcu6_InterruptSource_cc61FallingEdge  = IFX_CCU6_IS_ICC61F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   188                                                                          * enable for channel CC61 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   189      IfxCcu6_InterruptSource_cc62RisingEdge   = IFX_CCU6_IS_ICC62R_OFF, /**< \brief Capture compare match rising edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   190                                                                          * enable for channel CC62 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   191      IfxCcu6_InterruptSource_cc62FallingEdge  = IFX_CCU6_IS_ICC62F_OFF, /**< \brief Capture compare match falling edge interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   192                                                                          * enable for channel CC62 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   193      IfxCcu6_InterruptSource_t12OneMatch      = IFX_CCU6_IS_T12OM_OFF,  /**< \brief Interrupt enable for T12 one-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   194      IfxCcu6_InterruptSource_t12PeriodMatch   = IFX_CCU6_IS_T12PM_OFF,  /**< \brief Interrupt enable for T12 period-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   195      IfxCcu6_InterruptSource_t13CompareMatch  = IFX_CCU6_IS_T13CM_OFF,  /**< \brief Interrupt enable for T13 compare-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   196      IfxCcu6_InterruptSource_t13PeriodMatch   = IFX_CCU6_IS_T13PM_OFF,  /**< \brief Interrupt enable for T13 period-match */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   197      IfxCcu6_InterruptSource_trap             = IFX_CCU6_IS_TRPF_OFF,   /**< \brief Interrupt enable for trap flag */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   198      IfxCcu6_InterruptSource_correctHallEvent = IFX_CCU6_IS_CHE_OFF,    /**< \brief Interrupt enable for correct hall event */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   199      IfxCcu6_InterruptSource_wrongHallEvent   = IFX_CCU6_IS_WHE_OFF     /**< \brief Interrupt enable for wrong hall event */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   200  } IfxCcu6_InterruptSource;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   201  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   202  /** \brief Selection of the trigger request source (next multi-channel event) for the shadow transfer MCM_ST from MCMPS to MCMP\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   203   * Definition in Ifx_CCU.MCMCTR.B.SWSEL
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   204   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   205  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   206  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   207      IfxCcu6_MultiChannelSwitchingSelect_noEvent                 = 0,  /**< \brief No trigger request will be generated */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   208      IfxCcu6_MultiChannelSwitchingSelect_correctHallEvent        = 1,  /**< \brief Correct Hall pattern detected (CM_CHE) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   209      IfxCcu6_MultiChannelSwitchingSelect_t13PeriodMatch          = 2,  /**< \brief T13 period-match detected (while counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   210      IfxCcu6_MultiChannelSwitchingSelect_t12OneMatch             = 3,  /**< \brief T12 one-match (while counting down) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   211      IfxCcu6_MultiChannelSwitchingSelect_t12Channel1CompareMatch = 4,  /**< \brief T12 channel 1 compare-match detected (phase
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   212                                                                         * delay function) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   213      IfxCcu6_MultiChannelSwitchingSelect_t12PeriodMatch          = 5   /**< \brief T12 period match detected (while counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   214  } IfxCcu6_MultiChannelSwitchingSelect;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   215  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   216  /** \brief Selection of the synchronization mechanism for the shadow transfer event MCM_ST\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   217   * Definition in Ifx_CCU.MCMCTR.B.SWSYN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   218   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   219  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   220  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   221      IfxCcu6_MultiChannelSwitchingSync_direct       = 0,  /**< \brief Direct, the trigger event immediately leads to the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   222                                                            * shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   223      IfxCcu6_MultiChannelSwitchingSync_t13ZeroMatch = 1,  /**< \brief A T13 zero-match triggers the shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   224      IfxCcu6_MultiChannelSwitchingSync_t12ZeroMatch = 2   /**< \brief A T12 zero-match (while counting up) triggers the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   225                                                            * shadow transfer */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   226  } IfxCcu6_MultiChannelSwitchingSync;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   227  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   228  /** \brief Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   229   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   230  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   231  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   232      IfxCcu6_ServiceRequest_0 = 0,      /**< \brief Service request output SR0  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   233      IfxCcu6_ServiceRequest_1,          /**< \brief Service request output SR1  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   234      IfxCcu6_ServiceRequest_2,          /**< \brief Service request output SR2  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   235      IfxCcu6_ServiceRequest_3           /**< \brief Service request output SR3  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   236  } IfxCcu6_ServiceRequest;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   237  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   238  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   239   * Definition in Ifx_CCU6.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   240   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   241  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   242  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   243      IfxCcu6_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   244      IfxCcu6_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   245  } IfxCcu6_SleepMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   246  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   247  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   248   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   249  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   250  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   251      IfxCcu6_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   252      IfxCcu6_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   253      IfxCcu6_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   254  } IfxCcu6_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   255  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   256  /** \brief Capture compare channel of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   257   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   258  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   259  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   260      IfxCcu6_T12Channel_0 = 0,      /**< \brief T12 channel CC60  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   261      IfxCcu6_T12Channel_1,          /**< \brief T12 channel CC61  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   262      IfxCcu6_T12Channel_2           /**< \brief T12 channel CC62  */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   263  } IfxCcu6_T12Channel;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   264  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   265  /** \brief The operating mode for the T12 channels are defined by the bit fields Ifx_CCU.T12MSEL.MSEL6x.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   266   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   267  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   268  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   269      IfxCcu6_T12ChannelMode_off                                   = 0,  /**< \brief Capture/Compare modes switched off */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   270      IfxCcu6_T12ChannelMode_compareMode                           = 1,  /**< \brief Compare mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   271      IfxCcu6_T12ChannelMode_doubleRegisterCaptureRisingAndFalling = 4,  /**< \brief CC6xIN rising edge: T12 stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   272      IfxCcu6_T12ChannelMode_doubleRegisterCaptureRising           = 5,  /**< \brief CC6xIN rising edge: CC6nSR stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   273      IfxCcu6_T12ChannelMode_doubleRegisterCaptureFalling          = 6,  /**< \brief CC6xIN rising edge: CC6nSR stored in CC6xR, falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   274      IfxCcu6_T12ChannelMode_doubleRegisterCaptureAny              = 7,  /**< \brief CC6xIN any active edge: CC6nSR stored in CC6xR, any active edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   275      IfxCcu6_T12ChannelMode_hallSensor                            = 8,  /**< \brief Hall Sensor Mode, In order to properly enable this mode, all three MSEL6x fields have to be
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   276                                                                          * programmed to Hall Sensor mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   277      IfxCcu6_T12ChannelMode_hysteresisLikecompare                 = 9,  /**< \brief Hysteresis-like compare mode */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   278      IfxCcu6_T12ChannelMode_multiInputCaptureRisingAndFalling     = 10, /**< \brief CC6xIN rising edge: T12 stored in CC6xR, CCPOSx falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   279      IfxCcu6_T12ChannelMode_multiInputCaptureFallingAndRising     = 11, /**< \brief CC6xIN falling edge: T12 stored in CC6xR, CCPOSx rising edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   280      IfxCcu6_T12ChannelMode_multiInputCaptureBothRising           = 12, /**< \brief CC6xIN rising edge: T12 stored in CC6xR, CCPOSx rising edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   281      IfxCcu6_T12ChannelMode_multiInputCaptureBothFalling          = 13, /**< \brief CC6xIN falling edge: T12 stored in CC6xR, CCPOSx falling edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   282      IfxCcu6_T12ChannelMode_multiInputCaptureAny                  = 14  /**< \brief CC6xIN any active edge : T12 stored in CC6xR, CCPOSx any active edge: T12 stored in CC6xSR */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   283  } IfxCcu6_T12ChannelMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   284  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   285  /** \brief Counting direction of Timer12\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   286   * Definition in Ifx_CCU.TCTR0.B.CDIR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   287   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   288  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   289  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   290      IfxCcu6_T12CountDirection_up   = 0, /**< \brief Counting up */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   291      IfxCcu6_T12CountDirection_down = 1  /**< \brief Counting down */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   292  } IfxCcu6_T12CountDirection;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   293  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   294  /** \brief Operating mode of Timer 12\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   295   * Definition in Ifx_CCU.TCTR0.B.CTM
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   296   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   297  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   298  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   299      IfxCcu6_T12CountMode_edgeAligned   = 0, /**< \brief T12 always counts up and continues counting
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   300                                               * from zero after reaching the period value. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   301      IfxCcu6_T12CountMode_centerAligned = 1  /**< \brief T12 counts down after detecting a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   302                                               * and counts up after detecting a one-match. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   303  } IfxCcu6_T12CountMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   304  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   305  /** \brief Delivers additional information to control the automatic set of bit T13R in the case that the trigger action defined by T13 trigger event control (T13TEC) is detected.\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   306   * Definition in Ifx_CCU.TCTR2.B.T13TED
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   307   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   308  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   309  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   310      IfxCcu6_T13TriggerDirection_noAction          = 0,  /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   311      IfxCcu6_T13TriggerDirection_onT12CountingUp   = 1,  /**< \brief while T12 is counting up */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   312      IfxCcu6_T13TriggerDirection_onT12CountingDown = 2,  /**< \brief while T12 is counting down */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   313      IfxCcu6_T13TriggerDirection_anyT12            = 3   /**< \brief independent on the count direction of T12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   314  } IfxCcu6_T13TriggerDirection;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   315  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   316  /** \brief Selects the trigger event to start T13 (automatic set of T13R for synchronization to T12 compare signals)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   317   * Definition in Ifx_CCU.TCTR2.B.T13TEC
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   318   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   319  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   320  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   321      IfxCcu6_T13TriggerEvent_noAction        = 0,  /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   322      IfxCcu6_T13TriggerEvent_onCC60RCompare  = 1,  /**< \brief set T13R on a T12 compare event on channel 0 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   323      IfxCcu6_T13TriggerEvent_onCC61RCompare  = 2,  /**< \brief set T13R on a T12 compare event on channel 1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   324      IfxCcu6_T13TriggerEvent_onCC62RCompare  = 3,  /**< \brief set T13R on a T12 compare event on channel 2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   325      IfxCcu6_T13TriggerEvent_onAnyT12Compare = 4,  /**< \brief set T13R on any T12 compare event (ch. 0, 1, 2) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   326      IfxCcu6_T13TriggerEvent_onT12Period     = 5,  /**< \brief set T13R upon a period-match of T12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   327      IfxCcu6_T13TriggerEvent_onT12Zero       = 6,  /**< \brief set T13R upon a zero-match of T12 (while
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   328                                                     * counting up) */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   329      IfxCcu6_T13TriggerEvent_onCCPOSxEdge    = 7   /**< \brief set T13R on any edge of inputs CCPOSx */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   330  } IfxCcu6_T13TriggerEvent;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   331  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   332  /** \brief Timer number ( T12 / T13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   333   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   334  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   335  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   336      IfxCcu6_TimerId_t12 = 0,  /**< \brief Timer 12 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   337      IfxCcu6_TimerId_t13 = 1   /**< \brief Timer 13 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   338  } IfxCcu6_TimerId;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   339  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   340  /** \brief Selects the input clock for timers (T12 or T13) that is derived from the peripheral clock according to the equation\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   341   * Definition in Ifx_CCU.TCTR0.B.T12CLK / Ifx_CCU.TCTR0.B.T13CLK
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   342   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   343  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   344  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   345      IfxCcu6_TimerInputClock_fcc6      = 0, /**< \brief fcc6 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   346      IfxCcu6_TimerInputClock_fcc6By2   = 1, /**< \brief fcc6 / 2 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   347      IfxCcu6_TimerInputClock_fcc6By4   = 2, /**< \brief fcc6 / 4 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   348      IfxCcu6_TimerInputClock_fcc6By8   = 3, /**< \brief fcc6 / 8 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   349      IfxCcu6_TimerInputClock_fcc6By16  = 4, /**< \brief fcc6 / 16 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   350      IfxCcu6_TimerInputClock_fcc6By32  = 5, /**< \brief fcc6 / 32 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   351      IfxCcu6_TimerInputClock_fcc6By64  = 6, /**< \brief fcc6 / 64 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   352      IfxCcu6_TimerInputClock_fcc6By128 = 7  /**< \brief fcc6 / 128 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   353  } IfxCcu6_TimerInputClock;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   354  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   355  /** \brief Selection of actual input signal for the timer inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   356   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   357  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   358  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   359      IfxCcu6_TimerInputSignal_a = 0,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   360      IfxCcu6_TimerInputSignal_b = 1,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   361      IfxCcu6_TimerInputSignal_c = 2,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   362      IfxCcu6_TimerInputSignal_d = 3,  /**< \brief defines the input signal used as CC6x / CTRAP / CCPOSx / T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   363      IfxCcu6_TimerInputSignal_e = 0,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   364      IfxCcu6_TimerInputSignal_f = 1,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   365      IfxCcu6_TimerInputSignal_g = 2,  /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   366      IfxCcu6_TimerInputSignal_h = 3   /**< \brief defines the input signal used as T1xHR input. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   367  } IfxCcu6_TimerInputSignal;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   368  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   369  /** \brief Timer (T12 / T13) run status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   370   * Definition in Ifx_CCU.TCTR0.B.T12R and Ifx_CCU.TCTR0.B.T13R
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   371   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   373  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   374      IfxCcu6_TimerRunStatus_stopped = 0,  /**< \brief Timer T1x is stopped. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   375      IfxCcu6_TimerRunStatus_running = 1   /**< \brief Timer T1x is running. */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   376  } IfxCcu6_TimerRunStatus;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   377  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   378  /** \brief Defines how the trap flag TRPF can be cleared after the trap input condition is no longer valid (either by CTRAP = 1 or by TRPPEN = 0)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   379   * Definition in Ifx_CCU.TRPCTR.B.TRPM2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   380   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   381  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   382  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   383      IfxCcu6_TrapMode_automatic = 0,  /**< \brief Bit TRPF is cleared by HW */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   384      IfxCcu6_TrapMode_manual    = 1   /**< \brief Bit TRPF stays 0, It has to be cleared by SW by writing
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   385                                        * ISR.RTRPF = 1 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   386  } IfxCcu6_TrapMode;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   387  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   388  /** \brief Defines the behavior of the selected outputs when leaving the trap state, after the trap condition has become inactive again\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   389   * Definition in Ifx_CCU.TRPCTR.B.TRPMx (x = 0, 1)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   390   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   391  typedef enum
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   392  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   393      IfxCcu6_TrapState_t12Sync   = 0, /**< \brief The trap state is left when a zero-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   394                                        * of T12 (while counting up) is detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   395      IfxCcu6_TrapState_t13Sync   = 1, /**< \brief The trap state is left when a zeromatch
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   396                                        * of T13 is detected */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   397      IfxCcu6_TrapState_immediate = 3  /**< \brief The trap state is left immediately without any synchronization to T12 or T13 */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   398  } IfxCcu6_TrapState;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   399  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   400  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   401  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   402  /** \addtogroup IfxLld_Ccu6_Std_Operative
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   403   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   404  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   405  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   406  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   407  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   408  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   409  /** \brief Clears the counters of the Timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   410   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   411   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   412   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   413   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   414   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   415  IFX_INLINE void IfxCcu6_clearCounter(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   416  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   417  /** \brief Clears all the three dead-time counter channels to zero.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   418   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   419   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   420   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   421  IFX_INLINE void IfxCcu6_clearDeadTimeCounters(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   422  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   423  /** \brief Clears the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   424   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   425   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   426   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   427   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   428  IFX_INLINE void IfxCcu6_clearInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   429  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   430  /** \brief Clears the T12  One notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   431   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   432   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   433   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   434  IFX_INLINE void IfxCcu6_clearT12OneNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   435  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   436  /** \brief Clears the T12  period notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   437   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   438   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   439   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   440  IFX_INLINE void IfxCcu6_clearT12PeriodNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   441  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   442  /** \brief Clears the T13  compare notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   443   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   444   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   445   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   446  IFX_INLINE void IfxCcu6_clearT13CompareNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   447  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   448  /** \brief Returns the Timer pointer
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   449   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   450   * \return Timer pointer
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   451   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   452  IFX_INLINE volatile uint32 *IfxCcu6_getT12TimerPointer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   453  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   454  /** \brief Returns the status of module enabled or disabled
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   455   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   456   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   457   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   458  IFX_INLINE boolean IfxCcu6_isModuleEnabled(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   459  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   460  /** \brief Returns the status of T12 one notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   461   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   462   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   463   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   464  IFX_INLINE boolean IfxCcu6_isT12OneNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   465  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   466  /** \brief Returns the status of T12 period notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   467   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   468   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   469   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   470  IFX_INLINE boolean IfxCcu6_isT12PeriodNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   471  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   472  /** \brief Returns the status of T13 compare notification
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   473   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   474   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   475   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   476  IFX_INLINE boolean IfxCcu6_isT13CompareNotification(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   477  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   478  /** \brief Sets the input event leading to a counting action of Timers (T12 / T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   479   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   480   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   481   * \param mode Input event leading to a counting action of the timer (T12 / T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   482   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   483   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   484  IFX_INLINE void IfxCcu6_setCountingInputMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_CountingInputMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   485  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   486  /** \brief Sets the current hall pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   487   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   488   * \param pattern Current hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   489   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   490   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   491  IFX_INLINE void IfxCcu6_setCurrentHallPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   492  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   493  /** \brief Sets the delay between switching from the passive state to the active state of the selected outputs (dead time)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   494   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   495   * \param value Value of the dead time to be induced
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   496   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   497   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   498  IFX_INLINE void IfxCcu6_setDeadTimeValue(Ifx_CCU6 *ccu6, uint8 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   499  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   500  /** \brief Sets the expected hall pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   501   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   502   * \param pattern Expected hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   503   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   504   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   505  IFX_INLINE void IfxCcu6_setExpectedHallPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   506  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   507  /** \brief Sets the event of signal T1xHR that can set the run bit T1xR by HW
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   508   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   509   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   510   * \param mode External trigger mode
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   511   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   512   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   513  IFX_INLINE void IfxCcu6_setExternalRunMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ExternalTriggerMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   514  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   515  /** \brief Sets source for the sampling of the Hall input pattern and the comparison to the current and the expected Hall pattern bit fields
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   516   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   517   * \param mode Hall sensor input trigger event
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   518   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   519   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   520  IFX_INLINE void IfxCcu6_setHallSensorTriggerMode(Ifx_CCU6 *ccu6, IfxCcu6_HallSensorTriggerMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   521  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   522  /** \brief Sets the input clock for timers (T12 or T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   523   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   524   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   525   * \param frequency Input clock for timers (T12 or T13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   526   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   527   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   528  IFX_INLINE void IfxCcu6_setInputClockFrequency(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_TimerInputClock frequency);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   529  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   530  /** \brief Sets the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   531   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   532   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   533   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   534   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   535  IFX_INLINE void IfxCcu6_setInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   536  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   537  /** \brief Sets the output pattern for the multichannel mode (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   538   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   539   * \param pattern Output pattern for the multichannel mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   540   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   541   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   542  IFX_INLINE void IfxCcu6_setMultiChannelPwmPattern(Ifx_CCU6 *ccu6, uint8 pattern);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   543  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   544  /** \brief Sets the trigger request source (next multi-channel event) for the shadow transfer MCM_ST from MCMPS to MCMP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   545   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   546   * \param mode Trigger request source (next multi-channel event) for the shadow transfer MCM_ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   547   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   548   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   549  IFX_INLINE void IfxCcu6_setMultiChannelSwitchingMode(Ifx_CCU6 *ccu6, IfxCcu6_MultiChannelSwitchingSelect mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   550  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   551  /** \brief Sets the synchronization mechanism of the shadow transfer event MCM_ST\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   552   * if it has been requested before (flag R set by an event selected by SWSEL) and if MCMEN = 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   553   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   554   * \param sync Synchronization mechanism of the shadow transfer event MCM_ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   555   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   556   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   557  IFX_INLINE void IfxCcu6_setMultiChannelSwitchingSync(Ifx_CCU6 *ccu6, IfxCcu6_MultiChannelSwitchingSync sync);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   558  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   559  /** \brief Sets the state of the corresponding compare channel, that is considered to be the passive state
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   560   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   561   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   562   * \param state FALSE: passive state when CC6xST == 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   563   * TRUE : passive state when CC6xST == 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   564   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   565   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   566  IFX_INLINE void IfxCcu6_setOutputPassiveState(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut, boolean state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   567  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   568  /** \brief Enables / Disables the single shot mode of Timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   569   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   570   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   571   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   573   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   574  IFX_INLINE void IfxCcu6_setSingleShotModeEnable(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   575  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   576  /** \brief Sets the operating mode of the Timer12 capture/compare channels
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   577   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   578   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   579   * \param mode The operating mode for the T12 channels
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   580   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   581   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   582  IFX_INLINE void IfxCcu6_setT12ChannelMode(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, IfxCcu6_T12ChannelMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   583  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   584  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   585   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   586   * \param mode Operating mode of Timer 12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   587   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   588   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   589  IFX_INLINE void IfxCcu6_setT12CountMode(Ifx_CCU6 *ccu6, IfxCcu6_T12CountMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   590  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   591  /** \brief Sets the 16-bit counter value of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   592   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   593   * \param value Counter value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   595   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   596  IFX_INLINE void IfxCcu6_setT12CounterValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   597  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   598  /** \brief Sets the period value that leads Timer12 counter value to a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   599   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   600   * \param value Period value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   601   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   602   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   603  IFX_INLINE void IfxCcu6_setT12PeriodValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   604  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   605  /** \brief Sets the 16-bit compare value of Timer13 (writes into shadow register)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   606   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   607   * \param value Compare value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   609   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   610  IFX_INLINE void IfxCcu6_setT13CompareValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   611  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   612  /** \brief Sets the 16-bit counter value of Timer13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   613   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   614   * \param value counter value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   616   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   617  IFX_INLINE void IfxCcu6_setT13CounterValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   618  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   619  /** \brief Sets the period value that leads Timer13 counter value to a period-match
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   620   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   621   * \param value period value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   622   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   623   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   624  IFX_INLINE void IfxCcu6_setT13PeriodValue(Ifx_CCU6 *ccu6, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   625  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   626  /** \brief Sets the Timer13 trigger event direction
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   627   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   628   * \param direction T13 trigger event direction
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   630   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   631  IFX_INLINE void IfxCcu6_setT13TriggerEventDirection(Ifx_CCU6 *ccu6, IfxCcu6_T13TriggerDirection direction);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   632  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   633  /** \brief Sets the trigger event to start Timer13 (automatic set of T13R for synchronization to Timer12 compare signals)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   634   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   635   * \param mode The trigger event to start T13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   636   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   637   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   638  IFX_INLINE void IfxCcu6_setT13TriggerEventMode(Ifx_CCU6 *ccu6, IfxCcu6_T13TriggerEvent mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   639  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   640  /** \brief Sets the mode of clearing the trap flag TRPF after the trap input condition is no longer valid
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   641   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   642   * \param mode Trap mode selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   643   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   644   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   645  IFX_INLINE void IfxCcu6_setTrapMode(Ifx_CCU6 *ccu6, IfxCcu6_TrapMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   646  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   647  /** \brief Sets behaviour of the selected outputs when leaving the trap state after the trap condition has become inactive again.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   648   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   649   * \param state Trap state selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   650   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   651   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   652  IFX_INLINE void IfxCcu6_setTrapState(Ifx_CCU6 *ccu6, IfxCcu6_TrapState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   653  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   654  /** \brief starts the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   655   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   656   * \param t12 Timer12 start choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   657   * \param t13 Timer13 start choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   658   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   659   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   660  IFX_INLINE void IfxCcu6_startTimer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   661  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   662  /** \brief starts the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   663   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   664   * \param t12 Timer12 stop choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   665   * \param t13 Timer13 stop choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   666   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   667   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   668  IFX_INLINE void IfxCcu6_stopTimer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   669  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   670  /** \brief Updates the hall pattern (current hall, expected hall, moduleation output), in a single write
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   671   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   672   * \param currentHall Current hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   673   * \param expectedHall Expected hall pattern
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   674   * \param output Output pattern for the multichannel mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   675   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   676   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   677  IFX_INLINE void IfxCcu6_updateHallPattern(Ifx_CCU6 *ccu6, uint8 currentHall, uint8 expectedHall, uint8 output);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   678  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   679  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   680  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   681  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   682  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   683  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   684   * \param ccu6 Specifies Ccu6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   685   * \param outputLine Output Line
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   686   * \param selectedTrigger Trigger selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   687   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   688   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   689  IFX_EXTERN void IfxCcu6_connectTrigger(Ifx_CCU6 *ccu6, IfxCcu6_TrigOut outputLine, IfxCcu6_TrigSel selectedTrigger);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   690  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   691  /** \brief Routes the interrupt node pointer to the selected service requests
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   692   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   693   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   694   * \param serviceRequest Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   696   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   697  IFX_EXTERN void IfxCcu6_routeInterruptNode(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source, IfxCcu6_ServiceRequest serviceRequest);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   698  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   699  /** \brief Sets the passive state level of the PWM outputs of the module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   700   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   701   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   702   * \param state FALSE: The passive level is 0.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   703   * TRUE : The passive level is 1.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   704   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   705   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   706  IFX_EXTERN void IfxCcu6_setOutputPassiveLevel(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut, boolean state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   707  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   708  /** \brief Sets software-control (independent set and clear conditions) for the Timer12 channel state bits CC6xST (x=0,1,2)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   709   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   710   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   711   * \param state capture/compare state selection (set / clear / toggle)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   712   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   713   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   714  IFX_EXTERN void IfxCcu6_setT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, IfxCcu6_CaptureCompareState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   715  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   716  /** \brief Sets the 16-bit compare value of Timer12 (writes into shadow registers)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   717   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   718   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   719   * \param value Compare value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   720   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   721   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   722  IFX_EXTERN void IfxCcu6_setT12CompareValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, uint16 value);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   723  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   724  /** \brief Sets the frequency and clock input of the Timer 12.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   725   * Caution: If desired frequency cannot achieved (by successive divisions by 2) :
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   726   * Then the nearest frequency value is set ( >= desired value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   727   * The resulting frequency is captured in the handler element : CaptureFrequency.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   728   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   729   * \param frequency Requested timer frequency in Hz
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   730   * \param period period value to be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   731   * \param countMode Counting mode of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   732   * \return Zero, if the function failed to fulfill requested frequency and resolution\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   733   * Positive, if the function can find settings close to the requested frequency and resolution above the requested
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   734   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   735  IFX_EXTERN float32 IfxCcu6_setT12Frequency(Ifx_CCU6 *ccu6, float32 frequency, Ifx_TimerValue period, IfxCcu6_T12CountMode countMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   736  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   737  /** \brief selects the actual input signal for the timer inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   738   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   739   * \param extInput External input signal for the Timer 12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   740   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   741   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   742  IFX_EXTERN void IfxCcu6_setT12InputSignal(Ifx_CCU6 *ccu6, IfxCcu6_T12hr_In *extInput);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   743  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   744  /** \brief Sets software-control (independent set and clear conditions) for the Timer13 channel state bits CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   745   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   746   * \param state capture/compare state selection (set / clear / toggle)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   747   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   748   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   749  IFX_EXTERN void IfxCcu6_setT13CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_CaptureCompareState state);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   750  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   751  /** \brief Sets the frequency and clock input of the Timer 13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   752   * Caution: If desired frequency cannot achieved (by successive divisions by 2) :
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   753   * Then the nearest frequency value is set ( >= desired value)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   754   * The resulting frequency is captured in the handler element : captureFrequency.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   755   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   756   * \param frequency Requested timer frequency in Hz
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   757   * \param period period value to be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   758   * \return Zero, if the function failed to fulfill requested frequency and resolution\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   759   * Positive, if the function can find settings close to the requested frequency and resolution above the requested
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   760   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   761  IFX_EXTERN float32 IfxCcu6_setT13Frequency(Ifx_CCU6 *ccu6, float32 frequency, Ifx_TimerValue period);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   762  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   763  /** \brief selects the actual input signal for the timer inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   764   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   765   * \param extInput External input signal for the Timer 13
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   766   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   767   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   768  IFX_EXTERN void IfxCcu6_setT13InputSignal(Ifx_CCU6 *ccu6, IfxCcu6_T13hr_In *extInput);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   769  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   770  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   771  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   772  /** \addtogroup IfxLld_Ccu6_Std_Utility
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   773   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   774  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   775  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   776  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   777  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   778  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   779  /** \brief Indicate the status of the dead time generation for each compare channel (0, 1, 2) of timer T12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   780   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   781   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   782   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   783   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   784  IFX_INLINE boolean IfxCcu6_getDeadTimeStatus(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   785  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   786  /** \brief Returns the value of the input Hall pattern of the Timer12 capture/compare channels CC6POS6x (x = 0, 1, 2)\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   787   * that has been compared to the current and expected value
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   788   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   789   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   790   * \return Status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   791   * TRUE : The input CCPOSx has been sampled as 0\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   792   * FALSE : The input CCPOSx has been sampled as 1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   793   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   794  IFX_INLINE boolean IfxCcu6_getHallPatternSampleState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   795  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   796  /** \brief Gets the status of the selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   797   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   798   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   799   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   800   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   801  IFX_INLINE boolean IfxCcu6_getInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   802  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   803  /** \brief indicates if the multi-channel mode functionality is available
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   804   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   805   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   806   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   807  IFX_INLINE boolean IfxCcu6_getMultiChannelModeAvailabilityStatus(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   808  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   809  /** \brief Gets the status of the shadow transfer request from MCMPS to MCMP
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   810   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   811   * \return Status\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   812   * FALSE: A shadow transfer MCM_ST is not requested\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   813   * TRUE:  A shadow transfer MCM_ST is requested, but has not yet been executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   814   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   815  IFX_INLINE boolean IfxCcu6_getMultiChannelPWMPatternShadowTransferStatus(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   816  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   817  /** \brief Returns the Timer (T12 / T13) shadow transfer enable status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   818   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   819   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   820   * \return Status (TRUE: enable / FALSE: disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   821   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   822  IFX_INLINE boolean IfxCcu6_getShadowTransferStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   823  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   824  /** \brief Returns the state of the Timer12 capture/compare channels CC6xST (x = 0, 1, 2)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   825   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   826   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   827   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   828   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   829  IFX_INLINE boolean IfxCcu6_getT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   830  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   831  /** \brief Returns the current counting direction of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   832   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   833   * \return direction (up / down)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   834   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   835  IFX_INLINE IfxCcu6_T12CountDirection IfxCcu6_getT12CountDirection(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   836  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   837  /** \brief Returns the state of the Timer13 capture/compare channel CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   838   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   839   * \return Status TRUE or FALSE
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   840   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   841  IFX_INLINE boolean IfxCcu6_getT13CaptureCompareState(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   842  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   843  /** \brief indicates the Timer blocks (T12 / T13) availability
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   844   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   845   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   846   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   847   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   848  IFX_INLINE boolean IfxCcu6_getTimerAvailabilityStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   849  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   850  /** \brief Returns the Timer (T12 / T13) run status
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   851   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   852   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   853   * \return Status (stopped / running)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   854   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   855  IFX_INLINE IfxCcu6_TimerRunStatus IfxCcu6_getTimerRunStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   856  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   857  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   858   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   859   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   860   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   861   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   862   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   863  IFX_INLINE boolean IfxCcu6_isModuleSuspended(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   864  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   865  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   866   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   867   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   868   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   869   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   870   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   871  IFX_INLINE void IfxCcu6_setSuspendMode(Ifx_CCU6 *ccu6, IfxCcu6_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   872  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   873  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   874  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   875  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   876  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   877  /** \brief Returns the module index of the selected CCU6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   878   * \param ccu6 Pointer to CCU6 module registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   879   * \return CCU6 module register address
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   880   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   881  IFX_EXTERN Ifx_CCU6 *IfxCcu6_getAddress(IfxCcu6_Index ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   882  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   883  /** \brief Returns the capture register value of the selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   884   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   885   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   886   * \return current value of the capture register of a selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   887   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   888  IFX_EXTERN uint32 IfxCcu6_getCaptureRegisterValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   889  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   890  /** \brief Returns the capture shadow register value of the selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   891   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   892   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   893   * \return current value of the capture shadow register of a selected channel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   894   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   895  IFX_EXTERN uint32 IfxCcu6_getCaptureShadowRegisterValue(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   896  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   897  /** \brief Returns CCU6 index
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   898   * \param ccu6 Specifies the pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   899   * \return Returns index. returns -1 in case of unknown index
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   900   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   901  IFX_EXTERN IfxCcu6_Index IfxCcu6_getIndex(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   902  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   903  /** \brief Returns the service request register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   904   * \param ccu6 Specifies Ccu6 module
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   905   * \param serviceRequest Selection of service request outputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   906   * \return The service request register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   907   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   908  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxCcu6_getSrcAddress(Ifx_CCU6 *ccu6, IfxCcu6_ServiceRequest serviceRequest);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   909  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   910  /** \brief Returns the current value of the timer register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   911   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   912   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   913   * \return current value of the timer register
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   914   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   915  IFX_EXTERN uint32 IfxCcu6_readTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   916  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   917  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   918  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   919  /** \addtogroup IfxLld_Ccu6_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   920   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   921  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   922  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   923  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   924  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   925  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   926  /** \brief Clears all Interrupt flags
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   927   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   928   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   929   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   930  IFX_INLINE void IfxCcu6_clearAllInterruptStatusFlags(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   931  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   932  /** \brief Disables the additional prescaler of 1/256 can be enabled for the prescaler of T12 or T13 to support higher clock frequencies
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   933   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   934   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   935   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   936   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   937  IFX_INLINE void IfxCcu6_disableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   938  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   939  /** \brief Disables the dead time generation for each compare channel (0, 1, 2) of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   940   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   941   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   942   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   943   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   944  IFX_INLINE void IfxCcu6_disableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   945  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   946  /** \brief Disables the delay of the source signal for the sampling of the Hall input pattern (selected by HSYNC)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   947   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   948   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   949   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   950  IFX_INLINE void IfxCcu6_disableDelayBypass(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   951  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   952  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   953   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   954   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   955   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   956   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   957  IFX_INLINE void IfxCcu6_disableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   958  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   959  /** \brief Sets multi channel mode unavailable, A write access to MCMOUTS is ignored
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   960   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   961   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   962   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   963  IFX_INLINE void IfxCcu6_disableMultiChannelMode(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   964  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   965  /** \brief Disables shadow transfers of the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   966   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   967   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   968   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   969   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   970   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   971  IFX_INLINE void IfxCcu6_disableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   972  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   973  /** \brief Disables the single shot-mode of Timers (T12 T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   974   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   975   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   976   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   977   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   978  IFX_INLINE void IfxCcu6_disableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   979  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   980  /** \brief Disables the Inversion of T13 signal for the modulation of the CC6x and COUT6x (x = 0, 1, 2) signals\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   981   * T13 output CC63_O is equal to CC63ST
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   982   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   983   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   984   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   985  IFX_INLINE void IfxCcu6_disableT13InvertedModulation(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   986  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   987  /** \brief Sets Timer12 block unavailable, A write access to T12PR is ignored
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   988   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   989   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   990   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   991   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   992  IFX_INLINE void IfxCcu6_disableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   993  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   994  /** \brief Disables the trap functionality for the corresponding output signals
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   995   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   996   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   997   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   998   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	   999  IFX_INLINE void IfxCcu6_disableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1000  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1001  /** \brief Disables the input (pin) function for the trap generation
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1002   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1003   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1004   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1005  IFX_INLINE void IfxCcu6_disableTrapPin(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1006  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1007  /** \brief Enables the additional prescaler of 1/256 can be enabled for the prescaler of T12 or T13 to support higher clock frequencies
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1008   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1009   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1010   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1011   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1012  IFX_INLINE void IfxCcu6_enableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1013  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1014  /** \brief Sets the single shot-mode of Timers (T12, T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1015   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1016   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1017   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1018   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1019   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1020  IFX_INLINE void IfxCcu6_enableCountEvent(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1021  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1022  /** \brief Enables the dead time generation for each compare channel (0, 1, 2) of Timer12
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1023   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1024   * \param channel Timer12 Capture compare channel number
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1025   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1026   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1027  IFX_INLINE void IfxCcu6_enableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1028  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1029  /** \brief Enables the delay of the source signal for the sampling of the Hall input pattern (selected by HSYNC) by the Dead-Time Counter 0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1030   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1031   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1032   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1033  IFX_INLINE void IfxCcu6_enableDelayBypass(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1034  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1035  /** \brief Sets HP_ST immediately to update bit fields EXPH and CURH by EXPHS and CURHS
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1036   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1037   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1038   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1039  IFX_INLINE void IfxCcu6_enableHallPatternShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1040  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1041  /** \brief Enables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1042   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1043   * \param source Interrupt source selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1044   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1045   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1046  IFX_INLINE void IfxCcu6_enableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1047  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1048  /** \brief Sets multi channel mode available, A write access to MCMOUTS is executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1049   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1050   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1051   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1052  IFX_INLINE void IfxCcu6_enableMultiChannelMode(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1053  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1054  /** \brief Enables the Multi Channel Mode Availability
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1055   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1056   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1057   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1058  IFX_INLINE void IfxCcu6_enableMultiChannelModeAvailability(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1059  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1060  /** \brief Sets MCM_ST immediately to update bit field MCMP by the value of MCMPS.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1061   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1062   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1063   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1064  IFX_INLINE void IfxCcu6_enableMultiChannelPwmPatternShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1065  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1066  /** \brief Enables the shadow transfer T12_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1067   * becomes set while a T12 one match is detected while counting down
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1068   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1069   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1070   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1071  IFX_INLINE void IfxCcu6_enableMultiChannelT12DowncountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1072  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1073  /** \brief Enables the shadow transfer T12_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1074   * becomes set while a T12 period match is detected while counting up
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1075   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1076   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1077   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1078  IFX_INLINE void IfxCcu6_enableMultiChannelT12UpcountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1079  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1080  /** \brief Enables the shadow transfer T13_ST if flag MCMOUT.R is set or\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1081   * becomes set while a T13 period match is detected
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1082   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1083   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1084   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1085  IFX_INLINE void IfxCcu6_enableMultiChannelT13UpcountingShadowTransfer(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1086  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1087  /** \brief Enables shadow transfers of the timers (T12, T13 individually or together based on the selection)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1088   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1089   * \param t12 Timer12 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1090   * \param t13 Timer13 choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1091   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1092   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1093  IFX_INLINE void IfxCcu6_enableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1094  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1095  /** \brief Enables the single shot-mode of Timers (T12 T13).
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1096   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1097   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1098   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1099   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1100  IFX_INLINE void IfxCcu6_enableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1101  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1102  /** \brief Enables the Inversion of T13 signal for the modulation of the CC6x and COUT6x (x = 0, 1, 2) signals\n
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1103   * T13 output CC63_O is equal to CC63ST.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1104   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1105   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1106   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1107  IFX_INLINE void IfxCcu6_enableT13InvertedModulation(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1108  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1109  /** \brief Sets Timer12 block available, A write access to T12PR is executed
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1110   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1111   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1112   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1113   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1114  IFX_INLINE void IfxCcu6_enableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1115  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1116  /** \brief Enables the trap functionality for the corresponding output signals
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1117   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1118   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1119   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1120   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1121  IFX_INLINE void IfxCcu6_enableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1122  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1123  /** \brief Enables the input (pin) function for the trap generation
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1124   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1125   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1126   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1127  IFX_INLINE void IfxCcu6_enableTrapPin(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1128  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1129  /** \brief selects the actual input signal for the capture compare inputs.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1130   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1131   * \param input Input selection, ( CC6x capture input / CTRAP input / CCPOSx input  )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1132   * \param signal selection of actual input signal for the module inputs
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1133   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1134   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1135  IFX_INLINE void IfxCcu6_setCaptureCompareInputSignal(Ifx_CCU6 *ccu6, IfxCcu6_CaptureCompareInput input, IfxCcu6_CaptureCompareInputSignal signal);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1136  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1137  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1138  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1139  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1140  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1141  /** \brief Disables the modulation of the corresponding output signal by PWM pattern generated by the timers T12 and T13.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1142   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1143   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1144   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1145   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1146   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1147  IFX_EXTERN void IfxCcu6_disableModulationOutput(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1148  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1149  /** \brief Disables the selected CCU6 kernel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1150   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1151   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1152   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1153  IFX_EXTERN void IfxCcu6_disableModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1154  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1155  /** \brief Enables the modulation of the corresponding output signal by PWM pattern generated by the timers T12 and T13.
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1156   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1157   * \param timer Timer selection, ( Timer12 / Timer13 )
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1158   * \param channelOut Capture compare output selection
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1159   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1160   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1161  IFX_EXTERN void IfxCcu6_enableModulationOutput(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ChannelOut channelOut);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1162  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1163  /** \brief Enables the selected CCU6 kernel
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1164   * \param ccu6 Pointer to the base of CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1165   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1166   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1167  IFX_EXTERN void IfxCcu6_enableModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1168  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1169  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1170  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1171  /** \addtogroup IfxLld_Ccu6_Std_IO
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1172   * \{ */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1173  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1174  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1175  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1176  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1177  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1178  /** \brief Initialises a CC60 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1179   * \param cc60In CC60 capture input CC60IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1180   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1181   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1182   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1183  IFX_INLINE void IfxCcu6_initCc60InPin(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1184  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1185  /** \brief Initialises a CC60 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1186   * \param cc60Out CC60 compare output CC0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1187   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1188   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1189   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1190   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1191  IFX_INLINE void IfxCcu6_initCc60OutPin(const IfxCcu6_Cc60_Out *cc60Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1192  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1193  /** \brief Initialises a CC61 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1194   * \param cc61In CC61 capture input CC61IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1195   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1196   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1197   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1198  IFX_INLINE void IfxCcu6_initCc61InPin(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1199  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1200  /** \brief Initialises a CC61 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1201   * \param cc61Out CC61 compare output CC1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1202   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1203   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1204   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1205   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1206  IFX_INLINE void IfxCcu6_initCc61OutPin(const IfxCcu6_Cc61_Out *cc61Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1207  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1208  /** \brief Initialises a CC62 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1209   * \param cc62In CC62 capture input CC62IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1210   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1211   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1212   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1213  IFX_INLINE void IfxCcu6_initCc62InPin(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1214  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1215  /** \brief Initialises a CC62 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1216   * \param cc62Out CC62 compare output CC2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1217   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1218   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1219   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1220   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1221  IFX_INLINE void IfxCcu6_initCc62OutPin(const IfxCcu6_Cc62_Out *cc62Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1222  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1223  /** \brief Initialises a CCPOS0 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1224   * \param ccpos0 CC60 capture input CCPOS0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1225   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1228  IFX_INLINE void IfxCcu6_initCcpos0Pin(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1229  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1230  /** \brief Initialises a CCPOS1 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1231   * \param ccpos1 CC61 capture input CCPOS1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1232   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1233   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1235  IFX_INLINE void IfxCcu6_initCcpos1Pin(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1236  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1237  /** \brief Initialises a CCPOS0 input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1238   * \param ccpos2 CC62 capture input CCPOS2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1239   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1242  IFX_INLINE void IfxCcu6_initCcpos2Pin(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1243  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1244  /** \brief Initialises a COUT60 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1245   * \param cout60 CC60 compare output COUT0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1246   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1247   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1248   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1249   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1250  IFX_INLINE void IfxCcu6_initCout60Pin(const IfxCcu6_Cout60_Out *cout60, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1251  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1252  /** \brief Initialises a COUT61 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1253   * \param cout61 CC61 compare output COUT1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1254   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1255   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1256   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1257   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1258  IFX_INLINE void IfxCcu6_initCout61Pin(const IfxCcu6_Cout61_Out *cout61, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1259  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1260  /** \brief Initialises a COUT62 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1261   * \param cout62 CC62 compare output COUT2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1262   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1263   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1264   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1265   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1266  IFX_INLINE void IfxCcu6_initCout62Pin(const IfxCcu6_Cout62_Out *cout62, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1267  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1268  /** \brief Initialises a COUT63 output pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1269   * \param cout63 CC63 compare output COUT3
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1270   * \param outputMode The pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1271   * \param padDriver The pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1272   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1273   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1274  IFX_INLINE void IfxCcu6_initCout63Pin(const IfxCcu6_Cout63_Out *cout63, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1275  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1276  /** \brief Initialises a CTRAP input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1277   * \param ctrap CTRAP input
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1278   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1279   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1280   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1281  IFX_INLINE void IfxCcu6_initCtrapPin(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1282  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1283  /** \brief Initialises a T12HR input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1284   * \param t12hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1285   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1286   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1287   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1288  IFX_INLINE void IfxCcu6_initT12hrPin(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1289  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1290  /** \brief Initialises a T13HR input pin
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1291   * \param t13hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1292   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1293   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1294   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1295  IFX_INLINE void IfxCcu6_initT13hrPin(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1296  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1297  /** \} */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1298  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1299  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1300  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1301  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1302  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1303  /** \brief Provides functionality for both setting of CC60 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1304   * \param cc60In CC60 capture input CC60IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1305   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1306   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1307   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1308   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1309  IFX_INLINE void IfxCcu6_initCc60InPinWithPadLevel(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1310  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1311  /** \brief Provides functionality for both setting of CC61 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1312   * \param cc61In CC61 capture input CC61IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1313   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1314   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1315   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1316   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1317  IFX_INLINE void IfxCcu6_initCc61InPinWithPadLevel(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1318  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1319  /** \brief Provides functionality for both setting of CC62 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1320   * \param cc62In CC62 capture input CC62IN
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1321   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1322   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1323   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1324   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1325  IFX_INLINE void IfxCcu6_initCc62InPinWithPadLevel(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1326  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1327  /** \brief Provides functionality for both setting of CCPOS0 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1328   * \param ccpos0 CC60 capture input CCPOS0
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1329   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1330   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1331   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1332   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1333  IFX_INLINE void IfxCcu6_initCcpos0PinWithPadLevel(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1334  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1335  /** \brief Provides functionality for both setting of CCPOS1 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1336   * \param ccpos1 CC61 capture input CCPOS1
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1337   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1338   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1339   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1340   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1341  IFX_INLINE void IfxCcu6_initCcpos1PinWithPadLevel(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1342  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1343  /** \brief Provides functionality for both setting of CCPOS2 pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1344   * \param ccpos2 CC62 capture input CCPOS2
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1345   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1346   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1347   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1348   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1349  IFX_INLINE void IfxCcu6_initCcpos2PinWithPadLevel(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1350  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1351  /** \brief Provides functionality for both setting of CTRAP pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1352   * \param ctrap CTRAP input
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1353   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1354   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1355   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1356   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1357  IFX_INLINE void IfxCcu6_initCtrapPinWithPadLevel(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1358  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1359  /** \brief Provides functionality for both setting of T12HR pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1360   * \param t12hrIn Timer 12 HR input T12HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1361   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1362   * \param padDriver Pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1363   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1364   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1365  IFX_INLINE void IfxCcu6_initT12hrPinWithPadLevel(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1366  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1367  /** \brief Provides functionality for both setting of T13HR pin direction as input and configuring pad driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1368   * \param t13hrIn Timer 13 HR input T13HR
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1369   * \param inputMode The pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1370   * \param padDriver Pad Driver
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1371   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1372   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1373  IFX_INLINE void IfxCcu6_initT13hrPinWithPadLevel(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1374  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1375  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1376   * \param ccu6 pointer to CCU6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1377   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1378   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1379   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1380  IFX_INLINE void IfxCcu6_setSleepMode(Ifx_CCU6 *ccu6, IfxCcu6_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1381  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1382  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1383  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1384  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1385  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1386  /**
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1387   * \param ccu6 pointer to ccu6 registers
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1388   * \return None
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1389   */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1390  IFX_EXTERN void IfxCcu6_resetModule(Ifx_CCU6 *ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1391  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1392  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1393  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1394  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1395  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1396  IFX_INLINE void IfxCcu6_clearAllInterruptStatusFlags(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1397  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1398      ccu6->ISR.U = 0xFFFF;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1399  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1400  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1401  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1402  IFX_INLINE void IfxCcu6_clearCounter(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1403  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1404      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1405      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1406      tctr4.B.T12RES = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1407      tctr4.B.T13RES = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1408      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1409  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1410  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1411  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1412  IFX_INLINE void IfxCcu6_clearDeadTimeCounters(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1413  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1414      ccu6->TCTR4.B.DTRES = TRUE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1415  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1416  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1417  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1418  IFX_INLINE void IfxCcu6_clearInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1419  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1420      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1421      ccu6->ISR.U = mask;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1422  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1423  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1424  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1425  IFX_INLINE void IfxCcu6_clearT12OneNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1426  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1427      ccu6->ISR.B.RT12OM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1428  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1429  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1430  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1431  IFX_INLINE void IfxCcu6_clearT12PeriodNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1432  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1433      ccu6->ISR.B.RT12PM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1434  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1435  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1436  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1437  IFX_INLINE void IfxCcu6_clearT13CompareNotification(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1438  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1439      ccu6->ISR.B.RT13CM = 1;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1440  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1441  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1442  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1443  IFX_INLINE void IfxCcu6_disableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1444  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1445      uint32 shift = ((timer * 8) + 3);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1446      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1447      ccu6->TCTR0.U = ccu6->TCTR0.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1448  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1449  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1450  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1451  IFX_INLINE void IfxCcu6_disableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1452  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1453      uint32 shift = (8 + channel);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1454      uint32 mask  = (1 << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1455      ccu6->T12DTC.U = ccu6->T12DTC.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1456  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1457  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1458  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1459  IFX_INLINE void IfxCcu6_disableDelayBypass(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1460  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1461      ccu6->T12MSEL.B.DBYP = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1462  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1463  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1464  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1465  IFX_INLINE void IfxCcu6_disableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1466  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1467      uint32 mask = (1U << source);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1468      ccu6->IEN.U = ccu6->IEN.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1469  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1470  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1471  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1472  IFX_INLINE void IfxCcu6_disableMultiChannelMode(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1473  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1474      ccu6->MODCTR.B.MCMEN = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1475  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1476  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1477  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1478  IFX_INLINE void IfxCcu6_disableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1479  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1480      Ifx_CCU6_TCTR4 tctr4;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1481      tctr4.U        = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1482      tctr4.B.T12STD = t12;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1483      tctr4.B.T13STD = t13;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1484      ccu6->TCTR4.U  = tctr4.U;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1485  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1486  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1487  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1488  IFX_INLINE void IfxCcu6_disableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1489  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1490      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1491      ccu6->TCTR2.U = ccu6->TCTR2.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1492  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1493  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1494  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1495  IFX_INLINE void IfxCcu6_disableT13InvertedModulation(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1496  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1497      ccu6->CMPSTAT.B.T13IM = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1498  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1499  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1500  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1501  IFX_INLINE void IfxCcu6_disableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1502  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1503      uint32 mask = (1U << timer);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1504      ccu6->MCFG.U = ccu6->MCFG.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1505  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1506  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1507  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1508  IFX_INLINE void IfxCcu6_disableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1509  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1510      uint32 shift = (8 + channelOut);    // offset at location TRPCTR.8 for output CC60
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1511      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1512      ccu6->TRPCTR.U = ccu6->TRPCTR.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1513  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1514  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1515  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1516  IFX_INLINE void IfxCcu6_disableTrapPin(Ifx_CCU6 *ccu6)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1517  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1518      ccu6->TRPCTR.B.TRPPEN = FALSE;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1519  }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1520  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1521  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1522  IFX_INLINE void IfxCcu6_enableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1523  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1524      uint32 shift = ((timer * 8) + 3);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1525      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.h	  1526      ccu6->TCTR0.U = ccu6->TCTR0.U | (mask);
	ld.w	d15,[a15]112
.L577:
	insert	d15,d15,#1,#11,#1
	st.w	[a15]112,d15
.L67:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   453          {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   454              IfxCcu6_enableAdditionalPrescaler(ccu6, IfxCcu6_TimerId_t13);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   455          }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   456  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   457          frequency = freqCC6 / (0x1u << prescaler); // Frequency = FREQ_CCU6 / (2 ^ prescaler)
	mov	d15,#1
.L578:
	sh	d15,d15,d0
	utof	d15,d15
.L579:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   458      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   459      else
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   460      {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   461          /** \retval IfxCcu6_Stat_wrongPwmFreq if the T12 prescaler can't fulfill the
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   462           * required frequency */
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   463          frequency = 0;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   464      }
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   465  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   466      return frequency;
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   467  }
	div.f	d2,d9,d15
	ret
.L66:
	mov	d2,#0
	ret
.L326:
	
__IfxCcu6_setT13Frequency_function_end:
	.size	IfxCcu6_setT13Frequency,__IfxCcu6_setT13Frequency_function_end-IfxCcu6_setT13Frequency
.L160:
	; End of function
	
	.sdecl	'.text.IfxCcu6.IfxCcu6_setT13InputSignal',code,cluster('IfxCcu6_setT13InputSignal')
	.sect	'.text.IfxCcu6.IfxCcu6_setT13InputSignal'
	.align	2
	
	.global	IfxCcu6_setT13InputSignal

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   468  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   469  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   470  void IfxCcu6_setT13InputSignal(Ifx_CCU6 *ccu6, IfxCcu6_T13hr_In *extInput)
; Function IfxCcu6_setT13InputSignal
.L111:
IfxCcu6_setT13InputSignal:	.type	func

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   471  {
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   472      ccu6->PISEL2.B.T13EXT  = extInput->select >= Ifx_RxSel_e;
	ld.bu	d15,[a5]12
.L584:
	ld.bu	d0,[a4]20
.L585:
	ge.u	d15,d15,#4
.L586:
	insert	d15,d0,d15,#7,#1
	st.b	[a4]20,d15
.L587:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   473      ccu6->PISEL2.B.IST13HR = extInput->select;
	ld.bu	d15,[a5]12
.L588:
	ld.bu	d0,[a4]20
.L589:
	insert	d15,d0,d15,#0,#2
	st.b	[a4]20,d15
.L590:

; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   474  
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   475      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, extInput->module == ccu6);
; ..\0_Src\4_McHal\Tricore\Ccu6\Std\IfxCcu6.c	   476  }
	ret
.L355:
	
__IfxCcu6_setT13InputSignal_function_end:
	.size	IfxCcu6_setT13InputSignal,__IfxCcu6_setT13InputSignal_function_end-IfxCcu6_setT13InputSignal
.L165:
	; End of function
	
	.calls	'IfxCcu6_setT12Frequency','__f_ftous'
	.calls	'IfxCcu6_setT13Frequency','__f_ftous'
	.calls	'IfxCcu6_disableModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxCcu6_disableModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxCcu6_disableModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxCcu6_enableModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxCcu6_enableModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxCcu6_enableModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxCcu6_getSrcAddress','IfxCcu6_getIndex'
	.calls	'IfxCcu6_resetModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxCcu6_resetModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxCcu6_resetModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxCcu6_setT12Frequency','IfxScuCcu_getSpbFrequency'
	.calls	'IfxCcu6_setT13Frequency','IfxScuCcu_getSpbFrequency'
	.calls	'IfxCcu6_connectTrigger','',0
	.calls	'IfxCcu6_disableModulationOutput','',0
	.calls	'IfxCcu6_disableModule','',0
	.calls	'IfxCcu6_enableModulationOutput','',0
	.calls	'IfxCcu6_enableModule','',0
	.calls	'IfxCcu6_getAddress','',0
	.calls	'IfxCcu6_getCaptureRegisterValue','',0
	.calls	'IfxCcu6_getCaptureShadowRegisterValue','',0
	.calls	'IfxCcu6_getIndex','',0
	.calls	'IfxCcu6_getSrcAddress','',0
	.calls	'IfxCcu6_readTimer','',0
	.calls	'IfxCcu6_resetModule','',0
	.calls	'IfxCcu6_routeInterruptNode','',0
	.calls	'IfxCcu6_setOutputPassiveLevel','',0
	.calls	'IfxCcu6_setT12CaptureCompareState','',0
	.calls	'IfxCcu6_setT12CompareValue','',0
	.calls	'IfxCcu6_setT12Frequency','',0
	.calls	'IfxCcu6_setT12InputSignal','',0
	.calls	'IfxCcu6_setT13CaptureCompareState','',0
	.calls	'IfxCcu6_setT13Frequency','',0
	.extern	IfxCcu6_cfg_indexMap
	.extern	IfxScuWdt_clearCpuEndinit
	.extern	IfxScuWdt_setCpuEndinit
	.extern	IfxScuWdt_getCpuWatchdogPassword
	.extern	IfxScuCcu_getSpbFrequency
	.extern	__f_ftous
	.calls	'IfxCcu6_setT13InputSignal','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L113:
	.word	117012
	.half	3
	.word	.L114
	.byte	4
.L112:
	.byte	1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L115
	.byte	2,1,1,3
	.word	166
	.byte	4
	.byte	'Ifx__jump_and_link',0,3,1,58,17,1,1,5
	.byte	'fun',0,1,58,43
	.word	169
	.byte	6,0,7
	.byte	'__fract',0,4,128,1
.L269:
	.byte	7
	.byte	'float',0,4,4,8
	.byte	'Ifx__float_to_fract',0,3,1,149,2,18
	.word	214
	.byte	1,1,5
	.byte	'a',0,1,149,2,44
	.word	226
	.byte	6,0,4
	.byte	'Ifx__stopPerfCounters',0,3,1,169,2,17,1,1,6,0,9
	.byte	'void',0,10
	.word	312
	.byte	3
	.word	318
.L228:
	.byte	7
	.byte	'unsigned int',0,4,7
.L232:
	.byte	4
	.byte	'__ldmst_c',0,3,2,108,17,1,1
.L235:
	.byte	5
	.byte	'address',0,2,108,42
	.word	323
.L237:
	.byte	5
	.byte	'mask',0,2,108,60
	.word	328
.L239:
	.byte	5
	.byte	'value',0,2,108,75
	.word	328
.L241:
	.byte	6,0,7
	.byte	'unsigned long long int',0,8,7,3
	.word	312
	.byte	8
	.byte	'__ld64',0,3,2,132,1,19
	.word	406
	.byte	1,1,5
	.byte	'addr',0,2,132,1,32
	.word	432
	.byte	6,0,4
	.byte	'__st64',0,3,2,140,1,17,1,1,5
	.byte	'addr',0,2,140,1,30
	.word	432
	.byte	5
	.byte	'value',0,2,140,1,43
	.word	406
	.byte	6,0,7
	.byte	'int',0,4,5
.L252:
	.byte	7
	.byte	'unsigned char',0,1,8,11
	.byte	'_Ifx_SRC_SRCR_Bits',0,4,68,16,4,12
	.byte	'SRPN',0,1
	.word	525
	.byte	8,0,2,35,0,12
	.byte	'reserved_8',0,1
	.word	525
	.byte	2,6,2,35,1,12
	.byte	'SRE',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'TOS',0,1
	.word	525
	.byte	3,2,2,35,1,12
	.byte	'reserved_14',0,1
	.word	525
	.byte	2,0,2,35,1,12
	.byte	'ECC',0,1
	.word	525
	.byte	5,3,2,35,2,12
	.byte	'reserved_21',0,1
	.word	525
	.byte	3,0,2,35,2,12
	.byte	'SRR',0,1
	.word	525
	.byte	1,7,2,35,3,12
	.byte	'CLRR',0,1
	.word	525
	.byte	1,6,2,35,3,12
	.byte	'SETR',0,1
	.word	525
	.byte	1,5,2,35,3,12
	.byte	'IOV',0,1
	.word	525
	.byte	1,4,2,35,3,12
	.byte	'IOVCLR',0,1
	.word	525
	.byte	1,3,2,35,3,12
	.byte	'SWS',0,1
	.word	525
	.byte	1,2,2,35,3,12
	.byte	'SWSCLR',0,1
	.word	525
	.byte	1,1,2,35,3,12
	.byte	'reserved_31',0,1
	.word	525
	.byte	1,0,2,35,3,0,13,4,93,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	542
	.byte	4,2,35,0,0,10
	.word	832
.L373:
	.byte	3
	.word	871
	.byte	4
	.byte	'IfxSrc_clearRequest',0,3,3,247,1,17,1,1,5
	.byte	'src',0,3,247,1,60
	.word	876
	.byte	6,0,7
	.byte	'unsigned int',0,4,7,11
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,6,238,9,16,4,12
	.byte	'ENDINIT',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'LCK',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'PW',0,4
	.word	924
	.byte	14,16,2,35,0,12
	.byte	'REL',0,4
	.word	924
	.byte	16,0,2,35,0,0,13,6,189,16,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	940
	.byte	4,2,35,0,0
.L230:
	.byte	7
	.byte	'unsigned short int',0,2,7,11
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,6,247,9,16,4,12
	.byte	'reserved_0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'reserved_1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'IR0',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'DR',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'IR1',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'UR',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'PAR',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'TCR',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'TCTR',0,1
	.word	525
	.byte	7,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,6,197,16,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	1098
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,6,135,10,16,4,12
	.byte	'AE',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'OE',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'IS0',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'DS',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'TO',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'IS1',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'US',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'PAS',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'TCS',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'TCT',0,1
	.word	525
	.byte	7,0,2,35,1,12
	.byte	'TIM',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,6,205,16,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	1364
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_SCU_WDTCPU',0,6,136,17,25,12,14
	.byte	'CON0',0
	.word	1036
	.byte	4,2,35,0,14
	.byte	'CON1',0
	.word	1324
	.byte	4,2,35,4,14
	.byte	'SR',0
	.word	1555
	.byte	4,2,35,8,0,10
	.word	1595
	.byte	3
	.word	1658
	.byte	4
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,5,164,4,17,1,1,5
	.byte	'watchdog',0,5,164,4,65
	.word	1663
	.byte	5
	.byte	'password',0,5,164,4,82
	.word	1076
	.byte	6,0,4
	.byte	'IfxScuWdt_clearSafetyEndinitInline',0,3,5,197,4,17,1,1,5
	.byte	'password',0,5,197,4,59
	.word	1076
	.byte	6,0,4
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,5,144,5,17,1,1,5
	.byte	'watchdog',0,5,144,5,63
	.word	1663
	.byte	5
	.byte	'password',0,5,144,5,80
	.word	1076
	.byte	6,0,4
	.byte	'IfxScuWdt_setSafetyEndinitInline',0,3,5,177,5,17,1,1,5
	.byte	'password',0,5,177,5,57
	.word	1076
	.byte	6,0,8
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,5,220,4,19
	.word	1076
	.byte	1,1,5
	.byte	'watchdog',0,5,220,4,74
	.word	1663
	.byte	6,0,8
	.byte	'IfxScuWdt_getSafetyWatchdogPasswordInline',0,3,5,129,5,19
	.word	1076
	.byte	1,1,6,0,15,8,161,1,9,1,16
	.byte	'IfxCpu_ResourceCpu_0',0,0,16
	.byte	'IfxCpu_ResourceCpu_1',0,1,16
	.byte	'IfxCpu_ResourceCpu_2',0,2,16
	.byte	'IfxCpu_ResourceCpu_3',0,3,16
	.byte	'IfxCpu_ResourceCpu_4',0,4,16
	.byte	'IfxCpu_ResourceCpu_5',0,5,16
	.byte	'IfxCpu_ResourceCpu_none',0,6,0,8
	.byte	'IfxCpu_getCoreIndex',0,3,7,235,6,31
	.word	2073
	.byte	1,1,6,0,8
	.byte	'IfxCpu_areInterruptsEnabled',0,3,7,233,5,20
	.word	525
	.byte	1,1,6,0
.L256:
	.byte	7
	.byte	'unsigned long int',0,4,7,8
	.byte	'IfxCpu_getPerformanceCounter',0,3,7,255,6,19
	.word	2320
	.byte	1,1,5
	.byte	'address',0,7,255,6,55
	.word	1076
	.byte	6,0,8
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,7,156,7,20
	.word	525
	.byte	1,1,5
	.byte	'address',0,7,156,7,70
	.word	1076
	.byte	6,0,4
	.byte	'IfxCpu_updatePerformanceCounter',0,3,7,138,9,17,1,1,5
	.byte	'address',0,7,138,9,56
	.word	2320
	.byte	5
	.byte	'count',0,7,138,9,72
	.word	2320
	.byte	17,6,0,0,11
	.byte	'_Ifx_P_OUT_Bits',0,10,145,3,16,4,12
	.byte	'P0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'P1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'P2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'P3',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'P4',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'P5',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'P6',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'P7',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'P8',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'P9',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'P10',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'P11',0,1
	.word	525
	.byte	1,4,2,35,1,12
	.byte	'P12',0,1
	.word	525
	.byte	1,3,2,35,1,12
	.byte	'P13',0,1
	.word	525
	.byte	1,2,2,35,1,12
	.byte	'P14',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'P15',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,10,171,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	2551
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_OMR_Bits',0,10,171,2,16,4,12
	.byte	'PS0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'PS1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'PS2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'PS3',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'PS4',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'PS5',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'PS6',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'PS7',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'PS8',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'PS9',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'PS10',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'PS11',0,1
	.word	525
	.byte	1,4,2,35,1,12
	.byte	'PS12',0,1
	.word	525
	.byte	1,3,2,35,1,12
	.byte	'PS13',0,1
	.word	525
	.byte	1,2,2,35,1,12
	.byte	'PS14',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'PS15',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'PCL0',0,1
	.word	525
	.byte	1,7,2,35,2,12
	.byte	'PCL1',0,1
	.word	525
	.byte	1,6,2,35,2,12
	.byte	'PCL2',0,1
	.word	525
	.byte	1,5,2,35,2,12
	.byte	'PCL3',0,1
	.word	525
	.byte	1,4,2,35,2,12
	.byte	'PCL4',0,1
	.word	525
	.byte	1,3,2,35,2,12
	.byte	'PCL5',0,1
	.word	525
	.byte	1,2,2,35,2,12
	.byte	'PCL6',0,1
	.word	525
	.byte	1,1,2,35,2,12
	.byte	'PCL7',0,1
	.word	525
	.byte	1,0,2,35,2,12
	.byte	'PCL8',0,1
	.word	525
	.byte	1,7,2,35,3,12
	.byte	'PCL9',0,1
	.word	525
	.byte	1,6,2,35,3,12
	.byte	'PCL10',0,1
	.word	525
	.byte	1,5,2,35,3,12
	.byte	'PCL11',0,1
	.word	525
	.byte	1,4,2,35,3,12
	.byte	'PCL12',0,1
	.word	525
	.byte	1,3,2,35,3,12
	.byte	'PCL13',0,1
	.word	525
	.byte	1,2,2,35,3,12
	.byte	'PCL14',0,1
	.word	525
	.byte	1,1,2,35,3,12
	.byte	'PCL15',0,1
	.word	525
	.byte	1,0,2,35,3,0,13,10,251,4,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	2867
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_ID_Bits',0,10,133,1,16,4,12
	.byte	'MODREV',0,1
	.word	525
	.byte	8,0,2,35,0,12
	.byte	'MODTYPE',0,1
	.word	525
	.byte	8,0,2,35,1,12
	.byte	'MODNUMBER',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,10,155,4,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	3438
	.byte	4,2,35,0,0,18,4
	.word	525
	.byte	19,3,0,11
	.byte	'_Ifx_P_IOCR0_Bits',0,10,163,1,16,4,12
	.byte	'reserved_0',0,1
	.word	525
	.byte	3,5,2,35,0,12
	.byte	'PC0',0,1
	.word	525
	.byte	5,0,2,35,0,12
	.byte	'reserved_8',0,1
	.word	525
	.byte	3,5,2,35,1,12
	.byte	'PC1',0,1
	.word	525
	.byte	5,0,2,35,1,12
	.byte	'reserved_16',0,1
	.word	525
	.byte	3,5,2,35,2,12
	.byte	'PC2',0,1
	.word	525
	.byte	5,0,2,35,2,12
	.byte	'reserved_24',0,1
	.word	525
	.byte	3,5,2,35,3,12
	.byte	'PC3',0,1
	.word	525
	.byte	5,0,2,35,3,0,13,10,171,4,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	3567
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_IOCR4_Bits',0,10,189,1,16,4,12
	.byte	'reserved_0',0,1
	.word	525
	.byte	3,5,2,35,0,12
	.byte	'PC4',0,1
	.word	525
	.byte	5,0,2,35,0,12
	.byte	'reserved_8',0,1
	.word	525
	.byte	3,5,2,35,1,12
	.byte	'PC5',0,1
	.word	525
	.byte	5,0,2,35,1,12
	.byte	'reserved_16',0,1
	.word	525
	.byte	3,5,2,35,2,12
	.byte	'PC6',0,1
	.word	525
	.byte	5,0,2,35,2,12
	.byte	'reserved_24',0,1
	.word	525
	.byte	3,5,2,35,3,12
	.byte	'PC7',0,1
	.word	525
	.byte	5,0,2,35,3,0,13,10,187,4,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	3782
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_IOCR8_Bits',0,10,202,1,16,4,12
	.byte	'reserved_0',0,1
	.word	525
	.byte	3,5,2,35,0,12
	.byte	'PC8',0,1
	.word	525
	.byte	5,0,2,35,0,12
	.byte	'reserved_8',0,1
	.word	525
	.byte	3,5,2,35,1,12
	.byte	'PC9',0,1
	.word	525
	.byte	5,0,2,35,1,12
	.byte	'reserved_16',0,1
	.word	525
	.byte	3,5,2,35,2,12
	.byte	'PC10',0,1
	.word	525
	.byte	5,0,2,35,2,12
	.byte	'reserved_24',0,1
	.word	525
	.byte	3,5,2,35,3,12
	.byte	'PC11',0,1
	.word	525
	.byte	5,0,2,35,3,0,13,10,195,4,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	3997
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_IOCR12_Bits',0,10,176,1,16,4,12
	.byte	'reserved_0',0,1
	.word	525
	.byte	3,5,2,35,0,12
	.byte	'PC12',0,1
	.word	525
	.byte	5,0,2,35,0,12
	.byte	'reserved_8',0,1
	.word	525
	.byte	3,5,2,35,1,12
	.byte	'PC13',0,1
	.word	525
	.byte	5,0,2,35,1,12
	.byte	'reserved_16',0,1
	.word	525
	.byte	3,5,2,35,2,12
	.byte	'PC14',0,1
	.word	525
	.byte	5,0,2,35,2,12
	.byte	'reserved_24',0,1
	.word	525
	.byte	3,5,2,35,3,12
	.byte	'PC15',0,1
	.word	525
	.byte	5,0,2,35,3,0,13,10,179,4,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	4214
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_IN_Bits',0,10,141,1,16,4,12
	.byte	'P0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'P1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'P2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'P3',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'P4',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'P5',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'P6',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'P7',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'P8',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'P9',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'P10',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'P11',0,1
	.word	525
	.byte	1,4,2,35,1,12
	.byte	'P12',0,1
	.word	525
	.byte	1,3,2,35,1,12
	.byte	'P13',0,1
	.word	525
	.byte	1,2,2,35,1,12
	.byte	'P14',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'P15',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,10,163,4,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	4434
	.byte	4,2,35,0,0,18,24
	.word	525
	.byte	19,23,0,11
	.byte	'_Ifx_P_PDR0_Bits',0,10,212,3,16,4,12
	.byte	'PD0',0,1
	.word	525
	.byte	2,6,2,35,0,12
	.byte	'PL0',0,1
	.word	525
	.byte	2,4,2,35,0,12
	.byte	'PD1',0,1
	.word	525
	.byte	2,2,2,35,0,12
	.byte	'PL1',0,1
	.word	525
	.byte	2,0,2,35,0,12
	.byte	'PD2',0,1
	.word	525
	.byte	2,6,2,35,1,12
	.byte	'PL2',0,1
	.word	525
	.byte	2,4,2,35,1,12
	.byte	'PD3',0,1
	.word	525
	.byte	2,2,2,35,1,12
	.byte	'PL3',0,1
	.word	525
	.byte	2,0,2,35,1,12
	.byte	'PD4',0,1
	.word	525
	.byte	2,6,2,35,2,12
	.byte	'PL4',0,1
	.word	525
	.byte	2,4,2,35,2,12
	.byte	'PD5',0,1
	.word	525
	.byte	2,2,2,35,2,12
	.byte	'PL5',0,1
	.word	525
	.byte	2,0,2,35,2,12
	.byte	'PD6',0,1
	.word	525
	.byte	2,6,2,35,3,12
	.byte	'PL6',0,1
	.word	525
	.byte	2,4,2,35,3,12
	.byte	'PD7',0,1
	.word	525
	.byte	2,2,2,35,3,12
	.byte	'PL7',0,1
	.word	525
	.byte	2,0,2,35,3,0,13,10,195,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	4758
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_PDR1_Bits',0,10,233,3,16,4,12
	.byte	'PD8',0,1
	.word	525
	.byte	2,6,2,35,0,12
	.byte	'PL8',0,1
	.word	525
	.byte	2,4,2,35,0,12
	.byte	'PD9',0,1
	.word	525
	.byte	2,2,2,35,0,12
	.byte	'PL9',0,1
	.word	525
	.byte	2,0,2,35,0,12
	.byte	'PD10',0,1
	.word	525
	.byte	2,6,2,35,1,12
	.byte	'PL10',0,1
	.word	525
	.byte	2,4,2,35,1,12
	.byte	'PD11',0,1
	.word	525
	.byte	2,2,2,35,1,12
	.byte	'PL11',0,1
	.word	525
	.byte	2,0,2,35,1,12
	.byte	'PD12',0,1
	.word	525
	.byte	2,6,2,35,2,12
	.byte	'PL12',0,1
	.word	525
	.byte	2,4,2,35,2,12
	.byte	'PD13',0,1
	.word	525
	.byte	2,2,2,35,2,12
	.byte	'PL13',0,1
	.word	525
	.byte	2,0,2,35,2,12
	.byte	'PD14',0,1
	.word	525
	.byte	2,6,2,35,3,12
	.byte	'PL14',0,1
	.word	525
	.byte	2,4,2,35,3,12
	.byte	'PD15',0,1
	.word	525
	.byte	2,2,2,35,3,12
	.byte	'PL15',0,1
	.word	525
	.byte	2,0,2,35,3,0,13,10,203,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	5062
	.byte	4,2,35,0,0,18,8
	.word	525
	.byte	19,7,0,11
	.byte	'_Ifx_P_ESR_Bits',0,10,111,16,4,12
	.byte	'EN0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'EN1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'EN2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'EN3',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'EN4',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'EN5',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'EN6',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'EN7',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'EN8',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'EN9',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'EN10',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'EN11',0,1
	.word	525
	.byte	1,4,2,35,1,12
	.byte	'EN12',0,1
	.word	525
	.byte	1,3,2,35,1,12
	.byte	'EN13',0,1
	.word	525
	.byte	1,2,2,35,1,12
	.byte	'EN14',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'EN15',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,10,147,4,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	5387
	.byte	4,2,35,0,0,18,12
	.word	525
	.byte	19,11,0,11
	.byte	'_Ifx_P_PDISC_Bits',0,10,190,3,16,4,12
	.byte	'PDIS0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'PDIS1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'PDIS2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'PDIS3',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'PDIS4',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'PDIS5',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'PDIS6',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'PDIS7',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'PDIS8',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'PDIS9',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'PDIS10',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'PDIS11',0,1
	.word	525
	.byte	1,4,2,35,1,12
	.byte	'PDIS12',0,1
	.word	525
	.byte	1,3,2,35,1,12
	.byte	'PDIS13',0,1
	.word	525
	.byte	1,2,2,35,1,12
	.byte	'PDIS14',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'PDIS15',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,10,187,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	5727
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_PCSR_Bits',0,10,167,3,16,4,12
	.byte	'SEL0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'SEL1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'SEL2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'SEL3',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'SEL4',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'SEL5',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'SEL6',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'SEL7',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'SEL8',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'SEL9',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'SEL10',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'SEL11',0,1
	.word	525
	.byte	1,4,2,35,1,12
	.byte	'SEL12',0,1
	.word	525
	.byte	1,3,2,35,1,12
	.byte	'SEL13',0,1
	.word	525
	.byte	1,2,2,35,1,12
	.byte	'SEL14',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'SEL15',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	15,1,2,35,2,12
	.byte	'LCK',0,1
	.word	525
	.byte	1,0,2,35,3,0,13,10,179,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	6093
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_OMSR0_Bits',0,10,230,2,16,4,12
	.byte	'PS0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'PS1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'PS2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'PS3',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,4
	.word	328
	.byte	28,0,2,35,0,0,13,10,139,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	6457
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_OMSR4_Bits',0,10,251,2,16,4,12
	.byte	'reserved_0',0,1
	.word	525
	.byte	4,4,2,35,0,12
	.byte	'PS4',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'PS5',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'PS6',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'PS7',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'reserved_8',0,4
	.word	328
	.byte	24,0,2,35,0,0,13,10,155,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	6604
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_OMSR8_Bits',0,10,134,3,16,4,12
	.byte	'reserved_0',0,1
	.word	525
	.byte	8,0,2,35,0,12
	.byte	'PS8',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'PS9',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'PS10',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'PS11',0,1
	.word	525
	.byte	1,4,2,35,1,12
	.byte	'reserved_12',0,4
	.word	328
	.byte	20,0,2,35,0,0,13,10,163,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	6773
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_OMSR12_Bits',0,10,240,2,16,4,12
	.byte	'reserved_0',0,2
	.word	1076
	.byte	12,4,2,35,0,12
	.byte	'PS12',0,1
	.word	525
	.byte	1,3,2,35,1,12
	.byte	'PS13',0,1
	.word	525
	.byte	1,2,2,35,1,12
	.byte	'PS14',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'PS15',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,10,147,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	6945
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_OMCR0_Bits',0,10,128,2,16,4,12
	.byte	'reserved_0',0,2
	.word	1076
	.byte	16,0,2,35,0,12
	.byte	'PCL0',0,1
	.word	525
	.byte	1,7,2,35,2,12
	.byte	'PCL1',0,1
	.word	525
	.byte	1,6,2,35,2,12
	.byte	'PCL2',0,1
	.word	525
	.byte	1,5,2,35,2,12
	.byte	'PCL3',0,1
	.word	525
	.byte	1,4,2,35,2,12
	.byte	'reserved_20',0,2
	.word	1076
	.byte	12,0,2,35,2,0,13,10,219,4,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	7120
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_OMCR4_Bits',0,10,149,2,16,4,12
	.byte	'reserved_0',0,4
	.word	328
	.byte	20,12,2,35,0,12
	.byte	'PCL4',0,1
	.word	525
	.byte	1,3,2,35,2,12
	.byte	'PCL5',0,1
	.word	525
	.byte	1,2,2,35,2,12
	.byte	'PCL6',0,1
	.word	525
	.byte	1,1,2,35,2,12
	.byte	'PCL7',0,1
	.word	525
	.byte	1,0,2,35,2,12
	.byte	'reserved_24',0,1
	.word	525
	.byte	8,0,2,35,3,0,13,10,235,4,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	7294
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_OMCR8_Bits',0,10,160,2,16,4,12
	.byte	'reserved_0',0,4
	.word	328
	.byte	24,8,2,35,0,12
	.byte	'PCL8',0,1
	.word	525
	.byte	1,7,2,35,3,12
	.byte	'PCL9',0,1
	.word	525
	.byte	1,6,2,35,3,12
	.byte	'PCL10',0,1
	.word	525
	.byte	1,5,2,35,3,12
	.byte	'PCL11',0,1
	.word	525
	.byte	1,4,2,35,3,12
	.byte	'reserved_28',0,1
	.word	525
	.byte	4,0,2,35,3,0,13,10,243,4,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	7468
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_OMCR12_Bits',0,10,139,2,16,4,12
	.byte	'reserved_0',0,4
	.word	328
	.byte	28,4,2,35,0,12
	.byte	'PCL12',0,1
	.word	525
	.byte	1,3,2,35,3,12
	.byte	'PCL13',0,1
	.word	525
	.byte	1,2,2,35,3,12
	.byte	'PCL14',0,1
	.word	525
	.byte	1,1,2,35,3,12
	.byte	'PCL15',0,1
	.word	525
	.byte	1,0,2,35,3,0,13,10,227,4,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	7644
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_OMSR_Bits',0,10,208,2,16,4,12
	.byte	'PS0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'PS1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'PS2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'PS3',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'PS4',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'PS5',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'PS6',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'PS7',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'PS8',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'PS9',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'PS10',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'PS11',0,1
	.word	525
	.byte	1,4,2,35,1,12
	.byte	'PS12',0,1
	.word	525
	.byte	1,3,2,35,1,12
	.byte	'PS13',0,1
	.word	525
	.byte	1,2,2,35,1,12
	.byte	'PS14',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'PS15',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,10,131,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	7800
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_OMCR_Bits',0,10,234,1,16,4,12
	.byte	'reserved_0',0,2
	.word	1076
	.byte	16,0,2,35,0,12
	.byte	'PCL0',0,1
	.word	525
	.byte	1,7,2,35,2,12
	.byte	'PCL1',0,1
	.word	525
	.byte	1,6,2,35,2,12
	.byte	'PCL2',0,1
	.word	525
	.byte	1,5,2,35,2,12
	.byte	'PCL3',0,1
	.word	525
	.byte	1,4,2,35,2,12
	.byte	'PCL4',0,1
	.word	525
	.byte	1,3,2,35,2,12
	.byte	'PCL5',0,1
	.word	525
	.byte	1,2,2,35,2,12
	.byte	'PCL6',0,1
	.word	525
	.byte	1,1,2,35,2,12
	.byte	'PCL7',0,1
	.word	525
	.byte	1,0,2,35,2,12
	.byte	'PCL8',0,1
	.word	525
	.byte	1,7,2,35,3,12
	.byte	'PCL9',0,1
	.word	525
	.byte	1,6,2,35,3,12
	.byte	'PCL10',0,1
	.word	525
	.byte	1,5,2,35,3,12
	.byte	'PCL11',0,1
	.word	525
	.byte	1,4,2,35,3,12
	.byte	'PCL12',0,1
	.word	525
	.byte	1,3,2,35,3,12
	.byte	'PCL13',0,1
	.word	525
	.byte	1,2,2,35,3,12
	.byte	'PCL14',0,1
	.word	525
	.byte	1,1,2,35,3,12
	.byte	'PCL15',0,1
	.word	525
	.byte	1,0,2,35,3,0,13,10,211,4,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	8133
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_LPCR_Bits',0,10,215,1,16,4,12
	.byte	'REN_CTRL',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'RX_EN',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'TERM',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'LRXTERM',0,1
	.word	525
	.byte	3,2,2,35,0,12
	.byte	'LVDSM',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'PS',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'TEN_CTRL',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'TX_EN',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'VDIFFADJ',0,1
	.word	525
	.byte	2,4,2,35,1,12
	.byte	'VOSDYN',0,1
	.word	525
	.byte	1,3,2,35,1,12
	.byte	'VOSEXT',0,1
	.word	525
	.byte	1,2,2,35,1,12
	.byte	'TX_PD',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'TX_PWDPD',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,10,203,4,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	8481
	.byte	4,2,35,0,0,18,32
	.word	8761
	.byte	19,7,0,18,56
	.word	525
	.byte	19,55,0,11
	.byte	'_Ifx_P_ACCEN1_Bits',0,10,105,16,4,12
	.byte	'reserved_0',0,4
	.word	328
	.byte	32,0,2,35,0,0,13,10,139,4,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	8819
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_ACCEN0_Bits',0,10,68,16,4,12
	.byte	'EN0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'EN1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'EN2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'EN3',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'EN4',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'EN5',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'EN6',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'EN7',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'EN8',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'EN9',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'EN10',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'EN11',0,1
	.word	525
	.byte	1,4,2,35,1,12
	.byte	'EN12',0,1
	.word	525
	.byte	1,3,2,35,1,12
	.byte	'EN13',0,1
	.word	525
	.byte	1,2,2,35,1,12
	.byte	'EN14',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'EN15',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'EN16',0,1
	.word	525
	.byte	1,7,2,35,2,12
	.byte	'EN17',0,1
	.word	525
	.byte	1,6,2,35,2,12
	.byte	'EN18',0,1
	.word	525
	.byte	1,5,2,35,2,12
	.byte	'EN19',0,1
	.word	525
	.byte	1,4,2,35,2,12
	.byte	'EN20',0,1
	.word	525
	.byte	1,3,2,35,2,12
	.byte	'EN21',0,1
	.word	525
	.byte	1,2,2,35,2,12
	.byte	'EN22',0,1
	.word	525
	.byte	1,1,2,35,2,12
	.byte	'EN23',0,1
	.word	525
	.byte	1,0,2,35,2,12
	.byte	'EN24',0,1
	.word	525
	.byte	1,7,2,35,3,12
	.byte	'EN25',0,1
	.word	525
	.byte	1,6,2,35,3,12
	.byte	'EN26',0,1
	.word	525
	.byte	1,5,2,35,3,12
	.byte	'EN27',0,1
	.word	525
	.byte	1,4,2,35,3,12
	.byte	'EN28',0,1
	.word	525
	.byte	1,3,2,35,3,12
	.byte	'EN29',0,1
	.word	525
	.byte	1,2,2,35,3,12
	.byte	'EN30',0,1
	.word	525
	.byte	1,1,2,35,3,12
	.byte	'EN31',0,1
	.word	525
	.byte	1,0,2,35,3,0,13,10,131,4,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	8906
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P',0,10,220,5,25,128,2,14
	.byte	'OUT',0
	.word	2827
	.byte	4,2,35,0,14
	.byte	'OMR',0
	.word	3398
	.byte	4,2,35,4,14
	.byte	'ID',0
	.word	3518
	.byte	4,2,35,8,14
	.byte	'reserved_C',0
	.word	3558
	.byte	4,2,35,12,14
	.byte	'IOCR0',0
	.word	3742
	.byte	4,2,35,16,14
	.byte	'IOCR4',0
	.word	3957
	.byte	4,2,35,20,14
	.byte	'IOCR8',0
	.word	4174
	.byte	4,2,35,24,14
	.byte	'IOCR12',0
	.word	4394
	.byte	4,2,35,28,14
	.byte	'reserved_20',0
	.word	3558
	.byte	4,2,35,32,14
	.byte	'IN',0
	.word	4709
	.byte	4,2,35,36,14
	.byte	'reserved_28',0
	.word	4749
	.byte	24,2,35,40,14
	.byte	'PDR0',0
	.word	5022
	.byte	4,2,35,64,14
	.byte	'PDR1',0
	.word	5338
	.byte	4,2,35,68,14
	.byte	'reserved_48',0
	.word	5378
	.byte	8,2,35,72,14
	.byte	'ESR',0
	.word	5678
	.byte	4,2,35,80,14
	.byte	'reserved_54',0
	.word	5718
	.byte	12,2,35,84,14
	.byte	'PDISC',0
	.word	6053
	.byte	4,2,35,96,14
	.byte	'PCSR',0
	.word	6417
	.byte	4,2,35,100,14
	.byte	'reserved_68',0
	.word	5378
	.byte	8,2,35,104,14
	.byte	'OMSR0',0
	.word	6564
	.byte	4,2,35,112,14
	.byte	'OMSR4',0
	.word	6733
	.byte	4,2,35,116,14
	.byte	'OMSR8',0
	.word	6905
	.byte	4,2,35,120,14
	.byte	'OMSR12',0
	.word	7080
	.byte	4,2,35,124,14
	.byte	'OMCR0',0
	.word	7254
	.byte	4,3,35,128,1,14
	.byte	'OMCR4',0
	.word	7428
	.byte	4,3,35,132,1,14
	.byte	'OMCR8',0
	.word	7604
	.byte	4,3,35,136,1,14
	.byte	'OMCR12',0
	.word	7760
	.byte	4,3,35,140,1,14
	.byte	'OMSR',0
	.word	8093
	.byte	4,3,35,144,1,14
	.byte	'OMCR',0
	.word	8441
	.byte	4,3,35,148,1,14
	.byte	'reserved_98',0
	.word	5378
	.byte	8,3,35,152,1,14
	.byte	'LPCR',0
	.word	8801
	.byte	32,3,35,160,1,14
	.byte	'reserved_C0',0
	.word	8810
	.byte	56,3,35,192,1,14
	.byte	'ACCEN1',0
	.word	8866
	.byte	4,3,35,248,1,14
	.byte	'ACCEN0',0
	.word	9433
	.byte	4,3,35,252,1,0,10
	.word	9473
	.byte	3
	.word	10043
	.byte	15,9,81,9,1,16
	.byte	'IfxPort_InputMode_undefined',0,127,16
	.byte	'IfxPort_InputMode_noPullDevice',0,0,16
	.byte	'IfxPort_InputMode_pullDown',0,8,16
	.byte	'IfxPort_InputMode_pullUp',0,16,0,4
	.byte	'IfxPort_setPinModeInput',0,3,9,157,5,17,1,1,5
	.byte	'port',0,9,157,5,48
	.word	10048
	.byte	5
	.byte	'pinIndex',0,9,157,5,60
	.word	525
	.byte	5
	.byte	'mode',0,9,157,5,88
	.word	10053
	.byte	6,0,15,9,140,1,9,1,16
	.byte	'IfxPort_OutputMode_none',0,0,16
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,16
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,15,9,126,9,1,16
	.byte	'IfxPort_OutputIdx_general',0,128,1,16
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,16
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,16
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,16
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,16
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,16
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,16
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0,4
	.byte	'IfxPort_setPinModeOutput',0,3,9,163,5,17,1,1,5
	.byte	'port',0,9,163,5,49
	.word	10048
	.byte	5
	.byte	'pinIndex',0,9,163,5,61
	.word	525
	.byte	5
	.byte	'mode',0,9,163,5,90
	.word	10258
	.byte	5
	.byte	'index',0,9,163,5,114
	.word	10354
	.byte	6,0,15,9,187,1,9,4,16
	.byte	'IfxPort_State_notChanged',0,0,16
	.byte	'IfxPort_State_high',0,1,16
	.byte	'IfxPort_State_low',0,128,128,4,16
	.byte	'IfxPort_State_toggled',0,129,128,4,0,4
	.byte	'IfxPort_setPinState',0,3,9,169,5,17,1,1,5
	.byte	'port',0,9,169,5,44
	.word	10048
	.byte	5
	.byte	'pinIndex',0,9,169,5,56
	.word	525
	.byte	5
	.byte	'action',0,9,169,5,80
	.word	10667
	.byte	6,0,4
	.byte	'IfxScuCcu_wait',0,3,11,157,14,17,1,1,5
	.byte	'timeSec',0,11,157,14,40
	.word	226
	.byte	17,6,0,0,8
	.byte	'IfxScuCcu_getStmFrequency',0,3,11,188,13,20
	.word	226
	.byte	1,1,6,0,11
	.byte	'_Ifx_CCU6_CLC_Bits',0,13,133,1,16,4,12
	.byte	'DISR',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'DISS',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'reserved_2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'EDIS',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,2
	.word	1076
	.byte	12,0,2,35,0,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,13,252,4,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	10932
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_MCFG_Bits',0,13,231,2,16,4,12
	.byte	'T12',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'T13',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'MCM',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'reserved_3',0,2
	.word	1076
	.byte	12,1,2,35,0,12
	.byte	'reserved_15',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,13,244,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	11113
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_ID_Bits',0,13,183,1,16,4,12
	.byte	'MODREV',0,1
	.word	525
	.byte	8,0,2,35,0,12
	.byte	'MODNUM',0,1
	.word	525
	.byte	8,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,13,148,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	11293
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_MOSEL_Bits',0,13,163,3,16,4,12
	.byte	'TRIG0SEL',0,1
	.word	525
	.byte	3,5,2,35,0,12
	.byte	'TRIG1SEL',0,1
	.word	525
	.byte	3,2,2,35,0,12
	.byte	'TRIG2SEL',0,2
	.word	1076
	.byte	3,7,2,35,0,12
	.byte	'reserved_9',0,4
	.word	328
	.byte	23,0,2,35,0,0,13,13,156,6,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	11417
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_PISEL0_Bits',0,13,185,3,16,4,12
	.byte	'ISCC60',0,1
	.word	525
	.byte	2,6,2,35,0,12
	.byte	'ISCC61',0,1
	.word	525
	.byte	2,4,2,35,0,12
	.byte	'ISCC62',0,1
	.word	525
	.byte	2,2,2,35,0,12
	.byte	'ISTRP',0,1
	.word	525
	.byte	2,0,2,35,0,12
	.byte	'ISPOS0',0,1
	.word	525
	.byte	2,6,2,35,1,12
	.byte	'ISPOS1',0,1
	.word	525
	.byte	2,4,2,35,1,12
	.byte	'ISPOS2',0,1
	.word	525
	.byte	2,2,2,35,1,12
	.byte	'IST12HR',0,1
	.word	525
	.byte	2,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,13,172,6,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	11567
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_PISEL2_Bits',0,13,199,3,16,4,12
	.byte	'IST13HR',0,1
	.word	525
	.byte	2,6,2,35,0,12
	.byte	'ISCNT12',0,1
	.word	525
	.byte	2,4,2,35,0,12
	.byte	'ISCNT13',0,1
	.word	525
	.byte	2,2,2,35,0,12
	.byte	'T12EXT',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'T13EXT',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'reserved_8',0,4
	.word	328
	.byte	24,0,2,35,0,0,13,13,180,6,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	11803
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_KSCSR_Bits',0,13,202,2,16,4,12
	.byte	'SB0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'SB1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'SB2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'SB3',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,4
	.word	328
	.byte	28,0,2,35,0,0,13,13,228,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	11987
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_T12_Bits',0,13,219,3,16,4,12
	.byte	'T12CV',0,2
	.word	1076
	.byte	16,0,2,35,0,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,13,196,6,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	12137
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_T12PR_Bits',0,13,251,3,16,4,12
	.byte	'T12PV',0,2
	.word	1076
	.byte	16,0,2,35,0,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,13,220,6,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	12243
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_T12DTC_Bits',0,13,226,3,16,4,12
	.byte	'DTM',0,1
	.word	525
	.byte	8,0,2,35,0,12
	.byte	'DTE0',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'DTE1',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'DTE2',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'reserved_11',0,1
	.word	525
	.byte	1,4,2,35,1,12
	.byte	'DTR0',0,1
	.word	525
	.byte	1,3,2,35,1,12
	.byte	'DTR1',0,1
	.word	525
	.byte	1,2,2,35,1,12
	.byte	'DTR2',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'reserved_15',0,4
	.word	328
	.byte	17,0,2,35,0,0,13,13,204,6,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	12351
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_CC6R_Bits',0,13,119,16,4,12
	.byte	'CCV',0,2
	.word	1076
	.byte	16,0,2,35,0,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,13,236,4,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	12577
	.byte	4,2,35,0,0,18,12
	.word	12641
	.byte	19,2,0,11
	.byte	'_Ifx_CCU6_CC6SR_Bits',0,13,126,16,4,12
	.byte	'CCS',0,2
	.word	1076
	.byte	16,0,2,35,0,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,13,244,4,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	12690
	.byte	4,2,35,0,0,18,12
	.word	12755
	.byte	19,2,0,11
	.byte	'_Ifx_CCU6_T13_Bits',0,13,130,4,16,4,12
	.byte	'T13CV',0,2
	.word	1076
	.byte	16,0,2,35,0,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,13,228,6,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	12804
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_T13PR_Bits',0,13,137,4,16,4,12
	.byte	'T13PV',0,2
	.word	1076
	.byte	16,0,2,35,0,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,13,236,6,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	12910
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_CC63R_Bits',0,13,105,16,4,12
	.byte	'CCV',0,2
	.word	1076
	.byte	16,0,2,35,0,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,13,220,4,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	13018
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_CC63SR_Bits',0,13,112,16,4,12
	.byte	'CCS',0,2
	.word	1076
	.byte	16,0,2,35,0,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,13,228,4,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	13123
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_CMPSTAT_Bits',0,13,161,1,16,4,12
	.byte	'CC60ST',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'CC61ST',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'CC62ST',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'CCPOS60',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'CCPOS61',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'CCPOS62',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'CC63ST',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'reserved_7',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'CC60PS',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'COUT60PS',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'CC61PS',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'COUT61PS',0,1
	.word	525
	.byte	1,4,2,35,1,12
	.byte	'CC62PS',0,1
	.word	525
	.byte	1,3,2,35,1,12
	.byte	'COUT62PS',0,1
	.word	525
	.byte	1,2,2,35,1,12
	.byte	'COUT63PS',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'T13IM',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,13,140,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	13229
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_CMPMODIF_Bits',0,13,144,1,16,4,12
	.byte	'MCC60S',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'MCC61S',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'MCC62S',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'reserved_3',0,1
	.word	525
	.byte	3,2,2,35,0,12
	.byte	'MCC63S',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'reserved_7',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'MCC60R',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'MCC61R',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'MCC62R',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'reserved_11',0,1
	.word	525
	.byte	3,2,2,35,1,12
	.byte	'MCC63R',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'reserved_15',0,4
	.word	328
	.byte	17,0,2,35,0,0,13,13,132,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	13624
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_T12MSEL_Bits',0,13,240,3,16,4,12
	.byte	'MSEL60',0,1
	.word	525
	.byte	4,4,2,35,0,12
	.byte	'MSEL61',0,1
	.word	525
	.byte	4,0,2,35,0,12
	.byte	'MSEL62',0,1
	.word	525
	.byte	4,4,2,35,1,12
	.byte	'HSYNC',0,1
	.word	525
	.byte	3,1,2,35,1,12
	.byte	'DBYP',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,13,212,6,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	13929
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_TCTR0_Bits',0,13,144,4,16,4,12
	.byte	'T12CLK',0,1
	.word	525
	.byte	3,5,2,35,0,12
	.byte	'T12PRE',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'T12R',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'STE12',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'CDIR',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'CTM',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'T13CLK',0,1
	.word	525
	.byte	3,5,2,35,1,12
	.byte	'T13PRE',0,1
	.word	525
	.byte	1,4,2,35,1,12
	.byte	'T13R',0,1
	.word	525
	.byte	1,3,2,35,1,12
	.byte	'STE13',0,1
	.word	525
	.byte	1,2,2,35,1,12
	.byte	'reserved_14',0,4
	.word	328
	.byte	18,0,2,35,0,0,13,13,244,6,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	14109
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_TCTR2_Bits',0,13,160,4,16,4,12
	.byte	'T12SSC',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'T13SSC',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'T13TEC',0,1
	.word	525
	.byte	3,3,2,35,0,12
	.byte	'T13TED',0,1
	.word	525
	.byte	2,1,2,35,0,12
	.byte	'reserved_7',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'T12RSEL',0,1
	.word	525
	.byte	2,6,2,35,1,12
	.byte	'T13RSEL',0,1
	.word	525
	.byte	2,4,2,35,1,12
	.byte	'reserved_12',0,4
	.word	328
	.byte	20,0,2,35,0,0,13,13,252,6,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	14369
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_TCTR4_Bits',0,13,173,4,16,4,12
	.byte	'T12RR',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'T12RS',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'T12RES',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'DTRES',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'T12CNT',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'T12STR',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'T12STD',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'T13RR',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'T13RS',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'T13RES',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'reserved_11',0,1
	.word	525
	.byte	2,3,2,35,1,12
	.byte	'T13CNT',0,1
	.word	525
	.byte	1,2,2,35,1,12
	.byte	'T13STR',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'T13STD',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0
.L292:
	.byte	13,13,132,7,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	14592
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_MODCTR_Bits',0,13,151,3,16,4,12
	.byte	'T12MODEN',0,1
	.word	525
	.byte	6,2,2,35,0,12
	.byte	'reserved_6',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'MCMEN',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'T13MODEN',0,1
	.word	525
	.byte	6,2,2,35,1,12
	.byte	'reserved_14',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'ECT13O',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,13,148,6,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	14957
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_TRPCTR_Bits',0,13,194,4,16,4,12
	.byte	'TRPM0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'TRPM1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'TRPM2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'reserved_3',0,1
	.word	525
	.byte	5,0,2,35,0,12
	.byte	'TRPEN',0,1
	.word	525
	.byte	6,2,2,35,1,12
	.byte	'TRPEN13',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'TRPPEN',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,13,140,7,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	15169
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_PSLR_Bits',0,13,210,3,16,4,12
	.byte	'PSL',0,1
	.word	525
	.byte	6,2,2,35,0,12
	.byte	'reserved_6',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'PSL63',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'reserved_8',0,4
	.word	328
	.byte	24,0,2,35,0,0,13,13,188,6,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	15388
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_MCMOUTS_Bits',0,13,138,3,16,4,12
	.byte	'MCMPS',0,1
	.word	525
	.byte	6,2,2,35,0,12
	.byte	'reserved_6',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'STRMCM',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'EXPHS',0,1
	.word	525
	.byte	3,5,2,35,1,12
	.byte	'CURHS',0,1
	.word	525
	.byte	3,2,2,35,1,12
	.byte	'reserved_14',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'STRHP',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,13,140,6,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	15531
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_MCMOUT_Bits',0,13,255,2,16,4,12
	.byte	'MCMP',0,1
	.word	525
	.byte	6,2,2,35,0,12
	.byte	'R',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'reserved_7',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'EXPH',0,1
	.word	525
	.byte	3,5,2,35,1,12
	.byte	'CURH',0,1
	.word	525
	.byte	3,2,2,35,1,12
	.byte	'reserved_14',0,4
	.word	328
	.byte	18,0,2,35,0,0,13,13,132,6,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	15755
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_MCMCTR_Bits',0,13,242,2,16,4,12
	.byte	'SWSEL',0,1
	.word	525
	.byte	3,5,2,35,0,12
	.byte	'reserved_3',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'SWSYN',0,1
	.word	525
	.byte	2,2,2,35,0,12
	.byte	'reserved_6',0,1
	.word	525
	.byte	2,0,2,35,0,12
	.byte	'STE12U',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'STE12D',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'STE13U',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'reserved_11',0,4
	.word	328
	.byte	21,0,2,35,0,0,13,13,252,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	15930
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_IMON_Bits',0,13,213,1,16,4,12
	.byte	'LBE',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'CCPOS0I',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'CCPOS1I',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'CCPOS2I',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'CC60INI',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'CC61INI',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'CC62INI',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'CTRAPI',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'T12HRI',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'T13HRI',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'reserved_10',0,4
	.word	328
	.byte	22,0,2,35,0,0,13,13,164,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	16154
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_LI_Bits',0,13,212,2,16,4,12
	.byte	'reserved_0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'CCPOS0EN',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'CCPOS1EN',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'CCPOS2EN',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'CC60INEN',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'CC61INEN',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'CC62INEN',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'CTRAPEN',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'T12HREN',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'T13HREN',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'reserved_10',0,1
	.word	525
	.byte	3,3,2,35,1,12
	.byte	'LBEEN',0,1
	.word	525
	.byte	1,2,2,35,1,12
	.byte	'INPLBE',0,1
	.word	525
	.byte	2,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,13,236,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	16427
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_IS_Bits',0,13,242,1,16,4,12
	.byte	'ICC60R',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'ICC60F',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'ICC61R',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'ICC61F',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'ICC62R',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'ICC62F',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'T12OM',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'T12PM',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'T13CM',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'T13PM',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'TRPF',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'TRPS',0,1
	.word	525
	.byte	1,4,2,35,1,12
	.byte	'CHE',0,1
	.word	525
	.byte	1,3,2,35,1,12
	.byte	'WHE',0,1
	.word	525
	.byte	1,2,2,35,1,12
	.byte	'IDLE',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'STR',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,13,180,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	16772
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_ISS_Bits',0,13,158,2,16,4,12
	.byte	'SCC60R',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'SCC60F',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'SCC61R',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'SCC61F',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'SCC62R',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'SCC62F',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'ST12OM',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'ST12PM',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'ST13CM',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'ST13PM',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'STRPF',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'SWHC',0,1
	.word	525
	.byte	1,4,2,35,1,12
	.byte	'SCHE',0,1
	.word	525
	.byte	1,3,2,35,1,12
	.byte	'SWHE',0,1
	.word	525
	.byte	1,2,2,35,1,12
	.byte	'SIDLE',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'SSTR',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,13,196,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	17129
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_ISR_Bits',0,13,136,2,16,4,12
	.byte	'RCC60R',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'RCC60F',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'RCC61R',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'RCC61F',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'RCC62R',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'RCC62F',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'RT12OM',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'RT12PM',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'RT13CM',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'RT13PM',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'RTRPF',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'reserved_11',0,1
	.word	525
	.byte	1,4,2,35,1,12
	.byte	'RCHE',0,1
	.word	525
	.byte	1,3,2,35,1,12
	.byte	'RWHE',0,1
	.word	525
	.byte	1,2,2,35,1,12
	.byte	'RIDLE',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'RSTR',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,13,188,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	17496
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_INP_Bits',0,13,229,1,16,4,12
	.byte	'INPCC60',0,1
	.word	525
	.byte	2,6,2,35,0,12
	.byte	'INPCC61',0,1
	.word	525
	.byte	2,4,2,35,0,12
	.byte	'INPCC62',0,1
	.word	525
	.byte	2,2,2,35,0,12
	.byte	'INPCHE',0,1
	.word	525
	.byte	2,0,2,35,0,12
	.byte	'INPERR',0,1
	.word	525
	.byte	2,6,2,35,1,12
	.byte	'INPT12',0,1
	.word	525
	.byte	2,4,2,35,1,12
	.byte	'INPT13',0,1
	.word	525
	.byte	2,2,2,35,1,12
	.byte	'reserved_14',0,4
	.word	328
	.byte	18,0,2,35,0,0,13,13,172,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	17870
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_IEN_Bits',0,13,191,1,16,4,12
	.byte	'ENCC60R',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'ENCC60F',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'ENCC61R',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'ENCC61F',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'ENCC62R',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'ENCC62F',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'ENT12OM',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'ENT12PM',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'ENT13CM',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'ENT13PM',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'ENTRPF',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'reserved_11',0,1
	.word	525
	.byte	1,4,2,35,1,12
	.byte	'ENCHE',0,1
	.word	525
	.byte	1,3,2,35,1,12
	.byte	'ENWHE',0,1
	.word	525
	.byte	1,2,2,35,1,12
	.byte	'ENIDLE',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'ENSTR',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,13,13,156,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	18088
	.byte	4,2,35,0,0,18,52
	.word	525
	.byte	19,51,0,11
	.byte	'_Ifx_CCU6_OCS_Bits',0,13,172,3,16,4,12
	.byte	'TGS',0,1
	.word	525
	.byte	2,6,2,35,0,12
	.byte	'TGB',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'TG_P',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,4
	.word	328
	.byte	20,8,2,35,0,12
	.byte	'SUS',0,1
	.word	525
	.byte	4,4,2,35,3,12
	.byte	'SUS_P',0,1
	.word	525
	.byte	1,3,2,35,3,12
	.byte	'SUSSTA',0,1
	.word	525
	.byte	1,2,2,35,3,12
	.byte	'reserved_30',0,1
	.word	525
	.byte	2,0,2,35,3,0,13,13,164,6,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	18486
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_KRSTCLR_Bits',0,13,195,2,16,4,12
	.byte	'CLR',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'reserved_1',0,4
	.word	328
	.byte	31,0,2,35,0,0,13,13,220,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	18693
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_KRST1_Bits',0,13,188,2,16,4,12
	.byte	'RST',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'reserved_1',0,4
	.word	328
	.byte	31,0,2,35,0,0,13,13,212,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	18800
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_KRST0_Bits',0,13,180,2,16,4,12
	.byte	'RST',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'RSTSTAT',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'reserved_2',0,4
	.word	328
	.byte	30,0,2,35,0,0,13,13,204,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	18905
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6_ACCEN0_Bits',0,13,68,16,4,12
	.byte	'EN0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'EN1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'EN2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'EN3',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'EN4',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'EN5',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'EN6',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'EN7',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'EN8',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'EN9',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'EN10',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'EN11',0,1
	.word	525
	.byte	1,4,2,35,1,12
	.byte	'EN12',0,1
	.word	525
	.byte	1,3,2,35,1,12
	.byte	'EN13',0,1
	.word	525
	.byte	1,2,2,35,1,12
	.byte	'EN14',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'EN15',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'EN16',0,1
	.word	525
	.byte	1,7,2,35,2,12
	.byte	'EN17',0,1
	.word	525
	.byte	1,6,2,35,2,12
	.byte	'EN18',0,1
	.word	525
	.byte	1,5,2,35,2,12
	.byte	'EN19',0,1
	.word	525
	.byte	1,4,2,35,2,12
	.byte	'EN20',0,1
	.word	525
	.byte	1,3,2,35,2,12
	.byte	'EN21',0,1
	.word	525
	.byte	1,2,2,35,2,12
	.byte	'EN22',0,1
	.word	525
	.byte	1,1,2,35,2,12
	.byte	'EN23',0,1
	.word	525
	.byte	1,0,2,35,2,12
	.byte	'EN24',0,1
	.word	525
	.byte	1,7,2,35,3,12
	.byte	'EN25',0,1
	.word	525
	.byte	1,6,2,35,3,12
	.byte	'EN26',0,1
	.word	525
	.byte	1,5,2,35,3,12
	.byte	'EN27',0,1
	.word	525
	.byte	1,4,2,35,3,12
	.byte	'EN28',0,1
	.word	525
	.byte	1,3,2,35,3,12
	.byte	'EN29',0,1
	.word	525
	.byte	1,2,2,35,3,12
	.byte	'EN30',0,1
	.word	525
	.byte	1,1,2,35,3,12
	.byte	'EN31',0,1
	.word	525
	.byte	1,0,2,35,3,0,13,13,212,4,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	19029
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_CCU6',0,13,157,7,25,128,2,14
	.byte	'CLC',0
	.word	11073
	.byte	4,2,35,0,14
	.byte	'MCFG',0
	.word	11253
	.byte	4,2,35,4,14
	.byte	'ID',0
	.word	11377
	.byte	4,2,35,8,14
	.byte	'MOSEL',0
	.word	11527
	.byte	4,2,35,12,14
	.byte	'PISEL0',0
	.word	11763
	.byte	4,2,35,16,14
	.byte	'PISEL2',0
	.word	11947
	.byte	4,2,35,20,14
	.byte	'reserved_18',0
	.word	3558
	.byte	4,2,35,24,14
	.byte	'KSCSR',0
	.word	12097
	.byte	4,2,35,28,14
	.byte	'T12',0
	.word	12203
	.byte	4,2,35,32,14
	.byte	'T12PR',0
	.word	12311
	.byte	4,2,35,36,14
	.byte	'T12DTC',0
	.word	12537
	.byte	4,2,35,40,14
	.byte	'reserved_2C',0
	.word	3558
	.byte	4,2,35,44,14
	.byte	'CC6R',0
	.word	12681
	.byte	12,2,35,48,14
	.byte	'reserved_3C',0
	.word	3558
	.byte	4,2,35,60,14
	.byte	'CC6SR',0
	.word	12795
	.byte	12,2,35,64,14
	.byte	'reserved_4C',0
	.word	3558
	.byte	4,2,35,76,14
	.byte	'T13',0
	.word	12870
	.byte	4,2,35,80,14
	.byte	'T13PR',0
	.word	12978
	.byte	4,2,35,84,14
	.byte	'CC63R',0
	.word	13083
	.byte	4,2,35,88,14
	.byte	'CC63SR',0
	.word	13189
	.byte	4,2,35,92,14
	.byte	'CMPSTAT',0
	.word	13584
	.byte	4,2,35,96,14
	.byte	'CMPMODIF',0
	.word	13889
	.byte	4,2,35,100,14
	.byte	'T12MSEL',0
	.word	14069
	.byte	4,2,35,104,14
	.byte	'reserved_6C',0
	.word	3558
	.byte	4,2,35,108,14
	.byte	'TCTR0',0
	.word	14329
	.byte	4,2,35,112,14
	.byte	'TCTR2',0
	.word	14552
	.byte	4,2,35,116,14
	.byte	'TCTR4',0
	.word	14917
	.byte	4,2,35,120,14
	.byte	'reserved_7C',0
	.word	3558
	.byte	4,2,35,124,14
	.byte	'MODCTR',0
	.word	15129
	.byte	4,3,35,128,1,14
	.byte	'TRPCTR',0
	.word	15348
	.byte	4,3,35,132,1,14
	.byte	'PSLR',0
	.word	15491
	.byte	4,3,35,136,1,14
	.byte	'MCMOUTS',0
	.word	15715
	.byte	4,3,35,140,1,14
	.byte	'MCMOUT',0
	.word	15890
	.byte	4,3,35,144,1,14
	.byte	'MCMCTR',0
	.word	16114
	.byte	4,3,35,148,1,14
	.byte	'IMON',0
	.word	16387
	.byte	4,3,35,152,1,14
	.byte	'LI',0
	.word	16732
	.byte	4,3,35,156,1,14
	.byte	'IS',0
	.word	17089
	.byte	4,3,35,160,1,14
	.byte	'ISS',0
	.word	17456
	.byte	4,3,35,164,1,14
	.byte	'ISR',0
	.word	17830
	.byte	4,3,35,168,1,14
	.byte	'INP',0
	.word	18048
	.byte	4,3,35,172,1,14
	.byte	'IEN',0
	.word	18437
	.byte	4,3,35,176,1,14
	.byte	'reserved_B4',0
	.word	18477
	.byte	52,3,35,180,1,14
	.byte	'OCS',0
	.word	18653
	.byte	4,3,35,232,1,14
	.byte	'KRSTCLR',0
	.word	18760
	.byte	4,3,35,236,1,14
	.byte	'KRST1',0
	.word	18865
	.byte	4,3,35,240,1,14
	.byte	'KRST0',0
	.word	18989
	.byte	4,3,35,244,1,14
	.byte	'reserved_F8',0
	.word	3558
	.byte	4,3,35,248,1,14
	.byte	'ACCEN0',0
	.word	19559
	.byte	4,3,35,252,1,0,10
	.word	19599
.L222:
	.byte	3
	.word	20396
.L392:
	.byte	8
	.byte	'IfxCcu6_isModuleEnabled',0,3,12,250,14,20
	.word	525
	.byte	1,1
.L394:
	.byte	5
	.byte	'ccu6',0,12,250,14,54
	.word	20401
.L396:
	.byte	6,0
.L381:
	.byte	15,12,206,2,9,1,16
	.byte	'IfxCcu6_TimerId_t12',0,0,16
	.byte	'IfxCcu6_TimerId_t13',0,1,0,15,12,215,2,9,1,16
	.byte	'IfxCcu6_TimerInputClock_fcc6',0,0,16
	.byte	'IfxCcu6_TimerInputClock_fcc6By2',0,1,16
	.byte	'IfxCcu6_TimerInputClock_fcc6By4',0,2,16
	.byte	'IfxCcu6_TimerInputClock_fcc6By8',0,3,16
	.byte	'IfxCcu6_TimerInputClock_fcc6By16',0,4,16
	.byte	'IfxCcu6_TimerInputClock_fcc6By32',0,5,16
	.byte	'IfxCcu6_TimerInputClock_fcc6By64',0,6,16
	.byte	'IfxCcu6_TimerInputClock_fcc6By128',0,7,0
.L294:
	.byte	4
	.byte	'IfxCcu6_setInputClockFrequency',0,3,12,208,15,17,1,1
.L296:
	.byte	5
	.byte	'ccu6',0,12,208,15,58
	.word	20401
.L298:
	.byte	5
	.byte	'timer',0,12,208,15,80
	.word	20458
.L300:
	.byte	5
	.byte	'frequency',0,12,208,15,111
	.word	20509
.L302:
	.byte	6,0
.L274:
	.byte	15,12,169,2,9,1,16
	.byte	'IfxCcu6_T12CountMode_edgeAligned',0,0,16
	.byte	'IfxCcu6_T12CountMode_centerAligned',0,1,0
.L312:
	.byte	4
	.byte	'IfxCcu6_setT12CountMode',0,3,12,159,16,17,1,1
.L314:
	.byte	5
	.byte	'ccu6',0,12,159,16,51
	.word	20401
.L316:
	.byte	5
	.byte	'mode',0,12,159,16,78
	.word	20879
.L318:
	.byte	6,0,4
	.byte	'IfxCcu6_setT12PeriodValue',0,3,12,171,16,17,1,1,5
	.byte	'ccu6',0,12,171,16,53
	.word	20401
	.byte	5
	.byte	'value',0,12,171,16,66
	.word	1076
	.byte	6,0
.L342:
	.byte	4
	.byte	'IfxCcu6_setT13PeriodValue',0,3,12,189,16,17,1,1
.L343:
	.byte	5
	.byte	'ccu6',0,12,189,16,53
	.word	20401
.L345:
	.byte	5
	.byte	'value',0,12,189,16,66
	.word	1076
.L347:
	.byte	6,0
.L305:
	.byte	4
	.byte	'IfxCcu6_enableAdditionalPrescaler',0,3,12,242,11,17,1,1
.L307:
	.byte	5
	.byte	'ccu6',0,12,242,11,61
	.word	20401
.L309:
	.byte	5
	.byte	'timer',0,12,242,11,83
	.word	20458
.L311:
	.byte	6,0
.L280:
	.byte	4
	.byte	'IfxCcu6_enableShadowTransfer',0,3,12,195,12,17,1,1
.L282:
	.byte	5
	.byte	'ccu6',0,12,195,12,56
	.word	20401
.L284:
	.byte	5
	.byte	't12',0,12,195,12,70
	.word	525
.L286:
	.byte	5
	.byte	't13',0,12,195,12,83
	.word	525
.L288:
	.byte	6,0,15,12,78,9,1,16
	.byte	'IfxCcu6_CaptureCompareInput_cC60',0,0,16
	.byte	'IfxCcu6_CaptureCompareInput_cC61',0,2,16
	.byte	'IfxCcu6_CaptureCompareInput_cC62',0,4,16
	.byte	'IfxCcu6_CaptureCompareInput_cTRAP',0,6,16
	.byte	'IfxCcu6_CaptureCompareInput_cCPOS0',0,8,16
	.byte	'IfxCcu6_CaptureCompareInput_cCPOS1',0,10,16
	.byte	'IfxCcu6_CaptureCompareInput_cCPOS2',0,12,0,15,12,91,9,1,16
	.byte	'IfxCcu6_CaptureCompareInputSignal_a',0,0,16
	.byte	'IfxCcu6_CaptureCompareInputSignal_b',0,1,16
	.byte	'IfxCcu6_CaptureCompareInputSignal_c',0,2,16
	.byte	'IfxCcu6_CaptureCompareInputSignal_d',0,3,0,4
	.byte	'IfxCcu6_setCaptureCompareInputSignal',0,3,12,158,15,17,1,1,5
	.byte	'ccu6',0,12,158,15,64
	.word	20401
	.byte	5
	.byte	'input',0,12,158,15,98
	.word	21302
	.byte	5
	.byte	'signal',0,12,158,15,139,1
	.word	21560
	.byte	6,0,20
	.word	518
	.byte	21
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,22
	.word	21811
	.byte	0,10
	.word	328
	.byte	3
	.word	328
	.byte	23
	.byte	'__cmpswapw',0
	.word	21853
	.byte	1,1,1,1,24
	.byte	'p',0
	.word	21858
	.byte	24
	.byte	'value',0
	.word	328
	.byte	24
	.byte	'compare',0
	.word	328
	.byte	0,25
	.byte	'__debug',0,1,1,1,1,26
	.word	174
	.byte	27
	.word	200
	.byte	6,0,26
	.word	235
	.byte	27
	.word	267
	.byte	6,0,26
	.word	280
	.byte	6,0,26
	.word	344
	.byte	27
	.word	361
	.byte	27
	.word	377
	.byte	27
	.word	390
	.byte	6,0,26
	.word	437
	.byte	27
	.word	456
	.byte	6,0,26
	.word	472
	.byte	27
	.word	487
	.byte	27
	.word	501
	.byte	6,0,26
	.word	881
	.byte	27
	.word	909
	.byte	6,0,26
	.word	1668
	.byte	27
	.word	1708
	.byte	27
	.word	1726
	.byte	6,0,26
	.word	1746
	.byte	27
	.word	1789
	.byte	6,0,26
	.word	1809
	.byte	27
	.word	1847
	.byte	27
	.word	1865
	.byte	6,0,26
	.word	1885
	.byte	27
	.word	1926
	.byte	6,0,28
	.byte	'IfxScuWdt_clearCpuEndinit',0,5,237,1,17,1,1,1,1,5
	.byte	'password',0,5,237,1,50
	.word	1076
	.byte	0,28
	.byte	'IfxScuWdt_setCpuEndinit',0,5,157,2,17,1,1,1,1,5
	.byte	'password',0,5,157,2,48
	.word	1076
	.byte	0,26
	.word	1946
	.byte	27
	.word	1997
	.byte	6,0,26
	.word	2017
	.byte	6,0,29
	.byte	'IfxScuWdt_getCpuWatchdogPassword',0,5,215,3,19
	.word	1076
	.byte	1,1,1,1,26
	.word	2244
	.byte	6,0,26
	.word	2278
	.byte	6,0,26
	.word	2341
	.byte	27
	.word	2382
	.byte	6,0,26
	.word	2401
	.byte	27
	.word	2456
	.byte	6,0,26
	.word	2475
	.byte	27
	.word	2515
	.byte	27
	.word	2532
	.byte	17,6,0,0,26
	.word	10178
	.byte	27
	.word	10210
	.byte	27
	.word	10224
	.byte	27
	.word	10242
	.byte	6,0,26
	.word	10571
	.byte	27
	.word	10604
	.byte	27
	.word	10618
	.byte	27
	.word	10636
	.byte	27
	.word	10650
	.byte	6,0,26
	.word	10770
	.byte	27
	.word	10798
	.byte	27
	.word	10812
	.byte	27
	.word	10830
	.byte	6,0,26
	.word	10848
	.byte	27
	.word	10871
	.byte	17,30
	.word	10892
	.byte	31
	.word	10930
	.byte	0,6,0,0,26
	.word	10892
	.byte	6,0,29
	.byte	'IfxScuCcu_getSpbFrequency',0,11,144,7,20
	.word	226
	.byte	1,1,1,1,26
	.word	20406
	.byte	27
	.word	20442
	.byte	6,0,26
	.word	20790
	.byte	27
	.word	20829
	.byte	27
	.word	20843
	.byte	27
	.word	20858
	.byte	6,0,26
	.word	20958
	.byte	27
	.word	20990
	.byte	27
	.word	21004
	.byte	6,0,26
	.word	21020
	.byte	27
	.word	21054
	.byte	27
	.word	21068
	.byte	6,0,26
	.word	21085
	.byte	27
	.word	21119
	.byte	27
	.word	21133
	.byte	6,0
.L224:
	.byte	15,14,87,9,1,16
	.byte	'IfxCcu6_TrigOut_0',0,0,16
	.byte	'IfxCcu6_TrigOut_1',0,3,16
	.byte	'IfxCcu6_TrigOut_2',0,6,0
.L226:
	.byte	15,14,94,9,1,16
	.byte	'IfxCcu6_TrigSel_cout63',0,0,16
	.byte	'IfxCcu6_TrigSel_cc60',0,1,16
	.byte	'IfxCcu6_TrigSel_cc61',0,1,16
	.byte	'IfxCcu6_TrigSel_cc62',0,1,16
	.byte	'IfxCcu6_TrigSel_sr1',0,2,16
	.byte	'IfxCcu6_TrigSel_sr3',0,3,0
.L244:
	.byte	15,12,179,1,9,1,16
	.byte	'IfxCcu6_InterruptSource_cc60RisingEdge',0,0,16
	.byte	'IfxCcu6_InterruptSource_cc60FallingEdge',0,1,16
	.byte	'IfxCcu6_InterruptSource_cc61RisingEdge',0,2,16
	.byte	'IfxCcu6_InterruptSource_cc61FallingEdge',0,3,16
	.byte	'IfxCcu6_InterruptSource_cc62RisingEdge',0,4,16
	.byte	'IfxCcu6_InterruptSource_cc62FallingEdge',0,5,16
	.byte	'IfxCcu6_InterruptSource_t12OneMatch',0,6,16
	.byte	'IfxCcu6_InterruptSource_t12PeriodMatch',0,7,16
	.byte	'IfxCcu6_InterruptSource_t13CompareMatch',0,8,16
	.byte	'IfxCcu6_InterruptSource_t13PeriodMatch',0,9,16
	.byte	'IfxCcu6_InterruptSource_trap',0,10,16
	.byte	'IfxCcu6_InterruptSource_correctHallEvent',0,12,16
	.byte	'IfxCcu6_InterruptSource_wrongHallEvent',0,13,0
.L246:
	.byte	15,12,230,1,9,1,16
	.byte	'IfxCcu6_ServiceRequest_0',0,0,16
	.byte	'IfxCcu6_ServiceRequest_1',0,1,16
	.byte	'IfxCcu6_ServiceRequest_2',0,2,16
	.byte	'IfxCcu6_ServiceRequest_3',0,3,0
.L250:
	.byte	15,12,110,9,1,16
	.byte	'IfxCcu6_ChannelOut_cc0',0,0,16
	.byte	'IfxCcu6_ChannelOut_cout0',0,1,16
	.byte	'IfxCcu6_ChannelOut_cc1',0,2,16
	.byte	'IfxCcu6_ChannelOut_cout1',0,3,16
	.byte	'IfxCcu6_ChannelOut_cc2',0,4,16
	.byte	'IfxCcu6_ChannelOut_cout2',0,5,16
	.byte	'IfxCcu6_ChannelOut_cout3',0,6,0
.L260:
	.byte	15,12,130,2,9,1,16
	.byte	'IfxCcu6_T12Channel_0',0,0,16
	.byte	'IfxCcu6_T12Channel_1',0,1,16
	.byte	'IfxCcu6_T12Channel_2',0,2,0
.L262:
	.byte	15,12,101,9,1,16
	.byte	'IfxCcu6_CaptureCompareState_set',0,0,16
	.byte	'IfxCcu6_CaptureCompareState_clear',0,1,16
	.byte	'IfxCcu6_CaptureCompareState_toggle',0,2,0,32,9,246,1,9,8,14
	.byte	'port',0
	.word	10048
	.byte	4,2,35,0,14
	.byte	'pinIndex',0
	.word	525
	.byte	1,2,35,4,0,15,16,127,9,1,16
	.byte	'Ifx_RxSel_a',0,0,16
	.byte	'Ifx_RxSel_b',0,1,16
	.byte	'Ifx_RxSel_c',0,2,16
	.byte	'Ifx_RxSel_d',0,3,16
	.byte	'Ifx_RxSel_e',0,4,16
	.byte	'Ifx_RxSel_f',0,5,16
	.byte	'Ifx_RxSel_g',0,6,16
	.byte	'Ifx_RxSel_h',0,7,0,32,15,112,15,16,14
	.byte	'module',0
	.word	20401
	.byte	4,2,35,0,14
	.byte	'pin',0
	.word	23771
	.byte	8,2,35,4,14
	.byte	'select',0
	.word	23810
	.byte	1,2,35,12,0,20
	.word	23928
.L321:
	.byte	3
	.word	23979
	.byte	32,15,120,15,16,14
	.byte	'module',0
	.word	20401
	.byte	4,2,35,0,14
	.byte	'pin',0
	.word	23771
	.byte	8,2,35,4,14
	.byte	'select',0
	.word	23810
	.byte	1,2,35,12,0,20
	.word	23989
.L357:
	.byte	3
	.word	24040
.L360:
	.byte	15,14,80,9,1,16
	.byte	'IfxCcu6_Index_none',0,127,16
	.byte	'IfxCcu6_Index_0',0,0,16
	.byte	'IfxCcu6_Index_1',0,1,0
.L377:
	.byte	7
	.byte	'long int',0,4,5,26
	.word	21150
	.byte	27
	.word	21192
	.byte	27
	.word	21206
	.byte	6,0,26
	.word	21223
	.byte	27
	.word	21260
	.byte	27
	.word	21274
	.byte	27
	.word	21287
	.byte	6,0,26
	.word	21718
	.byte	27
	.word	21763
	.byte	27
	.word	21777
	.byte	27
	.word	21792
	.byte	6,0,7
	.byte	'short int',0,2,5,33
	.byte	'__wchar_t',0,17,1,1
	.word	24186
	.byte	33
	.byte	'__size_t',0,17,1,1
	.word	328
	.byte	33
	.byte	'__ptrdiff_t',0,17,1,1
	.word	518
	.byte	34,1,3
	.word	24254
	.byte	33
	.byte	'__codeptr',0,17,1,1
	.word	24256
	.byte	33
	.byte	'boolean',0,18,104,29
	.word	525
	.byte	33
	.byte	'uint8',0,18,108,29
	.word	525
	.byte	33
	.byte	'uint16',0,18,112,29
	.word	1076
	.byte	33
	.byte	'uint32',0,18,116,29
	.word	2320
	.byte	33
	.byte	'uint64',0,18,121,29
	.word	406
	.byte	33
	.byte	'sint16',0,18,129,1,29
	.word	24186
	.byte	33
	.byte	'sint32',0,18,134,1,29
	.word	24113
	.byte	7
	.byte	'long long int',0,8,5,33
	.byte	'sint64',0,18,141,1,29
	.word	24386
	.byte	33
	.byte	'float32',0,18,170,1,29
	.word	226
	.byte	33
	.byte	'pvoid',0,16,54,28
	.word	432
	.byte	33
	.byte	'Ifx_TickTime',0,16,76,28
	.word	24386
	.byte	33
	.byte	'Ifx_Priority',0,16,100,16
	.word	1076
	.byte	33
	.byte	'Ifx_TimerValue',0,16,101,16
	.word	2320
	.byte	33
	.byte	'Ifx_RxSel',0,16,137,1,3
	.word	23810
	.byte	32,16,140,1,9,8,14
	.byte	'module',0
	.word	323
	.byte	4,2,35,0,14
	.byte	'index',0
	.word	24113
	.byte	4,2,35,4,0,33
	.byte	'IfxModule_IndexMap',0,16,144,1,3
	.word	24534
	.byte	33
	.byte	'Ifx_UReg_8Bit',0,19,96,24
	.word	525
	.byte	33
	.byte	'Ifx_UReg_32Bit',0,19,98,24
	.word	328
	.byte	33
	.byte	'Ifx_SReg_32Bit',0,19,101,24
	.word	518
	.byte	33
	.byte	'Ifx_CCU6_ACCEN0_Bits',0,13,102,3
	.word	19029
	.byte	33
	.byte	'Ifx_CCU6_CC63R_Bits',0,13,109,3
	.word	13018
	.byte	33
	.byte	'Ifx_CCU6_CC63SR_Bits',0,13,116,3
	.word	13123
	.byte	33
	.byte	'Ifx_CCU6_CC6R_Bits',0,13,123,3
	.word	12577
	.byte	33
	.byte	'Ifx_CCU6_CC6SR_Bits',0,13,130,1,3
	.word	12690
	.byte	33
	.byte	'Ifx_CCU6_CLC_Bits',0,13,141,1,3
	.word	10932
	.byte	33
	.byte	'Ifx_CCU6_CMPMODIF_Bits',0,13,158,1,3
	.word	13624
	.byte	33
	.byte	'Ifx_CCU6_CMPSTAT_Bits',0,13,180,1,3
	.word	13229
	.byte	33
	.byte	'Ifx_CCU6_ID_Bits',0,13,188,1,3
	.word	11293
	.byte	33
	.byte	'Ifx_CCU6_IEN_Bits',0,13,210,1,3
	.word	18088
	.byte	33
	.byte	'Ifx_CCU6_IMON_Bits',0,13,226,1,3
	.word	16154
	.byte	33
	.byte	'Ifx_CCU6_INP_Bits',0,13,239,1,3
	.word	17870
	.byte	33
	.byte	'Ifx_CCU6_IS_Bits',0,13,133,2,3
	.word	16772
	.byte	33
	.byte	'Ifx_CCU6_ISR_Bits',0,13,155,2,3
	.word	17496
	.byte	33
	.byte	'Ifx_CCU6_ISS_Bits',0,13,177,2,3
	.word	17129
	.byte	33
	.byte	'Ifx_CCU6_KRST0_Bits',0,13,185,2,3
	.word	18905
	.byte	33
	.byte	'Ifx_CCU6_KRST1_Bits',0,13,192,2,3
	.word	18800
	.byte	33
	.byte	'Ifx_CCU6_KRSTCLR_Bits',0,13,199,2,3
	.word	18693
	.byte	33
	.byte	'Ifx_CCU6_KSCSR_Bits',0,13,209,2,3
	.word	11987
	.byte	33
	.byte	'Ifx_CCU6_LI_Bits',0,13,228,2,3
	.word	16427
	.byte	33
	.byte	'Ifx_CCU6_MCFG_Bits',0,13,239,2,3
	.word	11113
	.byte	33
	.byte	'Ifx_CCU6_MCMCTR_Bits',0,13,252,2,3
	.word	15930
	.byte	33
	.byte	'Ifx_CCU6_MCMOUT_Bits',0,13,135,3,3
	.word	15755
	.byte	33
	.byte	'Ifx_CCU6_MCMOUTS_Bits',0,13,148,3,3
	.word	15531
	.byte	33
	.byte	'Ifx_CCU6_MODCTR_Bits',0,13,160,3,3
	.word	14957
	.byte	33
	.byte	'Ifx_CCU6_MOSEL_Bits',0,13,169,3,3
	.word	11417
	.byte	33
	.byte	'Ifx_CCU6_OCS_Bits',0,13,182,3,3
	.word	18486
	.byte	33
	.byte	'Ifx_CCU6_PISEL0_Bits',0,13,196,3,3
	.word	11567
	.byte	33
	.byte	'Ifx_CCU6_PISEL2_Bits',0,13,207,3,3
	.word	11803
	.byte	33
	.byte	'Ifx_CCU6_PSLR_Bits',0,13,216,3,3
	.word	15388
	.byte	33
	.byte	'Ifx_CCU6_T12_Bits',0,13,223,3,3
	.word	12137
	.byte	33
	.byte	'Ifx_CCU6_T12DTC_Bits',0,13,237,3,3
	.word	12351
	.byte	33
	.byte	'Ifx_CCU6_T12MSEL_Bits',0,13,248,3,3
	.word	13929
	.byte	33
	.byte	'Ifx_CCU6_T12PR_Bits',0,13,255,3,3
	.word	12243
	.byte	33
	.byte	'Ifx_CCU6_T13_Bits',0,13,134,4,3
	.word	12804
	.byte	33
	.byte	'Ifx_CCU6_T13PR_Bits',0,13,141,4,3
	.word	12910
	.byte	33
	.byte	'Ifx_CCU6_TCTR0_Bits',0,13,157,4,3
	.word	14109
	.byte	33
	.byte	'Ifx_CCU6_TCTR2_Bits',0,13,170,4,3
	.word	14369
	.byte	33
	.byte	'Ifx_CCU6_TCTR4_Bits',0,13,191,4,3
	.word	14592
	.byte	33
	.byte	'Ifx_CCU6_TRPCTR_Bits',0,13,204,4,3
	.word	15169
	.byte	33
	.byte	'Ifx_CCU6_ACCEN0',0,13,217,4,3
	.word	19559
	.byte	33
	.byte	'Ifx_CCU6_CC63R',0,13,225,4,3
	.word	13083
	.byte	33
	.byte	'Ifx_CCU6_CC63SR',0,13,233,4,3
	.word	13189
	.byte	33
	.byte	'Ifx_CCU6_CC6R',0,13,241,4,3
	.word	12641
	.byte	33
	.byte	'Ifx_CCU6_CC6SR',0,13,249,4,3
	.word	12755
	.byte	33
	.byte	'Ifx_CCU6_CLC',0,13,129,5,3
	.word	11073
	.byte	33
	.byte	'Ifx_CCU6_CMPMODIF',0,13,137,5,3
	.word	13889
	.byte	33
	.byte	'Ifx_CCU6_CMPSTAT',0,13,145,5,3
	.word	13584
	.byte	33
	.byte	'Ifx_CCU6_ID',0,13,153,5,3
	.word	11377
	.byte	33
	.byte	'Ifx_CCU6_IEN',0,13,161,5,3
	.word	18437
	.byte	33
	.byte	'Ifx_CCU6_IMON',0,13,169,5,3
	.word	16387
	.byte	33
	.byte	'Ifx_CCU6_INP',0,13,177,5,3
	.word	18048
	.byte	33
	.byte	'Ifx_CCU6_IS',0,13,185,5,3
	.word	17089
	.byte	33
	.byte	'Ifx_CCU6_ISR',0,13,193,5,3
	.word	17830
	.byte	33
	.byte	'Ifx_CCU6_ISS',0,13,201,5,3
	.word	17456
	.byte	33
	.byte	'Ifx_CCU6_KRST0',0,13,209,5,3
	.word	18989
	.byte	33
	.byte	'Ifx_CCU6_KRST1',0,13,217,5,3
	.word	18865
	.byte	33
	.byte	'Ifx_CCU6_KRSTCLR',0,13,225,5,3
	.word	18760
	.byte	33
	.byte	'Ifx_CCU6_KSCSR',0,13,233,5,3
	.word	12097
	.byte	33
	.byte	'Ifx_CCU6_LI',0,13,241,5,3
	.word	16732
	.byte	33
	.byte	'Ifx_CCU6_MCFG',0,13,249,5,3
	.word	11253
	.byte	33
	.byte	'Ifx_CCU6_MCMCTR',0,13,129,6,3
	.word	16114
	.byte	33
	.byte	'Ifx_CCU6_MCMOUT',0,13,137,6,3
	.word	15890
	.byte	33
	.byte	'Ifx_CCU6_MCMOUTS',0,13,145,6,3
	.word	15715
	.byte	33
	.byte	'Ifx_CCU6_MODCTR',0,13,153,6,3
	.word	15129
	.byte	33
	.byte	'Ifx_CCU6_MOSEL',0,13,161,6,3
	.word	11527
	.byte	33
	.byte	'Ifx_CCU6_OCS',0,13,169,6,3
	.word	18653
	.byte	33
	.byte	'Ifx_CCU6_PISEL0',0,13,177,6,3
	.word	11763
	.byte	33
	.byte	'Ifx_CCU6_PISEL2',0,13,185,6,3
	.word	11947
	.byte	33
	.byte	'Ifx_CCU6_PSLR',0,13,193,6,3
	.word	15491
	.byte	33
	.byte	'Ifx_CCU6_T12',0,13,201,6,3
	.word	12203
	.byte	33
	.byte	'Ifx_CCU6_T12DTC',0,13,209,6,3
	.word	12537
	.byte	33
	.byte	'Ifx_CCU6_T12MSEL',0,13,217,6,3
	.word	14069
	.byte	33
	.byte	'Ifx_CCU6_T12PR',0,13,225,6,3
	.word	12311
	.byte	33
	.byte	'Ifx_CCU6_T13',0,13,233,6,3
	.word	12870
	.byte	33
	.byte	'Ifx_CCU6_T13PR',0,13,241,6,3
	.word	12978
	.byte	33
	.byte	'Ifx_CCU6_TCTR0',0,13,249,6,3
	.word	14329
	.byte	33
	.byte	'Ifx_CCU6_TCTR2',0,13,129,7,3
	.word	14552
	.byte	33
	.byte	'Ifx_CCU6_TCTR4',0,13,137,7,3
	.word	14917
	.byte	33
	.byte	'Ifx_CCU6_TRPCTR',0,13,145,7,3
	.word	15348
	.byte	10
	.word	19599
	.byte	33
	.byte	'Ifx_CCU6',0,13,207,7,3
	.word	26766
	.byte	33
	.byte	'IfxCcu6_Index',0,14,85,3
	.word	24050
	.byte	33
	.byte	'IfxCcu6_TrigOut',0,14,92,3
	.word	22535
	.byte	33
	.byte	'IfxCcu6_TrigSel',0,14,102,3
	.word	22601
	.byte	18,16
	.word	24534
	.byte	19,1,0,20
	.word	26859
	.byte	35
	.byte	'IfxCcu6_cfg_indexMap',0,14,108,41
	.word	26868
	.byte	1,1,15,20,66,9,1,16
	.byte	'IfxSrc_Tos_cpu0',0,0,16
	.byte	'IfxSrc_Tos_dma',0,1,16
	.byte	'IfxSrc_Tos_cpu1',0,2,16
	.byte	'IfxSrc_Tos_cpu2',0,3,16
	.byte	'IfxSrc_Tos_cpu3',0,4,16
	.byte	'IfxSrc_Tos_cpu4',0,5,16
	.byte	'IfxSrc_Tos_cpu5',0,6,0,33
	.byte	'IfxSrc_Tos',0,20,75,3
	.word	26904
	.byte	33
	.byte	'Ifx_SRC_SRCR_Bits',0,4,85,3
	.word	542
	.byte	33
	.byte	'Ifx_SRC_SRCR',0,4,98,3
	.word	832
	.byte	11
	.byte	'_Ifx_SRC_CPU_CPU',0,4,110,25,4,14
	.byte	'SB',0
	.word	832
	.byte	4,2,35,0,0,10
	.word	27101
	.byte	33
	.byte	'Ifx_SRC_CPU_CPU',0,4,113,3
	.word	27136
	.byte	18,24
	.word	27101
	.byte	19,5,0,10
	.word	27165
	.byte	11
	.byte	'_Ifx_SRC_CPU',0,4,128,1,25,24,14
	.byte	'CPU',0
	.word	27174
	.byte	24,2,35,0,0,10
	.word	27179
	.byte	33
	.byte	'Ifx_SRC_CPU',0,4,131,1,3
	.word	27212
	.byte	11
	.byte	'_Ifx_SRC_AGBT_AGBT',0,4,146,1,25,4,14
	.byte	'SR',0
	.word	832
	.byte	4,2,35,0,0,10
	.word	27238
	.byte	33
	.byte	'Ifx_SRC_AGBT_AGBT',0,4,149,1,3
	.word	27276
	.byte	18,4
	.word	27238
	.byte	19,0,0,10
	.word	27308
	.byte	11
	.byte	'_Ifx_SRC_AGBT',0,4,164,1,25,4,14
	.byte	'AGBT',0
	.word	27317
	.byte	4,2,35,0,0,10
	.word	27322
	.byte	33
	.byte	'Ifx_SRC_AGBT',0,4,167,1,3
	.word	27357
	.byte	11
	.byte	'_Ifx_SRC_XBAR_XBAR',0,4,182,1,25,4,14
	.byte	'SR',0
	.word	832
	.byte	4,2,35,0,0,10
	.word	27384
	.byte	33
	.byte	'Ifx_SRC_XBAR_XBAR',0,4,185,1,3
	.word	27422
	.byte	18,12
	.word	27384
	.byte	19,2,0,10
	.word	27454
	.byte	11
	.byte	'_Ifx_SRC_XBAR',0,4,200,1,25,12,14
	.byte	'XBAR',0
	.word	27463
	.byte	12,2,35,0,0,10
	.word	27468
	.byte	33
	.byte	'Ifx_SRC_XBAR',0,4,203,1,3
	.word	27503
	.byte	18,8
	.word	832
	.byte	19,1,0,11
	.byte	'_Ifx_SRC_CERBERUS_CERBERUS',0,4,218,1,25,8,14
	.byte	'SR',0
	.word	27530
	.byte	8,2,35,0,0,10
	.word	27539
	.byte	33
	.byte	'Ifx_SRC_CERBERUS_CERBERUS',0,4,221,1,3
	.word	27585
	.byte	10
	.word	27539
	.byte	11
	.byte	'_Ifx_SRC_CERBERUS',0,4,236,1,25,8,14
	.byte	'CERBERUS',0
	.word	27625
	.byte	8,2,35,0,0,10
	.word	27630
	.byte	33
	.byte	'Ifx_SRC_CERBERUS',0,4,239,1,3
	.word	27673
	.byte	11
	.byte	'_Ifx_SRC_ASCLIN_ASCLIN',0,4,254,1,25,12,14
	.byte	'TX',0
	.word	832
	.byte	4,2,35,0,14
	.byte	'RX',0
	.word	832
	.byte	4,2,35,4,14
	.byte	'ERR',0
	.word	832
	.byte	4,2,35,8,0,10
	.word	27704
	.byte	33
	.byte	'Ifx_SRC_ASCLIN_ASCLIN',0,4,131,2,3
	.word	27771
	.byte	18,144,1
	.word	27704
	.byte	19,11,0,10
	.word	27807
	.byte	11
	.byte	'_Ifx_SRC_ASCLIN',0,4,146,2,25,144,1,14
	.byte	'ASCLIN',0
	.word	27817
	.byte	144,1,2,35,0,0,10
	.word	27822
	.byte	33
	.byte	'Ifx_SRC_ASCLIN',0,4,149,2,3
	.word	27863
	.byte	11
	.byte	'_Ifx_SRC_QSPI_QSPI',0,4,164,2,25,20,14
	.byte	'TX',0
	.word	832
	.byte	4,2,35,0,14
	.byte	'RX',0
	.word	832
	.byte	4,2,35,4,14
	.byte	'ERR',0
	.word	832
	.byte	4,2,35,8,14
	.byte	'PT',0
	.word	832
	.byte	4,2,35,12,14
	.byte	'U',0
	.word	832
	.byte	4,2,35,16,0,10
	.word	27892
	.byte	33
	.byte	'Ifx_SRC_QSPI_QSPI',0,4,171,2,3
	.word	27978
	.byte	18,120
	.word	27892
	.byte	19,5,0,10
	.word	28010
	.byte	11
	.byte	'_Ifx_SRC_QSPI',0,4,186,2,25,120,14
	.byte	'QSPI',0
	.word	28019
	.byte	120,2,35,0,0,10
	.word	28024
	.byte	33
	.byte	'Ifx_SRC_QSPI',0,4,189,2,3
	.word	28059
	.byte	11
	.byte	'_Ifx_SRC_HSCT_HSCT',0,4,204,2,25,4,14
	.byte	'SR',0
	.word	832
	.byte	4,2,35,0,0,10
	.word	28086
	.byte	33
	.byte	'Ifx_SRC_HSCT_HSCT',0,4,207,2,3
	.word	28124
	.byte	18,8
	.word	28086
	.byte	19,1,0,10
	.word	28156
	.byte	11
	.byte	'_Ifx_SRC_HSCT',0,4,222,2,25,8,14
	.byte	'HSCT',0
	.word	28165
	.byte	8,2,35,0,0,10
	.word	28170
	.byte	33
	.byte	'Ifx_SRC_HSCT',0,4,225,2,3
	.word	28205
	.byte	11
	.byte	'_Ifx_SRC_HSSL_HSSL_CH',0,4,240,2,25,16,14
	.byte	'COK',0
	.word	832
	.byte	4,2,35,0,14
	.byte	'RDI',0
	.word	832
	.byte	4,2,35,4,14
	.byte	'ERR',0
	.word	832
	.byte	4,2,35,8,14
	.byte	'TRG',0
	.word	832
	.byte	4,2,35,12,0,10
	.word	28232
	.byte	33
	.byte	'Ifx_SRC_HSSL_HSSL_CH',0,4,246,2,3
	.word	28313
	.byte	18,64
	.word	28232
	.byte	19,3,0,10
	.word	28348
	.byte	11
	.byte	'_Ifx_SRC_HSSL_HSSL',0,4,133,3,25,68,14
	.byte	'CH',0
	.word	28357
	.byte	64,2,35,0,14
	.byte	'EXI',0
	.word	832
	.byte	4,2,35,64,0,10
	.word	28362
	.byte	33
	.byte	'Ifx_SRC_HSSL_HSSL',0,4,137,3,3
	.word	28413
	.byte	18,136,1
	.word	28362
	.byte	19,1,0,10
	.word	28445
	.byte	11
	.byte	'_Ifx_SRC_HSSL',0,4,152,3,25,136,1,14
	.byte	'HSSL',0
	.word	28455
	.byte	136,1,2,35,0,0,10
	.word	28460
	.byte	33
	.byte	'Ifx_SRC_HSSL',0,4,155,3,3
	.word	28497
	.byte	11
	.byte	'_Ifx_SRC_I2C_I2C',0,4,170,3,25,16,14
	.byte	'DTR',0
	.word	832
	.byte	4,2,35,0,14
	.byte	'ERR',0
	.word	832
	.byte	4,2,35,4,14
	.byte	'P',0
	.word	832
	.byte	4,2,35,8,14
	.byte	'reserved_C',0
	.word	3558
	.byte	4,2,35,12,0,10
	.word	28524
	.byte	33
	.byte	'Ifx_SRC_I2C_I2C',0,4,176,3,3
	.word	28605
	.byte	18,32
	.word	28524
	.byte	19,1,0,10
	.word	28635
	.byte	11
	.byte	'_Ifx_SRC_I2C',0,4,191,3,25,32,14
	.byte	'I2C',0
	.word	28644
	.byte	32,2,35,0,0,10
	.word	28649
	.byte	33
	.byte	'Ifx_SRC_I2C',0,4,194,3,3
	.word	28682
	.byte	11
	.byte	'_Ifx_SRC_SENT_SENT',0,4,209,3,25,4,14
	.byte	'SR',0
	.word	832
	.byte	4,2,35,0,0,10
	.word	28708
	.byte	33
	.byte	'Ifx_SRC_SENT_SENT',0,4,212,3,3
	.word	28746
	.byte	18,40
	.word	28708
	.byte	19,9,0,10
	.word	28778
	.byte	11
	.byte	'_Ifx_SRC_SENT',0,4,227,3,25,40,14
	.byte	'SENT',0
	.word	28787
	.byte	40,2,35,0,0,10
	.word	28792
	.byte	33
	.byte	'Ifx_SRC_SENT',0,4,230,3,3
	.word	28827
	.byte	18,20
	.word	832
	.byte	19,4,0,11
	.byte	'_Ifx_SRC_MSC_MSC',0,4,245,3,25,20,14
	.byte	'SR',0
	.word	28854
	.byte	20,2,35,0,0,10
	.word	28863
	.byte	33
	.byte	'Ifx_SRC_MSC_MSC',0,4,248,3,3
	.word	28899
	.byte	18,80
	.word	28863
	.byte	19,3,0,10
	.word	28929
	.byte	11
	.byte	'_Ifx_SRC_MSC',0,4,135,4,25,80,14
	.byte	'MSC',0
	.word	28938
	.byte	80,2,35,0,0,10
	.word	28943
	.byte	33
	.byte	'Ifx_SRC_MSC',0,4,138,4,3
	.word	28976
	.byte	18,16
	.word	832
	.byte	19,3,0,11
	.byte	'_Ifx_SRC_CCU6_CCU',0,4,153,4,25,16,14
	.byte	'SR',0
	.word	29002
	.byte	16,2,35,0,0,10
	.word	29011
	.byte	33
	.byte	'Ifx_SRC_CCU6_CCU',0,4,156,4,3
	.word	29048
	.byte	18,32
	.word	29011
	.byte	19,1,0,10
	.word	29079
	.byte	11
	.byte	'_Ifx_SRC_CCU6',0,4,171,4,25,32,14
	.byte	'CCU',0
	.word	29088
	.byte	32,2,35,0,0,10
	.word	29093
	.byte	33
	.byte	'Ifx_SRC_CCU6',0,4,174,4,3
	.word	29127
	.byte	11
	.byte	'_Ifx_SRC_GPT12_GPT12',0,4,189,4,25,24,14
	.byte	'CIRQ',0
	.word	832
	.byte	4,2,35,0,14
	.byte	'T2',0
	.word	832
	.byte	4,2,35,4,14
	.byte	'T3',0
	.word	832
	.byte	4,2,35,8,14
	.byte	'T4',0
	.word	832
	.byte	4,2,35,12,14
	.byte	'T5',0
	.word	832
	.byte	4,2,35,16,14
	.byte	'T6',0
	.word	832
	.byte	4,2,35,20,0,10
	.word	29154
	.byte	33
	.byte	'Ifx_SRC_GPT12_GPT12',0,4,197,4,3
	.word	29256
	.byte	18,24
	.word	29154
	.byte	19,0,0,10
	.word	29290
	.byte	11
	.byte	'_Ifx_SRC_GPT12',0,4,212,4,25,24,14
	.byte	'GPT12',0
	.word	29299
	.byte	24,2,35,0,0,10
	.word	29304
	.byte	33
	.byte	'Ifx_SRC_GPT12',0,4,215,4,3
	.word	29341
	.byte	11
	.byte	'_Ifx_SRC_STM_STM',0,4,230,4,25,8,14
	.byte	'SR',0
	.word	27530
	.byte	8,2,35,0,0,10
	.word	29369
	.byte	33
	.byte	'Ifx_SRC_STM_STM',0,4,233,4,3
	.word	29405
	.byte	18,48
	.word	29369
	.byte	19,5,0,10
	.word	29435
	.byte	11
	.byte	'_Ifx_SRC_STM',0,4,248,4,25,48,14
	.byte	'STM',0
	.word	29444
	.byte	48,2,35,0,0,10
	.word	29449
	.byte	33
	.byte	'Ifx_SRC_STM',0,4,251,4,3
	.word	29482
	.byte	11
	.byte	'_Ifx_SRC_FCE_FCE0',0,4,138,5,25,4,14
	.byte	'SR',0
	.word	832
	.byte	4,2,35,0,0,10
	.word	29508
	.byte	33
	.byte	'Ifx_SRC_FCE_FCE0',0,4,141,5,3
	.word	29545
	.byte	10
	.word	29508
	.byte	11
	.byte	'_Ifx_SRC_FCE',0,4,156,5,25,4,14
	.byte	'FCE0',0
	.word	29576
	.byte	4,2,35,0,0,10
	.word	29581
	.byte	33
	.byte	'Ifx_SRC_FCE',0,4,159,5,3
	.word	29615
	.byte	18,32
	.word	525
	.byte	19,31,0,18,128,4
	.word	832
	.byte	19,127,0,11
	.byte	'_Ifx_SRC_DMA_DMA',0,4,174,5,25,176,4,14
	.byte	'ERR',0
	.word	29002
	.byte	16,2,35,0,14
	.byte	'reserved_10',0
	.word	29641
	.byte	32,2,35,16,14
	.byte	'CH',0
	.word	29650
	.byte	128,4,2,35,48,0,10
	.word	29660
	.byte	33
	.byte	'Ifx_SRC_DMA_DMA',0,4,179,5,3
	.word	29732
	.byte	18,176,4
	.word	29660
	.byte	19,0,0,10
	.word	29762
	.byte	11
	.byte	'_Ifx_SRC_DMA',0,4,194,5,25,176,4,14
	.byte	'DMA',0
	.word	29772
	.byte	176,4,2,35,0,0,10
	.word	29777
	.byte	33
	.byte	'Ifx_SRC_DMA',0,4,197,5,3
	.word	29812
	.byte	11
	.byte	'_Ifx_SRC_SDMMC_SDMMC',0,4,212,5,25,8,14
	.byte	'ERR',0
	.word	832
	.byte	4,2,35,0,14
	.byte	'DMA',0
	.word	832
	.byte	4,2,35,4,0,10
	.word	29838
	.byte	33
	.byte	'Ifx_SRC_SDMMC_SDMMC',0,4,216,5,3
	.word	29892
	.byte	18,8
	.word	29838
	.byte	19,0,0,10
	.word	29926
	.byte	11
	.byte	'_Ifx_SRC_SDMMC',0,4,231,5,25,8,14
	.byte	'SDMMC',0
	.word	29935
	.byte	8,2,35,0,0,10
	.word	29940
	.byte	33
	.byte	'Ifx_SRC_SDMMC',0,4,234,5,3
	.word	29977
	.byte	18,40
	.word	832
	.byte	19,9,0,11
	.byte	'_Ifx_SRC_GETH_GETH',0,4,249,5,25,40,14
	.byte	'SR',0
	.word	30005
	.byte	40,2,35,0,0,10
	.word	30014
	.byte	33
	.byte	'Ifx_SRC_GETH_GETH',0,4,252,5,3
	.word	30052
	.byte	18,40
	.word	30014
	.byte	19,0,0,10
	.word	30084
	.byte	11
	.byte	'_Ifx_SRC_GETH',0,4,139,6,25,40,14
	.byte	'GETH',0
	.word	30093
	.byte	40,2,35,0,0,10
	.word	30098
	.byte	33
	.byte	'Ifx_SRC_GETH',0,4,142,6,3
	.word	30133
	.byte	18,64
	.word	832
	.byte	19,15,0,11
	.byte	'_Ifx_SRC_CAN_CAN',0,4,157,6,25,64,14
	.byte	'INT',0
	.word	30160
	.byte	64,2,35,0,0,10
	.word	30169
	.byte	33
	.byte	'Ifx_SRC_CAN_CAN',0,4,160,6,3
	.word	30206
	.byte	18,192,1
	.word	30169
	.byte	19,2,0,10
	.word	30236
	.byte	11
	.byte	'_Ifx_SRC_CAN',0,4,175,6,25,192,1,14
	.byte	'CAN',0
	.word	30246
	.byte	192,1,2,35,0,0,10
	.word	30251
	.byte	33
	.byte	'Ifx_SRC_CAN',0,4,178,6,3
	.word	30286
	.byte	11
	.byte	'_Ifx_SRC_VADC_G',0,4,193,6,25,16,14
	.byte	'SR0',0
	.word	832
	.byte	4,2,35,0,14
	.byte	'SR1',0
	.word	832
	.byte	4,2,35,4,14
	.byte	'SR2',0
	.word	832
	.byte	4,2,35,8,14
	.byte	'SR3',0
	.word	832
	.byte	4,2,35,12,0,10
	.word	30312
	.byte	33
	.byte	'Ifx_SRC_VADC_G',0,4,199,6,3
	.word	30387
	.byte	11
	.byte	'_Ifx_SRC_VADC_FC',0,4,214,6,25,4,14
	.byte	'SR0',0
	.word	832
	.byte	4,2,35,0,0,10
	.word	30416
	.byte	33
	.byte	'Ifx_SRC_VADC_FC',0,4,217,6,3
	.word	30453
	.byte	18,192,1
	.word	30312
	.byte	19,11,0,10
	.word	30483
	.byte	18,32
	.word	30416
	.byte	19,7,0,10
	.word	30498
	.byte	18,32
	.word	30312
	.byte	19,1,0,10
	.word	30512
	.byte	11
	.byte	'_Ifx_SRC_VADC',0,4,233,6,25,128,2,14
	.byte	'G',0
	.word	30493
	.byte	192,1,2,35,0,14
	.byte	'FC',0
	.word	30507
	.byte	32,3,35,192,1,14
	.byte	'CG',0
	.word	30521
	.byte	32,3,35,224,1,0,10
	.word	30526
	.byte	33
	.byte	'Ifx_SRC_VADC',0,4,238,6,3
	.word	30586
	.byte	11
	.byte	'_Ifx_SRC_DSADC_DSADC',0,4,253,6,25,8,14
	.byte	'SRM',0
	.word	832
	.byte	4,2,35,0,14
	.byte	'SRA',0
	.word	832
	.byte	4,2,35,4,0,10
	.word	30613
	.byte	33
	.byte	'Ifx_SRC_DSADC_DSADC',0,4,129,7,3
	.word	30667
	.byte	18,112
	.word	30613
	.byte	19,13,0,10
	.word	30701
	.byte	11
	.byte	'_Ifx_SRC_DSADC',0,4,144,7,25,112,14
	.byte	'DSADC',0
	.word	30710
	.byte	112,2,35,0,0,10
	.word	30715
	.byte	33
	.byte	'Ifx_SRC_DSADC',0,4,147,7,3
	.word	30752
	.byte	11
	.byte	'_Ifx_SRC_ERAY_ERAY',0,4,162,7,25,48,14
	.byte	'INT0',0
	.word	832
	.byte	4,2,35,0,14
	.byte	'INT1',0
	.word	832
	.byte	4,2,35,4,14
	.byte	'TINT0',0
	.word	832
	.byte	4,2,35,8,14
	.byte	'TINT1',0
	.word	832
	.byte	4,2,35,12,14
	.byte	'NDAT0',0
	.word	832
	.byte	4,2,35,16,14
	.byte	'NDAT1',0
	.word	832
	.byte	4,2,35,20,14
	.byte	'MBSC0',0
	.word	832
	.byte	4,2,35,24,14
	.byte	'MBSC1',0
	.word	832
	.byte	4,2,35,28,14
	.byte	'OBUSY',0
	.word	832
	.byte	4,2,35,32,14
	.byte	'IBUSY',0
	.word	832
	.byte	4,2,35,36,14
	.byte	'reserved_28',0
	.word	5378
	.byte	8,2,35,40,0,10
	.word	30780
	.byte	33
	.byte	'Ifx_SRC_ERAY_ERAY',0,4,175,7,3
	.word	30975
	.byte	18,96
	.word	30780
	.byte	19,1,0,10
	.word	31007
	.byte	11
	.byte	'_Ifx_SRC_ERAY',0,4,190,7,25,96,14
	.byte	'ERAY',0
	.word	31016
	.byte	96,2,35,0,0,10
	.word	31021
	.byte	33
	.byte	'Ifx_SRC_ERAY',0,4,193,7,3
	.word	31056
	.byte	11
	.byte	'_Ifx_SRC_HSM_HSM',0,4,208,7,25,8,14
	.byte	'HSM',0
	.word	27530
	.byte	8,2,35,0,0,10
	.word	31083
	.byte	33
	.byte	'Ifx_SRC_HSM_HSM',0,4,211,7,3
	.word	31120
	.byte	18,8
	.word	31083
	.byte	19,0,0,10
	.word	31150
	.byte	11
	.byte	'_Ifx_SRC_HSM',0,4,226,7,25,8,14
	.byte	'HSM',0
	.word	31159
	.byte	8,2,35,0,0,10
	.word	31164
	.byte	33
	.byte	'Ifx_SRC_HSM',0,4,229,7,3
	.word	31197
	.byte	11
	.byte	'_Ifx_SRC_SCU',0,4,244,7,25,16,14
	.byte	'SCUERU',0
	.word	29002
	.byte	16,2,35,0,0,10
	.word	31223
	.byte	33
	.byte	'Ifx_SRC_SCU',0,4,247,7,3
	.word	31259
	.byte	11
	.byte	'_Ifx_SRC_PMS_PMS',0,4,134,8,25,4,14
	.byte	'SR',0
	.word	832
	.byte	4,2,35,0,0,10
	.word	31285
	.byte	33
	.byte	'Ifx_SRC_PMS_PMS',0,4,137,8,3
	.word	31321
	.byte	18,16
	.word	31285
	.byte	19,3,0,10
	.word	31351
	.byte	11
	.byte	'_Ifx_SRC_PMS',0,4,152,8,25,16,14
	.byte	'PMS',0
	.word	31360
	.byte	16,2,35,0,0,10
	.word	31365
	.byte	33
	.byte	'Ifx_SRC_PMS',0,4,155,8,3
	.word	31398
	.byte	18,12
	.word	832
	.byte	19,2,0,11
	.byte	'_Ifx_SRC_SMU_SMU',0,4,170,8,25,12,14
	.byte	'SR',0
	.word	31424
	.byte	12,2,35,0,0,10
	.word	31433
	.byte	33
	.byte	'Ifx_SRC_SMU_SMU',0,4,173,8,3
	.word	31469
	.byte	18,12
	.word	31433
	.byte	19,0,0,10
	.word	31499
	.byte	11
	.byte	'_Ifx_SRC_SMU',0,4,188,8,25,12,14
	.byte	'SMU',0
	.word	31508
	.byte	12,2,35,0,0,10
	.word	31513
	.byte	33
	.byte	'Ifx_SRC_SMU',0,4,191,8,3
	.word	31546
	.byte	18,32
	.word	832
	.byte	19,7,0,11
	.byte	'_Ifx_SRC_PSI5_PSI5',0,4,206,8,25,32,14
	.byte	'SR',0
	.word	31572
	.byte	32,2,35,0,0,10
	.word	31581
	.byte	33
	.byte	'Ifx_SRC_PSI5_PSI5',0,4,209,8,3
	.word	31619
	.byte	18,32
	.word	31581
	.byte	19,0,0,10
	.word	31651
	.byte	11
	.byte	'_Ifx_SRC_PSI5',0,4,224,8,25,32,14
	.byte	'PSI5',0
	.word	31660
	.byte	32,2,35,0,0,10
	.word	31665
	.byte	33
	.byte	'Ifx_SRC_PSI5',0,4,227,8,3
	.word	31700
	.byte	11
	.byte	'_Ifx_SRC_HSPDM_HSPDM0',0,4,242,8,25,12,14
	.byte	'BFR',0
	.word	832
	.byte	4,2,35,0,14
	.byte	'RAMP',0
	.word	832
	.byte	4,2,35,4,14
	.byte	'ERR',0
	.word	832
	.byte	4,2,35,8,0,10
	.word	31727
	.byte	33
	.byte	'Ifx_SRC_HSPDM_HSPDM0',0,4,247,8,3
	.word	31796
	.byte	10
	.word	31727
	.byte	11
	.byte	'_Ifx_SRC_HSPDM',0,4,134,9,25,12,14
	.byte	'HSPDM0',0
	.word	31831
	.byte	12,2,35,0,0,10
	.word	31836
	.byte	33
	.byte	'Ifx_SRC_HSPDM',0,4,137,9,3
	.word	31874
	.byte	11
	.byte	'_Ifx_SRC_DAM_DAM',0,4,152,9,25,24,14
	.byte	'LI0',0
	.word	832
	.byte	4,2,35,0,14
	.byte	'RI0',0
	.word	832
	.byte	4,2,35,4,14
	.byte	'LI1',0
	.word	832
	.byte	4,2,35,8,14
	.byte	'RI1',0
	.word	832
	.byte	4,2,35,12,14
	.byte	'DR',0
	.word	832
	.byte	4,2,35,16,14
	.byte	'ERR',0
	.word	832
	.byte	4,2,35,20,0,10
	.word	31902
	.byte	33
	.byte	'Ifx_SRC_DAM_DAM',0,4,160,9,3
	.word	32003
	.byte	18,48
	.word	31902
	.byte	19,1,0,10
	.word	32033
	.byte	11
	.byte	'_Ifx_SRC_DAM',0,4,175,9,25,48,14
	.byte	'DAM',0
	.word	32042
	.byte	48,2,35,0,0,10
	.word	32047
	.byte	33
	.byte	'Ifx_SRC_DAM',0,4,178,9,3
	.word	32080
	.byte	11
	.byte	'_Ifx_SRC_PSI5S_PSI5S',0,4,193,9,25,32,14
	.byte	'SR',0
	.word	31572
	.byte	32,2,35,0,0,10
	.word	32106
	.byte	33
	.byte	'Ifx_SRC_PSI5S_PSI5S',0,4,196,9,3
	.word	32146
	.byte	18,32
	.word	32106
	.byte	19,0,0,10
	.word	32180
	.byte	11
	.byte	'_Ifx_SRC_PSI5S',0,4,211,9,25,32,14
	.byte	'PSI5S',0
	.word	32189
	.byte	32,2,35,0,0,10
	.word	32194
	.byte	33
	.byte	'Ifx_SRC_PSI5S',0,4,214,9,3
	.word	32231
	.byte	11
	.byte	'_Ifx_SRC_RIF_RIF',0,4,229,9,25,8,14
	.byte	'ERR',0
	.word	832
	.byte	4,2,35,0,14
	.byte	'INT',0
	.word	832
	.byte	4,2,35,4,0,10
	.word	32259
	.byte	33
	.byte	'Ifx_SRC_RIF_RIF',0,4,233,9,3
	.word	32309
	.byte	18,16
	.word	32259
	.byte	19,1,0,10
	.word	32339
	.byte	11
	.byte	'_Ifx_SRC_RIF',0,4,248,9,25,16,14
	.byte	'RIF',0
	.word	32348
	.byte	16,2,35,0,0,10
	.word	32353
	.byte	33
	.byte	'Ifx_SRC_RIF',0,4,251,9,3
	.word	32386
	.byte	11
	.byte	'_Ifx_SRC_SPU_SPU',0,4,138,10,25,8,14
	.byte	'INT',0
	.word	832
	.byte	4,2,35,0,14
	.byte	'ERR',0
	.word	832
	.byte	4,2,35,4,0,10
	.word	32412
	.byte	33
	.byte	'Ifx_SRC_SPU_SPU',0,4,142,10,3
	.word	32462
	.byte	18,16
	.word	32412
	.byte	19,1,0,10
	.word	32492
	.byte	11
	.byte	'_Ifx_SRC_SPU',0,4,157,10,25,16,14
	.byte	'SPU',0
	.word	32501
	.byte	16,2,35,0,0,10
	.word	32506
	.byte	33
	.byte	'Ifx_SRC_SPU',0,4,160,10,3
	.word	32539
	.byte	11
	.byte	'_Ifx_SRC_GPSR_GPSR',0,4,175,10,25,32,14
	.byte	'SR',0
	.word	31572
	.byte	32,2,35,0,0,10
	.word	32565
	.byte	33
	.byte	'Ifx_SRC_GPSR_GPSR',0,4,178,10,3
	.word	32603
	.byte	18,192,1
	.word	32565
	.byte	19,5,0,10
	.word	32635
	.byte	11
	.byte	'_Ifx_SRC_GPSR',0,4,193,10,25,192,1,14
	.byte	'GPSR',0
	.word	32645
	.byte	192,1,2,35,0,0,10
	.word	32650
	.byte	33
	.byte	'Ifx_SRC_GPSR',0,4,196,10,3
	.word	32687
	.byte	15,21,162,11,9,1,16
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,16
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,16
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,33
	.byte	'IfxScu_WDTCON1_IR',0,21,167,11,3
	.word	32714
	.byte	11
	.byte	'_Ifx_SCU_ACCEN00_Bits',0,6,68,16,4,12
	.byte	'EN0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'EN1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'EN2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'EN3',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'EN4',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'EN5',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'EN6',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'EN7',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'EN8',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'EN9',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'EN10',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'EN11',0,1
	.word	525
	.byte	1,4,2,35,1,12
	.byte	'EN12',0,1
	.word	525
	.byte	1,3,2,35,1,12
	.byte	'EN13',0,1
	.word	525
	.byte	1,2,2,35,1,12
	.byte	'EN14',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'EN15',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'EN16',0,1
	.word	525
	.byte	1,7,2,35,2,12
	.byte	'EN17',0,1
	.word	525
	.byte	1,6,2,35,2,12
	.byte	'EN18',0,1
	.word	525
	.byte	1,5,2,35,2,12
	.byte	'EN19',0,1
	.word	525
	.byte	1,4,2,35,2,12
	.byte	'EN20',0,1
	.word	525
	.byte	1,3,2,35,2,12
	.byte	'EN21',0,1
	.word	525
	.byte	1,2,2,35,2,12
	.byte	'EN22',0,1
	.word	525
	.byte	1,1,2,35,2,12
	.byte	'EN23',0,1
	.word	525
	.byte	1,0,2,35,2,12
	.byte	'EN24',0,1
	.word	525
	.byte	1,7,2,35,3,12
	.byte	'EN25',0,1
	.word	525
	.byte	1,6,2,35,3,12
	.byte	'EN26',0,1
	.word	525
	.byte	1,5,2,35,3,12
	.byte	'EN27',0,1
	.word	525
	.byte	1,4,2,35,3,12
	.byte	'EN28',0,1
	.word	525
	.byte	1,3,2,35,3,12
	.byte	'EN29',0,1
	.word	525
	.byte	1,2,2,35,3,12
	.byte	'EN30',0,1
	.word	525
	.byte	1,1,2,35,3,12
	.byte	'EN31',0,1
	.word	525
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_ACCEN00_Bits',0,6,102,3
	.word	32836
	.byte	11
	.byte	'_Ifx_SCU_ACCEN01_Bits',0,6,105,16,4,12
	.byte	'reserved_0',0,4
	.word	328
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN01_Bits',0,6,108,3
	.word	33395
	.byte	11
	.byte	'_Ifx_SCU_ACCEN10_Bits',0,6,111,16,4,12
	.byte	'EN0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'EN1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'EN2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'EN3',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'EN4',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'EN5',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'EN6',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'EN7',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'EN8',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'EN9',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'EN10',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'EN11',0,1
	.word	525
	.byte	1,4,2,35,1,12
	.byte	'EN12',0,1
	.word	525
	.byte	1,3,2,35,1,12
	.byte	'EN13',0,1
	.word	525
	.byte	1,2,2,35,1,12
	.byte	'EN14',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'EN15',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'EN16',0,1
	.word	525
	.byte	1,7,2,35,2,12
	.byte	'EN17',0,1
	.word	525
	.byte	1,6,2,35,2,12
	.byte	'EN18',0,1
	.word	525
	.byte	1,5,2,35,2,12
	.byte	'EN19',0,1
	.word	525
	.byte	1,4,2,35,2,12
	.byte	'EN20',0,1
	.word	525
	.byte	1,3,2,35,2,12
	.byte	'EN21',0,1
	.word	525
	.byte	1,2,2,35,2,12
	.byte	'EN22',0,1
	.word	525
	.byte	1,1,2,35,2,12
	.byte	'EN23',0,1
	.word	525
	.byte	1,0,2,35,2,12
	.byte	'EN24',0,1
	.word	525
	.byte	1,7,2,35,3,12
	.byte	'EN25',0,1
	.word	525
	.byte	1,6,2,35,3,12
	.byte	'EN26',0,1
	.word	525
	.byte	1,5,2,35,3,12
	.byte	'EN27',0,1
	.word	525
	.byte	1,4,2,35,3,12
	.byte	'EN28',0,1
	.word	525
	.byte	1,3,2,35,3,12
	.byte	'EN29',0,1
	.word	525
	.byte	1,2,2,35,3,12
	.byte	'EN30',0,1
	.word	525
	.byte	1,1,2,35,3,12
	.byte	'EN31',0,1
	.word	525
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_ACCEN10_Bits',0,6,145,1,3
	.word	33474
	.byte	11
	.byte	'_Ifx_SCU_ACCEN11_Bits',0,6,148,1,16,4,12
	.byte	'reserved_0',0,4
	.word	328
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN11_Bits',0,6,151,1,3
	.word	34034
	.byte	11
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,6,154,1,16,4,12
	.byte	'STM0DIS',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'STM1DIS',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'STM2DIS',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'STM3DIS',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'STM4DIS',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'STM5DIS',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'reserved_6',0,1
	.word	525
	.byte	2,0,2,35,0,12
	.byte	'reserved_8',0,4
	.word	328
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,6,164,1,3
	.word	34115
	.byte	11
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,6,167,1,16,4,12
	.byte	'STMDIV',0,1
	.word	525
	.byte	4,4,2,35,0,12
	.byte	'GTMDIV',0,1
	.word	525
	.byte	4,0,2,35,0,12
	.byte	'SRIDIV',0,1
	.word	525
	.byte	4,4,2,35,1,12
	.byte	'LPDIV',0,1
	.word	525
	.byte	3,1,2,35,1,12
	.byte	'reserved_15',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'SPBDIV',0,1
	.word	525
	.byte	4,4,2,35,2,12
	.byte	'BBBDIV',0,1
	.word	525
	.byte	4,0,2,35,2,12
	.byte	'FSIDIV',0,1
	.word	525
	.byte	2,6,2,35,3,12
	.byte	'FSI2DIV',0,1
	.word	525
	.byte	2,4,2,35,3,12
	.byte	'CLKSEL',0,1
	.word	525
	.byte	2,2,2,35,3,12
	.byte	'UP',0,1
	.word	525
	.byte	1,1,2,35,3,12
	.byte	'LCK',0,1
	.word	525
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON0_Bits',0,6,181,1,3
	.word	34332
	.byte	11
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,6,184,1,16,4,12
	.byte	'MCANDIV',0,1
	.word	525
	.byte	4,4,2,35,0,12
	.byte	'CLKSELMCAN',0,1
	.word	525
	.byte	2,2,2,35,0,12
	.byte	'reserved_6',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'PLL1DIVDIS',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'I2CDIV',0,1
	.word	525
	.byte	4,4,2,35,1,12
	.byte	'reserved_12',0,1
	.word	525
	.byte	4,0,2,35,1,12
	.byte	'MSCDIV',0,1
	.word	525
	.byte	4,4,2,35,2,12
	.byte	'CLKSELMSC',0,1
	.word	525
	.byte	2,2,2,35,2,12
	.byte	'reserved_22',0,1
	.word	525
	.byte	2,0,2,35,2,12
	.byte	'QSPIDIV',0,1
	.word	525
	.byte	4,4,2,35,3,12
	.byte	'CLKSELQSPI',0,1
	.word	525
	.byte	2,2,2,35,3,12
	.byte	'reserved_30',0,1
	.word	525
	.byte	1,1,2,35,3,12
	.byte	'LCK',0,1
	.word	525
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON1_Bits',0,6,199,1,3
	.word	34605
	.byte	11
	.byte	'_Ifx_SCU_CCUCON10_Bits',0,6,202,1,16,4,12
	.byte	'CPU4DIV',0,1
	.word	525
	.byte	6,2,2,35,0,12
	.byte	'reserved_6',0,4
	.word	328
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON10_Bits',0,6,206,1,3
	.word	34931
	.byte	11
	.byte	'_Ifx_SCU_CCUCON11_Bits',0,6,209,1,16,4,12
	.byte	'CPU5DIV',0,1
	.word	525
	.byte	6,2,2,35,0,12
	.byte	'reserved_6',0,4
	.word	328
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON11_Bits',0,6,213,1,3
	.word	35033
	.byte	11
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,6,216,1,16,4,12
	.byte	'ASCLINFDIV',0,1
	.word	525
	.byte	4,4,2,35,0,12
	.byte	'reserved_4',0,1
	.word	525
	.byte	4,0,2,35,0,12
	.byte	'ASCLINSDIV',0,1
	.word	525
	.byte	4,4,2,35,1,12
	.byte	'CLKSELASCLINS',0,1
	.word	525
	.byte	2,2,2,35,1,12
	.byte	'reserved_14',0,4
	.word	328
	.byte	10,8,2,35,0,12
	.byte	'EBUPERON',0,1
	.word	525
	.byte	1,7,2,35,3,12
	.byte	'ERAYPERON',0,1
	.word	525
	.byte	1,6,2,35,3,12
	.byte	'HSPDMPERON',0,1
	.word	525
	.byte	1,5,2,35,3,12
	.byte	'reserved_27',0,1
	.word	525
	.byte	4,1,2,35,3,12
	.byte	'LCK',0,1
	.word	525
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON2_Bits',0,6,228,1,3
	.word	35135
	.byte	11
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,6,231,1,16,4,12
	.byte	'PLL0MONEN',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'PLL1MONEN',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'PLL2MONEN',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'SPBMONEN',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'BACKMONEN',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'reserved_5',0,1
	.word	525
	.byte	3,0,2,35,0,12
	.byte	'PLL0MONTST',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'PLL1MONTST',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'PLL2MONTST',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'SPBMONTST',0,1
	.word	525
	.byte	1,4,2,35,1,12
	.byte	'BACKMONTST',0,1
	.word	525
	.byte	1,3,2,35,1,12
	.byte	'reserved_13',0,4
	.word	328
	.byte	11,8,2,35,0,12
	.byte	'reserved_24',0,1
	.word	525
	.byte	6,2,2,35,3,12
	.byte	'UP',0,1
	.word	525
	.byte	1,1,2,35,3,12
	.byte	'LCK',0,1
	.word	525
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON3_Bits',0,6,248,1,3
	.word	35409
	.byte	11
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,6,251,1,16,4,12
	.byte	'LOTHR',0,2
	.word	1076
	.byte	12,4,2,35,0,12
	.byte	'UPTHR',0,4
	.word	328
	.byte	12,8,2,35,0,12
	.byte	'MONEN',0,1
	.word	525
	.byte	1,7,2,35,3,12
	.byte	'MONTST',0,1
	.word	525
	.byte	1,6,2,35,3,12
	.byte	'reserved_26',0,1
	.word	525
	.byte	4,2,2,35,3,12
	.byte	'UP',0,1
	.word	525
	.byte	1,1,2,35,3,12
	.byte	'LCK',0,1
	.word	525
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON4_Bits',0,6,132,2,3
	.word	35778
	.byte	11
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,6,135,2,16,4,12
	.byte	'GETHDIV',0,1
	.word	525
	.byte	4,4,2,35,0,12
	.byte	'MCANHDIV',0,1
	.word	525
	.byte	4,0,2,35,0,12
	.byte	'ADASDIV',0,1
	.word	525
	.byte	4,4,2,35,1,12
	.byte	'reserved_12',0,4
	.word	328
	.byte	18,2,2,35,0,12
	.byte	'UP',0,1
	.word	525
	.byte	1,1,2,35,3,12
	.byte	'LCK',0,1
	.word	525
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON5_Bits',0,6,143,2,3
	.word	35958
	.byte	11
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,6,146,2,16,4,12
	.byte	'CPU0DIV',0,1
	.word	525
	.byte	6,2,2,35,0,12
	.byte	'reserved_6',0,4
	.word	328
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON6_Bits',0,6,150,2,3
	.word	36127
	.byte	11
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,6,153,2,16,4,12
	.byte	'CPU1DIV',0,1
	.word	525
	.byte	6,2,2,35,0,12
	.byte	'reserved_6',0,4
	.word	328
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON7_Bits',0,6,157,2,3
	.word	36227
	.byte	11
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,6,160,2,16,4,12
	.byte	'CPU2DIV',0,1
	.word	525
	.byte	6,2,2,35,0,12
	.byte	'reserved_6',0,4
	.word	328
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON8_Bits',0,6,164,2,3
	.word	36327
	.byte	11
	.byte	'_Ifx_SCU_CCUCON9_Bits',0,6,167,2,16,4,12
	.byte	'CPU3DIV',0,1
	.word	525
	.byte	6,2,2,35,0,12
	.byte	'reserved_6',0,4
	.word	328
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON9_Bits',0,6,171,2,3
	.word	36427
	.byte	11
	.byte	'_Ifx_SCU_CHIPID_Bits',0,6,174,2,16,4,12
	.byte	'CHREV',0,1
	.word	525
	.byte	6,2,2,35,0,12
	.byte	'CHTEC',0,1
	.word	525
	.byte	2,0,2,35,0,12
	.byte	'CHPK',0,1
	.word	525
	.byte	4,4,2,35,1,12
	.byte	'CHID',0,1
	.word	525
	.byte	4,0,2,35,1,12
	.byte	'EEA',0,1
	.word	525
	.byte	1,7,2,35,2,12
	.byte	'UCODE',0,1
	.word	525
	.byte	7,0,2,35,2,12
	.byte	'FSIZE',0,1
	.word	525
	.byte	4,4,2,35,3,12
	.byte	'VART',0,1
	.word	525
	.byte	3,1,2,35,3,12
	.byte	'SEC',0,1
	.word	525
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CHIPID_Bits',0,6,185,2,3
	.word	36527
	.byte	11
	.byte	'_Ifx_SCU_DTSCLIM_Bits',0,6,188,2,16,4,12
	.byte	'LOWER',0,2
	.word	1076
	.byte	12,4,2,35,0,12
	.byte	'reserved_12',0,1
	.word	525
	.byte	1,3,2,35,1,12
	.byte	'BGPOK',0,1
	.word	525
	.byte	1,2,2,35,1,12
	.byte	'EN',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'LLU',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'UPPER',0,2
	.word	1076
	.byte	12,4,2,35,2,12
	.byte	'INTEN',0,1
	.word	525
	.byte	1,3,2,35,3,12
	.byte	'reserved_29',0,1
	.word	525
	.byte	1,2,2,35,3,12
	.byte	'INT',0,1
	.word	525
	.byte	1,1,2,35,3,12
	.byte	'UOF',0,1
	.word	525
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_DTSCLIM_Bits',0,6,200,2,3
	.word	36730
	.byte	11
	.byte	'_Ifx_SCU_DTSCSTAT_Bits',0,6,203,2,16,4,12
	.byte	'RESULT',0,2
	.word	1076
	.byte	12,4,2,35,0,12
	.byte	'reserved_12',0,4
	.word	328
	.byte	20,0,2,35,0,0,33
	.byte	'Ifx_SCU_DTSCSTAT_Bits',0,6,207,2,3
	.word	36962
	.byte	11
	.byte	'_Ifx_SCU_EICON0_Bits',0,6,210,2,16,4,12
	.byte	'reserved_0',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'ENDINIT',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'EPW',0,4
	.word	924
	.byte	14,16,2,35,0,12
	.byte	'REL',0,4
	.word	924
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_SCU_EICON0_Bits',0,6,216,2,3
	.word	37064
	.byte	11
	.byte	'_Ifx_SCU_EICON1_Bits',0,6,219,2,16,4,12
	.byte	'reserved_0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'reserved_1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'IR0',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'DR',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'IR1',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'reserved_6',0,4
	.word	328
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_EICON1_Bits',0,6,228,2,3
	.word	37192
	.byte	11
	.byte	'_Ifx_SCU_EICR_Bits',0,6,231,2,16,4,12
	.byte	'reserved_0',0,1
	.word	525
	.byte	4,4,2,35,0,12
	.byte	'EXIS0',0,1
	.word	525
	.byte	3,1,2,35,0,12
	.byte	'reserved_7',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'FEN0',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'REN0',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'LDEN0',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'EIEN0',0,1
	.word	525
	.byte	1,4,2,35,1,12
	.byte	'INP0',0,1
	.word	525
	.byte	3,1,2,35,1,12
	.byte	'reserved_15',0,4
	.word	328
	.byte	5,12,2,35,0,12
	.byte	'EXIS1',0,1
	.word	525
	.byte	3,1,2,35,2,12
	.byte	'reserved_23',0,1
	.word	525
	.byte	1,0,2,35,2,12
	.byte	'FEN1',0,1
	.word	525
	.byte	1,7,2,35,3,12
	.byte	'REN1',0,1
	.word	525
	.byte	1,6,2,35,3,12
	.byte	'LDEN1',0,1
	.word	525
	.byte	1,5,2,35,3,12
	.byte	'EIEN1',0,1
	.word	525
	.byte	1,4,2,35,3,12
	.byte	'INP1',0,1
	.word	525
	.byte	3,1,2,35,3,12
	.byte	'reserved_31',0,1
	.word	525
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_EICR_Bits',0,6,250,2,3
	.word	37381
	.byte	11
	.byte	'_Ifx_SCU_EIFILT_Bits',0,6,253,2,16,4,12
	.byte	'FILRQ0A',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'FILRQ5A',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'FILRQ2A',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'FILRQ3A',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'FILRQ0C',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'FILRQ1C',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'FILRQ3C',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'FILRQ2C',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'FILRQ4A',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'FILRQ6A',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'FILRQ1A',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'FILRQ7A',0,1
	.word	525
	.byte	1,4,2,35,1,12
	.byte	'FILRQ6D',0,1
	.word	525
	.byte	1,3,2,35,1,12
	.byte	'FILRQ4D',0,1
	.word	525
	.byte	1,2,2,35,1,12
	.byte	'FILRQ2B',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'FILRQ3B',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'FILRQ7C',0,1
	.word	525
	.byte	1,7,2,35,2,12
	.byte	'reserved_17',0,1
	.word	525
	.byte	7,0,2,35,2,12
	.byte	'FILTDIV',0,1
	.word	525
	.byte	4,4,2,35,3,12
	.byte	'DEPTH',0,1
	.word	525
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_EIFILT_Bits',0,6,147,3,3
	.word	37745
	.byte	11
	.byte	'_Ifx_SCU_EIFR_Bits',0,6,150,3,16,4,12
	.byte	'INTF0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'INTF1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'INTF2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'INTF3',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'INTF4',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'INTF5',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'INTF6',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'INTF7',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'reserved_8',0,4
	.word	328
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_EIFR_Bits',0,6,161,3,3
	.word	38184
	.byte	11
	.byte	'_Ifx_SCU_EISR_Bits',0,6,164,3,16,4,12
	.byte	'AE',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'OE',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'IS0',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'DS',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'TO',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'IS1',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'reserved_6',0,2
	.word	1076
	.byte	10,0,2,35,0,12
	.byte	'TIM',0,2
	.word	1076
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_EISR_Bits',0,6,174,3,3
	.word	38395
	.byte	11
	.byte	'_Ifx_SCU_EMSR_Bits',0,6,177,3,16,4,12
	.byte	'POL',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'MODE',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'ENON',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'PSEL',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,2
	.word	1076
	.byte	12,0,2,35,0,12
	.byte	'EMSF',0,1
	.word	525
	.byte	1,7,2,35,2,12
	.byte	'SEMSF',0,1
	.word	525
	.byte	1,6,2,35,2,12
	.byte	'reserved_18',0,2
	.word	1076
	.byte	14,0,2,35,2,0,33
	.byte	'Ifx_SCU_EMSR_Bits',0,6,187,3,3
	.word	38571
	.byte	11
	.byte	'_Ifx_SCU_EMSSW_Bits',0,6,190,3,16,4,12
	.byte	'reserved_0',0,4
	.word	328
	.byte	24,8,2,35,0,12
	.byte	'EMSFM',0,1
	.word	525
	.byte	2,6,2,35,3,12
	.byte	'SEMSFM',0,1
	.word	525
	.byte	2,4,2,35,3,12
	.byte	'reserved_28',0,1
	.word	525
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_EMSSW_Bits',0,6,196,3,3
	.word	38765
	.byte	11
	.byte	'_Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,6,199,3,16,4,12
	.byte	'reserved_0',0,1
	.word	525
	.byte	7,1,2,35,0,12
	.byte	'EDCON',0,2
	.word	1076
	.byte	2,7,2,35,0,12
	.byte	'reserved_9',0,4
	.word	328
	.byte	23,0,2,35,0,0,33
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,6,204,3,3
	.word	38900
	.byte	11
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,6,207,3,16,4,12
	.byte	'ARI',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'ARC',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'reserved_2',0,4
	.word	328
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SCU_ESROCFG_Bits',0,6,212,3,3
	.word	39036
	.byte	11
	.byte	'_Ifx_SCU_EXTCON_Bits',0,6,215,3,16,4,12
	.byte	'EN0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'reserved_1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'SEL0',0,1
	.word	525
	.byte	4,2,2,35,0,12
	.byte	'reserved_6',0,2
	.word	1076
	.byte	10,0,2,35,0,12
	.byte	'EN1',0,1
	.word	525
	.byte	1,7,2,35,2,12
	.byte	'NSEL',0,1
	.word	525
	.byte	1,6,2,35,2,12
	.byte	'SEL1',0,1
	.word	525
	.byte	4,2,2,35,2,12
	.byte	'reserved_22',0,1
	.word	525
	.byte	2,0,2,35,2,12
	.byte	'DIV1',0,1
	.word	525
	.byte	8,0,2,35,3,0,33
	.byte	'Ifx_SCU_EXTCON_Bits',0,6,226,3,3
	.word	39147
	.byte	11
	.byte	'_Ifx_SCU_FDR_Bits',0,6,229,3,16,4,12
	.byte	'STEP',0,2
	.word	1076
	.byte	10,6,2,35,0,12
	.byte	'reserved_10',0,1
	.word	525
	.byte	4,2,2,35,1,12
	.byte	'DM',0,1
	.word	525
	.byte	2,0,2,35,1,12
	.byte	'RESULT',0,2
	.word	1076
	.byte	10,6,2,35,2,12
	.byte	'reserved_26',0,1
	.word	525
	.byte	5,1,2,35,3,12
	.byte	'DISCLK',0,1
	.word	525
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_FDR_Bits',0,6,237,3,3
	.word	39365
	.byte	11
	.byte	'_Ifx_SCU_FMR_Bits',0,6,240,3,16,4,12
	.byte	'FS0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'FS1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'FS2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'FS3',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'FS4',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'FS5',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'FS6',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'FS7',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'reserved_8',0,1
	.word	525
	.byte	8,0,2,35,1,12
	.byte	'FC0',0,1
	.word	525
	.byte	1,7,2,35,2,12
	.byte	'FC1',0,1
	.word	525
	.byte	1,6,2,35,2,12
	.byte	'FC2',0,1
	.word	525
	.byte	1,5,2,35,2,12
	.byte	'FC3',0,1
	.word	525
	.byte	1,4,2,35,2,12
	.byte	'FC4',0,1
	.word	525
	.byte	1,3,2,35,2,12
	.byte	'FC5',0,1
	.word	525
	.byte	1,2,2,35,2,12
	.byte	'FC6',0,1
	.word	525
	.byte	1,1,2,35,2,12
	.byte	'FC7',0,1
	.word	525
	.byte	1,0,2,35,2,12
	.byte	'reserved_24',0,1
	.word	525
	.byte	8,0,2,35,3,0,33
	.byte	'Ifx_SCU_FMR_Bits',0,6,132,4,3
	.word	39528
	.byte	11
	.byte	'_Ifx_SCU_ID_Bits',0,6,135,4,16,4,12
	.byte	'MODREV',0,1
	.word	525
	.byte	8,0,2,35,0,12
	.byte	'MODTYPE',0,1
	.word	525
	.byte	8,0,2,35,1,12
	.byte	'MODNUMBER',0,2
	.word	1076
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_ID_Bits',0,6,140,4,3
	.word	39864
	.byte	11
	.byte	'_Ifx_SCU_IGCR_Bits',0,6,143,4,16,4,12
	.byte	'IPEN00',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'IPEN01',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'IPEN02',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'IPEN03',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'IPEN04',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'IPEN05',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'IPEN06',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'IPEN07',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'reserved_8',0,1
	.word	525
	.byte	5,3,2,35,1,12
	.byte	'GEEN0',0,1
	.word	525
	.byte	1,2,2,35,1,12
	.byte	'IGP0',0,1
	.word	525
	.byte	2,0,2,35,1,12
	.byte	'IPEN10',0,1
	.word	525
	.byte	1,7,2,35,2,12
	.byte	'IPEN11',0,1
	.word	525
	.byte	1,6,2,35,2,12
	.byte	'IPEN12',0,1
	.word	525
	.byte	1,5,2,35,2,12
	.byte	'IPEN13',0,1
	.word	525
	.byte	1,4,2,35,2,12
	.byte	'IPEN14',0,1
	.word	525
	.byte	1,3,2,35,2,12
	.byte	'IPEN15',0,1
	.word	525
	.byte	1,2,2,35,2,12
	.byte	'IPEN16',0,1
	.word	525
	.byte	1,1,2,35,2,12
	.byte	'IPEN17',0,1
	.word	525
	.byte	1,0,2,35,2,12
	.byte	'reserved_24',0,1
	.word	525
	.byte	5,3,2,35,3,12
	.byte	'GEEN1',0,1
	.word	525
	.byte	1,2,2,35,3,12
	.byte	'IGP1',0,1
	.word	525
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_SCU_IGCR_Bits',0,6,167,4,3
	.word	39971
	.byte	11
	.byte	'_Ifx_SCU_IN_Bits',0,6,170,4,16,4,12
	.byte	'P0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'P1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'reserved_2',0,4
	.word	328
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SCU_IN_Bits',0,6,175,4,3
	.word	40423
	.byte	11
	.byte	'_Ifx_SCU_IOCR_Bits',0,6,178,4,16,4,12
	.byte	'reserved_0',0,1
	.word	525
	.byte	4,4,2,35,0,12
	.byte	'PC0',0,1
	.word	525
	.byte	4,0,2,35,0,12
	.byte	'reserved_8',0,1
	.word	525
	.byte	4,4,2,35,1,12
	.byte	'PC1',0,1
	.word	525
	.byte	4,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_IOCR_Bits',0,6,185,4,3
	.word	40522
	.byte	11
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,6,188,4,16,4,12
	.byte	'LBISTREQ',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'LBISTRES',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'PATTERNS',0,4
	.word	328
	.byte	18,12,2,35,0,12
	.byte	'reserved_20',0,2
	.word	1076
	.byte	8,4,2,35,2,12
	.byte	'LBISTDONE',0,1
	.word	525
	.byte	1,3,2,35,3,12
	.byte	'reserved_29',0,1
	.word	525
	.byte	1,2,2,35,3,12
	.byte	'LBISTERRINJ',0,1
	.word	525
	.byte	1,1,2,35,3,12
	.byte	'LBISTREQRED',0,1
	.word	525
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,6,198,4,3
	.word	40672
	.byte	11
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,6,201,4,16,4,12
	.byte	'SEED',0,4
	.word	328
	.byte	19,13,2,35,0,12
	.byte	'reserved_19',0,1
	.word	525
	.byte	5,0,2,35,2,12
	.byte	'SPLITSH',0,1
	.word	525
	.byte	3,5,2,35,3,12
	.byte	'BODY',0,1
	.word	525
	.byte	1,4,2,35,3,12
	.byte	'LBISTFREQU',0,1
	.word	525
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,6,208,4,3
	.word	40910
	.byte	11
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,6,211,4,16,4,12
	.byte	'LENGTH',0,2
	.word	1076
	.byte	12,4,2,35,0,12
	.byte	'reserved_12',0,4
	.word	328
	.byte	20,0,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,6,215,4,3
	.word	41071
	.byte	11
	.byte	'_Ifx_SCU_LBISTCTRL3_Bits',0,6,218,4,16,4,12
	.byte	'SIGNATURE',0,4
	.word	328
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL3_Bits',0,6,221,4,3
	.word	41177
	.byte	11
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,6,224,4,16,4,12
	.byte	'LS2',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'reserved_1',0,2
	.word	1076
	.byte	14,1,2,35,0,12
	.byte	'LSEN2',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'LS0',0,1
	.word	525
	.byte	1,7,2,35,2,12
	.byte	'reserved_17',0,2
	.word	1076
	.byte	14,1,2,35,2,12
	.byte	'LSEN0',0,1
	.word	525
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_LCLCON0_Bits',0,6,232,4,3
	.word	41263
	.byte	11
	.byte	'_Ifx_SCU_LCLCON1_Bits',0,6,235,4,16,4,12
	.byte	'LS3',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'reserved_1',0,2
	.word	1076
	.byte	14,1,2,35,0,12
	.byte	'LSEN3',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'LS1',0,1
	.word	525
	.byte	1,7,2,35,2,12
	.byte	'reserved_17',0,2
	.word	1076
	.byte	14,1,2,35,2,12
	.byte	'LSEN1',0,1
	.word	525
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_LCLCON1_Bits',0,6,243,4,3
	.word	41431
	.byte	11
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,6,246,4,16,4,12
	.byte	'LCLT0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'LCLT1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'LCLT2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'LCLT3',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'LCLT4',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'LCLT5',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'reserved_6',0,2
	.word	1076
	.byte	10,0,2,35,0,12
	.byte	'PLCLT0',0,1
	.word	525
	.byte	1,7,2,35,2,12
	.byte	'PLCLT1',0,1
	.word	525
	.byte	1,6,2,35,2,12
	.byte	'PLCLT2',0,1
	.word	525
	.byte	1,5,2,35,2,12
	.byte	'PLCLT3',0,1
	.word	525
	.byte	1,4,2,35,2,12
	.byte	'PLCLT4',0,1
	.word	525
	.byte	1,3,2,35,2,12
	.byte	'PLCLT5',0,1
	.word	525
	.byte	1,2,2,35,2,12
	.byte	'reserved_22',0,2
	.word	1076
	.byte	10,0,2,35,2,0,33
	.byte	'Ifx_SCU_LCLTEST_Bits',0,6,134,5,3
	.word	41599
	.byte	11
	.byte	'_Ifx_SCU_MANID_Bits',0,6,137,5,16,4,12
	.byte	'DEPT',0,1
	.word	525
	.byte	5,3,2,35,0,12
	.byte	'MANUF',0,2
	.word	1076
	.byte	11,0,2,35,0,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_MANID_Bits',0,6,142,5,3
	.word	41913
	.byte	11
	.byte	'_Ifx_SCU_OMR_Bits',0,6,145,5,16,4,12
	.byte	'PS0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'PS1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'reserved_2',0,2
	.word	1076
	.byte	14,0,2,35,0,12
	.byte	'PCL0',0,1
	.word	525
	.byte	1,7,2,35,2,12
	.byte	'PCL1',0,1
	.word	525
	.byte	1,6,2,35,2,12
	.byte	'reserved_18',0,2
	.word	1076
	.byte	14,0,2,35,2,0,33
	.byte	'Ifx_SCU_OMR_Bits',0,6,153,5,3
	.word	42024
	.byte	11
	.byte	'_Ifx_SCU_OSCCON_Bits',0,6,156,5,16,4,12
	.byte	'reserved_0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'PLLLV',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'OSCRES',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'GAINSEL',0,1
	.word	525
	.byte	2,3,2,35,0,12
	.byte	'MODE',0,1
	.word	525
	.byte	2,1,2,35,0,12
	.byte	'SHBY',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'PLLHV',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'HYSEN',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'HYSCTL',0,1
	.word	525
	.byte	2,4,2,35,1,12
	.byte	'AMPCTL',0,1
	.word	525
	.byte	2,2,2,35,1,12
	.byte	'reserved_14',0,1
	.word	525
	.byte	2,0,2,35,1,12
	.byte	'OSCVAL',0,1
	.word	525
	.byte	5,3,2,35,2,12
	.byte	'reserved_21',0,1
	.word	525
	.byte	2,1,2,35,2,12
	.byte	'APREN',0,1
	.word	525
	.byte	1,0,2,35,2,12
	.byte	'CAP0EN',0,1
	.word	525
	.byte	1,7,2,35,3,12
	.byte	'CAP1EN',0,1
	.word	525
	.byte	1,6,2,35,3,12
	.byte	'CAP2EN',0,1
	.word	525
	.byte	1,5,2,35,3,12
	.byte	'CAP3EN',0,1
	.word	525
	.byte	1,4,2,35,3,12
	.byte	'reserved_28',0,1
	.word	525
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_OSCCON_Bits',0,6,177,5,3
	.word	42182
	.byte	11
	.byte	'_Ifx_SCU_OUT_Bits',0,6,180,5,16,4,12
	.byte	'P0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'P1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'reserved_2',0,4
	.word	328
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SCU_OUT_Bits',0,6,185,5,3
	.word	42593
	.byte	11
	.byte	'_Ifx_SCU_OVCCON_Bits',0,6,188,5,16,4,12
	.byte	'CSEL0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'CSEL1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'CSEL2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'CSEL3',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'CSEL4',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'CSEL5',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'reserved_6',0,2
	.word	1076
	.byte	10,0,2,35,0,12
	.byte	'OVSTRT',0,1
	.word	525
	.byte	1,7,2,35,2,12
	.byte	'OVSTP',0,1
	.word	525
	.byte	1,6,2,35,2,12
	.byte	'DCINVAL',0,1
	.word	525
	.byte	1,5,2,35,2,12
	.byte	'reserved_19',0,1
	.word	525
	.byte	5,0,2,35,2,12
	.byte	'OVCONF',0,1
	.word	525
	.byte	1,7,2,35,3,12
	.byte	'POVCONF',0,1
	.word	525
	.byte	1,6,2,35,3,12
	.byte	'reserved_26',0,1
	.word	525
	.byte	6,0,2,35,3,0,33
	.byte	'Ifx_SCU_OVCCON_Bits',0,6,204,5,3
	.word	42694
	.byte	11
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,6,207,5,16,4,12
	.byte	'OVEN0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'OVEN1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'OVEN2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'OVEN3',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'OVEN4',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'OVEN5',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'reserved_6',0,4
	.word	328
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,6,216,5,3
	.word	43012
	.byte	11
	.byte	'_Ifx_SCU_PDISC_Bits',0,6,219,5,16,4,12
	.byte	'PDIS0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'PDIS1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'reserved_2',0,4
	.word	328
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SCU_PDISC_Bits',0,6,224,5,3
	.word	43199
	.byte	11
	.byte	'_Ifx_SCU_PDR_Bits',0,6,227,5,16,4,12
	.byte	'PD0',0,1
	.word	525
	.byte	2,6,2,35,0,12
	.byte	'PL0',0,1
	.word	525
	.byte	2,4,2,35,0,12
	.byte	'PD1',0,1
	.word	525
	.byte	2,2,2,35,0,12
	.byte	'PL1',0,1
	.word	525
	.byte	2,0,2,35,0,12
	.byte	'reserved_8',0,4
	.word	328
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_PDR_Bits',0,6,234,5,3
	.word	43310
	.byte	11
	.byte	'_Ifx_SCU_PDRR_Bits',0,6,237,5,16,4,12
	.byte	'PDR0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'PDR1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'PDR2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'PDR3',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'PDR4',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'PDR5',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'PDR6',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'PDR7',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'reserved_8',0,4
	.word	328
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_PDRR_Bits',0,6,248,5,3
	.word	43443
	.byte	11
	.byte	'_Ifx_SCU_PERPLLCON0_Bits',0,6,251,5,16,4,12
	.byte	'DIVBY',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'reserved_1',0,2
	.word	1076
	.byte	8,7,2,35,0,12
	.byte	'NDIV',0,1
	.word	525
	.byte	7,0,2,35,1,12
	.byte	'PLLPWD',0,1
	.word	525
	.byte	1,7,2,35,2,12
	.byte	'reserved_17',0,1
	.word	525
	.byte	1,6,2,35,2,12
	.byte	'RESLD',0,1
	.word	525
	.byte	1,5,2,35,2,12
	.byte	'reserved_19',0,1
	.word	525
	.byte	5,0,2,35,2,12
	.byte	'PDIV',0,1
	.word	525
	.byte	3,5,2,35,3,12
	.byte	'reserved_27',0,1
	.word	525
	.byte	5,0,2,35,3,0,33
	.byte	'Ifx_SCU_PERPLLCON0_Bits',0,6,134,6,3
	.word	43646
	.byte	11
	.byte	'_Ifx_SCU_PERPLLCON1_Bits',0,6,137,6,16,4,12
	.byte	'K2DIV',0,1
	.word	525
	.byte	3,5,2,35,0,12
	.byte	'reserved_3',0,1
	.word	525
	.byte	5,0,2,35,0,12
	.byte	'K3DIV',0,1
	.word	525
	.byte	3,5,2,35,1,12
	.byte	'reserved_11',0,4
	.word	328
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PERPLLCON1_Bits',0,6,143,6,3
	.word	43886
	.byte	11
	.byte	'_Ifx_SCU_PERPLLSTAT_Bits',0,6,146,6,16,4,12
	.byte	'reserved_0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'PWDSTAT',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'LOCK',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'reserved_3',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'K3RDY',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'K2RDY',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'reserved_6',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'reserved_7',0,4
	.word	328
	.byte	25,0,2,35,0,0,33
	.byte	'Ifx_SCU_PERPLLSTAT_Bits',0,6,156,6,3
	.word	44030
	.byte	11
	.byte	'_Ifx_SCU_PMCSR0_Bits',0,6,159,6,16,4,12
	.byte	'REQSLP',0,1
	.word	525
	.byte	2,6,2,35,0,12
	.byte	'reserved_2',0,1
	.word	525
	.byte	6,0,2,35,0,12
	.byte	'PMST',0,1
	.word	525
	.byte	3,5,2,35,1,12
	.byte	'reserved_11',0,4
	.word	328
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR0_Bits',0,6,165,6,3
	.word	44252
	.byte	11
	.byte	'_Ifx_SCU_PMCSR1_Bits',0,6,168,6,16,4,12
	.byte	'REQSLP',0,1
	.word	525
	.byte	2,6,2,35,0,12
	.byte	'reserved_2',0,1
	.word	525
	.byte	6,0,2,35,0,12
	.byte	'PMST',0,1
	.word	525
	.byte	3,5,2,35,1,12
	.byte	'reserved_11',0,4
	.word	328
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR1_Bits',0,6,174,6,3
	.word	44388
	.byte	11
	.byte	'_Ifx_SCU_PMCSR2_Bits',0,6,177,6,16,4,12
	.byte	'REQSLP',0,1
	.word	525
	.byte	2,6,2,35,0,12
	.byte	'reserved_2',0,1
	.word	525
	.byte	6,0,2,35,0,12
	.byte	'PMST',0,1
	.word	525
	.byte	3,5,2,35,1,12
	.byte	'reserved_11',0,4
	.word	328
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR2_Bits',0,6,183,6,3
	.word	44524
	.byte	11
	.byte	'_Ifx_SCU_PMCSR3_Bits',0,6,186,6,16,4,12
	.byte	'REQSLP',0,1
	.word	525
	.byte	2,6,2,35,0,12
	.byte	'reserved_2',0,1
	.word	525
	.byte	6,0,2,35,0,12
	.byte	'PMST',0,1
	.word	525
	.byte	3,5,2,35,1,12
	.byte	'reserved_11',0,4
	.word	328
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR3_Bits',0,6,192,6,3
	.word	44660
	.byte	11
	.byte	'_Ifx_SCU_PMCSR4_Bits',0,6,195,6,16,4,12
	.byte	'REQSLP',0,1
	.word	525
	.byte	2,6,2,35,0,12
	.byte	'reserved_2',0,1
	.word	525
	.byte	6,0,2,35,0,12
	.byte	'PMST',0,1
	.word	525
	.byte	3,5,2,35,1,12
	.byte	'reserved_11',0,4
	.word	328
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR4_Bits',0,6,201,6,3
	.word	44796
	.byte	11
	.byte	'_Ifx_SCU_PMCSR5_Bits',0,6,204,6,16,4,12
	.byte	'REQSLP',0,1
	.word	525
	.byte	2,6,2,35,0,12
	.byte	'reserved_2',0,1
	.word	525
	.byte	6,0,2,35,0,12
	.byte	'PMST',0,1
	.word	525
	.byte	3,5,2,35,1,12
	.byte	'reserved_11',0,4
	.word	328
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR5_Bits',0,6,210,6,3
	.word	44932
	.byte	11
	.byte	'_Ifx_SCU_PMSTAT0_Bits',0,6,213,6,16,4,12
	.byte	'CPU0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'CPU1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'CPU2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'CPU3',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'CPU4',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'CPU5',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'reserved_6',0,2
	.word	1076
	.byte	10,0,2,35,0,12
	.byte	'CPU0LS',0,1
	.word	525
	.byte	1,7,2,35,2,12
	.byte	'CPU1LS',0,1
	.word	525
	.byte	1,6,2,35,2,12
	.byte	'CPU2LS',0,1
	.word	525
	.byte	1,5,2,35,2,12
	.byte	'CPU3LS',0,1
	.word	525
	.byte	1,4,2,35,2,12
	.byte	'reserved_20',0,2
	.word	1076
	.byte	12,0,2,35,2,0,33
	.byte	'Ifx_SCU_PMSTAT0_Bits',0,6,227,6,3
	.word	45068
	.byte	11
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,6,230,6,16,4,12
	.byte	'reserved_0',0,1
	.word	525
	.byte	8,0,2,35,0,12
	.byte	'CPUIDLSEL',0,1
	.word	525
	.byte	3,5,2,35,1,12
	.byte	'reserved_11',0,1
	.word	525
	.byte	1,4,2,35,1,12
	.byte	'IRADIS',0,1
	.word	525
	.byte	1,3,2,35,1,12
	.byte	'reserved_13',0,4
	.word	328
	.byte	11,8,2,35,0,12
	.byte	'CPUSEL',0,1
	.word	525
	.byte	3,5,2,35,3,12
	.byte	'STBYEVEN',0,1
	.word	525
	.byte	1,4,2,35,3,12
	.byte	'STBYEV',0,1
	.word	525
	.byte	3,1,2,35,3,12
	.byte	'reserved_31',0,1
	.word	525
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,6,241,6,3
	.word	45340
	.byte	11
	.byte	'_Ifx_SCU_PMTRCSR0_Bits',0,6,244,6,16,4,12
	.byte	'LJTEN',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'LJTOVEN',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'LJTOVIEN',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'LJTSTRT',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'LJTSTP',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'LJTCLR',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'reserved_6',0,2
	.word	1076
	.byte	6,4,2,35,0,12
	.byte	'SDSTEP',0,1
	.word	525
	.byte	4,0,2,35,1,12
	.byte	'VDTEN',0,1
	.word	525
	.byte	1,7,2,35,2,12
	.byte	'VDTOVEN',0,1
	.word	525
	.byte	1,6,2,35,2,12
	.byte	'VDTOVIEN',0,1
	.word	525
	.byte	1,5,2,35,2,12
	.byte	'VDTSTRT',0,1
	.word	525
	.byte	1,4,2,35,2,12
	.byte	'VDTSTP',0,1
	.word	525
	.byte	1,3,2,35,2,12
	.byte	'VDTCLR',0,1
	.word	525
	.byte	1,2,2,35,2,12
	.byte	'reserved_22',0,2
	.word	1076
	.byte	7,3,2,35,2,12
	.byte	'LPSLPEN',0,1
	.word	525
	.byte	1,2,2,35,3,12
	.byte	'reserved_30',0,1
	.word	525
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_SCU_PMTRCSR0_Bits',0,6,135,7,3
	.word	45585
	.byte	11
	.byte	'_Ifx_SCU_PMTRCSR1_Bits',0,6,138,7,16,4,12
	.byte	'LJTCV',0,2
	.word	1076
	.byte	16,0,2,35,0,12
	.byte	'VDTCV',0,2
	.word	1076
	.byte	10,6,2,35,2,12
	.byte	'reserved_26',0,1
	.word	525
	.byte	6,0,2,35,3,0,33
	.byte	'Ifx_SCU_PMTRCSR1_Bits',0,6,143,7,3
	.word	45973
	.byte	11
	.byte	'_Ifx_SCU_PMTRCSR2_Bits',0,6,146,7,16,4,12
	.byte	'LDJMPREQ',0,1
	.word	525
	.byte	2,6,2,35,0,12
	.byte	'reserved_2',0,1
	.word	525
	.byte	2,4,2,35,0,12
	.byte	'LJTRUN',0,1
	.word	525
	.byte	2,2,2,35,0,12
	.byte	'reserved_6',0,1
	.word	525
	.byte	2,0,2,35,0,12
	.byte	'LJTOV',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'reserved_9',0,1
	.word	525
	.byte	3,4,2,35,1,12
	.byte	'LJTOVCLR',0,1
	.word	525
	.byte	1,3,2,35,1,12
	.byte	'reserved_13',0,1
	.word	525
	.byte	3,0,2,35,1,12
	.byte	'LJTCNT',0,2
	.word	1076
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_PMTRCSR2_Bits',0,6,157,7,3
	.word	46091
	.byte	11
	.byte	'_Ifx_SCU_PMTRCSR3_Bits',0,6,160,7,16,4,12
	.byte	'VDROOPREQ',0,1
	.word	525
	.byte	2,6,2,35,0,12
	.byte	'reserved_2',0,1
	.word	525
	.byte	2,4,2,35,0,12
	.byte	'VDTRUN',0,1
	.word	525
	.byte	2,2,2,35,0,12
	.byte	'reserved_6',0,1
	.word	525
	.byte	2,0,2,35,0,12
	.byte	'VDTOV',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'reserved_9',0,1
	.word	525
	.byte	3,4,2,35,1,12
	.byte	'VDTOVCLR',0,1
	.word	525
	.byte	1,3,2,35,1,12
	.byte	'reserved_13',0,1
	.word	525
	.byte	3,0,2,35,1,12
	.byte	'VDTCNT',0,2
	.word	1076
	.byte	10,6,2,35,2,12
	.byte	'reserved_26',0,1
	.word	525
	.byte	6,0,2,35,3,0,33
	.byte	'Ifx_SCU_PMTRCSR3_Bits',0,6,172,7,3
	.word	46334
	.byte	11
	.byte	'_Ifx_SCU_RSTCON_Bits',0,6,175,7,16,4,12
	.byte	'ESR0',0,1
	.word	525
	.byte	2,6,2,35,0,12
	.byte	'ESR1',0,1
	.word	525
	.byte	2,4,2,35,0,12
	.byte	'reserved_4',0,1
	.word	525
	.byte	2,2,2,35,0,12
	.byte	'SMU',0,1
	.word	525
	.byte	2,0,2,35,0,12
	.byte	'SW',0,1
	.word	525
	.byte	2,6,2,35,1,12
	.byte	'STM0',0,1
	.word	525
	.byte	2,4,2,35,1,12
	.byte	'STM1',0,1
	.word	525
	.byte	2,2,2,35,1,12
	.byte	'STM2',0,1
	.word	525
	.byte	2,0,2,35,1,12
	.byte	'STM3',0,1
	.word	525
	.byte	2,6,2,35,2,12
	.byte	'STM4',0,1
	.word	525
	.byte	2,4,2,35,2,12
	.byte	'STM5',0,1
	.word	525
	.byte	2,2,2,35,2,12
	.byte	'reserved_22',0,2
	.word	1076
	.byte	10,0,2,35,2,0,33
	.byte	'Ifx_SCU_RSTCON_Bits',0,6,189,7,3
	.word	46601
	.byte	11
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,6,192,7,16,4,12
	.byte	'FRTO',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'CLRC',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'reserved_2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'reserved_3',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'reserved_5',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'reserved_6',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'CSSX',0,2
	.word	1076
	.byte	6,3,2,35,0,12
	.byte	'reserved_13',0,1
	.word	525
	.byte	1,2,2,35,1,12
	.byte	'reserved_14',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'reserved_15',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'USRINFO',0,2
	.word	1076
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_RSTCON2_Bits',0,6,206,7,3
	.word	46860
	.byte	11
	.byte	'_Ifx_SCU_RSTCON3_Bits',0,6,209,7,16,4,12
	.byte	'reserved_0',0,4
	.word	328
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_RSTCON3_Bits',0,6,212,7,3
	.word	47165
	.byte	11
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,6,215,7,16,4,12
	.byte	'ESR0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'ESR1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'reserved_2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'SMU',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'SW',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'STM0',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'STM1',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'STM2',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'STM3',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'STM4',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'STM5',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'reserved_11',0,1
	.word	525
	.byte	5,0,2,35,1,12
	.byte	'PORST',0,1
	.word	525
	.byte	1,7,2,35,2,12
	.byte	'reserved_17',0,1
	.word	525
	.byte	1,6,2,35,2,12
	.byte	'CB0',0,1
	.word	525
	.byte	1,5,2,35,2,12
	.byte	'CB1',0,1
	.word	525
	.byte	1,4,2,35,2,12
	.byte	'CB3',0,1
	.word	525
	.byte	1,3,2,35,2,12
	.byte	'reserved_21',0,1
	.word	525
	.byte	1,2,2,35,2,12
	.byte	'reserved_22',0,1
	.word	525
	.byte	1,1,2,35,2,12
	.byte	'EVRC',0,1
	.word	525
	.byte	1,0,2,35,2,12
	.byte	'EVR33',0,1
	.word	525
	.byte	1,7,2,35,3,12
	.byte	'SWD',0,1
	.word	525
	.byte	1,6,2,35,3,12
	.byte	'HSMS',0,1
	.word	525
	.byte	1,5,2,35,3,12
	.byte	'HSMA',0,1
	.word	525
	.byte	1,4,2,35,3,12
	.byte	'STBYR',0,1
	.word	525
	.byte	1,3,2,35,3,12
	.byte	'LBPORST',0,1
	.word	525
	.byte	1,2,2,35,3,12
	.byte	'LBTERM',0,1
	.word	525
	.byte	1,1,2,35,3,12
	.byte	'reserved_31',0,1
	.word	525
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,6,245,7,3
	.word	47246
	.byte	11
	.byte	'_Ifx_SCU_SEICON0_Bits',0,6,248,7,16,4,12
	.byte	'reserved_0',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'ENDINIT',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'EPW',0,4
	.word	924
	.byte	14,16,2,35,0,12
	.byte	'REL',0,4
	.word	924
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_SCU_SEICON0_Bits',0,6,254,7,3
	.word	47795
	.byte	11
	.byte	'_Ifx_SCU_SEICON1_Bits',0,6,129,8,16,4,12
	.byte	'reserved_0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'reserved_1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'IR0',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'DR',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'IR1',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'reserved_6',0,4
	.word	328
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_SEICON1_Bits',0,6,138,8,3
	.word	47925
	.byte	11
	.byte	'_Ifx_SCU_SEISR_Bits',0,6,141,8,16,4,12
	.byte	'AE',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'OE',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'IS0',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'DS',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'TO',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'IS1',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'reserved_6',0,2
	.word	1076
	.byte	10,0,2,35,0,12
	.byte	'TIM',0,2
	.word	1076
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_SEISR_Bits',0,6,151,8,3
	.word	48116
	.byte	11
	.byte	'_Ifx_SCU_STCON_Bits',0,6,154,8,16,4,12
	.byte	'reserved_0',0,2
	.word	1076
	.byte	13,3,2,35,0,12
	.byte	'SFCBAE',0,1
	.word	525
	.byte	1,2,2,35,1,12
	.byte	'CFCBAE',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'STP',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_STCON_Bits',0,6,161,8,3
	.word	48294
	.byte	11
	.byte	'_Ifx_SCU_STMEM1_Bits',0,6,164,8,16,4,12
	.byte	'MEM',0,4
	.word	328
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM1_Bits',0,6,167,8,3
	.word	48445
	.byte	11
	.byte	'_Ifx_SCU_STMEM2_Bits',0,6,170,8,16,4,12
	.byte	'MEM',0,4
	.word	328
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM2_Bits',0,6,173,8,3
	.word	48517
	.byte	11
	.byte	'_Ifx_SCU_STMEM3_Bits',0,6,176,8,16,4,12
	.byte	'MEM',0,4
	.word	328
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM3_Bits',0,6,179,8,3
	.word	48589
	.byte	11
	.byte	'_Ifx_SCU_STMEM4_Bits',0,6,182,8,16,4,12
	.byte	'MEM',0,4
	.word	328
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM4_Bits',0,6,185,8,3
	.word	48661
	.byte	11
	.byte	'_Ifx_SCU_STMEM5_Bits',0,6,188,8,16,4,12
	.byte	'MEM',0,4
	.word	328
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM5_Bits',0,6,191,8,3
	.word	48733
	.byte	11
	.byte	'_Ifx_SCU_STMEM6_Bits',0,6,194,8,16,4,12
	.byte	'MEM',0,4
	.word	328
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM6_Bits',0,6,197,8,3
	.word	48805
	.byte	11
	.byte	'_Ifx_SCU_STSTAT_Bits',0,6,200,8,16,4,12
	.byte	'HWCFG',0,1
	.word	525
	.byte	8,0,2,35,0,12
	.byte	'FTM',0,1
	.word	525
	.byte	7,1,2,35,1,12
	.byte	'MODE',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'FCBAE',0,1
	.word	525
	.byte	1,7,2,35,2,12
	.byte	'LUDIS',0,1
	.word	525
	.byte	1,6,2,35,2,12
	.byte	'reserved_18',0,1
	.word	525
	.byte	1,5,2,35,2,12
	.byte	'TRSTL',0,1
	.word	525
	.byte	1,4,2,35,2,12
	.byte	'SPDEN',0,1
	.word	525
	.byte	1,3,2,35,2,12
	.byte	'reserved_21',0,1
	.word	525
	.byte	1,2,2,35,2,12
	.byte	'reserved_22',0,1
	.word	525
	.byte	1,1,2,35,2,12
	.byte	'reserved_23',0,1
	.word	525
	.byte	1,0,2,35,2,12
	.byte	'RAMINT',0,1
	.word	525
	.byte	1,7,2,35,3,12
	.byte	'reserved_25',0,1
	.word	525
	.byte	3,4,2,35,3,12
	.byte	'reserved_28',0,1
	.word	525
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_STSTAT_Bits',0,6,216,8,3
	.word	48877
	.byte	11
	.byte	'_Ifx_SCU_SWAPCTRL_Bits',0,6,219,8,16,4,12
	.byte	'ADDRCFG',0,1
	.word	525
	.byte	2,6,2,35,0,12
	.byte	'SPARE',0,2
	.word	1076
	.byte	14,0,2,35,0,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_SWAPCTRL_Bits',0,6,224,8,3
	.word	49206
	.byte	11
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,6,227,8,16,4,12
	.byte	'reserved_0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'SWRSTREQ',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'reserved_2',0,1
	.word	525
	.byte	6,0,2,35,0,12
	.byte	'reserved_8',0,1
	.word	525
	.byte	8,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,6,234,8,3
	.word	49326
	.byte	11
	.byte	'_Ifx_SCU_SYSCON_Bits',0,6,237,8,16,4,12
	.byte	'CCTRIG0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'reserved_1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'RAMINTM',0,1
	.word	525
	.byte	2,4,2,35,0,12
	.byte	'SETLUDIS',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'reserved_5',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'reserved_6',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'reserved_7',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'DDC',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'reserved_9',0,1
	.word	525
	.byte	7,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_SYSCON_Bits',0,6,249,8,3
	.word	49496
	.byte	11
	.byte	'_Ifx_SCU_SYSPLLCON0_Bits',0,6,252,8,16,4,12
	.byte	'reserved_0',0,1
	.word	525
	.byte	2,6,2,35,0,12
	.byte	'MODEN',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'reserved_3',0,2
	.word	1076
	.byte	6,7,2,35,0,12
	.byte	'NDIV',0,1
	.word	525
	.byte	7,0,2,35,1,12
	.byte	'PLLPWD',0,1
	.word	525
	.byte	1,7,2,35,2,12
	.byte	'reserved_17',0,1
	.word	525
	.byte	1,6,2,35,2,12
	.byte	'RESLD',0,1
	.word	525
	.byte	1,5,2,35,2,12
	.byte	'reserved_19',0,1
	.word	525
	.byte	5,0,2,35,2,12
	.byte	'PDIV',0,1
	.word	525
	.byte	3,5,2,35,3,12
	.byte	'reserved_27',0,1
	.word	525
	.byte	3,2,2,35,3,12
	.byte	'INSEL',0,1
	.word	525
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_SCU_SYSPLLCON0_Bits',0,6,137,9,3
	.word	49759
	.byte	11
	.byte	'_Ifx_SCU_SYSPLLCON1_Bits',0,6,140,9,16,4,12
	.byte	'K2DIV',0,1
	.word	525
	.byte	3,5,2,35,0,12
	.byte	'reserved_3',0,4
	.word	328
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLCON1_Bits',0,6,144,9,3
	.word	50038
	.byte	11
	.byte	'_Ifx_SCU_SYSPLLCON2_Bits',0,6,147,9,16,4,12
	.byte	'MODCFG',0,2
	.word	1076
	.byte	16,0,2,35,0,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_SYSPLLCON2_Bits',0,6,151,9,3
	.word	50142
	.byte	11
	.byte	'_Ifx_SCU_SYSPLLSTAT_Bits',0,6,154,9,16,4,12
	.byte	'reserved_0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'PWDSTAT',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'LOCK',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'reserved_3',0,1
	.word	525
	.byte	2,3,2,35,0,12
	.byte	'K2RDY',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'reserved_6',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'MODRUN',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'reserved_8',0,4
	.word	328
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLSTAT_Bits',0,6,164,9,3
	.word	50248
	.byte	11
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,6,167,9,16,4,12
	.byte	'ESR0T',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'ESR1T',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'TRAP2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'SMUT',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,4
	.word	328
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,6,174,9,3
	.word	50471
	.byte	11
	.byte	'_Ifx_SCU_TRAPDIS0_Bits',0,6,177,9,16,4,12
	.byte	'CPU0ESR0T',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'CPU0ESR1T',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'CPU0TRAP2T',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'CPU0SMUT',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,1
	.word	525
	.byte	4,0,2,35,0,12
	.byte	'CPU1ESR0T',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'CPU1ESR1T',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'CPU1TRAP2T',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'CPU1SMUT',0,1
	.word	525
	.byte	1,4,2,35,1,12
	.byte	'reserved_12',0,1
	.word	525
	.byte	4,0,2,35,1,12
	.byte	'CPU2ESR0T',0,1
	.word	525
	.byte	1,7,2,35,2,12
	.byte	'CPU2ESR1T',0,1
	.word	525
	.byte	1,6,2,35,2,12
	.byte	'CPU2TRAP2T',0,1
	.word	525
	.byte	1,5,2,35,2,12
	.byte	'CPU2SMUT',0,1
	.word	525
	.byte	1,4,2,35,2,12
	.byte	'reserved_20',0,1
	.word	525
	.byte	4,0,2,35,2,12
	.byte	'CPU3ESR0T',0,1
	.word	525
	.byte	1,7,2,35,3,12
	.byte	'CPU3ESR1T',0,1
	.word	525
	.byte	1,6,2,35,3,12
	.byte	'CPU3TRAP2T',0,1
	.word	525
	.byte	1,5,2,35,3,12
	.byte	'CPU3SMUT',0,1
	.word	525
	.byte	1,4,2,35,3,12
	.byte	'reserved_28',0,1
	.word	525
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_TRAPDIS0_Bits',0,6,199,9,3
	.word	50619
	.byte	11
	.byte	'_Ifx_SCU_TRAPDIS1_Bits',0,6,202,9,16,4,12
	.byte	'CPU4ESR0T',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'CPU4ESR1T',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'CPU4TRAP2T',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'CPU4SMUT',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,1
	.word	525
	.byte	4,0,2,35,0,12
	.byte	'CPU5ESR0T',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'CPU5ESR1T',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'CPU5TRAP2T',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'CPU5SMUT',0,1
	.word	525
	.byte	1,4,2,35,1,12
	.byte	'reserved_12',0,1
	.word	525
	.byte	4,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_TRAPDIS1_Bits',0,6,215,9,3
	.word	51107
	.byte	11
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,6,218,9,16,4,12
	.byte	'ESR0T',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'ESR1T',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'TRAP2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'SMUT',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,4
	.word	328
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPSET_Bits',0,6,225,9,3
	.word	51404
	.byte	11
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,6,228,9,16,4,12
	.byte	'ESR0T',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'ESR1T',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'TRAP2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'SMUT',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,4
	.word	328
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,6,235,9,3
	.word	51552
	.byte	33
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,6,244,9,3
	.word	940
	.byte	33
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,6,132,10,3
	.word	1098
	.byte	33
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,6,148,10,3
	.word	1364
	.byte	11
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,6,151,10,16,4,12
	.byte	'ENDINIT',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'LCK',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'PW',0,4
	.word	924
	.byte	14,16,2,35,0,12
	.byte	'REL',0,4
	.word	924
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,6,157,10,3
	.word	51802
	.byte	11
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,6,160,10,16,4,12
	.byte	'CLRIRF',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'reserved_1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'IR0',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'DR',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'IR1',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'UR',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'PAR',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'TCR',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'TCTR',0,1
	.word	525
	.byte	7,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,6,173,10,3
	.word	51928
	.byte	11
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,6,176,10,16,4,12
	.byte	'AE',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'OE',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'IS0',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'DS',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'TO',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'IS1',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'US',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'PAS',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'TCS',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'TCT',0,1
	.word	525
	.byte	7,0,2,35,1,12
	.byte	'TIM',0,2
	.word	1076
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,6,189,10,3
	.word	52180
	.byte	13,6,197,10,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	32836
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN00',0,6,202,10,3
	.word	52399
	.byte	13,6,205,10,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	33395
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN01',0,6,210,10,3
	.word	52464
	.byte	13,6,213,10,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	33474
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN10',0,6,218,10,3
	.word	52529
	.byte	13,6,221,10,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	34034
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN11',0,6,226,10,3
	.word	52594
	.byte	13,6,229,10,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	34115
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ARSTDIS',0,6,234,10,3
	.word	52659
	.byte	13,6,237,10,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	34332
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON0',0,6,242,10,3
	.word	52724
	.byte	13,6,245,10,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	34605
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON1',0,6,250,10,3
	.word	52789
	.byte	13,6,253,10,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	34931
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON10',0,6,130,11,3
	.word	52854
	.byte	13,6,133,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	35033
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON11',0,6,138,11,3
	.word	52920
	.byte	13,6,141,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	35135
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON2',0,6,146,11,3
	.word	52986
	.byte	13,6,149,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	35409
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON3',0,6,154,11,3
	.word	53051
	.byte	13,6,157,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	35778
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON4',0,6,162,11,3
	.word	53116
	.byte	13,6,165,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	35958
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON5',0,6,170,11,3
	.word	53181
	.byte	13,6,173,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	36127
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON6',0,6,178,11,3
	.word	53246
	.byte	13,6,181,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	36227
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON7',0,6,186,11,3
	.word	53311
	.byte	13,6,189,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	36327
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON8',0,6,194,11,3
	.word	53376
	.byte	13,6,197,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	36427
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON9',0,6,202,11,3
	.word	53441
	.byte	13,6,205,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	36527
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CHIPID',0,6,210,11,3
	.word	53506
	.byte	13,6,213,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	36730
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_DTSCLIM',0,6,218,11,3
	.word	53570
	.byte	13,6,221,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	36962
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_DTSCSTAT',0,6,226,11,3
	.word	53635
	.byte	13,6,229,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	37064
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EICON0',0,6,234,11,3
	.word	53701
	.byte	13,6,237,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	37192
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EICON1',0,6,242,11,3
	.word	53765
	.byte	13,6,245,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	37381
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EICR',0,6,250,11,3
	.word	53829
	.byte	13,6,253,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	37745
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EIFILT',0,6,130,12,3
	.word	53891
	.byte	13,6,133,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	38184
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EIFR',0,6,138,12,3
	.word	53955
	.byte	13,6,141,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	38395
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EISR',0,6,146,12,3
	.word	54017
	.byte	13,6,149,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	38571
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EMSR',0,6,154,12,3
	.word	54079
	.byte	13,6,157,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	38765
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EMSSW',0,6,162,12,3
	.word	54141
	.byte	13,6,165,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	38900
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX',0,6,170,12,3
	.word	54204
	.byte	13,6,173,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	39036
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ESROCFG',0,6,178,12,3
	.word	54277
	.byte	13,6,181,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	39147
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EXTCON',0,6,186,12,3
	.word	54342
	.byte	13,6,189,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	39365
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_FDR',0,6,194,12,3
	.word	54406
	.byte	13,6,197,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	39528
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_FMR',0,6,202,12,3
	.word	54467
	.byte	13,6,205,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	39864
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ID',0,6,210,12,3
	.word	54528
	.byte	13,6,213,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	39971
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_IGCR',0,6,218,12,3
	.word	54588
	.byte	13,6,221,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	40423
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_IN',0,6,226,12,3
	.word	54650
	.byte	13,6,229,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	40522
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_IOCR',0,6,234,12,3
	.word	54710
	.byte	13,6,237,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	40672
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL0',0,6,242,12,3
	.word	54772
	.byte	13,6,245,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	40910
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL1',0,6,250,12,3
	.word	54840
	.byte	13,6,253,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	41071
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL2',0,6,130,13,3
	.word	54908
	.byte	13,6,133,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	41177
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL3',0,6,138,13,3
	.word	54976
	.byte	13,6,141,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	41263
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LCLCON0',0,6,146,13,3
	.word	55044
	.byte	13,6,149,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	41431
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LCLCON1',0,6,154,13,3
	.word	55109
	.byte	13,6,157,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	41599
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LCLTEST',0,6,162,13,3
	.word	55174
	.byte	13,6,165,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	41913
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_MANID',0,6,170,13,3
	.word	55239
	.byte	13,6,173,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	42024
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OMR',0,6,178,13,3
	.word	55302
	.byte	13,6,181,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	42182
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OSCCON',0,6,186,13,3
	.word	55363
	.byte	13,6,189,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	42593
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OUT',0,6,194,13,3
	.word	55427
	.byte	13,6,197,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	42694
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OVCCON',0,6,202,13,3
	.word	55488
	.byte	13,6,205,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	43012
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OVCENABLE',0,6,210,13,3
	.word	55552
	.byte	13,6,213,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	43199
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PDISC',0,6,218,13,3
	.word	55619
	.byte	13,6,221,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	43310
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PDR',0,6,226,13,3
	.word	55682
	.byte	13,6,229,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	43443
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PDRR',0,6,234,13,3
	.word	55743
	.byte	13,6,237,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	43646
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PERPLLCON0',0,6,242,13,3
	.word	55805
	.byte	13,6,245,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	43886
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PERPLLCON1',0,6,250,13,3
	.word	55873
	.byte	13,6,253,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	44030
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PERPLLSTAT',0,6,130,14,3
	.word	55941
	.byte	13,6,133,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	44252
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR0',0,6,138,14,3
	.word	56009
	.byte	13,6,141,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	44388
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR1',0,6,146,14,3
	.word	56073
	.byte	13,6,149,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	44524
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR2',0,6,154,14,3
	.word	56137
	.byte	13,6,157,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	44660
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR3',0,6,162,14,3
	.word	56201
	.byte	13,6,165,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	44796
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR4',0,6,170,14,3
	.word	56265
	.byte	13,6,173,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	44932
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR5',0,6,178,14,3
	.word	56329
	.byte	13,6,181,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	45068
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMSTAT0',0,6,186,14,3
	.word	56393
	.byte	13,6,189,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	45340
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMSWCR1',0,6,194,14,3
	.word	56458
	.byte	13,6,197,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	45585
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMTRCSR0',0,6,202,14,3
	.word	56523
	.byte	13,6,205,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	45973
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMTRCSR1',0,6,210,14,3
	.word	56589
	.byte	13,6,213,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	46091
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMTRCSR2',0,6,218,14,3
	.word	56655
	.byte	13,6,221,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	46334
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMTRCSR3',0,6,226,14,3
	.word	56721
	.byte	13,6,229,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	46601
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_RSTCON',0,6,234,14,3
	.word	56787
	.byte	13,6,237,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	46860
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_RSTCON2',0,6,242,14,3
	.word	56851
	.byte	13,6,245,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	47165
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_RSTCON3',0,6,250,14,3
	.word	56916
	.byte	13,6,253,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	47246
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_RSTSTAT',0,6,130,15,3
	.word	56981
	.byte	13,6,133,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	47795
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SEICON0',0,6,138,15,3
	.word	57046
	.byte	13,6,141,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	47925
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SEICON1',0,6,146,15,3
	.word	57111
	.byte	13,6,149,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	48116
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SEISR',0,6,154,15,3
	.word	57176
	.byte	13,6,157,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	48294
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STCON',0,6,162,15,3
	.word	57239
	.byte	13,6,165,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	48445
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM1',0,6,170,15,3
	.word	57302
	.byte	13,6,173,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	48517
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM2',0,6,178,15,3
	.word	57366
	.byte	13,6,181,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	48589
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM3',0,6,186,15,3
	.word	57430
	.byte	13,6,189,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	48661
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM4',0,6,194,15,3
	.word	57494
	.byte	13,6,197,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	48733
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM5',0,6,202,15,3
	.word	57558
	.byte	13,6,205,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	48805
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM6',0,6,210,15,3
	.word	57622
	.byte	13,6,213,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	48877
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STSTAT',0,6,218,15,3
	.word	57686
	.byte	13,6,221,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	49206
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SWAPCTRL',0,6,226,15,3
	.word	57750
	.byte	13,6,229,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	49326
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SWRSTCON',0,6,234,15,3
	.word	57816
	.byte	13,6,237,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	49496
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSCON',0,6,242,15,3
	.word	57882
	.byte	13,6,245,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	49759
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLCON0',0,6,250,15,3
	.word	57946
	.byte	13,6,253,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	50038
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLCON1',0,6,130,16,3
	.word	58014
	.byte	13,6,133,16,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	50142
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLCON2',0,6,138,16,3
	.word	58082
	.byte	13,6,141,16,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	50248
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLSTAT',0,6,146,16,3
	.word	58150
	.byte	13,6,149,16,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	50471
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPCLR',0,6,154,16,3
	.word	58218
	.byte	13,6,157,16,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	50619
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPDIS0',0,6,162,16,3
	.word	58283
	.byte	13,6,165,16,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	51107
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPDIS1',0,6,170,16,3
	.word	58349
	.byte	13,6,173,16,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	51404
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPSET',0,6,178,16,3
	.word	58415
	.byte	13,6,181,16,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	51552
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPSTAT',0,6,186,16,3
	.word	58480
	.byte	33
	.byte	'Ifx_SCU_WDTCPU_CON0',0,6,194,16,3
	.word	1036
	.byte	33
	.byte	'Ifx_SCU_WDTCPU_CON1',0,6,202,16,3
	.word	1324
	.byte	33
	.byte	'Ifx_SCU_WDTCPU_SR',0,6,210,16,3
	.word	1555
	.byte	13,6,213,16,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	51802
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_WDTS_CON0',0,6,218,16,3
	.word	58631
	.byte	13,6,221,16,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	51928
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_WDTS_CON1',0,6,226,16,3
	.word	58698
	.byte	13,6,229,16,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	52180
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_WDTS_SR',0,6,234,16,3
	.word	58765
	.byte	11
	.byte	'_Ifx_SCU_ESRCFGX',0,6,246,16,25,4,14
	.byte	'ESRCFGX',0
	.word	54204
	.byte	4,2,35,0,0,10
	.word	58830
	.byte	33
	.byte	'Ifx_SCU_ESRCFGX',0,6,249,16,3
	.word	58871
	.byte	10
	.word	1595
	.byte	33
	.byte	'Ifx_SCU_WDTCPU',0,6,141,17,3
	.word	58901
	.byte	11
	.byte	'_Ifx_SCU_WDTS',0,6,156,17,25,12,14
	.byte	'CON0',0
	.word	58631
	.byte	4,2,35,0,14
	.byte	'CON1',0
	.word	58698
	.byte	4,2,35,4,14
	.byte	'SR',0
	.word	58765
	.byte	4,2,35,8,0,10
	.word	58930
	.byte	33
	.byte	'Ifx_SCU_WDTS',0,6,161,17,3
	.word	58991
	.byte	18,8
	.word	58830
	.byte	19,1,0,10
	.word	59018
	.byte	18,16
	.word	525
	.byte	19,15,0,18,20
	.word	525
	.byte	19,19,0,18,36
	.word	525
	.byte	19,35,0,18,16
	.word	53829
	.byte	19,3,0,18,16
	.word	54588
	.byte	19,3,0,18,72
	.word	1595
	.byte	19,5,0,10
	.word	59077
	.byte	10
	.word	58930
	.byte	18,176,2
	.word	525
	.byte	19,175,2,0,11
	.byte	'_Ifx_SCU',0,6,176,17,25,128,8,14
	.byte	'reserved_0',0
	.word	5378
	.byte	8,2,35,0,14
	.byte	'ID',0
	.word	54528
	.byte	4,2,35,8,14
	.byte	'reserved_C',0
	.word	3558
	.byte	4,2,35,12,14
	.byte	'OSCCON',0
	.word	55363
	.byte	4,2,35,16,14
	.byte	'SYSPLLSTAT',0
	.word	58150
	.byte	4,2,35,20,14
	.byte	'SYSPLLCON0',0
	.word	57946
	.byte	4,2,35,24,14
	.byte	'SYSPLLCON1',0
	.word	58014
	.byte	4,2,35,28,14
	.byte	'SYSPLLCON2',0
	.word	58082
	.byte	4,2,35,32,14
	.byte	'PERPLLSTAT',0
	.word	55941
	.byte	4,2,35,36,14
	.byte	'PERPLLCON0',0
	.word	55805
	.byte	4,2,35,40,14
	.byte	'PERPLLCON1',0
	.word	55873
	.byte	4,2,35,44,14
	.byte	'CCUCON0',0
	.word	52724
	.byte	4,2,35,48,14
	.byte	'CCUCON1',0
	.word	52789
	.byte	4,2,35,52,14
	.byte	'FDR',0
	.word	54406
	.byte	4,2,35,56,14
	.byte	'EXTCON',0
	.word	54342
	.byte	4,2,35,60,14
	.byte	'CCUCON2',0
	.word	52986
	.byte	4,2,35,64,14
	.byte	'CCUCON3',0
	.word	53051
	.byte	4,2,35,68,14
	.byte	'CCUCON4',0
	.word	53116
	.byte	4,2,35,72,14
	.byte	'CCUCON5',0
	.word	53181
	.byte	4,2,35,76,14
	.byte	'RSTSTAT',0
	.word	56981
	.byte	4,2,35,80,14
	.byte	'reserved_54',0
	.word	3558
	.byte	4,2,35,84,14
	.byte	'RSTCON',0
	.word	56787
	.byte	4,2,35,88,14
	.byte	'ARSTDIS',0
	.word	52659
	.byte	4,2,35,92,14
	.byte	'SWRSTCON',0
	.word	57816
	.byte	4,2,35,96,14
	.byte	'RSTCON2',0
	.word	56851
	.byte	4,2,35,100,14
	.byte	'RSTCON3',0
	.word	56916
	.byte	4,2,35,104,14
	.byte	'reserved_6C',0
	.word	3558
	.byte	4,2,35,108,14
	.byte	'ESRCFGX',0
	.word	59027
	.byte	8,2,35,112,14
	.byte	'ESROCFG',0
	.word	54277
	.byte	4,2,35,120,14
	.byte	'SYSCON',0
	.word	57882
	.byte	4,2,35,124,14
	.byte	'CCUCON6',0
	.word	53246
	.byte	4,3,35,128,1,14
	.byte	'CCUCON7',0
	.word	53311
	.byte	4,3,35,132,1,14
	.byte	'CCUCON8',0
	.word	53376
	.byte	4,3,35,136,1,14
	.byte	'CCUCON9',0
	.word	53441
	.byte	4,3,35,140,1,14
	.byte	'CCUCON10',0
	.word	52854
	.byte	4,3,35,144,1,14
	.byte	'CCUCON11',0
	.word	52920
	.byte	4,3,35,148,1,14
	.byte	'reserved_98',0
	.word	3558
	.byte	4,3,35,152,1,14
	.byte	'PDR',0
	.word	55682
	.byte	4,3,35,156,1,14
	.byte	'IOCR',0
	.word	54710
	.byte	4,3,35,160,1,14
	.byte	'OUT',0
	.word	55427
	.byte	4,3,35,164,1,14
	.byte	'OMR',0
	.word	55302
	.byte	4,3,35,168,1,14
	.byte	'IN',0
	.word	54650
	.byte	4,3,35,172,1,14
	.byte	'reserved_B0',0
	.word	59032
	.byte	16,3,35,176,1,14
	.byte	'STSTAT',0
	.word	57686
	.byte	4,3,35,192,1,14
	.byte	'STCON',0
	.word	57239
	.byte	4,3,35,196,1,14
	.byte	'PMCSR0',0
	.word	56009
	.byte	4,3,35,200,1,14
	.byte	'PMCSR1',0
	.word	56073
	.byte	4,3,35,204,1,14
	.byte	'PMCSR2',0
	.word	56137
	.byte	4,3,35,208,1,14
	.byte	'PMCSR3',0
	.word	56201
	.byte	4,3,35,212,1,14
	.byte	'PMCSR4',0
	.word	56265
	.byte	4,3,35,216,1,14
	.byte	'PMCSR5',0
	.word	56329
	.byte	4,3,35,220,1,14
	.byte	'reserved_E0',0
	.word	3558
	.byte	4,3,35,224,1,14
	.byte	'PMSTAT0',0
	.word	56393
	.byte	4,3,35,228,1,14
	.byte	'PMSWCR1',0
	.word	56458
	.byte	4,3,35,232,1,14
	.byte	'reserved_EC',0
	.word	59032
	.byte	16,3,35,236,1,14
	.byte	'EMSR',0
	.word	54079
	.byte	4,3,35,252,1,14
	.byte	'EMSSW',0
	.word	54141
	.byte	4,3,35,128,2,14
	.byte	'DTSCSTAT',0
	.word	53635
	.byte	4,3,35,132,2,14
	.byte	'DTSCLIM',0
	.word	53570
	.byte	4,3,35,136,2,14
	.byte	'reserved_10C',0
	.word	59041
	.byte	20,3,35,140,2,14
	.byte	'TRAPDIS1',0
	.word	58349
	.byte	4,3,35,160,2,14
	.byte	'TRAPSTAT',0
	.word	58480
	.byte	4,3,35,164,2,14
	.byte	'TRAPSET',0
	.word	58415
	.byte	4,3,35,168,2,14
	.byte	'TRAPCLR',0
	.word	58218
	.byte	4,3,35,172,2,14
	.byte	'TRAPDIS0',0
	.word	58283
	.byte	4,3,35,176,2,14
	.byte	'LCLCON0',0
	.word	55044
	.byte	4,3,35,180,2,14
	.byte	'LCLCON1',0
	.word	55109
	.byte	4,3,35,184,2,14
	.byte	'LCLTEST',0
	.word	55174
	.byte	4,3,35,188,2,14
	.byte	'CHIPID',0
	.word	53506
	.byte	4,3,35,192,2,14
	.byte	'MANID',0
	.word	55239
	.byte	4,3,35,196,2,14
	.byte	'reserved_148',0
	.word	3558
	.byte	4,3,35,200,2,14
	.byte	'SWAPCTRL',0
	.word	57750
	.byte	4,3,35,204,2,14
	.byte	'reserved_150',0
	.word	59041
	.byte	20,3,35,208,2,14
	.byte	'LBISTCTRL0',0
	.word	54772
	.byte	4,3,35,228,2,14
	.byte	'LBISTCTRL1',0
	.word	54840
	.byte	4,3,35,232,2,14
	.byte	'LBISTCTRL2',0
	.word	54908
	.byte	4,3,35,236,2,14
	.byte	'LBISTCTRL3',0
	.word	54976
	.byte	4,3,35,240,2,14
	.byte	'reserved_174',0
	.word	59032
	.byte	16,3,35,244,2,14
	.byte	'STMEM1',0
	.word	57302
	.byte	4,3,35,132,3,14
	.byte	'STMEM2',0
	.word	57366
	.byte	4,3,35,136,3,14
	.byte	'PDISC',0
	.word	55619
	.byte	4,3,35,140,3,14
	.byte	'reserved_190',0
	.word	5378
	.byte	8,3,35,144,3,14
	.byte	'PMTRCSR0',0
	.word	56523
	.byte	4,3,35,152,3,14
	.byte	'PMTRCSR1',0
	.word	56589
	.byte	4,3,35,156,3,14
	.byte	'PMTRCSR2',0
	.word	56655
	.byte	4,3,35,160,3,14
	.byte	'PMTRCSR3',0
	.word	56721
	.byte	4,3,35,164,3,14
	.byte	'reserved_1A8',0
	.word	4749
	.byte	24,3,35,168,3,14
	.byte	'STMEM3',0
	.word	57430
	.byte	4,3,35,192,3,14
	.byte	'STMEM4',0
	.word	57494
	.byte	4,3,35,196,3,14
	.byte	'STMEM5',0
	.word	57558
	.byte	4,3,35,200,3,14
	.byte	'STMEM6',0
	.word	57622
	.byte	4,3,35,204,3,14
	.byte	'reserved_1D0',0
	.word	59032
	.byte	16,3,35,208,3,14
	.byte	'OVCENABLE',0
	.word	55552
	.byte	4,3,35,224,3,14
	.byte	'OVCCON',0
	.word	55488
	.byte	4,3,35,228,3,14
	.byte	'reserved_1E8',0
	.word	59050
	.byte	36,3,35,232,3,14
	.byte	'EIFILT',0
	.word	53891
	.byte	4,3,35,140,4,14
	.byte	'EICR',0
	.word	59059
	.byte	16,3,35,144,4,14
	.byte	'EIFR',0
	.word	53955
	.byte	4,3,35,160,4,14
	.byte	'FMR',0
	.word	54467
	.byte	4,3,35,164,4,14
	.byte	'PDRR',0
	.word	55743
	.byte	4,3,35,168,4,14
	.byte	'IGCR',0
	.word	59068
	.byte	16,3,35,172,4,14
	.byte	'reserved_23C',0
	.word	59032
	.byte	16,3,35,188,4,14
	.byte	'WDTCPU',0
	.word	59086
	.byte	72,3,35,204,4,14
	.byte	'reserved_294',0
	.word	5378
	.byte	8,3,35,148,5,14
	.byte	'EICON0',0
	.word	53701
	.byte	4,3,35,156,5,14
	.byte	'EICON1',0
	.word	53765
	.byte	4,3,35,160,5,14
	.byte	'EISR',0
	.word	54017
	.byte	4,3,35,164,5,14
	.byte	'WDTS',0
	.word	59091
	.byte	12,3,35,168,5,14
	.byte	'SEICON0',0
	.word	57046
	.byte	4,3,35,180,5,14
	.byte	'SEICON1',0
	.word	57111
	.byte	4,3,35,184,5,14
	.byte	'SEISR',0
	.word	57176
	.byte	4,3,35,188,5,14
	.byte	'reserved_2C0',0
	.word	59096
	.byte	176,2,3,35,192,5,14
	.byte	'ACCEN11',0
	.word	52594
	.byte	4,3,35,240,7,14
	.byte	'ACCEN10',0
	.word	52529
	.byte	4,3,35,244,7,14
	.byte	'ACCEN01',0
	.word	52464
	.byte	4,3,35,248,7,14
	.byte	'ACCEN00',0
	.word	52399
	.byte	4,3,35,252,7,0,10
	.word	59107
	.byte	33
	.byte	'Ifx_SCU',0,6,166,18,3
	.word	61228
	.byte	11
	.byte	'_Ifx_CPU_A_Bits',0,22,68,16,4,12
	.byte	'ADDR',0,4
	.word	924
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_A_Bits',0,22,71,3
	.word	61250
	.byte	11
	.byte	'_Ifx_CPU_BIV_Bits',0,22,74,16,4,12
	.byte	'VSS',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'BIV',0,4
	.word	924
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_CPU_BIV_Bits',0,22,78,3
	.word	61311
	.byte	11
	.byte	'_Ifx_CPU_BLK_OMASK_Bits',0,22,81,16,4,12
	.byte	'reserved_0',0,4
	.word	924
	.byte	5,27,2,35,0,12
	.byte	'OMASK',0,4
	.word	924
	.byte	12,15,2,35,0,12
	.byte	'ONE',0,4
	.word	924
	.byte	11,4,2,35,0,12
	.byte	'reserved_28',0,4
	.word	924
	.byte	4,0,2,35,0,0,33
	.byte	'Ifx_CPU_BLK_OMASK_Bits',0,22,87,3
	.word	61390
	.byte	11
	.byte	'_Ifx_CPU_BLK_OTAR_Bits',0,22,90,16,4,12
	.byte	'reserved_0',0,4
	.word	924
	.byte	5,27,2,35,0,12
	.byte	'TBASE',0,4
	.word	924
	.byte	23,4,2,35,0,12
	.byte	'reserved_28',0,4
	.word	924
	.byte	4,0,2,35,0,0,33
	.byte	'Ifx_CPU_BLK_OTAR_Bits',0,22,95,3
	.word	61528
	.byte	11
	.byte	'_Ifx_CPU_BLK_RABR_Bits',0,22,98,16,4,12
	.byte	'reserved_0',0,4
	.word	924
	.byte	5,27,2,35,0,12
	.byte	'OBASE',0,4
	.word	924
	.byte	17,10,2,35,0,12
	.byte	'reserved_22',0,4
	.word	924
	.byte	2,8,2,35,0,12
	.byte	'OMEM',0,4
	.word	924
	.byte	4,4,2,35,0,12
	.byte	'reserved_28',0,4
	.word	924
	.byte	3,1,2,35,0,12
	.byte	'OVEN',0,4
	.word	924
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_BLK_RABR_Bits',0,22,106,3
	.word	61649
	.byte	11
	.byte	'_Ifx_CPU_BTV_Bits',0,22,109,16,4,12
	.byte	'reserved_0',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'BTV',0,4
	.word	924
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_CPU_BTV_Bits',0,22,113,3
	.word	61825
	.byte	11
	.byte	'_Ifx_CPU_CCNT_Bits',0,22,116,16,4,12
	.byte	'COUNTVALUE',0,4
	.word	924
	.byte	31,1,2,35,0,12
	.byte	'SOVF',0,4
	.word	924
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_CCNT_Bits',0,22,120,3
	.word	61911
	.byte	11
	.byte	'_Ifx_CPU_CCTRL_Bits',0,22,123,16,4,12
	.byte	'CM',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'CE',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'M1',0,4
	.word	924
	.byte	3,27,2,35,0,12
	.byte	'M2',0,4
	.word	924
	.byte	3,24,2,35,0,12
	.byte	'M3',0,4
	.word	924
	.byte	3,21,2,35,0,12
	.byte	'reserved_11',0,4
	.word	924
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_CPU_CCTRL_Bits',0,22,131,1,3
	.word	62000
	.byte	11
	.byte	'_Ifx_CPU_COMPAT_Bits',0,22,134,1,16,4,12
	.byte	'reserved_0',0,4
	.word	924
	.byte	3,29,2,35,0,12
	.byte	'RM',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'SP',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'reserved_5',0,4
	.word	924
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_CPU_COMPAT_Bits',0,22,140,1,3
	.word	62147
	.byte	11
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,22,143,1,16,4,12
	.byte	'CORE_ID',0,4
	.word	924
	.byte	3,29,2,35,0,12
	.byte	'reserved_3',0,4
	.word	924
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_CPU_CORE_ID_Bits',0,22,147,1,3
	.word	62276
	.byte	11
	.byte	'_Ifx_CPU_CPR_L_Bits',0,22,150,1,16,4,12
	.byte	'reserved_0',0,4
	.word	924
	.byte	5,27,2,35,0,12
	.byte	'LOWBND',0,4
	.word	924
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_CPU_CPR_L_Bits',0,22,154,1,3
	.word	62376
	.byte	11
	.byte	'_Ifx_CPU_CPR_U_Bits',0,22,157,1,16,4,12
	.byte	'reserved_0',0,4
	.word	924
	.byte	5,27,2,35,0,12
	.byte	'UPPBND',0,4
	.word	924
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_CPU_CPR_U_Bits',0,22,161,1,3
	.word	62471
	.byte	11
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,22,164,1,16,4,12
	.byte	'MOD_REV',0,4
	.word	924
	.byte	8,24,2,35,0,12
	.byte	'MOD_32B',0,4
	.word	924
	.byte	8,16,2,35,0,12
	.byte	'MOD',0,4
	.word	924
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_CPU_CPU_ID_Bits',0,22,169,1,3
	.word	62566
	.byte	11
	.byte	'_Ifx_CPU_CPXE_Bits',0,22,172,1,16,4,12
	.byte	'XE_N',0,4
	.word	924
	.byte	10,22,2,35,0,12
	.byte	'reserved_10',0,4
	.word	924
	.byte	22,0,2,35,0,0,33
	.byte	'Ifx_CPU_CPXE_Bits',0,22,176,1,3
	.word	62676
	.byte	11
	.byte	'_Ifx_CPU_CREVT_Bits',0,22,179,1,16,4,12
	.byte	'EVTA',0,4
	.word	924
	.byte	3,29,2,35,0,12
	.byte	'BBM',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'BOD',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'SUSP',0,4
	.word	924
	.byte	1,26,2,35,0,12
	.byte	'CNT',0,4
	.word	924
	.byte	2,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	924
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_CPU_CREVT_Bits',0,22,187,1,3
	.word	62768
	.byte	11
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,22,190,1,16,4,12
	.byte	'CID',0,4
	.word	924
	.byte	3,29,2,35,0,12
	.byte	'reserved_3',0,4
	.word	924
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_CPU_CUS_ID_Bits',0,22,194,1,3
	.word	62922
	.byte	11
	.byte	'_Ifx_CPU_D_Bits',0,22,197,1,16,4,12
	.byte	'DATA',0,4
	.word	924
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_D_Bits',0,22,200,1,3
	.word	63016
	.byte	11
	.byte	'_Ifx_CPU_DATR_Bits',0,22,203,1,16,4,12
	.byte	'reserved_0',0,4
	.word	924
	.byte	3,29,2,35,0,12
	.byte	'SBE',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'reserved_4',0,4
	.word	924
	.byte	5,23,2,35,0,12
	.byte	'CWE',0,4
	.word	924
	.byte	1,22,2,35,0,12
	.byte	'CFE',0,4
	.word	924
	.byte	1,21,2,35,0,12
	.byte	'reserved_11',0,4
	.word	924
	.byte	3,18,2,35,0,12
	.byte	'SOE',0,4
	.word	924
	.byte	1,17,2,35,0,12
	.byte	'reserved_15',0,4
	.word	924
	.byte	1,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	924
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_CPU_DATR_Bits',0,22,214,1,3
	.word	63079
	.byte	11
	.byte	'_Ifx_CPU_DBGSR_Bits',0,22,217,1,16,4,12
	.byte	'DE',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'HALT',0,4
	.word	924
	.byte	2,29,2,35,0,12
	.byte	'SIH',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'SUSP',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'reserved_5',0,4
	.word	924
	.byte	1,26,2,35,0,12
	.byte	'PREVSUSP',0,4
	.word	924
	.byte	1,25,2,35,0,12
	.byte	'PEVT',0,4
	.word	924
	.byte	1,24,2,35,0,12
	.byte	'EVTSRC',0,4
	.word	924
	.byte	5,19,2,35,0,12
	.byte	'reserved_13',0,4
	.word	924
	.byte	19,0,2,35,0,0,33
	.byte	'Ifx_CPU_DBGSR_Bits',0,22,228,1,3
	.word	63305
	.byte	11
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,22,231,1,16,4,12
	.byte	'DTA',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'reserved_1',0,4
	.word	924
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_CPU_DBGTCR_Bits',0,22,235,1,3
	.word	63520
	.byte	11
	.byte	'_Ifx_CPU_DCON0_Bits',0,22,238,1,16,4,12
	.byte	'reserved_0',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'DCBYP',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	924
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_CPU_DCON0_Bits',0,22,243,1,3
	.word	63614
	.byte	11
	.byte	'_Ifx_CPU_DCON2_Bits',0,22,246,1,16,4,12
	.byte	'DCACHE_SZE',0,4
	.word	924
	.byte	16,16,2,35,0,12
	.byte	'DSCRATCH_SZE',0,4
	.word	924
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_CPU_DCON2_Bits',0,22,250,1,3
	.word	63730
	.byte	11
	.byte	'_Ifx_CPU_DCX_Bits',0,22,253,1,16,4,12
	.byte	'reserved_0',0,4
	.word	924
	.byte	6,26,2,35,0,12
	.byte	'DCXVALUE',0,4
	.word	924
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_CPU_DCX_Bits',0,22,129,2,3
	.word	63831
	.byte	11
	.byte	'_Ifx_CPU_DEADD_Bits',0,22,132,2,16,4,12
	.byte	'ERROR_ADDRESS',0,4
	.word	924
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_DEADD_Bits',0,22,135,2,3
	.word	63924
	.byte	11
	.byte	'_Ifx_CPU_DIEAR_Bits',0,22,138,2,16,4,12
	.byte	'TA',0,4
	.word	924
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_DIEAR_Bits',0,22,141,2,3
	.word	64004
	.byte	11
	.byte	'_Ifx_CPU_DIETR_Bits',0,22,144,2,16,4,12
	.byte	'IED',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'IE_T',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'IE_C',0,4
	.word	924
	.byte	1,29,2,35,0,12
	.byte	'IE_S',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'IE_BI',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'E_INFO',0,4
	.word	924
	.byte	6,21,2,35,0,12
	.byte	'IE_UNC',0,4
	.word	924
	.byte	1,20,2,35,0,12
	.byte	'IE_SP',0,4
	.word	924
	.byte	1,19,2,35,0,12
	.byte	'IE_BS',0,4
	.word	924
	.byte	1,18,2,35,0,12
	.byte	'IE_DLMU',0,4
	.word	924
	.byte	1,17,2,35,0,12
	.byte	'IE_LPB',0,4
	.word	924
	.byte	1,16,2,35,0,12
	.byte	'IE_MTMV',0,4
	.word	924
	.byte	1,15,2,35,0,12
	.byte	'reserved_17',0,4
	.word	924
	.byte	15,0,2,35,0,0,33
	.byte	'Ifx_CPU_DIETR_Bits',0,22,159,2,3
	.word	64073
	.byte	11
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,22,162,2,16,4,12
	.byte	'EN0',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'EN1',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'EN2',0,4
	.word	924
	.byte	1,29,2,35,0,12
	.byte	'EN3',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'EN4',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'EN5',0,4
	.word	924
	.byte	1,26,2,35,0,12
	.byte	'EN6',0,4
	.word	924
	.byte	1,25,2,35,0,12
	.byte	'EN7',0,4
	.word	924
	.byte	1,24,2,35,0,12
	.byte	'EN8',0,4
	.word	924
	.byte	1,23,2,35,0,12
	.byte	'EN9',0,4
	.word	924
	.byte	1,22,2,35,0,12
	.byte	'EN10',0,4
	.word	924
	.byte	1,21,2,35,0,12
	.byte	'EN11',0,4
	.word	924
	.byte	1,20,2,35,0,12
	.byte	'EN12',0,4
	.word	924
	.byte	1,19,2,35,0,12
	.byte	'EN13',0,4
	.word	924
	.byte	1,18,2,35,0,12
	.byte	'EN14',0,4
	.word	924
	.byte	1,17,2,35,0,12
	.byte	'EN15',0,4
	.word	924
	.byte	1,16,2,35,0,12
	.byte	'EN16',0,4
	.word	924
	.byte	1,15,2,35,0,12
	.byte	'EN17',0,4
	.word	924
	.byte	1,14,2,35,0,12
	.byte	'EN18',0,4
	.word	924
	.byte	1,13,2,35,0,12
	.byte	'EN19',0,4
	.word	924
	.byte	1,12,2,35,0,12
	.byte	'EN20',0,4
	.word	924
	.byte	1,11,2,35,0,12
	.byte	'EN21',0,4
	.word	924
	.byte	1,10,2,35,0,12
	.byte	'EN22',0,4
	.word	924
	.byte	1,9,2,35,0,12
	.byte	'EN23',0,4
	.word	924
	.byte	1,8,2,35,0,12
	.byte	'EN24',0,4
	.word	924
	.byte	1,7,2,35,0,12
	.byte	'EN25',0,4
	.word	924
	.byte	1,6,2,35,0,12
	.byte	'EN26',0,4
	.word	924
	.byte	1,5,2,35,0,12
	.byte	'EN27',0,4
	.word	924
	.byte	1,4,2,35,0,12
	.byte	'EN28',0,4
	.word	924
	.byte	1,3,2,35,0,12
	.byte	'EN29',0,4
	.word	924
	.byte	1,2,2,35,0,12
	.byte	'EN30',0,4
	.word	924
	.byte	1,1,2,35,0,12
	.byte	'EN31',0,4
	.word	924
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,22,196,2,3
	.word	64357
	.byte	11
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,22,199,2,16,4,12
	.byte	'EN0',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'EN1',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'EN2',0,4
	.word	924
	.byte	1,29,2,35,0,12
	.byte	'EN3',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'EN4',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'EN5',0,4
	.word	924
	.byte	1,26,2,35,0,12
	.byte	'EN6',0,4
	.word	924
	.byte	1,25,2,35,0,12
	.byte	'EN7',0,4
	.word	924
	.byte	1,24,2,35,0,12
	.byte	'EN8',0,4
	.word	924
	.byte	1,23,2,35,0,12
	.byte	'EN9',0,4
	.word	924
	.byte	1,22,2,35,0,12
	.byte	'EN10',0,4
	.word	924
	.byte	1,21,2,35,0,12
	.byte	'EN11',0,4
	.word	924
	.byte	1,20,2,35,0,12
	.byte	'EN12',0,4
	.word	924
	.byte	1,19,2,35,0,12
	.byte	'EN13',0,4
	.word	924
	.byte	1,18,2,35,0,12
	.byte	'EN14',0,4
	.word	924
	.byte	1,17,2,35,0,12
	.byte	'EN15',0,4
	.word	924
	.byte	1,16,2,35,0,12
	.byte	'EN16',0,4
	.word	924
	.byte	1,15,2,35,0,12
	.byte	'EN17',0,4
	.word	924
	.byte	1,14,2,35,0,12
	.byte	'EN18',0,4
	.word	924
	.byte	1,13,2,35,0,12
	.byte	'EN19',0,4
	.word	924
	.byte	1,12,2,35,0,12
	.byte	'EN20',0,4
	.word	924
	.byte	1,11,2,35,0,12
	.byte	'EN21',0,4
	.word	924
	.byte	1,10,2,35,0,12
	.byte	'EN22',0,4
	.word	924
	.byte	1,9,2,35,0,12
	.byte	'EN23',0,4
	.word	924
	.byte	1,8,2,35,0,12
	.byte	'EN24',0,4
	.word	924
	.byte	1,7,2,35,0,12
	.byte	'EN25',0,4
	.word	924
	.byte	1,6,2,35,0,12
	.byte	'EN26',0,4
	.word	924
	.byte	1,5,2,35,0,12
	.byte	'EN27',0,4
	.word	924
	.byte	1,4,2,35,0,12
	.byte	'EN28',0,4
	.word	924
	.byte	1,3,2,35,0,12
	.byte	'EN29',0,4
	.word	924
	.byte	1,2,2,35,0,12
	.byte	'EN30',0,4
	.word	924
	.byte	1,1,2,35,0,12
	.byte	'EN31',0,4
	.word	924
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,22,233,2,3
	.word	64948
	.byte	11
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,22,236,2,16,4,12
	.byte	'EN32',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'EN33',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'EN34',0,4
	.word	924
	.byte	1,29,2,35,0,12
	.byte	'EN35',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'EN36',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'EN37',0,4
	.word	924
	.byte	1,26,2,35,0,12
	.byte	'EN38',0,4
	.word	924
	.byte	1,25,2,35,0,12
	.byte	'EN39',0,4
	.word	924
	.byte	1,24,2,35,0,12
	.byte	'EN40',0,4
	.word	924
	.byte	1,23,2,35,0,12
	.byte	'EN41',0,4
	.word	924
	.byte	1,22,2,35,0,12
	.byte	'EN42',0,4
	.word	924
	.byte	1,21,2,35,0,12
	.byte	'EN43',0,4
	.word	924
	.byte	1,20,2,35,0,12
	.byte	'EN44',0,4
	.word	924
	.byte	1,19,2,35,0,12
	.byte	'EN45',0,4
	.word	924
	.byte	1,18,2,35,0,12
	.byte	'EN46',0,4
	.word	924
	.byte	1,17,2,35,0,12
	.byte	'EN47',0,4
	.word	924
	.byte	1,16,2,35,0,12
	.byte	'EN48',0,4
	.word	924
	.byte	1,15,2,35,0,12
	.byte	'EN49',0,4
	.word	924
	.byte	1,14,2,35,0,12
	.byte	'EN50',0,4
	.word	924
	.byte	1,13,2,35,0,12
	.byte	'EN51',0,4
	.word	924
	.byte	1,12,2,35,0,12
	.byte	'EN52',0,4
	.word	924
	.byte	1,11,2,35,0,12
	.byte	'EN53',0,4
	.word	924
	.byte	1,10,2,35,0,12
	.byte	'EN54',0,4
	.word	924
	.byte	1,9,2,35,0,12
	.byte	'EN55',0,4
	.word	924
	.byte	1,8,2,35,0,12
	.byte	'EN56',0,4
	.word	924
	.byte	1,7,2,35,0,12
	.byte	'EN57',0,4
	.word	924
	.byte	1,6,2,35,0,12
	.byte	'EN58',0,4
	.word	924
	.byte	1,5,2,35,0,12
	.byte	'EN59',0,4
	.word	924
	.byte	1,4,2,35,0,12
	.byte	'EN60',0,4
	.word	924
	.byte	1,3,2,35,0,12
	.byte	'EN61',0,4
	.word	924
	.byte	1,2,2,35,0,12
	.byte	'EN62',0,4
	.word	924
	.byte	1,1,2,35,0,12
	.byte	'EN63',0,4
	.word	924
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,22,142,3,3
	.word	65539
	.byte	11
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,22,145,3,16,4,12
	.byte	'EN32',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'EN33',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'EN34',0,4
	.word	924
	.byte	1,29,2,35,0,12
	.byte	'EN35',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'EN36',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'EN37',0,4
	.word	924
	.byte	1,26,2,35,0,12
	.byte	'EN38',0,4
	.word	924
	.byte	1,25,2,35,0,12
	.byte	'EN39',0,4
	.word	924
	.byte	1,24,2,35,0,12
	.byte	'EN40',0,4
	.word	924
	.byte	1,23,2,35,0,12
	.byte	'EN41',0,4
	.word	924
	.byte	1,22,2,35,0,12
	.byte	'EN42',0,4
	.word	924
	.byte	1,21,2,35,0,12
	.byte	'EN43',0,4
	.word	924
	.byte	1,20,2,35,0,12
	.byte	'EN44',0,4
	.word	924
	.byte	1,19,2,35,0,12
	.byte	'EN45',0,4
	.word	924
	.byte	1,18,2,35,0,12
	.byte	'EN46',0,4
	.word	924
	.byte	1,17,2,35,0,12
	.byte	'EN47',0,4
	.word	924
	.byte	1,16,2,35,0,12
	.byte	'EN48',0,4
	.word	924
	.byte	1,15,2,35,0,12
	.byte	'EN49',0,4
	.word	924
	.byte	1,14,2,35,0,12
	.byte	'EN50',0,4
	.word	924
	.byte	1,13,2,35,0,12
	.byte	'EN51',0,4
	.word	924
	.byte	1,12,2,35,0,12
	.byte	'EN52',0,4
	.word	924
	.byte	1,11,2,35,0,12
	.byte	'EN53',0,4
	.word	924
	.byte	1,10,2,35,0,12
	.byte	'EN54',0,4
	.word	924
	.byte	1,9,2,35,0,12
	.byte	'EN55',0,4
	.word	924
	.byte	1,8,2,35,0,12
	.byte	'EN56',0,4
	.word	924
	.byte	1,7,2,35,0,12
	.byte	'EN57',0,4
	.word	924
	.byte	1,6,2,35,0,12
	.byte	'EN58',0,4
	.word	924
	.byte	1,5,2,35,0,12
	.byte	'EN59',0,4
	.word	924
	.byte	1,4,2,35,0,12
	.byte	'EN60',0,4
	.word	924
	.byte	1,3,2,35,0,12
	.byte	'EN61',0,4
	.word	924
	.byte	1,2,2,35,0,12
	.byte	'EN62',0,4
	.word	924
	.byte	1,1,2,35,0,12
	.byte	'EN63',0,4
	.word	924
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,22,179,3,3
	.word	66140
	.byte	11
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,22,182,3,16,4,12
	.byte	'reserved_0',0,4
	.word	924
	.byte	5,27,2,35,0,12
	.byte	'ADDR',0,4
	.word	924
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,22,186,3,3
	.word	66741
	.byte	11
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,22,189,3,16,4,12
	.byte	'reserved_0',0,4
	.word	924
	.byte	5,27,2,35,0,12
	.byte	'ADDR',0,4
	.word	924
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,22,193,3,3
	.word	66856
	.byte	11
	.byte	'_Ifx_CPU_DMS_Bits',0,22,196,3,16,4,12
	.byte	'reserved_0',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'DMSVALUE',0,4
	.word	924
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_CPU_DMS_Bits',0,22,200,3,3
	.word	66971
	.byte	11
	.byte	'_Ifx_CPU_DPRE_Bits',0,22,203,3,16,4,12
	.byte	'RE_N',0,4
	.word	924
	.byte	18,14,2,35,0,12
	.byte	'reserved_18',0,4
	.word	924
	.byte	14,0,2,35,0,0,33
	.byte	'Ifx_CPU_DPRE_Bits',0,22,207,3,3
	.word	67064
	.byte	11
	.byte	'_Ifx_CPU_DPR_L_Bits',0,22,210,3,16,4,12
	.byte	'reserved_0',0,4
	.word	924
	.byte	3,29,2,35,0,12
	.byte	'LOWBND',0,4
	.word	924
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_CPU_DPR_L_Bits',0,22,214,3,3
	.word	67156
	.byte	11
	.byte	'_Ifx_CPU_DPR_U_Bits',0,22,217,3,16,4,12
	.byte	'reserved_0',0,4
	.word	924
	.byte	3,29,2,35,0,12
	.byte	'UPPBND',0,4
	.word	924
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_CPU_DPR_U_Bits',0,22,221,3,3
	.word	67251
	.byte	11
	.byte	'_Ifx_CPU_DPWE_Bits',0,22,224,3,16,4,12
	.byte	'WE_N',0,4
	.word	924
	.byte	18,14,2,35,0,12
	.byte	'reserved_18',0,4
	.word	924
	.byte	14,0,2,35,0,0,33
	.byte	'Ifx_CPU_DPWE_Bits',0,22,228,3,3
	.word	67346
	.byte	11
	.byte	'_Ifx_CPU_DSTR_Bits',0,22,231,3,16,4,12
	.byte	'SRE',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'GAE',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'LBE',0,4
	.word	924
	.byte	1,29,2,35,0,12
	.byte	'DRE',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'reserved_4',0,4
	.word	924
	.byte	2,26,2,35,0,12
	.byte	'CRE',0,4
	.word	924
	.byte	1,25,2,35,0,12
	.byte	'reserved_7',0,4
	.word	924
	.byte	7,18,2,35,0,12
	.byte	'DTME',0,4
	.word	924
	.byte	1,17,2,35,0,12
	.byte	'LOE',0,4
	.word	924
	.byte	1,16,2,35,0,12
	.byte	'SDE',0,4
	.word	924
	.byte	1,15,2,35,0,12
	.byte	'SCE',0,4
	.word	924
	.byte	1,14,2,35,0,12
	.byte	'CAC',0,4
	.word	924
	.byte	1,13,2,35,0,12
	.byte	'MPE',0,4
	.word	924
	.byte	1,12,2,35,0,12
	.byte	'CLE',0,4
	.word	924
	.byte	1,11,2,35,0,12
	.byte	'reserved_21',0,4
	.word	924
	.byte	3,8,2,35,0,12
	.byte	'ALN',0,4
	.word	924
	.byte	1,7,2,35,0,12
	.byte	'reserved_25',0,4
	.word	924
	.byte	7,0,2,35,0,0,33
	.byte	'Ifx_CPU_DSTR_Bits',0,22,250,3,3
	.word	67438
	.byte	11
	.byte	'_Ifx_CPU_EXEVT_Bits',0,22,253,3,16,4,12
	.byte	'EVTA',0,4
	.word	924
	.byte	3,29,2,35,0,12
	.byte	'BBM',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'BOD',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'SUSP',0,4
	.word	924
	.byte	1,26,2,35,0,12
	.byte	'CNT',0,4
	.word	924
	.byte	2,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	924
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_CPU_EXEVT_Bits',0,22,133,4,3
	.word	67777
	.byte	11
	.byte	'_Ifx_CPU_FCX_Bits',0,22,136,4,16,4,12
	.byte	'FCXO',0,4
	.word	924
	.byte	16,16,2,35,0,12
	.byte	'FCXS',0,4
	.word	924
	.byte	4,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	924
	.byte	12,0,2,35,0,0,33
	.byte	'Ifx_CPU_FCX_Bits',0,22,141,4,3
	.word	67931
	.byte	11
	.byte	'_Ifx_CPU_FLASHCON0_Bits',0,22,144,4,16,4,12
	.byte	'TAG1',0,4
	.word	924
	.byte	6,26,2,35,0,12
	.byte	'reserved_6',0,4
	.word	924
	.byte	2,24,2,35,0,12
	.byte	'TAG2',0,4
	.word	924
	.byte	6,18,2,35,0,12
	.byte	'reserved_14',0,4
	.word	924
	.byte	2,16,2,35,0,12
	.byte	'TAG3',0,4
	.word	924
	.byte	6,10,2,35,0,12
	.byte	'reserved_22',0,4
	.word	924
	.byte	2,8,2,35,0,12
	.byte	'TAG4',0,4
	.word	924
	.byte	6,2,2,35,0,12
	.byte	'reserved_30',0,4
	.word	924
	.byte	2,0,2,35,0,0,33
	.byte	'Ifx_CPU_FLASHCON0_Bits',0,22,154,4,3
	.word	68037
	.byte	11
	.byte	'_Ifx_CPU_FLASHCON1_Bits',0,22,157,4,16,4,12
	.byte	'STALL',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'reserved_1',0,4
	.word	924
	.byte	15,16,2,35,0,12
	.byte	'MASKUECC',0,4
	.word	924
	.byte	2,14,2,35,0,12
	.byte	'reserved_18',0,4
	.word	924
	.byte	6,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	924
	.byte	2,6,2,35,0,12
	.byte	'reserved_26',0,4
	.word	924
	.byte	6,0,2,35,0,0,33
	.byte	'Ifx_CPU_FLASHCON1_Bits',0,22,165,4,3
	.word	68255
	.byte	11
	.byte	'_Ifx_CPU_FLASHCON2_Bits',0,22,168,4,16,4,12
	.byte	'RECDIS',0,4
	.word	924
	.byte	2,30,2,35,0,12
	.byte	'ECCCORDIS',0,4
	.word	924
	.byte	2,28,2,35,0,12
	.byte	'reserved_4',0,4
	.word	924
	.byte	4,24,2,35,0,12
	.byte	'HMARGIN',0,4
	.word	924
	.byte	2,22,2,35,0,12
	.byte	'MSEL',0,4
	.word	924
	.byte	2,20,2,35,0,12
	.byte	'reserved_12',0,4
	.word	924
	.byte	4,16,2,35,0,12
	.byte	'ECCSCLR',0,4
	.word	924
	.byte	2,14,2,35,0,12
	.byte	'reserved_18',0,4
	.word	924
	.byte	6,8,2,35,0,12
	.byte	'SBABCLR',0,4
	.word	924
	.byte	2,6,2,35,0,12
	.byte	'DBABCLR',0,4
	.word	924
	.byte	2,4,2,35,0,12
	.byte	'MBABCLR',0,4
	.word	924
	.byte	2,2,2,35,0,12
	.byte	'ZBABCLR',0,4
	.word	924
	.byte	2,0,2,35,0,0,33
	.byte	'Ifx_CPU_FLASHCON2_Bits',0,22,182,4,3
	.word	68446
	.byte	11
	.byte	'_Ifx_CPU_FLASHCON3_Bits',0,22,185,4,16,4,12
	.byte	'ECCERRINJ',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'EDCERRINJ',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'SBABERRINJ',0,4
	.word	924
	.byte	1,29,2,35,0,12
	.byte	'DBABERRINJ',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'MBABERRINJ',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'ZBABERRINJ',0,4
	.word	924
	.byte	1,26,2,35,0,12
	.byte	'SBERERRINJ',0,4
	.word	924
	.byte	1,25,2,35,0,12
	.byte	'DBERERRINJ',0,4
	.word	924
	.byte	1,24,2,35,0,12
	.byte	'NVMCERRINJ',0,4
	.word	924
	.byte	1,23,2,35,0,12
	.byte	'FLCONERRINJ',0,4
	.word	924
	.byte	1,22,2,35,0,12
	.byte	'reserved_10',0,4
	.word	924
	.byte	22,0,2,35,0,0,33
	.byte	'Ifx_CPU_FLASHCON3_Bits',0,22,198,4,3
	.word	68746
	.byte	11
	.byte	'_Ifx_CPU_FLASHCON4_Bits',0,22,201,4,16,4,12
	.byte	'DDIS',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'reserved_1',0,4
	.word	924
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_CPU_FLASHCON4_Bits',0,22,205,4,3
	.word	69051
	.byte	11
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,22,208,4,16,4,12
	.byte	'TST',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'TCL',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	924
	.byte	6,24,2,35,0,12
	.byte	'RM',0,4
	.word	924
	.byte	2,22,2,35,0,12
	.byte	'reserved_10',0,4
	.word	924
	.byte	8,14,2,35,0,12
	.byte	'FXE',0,4
	.word	924
	.byte	1,13,2,35,0,12
	.byte	'FUE',0,4
	.word	924
	.byte	1,12,2,35,0,12
	.byte	'FZE',0,4
	.word	924
	.byte	1,11,2,35,0,12
	.byte	'FVE',0,4
	.word	924
	.byte	1,10,2,35,0,12
	.byte	'FIE',0,4
	.word	924
	.byte	1,9,2,35,0,12
	.byte	'reserved_23',0,4
	.word	924
	.byte	3,6,2,35,0,12
	.byte	'FX',0,4
	.word	924
	.byte	1,5,2,35,0,12
	.byte	'FU',0,4
	.word	924
	.byte	1,4,2,35,0,12
	.byte	'FZ',0,4
	.word	924
	.byte	1,3,2,35,0,12
	.byte	'FV',0,4
	.word	924
	.byte	1,2,2,35,0,12
	.byte	'FI',0,4
	.word	924
	.byte	1,1,2,35,0,12
	.byte	'reserved_31',0,4
	.word	924
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,22,227,4,3
	.word	69152
	.byte	11
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,22,230,4,16,4,12
	.byte	'OPC',0,4
	.word	924
	.byte	8,24,2,35,0,12
	.byte	'FMT',0,4
	.word	924
	.byte	1,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	924
	.byte	7,16,2,35,0,12
	.byte	'DREG',0,4
	.word	924
	.byte	4,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	924
	.byte	12,0,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,22,237,4,3
	.word	69501
	.byte	11
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,22,240,4,16,4,12
	.byte	'PC',0,4
	.word	924
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,22,243,4,3
	.word	69661
	.byte	11
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,22,246,4,16,4,12
	.byte	'SRC1',0,4
	.word	924
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,22,249,4,3
	.word	69742
	.byte	11
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,22,252,4,16,4,12
	.byte	'SRC2',0,4
	.word	924
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,22,255,4,3
	.word	69829
	.byte	11
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,22,130,5,16,4,12
	.byte	'SRC3',0,4
	.word	924
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,22,133,5,3
	.word	69916
	.byte	11
	.byte	'_Ifx_CPU_ICNT_Bits',0,22,136,5,16,4,12
	.byte	'COUNTVALUE',0,4
	.word	924
	.byte	31,1,2,35,0,12
	.byte	'SOVF',0,4
	.word	924
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_ICNT_Bits',0,22,140,5,3
	.word	70003
	.byte	11
	.byte	'_Ifx_CPU_ICR_Bits',0,22,143,5,16,4,12
	.byte	'CCPN',0,4
	.word	924
	.byte	8,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	924
	.byte	7,17,2,35,0,12
	.byte	'IE',0,4
	.word	924
	.byte	1,16,2,35,0,12
	.byte	'PIPN',0,4
	.word	924
	.byte	8,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	924
	.byte	8,0,2,35,0,0,33
	.byte	'Ifx_CPU_ICR_Bits',0,22,150,5,3
	.word	70094
	.byte	11
	.byte	'_Ifx_CPU_ISP_Bits',0,22,153,5,16,4,12
	.byte	'ISP',0,4
	.word	924
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_ISP_Bits',0,22,156,5,3
	.word	70236
	.byte	11
	.byte	'_Ifx_CPU_KRST0_Bits',0,22,159,5,16,4,12
	.byte	'RST',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'RSTSTAT',0,4
	.word	924
	.byte	2,29,2,35,0,12
	.byte	'reserved_3',0,4
	.word	924
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_CPU_KRST0_Bits',0,22,164,5,3
	.word	70302
	.byte	11
	.byte	'_Ifx_CPU_KRST1_Bits',0,22,167,5,16,4,12
	.byte	'RST',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'reserved_1',0,4
	.word	924
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_CPU_KRST1_Bits',0,22,171,5,3
	.word	70413
	.byte	11
	.byte	'_Ifx_CPU_KRSTCLR_Bits',0,22,174,5,16,4,12
	.byte	'CLR',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'reserved_1',0,4
	.word	924
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_CPU_KRSTCLR_Bits',0,22,178,5,3
	.word	70505
	.byte	11
	.byte	'_Ifx_CPU_LCX_Bits',0,22,181,5,16,4,12
	.byte	'LCXO',0,4
	.word	924
	.byte	16,16,2,35,0,12
	.byte	'LCXS',0,4
	.word	924
	.byte	4,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	924
	.byte	12,0,2,35,0,0,33
	.byte	'Ifx_CPU_LCX_Bits',0,22,186,5,3
	.word	70601
	.byte	11
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,22,189,5,16,4,12
	.byte	'EN0',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'EN1',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'EN2',0,4
	.word	924
	.byte	1,29,2,35,0,12
	.byte	'EN3',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'EN4',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'EN5',0,4
	.word	924
	.byte	1,26,2,35,0,12
	.byte	'EN6',0,4
	.word	924
	.byte	1,25,2,35,0,12
	.byte	'EN7',0,4
	.word	924
	.byte	1,24,2,35,0,12
	.byte	'EN8',0,4
	.word	924
	.byte	1,23,2,35,0,12
	.byte	'EN9',0,4
	.word	924
	.byte	1,22,2,35,0,12
	.byte	'EN10',0,4
	.word	924
	.byte	1,21,2,35,0,12
	.byte	'EN11',0,4
	.word	924
	.byte	1,20,2,35,0,12
	.byte	'EN12',0,4
	.word	924
	.byte	1,19,2,35,0,12
	.byte	'EN13',0,4
	.word	924
	.byte	1,18,2,35,0,12
	.byte	'EN14',0,4
	.word	924
	.byte	1,17,2,35,0,12
	.byte	'EN15',0,4
	.word	924
	.byte	1,16,2,35,0,12
	.byte	'EN16',0,4
	.word	924
	.byte	1,15,2,35,0,12
	.byte	'EN17',0,4
	.word	924
	.byte	1,14,2,35,0,12
	.byte	'EN18',0,4
	.word	924
	.byte	1,13,2,35,0,12
	.byte	'EN19',0,4
	.word	924
	.byte	1,12,2,35,0,12
	.byte	'EN20',0,4
	.word	924
	.byte	1,11,2,35,0,12
	.byte	'EN21',0,4
	.word	924
	.byte	1,10,2,35,0,12
	.byte	'EN22',0,4
	.word	924
	.byte	1,9,2,35,0,12
	.byte	'EN23',0,4
	.word	924
	.byte	1,8,2,35,0,12
	.byte	'EN24',0,4
	.word	924
	.byte	1,7,2,35,0,12
	.byte	'EN25',0,4
	.word	924
	.byte	1,6,2,35,0,12
	.byte	'EN26',0,4
	.word	924
	.byte	1,5,2,35,0,12
	.byte	'EN27',0,4
	.word	924
	.byte	1,4,2,35,0,12
	.byte	'EN28',0,4
	.word	924
	.byte	1,3,2,35,0,12
	.byte	'EN29',0,4
	.word	924
	.byte	1,2,2,35,0,12
	.byte	'EN30',0,4
	.word	924
	.byte	1,1,2,35,0,12
	.byte	'EN31',0,4
	.word	924
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,22,223,5,3
	.word	70707
	.byte	11
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,22,226,5,16,4,12
	.byte	'EN32',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'EN33',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'EN34',0,4
	.word	924
	.byte	1,29,2,35,0,12
	.byte	'EN35',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'EN36',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'EN37',0,4
	.word	924
	.byte	1,26,2,35,0,12
	.byte	'EN38',0,4
	.word	924
	.byte	1,25,2,35,0,12
	.byte	'EN39',0,4
	.word	924
	.byte	1,24,2,35,0,12
	.byte	'EN40',0,4
	.word	924
	.byte	1,23,2,35,0,12
	.byte	'EN41',0,4
	.word	924
	.byte	1,22,2,35,0,12
	.byte	'EN42',0,4
	.word	924
	.byte	1,21,2,35,0,12
	.byte	'EN43',0,4
	.word	924
	.byte	1,20,2,35,0,12
	.byte	'EN44',0,4
	.word	924
	.byte	1,19,2,35,0,12
	.byte	'EN45',0,4
	.word	924
	.byte	1,18,2,35,0,12
	.byte	'EN46',0,4
	.word	924
	.byte	1,17,2,35,0,12
	.byte	'EN47',0,4
	.word	924
	.byte	1,16,2,35,0,12
	.byte	'EN48',0,4
	.word	924
	.byte	1,15,2,35,0,12
	.byte	'EN49',0,4
	.word	924
	.byte	1,14,2,35,0,12
	.byte	'EN50',0,4
	.word	924
	.byte	1,13,2,35,0,12
	.byte	'EN51',0,4
	.word	924
	.byte	1,12,2,35,0,12
	.byte	'EN52',0,4
	.word	924
	.byte	1,11,2,35,0,12
	.byte	'EN53',0,4
	.word	924
	.byte	1,10,2,35,0,12
	.byte	'EN54',0,4
	.word	924
	.byte	1,9,2,35,0,12
	.byte	'EN55',0,4
	.word	924
	.byte	1,8,2,35,0,12
	.byte	'EN56',0,4
	.word	924
	.byte	1,7,2,35,0,12
	.byte	'EN57',0,4
	.word	924
	.byte	1,6,2,35,0,12
	.byte	'EN58',0,4
	.word	924
	.byte	1,5,2,35,0,12
	.byte	'EN59',0,4
	.word	924
	.byte	1,4,2,35,0,12
	.byte	'EN60',0,4
	.word	924
	.byte	1,3,2,35,0,12
	.byte	'EN61',0,4
	.word	924
	.byte	1,2,2,35,0,12
	.byte	'EN62',0,4
	.word	924
	.byte	1,1,2,35,0,12
	.byte	'EN63',0,4
	.word	924
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,22,132,6,3
	.word	71290
	.byte	11
	.byte	'_Ifx_CPU_M1CNT_Bits',0,22,135,6,16,4,12
	.byte	'COUNTVALUE',0,4
	.word	924
	.byte	31,1,2,35,0,12
	.byte	'SOVF',0,4
	.word	924
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_M1CNT_Bits',0,22,139,6,3
	.word	71883
	.byte	11
	.byte	'_Ifx_CPU_M2CNT_Bits',0,22,142,6,16,4,12
	.byte	'COUNTVALUE',0,4
	.word	924
	.byte	31,1,2,35,0,12
	.byte	'SOVF',0,4
	.word	924
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_M2CNT_Bits',0,22,146,6,3
	.word	71976
	.byte	11
	.byte	'_Ifx_CPU_M3CNT_Bits',0,22,149,6,16,4,12
	.byte	'COUNTVALUE',0,4
	.word	924
	.byte	31,1,2,35,0,12
	.byte	'SOVF',0,4
	.word	924
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_M3CNT_Bits',0,22,153,6,3
	.word	72069
	.byte	11
	.byte	'_Ifx_CPU_OSEL_Bits',0,22,156,6,16,4,12
	.byte	'SHOVEN_X',0,4
	.word	924
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_OSEL_Bits',0,22,159,6,3
	.word	72162
	.byte	11
	.byte	'_Ifx_CPU_PC_Bits',0,22,162,6,16,4,12
	.byte	'reserved_0',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'PC',0,4
	.word	924
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_CPU_PC_Bits',0,22,166,6,3
	.word	72235
	.byte	11
	.byte	'_Ifx_CPU_PCON0_Bits',0,22,169,6,16,4,12
	.byte	'reserved_0',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'PCBYP',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	924
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_CPU_PCON0_Bits',0,22,174,6,3
	.word	72320
	.byte	11
	.byte	'_Ifx_CPU_PCON1_Bits',0,22,177,6,16,4,12
	.byte	'PCINV',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'PBINV',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	924
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_CPU_PCON1_Bits',0,22,182,6,3
	.word	72436
	.byte	11
	.byte	'_Ifx_CPU_PCON2_Bits',0,22,185,6,16,4,12
	.byte	'PCACHE_SZE',0,4
	.word	924
	.byte	16,16,2,35,0,12
	.byte	'PSCRATCH_SZE',0,4
	.word	924
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_CPU_PCON2_Bits',0,22,189,6,3
	.word	72547
	.byte	11
	.byte	'_Ifx_CPU_PCXI_Bits',0,22,192,6,16,4,12
	.byte	'PCXO',0,4
	.word	924
	.byte	16,16,2,35,0,12
	.byte	'PCXS',0,4
	.word	924
	.byte	4,12,2,35,0,12
	.byte	'UL',0,4
	.word	924
	.byte	1,11,2,35,0,12
	.byte	'PIE',0,4
	.word	924
	.byte	1,10,2,35,0,12
	.byte	'PCPN',0,4
	.word	924
	.byte	8,2,2,35,0,12
	.byte	'reserved_30',0,4
	.word	924
	.byte	2,0,2,35,0,0,33
	.byte	'Ifx_CPU_PCXI_Bits',0,22,200,6,3
	.word	72648
	.byte	11
	.byte	'_Ifx_CPU_PIEAR_Bits',0,22,203,6,16,4,12
	.byte	'TA',0,4
	.word	924
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_PIEAR_Bits',0,22,206,6,3
	.word	72801
	.byte	11
	.byte	'_Ifx_CPU_PIETR_Bits',0,22,209,6,16,4,12
	.byte	'IED',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'IE_T',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'IE_C',0,4
	.word	924
	.byte	1,29,2,35,0,12
	.byte	'IE_S',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'IE_BI',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'E_INFO',0,4
	.word	924
	.byte	6,21,2,35,0,12
	.byte	'IE_UNC',0,4
	.word	924
	.byte	1,20,2,35,0,12
	.byte	'IE_SP',0,4
	.word	924
	.byte	1,19,2,35,0,12
	.byte	'IE_BS',0,4
	.word	924
	.byte	1,18,2,35,0,12
	.byte	'IE_ADDR',0,4
	.word	924
	.byte	1,17,2,35,0,12
	.byte	'IE_LPB',0,4
	.word	924
	.byte	1,16,2,35,0,12
	.byte	'IE_MTMV',0,4
	.word	924
	.byte	1,15,2,35,0,12
	.byte	'reserved_17',0,4
	.word	924
	.byte	15,0,2,35,0,0,33
	.byte	'Ifx_CPU_PIETR_Bits',0,22,224,6,3
	.word	72870
	.byte	11
	.byte	'_Ifx_CPU_PMA0_Bits',0,22,227,6,16,4,12
	.byte	'DAC',0,4
	.word	924
	.byte	16,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	924
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_CPU_PMA0_Bits',0,22,231,6,3
	.word	73154
	.byte	11
	.byte	'_Ifx_CPU_PMA1_Bits',0,22,234,6,16,4,12
	.byte	'CAC',0,4
	.word	924
	.byte	16,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	924
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_CPU_PMA1_Bits',0,22,238,6,3
	.word	73245
	.byte	11
	.byte	'_Ifx_CPU_PMA2_Bits',0,22,241,6,16,4,12
	.byte	'PSI',0,4
	.word	924
	.byte	16,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	924
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_CPU_PMA2_Bits',0,22,245,6,3
	.word	73336
	.byte	11
	.byte	'_Ifx_CPU_PSTR_Bits',0,22,248,6,16,4,12
	.byte	'FRE',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'reserved_1',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'FBE',0,4
	.word	924
	.byte	1,29,2,35,0,12
	.byte	'reserved_3',0,4
	.word	924
	.byte	9,20,2,35,0,12
	.byte	'FPE',0,4
	.word	924
	.byte	1,19,2,35,0,12
	.byte	'reserved_13',0,4
	.word	924
	.byte	1,18,2,35,0,12
	.byte	'FME',0,4
	.word	924
	.byte	1,17,2,35,0,12
	.byte	'reserved_15',0,4
	.word	924
	.byte	17,0,2,35,0,0,33
	.byte	'Ifx_CPU_PSTR_Bits',0,22,130,7,3
	.word	73427
	.byte	11
	.byte	'_Ifx_CPU_PSW_Bits',0,22,133,7,16,4,12
	.byte	'CDC',0,4
	.word	924
	.byte	7,25,2,35,0,12
	.byte	'CDE',0,4
	.word	924
	.byte	1,24,2,35,0,12
	.byte	'GW',0,4
	.word	924
	.byte	1,23,2,35,0,12
	.byte	'IS',0,4
	.word	924
	.byte	1,22,2,35,0,12
	.byte	'IO',0,4
	.word	924
	.byte	2,20,2,35,0,12
	.byte	'PRS',0,4
	.word	924
	.byte	2,18,2,35,0,12
	.byte	'S',0,4
	.word	924
	.byte	1,17,2,35,0,12
	.byte	'PRS2',0,4
	.word	924
	.byte	1,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	924
	.byte	8,8,2,35,0,12
	.byte	'USB',0,4
	.word	924
	.byte	8,0,2,35,0,0,33
	.byte	'Ifx_CPU_PSW_Bits',0,22,145,7,3
	.word	73630
	.byte	11
	.byte	'_Ifx_CPU_RGN_ACCENA_Bits',0,22,148,7,16,4,12
	.byte	'EN0',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'EN1',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'EN2',0,4
	.word	924
	.byte	1,29,2,35,0,12
	.byte	'EN3',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'EN4',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'EN5',0,4
	.word	924
	.byte	1,26,2,35,0,12
	.byte	'EN6',0,4
	.word	924
	.byte	1,25,2,35,0,12
	.byte	'EN7',0,4
	.word	924
	.byte	1,24,2,35,0,12
	.byte	'EN8',0,4
	.word	924
	.byte	1,23,2,35,0,12
	.byte	'EN9',0,4
	.word	924
	.byte	1,22,2,35,0,12
	.byte	'EN10',0,4
	.word	924
	.byte	1,21,2,35,0,12
	.byte	'EN11',0,4
	.word	924
	.byte	1,20,2,35,0,12
	.byte	'EN12',0,4
	.word	924
	.byte	1,19,2,35,0,12
	.byte	'EN13',0,4
	.word	924
	.byte	1,18,2,35,0,12
	.byte	'EN14',0,4
	.word	924
	.byte	1,17,2,35,0,12
	.byte	'EN15',0,4
	.word	924
	.byte	1,16,2,35,0,12
	.byte	'EN16',0,4
	.word	924
	.byte	1,15,2,35,0,12
	.byte	'EN17',0,4
	.word	924
	.byte	1,14,2,35,0,12
	.byte	'EN18',0,4
	.word	924
	.byte	1,13,2,35,0,12
	.byte	'EN19',0,4
	.word	924
	.byte	1,12,2,35,0,12
	.byte	'EN20',0,4
	.word	924
	.byte	1,11,2,35,0,12
	.byte	'EN21',0,4
	.word	924
	.byte	1,10,2,35,0,12
	.byte	'EN22',0,4
	.word	924
	.byte	1,9,2,35,0,12
	.byte	'EN23',0,4
	.word	924
	.byte	1,8,2,35,0,12
	.byte	'EN24',0,4
	.word	924
	.byte	1,7,2,35,0,12
	.byte	'EN25',0,4
	.word	924
	.byte	1,6,2,35,0,12
	.byte	'EN26',0,4
	.word	924
	.byte	1,5,2,35,0,12
	.byte	'EN27',0,4
	.word	924
	.byte	1,4,2,35,0,12
	.byte	'EN28',0,4
	.word	924
	.byte	1,3,2,35,0,12
	.byte	'EN29',0,4
	.word	924
	.byte	1,2,2,35,0,12
	.byte	'EN30',0,4
	.word	924
	.byte	1,1,2,35,0,12
	.byte	'EN31',0,4
	.word	924
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_RGN_ACCENA_Bits',0,22,182,7,3
	.word	73835
	.byte	11
	.byte	'_Ifx_CPU_RGN_ACCENB_Bits',0,22,185,7,16,4,12
	.byte	'EN32',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'EN33',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'EN34',0,4
	.word	924
	.byte	1,29,2,35,0,12
	.byte	'EN35',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'EN36',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'EN37',0,4
	.word	924
	.byte	1,26,2,35,0,12
	.byte	'EN38',0,4
	.word	924
	.byte	1,25,2,35,0,12
	.byte	'EN39',0,4
	.word	924
	.byte	1,24,2,35,0,12
	.byte	'EN40',0,4
	.word	924
	.byte	1,23,2,35,0,12
	.byte	'EN41',0,4
	.word	924
	.byte	1,22,2,35,0,12
	.byte	'EN42',0,4
	.word	924
	.byte	1,21,2,35,0,12
	.byte	'EN43',0,4
	.word	924
	.byte	1,20,2,35,0,12
	.byte	'EN44',0,4
	.word	924
	.byte	1,19,2,35,0,12
	.byte	'EN45',0,4
	.word	924
	.byte	1,18,2,35,0,12
	.byte	'EN46',0,4
	.word	924
	.byte	1,17,2,35,0,12
	.byte	'EN47',0,4
	.word	924
	.byte	1,16,2,35,0,12
	.byte	'EN48',0,4
	.word	924
	.byte	1,15,2,35,0,12
	.byte	'EN49',0,4
	.word	924
	.byte	1,14,2,35,0,12
	.byte	'EN50',0,4
	.word	924
	.byte	1,13,2,35,0,12
	.byte	'EN51',0,4
	.word	924
	.byte	1,12,2,35,0,12
	.byte	'EN52',0,4
	.word	924
	.byte	1,11,2,35,0,12
	.byte	'EN53',0,4
	.word	924
	.byte	1,10,2,35,0,12
	.byte	'EN54',0,4
	.word	924
	.byte	1,9,2,35,0,12
	.byte	'EN55',0,4
	.word	924
	.byte	1,8,2,35,0,12
	.byte	'EN56',0,4
	.word	924
	.byte	1,7,2,35,0,12
	.byte	'EN57',0,4
	.word	924
	.byte	1,6,2,35,0,12
	.byte	'EN58',0,4
	.word	924
	.byte	1,5,2,35,0,12
	.byte	'EN59',0,4
	.word	924
	.byte	1,4,2,35,0,12
	.byte	'EN60',0,4
	.word	924
	.byte	1,3,2,35,0,12
	.byte	'EN61',0,4
	.word	924
	.byte	1,2,2,35,0,12
	.byte	'EN62',0,4
	.word	924
	.byte	1,1,2,35,0,12
	.byte	'EN63',0,4
	.word	924
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_RGN_ACCENB_Bits',0,22,219,7,3
	.word	74402
	.byte	11
	.byte	'_Ifx_CPU_RGN_LA_Bits',0,22,222,7,16,4,12
	.byte	'reserved_0',0,4
	.word	924
	.byte	5,27,2,35,0,12
	.byte	'ADDR',0,4
	.word	924
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_CPU_RGN_LA_Bits',0,22,226,7,3
	.word	74979
	.byte	11
	.byte	'_Ifx_CPU_RGN_UA_Bits',0,22,229,7,16,4,12
	.byte	'reserved_0',0,4
	.word	924
	.byte	5,27,2,35,0,12
	.byte	'ADDR',0,4
	.word	924
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_CPU_RGN_UA_Bits',0,22,233,7,3
	.word	75074
	.byte	11
	.byte	'_Ifx_CPU_SEGEN_Bits',0,22,236,7,16,4,12
	.byte	'ADFLIP',0,4
	.word	924
	.byte	8,24,2,35,0,12
	.byte	'ADTYPE',0,4
	.word	924
	.byte	2,22,2,35,0,12
	.byte	'reserved_10',0,4
	.word	924
	.byte	21,1,2,35,0,12
	.byte	'AE',0,4
	.word	924
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_SEGEN_Bits',0,22,242,7,3
	.word	75169
	.byte	11
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,22,245,7,16,4,12
	.byte	'EN0',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'EN1',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'EN2',0,4
	.word	924
	.byte	1,29,2,35,0,12
	.byte	'EN3',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'EN4',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'EN5',0,4
	.word	924
	.byte	1,26,2,35,0,12
	.byte	'EN6',0,4
	.word	924
	.byte	1,25,2,35,0,12
	.byte	'EN7',0,4
	.word	924
	.byte	1,24,2,35,0,12
	.byte	'EN8',0,4
	.word	924
	.byte	1,23,2,35,0,12
	.byte	'EN9',0,4
	.word	924
	.byte	1,22,2,35,0,12
	.byte	'EN10',0,4
	.word	924
	.byte	1,21,2,35,0,12
	.byte	'EN11',0,4
	.word	924
	.byte	1,20,2,35,0,12
	.byte	'EN12',0,4
	.word	924
	.byte	1,19,2,35,0,12
	.byte	'EN13',0,4
	.word	924
	.byte	1,18,2,35,0,12
	.byte	'EN14',0,4
	.word	924
	.byte	1,17,2,35,0,12
	.byte	'EN15',0,4
	.word	924
	.byte	1,16,2,35,0,12
	.byte	'EN16',0,4
	.word	924
	.byte	1,15,2,35,0,12
	.byte	'EN17',0,4
	.word	924
	.byte	1,14,2,35,0,12
	.byte	'EN18',0,4
	.word	924
	.byte	1,13,2,35,0,12
	.byte	'EN19',0,4
	.word	924
	.byte	1,12,2,35,0,12
	.byte	'EN20',0,4
	.word	924
	.byte	1,11,2,35,0,12
	.byte	'EN21',0,4
	.word	924
	.byte	1,10,2,35,0,12
	.byte	'EN22',0,4
	.word	924
	.byte	1,9,2,35,0,12
	.byte	'EN23',0,4
	.word	924
	.byte	1,8,2,35,0,12
	.byte	'EN24',0,4
	.word	924
	.byte	1,7,2,35,0,12
	.byte	'EN25',0,4
	.word	924
	.byte	1,6,2,35,0,12
	.byte	'EN26',0,4
	.word	924
	.byte	1,5,2,35,0,12
	.byte	'EN27',0,4
	.word	924
	.byte	1,4,2,35,0,12
	.byte	'EN28',0,4
	.word	924
	.byte	1,3,2,35,0,12
	.byte	'EN29',0,4
	.word	924
	.byte	1,2,2,35,0,12
	.byte	'EN30',0,4
	.word	924
	.byte	1,1,2,35,0,12
	.byte	'EN31',0,4
	.word	924
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,22,151,8,3
	.word	75297
	.byte	11
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,22,154,8,16,4,12
	.byte	'EN32',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'EN33',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'EN34',0,4
	.word	924
	.byte	1,29,2,35,0,12
	.byte	'EN35',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'EN36',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'EN37',0,4
	.word	924
	.byte	1,26,2,35,0,12
	.byte	'EN38',0,4
	.word	924
	.byte	1,25,2,35,0,12
	.byte	'EN39',0,4
	.word	924
	.byte	1,24,2,35,0,12
	.byte	'EN40',0,4
	.word	924
	.byte	1,23,2,35,0,12
	.byte	'EN41',0,4
	.word	924
	.byte	1,22,2,35,0,12
	.byte	'EN42',0,4
	.word	924
	.byte	1,21,2,35,0,12
	.byte	'EN43',0,4
	.word	924
	.byte	1,20,2,35,0,12
	.byte	'EN44',0,4
	.word	924
	.byte	1,19,2,35,0,12
	.byte	'EN45',0,4
	.word	924
	.byte	1,18,2,35,0,12
	.byte	'EN46',0,4
	.word	924
	.byte	1,17,2,35,0,12
	.byte	'EN47',0,4
	.word	924
	.byte	1,16,2,35,0,12
	.byte	'EN48',0,4
	.word	924
	.byte	1,15,2,35,0,12
	.byte	'EN49',0,4
	.word	924
	.byte	1,14,2,35,0,12
	.byte	'EN50',0,4
	.word	924
	.byte	1,13,2,35,0,12
	.byte	'EN51',0,4
	.word	924
	.byte	1,12,2,35,0,12
	.byte	'EN52',0,4
	.word	924
	.byte	1,11,2,35,0,12
	.byte	'EN53',0,4
	.word	924
	.byte	1,10,2,35,0,12
	.byte	'EN54',0,4
	.word	924
	.byte	1,9,2,35,0,12
	.byte	'EN55',0,4
	.word	924
	.byte	1,8,2,35,0,12
	.byte	'EN56',0,4
	.word	924
	.byte	1,7,2,35,0,12
	.byte	'EN57',0,4
	.word	924
	.byte	1,6,2,35,0,12
	.byte	'EN58',0,4
	.word	924
	.byte	1,5,2,35,0,12
	.byte	'EN59',0,4
	.word	924
	.byte	1,4,2,35,0,12
	.byte	'EN60',0,4
	.word	924
	.byte	1,3,2,35,0,12
	.byte	'EN61',0,4
	.word	924
	.byte	1,2,2,35,0,12
	.byte	'EN62',0,4
	.word	924
	.byte	1,1,2,35,0,12
	.byte	'EN63',0,4
	.word	924
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,22,188,8,3
	.word	75880
	.byte	11
	.byte	'_Ifx_CPU_SMACON_Bits',0,22,191,8,16,4,12
	.byte	'reserved_0',0,4
	.word	924
	.byte	24,8,2,35,0,12
	.byte	'IODT',0,4
	.word	924
	.byte	1,7,2,35,0,12
	.byte	'reserved_25',0,4
	.word	924
	.byte	7,0,2,35,0,0,33
	.byte	'Ifx_CPU_SMACON_Bits',0,22,196,8,3
	.word	76473
	.byte	11
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,22,199,8,16,4,12
	.byte	'EN0',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'EN1',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'EN2',0,4
	.word	924
	.byte	1,29,2,35,0,12
	.byte	'EN3',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'EN4',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'EN5',0,4
	.word	924
	.byte	1,26,2,35,0,12
	.byte	'EN6',0,4
	.word	924
	.byte	1,25,2,35,0,12
	.byte	'EN7',0,4
	.word	924
	.byte	1,24,2,35,0,12
	.byte	'EN8',0,4
	.word	924
	.byte	1,23,2,35,0,12
	.byte	'EN9',0,4
	.word	924
	.byte	1,22,2,35,0,12
	.byte	'EN10',0,4
	.word	924
	.byte	1,21,2,35,0,12
	.byte	'EN11',0,4
	.word	924
	.byte	1,20,2,35,0,12
	.byte	'EN12',0,4
	.word	924
	.byte	1,19,2,35,0,12
	.byte	'EN13',0,4
	.word	924
	.byte	1,18,2,35,0,12
	.byte	'EN14',0,4
	.word	924
	.byte	1,17,2,35,0,12
	.byte	'EN15',0,4
	.word	924
	.byte	1,16,2,35,0,12
	.byte	'EN16',0,4
	.word	924
	.byte	1,15,2,35,0,12
	.byte	'EN17',0,4
	.word	924
	.byte	1,14,2,35,0,12
	.byte	'EN18',0,4
	.word	924
	.byte	1,13,2,35,0,12
	.byte	'EN19',0,4
	.word	924
	.byte	1,12,2,35,0,12
	.byte	'EN20',0,4
	.word	924
	.byte	1,11,2,35,0,12
	.byte	'EN21',0,4
	.word	924
	.byte	1,10,2,35,0,12
	.byte	'EN22',0,4
	.word	924
	.byte	1,9,2,35,0,12
	.byte	'EN23',0,4
	.word	924
	.byte	1,8,2,35,0,12
	.byte	'EN24',0,4
	.word	924
	.byte	1,7,2,35,0,12
	.byte	'EN25',0,4
	.word	924
	.byte	1,6,2,35,0,12
	.byte	'EN26',0,4
	.word	924
	.byte	1,5,2,35,0,12
	.byte	'EN27',0,4
	.word	924
	.byte	1,4,2,35,0,12
	.byte	'EN28',0,4
	.word	924
	.byte	1,3,2,35,0,12
	.byte	'EN29',0,4
	.word	924
	.byte	1,2,2,35,0,12
	.byte	'EN30',0,4
	.word	924
	.byte	1,1,2,35,0,12
	.byte	'EN31',0,4
	.word	924
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,22,233,8,3
	.word	76591
	.byte	11
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,22,236,8,16,4,12
	.byte	'EN32',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'EN33',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'EN34',0,4
	.word	924
	.byte	1,29,2,35,0,12
	.byte	'EN35',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'EN36',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'EN37',0,4
	.word	924
	.byte	1,26,2,35,0,12
	.byte	'EN38',0,4
	.word	924
	.byte	1,25,2,35,0,12
	.byte	'EN39',0,4
	.word	924
	.byte	1,24,2,35,0,12
	.byte	'EN40',0,4
	.word	924
	.byte	1,23,2,35,0,12
	.byte	'EN41',0,4
	.word	924
	.byte	1,22,2,35,0,12
	.byte	'EN42',0,4
	.word	924
	.byte	1,21,2,35,0,12
	.byte	'EN43',0,4
	.word	924
	.byte	1,20,2,35,0,12
	.byte	'EN44',0,4
	.word	924
	.byte	1,19,2,35,0,12
	.byte	'EN45',0,4
	.word	924
	.byte	1,18,2,35,0,12
	.byte	'EN46',0,4
	.word	924
	.byte	1,17,2,35,0,12
	.byte	'EN47',0,4
	.word	924
	.byte	1,16,2,35,0,12
	.byte	'EN48',0,4
	.word	924
	.byte	1,15,2,35,0,12
	.byte	'EN49',0,4
	.word	924
	.byte	1,14,2,35,0,12
	.byte	'EN50',0,4
	.word	924
	.byte	1,13,2,35,0,12
	.byte	'EN51',0,4
	.word	924
	.byte	1,12,2,35,0,12
	.byte	'EN52',0,4
	.word	924
	.byte	1,11,2,35,0,12
	.byte	'EN53',0,4
	.word	924
	.byte	1,10,2,35,0,12
	.byte	'EN54',0,4
	.word	924
	.byte	1,9,2,35,0,12
	.byte	'EN55',0,4
	.word	924
	.byte	1,8,2,35,0,12
	.byte	'EN56',0,4
	.word	924
	.byte	1,7,2,35,0,12
	.byte	'EN57',0,4
	.word	924
	.byte	1,6,2,35,0,12
	.byte	'EN58',0,4
	.word	924
	.byte	1,5,2,35,0,12
	.byte	'EN59',0,4
	.word	924
	.byte	1,4,2,35,0,12
	.byte	'EN60',0,4
	.word	924
	.byte	1,3,2,35,0,12
	.byte	'EN61',0,4
	.word	924
	.byte	1,2,2,35,0,12
	.byte	'EN62',0,4
	.word	924
	.byte	1,1,2,35,0,12
	.byte	'EN63',0,4
	.word	924
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,22,142,9,3
	.word	77180
	.byte	11
	.byte	'_Ifx_CPU_SWEVT_Bits',0,22,145,9,16,4,12
	.byte	'EVTA',0,4
	.word	924
	.byte	3,29,2,35,0,12
	.byte	'BBM',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'BOD',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'SUSP',0,4
	.word	924
	.byte	1,26,2,35,0,12
	.byte	'CNT',0,4
	.word	924
	.byte	2,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	924
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_CPU_SWEVT_Bits',0,22,153,9,3
	.word	77779
	.byte	11
	.byte	'_Ifx_CPU_SYSCON_Bits',0,22,156,9,16,4,12
	.byte	'FCDSF',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'PROTEN',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'TPROTEN',0,4
	.word	924
	.byte	1,29,2,35,0,12
	.byte	'IS',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'TS',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'reserved_5',0,4
	.word	924
	.byte	3,24,2,35,0,12
	.byte	'ESDIS',0,4
	.word	924
	.byte	1,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	924
	.byte	7,16,2,35,0,12
	.byte	'U1_IED',0,4
	.word	924
	.byte	1,15,2,35,0,12
	.byte	'U1_IOS',0,4
	.word	924
	.byte	1,14,2,35,0,12
	.byte	'reserved_18',0,4
	.word	924
	.byte	6,8,2,35,0,12
	.byte	'BHALT',0,4
	.word	924
	.byte	1,7,2,35,0,12
	.byte	'reserved_25',0,4
	.word	924
	.byte	7,0,2,35,0,0,33
	.byte	'Ifx_CPU_SYSCON_Bits',0,22,171,9,3
	.word	77933
	.byte	11
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,22,174,9,16,4,12
	.byte	'ASI',0,4
	.word	924
	.byte	5,27,2,35,0,12
	.byte	'reserved_5',0,4
	.word	924
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,22,178,9,3
	.word	78232
	.byte	11
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,22,181,9,16,4,12
	.byte	'TEXP0',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'TEXP1',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'TEXP2',0,4
	.word	924
	.byte	1,29,2,35,0,12
	.byte	'reserved_3',0,4
	.word	924
	.byte	13,16,2,35,0,12
	.byte	'TTRAP',0,4
	.word	924
	.byte	1,15,2,35,0,12
	.byte	'reserved_17',0,4
	.word	924
	.byte	15,0,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_CON_Bits',0,22,189,9,3
	.word	78330
	.byte	11
	.byte	'_Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,22,192,9,16,4,12
	.byte	'EXTIM_CLASS_EN',0,4
	.word	924
	.byte	8,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	924
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,22,196,9,3
	.word	78502
	.byte	11
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,22,199,9,16,4,12
	.byte	'ENTRY_CVAL',0,4
	.word	924
	.byte	12,20,2,35,0,12
	.byte	'reserved_12',0,4
	.word	924
	.byte	20,0,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,22,203,9,3
	.word	78631
	.byte	11
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,22,206,9,16,4,12
	.byte	'reserved_0',0,4
	.word	924
	.byte	4,28,2,35,0,12
	.byte	'ENTRY_LVAL',0,4
	.word	924
	.byte	8,20,2,35,0,12
	.byte	'reserved_12',0,4
	.word	924
	.byte	20,0,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,22,211,9,3
	.word	78761
	.byte	11
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,22,214,9,16,4,12
	.byte	'EXIT_CVAL',0,4
	.word	924
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	924
	.byte	8,0,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,22,218,9,3
	.word	78913
	.byte	11
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,22,221,9,16,4,12
	.byte	'reserved_0',0,4
	.word	924
	.byte	4,28,2,35,0,12
	.byte	'EXIT_LVAL',0,4
	.word	924
	.byte	20,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	924
	.byte	8,0,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,22,226,9,3
	.word	79040
	.byte	11
	.byte	'_Ifx_CPU_TPS_EXTIM_FCX_Bits',0,22,229,9,16,4,12
	.byte	'EXIT_FCX',0,4
	.word	924
	.byte	20,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	924
	.byte	12,0,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_FCX_Bits',0,22,233,9,3
	.word	79189
	.byte	11
	.byte	'_Ifx_CPU_TPS_EXTIM_STAT_Bits',0,22,236,9,16,4,12
	.byte	'EXIT_TIN',0,4
	.word	924
	.byte	8,24,2,35,0,12
	.byte	'EXIT_CLASS',0,4
	.word	924
	.byte	3,21,2,35,0,12
	.byte	'reserved_11',0,4
	.word	924
	.byte	4,17,2,35,0,12
	.byte	'EXIT_AT',0,4
	.word	924
	.byte	1,16,2,35,0,12
	.byte	'ENTRY_TIN',0,4
	.word	924
	.byte	8,8,2,35,0,12
	.byte	'ENTRY_CLASS',0,4
	.word	924
	.byte	3,5,2,35,0,12
	.byte	'reserved_27',0,4
	.word	924
	.byte	4,1,2,35,0,12
	.byte	'ENTRY_AT',0,4
	.word	924
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_STAT_Bits',0,22,246,9,3
	.word	79303
	.byte	11
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,22,249,9,16,4,12
	.byte	'TIMER',0,4
	.word	924
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,22,252,9,3
	.word	79547
	.byte	11
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,22,255,9,16,4,12
	.byte	'T0',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'T1',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'T2',0,4
	.word	924
	.byte	1,29,2,35,0,12
	.byte	'T3',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'T4',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'T5',0,4
	.word	924
	.byte	1,26,2,35,0,12
	.byte	'T6',0,4
	.word	924
	.byte	1,25,2,35,0,12
	.byte	'T7',0,4
	.word	924
	.byte	1,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	924
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,22,138,10,3
	.word	79627
	.byte	11
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,22,141,10,16,4,12
	.byte	'ADDR',0,4
	.word	924
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_TR_ADR_Bits',0,22,144,10,3
	.word	79822
	.byte	11
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,22,147,10,16,4,12
	.byte	'EVTA',0,4
	.word	924
	.byte	3,29,2,35,0,12
	.byte	'BBM',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'BOD',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'SUSP',0,4
	.word	924
	.byte	1,26,2,35,0,12
	.byte	'CNT',0,4
	.word	924
	.byte	2,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	924
	.byte	4,20,2,35,0,12
	.byte	'TYP',0,4
	.word	924
	.byte	1,19,2,35,0,12
	.byte	'RNG',0,4
	.word	924
	.byte	1,18,2,35,0,12
	.byte	'reserved_14',0,4
	.word	924
	.byte	1,17,2,35,0,12
	.byte	'ASI_EN',0,4
	.word	924
	.byte	1,16,2,35,0,12
	.byte	'ASI',0,4
	.word	924
	.byte	5,11,2,35,0,12
	.byte	'reserved_21',0,4
	.word	924
	.byte	6,5,2,35,0,12
	.byte	'AST',0,4
	.word	924
	.byte	1,4,2,35,0,12
	.byte	'ALD',0,4
	.word	924
	.byte	1,3,2,35,0,12
	.byte	'reserved_29',0,4
	.word	924
	.byte	3,0,2,35,0,0,33
	.byte	'Ifx_CPU_TR_EVT_Bits',0,22,164,10,3
	.word	79895
	.byte	13,22,172,10,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	61250
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_A',0,22,177,10,3
	.word	80213
	.byte	13,22,180,10,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	61311
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_BIV',0,22,185,10,3
	.word	80272
	.byte	13,22,188,10,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	61390
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_BLK_OMASK',0,22,193,10,3
	.word	80333
	.byte	13,22,196,10,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	61528
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_BLK_OTAR',0,22,201,10,3
	.word	80400
	.byte	13,22,204,10,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	61649
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_BLK_RABR',0,22,209,10,3
	.word	80466
	.byte	13,22,212,10,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	61825
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_BTV',0,22,217,10,3
	.word	80532
	.byte	13,22,220,10,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	61911
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CCNT',0,22,225,10,3
	.word	80593
	.byte	13,22,228,10,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	62000
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CCTRL',0,22,233,10,3
	.word	80655
	.byte	13,22,236,10,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	62147
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_COMPAT',0,22,241,10,3
	.word	80718
	.byte	13,22,244,10,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	62276
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CORE_ID',0,22,249,10,3
	.word	80782
	.byte	13,22,252,10,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	62376
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CPR_L',0,22,129,11,3
	.word	80847
	.byte	13,22,132,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	62471
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CPR_U',0,22,137,11,3
	.word	80910
	.byte	13,22,140,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	62566
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CPU_ID',0,22,145,11,3
	.word	80973
	.byte	13,22,148,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	62676
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CPXE',0,22,153,11,3
	.word	81037
	.byte	13,22,156,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	62768
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CREVT',0,22,161,11,3
	.word	81099
	.byte	13,22,164,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	62922
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CUS_ID',0,22,169,11,3
	.word	81162
	.byte	13,22,172,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	63016
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_D',0,22,177,11,3
	.word	81226
	.byte	13,22,180,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	63079
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DATR',0,22,185,11,3
	.word	81285
	.byte	13,22,188,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	63305
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DBGSR',0,22,193,11,3
	.word	81347
	.byte	13,22,196,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	63520
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DBGTCR',0,22,201,11,3
	.word	81410
	.byte	13,22,204,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	63614
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DCON0',0,22,209,11,3
	.word	81474
	.byte	13,22,212,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	63730
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DCON2',0,22,217,11,3
	.word	81537
	.byte	13,22,220,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	63831
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DCX',0,22,225,11,3
	.word	81600
	.byte	13,22,228,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	63924
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DEADD',0,22,233,11,3
	.word	81661
	.byte	13,22,236,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	64004
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DIEAR',0,22,241,11,3
	.word	81724
	.byte	13,22,244,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	64073
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DIETR',0,22,249,11,3
	.word	81787
	.byte	13,22,252,11,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	64357
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R',0,22,129,12,3
	.word	81850
	.byte	13,22,132,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	64948
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W',0,22,137,12,3
	.word	81930
	.byte	13,22,140,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	65539
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R',0,22,145,12,3
	.word	82010
	.byte	13,22,148,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	66140
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W',0,22,153,12,3
	.word	82090
	.byte	13,22,156,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	66741
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA',0,22,161,12,3
	.word	82170
	.byte	13,22,164,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	66856
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA',0,22,169,12,3
	.word	82244
	.byte	13,22,172,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	66971
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DMS',0,22,177,12,3
	.word	82318
	.byte	13,22,180,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	67064
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DPRE',0,22,185,12,3
	.word	82379
	.byte	13,22,188,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	67156
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DPR_L',0,22,193,12,3
	.word	82441
	.byte	13,22,196,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	67251
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DPR_U',0,22,201,12,3
	.word	82504
	.byte	13,22,204,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	67346
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DPWE',0,22,209,12,3
	.word	82567
	.byte	13,22,212,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	67438
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DSTR',0,22,217,12,3
	.word	82629
	.byte	13,22,220,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	67777
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_EXEVT',0,22,225,12,3
	.word	82691
	.byte	13,22,228,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	67931
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FCX',0,22,233,12,3
	.word	82754
	.byte	13,22,236,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	68037
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FLASHCON0',0,22,241,12,3
	.word	82815
	.byte	13,22,244,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	68255
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FLASHCON1',0,22,249,12,3
	.word	82882
	.byte	13,22,252,12,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	68446
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FLASHCON2',0,22,129,13,3
	.word	82949
	.byte	13,22,132,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	68746
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FLASHCON3',0,22,137,13,3
	.word	83016
	.byte	13,22,140,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	69051
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FLASHCON4',0,22,145,13,3
	.word	83083
	.byte	13,22,148,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	69152
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,22,153,13,3
	.word	83150
	.byte	13,22,156,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	69501
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,22,161,13,3
	.word	83220
	.byte	13,22,164,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	69661
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,22,169,13,3
	.word	83290
	.byte	13,22,172,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	69742
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,22,177,13,3
	.word	83359
	.byte	13,22,180,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	69829
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,22,185,13,3
	.word	83430
	.byte	13,22,188,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	69916
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,22,193,13,3
	.word	83501
	.byte	13,22,196,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	70003
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_ICNT',0,22,201,13,3
	.word	83572
	.byte	13,22,204,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	70094
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_ICR',0,22,209,13,3
	.word	83634
	.byte	13,22,212,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	70236
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_ISP',0,22,217,13,3
	.word	83695
	.byte	13,22,220,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	70302
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_KRST0',0,22,225,13,3
	.word	83756
	.byte	13,22,228,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	70413
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_KRST1',0,22,233,13,3
	.word	83819
	.byte	13,22,236,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	70505
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_KRSTCLR',0,22,241,13,3
	.word	83882
	.byte	13,22,244,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	70601
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_LCX',0,22,249,13,3
	.word	83947
	.byte	13,22,252,13,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	70707
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R',0,22,129,14,3
	.word	84008
	.byte	13,22,132,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	71290
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R',0,22,137,14,3
	.word	84084
	.byte	13,22,140,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	71883
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_M1CNT',0,22,145,14,3
	.word	84160
	.byte	13,22,148,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	71976
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_M2CNT',0,22,153,14,3
	.word	84223
	.byte	13,22,156,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	72069
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_M3CNT',0,22,161,14,3
	.word	84286
	.byte	13,22,164,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	72162
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_OSEL',0,22,169,14,3
	.word	84349
	.byte	13,22,172,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	72235
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PC',0,22,177,14,3
	.word	84411
	.byte	13,22,180,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	72320
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PCON0',0,22,185,14,3
	.word	84471
	.byte	13,22,188,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	72436
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PCON1',0,22,193,14,3
	.word	84534
	.byte	13,22,196,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	72547
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PCON2',0,22,201,14,3
	.word	84597
	.byte	13,22,204,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	72648
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PCXI',0,22,209,14,3
	.word	84660
	.byte	13,22,212,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	72801
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PIEAR',0,22,217,14,3
	.word	84722
	.byte	13,22,220,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	72870
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PIETR',0,22,225,14,3
	.word	84785
	.byte	13,22,228,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	73154
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PMA0',0,22,233,14,3
	.word	84848
	.byte	13,22,236,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	73245
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PMA1',0,22,241,14,3
	.word	84910
	.byte	13,22,244,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	73336
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PMA2',0,22,249,14,3
	.word	84972
	.byte	13,22,252,14,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	73427
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PSTR',0,22,129,15,3
	.word	85034
	.byte	13,22,132,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	73630
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PSW',0,22,137,15,3
	.word	85096
	.byte	13,22,140,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	73835
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_RGN_ACCENA',0,22,145,15,3
	.word	85157
	.byte	13,22,148,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	74402
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_RGN_ACCENB',0,22,153,15,3
	.word	85225
	.byte	13,22,156,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	74979
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_RGN_LA',0,22,161,15,3
	.word	85293
	.byte	13,22,164,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	75074
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_RGN_UA',0,22,169,15,3
	.word	85357
	.byte	13,22,172,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	75169
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SEGEN',0,22,177,15,3
	.word	85421
	.byte	13,22,180,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	75297
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W',0,22,185,15,3
	.word	85484
	.byte	13,22,188,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	75880
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W',0,22,193,15,3
	.word	85560
	.byte	13,22,196,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	76473
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SMACON',0,22,201,15,3
	.word	85636
	.byte	13,22,204,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	76591
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R',0,22,209,15,3
	.word	85700
	.byte	13,22,212,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	77180
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R',0,22,217,15,3
	.word	85779
	.byte	13,22,220,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	77779
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SWEVT',0,22,225,15,3
	.word	85858
	.byte	13,22,228,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	77933
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SYSCON',0,22,233,15,3
	.word	85921
	.byte	13,22,236,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	78232
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TASK_ASI',0,22,241,15,3
	.word	85985
	.byte	13,22,244,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	78330
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_CON',0,22,249,15,3
	.word	86051
	.byte	13,22,252,15,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	78502
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN',0,22,129,16,3
	.word	86116
	.byte	13,22,132,16,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	78631
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL',0,22,137,16,3
	.word	86192
	.byte	13,22,140,16,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	78761
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL',0,22,145,16,3
	.word	86270
	.byte	13,22,148,16,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	78913
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL',0,22,153,16,3
	.word	86348
	.byte	13,22,156,16,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	79040
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL',0,22,161,16,3
	.word	86425
	.byte	13,22,164,16,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	79189
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_FCX',0,22,169,16,3
	.word	86502
	.byte	13,22,172,16,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	79303
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_STAT',0,22,177,16,3
	.word	86573
	.byte	13,22,180,16,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	79547
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_TIMER',0,22,185,16,3
	.word	86645
	.byte	13,22,188,16,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	79627
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TRIG_ACC',0,22,193,16,3
	.word	86712
	.byte	13,22,196,16,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	79822
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TR_ADR',0,22,201,16,3
	.word	86778
	.byte	13,22,204,16,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	79895
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TR_EVT',0,22,209,16,3
	.word	86842
	.byte	11
	.byte	'_Ifx_CPU_RGN',0,22,221,16,25,16,14
	.byte	'LA',0
	.word	85293
	.byte	4,2,35,0,14
	.byte	'UA',0
	.word	85357
	.byte	4,2,35,4,14
	.byte	'ACCENA',0
	.word	85157
	.byte	4,2,35,8,14
	.byte	'ACCENB',0
	.word	85225
	.byte	4,2,35,12,0,10
	.word	86906
	.byte	33
	.byte	'Ifx_CPU_RGN',0,22,227,16,3
	.word	86982
	.byte	11
	.byte	'_Ifx_CPU_BLK',0,22,242,16,25,12,14
	.byte	'RABR',0
	.word	80466
	.byte	4,2,35,0,14
	.byte	'OTAR',0
	.word	80400
	.byte	4,2,35,4,14
	.byte	'OMASK',0
	.word	80333
	.byte	4,2,35,8,0,10
	.word	87008
	.byte	33
	.byte	'Ifx_CPU_BLK',0,22,247,16,3
	.word	87071
	.byte	11
	.byte	'_Ifx_CPU_FPU_TRAP',0,22,134,17,25,28,14
	.byte	'CON',0
	.word	83150
	.byte	4,2,35,0,14
	.byte	'PC',0
	.word	83290
	.byte	4,2,35,4,14
	.byte	'OPC',0
	.word	83220
	.byte	4,2,35,8,14
	.byte	'reserved_C',0
	.word	3558
	.byte	4,2,35,12,14
	.byte	'SRC1',0
	.word	83359
	.byte	4,2,35,16,14
	.byte	'SRC2',0
	.word	83430
	.byte	4,2,35,20,14
	.byte	'SRC3',0
	.word	83501
	.byte	4,2,35,24,0,10
	.word	87097
	.byte	33
	.byte	'Ifx_CPU_FPU_TRAP',0,22,143,17,3
	.word	87222
	.byte	11
	.byte	'_Ifx_CPU_DPR',0,22,158,17,25,8,14
	.byte	'L',0
	.word	82441
	.byte	4,2,35,0,14
	.byte	'U',0
	.word	82504
	.byte	4,2,35,4,0,10
	.word	87253
	.byte	33
	.byte	'Ifx_CPU_DPR',0,22,162,17,3
	.word	87295
	.byte	11
	.byte	'_Ifx_CPU_CPR',0,22,177,17,25,8,14
	.byte	'L',0
	.word	80847
	.byte	4,2,35,0,14
	.byte	'U',0
	.word	80910
	.byte	4,2,35,4,0,10
	.word	87321
	.byte	33
	.byte	'Ifx_CPU_CPR',0,22,181,17,3
	.word	87363
	.byte	18,12
	.word	86645
	.byte	19,2,0,11
	.byte	'_Ifx_CPU_TPS',0,22,196,17,25,16,14
	.byte	'CON',0
	.word	86051
	.byte	4,2,35,0,14
	.byte	'TIMER',0
	.word	87389
	.byte	12,2,35,4,0,10
	.word	87398
	.byte	33
	.byte	'Ifx_CPU_TPS',0,22,200,17,3
	.word	87446
	.byte	11
	.byte	'_Ifx_CPU_TPS_EXTIM',0,22,215,17,25,28,14
	.byte	'ENTRY_LVAL',0
	.word	86270
	.byte	4,2,35,0,14
	.byte	'ENTRY_CVAL',0
	.word	86192
	.byte	4,2,35,4,14
	.byte	'EXIT_LVAL',0
	.word	86425
	.byte	4,2,35,8,14
	.byte	'EXIT_CVAL',0
	.word	86348
	.byte	4,2,35,12,14
	.byte	'CLASS_EN',0
	.word	86116
	.byte	4,2,35,16,14
	.byte	'STAT',0
	.word	86573
	.byte	4,2,35,20,14
	.byte	'FCX',0
	.word	86502
	.byte	4,2,35,24,0,10
	.word	87472
	.byte	33
	.byte	'Ifx_CPU_TPS_EXTIM',0,22,224,17,3
	.word	87621
	.byte	11
	.byte	'_Ifx_CPU_TR',0,22,239,17,25,8,14
	.byte	'EVT',0
	.word	86842
	.byte	4,2,35,0,14
	.byte	'ADR',0
	.word	86778
	.byte	4,2,35,4,0,10
	.word	87653
	.byte	33
	.byte	'Ifx_CPU_TR',0,22,243,17,3
	.word	87698
	.byte	18,128,34
	.word	525
	.byte	19,255,33,0,18,236,253,2
	.word	525
	.byte	19,235,253,2,0,18,244,31
	.word	525
	.byte	19,243,31,0,18,128,1
	.word	86906
	.byte	19,7,0,10
	.word	87758
	.byte	18,232,1
	.word	525
	.byte	19,231,1,0,18,128,48
	.word	525
	.byte	19,255,47,0,18,128,3
	.word	87008
	.byte	19,31,0,10
	.word	87795
	.byte	18,160,39
	.word	525
	.byte	19,159,39,0,18,208,223,1
	.word	525
	.byte	19,207,223,1,0,18,248,1
	.word	525
	.byte	19,247,1,0,18,244,29
	.word	525
	.byte	19,243,29,0,18,188,3
	.word	525
	.byte	19,187,3,0,18,232,3
	.word	525
	.byte	19,231,3,0,18,252,23
	.word	525
	.byte	19,251,23,0,10
	.word	87097
	.byte	18,228,63
	.word	525
	.byte	19,227,63,0,18,144,1
	.word	87253
	.byte	19,17,0,10
	.word	87905
	.byte	18,240,30
	.word	525
	.byte	19,239,30,0,18,80
	.word	87321
	.byte	19,9,0,10
	.word	87931
	.byte	18,176,31
	.word	525
	.byte	19,175,31,0,18,152,7
	.word	525
	.byte	19,151,7,0,10
	.word	87398
	.byte	18,48
	.word	525
	.byte	19,47,0,10
	.word	87472
	.byte	18,164,23
	.word	525
	.byte	19,163,23,0,18,64
	.word	87653
	.byte	19,7,0,10
	.word	87997
	.byte	18,192,23
	.word	525
	.byte	19,191,23,0,18,28
	.word	525
	.byte	19,27,0,18,180,1
	.word	525
	.byte	19,179,1,0,18,172,1
	.word	525
	.byte	19,171,1,0,18,64
	.word	81226
	.byte	19,15,0,18,64
	.word	525
	.byte	19,63,0,18,64
	.word	80213
	.byte	19,15,0,11
	.byte	'_Ifx_CPU',0,22,130,18,25,128,128,8,14
	.byte	'reserved_0',0
	.word	87723
	.byte	128,34,2,35,0,14
	.byte	'FLASHCON0',0
	.word	82815
	.byte	4,3,35,128,34,14
	.byte	'FLASHCON1',0
	.word	82882
	.byte	4,3,35,132,34,14
	.byte	'FLASHCON2',0
	.word	82949
	.byte	4,3,35,136,34,14
	.byte	'FLASHCON3',0
	.word	83016
	.byte	4,3,35,140,34,14
	.byte	'FLASHCON4',0
	.word	83083
	.byte	4,3,35,144,34,14
	.byte	'reserved_1114',0
	.word	87734
	.byte	236,253,2,3,35,148,34,14
	.byte	'KRST0',0
	.word	83756
	.byte	4,4,35,128,160,3,14
	.byte	'KRST1',0
	.word	83819
	.byte	4,4,35,132,160,3,14
	.byte	'KRSTCLR',0
	.word	83882
	.byte	4,4,35,136,160,3,14
	.byte	'reserved_D00C',0
	.word	87747
	.byte	244,31,4,35,140,160,3,14
	.byte	'RGN',0
	.word	87768
	.byte	128,1,4,35,128,192,3,14
	.byte	'reserved_E080',0
	.word	5378
	.byte	8,4,35,128,193,3,14
	.byte	'SPR_SPROT_RGNACCENA_R0',0
	.word	85700
	.byte	4,4,35,136,193,3,14
	.byte	'SPR_SPROT_RGNACCENB_R0',0
	.word	85779
	.byte	4,4,35,140,193,3,14
	.byte	'reserved_E090',0
	.word	5378
	.byte	8,4,35,144,193,3,14
	.byte	'SPR_SPROT_RGNACCENA_R1',0
	.word	85700
	.byte	4,4,35,152,193,3,14
	.byte	'SPR_SPROT_RGNACCENB_R1',0
	.word	85779
	.byte	4,4,35,156,193,3,14
	.byte	'reserved_E0A0',0
	.word	5378
	.byte	8,4,35,160,193,3,14
	.byte	'SPR_SPROT_RGNACCENA_R2',0
	.word	85700
	.byte	4,4,35,168,193,3,14
	.byte	'SPR_SPROT_RGNACCENB_R2',0
	.word	85779
	.byte	4,4,35,172,193,3,14
	.byte	'reserved_E0B0',0
	.word	5378
	.byte	8,4,35,176,193,3,14
	.byte	'SPR_SPROT_RGNACCENA_R3',0
	.word	85700
	.byte	4,4,35,184,193,3,14
	.byte	'SPR_SPROT_RGNACCENB_R3',0
	.word	85779
	.byte	4,4,35,188,193,3,14
	.byte	'reserved_E0C0',0
	.word	5378
	.byte	8,4,35,192,193,3,14
	.byte	'SPR_SPROT_RGNACCENA_R4',0
	.word	85700
	.byte	4,4,35,200,193,3,14
	.byte	'SPR_SPROT_RGNACCENB_R4',0
	.word	85779
	.byte	4,4,35,204,193,3,14
	.byte	'reserved_E0D0',0
	.word	5378
	.byte	8,4,35,208,193,3,14
	.byte	'SPR_SPROT_RGNACCENA_R5',0
	.word	85700
	.byte	4,4,35,216,193,3,14
	.byte	'SPR_SPROT_RGNACCENB_R5',0
	.word	85779
	.byte	4,4,35,220,193,3,14
	.byte	'reserved_E0E0',0
	.word	5378
	.byte	8,4,35,224,193,3,14
	.byte	'SPR_SPROT_RGNACCENA_R6',0
	.word	85700
	.byte	4,4,35,232,193,3,14
	.byte	'SPR_SPROT_RGNACCENB_R6',0
	.word	85779
	.byte	4,4,35,236,193,3,14
	.byte	'reserved_E0F0',0
	.word	5378
	.byte	8,4,35,240,193,3,14
	.byte	'SPR_SPROT_RGNACCENA_R7',0
	.word	85700
	.byte	4,4,35,248,193,3,14
	.byte	'SPR_SPROT_RGNACCENB_R7',0
	.word	85779
	.byte	4,4,35,252,193,3,14
	.byte	'SFR_SPROT_ACCENA_W',0
	.word	85484
	.byte	4,4,35,128,194,3,14
	.byte	'SFR_SPROT_ACCENB_W',0
	.word	85560
	.byte	4,4,35,132,194,3,14
	.byte	'reserved_E108',0
	.word	5378
	.byte	8,4,35,136,194,3,14
	.byte	'LPB_SPROT_ACCENA_R',0
	.word	84008
	.byte	4,4,35,144,194,3,14
	.byte	'LPB_SPROT_ACCENB_R',0
	.word	84084
	.byte	4,4,35,148,194,3,14
	.byte	'reserved_E118',0
	.word	87773
	.byte	232,1,4,35,152,194,3,14
	.byte	'DLMU_SPROT_RGNLA0',0
	.word	82170
	.byte	4,4,35,128,196,3,14
	.byte	'DLMU_SPROT_RGNUA0',0
	.word	82244
	.byte	4,4,35,132,196,3,14
	.byte	'DLMU_SPROT_RGNACCENA_W0',0
	.word	81930
	.byte	4,4,35,136,196,3,14
	.byte	'DLMU_SPROT_RGNACCENB_W0',0
	.word	82090
	.byte	4,4,35,140,196,3,14
	.byte	'DLMU_SPROT_RGNLA1',0
	.word	82170
	.byte	4,4,35,144,196,3,14
	.byte	'DLMU_SPROT_RGNUA1',0
	.word	82244
	.byte	4,4,35,148,196,3,14
	.byte	'DLMU_SPROT_RGNACCENA_W1',0
	.word	81930
	.byte	4,4,35,152,196,3,14
	.byte	'DLMU_SPROT_RGNACCENB_W1',0
	.word	82090
	.byte	4,4,35,156,196,3,14
	.byte	'DLMU_SPROT_RGNLA2',0
	.word	82170
	.byte	4,4,35,160,196,3,14
	.byte	'DLMU_SPROT_RGNUA2',0
	.word	82244
	.byte	4,4,35,164,196,3,14
	.byte	'DLMU_SPROT_RGNACCENA_W2',0
	.word	81930
	.byte	4,4,35,168,196,3,14
	.byte	'DLMU_SPROT_RGNACCENB_W2',0
	.word	82090
	.byte	4,4,35,172,196,3,14
	.byte	'DLMU_SPROT_RGNLA3',0
	.word	82170
	.byte	4,4,35,176,196,3,14
	.byte	'DLMU_SPROT_RGNUA3',0
	.word	82244
	.byte	4,4,35,180,196,3,14
	.byte	'DLMU_SPROT_RGNACCENA_W3',0
	.word	81930
	.byte	4,4,35,184,196,3,14
	.byte	'DLMU_SPROT_RGNACCENB_W3',0
	.word	82090
	.byte	4,4,35,188,196,3,14
	.byte	'DLMU_SPROT_RGNLA4',0
	.word	82170
	.byte	4,4,35,192,196,3,14
	.byte	'DLMU_SPROT_RGNUA4',0
	.word	82244
	.byte	4,4,35,196,196,3,14
	.byte	'DLMU_SPROT_RGNACCENA_W4',0
	.word	81930
	.byte	4,4,35,200,196,3,14
	.byte	'DLMU_SPROT_RGNACCENB_W4',0
	.word	82090
	.byte	4,4,35,204,196,3,14
	.byte	'DLMU_SPROT_RGNLA5',0
	.word	82170
	.byte	4,4,35,208,196,3,14
	.byte	'DLMU_SPROT_RGNUA5',0
	.word	82244
	.byte	4,4,35,212,196,3,14
	.byte	'DLMU_SPROT_RGNACCENA_W5',0
	.word	81930
	.byte	4,4,35,216,196,3,14
	.byte	'DLMU_SPROT_RGNACCENB_W5',0
	.word	82090
	.byte	4,4,35,220,196,3,14
	.byte	'DLMU_SPROT_RGNLA6',0
	.word	82170
	.byte	4,4,35,224,196,3,14
	.byte	'DLMU_SPROT_RGNUA6',0
	.word	82244
	.byte	4,4,35,228,196,3,14
	.byte	'DLMU_SPROT_RGNACCENA_W6',0
	.word	81930
	.byte	4,4,35,232,196,3,14
	.byte	'DLMU_SPROT_RGNACCENB_W6',0
	.word	82090
	.byte	4,4,35,236,196,3,14
	.byte	'DLMU_SPROT_RGNLA7',0
	.word	82170
	.byte	4,4,35,240,196,3,14
	.byte	'DLMU_SPROT_RGNUA7',0
	.word	82244
	.byte	4,4,35,244,196,3,14
	.byte	'DLMU_SPROT_RGNACCENA_W7',0
	.word	81930
	.byte	4,4,35,248,196,3,14
	.byte	'DLMU_SPROT_RGNACCENB_W7',0
	.word	82090
	.byte	4,4,35,252,196,3,14
	.byte	'reserved_E280',0
	.word	5378
	.byte	8,4,35,128,197,3,14
	.byte	'DLMU_SPROT_RGNACCENA_R0',0
	.word	81850
	.byte	4,4,35,136,197,3,14
	.byte	'DLMU_SPROT_RGNACCENB_R0',0
	.word	82010
	.byte	4,4,35,140,197,3,14
	.byte	'reserved_E290',0
	.word	5378
	.byte	8,4,35,144,197,3,14
	.byte	'DLMU_SPROT_RGNACCENA_R1',0
	.word	81850
	.byte	4,4,35,152,197,3,14
	.byte	'DLMU_SPROT_RGNACCENB_R1',0
	.word	82010
	.byte	4,4,35,156,197,3,14
	.byte	'reserved_E2A0',0
	.word	5378
	.byte	8,4,35,160,197,3,14
	.byte	'DLMU_SPROT_RGNACCENA_R2',0
	.word	81850
	.byte	4,4,35,168,197,3,14
	.byte	'DLMU_SPROT_RGNACCENB_R2',0
	.word	82010
	.byte	4,4,35,172,197,3,14
	.byte	'reserved_E2B0',0
	.word	5378
	.byte	8,4,35,176,197,3,14
	.byte	'DLMU_SPROT_RGNACCENA_R3',0
	.word	81850
	.byte	4,4,35,184,197,3,14
	.byte	'DLMU_SPROT_RGNACCENB_R3',0
	.word	82010
	.byte	4,4,35,188,197,3,14
	.byte	'reserved_E2C0',0
	.word	5378
	.byte	8,4,35,192,197,3,14
	.byte	'DLMU_SPROT_RGNACCENA_R4',0
	.word	81850
	.byte	4,4,35,200,197,3,14
	.byte	'DLMU_SPROT_RGNACCENB_R4',0
	.word	82010
	.byte	4,4,35,204,197,3,14
	.byte	'reserved_E2D0',0
	.word	5378
	.byte	8,4,35,208,197,3,14
	.byte	'DLMU_SPROT_RGNACCENA_R5',0
	.word	81850
	.byte	4,4,35,216,197,3,14
	.byte	'DLMU_SPROT_RGNACCENB_R5',0
	.word	82010
	.byte	4,4,35,220,197,3,14
	.byte	'reserved_E2E0',0
	.word	5378
	.byte	8,4,35,224,197,3,14
	.byte	'DLMU_SPROT_RGNACCENA_R6',0
	.word	81850
	.byte	4,4,35,232,197,3,14
	.byte	'DLMU_SPROT_RGNACCENB_R6',0
	.word	82010
	.byte	4,4,35,236,197,3,14
	.byte	'reserved_E2F0',0
	.word	5378
	.byte	8,4,35,240,197,3,14
	.byte	'DLMU_SPROT_RGNACCENA_R7',0
	.word	81850
	.byte	4,4,35,248,197,3,14
	.byte	'DLMU_SPROT_RGNACCENB_R7',0
	.word	82010
	.byte	4,4,35,252,197,3,14
	.byte	'reserved_E300',0
	.word	87784
	.byte	128,48,4,35,128,198,3,14
	.byte	'OSEL',0
	.word	84349
	.byte	4,4,35,128,246,3,14
	.byte	'reserved_FB04',0
	.word	5718
	.byte	12,4,35,132,246,3,14
	.byte	'BLK',0
	.word	87805
	.byte	128,3,4,35,144,246,3,14
	.byte	'reserved_FC90',0
	.word	87810
	.byte	160,39,4,35,144,249,3,14
	.byte	'SEGEN',0
	.word	85421
	.byte	4,4,35,176,160,4,14
	.byte	'reserved_11034',0
	.word	87821
	.byte	208,223,1,4,35,180,160,4,14
	.byte	'TASK_ASI',0
	.word	85985
	.byte	4,4,35,132,128,6,14
	.byte	'reserved_18008',0
	.word	87834
	.byte	248,1,4,35,136,128,6,14
	.byte	'PMA0',0
	.word	84848
	.byte	4,4,35,128,130,6,14
	.byte	'PMA1',0
	.word	84910
	.byte	4,4,35,132,130,6,14
	.byte	'PMA2',0
	.word	84972
	.byte	4,4,35,136,130,6,14
	.byte	'reserved_1810C',0
	.word	87845
	.byte	244,29,4,35,140,130,6,14
	.byte	'DCON2',0
	.word	81537
	.byte	4,4,35,128,160,6,14
	.byte	'reserved_19004',0
	.word	5378
	.byte	8,4,35,132,160,6,14
	.byte	'SMACON',0
	.word	85636
	.byte	4,4,35,140,160,6,14
	.byte	'DSTR',0
	.word	82629
	.byte	4,4,35,144,160,6,14
	.byte	'reserved_19014',0
	.word	3558
	.byte	4,4,35,148,160,6,14
	.byte	'DATR',0
	.word	81285
	.byte	4,4,35,152,160,6,14
	.byte	'DEADD',0
	.word	81661
	.byte	4,4,35,156,160,6,14
	.byte	'DIEAR',0
	.word	81724
	.byte	4,4,35,160,160,6,14
	.byte	'DIETR',0
	.word	81787
	.byte	4,4,35,164,160,6,14
	.byte	'reserved_19028',0
	.word	4749
	.byte	24,4,35,168,160,6,14
	.byte	'DCON0',0
	.word	81474
	.byte	4,4,35,192,160,6,14
	.byte	'reserved_19044',0
	.word	87856
	.byte	188,3,4,35,196,160,6,14
	.byte	'PSTR',0
	.word	85034
	.byte	4,4,35,128,164,6,14
	.byte	'PCON1',0
	.word	84534
	.byte	4,4,35,132,164,6,14
	.byte	'PCON2',0
	.word	84597
	.byte	4,4,35,136,164,6,14
	.byte	'PCON0',0
	.word	84471
	.byte	4,4,35,140,164,6,14
	.byte	'PIEAR',0
	.word	84722
	.byte	4,4,35,144,164,6,14
	.byte	'PIETR',0
	.word	84785
	.byte	4,4,35,148,164,6,14
	.byte	'reserved_19218',0
	.word	87867
	.byte	232,3,4,35,152,164,6,14
	.byte	'COMPAT',0
	.word	80718
	.byte	4,4,35,128,168,6,14
	.byte	'reserved_19404',0
	.word	87878
	.byte	252,23,4,35,132,168,6,14
	.byte	'FPU_TRAP',0
	.word	87889
	.byte	28,4,35,128,192,6,14
	.byte	'reserved_1A01C',0
	.word	87894
	.byte	228,63,4,35,156,192,6,14
	.byte	'DPR',0
	.word	87915
	.byte	144,1,4,35,128,128,7,14
	.byte	'reserved_1C090',0
	.word	87920
	.byte	240,30,4,35,144,129,7,14
	.byte	'CPR',0
	.word	87940
	.byte	80,4,35,128,160,7,14
	.byte	'reserved_1D050',0
	.word	87945
	.byte	176,31,4,35,208,160,7,14
	.byte	'CPXE_0',0
	.word	81037
	.byte	4,4,35,128,192,7,14
	.byte	'CPXE_1',0
	.word	81037
	.byte	4,4,35,132,192,7,14
	.byte	'CPXE_2',0
	.word	81037
	.byte	4,4,35,136,192,7,14
	.byte	'CPXE_3',0
	.word	81037
	.byte	4,4,35,140,192,7,14
	.byte	'DPRE_0',0
	.word	82379
	.byte	4,4,35,144,192,7,14
	.byte	'DPRE_1',0
	.word	82379
	.byte	4,4,35,148,192,7,14
	.byte	'DPRE_2',0
	.word	82379
	.byte	4,4,35,152,192,7,14
	.byte	'DPRE_3',0
	.word	82379
	.byte	4,4,35,156,192,7,14
	.byte	'DPWE_0',0
	.word	82567
	.byte	4,4,35,160,192,7,14
	.byte	'DPWE_1',0
	.word	82567
	.byte	4,4,35,164,192,7,14
	.byte	'DPWE_2',0
	.word	82567
	.byte	4,4,35,168,192,7,14
	.byte	'DPWE_3',0
	.word	82567
	.byte	4,4,35,172,192,7,14
	.byte	'reserved_1E030',0
	.word	59032
	.byte	16,4,35,176,192,7,14
	.byte	'CPXE_4',0
	.word	81037
	.byte	4,4,35,192,192,7,14
	.byte	'CPXE_5',0
	.word	81037
	.byte	4,4,35,196,192,7,14
	.byte	'reserved_1E048',0
	.word	5378
	.byte	8,4,35,200,192,7,14
	.byte	'DPRE_4',0
	.word	82379
	.byte	4,4,35,208,192,7,14
	.byte	'DPRE_5',0
	.word	82379
	.byte	4,4,35,212,192,7,14
	.byte	'reserved_1E058',0
	.word	5378
	.byte	8,4,35,216,192,7,14
	.byte	'DPWE_4',0
	.word	82567
	.byte	4,4,35,224,192,7,14
	.byte	'DPWE_5',0
	.word	82567
	.byte	4,4,35,228,192,7,14
	.byte	'reserved_1E068',0
	.word	87956
	.byte	152,7,4,35,232,192,7,14
	.byte	'TPS',0
	.word	87967
	.byte	16,4,35,128,200,7,14
	.byte	'reserved_1E410',0
	.word	87972
	.byte	48,4,35,144,200,7,14
	.byte	'TPS_EXTIM',0
	.word	87981
	.byte	28,4,35,192,200,7,14
	.byte	'reserved_1E45C',0
	.word	87986
	.byte	164,23,4,35,220,200,7,14
	.byte	'TR',0
	.word	88006
	.byte	64,4,35,128,224,7,14
	.byte	'reserved_1F040',0
	.word	88011
	.byte	192,23,4,35,192,224,7,14
	.byte	'CCTRL',0
	.word	80655
	.byte	4,4,35,128,248,7,14
	.byte	'CCNT',0
	.word	80593
	.byte	4,4,35,132,248,7,14
	.byte	'ICNT',0
	.word	83572
	.byte	4,4,35,136,248,7,14
	.byte	'M1CNT',0
	.word	84160
	.byte	4,4,35,140,248,7,14
	.byte	'M2CNT',0
	.word	84223
	.byte	4,4,35,144,248,7,14
	.byte	'M3CNT',0
	.word	84286
	.byte	4,4,35,148,248,7,14
	.byte	'reserved_1FC18',0
	.word	87773
	.byte	232,1,4,35,152,248,7,14
	.byte	'DBGSR',0
	.word	81347
	.byte	4,4,35,128,250,7,14
	.byte	'reserved_1FD04',0
	.word	3558
	.byte	4,4,35,132,250,7,14
	.byte	'EXEVT',0
	.word	82691
	.byte	4,4,35,136,250,7,14
	.byte	'CREVT',0
	.word	81099
	.byte	4,4,35,140,250,7,14
	.byte	'SWEVT',0
	.word	85858
	.byte	4,4,35,144,250,7,14
	.byte	'reserved_1FD14',0
	.word	88022
	.byte	28,4,35,148,250,7,14
	.byte	'TRIG_ACC',0
	.word	86712
	.byte	4,4,35,176,250,7,14
	.byte	'reserved_1FD34',0
	.word	5718
	.byte	12,4,35,180,250,7,14
	.byte	'DMS',0
	.word	82318
	.byte	4,4,35,192,250,7,14
	.byte	'DCX',0
	.word	81600
	.byte	4,4,35,196,250,7,14
	.byte	'DBGTCR',0
	.word	81410
	.byte	4,4,35,200,250,7,14
	.byte	'reserved_1FD4C',0
	.word	88031
	.byte	180,1,4,35,204,250,7,14
	.byte	'PCXI',0
	.word	84660
	.byte	4,4,35,128,252,7,14
	.byte	'PSW',0
	.word	85096
	.byte	4,4,35,132,252,7,14
	.byte	'PC',0
	.word	84411
	.byte	4,4,35,136,252,7,14
	.byte	'reserved_1FE0C',0
	.word	5378
	.byte	8,4,35,140,252,7,14
	.byte	'SYSCON',0
	.word	85921
	.byte	4,4,35,148,252,7,14
	.byte	'CPU_ID',0
	.word	80973
	.byte	4,4,35,152,252,7,14
	.byte	'CORE_ID',0
	.word	80782
	.byte	4,4,35,156,252,7,14
	.byte	'BIV',0
	.word	80272
	.byte	4,4,35,160,252,7,14
	.byte	'BTV',0
	.word	80532
	.byte	4,4,35,164,252,7,14
	.byte	'ISP',0
	.word	83695
	.byte	4,4,35,168,252,7,14
	.byte	'ICR',0
	.word	83634
	.byte	4,4,35,172,252,7,14
	.byte	'reserved_1FE30',0
	.word	5378
	.byte	8,4,35,176,252,7,14
	.byte	'FCX',0
	.word	82754
	.byte	4,4,35,184,252,7,14
	.byte	'LCX',0
	.word	83947
	.byte	4,4,35,188,252,7,14
	.byte	'reserved_1FE40',0
	.word	59032
	.byte	16,4,35,192,252,7,14
	.byte	'CUS_ID',0
	.word	81162
	.byte	4,4,35,208,252,7,14
	.byte	'reserved_1FE54',0
	.word	88042
	.byte	172,1,4,35,212,252,7,14
	.byte	'D',0
	.word	88053
	.byte	64,4,35,128,254,7,14
	.byte	'reserved_1FF40',0
	.word	88062
	.byte	64,4,35,192,254,7,14
	.byte	'A',0
	.word	88071
	.byte	64,4,35,128,255,7,14
	.byte	'reserved_1FFC0',0
	.word	88062
	.byte	64,4,35,192,255,7,0,10
	.word	88080
	.byte	33
	.byte	'Ifx_CPU',0,22,210,19,3
	.word	93178
	.byte	15,8,124,9,1,16
	.byte	'IfxCpu_Id_0',0,0,16
	.byte	'IfxCpu_Id_1',0,1,16
	.byte	'IfxCpu_Id_2',0,2,16
	.byte	'IfxCpu_Id_3',0,3,16
	.byte	'IfxCpu_Id_4',0,4,16
	.byte	'IfxCpu_Id_6',0,6,16
	.byte	'IfxCpu_Id_none',0,7,0,33
	.byte	'IfxCpu_Id',0,8,133,1,3
	.word	93200
	.byte	33
	.byte	'IfxCpu_ResourceCpu',0,8,170,1,3
	.word	2073
	.byte	11
	.byte	'_Ifx_STM_ACCEN0_Bits',0,23,68,16,4,12
	.byte	'EN0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'EN1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'EN2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'EN3',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'EN4',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'EN5',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'EN6',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'EN7',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'EN8',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'EN9',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'EN10',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'EN11',0,1
	.word	525
	.byte	1,4,2,35,1,12
	.byte	'EN12',0,1
	.word	525
	.byte	1,3,2,35,1,12
	.byte	'EN13',0,1
	.word	525
	.byte	1,2,2,35,1,12
	.byte	'EN14',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'EN15',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'EN16',0,1
	.word	525
	.byte	1,7,2,35,2,12
	.byte	'EN17',0,1
	.word	525
	.byte	1,6,2,35,2,12
	.byte	'EN18',0,1
	.word	525
	.byte	1,5,2,35,2,12
	.byte	'EN19',0,1
	.word	525
	.byte	1,4,2,35,2,12
	.byte	'EN20',0,1
	.word	525
	.byte	1,3,2,35,2,12
	.byte	'EN21',0,1
	.word	525
	.byte	1,2,2,35,2,12
	.byte	'EN22',0,1
	.word	525
	.byte	1,1,2,35,2,12
	.byte	'EN23',0,1
	.word	525
	.byte	1,0,2,35,2,12
	.byte	'EN24',0,1
	.word	525
	.byte	1,7,2,35,3,12
	.byte	'EN25',0,1
	.word	525
	.byte	1,6,2,35,3,12
	.byte	'EN26',0,1
	.word	525
	.byte	1,5,2,35,3,12
	.byte	'EN27',0,1
	.word	525
	.byte	1,4,2,35,3,12
	.byte	'EN28',0,1
	.word	525
	.byte	1,3,2,35,3,12
	.byte	'EN29',0,1
	.word	525
	.byte	1,2,2,35,3,12
	.byte	'EN30',0,1
	.word	525
	.byte	1,1,2,35,3,12
	.byte	'EN31',0,1
	.word	525
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_STM_ACCEN0_Bits',0,23,102,3
	.word	93354
	.byte	11
	.byte	'_Ifx_STM_ACCEN1_Bits',0,23,105,16,4,12
	.byte	'reserved_0',0,4
	.word	328
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_ACCEN1_Bits',0,23,108,3
	.word	93911
	.byte	11
	.byte	'_Ifx_STM_CAP_Bits',0,23,111,16,4,12
	.byte	'STMCAP_63_32',0,4
	.word	328
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_CAP_Bits',0,23,114,3
	.word	93988
	.byte	11
	.byte	'_Ifx_STM_CAPSV_Bits',0,23,117,16,4,12
	.byte	'STMCAP_63_32',0,4
	.word	328
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_CAPSV_Bits',0,23,120,3
	.word	94061
	.byte	11
	.byte	'_Ifx_STM_CLC_Bits',0,23,123,16,4,12
	.byte	'DISR',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'DISS',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'reserved_2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'EDIS',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,4
	.word	328
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_STM_CLC_Bits',0,23,130,1,3
	.word	94138
	.byte	11
	.byte	'_Ifx_STM_CMCON_Bits',0,23,133,1,16,4,12
	.byte	'MSIZE0',0,1
	.word	525
	.byte	5,3,2,35,0,12
	.byte	'reserved_5',0,1
	.word	525
	.byte	3,0,2,35,0,12
	.byte	'MSTART0',0,1
	.word	525
	.byte	5,3,2,35,1,12
	.byte	'reserved_13',0,1
	.word	525
	.byte	3,0,2,35,1,12
	.byte	'MSIZE1',0,1
	.word	525
	.byte	5,3,2,35,2,12
	.byte	'reserved_21',0,1
	.word	525
	.byte	3,0,2,35,2,12
	.byte	'MSTART1',0,1
	.word	525
	.byte	5,3,2,35,3,12
	.byte	'reserved_29',0,1
	.word	525
	.byte	3,0,2,35,3,0,33
	.byte	'Ifx_STM_CMCON_Bits',0,23,143,1,3
	.word	94280
	.byte	11
	.byte	'_Ifx_STM_CMP_Bits',0,23,146,1,16,4,12
	.byte	'CMPVAL',0,4
	.word	328
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_CMP_Bits',0,23,149,1,3
	.word	94500
	.byte	11
	.byte	'_Ifx_STM_ICR_Bits',0,23,152,1,16,4,12
	.byte	'CMP0EN',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'CMP0IR',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'CMP0OS',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'reserved_3',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'CMP1EN',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'CMP1IR',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'CMP1OS',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'reserved_7',0,4
	.word	328
	.byte	25,0,2,35,0,0,33
	.byte	'Ifx_STM_ICR_Bits',0,23,162,1,3
	.word	94569
	.byte	11
	.byte	'_Ifx_STM_ID_Bits',0,23,165,1,16,4,12
	.byte	'MODREV',0,1
	.word	525
	.byte	8,0,2,35,0,12
	.byte	'MODTYPE',0,1
	.word	525
	.byte	8,0,2,35,1,12
	.byte	'MODNUM',0,2
	.word	1076
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_STM_ID_Bits',0,23,170,1,3
	.word	94772
	.byte	11
	.byte	'_Ifx_STM_ISCR_Bits',0,23,173,1,16,4,12
	.byte	'CMP0IRR',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'CMP0IRS',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'CMP1IRR',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'CMP1IRS',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,4
	.word	328
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_STM_ISCR_Bits',0,23,180,1,3
	.word	94876
	.byte	11
	.byte	'_Ifx_STM_KRST0_Bits',0,23,183,1,16,4,12
	.byte	'RST',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'RSTSTAT',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'reserved_2',0,4
	.word	328
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_STM_KRST0_Bits',0,23,188,1,3
	.word	95027
	.byte	11
	.byte	'_Ifx_STM_KRST1_Bits',0,23,191,1,16,4,12
	.byte	'RST',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'reserved_1',0,4
	.word	328
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_STM_KRST1_Bits',0,23,195,1,3
	.word	95138
	.byte	11
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,23,198,1,16,4,12
	.byte	'CLR',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'reserved_1',0,4
	.word	328
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_STM_KRSTCLR_Bits',0,23,202,1,3
	.word	95230
	.byte	11
	.byte	'_Ifx_STM_OCS_Bits',0,23,205,1,16,4,12
	.byte	'reserved_0',0,1
	.word	525
	.byte	3,5,2,35,0,12
	.byte	'reserved_3',0,4
	.word	328
	.byte	21,8,2,35,0,12
	.byte	'SUS',0,1
	.word	525
	.byte	4,4,2,35,3,12
	.byte	'SUS_P',0,1
	.word	525
	.byte	1,3,2,35,3,12
	.byte	'SUSSTA',0,1
	.word	525
	.byte	1,2,2,35,3,12
	.byte	'reserved_30',0,1
	.word	525
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_STM_OCS_Bits',0,23,213,1,3
	.word	95326
	.byte	11
	.byte	'_Ifx_STM_TIM0_Bits',0,23,216,1,16,4,12
	.byte	'STM_31_0',0,4
	.word	328
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM0_Bits',0,23,219,1,3
	.word	95494
	.byte	11
	.byte	'_Ifx_STM_TIM0SV_Bits',0,23,222,1,16,4,12
	.byte	'STM_31_0',0,4
	.word	328
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM0SV_Bits',0,23,225,1,3
	.word	95567
	.byte	11
	.byte	'_Ifx_STM_TIM1_Bits',0,23,228,1,16,4,12
	.byte	'STM_35_4',0,4
	.word	328
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM1_Bits',0,23,231,1,3
	.word	95644
	.byte	11
	.byte	'_Ifx_STM_TIM2_Bits',0,23,234,1,16,4,12
	.byte	'STM_39_8',0,4
	.word	328
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM2_Bits',0,23,237,1,3
	.word	95717
	.byte	11
	.byte	'_Ifx_STM_TIM3_Bits',0,23,240,1,16,4,12
	.byte	'STM_43_12',0,4
	.word	328
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM3_Bits',0,23,243,1,3
	.word	95790
	.byte	11
	.byte	'_Ifx_STM_TIM4_Bits',0,23,246,1,16,4,12
	.byte	'STM_47_16',0,4
	.word	328
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM4_Bits',0,23,249,1,3
	.word	95864
	.byte	11
	.byte	'_Ifx_STM_TIM5_Bits',0,23,252,1,16,4,12
	.byte	'STM_51_20',0,4
	.word	328
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM5_Bits',0,23,255,1,3
	.word	95938
	.byte	11
	.byte	'_Ifx_STM_TIM6_Bits',0,23,130,2,16,4,12
	.byte	'STM_63_32',0,4
	.word	328
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM6_Bits',0,23,133,2,3
	.word	96012
	.byte	13,23,141,2,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	93354
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_ACCEN0',0,23,146,2,3
	.word	96086
	.byte	13,23,149,2,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	93911
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_ACCEN1',0,23,154,2,3
	.word	96150
	.byte	13,23,157,2,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	93988
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_CAP',0,23,162,2,3
	.word	96214
	.byte	13,23,165,2,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	94061
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_CAPSV',0,23,170,2,3
	.word	96275
	.byte	13,23,173,2,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	94138
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_CLC',0,23,178,2,3
	.word	96338
	.byte	13,23,181,2,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	94280
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_CMCON',0,23,186,2,3
	.word	96399
	.byte	13,23,189,2,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	94500
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_CMP',0,23,194,2,3
	.word	96462
	.byte	13,23,197,2,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	94569
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_ICR',0,23,202,2,3
	.word	96523
	.byte	13,23,205,2,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	94772
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_ID',0,23,210,2,3
	.word	96584
	.byte	13,23,213,2,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	94876
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_ISCR',0,23,218,2,3
	.word	96644
	.byte	13,23,221,2,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	95027
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_KRST0',0,23,226,2,3
	.word	96706
	.byte	13,23,229,2,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	95138
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_KRST1',0,23,234,2,3
	.word	96769
	.byte	13,23,237,2,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	95230
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_KRSTCLR',0,23,242,2,3
	.word	96832
	.byte	13,23,245,2,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	95326
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_OCS',0,23,250,2,3
	.word	96897
	.byte	13,23,253,2,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	95494
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM0',0,23,130,3,3
	.word	96958
	.byte	13,23,133,3,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	95567
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM0SV',0,23,138,3,3
	.word	97020
	.byte	13,23,141,3,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	95644
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM1',0,23,146,3,3
	.word	97084
	.byte	13,23,149,3,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	95717
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM2',0,23,154,3,3
	.word	97146
	.byte	13,23,157,3,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	95790
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM3',0,23,162,3,3
	.word	97208
	.byte	13,23,165,3,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	95864
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM4',0,23,170,3,3
	.word	97270
	.byte	13,23,173,3,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	95938
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM5',0,23,178,3,3
	.word	97332
	.byte	13,23,181,3,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	96012
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM6',0,23,186,3,3
	.word	97394
	.byte	15,7,141,1,9,1,16
	.byte	'IfxCpu_CounterMode_normal',0,0,16
	.byte	'IfxCpu_CounterMode_task',0,1,0,33
	.byte	'IfxCpu_CounterMode',0,7,145,1,3
	.word	97456
	.byte	32,7,198,1,9,6,14
	.byte	'counter',0
	.word	2320
	.byte	4,2,35,0,14
	.byte	'overlfow',0
	.word	525
	.byte	1,2,35,4,0,33
	.byte	'IfxCpu_Counter',0,7,202,1,3
	.word	97545
	.byte	32,7,210,1,9,32,14
	.byte	'instruction',0
	.word	97545
	.byte	6,2,35,0,14
	.byte	'clock',0
	.word	97545
	.byte	6,2,35,6,14
	.byte	'counter1',0
	.word	97545
	.byte	6,2,35,12,14
	.byte	'counter2',0
	.word	97545
	.byte	6,2,35,18,14
	.byte	'counter3',0
	.word	97545
	.byte	6,2,35,24,0,33
	.byte	'IfxCpu_Perf',0,7,217,1,3
	.word	97611
	.byte	33
	.byte	'Ifx_P_ACCEN0_Bits',0,10,102,3
	.word	8906
	.byte	33
	.byte	'Ifx_P_ACCEN1_Bits',0,10,108,3
	.word	8819
	.byte	33
	.byte	'Ifx_P_ESR_Bits',0,10,130,1,3
	.word	5387
	.byte	33
	.byte	'Ifx_P_ID_Bits',0,10,138,1,3
	.word	3438
	.byte	33
	.byte	'Ifx_P_IN_Bits',0,10,160,1,3
	.word	4434
	.byte	33
	.byte	'Ifx_P_IOCR0_Bits',0,10,173,1,3
	.word	3567
	.byte	33
	.byte	'Ifx_P_IOCR12_Bits',0,10,186,1,3
	.word	4214
	.byte	33
	.byte	'Ifx_P_IOCR4_Bits',0,10,199,1,3
	.word	3782
	.byte	33
	.byte	'Ifx_P_IOCR8_Bits',0,10,212,1,3
	.word	3997
	.byte	33
	.byte	'Ifx_P_LPCR_Bits',0,10,231,1,3
	.word	8481
	.byte	33
	.byte	'Ifx_P_OMCR_Bits',0,10,253,1,3
	.word	8133
	.byte	33
	.byte	'Ifx_P_OMCR0_Bits',0,10,136,2,3
	.word	7120
	.byte	33
	.byte	'Ifx_P_OMCR12_Bits',0,10,146,2,3
	.word	7644
	.byte	33
	.byte	'Ifx_P_OMCR4_Bits',0,10,157,2,3
	.word	7294
	.byte	33
	.byte	'Ifx_P_OMCR8_Bits',0,10,168,2,3
	.word	7468
	.byte	33
	.byte	'Ifx_P_OMR_Bits',0,10,205,2,3
	.word	2867
	.byte	33
	.byte	'Ifx_P_OMSR_Bits',0,10,227,2,3
	.word	7800
	.byte	33
	.byte	'Ifx_P_OMSR0_Bits',0,10,237,2,3
	.word	6457
	.byte	33
	.byte	'Ifx_P_OMSR12_Bits',0,10,248,2,3
	.word	6945
	.byte	33
	.byte	'Ifx_P_OMSR4_Bits',0,10,131,3,3
	.word	6604
	.byte	33
	.byte	'Ifx_P_OMSR8_Bits',0,10,142,3,3
	.word	6773
	.byte	33
	.byte	'Ifx_P_OUT_Bits',0,10,164,3,3
	.word	2551
	.byte	33
	.byte	'Ifx_P_PCSR_Bits',0,10,187,3,3
	.word	6093
	.byte	33
	.byte	'Ifx_P_PDISC_Bits',0,10,209,3,3
	.word	5727
	.byte	33
	.byte	'Ifx_P_PDR0_Bits',0,10,230,3,3
	.word	4758
	.byte	33
	.byte	'Ifx_P_PDR1_Bits',0,10,251,3,3
	.word	5062
	.byte	33
	.byte	'Ifx_P_ACCEN0',0,10,136,4,3
	.word	9433
	.byte	33
	.byte	'Ifx_P_ACCEN1',0,10,144,4,3
	.word	8866
	.byte	33
	.byte	'Ifx_P_ESR',0,10,152,4,3
	.word	5678
	.byte	33
	.byte	'Ifx_P_ID',0,10,160,4,3
	.word	3518
	.byte	33
	.byte	'Ifx_P_IN',0,10,168,4,3
	.word	4709
	.byte	33
	.byte	'Ifx_P_IOCR0',0,10,176,4,3
	.word	3742
	.byte	33
	.byte	'Ifx_P_IOCR12',0,10,184,4,3
	.word	4394
	.byte	33
	.byte	'Ifx_P_IOCR4',0,10,192,4,3
	.word	3957
	.byte	33
	.byte	'Ifx_P_IOCR8',0,10,200,4,3
	.word	4174
	.byte	33
	.byte	'Ifx_P_LPCR',0,10,208,4,3
	.word	8761
	.byte	33
	.byte	'Ifx_P_OMCR',0,10,216,4,3
	.word	8441
	.byte	33
	.byte	'Ifx_P_OMCR0',0,10,224,4,3
	.word	7254
	.byte	33
	.byte	'Ifx_P_OMCR12',0,10,232,4,3
	.word	7760
	.byte	33
	.byte	'Ifx_P_OMCR4',0,10,240,4,3
	.word	7428
	.byte	33
	.byte	'Ifx_P_OMCR8',0,10,248,4,3
	.word	7604
	.byte	33
	.byte	'Ifx_P_OMR',0,10,128,5,3
	.word	3398
	.byte	33
	.byte	'Ifx_P_OMSR',0,10,136,5,3
	.word	8093
	.byte	33
	.byte	'Ifx_P_OMSR0',0,10,144,5,3
	.word	6564
	.byte	33
	.byte	'Ifx_P_OMSR12',0,10,152,5,3
	.word	7080
	.byte	33
	.byte	'Ifx_P_OMSR4',0,10,160,5,3
	.word	6733
	.byte	33
	.byte	'Ifx_P_OMSR8',0,10,168,5,3
	.word	6905
	.byte	33
	.byte	'Ifx_P_OUT',0,10,176,5,3
	.word	2827
	.byte	33
	.byte	'Ifx_P_PCSR',0,10,184,5,3
	.word	6417
	.byte	33
	.byte	'Ifx_P_PDISC',0,10,192,5,3
	.word	6053
	.byte	33
	.byte	'Ifx_P_PDR0',0,10,200,5,3
	.word	5022
	.byte	33
	.byte	'Ifx_P_PDR1',0,10,208,5,3
	.word	5338
	.byte	10
	.word	9473
	.byte	33
	.byte	'Ifx_P',0,10,128,6,3
	.word	98923
	.byte	15,9,73,9,1,16
	.byte	'IfxPort_ControlledBy_port',0,0,16
	.byte	'IfxPort_ControlledBy_hsct',0,1,0,33
	.byte	'IfxPort_ControlledBy',0,9,77,3
	.word	98943
	.byte	33
	.byte	'IfxPort_InputMode',0,9,87,3
	.word	10053
	.byte	15,9,91,9,1,16
	.byte	'IfxPort_LvdsMode_high',0,0,16
	.byte	'IfxPort_LvdsMode_medium',0,1,0,33
	.byte	'IfxPort_LvdsMode',0,9,95,3
	.word	99060
	.byte	33
	.byte	'IfxPort_OutputIdx',0,9,136,1,3
	.word	10354
	.byte	33
	.byte	'IfxPort_OutputMode',0,9,145,1,3
	.word	10258
	.byte	15,9,151,1,9,1,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,16
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,16
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,16
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,16
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed1',0,12,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed2',0,13,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed3',0,14,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed4',0,15,0,33
	.byte	'IfxPort_PadDriver',0,9,165,1,3
	.word	99196
	.byte	15,9,169,1,9,1,16
	.byte	'IfxPort_PadSupply_3v',0,0,16
	.byte	'IfxPort_PadSupply_5v',0,1,0,33
	.byte	'IfxPort_PadSupply',0,9,173,1,3
	.word	99646
	.byte	15,9,177,1,9,1,16
	.byte	'IfxPort_PinFunctionMode_digital',0,0,16
	.byte	'IfxPort_PinFunctionMode_analog',0,1,0,33
	.byte	'IfxPort_PinFunctionMode',0,9,181,1,3
	.word	99726
	.byte	33
	.byte	'IfxPort_State',0,9,193,1,3
	.word	10667
	.byte	33
	.byte	'IfxPort_Pin',0,9,250,1,3
	.word	23771
	.byte	11
	.byte	'_Ifx_SMU_ACCEN0_Bits',0,24,68,16,4,12
	.byte	'EN0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'EN1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'EN2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'EN3',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'EN4',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'EN5',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'EN6',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'EN7',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'EN8',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'EN9',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'EN10',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'EN11',0,1
	.word	525
	.byte	1,4,2,35,1,12
	.byte	'EN12',0,1
	.word	525
	.byte	1,3,2,35,1,12
	.byte	'EN13',0,1
	.word	525
	.byte	1,2,2,35,1,12
	.byte	'EN14',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'EN15',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'EN16',0,1
	.word	525
	.byte	1,7,2,35,2,12
	.byte	'EN17',0,1
	.word	525
	.byte	1,6,2,35,2,12
	.byte	'EN18',0,1
	.word	525
	.byte	1,5,2,35,2,12
	.byte	'EN19',0,1
	.word	525
	.byte	1,4,2,35,2,12
	.byte	'EN20',0,1
	.word	525
	.byte	1,3,2,35,2,12
	.byte	'EN21',0,1
	.word	525
	.byte	1,2,2,35,2,12
	.byte	'EN22',0,1
	.word	525
	.byte	1,1,2,35,2,12
	.byte	'EN23',0,1
	.word	525
	.byte	1,0,2,35,2,12
	.byte	'EN24',0,1
	.word	525
	.byte	1,7,2,35,3,12
	.byte	'EN25',0,1
	.word	525
	.byte	1,6,2,35,3,12
	.byte	'EN26',0,1
	.word	525
	.byte	1,5,2,35,3,12
	.byte	'EN27',0,1
	.word	525
	.byte	1,4,2,35,3,12
	.byte	'EN28',0,1
	.word	525
	.byte	1,3,2,35,3,12
	.byte	'EN29',0,1
	.word	525
	.byte	1,2,2,35,3,12
	.byte	'EN30',0,1
	.word	525
	.byte	1,1,2,35,3,12
	.byte	'EN31',0,1
	.word	525
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SMU_ACCEN0_Bits',0,24,102,3
	.word	99877
	.byte	11
	.byte	'_Ifx_SMU_ACCEN1_Bits',0,24,105,16,4,12
	.byte	'reserved_0',0,4
	.word	328
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SMU_ACCEN1_Bits',0,24,108,3
	.word	100434
	.byte	11
	.byte	'_Ifx_SMU_AD_Bits',0,24,111,16,4,12
	.byte	'DF0',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'DF1',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'DF2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'DF3',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'DF4',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'DF5',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'DF6',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'DF7',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'DF8',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'DF9',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'DF10',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'DF11',0,1
	.word	525
	.byte	1,4,2,35,1,12
	.byte	'DF12',0,1
	.word	525
	.byte	1,3,2,35,1,12
	.byte	'DF13',0,1
	.word	525
	.byte	1,2,2,35,1,12
	.byte	'DF14',0,1
	.word	525
	.byte	1,1,2,35,1,12
	.byte	'DF15',0,1
	.word	525
	.byte	1,0,2,35,1,12
	.byte	'DF16',0,1
	.word	525
	.byte	1,7,2,35,2,12
	.byte	'DF17',0,1
	.word	525
	.byte	1,6,2,35,2,12
	.byte	'DF18',0,1
	.word	525
	.byte	1,5,2,35,2,12
	.byte	'DF19',0,1
	.word	525
	.byte	1,4,2,35,2,12
	.byte	'DF20',0,1
	.word	525
	.byte	1,3,2,35,2,12
	.byte	'DF21',0,1
	.word	525
	.byte	1,2,2,35,2,12
	.byte	'DF22',0,1
	.word	525
	.byte	1,1,2,35,2,12
	.byte	'DF23',0,1
	.word	525
	.byte	1,0,2,35,2,12
	.byte	'DF24',0,1
	.word	525
	.byte	1,7,2,35,3,12
	.byte	'DF25',0,1
	.word	525
	.byte	1,6,2,35,3,12
	.byte	'DF26',0,1
	.word	525
	.byte	1,5,2,35,3,12
	.byte	'DF27',0,1
	.word	525
	.byte	1,4,2,35,3,12
	.byte	'DF28',0,1
	.word	525
	.byte	1,3,2,35,3,12
	.byte	'DF29',0,1
	.word	525
	.byte	1,2,2,35,3,12
	.byte	'DF30',0,1
	.word	525
	.byte	1,1,2,35,3,12
	.byte	'DF31',0,1
	.word	525
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SMU_AD_Bits',0,24,145,1,3
	.word	100511
	.byte	11
	.byte	'_Ifx_SMU_AEX_Bits',0,24,148,1,16,4,12
	.byte	'IRQ0STS',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'IRQ1STS',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'IRQ2STS',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'RST0STS',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'RST1STS',0,1
	.word	525
	.byte	1,3,2,35,0,12
	.byte	'RST2STS',0,1
	.word	525
	.byte	1,2,2,35,0,12
	.byte	'RST3STS',0,1
	.word	525
	.byte	1,1,2,35,0,12
	.byte	'RST4STS',0,1
	.word	525
	.byte	1,0,2,35,0,12
	.byte	'RST5STS',0,1
	.word	525
	.byte	1,7,2,35,1,12
	.byte	'NMISTS',0,1
	.word	525
	.byte	1,6,2,35,1,12
	.byte	'reserved_10',0,1
	.word	525
	.byte	1,5,2,35,1,12
	.byte	'EMSSTS',0,1
	.word	525
	.byte	1,4,2,35,1,12
	.byte	'reserved_12',0,1
	.word	525
	.byte	4,0,2,35,1,12
	.byte	'IRQ0AEM',0,1
	.word	525
	.byte	1,7,2,35,2,12
	.byte	'IRQ1AEM',0,1
	.word	525
	.byte	1,6,2,35,2,12
	.byte	'IRQ2AEM',0,1
	.word	525
	.byte	1,5,2,35,2,12
	.byte	'RST0AEM',0,1
	.word	525
	.byte	1,4,2,35,2,12
	.byte	'RST1AEM',0,1
	.word	525
	.byte	1,3,2,35,2,12
	.byte	'RST2AEM',0,1
	.word	525
	.byte	1,2,2,35,2,12
	.byte	'RST3AEM',0,1
	.word	525
	.byte	1,1,2,35,2,12
	.byte	'RST4AEM',0,1
	.word	525
	.byte	1,0,2,35,2,12
	.byte	'RST5AEM',0,1
	.word	525
	.byte	1,7,2,35,3,12
	.byte	'NMIAEM',0,1
	.word	525
	.byte	1,6,2,35,3,12
	.byte	'reserved_26',0,1
	.word	525
	.byte	1,5,2,35,3,12
	.byte	'EMSAEM',0,1
	.word	525
	.byte	1,4,2,35,3,12
	.byte	'reserved_28',0,1
	.word	525
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SMU_AEX_Bits',0,24,176,1,3
	.word	101061
	.byte	11
	.byte	'_Ifx_SMU_AEXCLR_Bits',0,24,179,1,16,4,12
	.byte	'IRQ0CLR',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'IRQ1CLR',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'IRQ2CLR',0,4
	.word	924
	.byte	1,29,2,35,0,12
	.byte	'RST0CLR',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'RST1CLR',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'RST2CLR',0,4
	.word	924
	.byte	1,26,2,35,0,12
	.byte	'RST3CLR',0,4
	.word	924
	.byte	1,25,2,35,0,12
	.byte	'RST4CLR',0,4
	.word	924
	.byte	1,24,2,35,0,12
	.byte	'RST5CLR',0,4
	.word	924
	.byte	1,23,2,35,0,12
	.byte	'NMICLR',0,4
	.word	924
	.byte	1,22,2,35,0,12
	.byte	'reserved_10',0,4
	.word	924
	.byte	1,21,2,35,0,12
	.byte	'EMSCLR',0,4
	.word	924
	.byte	1,20,2,35,0,12
	.byte	'reserved_12',0,4
	.word	924
	.byte	4,16,2,35,0,12
	.byte	'IRQ0AEMCLR',0,4
	.word	924
	.byte	1,15,2,35,0,12
	.byte	'IRQ1AEMCLR',0,4
	.word	924
	.byte	1,14,2,35,0,12
	.byte	'IRQ2AEMCLR',0,4
	.word	924
	.byte	1,13,2,35,0,12
	.byte	'RST0AEMCLR',0,4
	.word	924
	.byte	1,12,2,35,0,12
	.byte	'RST1AEMCLR',0,4
	.word	924
	.byte	1,11,2,35,0,12
	.byte	'RST2AEMCLR',0,4
	.word	924
	.byte	1,10,2,35,0,12
	.byte	'RST3AEMCLR',0,4
	.word	924
	.byte	1,9,2,35,0,12
	.byte	'RST4AEMCLR',0,4
	.word	924
	.byte	1,8,2,35,0,12
	.byte	'RST5AEMCLR',0,4
	.word	924
	.byte	1,7,2,35,0,12
	.byte	'NMIAEMCLR',0,4
	.word	924
	.byte	1,6,2,35,0,12
	.byte	'reserved_26',0,4
	.word	924
	.byte	1,5,2,35,0,12
	.byte	'EMSAEMCLR',0,4
	.word	924
	.byte	1,4,2,35,0,12
	.byte	'reserved_28',0,4
	.word	924
	.byte	4,0,2,35,0,0,33
	.byte	'Ifx_SMU_AEXCLR_Bits',0,24,207,1,3
	.word	101618
	.byte	11
	.byte	'_Ifx_SMU_AFCNT_Bits',0,24,210,1,16,4,12
	.byte	'FCNT',0,1
	.word	525
	.byte	4,4,2,35,0,12
	.byte	'ACNT',0,2
	.word	1076
	.byte	12,0,2,35,0,12
	.byte	'reserved_16',0,2
	.word	1076
	.byte	14,2,2,35,2,12
	.byte	'FCO',0,1
	.word	525
	.byte	1,1,2,35,3,12
	.byte	'ACO',0,1
	.word	525
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SMU_AFCNT_Bits',0,24,217,1,3
	.word	102214
	.byte	11
	.byte	'_Ifx_SMU_AG_Bits',0,24,220,1,16,4,12
	.byte	'SF0',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'SF1',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'SF2',0,4
	.word	924
	.byte	1,29,2,35,0,12
	.byte	'SF3',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'SF4',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'SF5',0,4
	.word	924
	.byte	1,26,2,35,0,12
	.byte	'SF6',0,4
	.word	924
	.byte	1,25,2,35,0,12
	.byte	'SF7',0,4
	.word	924
	.byte	1,24,2,35,0,12
	.byte	'SF8',0,4
	.word	924
	.byte	1,23,2,35,0,12
	.byte	'SF9',0,4
	.word	924
	.byte	1,22,2,35,0,12
	.byte	'SF10',0,4
	.word	924
	.byte	1,21,2,35,0,12
	.byte	'SF11',0,4
	.word	924
	.byte	1,20,2,35,0,12
	.byte	'SF12',0,4
	.word	924
	.byte	1,19,2,35,0,12
	.byte	'SF13',0,4
	.word	924
	.byte	1,18,2,35,0,12
	.byte	'SF14',0,4
	.word	924
	.byte	1,17,2,35,0,12
	.byte	'SF15',0,4
	.word	924
	.byte	1,16,2,35,0,12
	.byte	'SF16',0,4
	.word	924
	.byte	1,15,2,35,0,12
	.byte	'SF17',0,4
	.word	924
	.byte	1,14,2,35,0,12
	.byte	'SF18',0,4
	.word	924
	.byte	1,13,2,35,0,12
	.byte	'SF19',0,4
	.word	924
	.byte	1,12,2,35,0,12
	.byte	'SF20',0,4
	.word	924
	.byte	1,11,2,35,0,12
	.byte	'SF21',0,4
	.word	924
	.byte	1,10,2,35,0,12
	.byte	'SF22',0,4
	.word	924
	.byte	1,9,2,35,0,12
	.byte	'SF23',0,4
	.word	924
	.byte	1,8,2,35,0,12
	.byte	'SF24',0,4
	.word	924
	.byte	1,7,2,35,0,12
	.byte	'SF25',0,4
	.word	924
	.byte	1,6,2,35,0,12
	.byte	'SF26',0,4
	.word	924
	.byte	1,5,2,35,0,12
	.byte	'SF27',0,4
	.word	924
	.byte	1,4,2,35,0,12
	.byte	'SF28',0,4
	.word	924
	.byte	1,3,2,35,0,12
	.byte	'SF29',0,4
	.word	924
	.byte	1,2,2,35,0,12
	.byte	'SF30',0,4
	.word	924
	.byte	1,1,2,35,0,12
	.byte	'SF31',0,4
	.word	924
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_SMU_AG_Bits',0,24,254,1,3
	.word	102354
	.byte	11
	.byte	'_Ifx_SMU_AGC_Bits',0,24,129,2,16,4,12
	.byte	'IGCS0',0,4
	.word	924
	.byte	3,29,2,35,0,12
	.byte	'reserved_3',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'IGCS1',0,4
	.word	924
	.byte	3,25,2,35,0,12
	.byte	'reserved_7',0,4
	.word	924
	.byte	1,24,2,35,0,12
	.byte	'IGCS2',0,4
	.word	924
	.byte	3,21,2,35,0,12
	.byte	'reserved_11',0,4
	.word	924
	.byte	5,16,2,35,0,12
	.byte	'RCS',0,4
	.word	924
	.byte	6,10,2,35,0,12
	.byte	'reserved_22',0,4
	.word	924
	.byte	2,8,2,35,0,12
	.byte	'PES',0,4
	.word	924
	.byte	5,3,2,35,0,12
	.byte	'EFRST',0,4
	.word	924
	.byte	1,2,2,35,0,12
	.byte	'reserved_30',0,4
	.word	924
	.byte	2,0,2,35,0,0,33
	.byte	'Ifx_SMU_AGC_Bits',0,24,142,2,3
	.word	102905
	.byte	11
	.byte	'_Ifx_SMU_AGCF_Bits',0,24,145,2,16,4,12
	.byte	'CF0',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'CF1',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'CF2',0,4
	.word	924
	.byte	1,29,2,35,0,12
	.byte	'CF3',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'CF4',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'CF5',0,4
	.word	924
	.byte	1,26,2,35,0,12
	.byte	'CF6',0,4
	.word	924
	.byte	1,25,2,35,0,12
	.byte	'CF7',0,4
	.word	924
	.byte	1,24,2,35,0,12
	.byte	'CF8',0,4
	.word	924
	.byte	1,23,2,35,0,12
	.byte	'CF9',0,4
	.word	924
	.byte	1,22,2,35,0,12
	.byte	'CF10',0,4
	.word	924
	.byte	1,21,2,35,0,12
	.byte	'CF11',0,4
	.word	924
	.byte	1,20,2,35,0,12
	.byte	'CF12',0,4
	.word	924
	.byte	1,19,2,35,0,12
	.byte	'CF13',0,4
	.word	924
	.byte	1,18,2,35,0,12
	.byte	'CF14',0,4
	.word	924
	.byte	1,17,2,35,0,12
	.byte	'CF15',0,4
	.word	924
	.byte	1,16,2,35,0,12
	.byte	'CF16',0,4
	.word	924
	.byte	1,15,2,35,0,12
	.byte	'CF17',0,4
	.word	924
	.byte	1,14,2,35,0,12
	.byte	'CF18',0,4
	.word	924
	.byte	1,13,2,35,0,12
	.byte	'CF19',0,4
	.word	924
	.byte	1,12,2,35,0,12
	.byte	'CF20',0,4
	.word	924
	.byte	1,11,2,35,0,12
	.byte	'CF21',0,4
	.word	924
	.byte	1,10,2,35,0,12
	.byte	'CF22',0,4
	.word	924
	.byte	1,9,2,35,0,12
	.byte	'CF23',0,4
	.word	924
	.byte	1,8,2,35,0,12
	.byte	'CF24',0,4
	.word	924
	.byte	1,7,2,35,0,12
	.byte	'CF25',0,4
	.word	924
	.byte	1,6,2,35,0,12
	.byte	'CF26',0,4
	.word	924
	.byte	1,5,2,35,0,12
	.byte	'CF27',0,4
	.word	924
	.byte	1,4,2,35,0,12
	.byte	'CF28',0,4
	.word	924
	.byte	1,3,2,35,0,12
	.byte	'CF29',0,4
	.word	924
	.byte	1,2,2,35,0,12
	.byte	'CF30',0,4
	.word	924
	.byte	1,1,2,35,0,12
	.byte	'CF31',0,4
	.word	924
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_SMU_AGCF_Bits',0,24,179,2,3
	.word	103167
	.byte	11
	.byte	'_Ifx_SMU_AGFSP_Bits',0,24,182,2,16,4,12
	.byte	'FE0',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'FE1',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'FE2',0,4
	.word	924
	.byte	1,29,2,35,0,12
	.byte	'FE3',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'FE4',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'FE5',0,4
	.word	924
	.byte	1,26,2,35,0,12
	.byte	'FE6',0,4
	.word	924
	.byte	1,25,2,35,0,12
	.byte	'FE7',0,4
	.word	924
	.byte	1,24,2,35,0,12
	.byte	'FE8',0,4
	.word	924
	.byte	1,23,2,35,0,12
	.byte	'FE9',0,4
	.word	924
	.byte	1,22,2,35,0,12
	.byte	'FE10',0,4
	.word	924
	.byte	1,21,2,35,0,12
	.byte	'FE11',0,4
	.word	924
	.byte	1,20,2,35,0,12
	.byte	'FE12',0,4
	.word	924
	.byte	1,19,2,35,0,12
	.byte	'FE13',0,4
	.word	924
	.byte	1,18,2,35,0,12
	.byte	'FE14',0,4
	.word	924
	.byte	1,17,2,35,0,12
	.byte	'FE15',0,4
	.word	924
	.byte	1,16,2,35,0,12
	.byte	'FE16',0,4
	.word	924
	.byte	1,15,2,35,0,12
	.byte	'FE17',0,4
	.word	924
	.byte	1,14,2,35,0,12
	.byte	'FE18',0,4
	.word	924
	.byte	1,13,2,35,0,12
	.byte	'FE19',0,4
	.word	924
	.byte	1,12,2,35,0,12
	.byte	'FE20',0,4
	.word	924
	.byte	1,11,2,35,0,12
	.byte	'FE21',0,4
	.word	924
	.byte	1,10,2,35,0,12
	.byte	'FE22',0,4
	.word	924
	.byte	1,9,2,35,0,12
	.byte	'FE23',0,4
	.word	924
	.byte	1,8,2,35,0,12
	.byte	'FE24',0,4
	.word	924
	.byte	1,7,2,35,0,12
	.byte	'FE25',0,4
	.word	924
	.byte	1,6,2,35,0,12
	.byte	'FE26',0,4
	.word	924
	.byte	1,5,2,35,0,12
	.byte	'FE27',0,4
	.word	924
	.byte	1,4,2,35,0,12
	.byte	'FE28',0,4
	.word	924
	.byte	1,3,2,35,0,12
	.byte	'FE29',0,4
	.word	924
	.byte	1,2,2,35,0,12
	.byte	'FE30',0,4
	.word	924
	.byte	1,1,2,35,0,12
	.byte	'FE31',0,4
	.word	924
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_SMU_AGFSP_Bits',0,24,216,2,3
	.word	103722
	.byte	11
	.byte	'_Ifx_SMU_CLC_Bits',0,24,219,2,16,4,12
	.byte	'DISR',0,1
	.word	525
	.byte	1,7,2,35,0,12
	.byte	'DISS',0,1
	.word	525
	.byte	1,6,2,35,0,12
	.byte	'reserved_2',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'EDIS',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,4
	.word	328
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_SMU_CLC_Bits',0,24,226,2,3
	.word	104279
	.byte	11
	.byte	'_Ifx_SMU_CMD_Bits',0,24,229,2,16,4,12
	.byte	'CMD',0,4
	.word	924
	.byte	4,28,2,35,0,12
	.byte	'ARG',0,4
	.word	924
	.byte	4,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	924
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SMU_CMD_Bits',0,24,234,2,3
	.word	104422
	.byte	11
	.byte	'_Ifx_SMU_DBG_Bits',0,24,237,2,16,4,12
	.byte	'SSM',0,1
	.word	525
	.byte	2,6,2,35,0,12
	.byte	'reserved_2',0,4
	.word	328
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SMU_DBG_Bits',0,24,241,2,3
	.word	104525
	.byte	11
	.byte	'_Ifx_SMU_FSP_Bits',0,24,244,2,16,4,12
	.byte	'PRE1',0,4
	.word	924
	.byte	3,29,2,35,0,12
	.byte	'PRE2',0,4
	.word	924
	.byte	2,27,2,35,0,12
	.byte	'MODE',0,4
	.word	924
	.byte	2,25,2,35,0,12
	.byte	'PES',0,4
	.word	924
	.byte	1,24,2,35,0,12
	.byte	'TFSP_LOW',0,4
	.word	924
	.byte	14,10,2,35,0,12
	.byte	'TFSP_HIGH',0,4
	.word	924
	.byte	10,0,2,35,0,0,33
	.byte	'Ifx_SMU_FSP_Bits',0,24,252,2,3
	.word	104613
	.byte	11
	.byte	'_Ifx_SMU_ID_Bits',0,24,255,2,16,4,12
	.byte	'MOD_REV',0,1
	.word	525
	.byte	8,0,2,35,0,12
	.byte	'MOD_TYPE',0,1
	.word	525
	.byte	8,0,2,35,1,12
	.byte	'MOD_NUMBER',0,2
	.word	1076
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SMU_ID_Bits',0,24,132,3,3
	.word	104768
	.byte	11
	.byte	'_Ifx_SMU_KEYS_Bits',0,24,135,3,16,4,12
	.byte	'CFGLCK',0,4
	.word	924
	.byte	8,24,2,35,0,12
	.byte	'PERLCK',0,4
	.word	924
	.byte	8,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	924
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_SMU_KEYS_Bits',0,24,140,3,3
	.word	104878
	.byte	11
	.byte	'_Ifx_SMU_OCS_Bits',0,24,143,3,16,4,12
	.byte	'TGS',0,1
	.word	525
	.byte	2,6,2,35,0,12
	.byte	'TGB',0,1
	.word	525
	.byte	1,5,2,35,0,12
	.byte	'TG_P',0,1
	.word	525
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,4
	.word	328
	.byte	20,8,2,35,0,12
	.byte	'SUS',0,1
	.word	525
	.byte	4,4,2,35,3,12
	.byte	'SUS_P',0,1
	.word	525
	.byte	1,3,2,35,3,12
	.byte	'SUSSTA',0,1
	.word	525
	.byte	1,2,2,35,3,12
	.byte	'reserved_30',0,1
	.word	525
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_SMU_OCS_Bits',0,24,153,3,3
	.word	104990
	.byte	11
	.byte	'_Ifx_SMU_PCTL_Bits',0,24,156,3,16,4,12
	.byte	'HWDIR',0,4
	.word	924
	.byte	2,30,2,35,0,12
	.byte	'HWEN',0,4
	.word	924
	.byte	2,28,2,35,0,12
	.byte	'GFSCU_EN',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'GFSTS_EN',0,4
	.word	924
	.byte	1,26,2,35,0,12
	.byte	'reserved_6',0,4
	.word	924
	.byte	1,25,2,35,0,12
	.byte	'PCS',0,4
	.word	924
	.byte	1,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	924
	.byte	6,18,2,35,0,12
	.byte	'reserved_14',0,4
	.word	924
	.byte	9,9,2,35,0,12
	.byte	'reserved_23',0,4
	.word	924
	.byte	9,0,2,35,0,0,33
	.byte	'Ifx_SMU_PCTL_Bits',0,24,167,3,3
	.word	105182
	.byte	11
	.byte	'_Ifx_SMU_RMCTL_Bits',0,24,170,3,16,4,12
	.byte	'TE0',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'TE1',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'TE2',0,4
	.word	924
	.byte	1,29,2,35,0,12
	.byte	'TE3',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'TE4',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'TE5',0,4
	.word	924
	.byte	1,26,2,35,0,12
	.byte	'TE6',0,4
	.word	924
	.byte	1,25,2,35,0,12
	.byte	'TE7',0,4
	.word	924
	.byte	1,24,2,35,0,12
	.byte	'TE8',0,4
	.word	924
	.byte	1,23,2,35,0,12
	.byte	'TE9',0,4
	.word	924
	.byte	1,22,2,35,0,12
	.byte	'TE10',0,4
	.word	924
	.byte	1,21,2,35,0,12
	.byte	'reserved_11',0,4
	.word	924
	.byte	1,20,2,35,0,12
	.byte	'reserved_12',0,4
	.word	924
	.byte	1,19,2,35,0,12
	.byte	'reserved_13',0,4
	.word	924
	.byte	1,18,2,35,0,12
	.byte	'reserved_14',0,4
	.word	924
	.byte	1,17,2,35,0,12
	.byte	'reserved_15',0,4
	.word	924
	.byte	1,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	924
	.byte	1,15,2,35,0,12
	.byte	'reserved_17',0,4
	.word	924
	.byte	1,14,2,35,0,12
	.byte	'reserved_18',0,4
	.word	924
	.byte	1,13,2,35,0,12
	.byte	'reserved_19',0,4
	.word	924
	.byte	1,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	924
	.byte	1,11,2,35,0,12
	.byte	'reserved_21',0,4
	.word	924
	.byte	1,10,2,35,0,12
	.byte	'reserved_22',0,4
	.word	924
	.byte	1,9,2,35,0,12
	.byte	'reserved_23',0,4
	.word	924
	.byte	1,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	924
	.byte	1,7,2,35,0,12
	.byte	'reserved_25',0,4
	.word	924
	.byte	1,6,2,35,0,12
	.byte	'reserved_26',0,4
	.word	924
	.byte	1,5,2,35,0,12
	.byte	'reserved_27',0,4
	.word	924
	.byte	1,4,2,35,0,12
	.byte	'reserved_28',0,4
	.word	924
	.byte	1,3,2,35,0,12
	.byte	'reserved_29',0,4
	.word	924
	.byte	1,2,2,35,0,12
	.byte	'reserved_30',0,4
	.word	924
	.byte	1,1,2,35,0,12
	.byte	'reserved_31',0,4
	.word	924
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_SMU_RMCTL_Bits',0,24,204,3,3
	.word	105413
	.byte	11
	.byte	'_Ifx_SMU_RMEF_Bits',0,24,207,3,16,4,12
	.byte	'EF0',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'EF1',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'EF2',0,4
	.word	924
	.byte	1,29,2,35,0,12
	.byte	'EF3',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'EF4',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'EF5',0,4
	.word	924
	.byte	1,26,2,35,0,12
	.byte	'EF6',0,4
	.word	924
	.byte	1,25,2,35,0,12
	.byte	'EF7',0,4
	.word	924
	.byte	1,24,2,35,0,12
	.byte	'EF8',0,4
	.word	924
	.byte	1,23,2,35,0,12
	.byte	'EF9',0,4
	.word	924
	.byte	1,22,2,35,0,12
	.byte	'EF10',0,4
	.word	924
	.byte	1,21,2,35,0,12
	.byte	'reserved_11',0,4
	.word	924
	.byte	1,20,2,35,0,12
	.byte	'reserved_12',0,4
	.word	924
	.byte	1,19,2,35,0,12
	.byte	'reserved_13',0,4
	.word	924
	.byte	1,18,2,35,0,12
	.byte	'reserved_14',0,4
	.word	924
	.byte	1,17,2,35,0,12
	.byte	'reserved_15',0,4
	.word	924
	.byte	1,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	924
	.byte	1,15,2,35,0,12
	.byte	'reserved_17',0,4
	.word	924
	.byte	1,14,2,35,0,12
	.byte	'reserved_18',0,4
	.word	924
	.byte	1,13,2,35,0,12
	.byte	'reserved_19',0,4
	.word	924
	.byte	1,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	924
	.byte	1,11,2,35,0,12
	.byte	'reserved_21',0,4
	.word	924
	.byte	1,10,2,35,0,12
	.byte	'reserved_22',0,4
	.word	924
	.byte	1,9,2,35,0,12
	.byte	'reserved_23',0,4
	.word	924
	.byte	1,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	924
	.byte	1,7,2,35,0,12
	.byte	'reserved_25',0,4
	.word	924
	.byte	1,6,2,35,0,12
	.byte	'reserved_26',0,4
	.word	924
	.byte	1,5,2,35,0,12
	.byte	'reserved_27',0,4
	.word	924
	.byte	1,4,2,35,0,12
	.byte	'reserved_28',0,4
	.word	924
	.byte	1,3,2,35,0,12
	.byte	'reserved_29',0,4
	.word	924
	.byte	1,2,2,35,0,12
	.byte	'reserved_30',0,4
	.word	924
	.byte	1,1,2,35,0,12
	.byte	'reserved_31',0,4
	.word	924
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_SMU_RMEF_Bits',0,24,241,3,3
	.word	106117
	.byte	11
	.byte	'_Ifx_SMU_RMSTS_Bits',0,24,244,3,16,4,12
	.byte	'STS0',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'STS1',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'STS2',0,4
	.word	924
	.byte	1,29,2,35,0,12
	.byte	'STS3',0,4
	.word	924
	.byte	1,28,2,35,0,12
	.byte	'STS4',0,4
	.word	924
	.byte	1,27,2,35,0,12
	.byte	'STS5',0,4
	.word	924
	.byte	1,26,2,35,0,12
	.byte	'STS6',0,4
	.word	924
	.byte	1,25,2,35,0,12
	.byte	'STS7',0,4
	.word	924
	.byte	1,24,2,35,0,12
	.byte	'STS8',0,4
	.word	924
	.byte	1,23,2,35,0,12
	.byte	'STS9',0,4
	.word	924
	.byte	1,22,2,35,0,12
	.byte	'STS10',0,4
	.word	924
	.byte	1,21,2,35,0,12
	.byte	'reserved_11',0,4
	.word	924
	.byte	1,20,2,35,0,12
	.byte	'reserved_12',0,4
	.word	924
	.byte	1,19,2,35,0,12
	.byte	'reserved_13',0,4
	.word	924
	.byte	1,18,2,35,0,12
	.byte	'reserved_14',0,4
	.word	924
	.byte	1,17,2,35,0,12
	.byte	'reserved_15',0,4
	.word	924
	.byte	1,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	924
	.byte	1,15,2,35,0,12
	.byte	'reserved_17',0,4
	.word	924
	.byte	1,14,2,35,0,12
	.byte	'reserved_18',0,4
	.word	924
	.byte	1,13,2,35,0,12
	.byte	'reserved_19',0,4
	.word	924
	.byte	1,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	924
	.byte	1,11,2,35,0,12
	.byte	'reserved_21',0,4
	.word	924
	.byte	1,10,2,35,0,12
	.byte	'reserved_22',0,4
	.word	924
	.byte	1,9,2,35,0,12
	.byte	'reserved_23',0,4
	.word	924
	.byte	1,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	924
	.byte	1,7,2,35,0,12
	.byte	'reserved_25',0,4
	.word	924
	.byte	1,6,2,35,0,12
	.byte	'reserved_26',0,4
	.word	924
	.byte	1,5,2,35,0,12
	.byte	'reserved_27',0,4
	.word	924
	.byte	1,4,2,35,0,12
	.byte	'reserved_28',0,4
	.word	924
	.byte	1,3,2,35,0,12
	.byte	'reserved_29',0,4
	.word	924
	.byte	1,2,2,35,0,12
	.byte	'reserved_30',0,4
	.word	924
	.byte	1,1,2,35,0,12
	.byte	'reserved_31',0,4
	.word	924
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_SMU_RMSTS_Bits',0,24,150,4,3
	.word	106819
	.byte	11
	.byte	'_Ifx_SMU_RTAC00_Bits',0,24,153,4,16,4,12
	.byte	'GID0',0,4
	.word	924
	.byte	4,28,2,35,0,12
	.byte	'ALID0',0,4
	.word	924
	.byte	5,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	924
	.byte	7,16,2,35,0,12
	.byte	'GID1',0,4
	.word	924
	.byte	4,12,2,35,0,12
	.byte	'ALID1',0,4
	.word	924
	.byte	5,7,2,35,0,12
	.byte	'reserved_25',0,4
	.word	924
	.byte	7,0,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC00_Bits',0,24,161,4,3
	.word	107534
	.byte	11
	.byte	'_Ifx_SMU_RTAC01_Bits',0,24,164,4,16,4,12
	.byte	'GID2',0,4
	.word	924
	.byte	4,28,2,35,0,12
	.byte	'ALID2',0,4
	.word	924
	.byte	5,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	924
	.byte	7,16,2,35,0,12
	.byte	'GID3',0,4
	.word	924
	.byte	4,12,2,35,0,12
	.byte	'ALID3',0,4
	.word	924
	.byte	5,7,2,35,0,12
	.byte	'reserved_25',0,4
	.word	924
	.byte	7,0,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC01_Bits',0,24,172,4,3
	.word	107702
	.byte	11
	.byte	'_Ifx_SMU_RTAC10_Bits',0,24,175,4,16,4,12
	.byte	'GID0',0,4
	.word	924
	.byte	4,28,2,35,0,12
	.byte	'ALID0',0,4
	.word	924
	.byte	5,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	924
	.byte	7,16,2,35,0,12
	.byte	'GID1',0,4
	.word	924
	.byte	4,12,2,35,0,12
	.byte	'ALID1',0,4
	.word	924
	.byte	5,7,2,35,0,12
	.byte	'reserved_25',0,4
	.word	924
	.byte	7,0,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC10_Bits',0,24,183,4,3
	.word	107870
	.byte	11
	.byte	'_Ifx_SMU_RTAC11_Bits',0,24,186,4,16,4,12
	.byte	'GID2',0,4
	.word	924
	.byte	4,28,2,35,0,12
	.byte	'ALID2',0,4
	.word	924
	.byte	5,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	924
	.byte	7,16,2,35,0,12
	.byte	'GID3',0,4
	.word	924
	.byte	4,12,2,35,0,12
	.byte	'ALID3',0,4
	.word	924
	.byte	5,7,2,35,0,12
	.byte	'reserved_25',0,4
	.word	924
	.byte	7,0,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC11_Bits',0,24,194,4,3
	.word	108038
	.byte	11
	.byte	'_Ifx_SMU_RTC_Bits',0,24,197,4,16,4,12
	.byte	'RT0E',0,4
	.word	924
	.byte	1,31,2,35,0,12
	.byte	'RT1E',0,4
	.word	924
	.byte	1,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	924
	.byte	6,24,2,35,0,12
	.byte	'RTD',0,4
	.word	924
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SMU_RTC_Bits',0,24,203,4,3
	.word	108206
	.byte	11
	.byte	'_Ifx_SMU_STS_Bits',0,24,206,4,16,4,12
	.byte	'CMD',0,4
	.word	924
	.byte	4,28,2,35,0,12
	.byte	'ARG',0,4
	.word	924
	.byte	4,24,2,35,0,12
	.byte	'RES',0,4
	.word	924
	.byte	1,23,2,35,0,12
	.byte	'ASCE',0,4
	.word	924
	.byte	1,22,2,35,0,12
	.byte	'FSP',0,4
	.word	924
	.byte	2,20,2,35,0,12
	.byte	'FSTS',0,4
	.word	924
	.byte	1,19,2,35,0,12
	.byte	'reserved_13',0,4
	.word	924
	.byte	3,16,2,35,0,12
	.byte	'RTS0',0,4
	.word	924
	.byte	1,15,2,35,0,12
	.byte	'RTME0',0,4
	.word	924
	.byte	1,14,2,35,0,12
	.byte	'RTS1',0,4
	.word	924
	.byte	1,13,2,35,0,12
	.byte	'RTME1',0,4
	.word	924
	.byte	1,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	924
	.byte	12,0,2,35,0,0,33
	.byte	'Ifx_SMU_STS_Bits',0,24,220,4,3
	.word	108326
	.byte	13,24,228,4,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	99877
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_ACCEN0',0,24,233,4,3
	.word	108581
	.byte	13,24,236,4,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	100434
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_ACCEN1',0,24,241,4,3
	.word	108645
	.byte	13,24,244,4,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	100511
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AD',0,24,249,4,3
	.word	108709
	.byte	13,24,252,4,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	101061
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AEX',0,24,129,5,3
	.word	108769
	.byte	13,24,132,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	101618
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AEXCLR',0,24,137,5,3
	.word	108830
	.byte	13,24,140,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	102214
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AFCNT',0,24,145,5,3
	.word	108894
	.byte	13,24,148,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	102354
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AG',0,24,153,5,3
	.word	108957
	.byte	13,24,156,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	102905
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AGC',0,24,161,5,3
	.word	109017
	.byte	13,24,164,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	103167
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AGCF',0,24,169,5,3
	.word	109078
	.byte	13,24,172,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	103722
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AGFSP',0,24,177,5,3
	.word	109140
	.byte	13,24,180,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	104279
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_CLC',0,24,185,5,3
	.word	109203
	.byte	13,24,188,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	104422
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_CMD',0,24,193,5,3
	.word	109264
	.byte	13,24,196,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	104525
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_DBG',0,24,201,5,3
	.word	109325
	.byte	13,24,204,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	104613
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_FSP',0,24,209,5,3
	.word	109386
	.byte	13,24,212,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	104768
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_ID',0,24,217,5,3
	.word	109447
	.byte	13,24,220,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	104878
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_KEYS',0,24,225,5,3
	.word	109507
	.byte	13,24,228,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	104990
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_OCS',0,24,233,5,3
	.word	109569
	.byte	13,24,236,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	105182
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_PCTL',0,24,241,5,3
	.word	109630
	.byte	13,24,244,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	105413
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RMCTL',0,24,249,5,3
	.word	109692
	.byte	13,24,252,5,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	106117
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RMEF',0,24,129,6,3
	.word	109755
	.byte	13,24,132,6,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	106819
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RMSTS',0,24,137,6,3
	.word	109817
	.byte	13,24,140,6,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	107534
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC00',0,24,145,6,3
	.word	109880
	.byte	13,24,148,6,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	107702
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC01',0,24,153,6,3
	.word	109944
	.byte	13,24,156,6,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	107870
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC10',0,24,161,6,3
	.word	110008
	.byte	13,24,164,6,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	108038
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC11',0,24,169,6,3
	.word	110072
	.byte	13,24,172,6,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	108206
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RTC',0,24,177,6,3
	.word	110136
	.byte	13,24,180,6,9,4,14
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	518
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	108326
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_STS',0,24,185,6,3
	.word	110197
	.byte	15,11,210,2,9,1,16
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy30',0,1,16
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy60',0,2,16
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy120',0,3,16
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy240',0,4,0,33
	.byte	'IfxScuCcu_LowPowerDivRatio',0,11,216,2,3
	.word	110258
	.byte	15,11,220,2,9,1,16
	.byte	'IfxScuCcu_ModulationAmplitude_0p5',0,0,16
	.byte	'IfxScuCcu_ModulationAmplitude_1p0',0,1,16
	.byte	'IfxScuCcu_ModulationAmplitude_1p25',0,2,16
	.byte	'IfxScuCcu_ModulationAmplitude_1p5',0,3,16
	.byte	'IfxScuCcu_ModulationAmplitude_2p0',0,4,16
	.byte	'IfxScuCcu_ModulationAmplitude_2p5',0,5,16
	.byte	'IfxScuCcu_ModulationAmplitude_count',0,6,0,33
	.byte	'IfxScuCcu_ModulationAmplitude',0,11,229,2,3
	.word	110451
	.byte	15,11,254,3,9,1,16
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc1',0,0,16
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc0',0,1,16
	.byte	'IfxScuCcu_PllInputClockSelection_fSysclk',0,2,0,33
	.byte	'IfxScuCcu_PllInputClockSelection',0,11,131,4,3
	.word	110752
	.byte	15,11,135,4,9,1,16
	.byte	'IfxScuCcu_Traprequest_esr0',0,0,16
	.byte	'IfxScuCcu_Traprequest_esr1',0,1,16
	.byte	'IfxScuCcu_Traprequest_trap2',0,2,16
	.byte	'IfxScuCcu_Traprequest_smu',0,3,0,33
	.byte	'IfxScuCcu_Traprequest',0,11,141,4,3
	.word	110926
	.byte	15,11,147,4,9,1,16
	.byte	'IfxScuCcu_ModEn_disabled',0,0,16
	.byte	'IfxScuCcu_ModEn_enabled',0,1,0,33
	.byte	'IfxScuCcu_ModEn',0,11,151,4,3
	.word	111080
	.byte	32,11,162,4,9,6,14
	.byte	'pDivider',0
	.word	525
	.byte	1,2,35,0,14
	.byte	'nDivider',0
	.word	525
	.byte	1,2,35,1,14
	.byte	'k2Divider',0
	.word	525
	.byte	1,2,35,2,14
	.byte	'k3Divider',0
	.word	525
	.byte	1,2,35,3,14
	.byte	'k3DividerBypass',0
	.word	525
	.byte	1,2,35,4,0,33
	.byte	'IfxScuCcu_PerPllConfig',0,11,171,4,3
	.word	111165
	.byte	32,11,176,4,9,4,14
	.byte	'pDivider',0
	.word	525
	.byte	1,2,35,0,14
	.byte	'nDivider',0
	.word	525
	.byte	1,2,35,1,14
	.byte	'k2Divider',0
	.word	525
	.byte	1,2,35,2,0,33
	.byte	'IfxScuCcu_SysPllConfig',0,11,181,4,3
	.word	111303
	.byte	32,11,189,4,9,8,14
	.byte	'value',0
	.word	2320
	.byte	4,2,35,0,14
	.byte	'mask',0
	.word	2320
	.byte	4,2,35,4,0,33
	.byte	'IfxScuCcu_CcuconRegConfig',0,11,193,4,3
	.word	111397
	.byte	32,11,197,4,9,6,14
	.byte	'k2Step',0
	.word	525
	.byte	1,2,35,0,14
	.byte	'waitTime',0
	.word	226
	.byte	4,2,35,2,0,33
	.byte	'IfxScuCcu_PllStepConfig',0,11,201,4,3
	.word	111468
	.byte	32,11,205,4,9,16,14
	.byte	'xtalFrequency',0
	.word	2320
	.byte	4,2,35,0,14
	.byte	'pllInputClockSelection',0
	.word	110752
	.byte	1,2,35,4,14
	.byte	'sysPllConfig',0
	.word	111303
	.byte	4,2,35,6,14
	.byte	'perPllConfig',0
	.word	111165
	.byte	6,2,35,10,0,33
	.byte	'IfxScuCcu_pllsParameterConfig',0,11,211,4,3
	.word	111542
	.byte	32,11,219,4,9,8,14
	.byte	'value',0
	.word	2320
	.byte	4,2,35,0,14
	.byte	'mask',0
	.word	2320
	.byte	4,2,35,4,0,33
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,11,223,4,3
	.word	111687
	.byte	32,11,231,4,9,80,14
	.byte	'ccucon0',0
	.word	111397
	.byte	8,2,35,0,14
	.byte	'ccucon1',0
	.word	111397
	.byte	8,2,35,8,14
	.byte	'ccucon2',0
	.word	111397
	.byte	8,2,35,16,14
	.byte	'ccucon5',0
	.word	111397
	.byte	8,2,35,24,14
	.byte	'ccucon6',0
	.word	111397
	.byte	8,2,35,32,14
	.byte	'ccucon7',0
	.word	111397
	.byte	8,2,35,40,14
	.byte	'ccucon8',0
	.word	111397
	.byte	8,2,35,48,14
	.byte	'ccucon9',0
	.word	111397
	.byte	8,2,35,56,14
	.byte	'ccucon10',0
	.word	111397
	.byte	8,2,35,64,14
	.byte	'ccucon11',0
	.word	111397
	.byte	8,2,35,72,0,33
	.byte	'IfxScuCcu_ClockDistributionConfig',0,11,243,4,3
	.word	111763
	.byte	32,11,247,4,9,20,14
	.byte	'pllsParameters',0
	.word	111542
	.byte	16,2,35,0,14
	.byte	'waitTime',0
	.word	226
	.byte	4,2,35,16,0,33
	.byte	'IfxScuCcu_InitialStepConfig',0,11,251,4,3
	.word	111985
	.byte	20
	.word	111468
	.byte	3
	.word	112071
	.byte	32,11,255,4,9,8,14
	.byte	'numOfSteps',0
	.word	525
	.byte	1,2,35,0,14
	.byte	'pllSteps',0
	.word	112076
	.byte	4,2,35,4,0,33
	.byte	'IfxScuCcu_PllThrottleConfig',0,11,131,5,3
	.word	112081
	.byte	32,11,137,5,9,2,14
	.byte	'Mod_Enable',0
	.word	111080
	.byte	1,2,35,0,14
	.byte	'Mod_Amp',0
	.word	110451
	.byte	1,2,35,1,0,33
	.byte	'IfxScuCcu_Mod_Config',0,11,141,5,3
	.word	112163
	.byte	32,15,56,15,16,14
	.byte	'module',0
	.word	20401
	.byte	4,2,35,0,14
	.byte	'pin',0
	.word	23771
	.byte	8,2,35,4,14
	.byte	'select',0
	.word	23810
	.byte	1,2,35,12,0,20
	.word	112237
	.byte	33
	.byte	'IfxCcu6_Cc60in_In',0,15,61,3
	.word	112288
	.byte	32,15,64,15,16,14
	.byte	'module',0
	.word	20401
	.byte	4,2,35,0,14
	.byte	'pin',0
	.word	23771
	.byte	8,2,35,4,14
	.byte	'select',0
	.word	23810
	.byte	1,2,35,12,0,20
	.word	112319
	.byte	33
	.byte	'IfxCcu6_Cc61in_In',0,15,69,3
	.word	112370
	.byte	32,15,72,15,16,14
	.byte	'module',0
	.word	20401
	.byte	4,2,35,0,14
	.byte	'pin',0
	.word	23771
	.byte	8,2,35,4,14
	.byte	'select',0
	.word	23810
	.byte	1,2,35,12,0,20
	.word	112401
	.byte	33
	.byte	'IfxCcu6_Cc62in_In',0,15,77,3
	.word	112452
	.byte	32,15,80,15,16,14
	.byte	'module',0
	.word	20401
	.byte	4,2,35,0,14
	.byte	'pin',0
	.word	23771
	.byte	8,2,35,4,14
	.byte	'select',0
	.word	23810
	.byte	1,2,35,12,0,20
	.word	112483
	.byte	33
	.byte	'IfxCcu6_Ccpos0_In',0,15,85,3
	.word	112534
	.byte	32,15,88,15,16,14
	.byte	'module',0
	.word	20401
	.byte	4,2,35,0,14
	.byte	'pin',0
	.word	23771
	.byte	8,2,35,4,14
	.byte	'select',0
	.word	23810
	.byte	1,2,35,12,0,20
	.word	112565
	.byte	33
	.byte	'IfxCcu6_Ccpos1_In',0,15,93,3
	.word	112616
	.byte	32,15,96,15,16,14
	.byte	'module',0
	.word	20401
	.byte	4,2,35,0,14
	.byte	'pin',0
	.word	23771
	.byte	8,2,35,4,14
	.byte	'select',0
	.word	23810
	.byte	1,2,35,12,0,20
	.word	112647
	.byte	33
	.byte	'IfxCcu6_Ccpos2_In',0,15,101,3
	.word	112698
	.byte	32,15,104,15,16,14
	.byte	'module',0
	.word	20401
	.byte	4,2,35,0,14
	.byte	'pin',0
	.word	23771
	.byte	8,2,35,4,14
	.byte	'select',0
	.word	23810
	.byte	1,2,35,12,0,20
	.word	112729
	.byte	33
	.byte	'IfxCcu6_Ctrap_In',0,15,109,3
	.word	112780
	.byte	20
	.word	23928
	.byte	33
	.byte	'IfxCcu6_T12hr_In',0,15,117,3
	.word	112810
	.byte	20
	.word	23989
	.byte	33
	.byte	'IfxCcu6_T13hr_In',0,15,125,3
	.word	112840
	.byte	32,15,128,1,15,16,14
	.byte	'module',0
	.word	20401
	.byte	4,2,35,0,14
	.byte	'pin',0
	.word	23771
	.byte	8,2,35,4,14
	.byte	'select',0
	.word	10354
	.byte	1,2,35,12,0,20
	.word	112870
	.byte	33
	.byte	'IfxCcu6_Cc60_Out',0,15,133,1,3
	.word	112922
	.byte	32,15,136,1,15,16,14
	.byte	'module',0
	.word	20401
	.byte	4,2,35,0,14
	.byte	'pin',0
	.word	23771
	.byte	8,2,35,4,14
	.byte	'select',0
	.word	10354
	.byte	1,2,35,12,0,20
	.word	112953
	.byte	33
	.byte	'IfxCcu6_Cc61_Out',0,15,141,1,3
	.word	113005
	.byte	32,15,144,1,15,16,14
	.byte	'module',0
	.word	20401
	.byte	4,2,35,0,14
	.byte	'pin',0
	.word	23771
	.byte	8,2,35,4,14
	.byte	'select',0
	.word	10354
	.byte	1,2,35,12,0,20
	.word	113036
	.byte	33
	.byte	'IfxCcu6_Cc62_Out',0,15,149,1,3
	.word	113088
	.byte	32,15,152,1,15,16,14
	.byte	'module',0
	.word	20401
	.byte	4,2,35,0,14
	.byte	'pin',0
	.word	23771
	.byte	8,2,35,4,14
	.byte	'select',0
	.word	10354
	.byte	1,2,35,12,0,20
	.word	113119
	.byte	33
	.byte	'IfxCcu6_Cout60_Out',0,15,157,1,3
	.word	113171
	.byte	32,15,160,1,15,16,14
	.byte	'module',0
	.word	20401
	.byte	4,2,35,0,14
	.byte	'pin',0
	.word	23771
	.byte	8,2,35,4,14
	.byte	'select',0
	.word	10354
	.byte	1,2,35,12,0,20
	.word	113204
	.byte	33
	.byte	'IfxCcu6_Cout61_Out',0,15,165,1,3
	.word	113256
	.byte	32,15,168,1,15,16,14
	.byte	'module',0
	.word	20401
	.byte	4,2,35,0,14
	.byte	'pin',0
	.word	23771
	.byte	8,2,35,4,14
	.byte	'select',0
	.word	10354
	.byte	1,2,35,12,0,20
	.word	113289
	.byte	33
	.byte	'IfxCcu6_Cout62_Out',0,15,173,1,3
	.word	113341
	.byte	32,15,176,1,15,16,14
	.byte	'module',0
	.word	20401
	.byte	4,2,35,0,14
	.byte	'pin',0
	.word	23771
	.byte	8,2,35,4,14
	.byte	'select',0
	.word	10354
	.byte	1,2,35,12,0,20
	.word	113374
	.byte	33
	.byte	'IfxCcu6_Cout63_Out',0,15,181,1,3
	.word	113426
	.byte	33
	.byte	'IfxCcu6_CaptureCompareInput',0,12,87,3
	.word	21302
	.byte	33
	.byte	'IfxCcu6_CaptureCompareInputSignal',0,12,97,3
	.word	21560
	.byte	33
	.byte	'IfxCcu6_CaptureCompareState',0,12,106,3
	.word	23658
	.byte	33
	.byte	'IfxCcu6_ChannelOut',0,12,119,3
	.word	23393
	.byte	15,12,124,9,1,16
	.byte	'IfxCcu6_CountingInputMode_internal',0,0,16
	.byte	'IfxCcu6_CountingInputMode_manual',0,1,16
	.byte	'IfxCcu6_CountingInputMode_externalRising',0,2,16
	.byte	'IfxCcu6_CountingInputMode_externalFalling',0,3,0,33
	.byte	'IfxCcu6_CountingInputMode',0,12,134,1,3
	.word	113600
	.byte	15,12,149,1,9,1,16
	.byte	'IfxCcu6_ExternalTriggerMode_disable',0,0,16
	.byte	'IfxCcu6_ExternalTriggerMode_risingEdge',0,1,16
	.byte	'IfxCcu6_ExternalTriggerMode_fallingEdge',0,2,16
	.byte	'IfxCcu6_ExternalTriggerMode_anyEdge',0,3,0,33
	.byte	'IfxCcu6_ExternalTriggerMode',0,12,158,1,3
	.word	113800
	.byte	15,12,163,1,9,1,16
	.byte	'IfxCcu6_HallSensorTriggerMode_permanentCheck',0,0,16
	.byte	'IfxCcu6_HallSensorTriggerMode_cM63',0,1,16
	.byte	'IfxCcu6_HallSensorTriggerMode_t13PM',0,2,16
	.byte	'IfxCcu6_HallSensorTriggerMode_off',0,3,16
	.byte	'IfxCcu6_HallSensorTriggerMode_t12PMCountingUp',0,4,16
	.byte	'IfxCcu6_HallSensorTriggerMode_t12OMCountingDown',0,5,16
	.byte	'IfxCcu6_HallSensorTriggerMode_cM61CountingUp',0,6,16
	.byte	'IfxCcu6_HallSensorTriggerMode_cM61CountingDown',0,7,0,33
	.byte	'IfxCcu6_HallSensorTriggerMode',0,12,174,1,3
	.word	114003
	.byte	33
	.byte	'IfxCcu6_InterruptSource',0,12,200,1,3
	.word	22745
	.byte	15,12,205,1,9,1,16
	.byte	'IfxCcu6_MultiChannelSwitchingSelect_noEvent',0,0,16
	.byte	'IfxCcu6_MultiChannelSwitchingSelect_correctHallEvent',0,1,16
	.byte	'IfxCcu6_MultiChannelSwitchingSelect_t13PeriodMatch',0,2,16
	.byte	'IfxCcu6_MultiChannelSwitchingSelect_t12OneMatch',0,3,16
	.byte	'IfxCcu6_MultiChannelSwitchingSelect_t12Channel1CompareMatch',0,4,16
	.byte	'IfxCcu6_MultiChannelSwitchingSelect_t12PeriodMatch',0,5,0,33
	.byte	'IfxCcu6_MultiChannelSwitchingSelect',0,12,214,1,3
	.word	114434
	.byte	15,12,219,1,9,1,16
	.byte	'IfxCcu6_MultiChannelSwitchingSync_direct',0,0,16
	.byte	'IfxCcu6_MultiChannelSwitchingSync_t13ZeroMatch',0,1,16
	.byte	'IfxCcu6_MultiChannelSwitchingSync_t12ZeroMatch',0,2,0,33
	.byte	'IfxCcu6_MultiChannelSwitchingSync',0,12,226,1,3
	.word	114805
	.byte	33
	.byte	'IfxCcu6_ServiceRequest',0,12,236,1,3
	.word	23278
	.byte	15,12,241,1,9,1,16
	.byte	'IfxCcu6_SleepMode_enable',0,0,16
	.byte	'IfxCcu6_SleepMode_disable',0,1,0,33
	.byte	'IfxCcu6_SleepMode',0,12,245,1,3
	.word	115028
	.byte	15,12,249,1,9,1,16
	.byte	'IfxCcu6_SuspendMode_none',0,0,16
	.byte	'IfxCcu6_SuspendMode_hard',0,1,16
	.byte	'IfxCcu6_SuspendMode_soft',0,2,0,33
	.byte	'IfxCcu6_SuspendMode',0,12,254,1,3
	.word	115117
	.byte	33
	.byte	'IfxCcu6_T12Channel',0,12,135,2,3
	.word	23582
	.byte	15,12,139,2,9,1,16
	.byte	'IfxCcu6_T12ChannelMode_off',0,0,16
	.byte	'IfxCcu6_T12ChannelMode_compareMode',0,1,16
	.byte	'IfxCcu6_T12ChannelMode_doubleRegisterCaptureRisingAndFalling',0,4,16
	.byte	'IfxCcu6_T12ChannelMode_doubleRegisterCaptureRising',0,5,16
	.byte	'IfxCcu6_T12ChannelMode_doubleRegisterCaptureFalling',0,6,16
	.byte	'IfxCcu6_T12ChannelMode_doubleRegisterCaptureAny',0,7,16
	.byte	'IfxCcu6_T12ChannelMode_hallSensor',0,8,16
	.byte	'IfxCcu6_T12ChannelMode_hysteresisLikecompare',0,9,16
	.byte	'IfxCcu6_T12ChannelMode_multiInputCaptureRisingAndFalling',0,10,16
	.byte	'IfxCcu6_T12ChannelMode_multiInputCaptureFallingAndRising',0,11,16
	.byte	'IfxCcu6_T12ChannelMode_multiInputCaptureBothRising',0,12,16
	.byte	'IfxCcu6_T12ChannelMode_multiInputCaptureBothFalling',0,13,16
	.byte	'IfxCcu6_T12ChannelMode_multiInputCaptureAny',0,14,0,33
	.byte	'IfxCcu6_T12ChannelMode',0,12,155,2,3
	.word	115262
	.byte	15,12,160,2,9,1,16
	.byte	'IfxCcu6_T12CountDirection_up',0,0,16
	.byte	'IfxCcu6_T12CountDirection_down',0,1,0,33
	.byte	'IfxCcu6_T12CountDirection',0,12,164,2,3
	.word	115941
	.byte	33
	.byte	'IfxCcu6_T12CountMode',0,12,175,2,3
	.word	20879
	.byte	15,12,180,2,9,1,16
	.byte	'IfxCcu6_T13TriggerDirection_noAction',0,0,16
	.byte	'IfxCcu6_T13TriggerDirection_onT12CountingUp',0,1,16
	.byte	'IfxCcu6_T13TriggerDirection_onT12CountingDown',0,2,16
	.byte	'IfxCcu6_T13TriggerDirection_anyT12',0,3,0,33
	.byte	'IfxCcu6_T13TriggerDirection',0,12,186,2,3
	.word	116077
	.byte	15,12,191,2,9,1,16
	.byte	'IfxCcu6_T13TriggerEvent_noAction',0,0,16
	.byte	'IfxCcu6_T13TriggerEvent_onCC60RCompare',0,1,16
	.byte	'IfxCcu6_T13TriggerEvent_onCC61RCompare',0,2,16
	.byte	'IfxCcu6_T13TriggerEvent_onCC62RCompare',0,3,16
	.byte	'IfxCcu6_T13TriggerEvent_onAnyT12Compare',0,4,16
	.byte	'IfxCcu6_T13TriggerEvent_onT12Period',0,5,16
	.byte	'IfxCcu6_T13TriggerEvent_onT12Zero',0,6,16
	.byte	'IfxCcu6_T13TriggerEvent_onCCPOSxEdge',0,7,0,33
	.byte	'IfxCcu6_T13TriggerEvent',0,12,202,2,3
	.word	116291
	.byte	33
	.byte	'IfxCcu6_TimerId',0,12,210,2,3
	.word	20458
	.byte	33
	.byte	'IfxCcu6_TimerInputClock',0,12,225,2,3
	.word	20509
	.byte	15,12,244,2,9,1,16
	.byte	'IfxCcu6_TimerRunStatus_stopped',0,0,16
	.byte	'IfxCcu6_TimerRunStatus_running',0,1,0,33
	.byte	'IfxCcu6_TimerRunStatus',0,12,248,2,3
	.word	116702
	.byte	15,12,253,2,9,1,16
	.byte	'IfxCcu6_TrapMode_automatic',0,0,16
	.byte	'IfxCcu6_TrapMode_manual',0,1,0,33
	.byte	'IfxCcu6_TrapMode',0,12,130,3,3
	.word	116807
	.byte	15,12,135,3,9,1,16
	.byte	'IfxCcu6_TrapState_t12Sync',0,0,16
	.byte	'IfxCcu6_TrapState_t13Sync',0,1,16
	.byte	'IfxCcu6_TrapState_immediate',0,3,0,33
	.byte	'IfxCcu6_TrapState',0,12,142,3,3
	.word	116895
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L114:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,39,12,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,36,0,3,8,11,15,62
	.byte	15,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,59,0,3,8,0,0,10,53,0,73,19,0,0,11,19
	.byte	1,3,8,58,15,59,15,57,15,11,15,0,0,12,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,13,23,1,58,15,59,15,57
	.byte	15,11,15,0,0,14,13,0,3,8,73,19,11,15,56,9,0,0,15,4,1,58,15,59,15,57,15,11,15,0,0,16,40,0,3,8,28,13,0,0
	.byte	17,11,1,0,0,18,1,1,11,15,73,19,0,0,19,33,0,47,15,0,0,20,38,0,73,19,0,0,21,46,1,3,8,54,15,39,12,63,12,60
	.byte	12,0,0,22,5,0,73,19,0,0,23,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,24,5,0,3,8,73,19,0,0,25,46,0,3,8
	.byte	54,15,39,12,63,12,60,12,0,0,26,46,1,49,19,0,0,27,5,0,49,19,0,0,28,46,1,3,8,58,15,59,15,57,15,54,15,39
	.byte	12,63,12,60,12,0,0,29,46,0,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,30,29,1,49,19,0,0,31
	.byte	11,0,49,19,0,0,32,19,1,58,15,59,15,57,15,11,15,0,0,33,22,0,3,8,58,15,59,15,57,15,73,19,0,0,34,21,0,54
	.byte	15,0,0,35,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L115:
	.word	.L455-.L454
.L454:
	.half	3
	.word	.L457-.L456
.L456:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap',0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0
	.byte	'IfxSrc.h',0,2,0,0
	.byte	'IfxSrc_regdef.h',0,3,0,0
	.byte	'IfxScuWdt.h',0,4,0,0
	.byte	'IfxScu_regdef.h',0,3,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'IfxCpu_cfg.h',0,5,0,0
	.byte	'IfxPort.h',0,6,0,0
	.byte	'IfxPort_regdef.h',0,3,0,0
	.byte	'IfxScuCcu.h',0,4,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.h',0,0,0,0
	.byte	'IfxCcu6_regdef.h',0,3,0,0
	.byte	'IfxCcu6_cfg.h',0,5,0,0
	.byte	'IfxCcu6_PinMap.h',0,7,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_TypesReg.h',0,3,0,0
	.byte	'IfxSrc_cfg.h',0,5,0,0
	.byte	'IfxScu_cfg.h',0,5,0,0
	.byte	'IfxCpu_regdef.h',0,3,0,0
	.byte	'IfxStm_regdef.h',0,3,0,0
	.byte	'IfxSmu_regdef.h',0,3,0,0,0
.L457:
.L455:
	.sdecl	'.debug_info',debug,cluster('IfxCcu6_connectTrigger')
	.sect	'.debug_info'
.L116:
	.word	383
	.half	3
	.word	.L117
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L119,.L118
	.byte	2
	.word	.L112
	.byte	3
	.byte	'IfxCcu6_connectTrigger',0,1,53,6,1,1,1
	.word	.L71,.L221,.L70
	.byte	4
	.byte	'ccu6',0,1,53,39
	.word	.L222,.L223
	.byte	4
	.byte	'outputLine',0,1,53,61
	.word	.L224,.L225
	.byte	4
	.byte	'selectedTrigger',0,1,53,89
	.word	.L226,.L227
	.byte	5
	.word	.L71,.L221
	.byte	6
	.byte	'mosel',0,1,55,14
	.word	.L228,.L229
	.byte	6
	.byte	'shift',0,1,56,14
	.word	.L230,.L231
	.byte	7
	.word	.L232,.L233,.L234
	.byte	8
	.word	.L235,.L236
	.byte	8
	.word	.L237,.L238
	.byte	8
	.word	.L239,.L240
	.byte	9
	.word	.L241,.L233,.L234
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCcu6_connectTrigger')
	.sect	'.debug_abbrev'
.L117:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCcu6_connectTrigger')
	.sect	'.debug_line'
.L118:
	.word	.L459-.L458
.L458:
	.half	3
	.word	.L461-.L460
.L460:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0,0,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0,0
.L461:
	.byte	5,24,7,0,5,2
	.word	.L71
	.byte	3,192,0,1,5,33,3,118,1,5,29,9
	.half	.L462-.L71
	.byte	3,10,1,5,32,3,127,1,4,2,5,66,9
	.half	.L233-.L462
	.byte	3,46,1,4,1,5,18,3,77,1,4,2,5,66,9
	.half	.L463-.L233
	.byte	3,51,1,5,64,9
	.half	.L464-.L463
	.byte	1,4,1,5,14,3,77,1,5,26,9
	.half	.L411-.L464
	.byte	3,126,1,5,21,9
	.half	.L410-.L411
	.byte	3,4,1,5,46,9
	.half	.L465-.L410
	.byte	3,4,1,4,2,5,83,9
	.half	.L466-.L465
	.byte	3,45,1,5,75,9
	.half	.L412-.L466
	.byte	1,4,1,5,19,3,84,1,5,1,9
	.half	.L234-.L412
	.byte	3,1,1,7,9
	.half	.L120-.L234
	.byte	0,1,1
.L459:
	.sdecl	'.debug_ranges',debug,cluster('IfxCcu6_connectTrigger')
	.sect	'.debug_ranges'
.L119:
	.word	-1,.L71,0,.L120-.L71,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCcu6_routeInterruptNode')
	.sect	'.debug_info'
.L121:
	.word	295
	.half	3
	.word	.L122
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L124,.L123
	.byte	2
	.word	.L112
	.byte	3
	.byte	'IfxCcu6_routeInterruptNode',0,1,254,1,6,1,1,1
	.word	.L95,.L242,.L94
	.byte	4
	.byte	'ccu6',0,1,254,1,43
	.word	.L222,.L243
	.byte	4
	.byte	'source',0,1,254,1,73
	.word	.L244,.L245
	.byte	4
	.byte	'serviceRequest',0,1,254,1,104
	.word	.L246,.L247
	.byte	5
	.word	.L95,.L242
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCcu6_routeInterruptNode')
	.sect	'.debug_abbrev'
.L122:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCcu6_routeInterruptNode')
	.sect	'.debug_line'
.L123:
	.word	.L468-.L467
.L467:
	.half	3
	.word	.L470-.L469
.L469:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0,0,0,0,0
.L470:
	.byte	5,9,7,0,5,2
	.word	.L95
	.byte	3,255,1,1,5,71,7,9
	.half	.L471-.L95
	.byte	1,5,20,7,9
	.half	.L28-.L471
	.byte	3,2,1,5,29,9
	.half	.L472-.L28
	.byte	1,5,45,1,5,14,9
	.half	.L29-.L472
	.byte	3,2,1,5,76,7,9
	.half	.L473-.L29
	.byte	1,5,20,7,9
	.half	.L31-.L473
	.byte	3,2,1,5,29,9
	.half	.L474-.L31
	.byte	1,5,45,1,5,14,9
	.half	.L32-.L474
	.byte	3,2,1,5,76,7,9
	.half	.L475-.L32
	.byte	1,5,20,7,9
	.half	.L34-.L475
	.byte	3,2,1,5,29,9
	.half	.L476-.L34
	.byte	1,5,45,1,5,25,9
	.half	.L35-.L476
	.byte	3,2,1,5,10,9
	.half	.L477-.L35
	.byte	1,5,20,7,9
	.half	.L478-.L477
	.byte	3,2,1,5,28,9
	.half	.L479-.L478
	.byte	1,5,1,9
	.half	.L480-.L479
	.byte	3,18,1,5,25,7,9
	.half	.L37-.L480
	.byte	3,112,1,5,14,9
	.half	.L481-.L37
	.byte	1,5,69,7,9
	.half	.L482-.L481
	.byte	1,5,66,9
	.half	.L483-.L482
	.byte	1,5,20,7,9
	.half	.L39-.L483
	.byte	3,2,1,5,28,9
	.half	.L484-.L39
	.byte	1,5,44,1,5,14,9
	.half	.L40-.L484
	.byte	3,2,1,5,73,7,9
	.half	.L485-.L40
	.byte	1,5,20,7,9
	.half	.L42-.L485
	.byte	3,2,1,5,28,9
	.half	.L486-.L42
	.byte	1,5,44,1,5,25,9
	.half	.L43-.L486
	.byte	3,2,1,5,14,9
	.half	.L487-.L43
	.byte	1,5,80,7,9
	.half	.L488-.L487
	.byte	1,5,77,9
	.half	.L489-.L488
	.byte	1,5,20,7,9
	.half	.L45-.L489
	.byte	3,2,1,5,28,9
	.half	.L490-.L45
	.byte	1,5,1,9
	.half	.L491-.L490
	.byte	3,6,1,5,16,7,9
	.half	.L46-.L491
	.byte	3,126,1,5,1,9
	.half	.L492-.L46
	.byte	3,2,1,7,9
	.half	.L125-.L492
	.byte	0,1,1
.L468:
	.sdecl	'.debug_ranges',debug,cluster('IfxCcu6_routeInterruptNode')
	.sect	'.debug_ranges'
.L124:
	.word	-1,.L95,0,.L125-.L95,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCcu6_setOutputPassiveLevel')
	.sect	'.debug_info'
.L126:
	.word	323
	.half	3
	.word	.L127
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L129,.L128
	.byte	2
	.word	.L112
	.byte	3
	.byte	'IfxCcu6_setOutputPassiveLevel',0,1,163,2,6,1,1,1
	.word	.L97,.L248,.L96
	.byte	4
	.byte	'ccu6',0,1,163,2,46
	.word	.L222,.L249
	.byte	4
	.byte	'channelOut',0,1,163,2,71
	.word	.L250,.L251
	.byte	4
	.byte	'state',0,1,163,2,91
	.word	.L252,.L253
	.byte	5
	.word	.L97,.L248
	.byte	5
	.word	.L254,.L255
	.byte	6
	.byte	'shift',0,1,167,2,16
	.word	.L256,.L257
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCcu6_setOutputPassiveLevel')
	.sect	'.debug_abbrev'
.L127:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCcu6_setOutputPassiveLevel')
	.sect	'.debug_line'
.L128:
	.word	.L494-.L493
.L493:
	.half	3
	.word	.L496-.L495
.L495:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0,0,0,0,0
.L496:
	.byte	5,5,7,0,5,2
	.word	.L97
	.byte	3,164,2,1,5,25,7,9
	.half	.L254-.L97
	.byte	3,3,1,5,35,3,1,1,5,27,9
	.half	.L497-.L254
	.byte	3,127,1,5,40,9
	.half	.L498-.L497
	.byte	3,1,1,5,38,9
	.half	.L499-.L498
	.byte	1,5,64,9
	.half	.L500-.L499
	.byte	1,5,47,9
	.half	.L434-.L500
	.byte	1,5,22,1,5,1,9
	.half	.L255-.L434
	.byte	3,6,1,5,21,7,9
	.half	.L48-.L255
	.byte	3,126,1,5,28,9
	.half	.L501-.L48
	.byte	1,5,1,9
	.half	.L502-.L501
	.byte	3,2,1,7,9
	.half	.L130-.L502
	.byte	0,1,1
.L494:
	.sdecl	'.debug_ranges',debug,cluster('IfxCcu6_setOutputPassiveLevel')
	.sect	'.debug_ranges'
.L129:
	.word	-1,.L97,0,.L130-.L97,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCcu6_setT12CaptureCompareState')
	.sect	'.debug_info'
.L131:
	.word	313
	.half	3
	.word	.L132
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L134,.L133
	.byte	2
	.word	.L112
	.byte	3
	.byte	'IfxCcu6_setT12CaptureCompareState',0,1,178,2,6,1,1,1
	.word	.L99,.L258,.L98
	.byte	4
	.byte	'ccu6',0,1,178,2,50
	.word	.L222,.L259
	.byte	4
	.byte	'channel',0,1,178,2,75
	.word	.L260,.L261
	.byte	4
	.byte	'state',0,1,178,2,112
	.word	.L262,.L263
	.byte	5
	.word	.L99,.L258
	.byte	6
	.byte	'mask',0,1,180,2,12
	.word	.L256,.L264
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCcu6_setT12CaptureCompareState')
	.sect	'.debug_abbrev'
.L132:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCcu6_setT12CaptureCompareState')
	.sect	'.debug_line'
.L133:
	.word	.L504-.L503
.L503:
	.half	3
	.word	.L506-.L505
.L505:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0,0,0,0,0
.L506:
	.byte	5,6,7,0,5,2
	.word	.L99
	.byte	3,177,2,1,5,20,9
	.half	.L435-.L99
	.byte	3,2,1,5,28,9
	.half	.L507-.L435
	.byte	1,5,5,9
	.half	.L437-.L507
	.byte	3,3,1,5,48,7,9
	.half	.L508-.L437
	.byte	3,3,1,5,43,1,5,48,9
	.half	.L509-.L508
	.byte	1,5,46,9
	.half	.L510-.L509
	.byte	1,5,58,9
	.half	.L511-.L510
	.byte	1,5,63,9
	.half	.L512-.L511
	.byte	1,5,55,9
	.half	.L513-.L512
	.byte	1,5,26,1,5,5,9
	.half	.L50-.L513
	.byte	3,3,1,5,48,7,9
	.half	.L514-.L50
	.byte	3,3,1,5,43,1,5,48,9
	.half	.L515-.L514
	.byte	1,5,46,9
	.half	.L516-.L515
	.byte	1,5,58,9
	.half	.L517-.L516
	.byte	1,5,63,9
	.half	.L518-.L517
	.byte	1,5,55,9
	.half	.L519-.L518
	.byte	1,5,26,1,5,5,9
	.half	.L51-.L519
	.byte	3,3,1,5,48,7,9
	.half	.L520-.L51
	.byte	3,3,1,5,43,1,5,48,9
	.half	.L436-.L520
	.byte	1,5,46,9
	.half	.L438-.L436
	.byte	1,5,58,9
	.half	.L521-.L438
	.byte	1,5,63,9
	.half	.L522-.L521
	.byte	1,5,55,9
	.half	.L523-.L522
	.byte	1,5,26,1,5,1,9
	.half	.L52-.L523
	.byte	3,2,1,7,9
	.half	.L135-.L52
	.byte	0,1,1
.L504:
	.sdecl	'.debug_ranges',debug,cluster('IfxCcu6_setT12CaptureCompareState')
	.sect	'.debug_ranges'
.L134:
	.word	-1,.L99,0,.L135-.L99,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCcu6_setT12CompareValue')
	.sect	'.debug_info'
.L136:
	.word	287
	.half	3
	.word	.L137
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L139,.L138
	.byte	2
	.word	.L112
	.byte	3
	.byte	'IfxCcu6_setT12CompareValue',0,1,203,2,6,1,1,1
	.word	.L101,.L265,.L100
	.byte	4
	.byte	'ccu6',0,1,203,2,43
	.word	.L222,.L266
	.byte	4
	.byte	'channel',0,1,203,2,68
	.word	.L260,.L267
	.byte	4
	.byte	'value',0,1,203,2,84
	.word	.L230,.L268
	.byte	5
	.word	.L101,.L265
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCcu6_setT12CompareValue')
	.sect	'.debug_abbrev'
.L137:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCcu6_setT12CompareValue')
	.sect	'.debug_line'
.L138:
	.word	.L525-.L524
.L524:
	.half	3
	.word	.L527-.L526
.L526:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0,0,0,0,0
.L527:
	.byte	5,16,7,0,5,2
	.word	.L101
	.byte	3,204,2,1,5,32,9
	.half	.L528-.L101
	.byte	1,5,1,9
	.half	.L529-.L528
	.byte	3,1,1,7,9
	.half	.L140-.L529
	.byte	0,1,1
.L525:
	.sdecl	'.debug_ranges',debug,cluster('IfxCcu6_setT12CompareValue')
	.sect	'.debug_ranges'
.L139:
	.word	-1,.L101,0,.L140-.L101,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCcu6_setT12Frequency')
	.sect	'.debug_info'
.L141:
	.word	684
	.half	3
	.word	.L142
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L144,.L143
	.byte	2
	.word	.L112
	.byte	3
	.byte	'IfxCcu6_setT12Frequency',0,1,209,2,9
	.word	.L269
	.byte	1,1,1
	.word	.L103,.L270,.L102
	.byte	4
	.byte	'ccu6',0,1,209,2,43
	.word	.L222,.L271
	.byte	4
	.byte	'frequency',0,1,209,2,57
	.word	.L269,.L272
	.byte	4
	.byte	'period',0,1,209,2,83
	.word	.L256,.L273
	.byte	4
	.byte	'countMode',0,1,209,2,112
	.word	.L274,.L275
	.byte	5
	.word	.L103,.L270
	.byte	6
	.byte	'prescaler',0,1,211,2,13
	.word	.L230,.L276
	.byte	6
	.byte	'freqCC6',0,1,212,2,13
	.word	.L269,.L277
	.byte	6
	.byte	'divFactor',0,1,213,2,13
	.word	.L230,.L278
	.byte	5
	.word	.L279,.L55
	.byte	7
	.word	.L280,.L56,.L281
	.byte	8
	.word	.L282,.L283
	.byte	8
	.word	.L284,.L285
	.byte	8
	.word	.L286,.L287
	.byte	9
	.word	.L288,.L289
	.byte	6
	.byte	'tctr4',0,2,197,12,20
	.word	.L292,.L293
	.byte	0,0,7
	.word	.L294,.L295,.L290
	.byte	8
	.word	.L296,.L297
	.byte	8
	.word	.L298,.L299
	.byte	8
	.word	.L300,.L301
	.byte	10
	.word	.L302,.L303
	.byte	0,7
	.word	.L280,.L290,.L291
	.byte	8
	.word	.L282,.L283
	.byte	8
	.word	.L284,.L285
	.byte	8
	.word	.L286,.L287
	.byte	0,7
	.word	.L294,.L291,.L304
	.byte	8
	.word	.L296,.L297
	.byte	8
	.word	.L298,.L299
	.byte	8
	.word	.L300,.L301
	.byte	0,7
	.word	.L305,.L306,.L58
	.byte	8
	.word	.L307,.L308
	.byte	8
	.word	.L309,.L310
	.byte	11
	.word	.L311,.L306,.L58
	.byte	0,7
	.word	.L312,.L58,.L313
	.byte	8
	.word	.L314,.L315
	.byte	8
	.word	.L316,.L317
	.byte	11
	.word	.L318,.L58,.L313
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCcu6_setT12Frequency')
	.sect	'.debug_abbrev'
.L142:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,85
	.byte	6,0,0,10,11,0,49,16,85,6,0,0,11,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCcu6_setT12Frequency')
	.sect	'.debug_line'
.L143:
	.word	.L531-.L530
.L530:
	.half	3
	.word	.L533-.L532
.L532:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.h',0,0,0,0,0
.L533:
	.byte	5,9,7,0,5,2
	.word	.L103
	.byte	3,208,2,1,5,50,9
	.half	.L440-.L103
	.byte	3,3,1,5,23,9
	.half	.L439-.L440
	.byte	1,5,33,9
	.half	.L442-.L439
	.byte	3,1,1,5,23,9
	.half	.L441-.L442
	.byte	1,5,20,9
	.half	.L443-.L441
	.byte	3,2,1,5,39,1,5,21,9
	.half	.L53-.L443
	.byte	3,2,1,5,9,9
	.half	.L534-.L53
	.byte	3,2,1,5,50,7,9
	.half	.L535-.L534
	.byte	3,124,1,5,39,1,5,21,7,9
	.half	.L54-.L535
	.byte	3,10,1,5,5,9
	.half	.L444-.L54
	.byte	1,5,30,7,9
	.half	.L279-.L444
	.byte	3,6,1,5,82,7,9
	.half	.L536-.L279
	.byte	1,4,2,5,20,9
	.half	.L56-.L536
	.byte	3,223,9,1,9
	.half	.L445-.L56
	.byte	3,1,1,4,1,5,109,9
	.half	.L281-.L445
	.byte	3,160,118,1,4,2,5,25,3,198,13,1,4,1,5,58,9
	.half	.L295-.L281
	.byte	3,190,114,1,4,2,5,20,9
	.half	.L290-.L295
	.byte	3,221,9,1,3,1,1,5,33,9
	.half	.L291-.L290
	.byte	3,139,3,1,5,36,9
	.half	.L446-.L291
	.byte	1,5,45,9
	.half	.L537-.L446
	.byte	1,5,19,1,4,1,5,9,9
	.half	.L304-.L537
	.byte	3,156,115,1,4,2,5,32,7,9
	.half	.L306-.L304
	.byte	3,134,9,1,5,35,9
	.half	.L538-.L306
	.byte	1,5,19,1,5,18,9
	.half	.L58-.L538
	.byte	3,171,4,1,5,23,9
	.half	.L539-.L58
	.byte	1,4,1,5,32,9
	.half	.L313-.L539
	.byte	3,214,114,1,5,37,9
	.half	.L540-.L313
	.byte	1,5,29,9
	.half	.L541-.L540
	.byte	1,5,1,3,8,1,5,19,7,9
	.half	.L55-.L541
	.byte	3,124,1,5,1,3,4,1,7,9
	.half	.L145-.L55
	.byte	0,1,1
.L531:
	.sdecl	'.debug_ranges',debug,cluster('IfxCcu6_setT12Frequency')
	.sect	'.debug_ranges'
.L144:
	.word	-1,.L103,0,.L145-.L103,0,0
.L289:
	.word	-1,.L103,.L56-.L103,.L281-.L103,.L290-.L103,.L291-.L103,0,0
.L303:
	.word	-1,.L103,.L295-.L103,.L290-.L103,.L291-.L103,.L304-.L103,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCcu6_setT12InputSignal')
	.sect	'.debug_info'
.L146:
	.word	268
	.half	3
	.word	.L147
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L149,.L148
	.byte	2
	.word	.L112
	.byte	3
	.byte	'IfxCcu6_setT12InputSignal',0,1,130,3,6,1,1,1
	.word	.L105,.L319,.L104
	.byte	4
	.byte	'ccu6',0,1,130,3,42
	.word	.L222,.L320
	.byte	4
	.byte	'extInput',0,1,130,3,66
	.word	.L321,.L322
	.byte	5
	.word	.L105,.L319
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCcu6_setT12InputSignal')
	.sect	'.debug_abbrev'
.L147:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCcu6_setT12InputSignal')
	.sect	'.debug_line'
.L148:
	.word	.L543-.L542
.L542:
	.half	3
	.word	.L545-.L544
.L544:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0,0,0,0,0
.L545:
	.byte	5,38,7,0,5,2
	.word	.L105
	.byte	3,131,3,1,5,19,9
	.half	.L546-.L105
	.byte	1,5,47,9
	.half	.L547-.L546
	.byte	1,5,28,9
	.half	.L548-.L547
	.byte	1,5,38,9
	.half	.L549-.L548
	.byte	3,1,1,5,19,9
	.half	.L550-.L549
	.byte	1,5,28,9
	.half	.L551-.L550
	.byte	1,5,1,9
	.half	.L552-.L551
	.byte	3,3,1,7,9
	.half	.L150-.L552
	.byte	0,1,1
.L543:
	.sdecl	'.debug_ranges',debug,cluster('IfxCcu6_setT12InputSignal')
	.sect	'.debug_ranges'
.L149:
	.word	-1,.L105,0,.L150-.L105,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCcu6_setT13CaptureCompareState')
	.sect	'.debug_info'
.L151:
	.word	273
	.half	3
	.word	.L152
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L154,.L153
	.byte	2
	.word	.L112
	.byte	3
	.byte	'IfxCcu6_setT13CaptureCompareState',0,1,139,3,6,1,1,1
	.word	.L107,.L323,.L106
	.byte	4
	.byte	'ccu6',0,1,139,3,50
	.word	.L222,.L324
	.byte	4
	.byte	'state',0,1,139,3,84
	.word	.L262,.L325
	.byte	5
	.word	.L107,.L323
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCcu6_setT13CaptureCompareState')
	.sect	'.debug_abbrev'
.L152:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCcu6_setT13CaptureCompareState')
	.sect	'.debug_line'
.L153:
	.word	.L554-.L553
.L553:
	.half	3
	.word	.L556-.L555
.L555:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0,0,0,0,0
.L556:
	.byte	5,5,7,0,5,2
	.word	.L107
	.byte	3,144,3,1,5,43,7,9
	.half	.L557-.L107
	.byte	3,3,1,5,48,9
	.half	.L558-.L557
	.byte	1,5,46,9
	.half	.L559-.L558
	.byte	1,5,55,9
	.half	.L560-.L559
	.byte	1,5,26,1,5,5,9
	.half	.L61-.L560
	.byte	3,3,1,5,43,7,9
	.half	.L561-.L61
	.byte	3,3,1,5,48,9
	.half	.L562-.L561
	.byte	1,5,46,9
	.half	.L563-.L562
	.byte	1,5,55,9
	.half	.L564-.L563
	.byte	1,5,26,1,5,5,9
	.half	.L62-.L564
	.byte	3,3,1,5,43,7,9
	.half	.L565-.L62
	.byte	3,3,1,5,63,9
	.half	.L566-.L565
	.byte	1,5,55,9
	.half	.L567-.L566
	.byte	1,5,26,1,5,1,9
	.half	.L63-.L567
	.byte	3,2,1,7,9
	.half	.L155-.L63
	.byte	0,1,1
.L554:
	.sdecl	'.debug_ranges',debug,cluster('IfxCcu6_setT13CaptureCompareState')
	.sect	'.debug_ranges'
.L154:
	.word	-1,.L107,0,.L155-.L107,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCcu6_setT13Frequency')
	.sect	'.debug_info'
.L156:
	.word	624
	.half	3
	.word	.L157
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L159,.L158
	.byte	2
	.word	.L112
	.byte	3
	.byte	'IfxCcu6_setT13Frequency',0,1,165,3,9
	.word	.L269
	.byte	1,1,1
	.word	.L109,.L326,.L108
	.byte	4
	.byte	'ccu6',0,1,165,3,43
	.word	.L222,.L327
	.byte	4
	.byte	'frequency',0,1,165,3,57
	.word	.L269,.L328
	.byte	4
	.byte	'period',0,1,165,3,83
	.word	.L256,.L329
	.byte	5
	.word	.L109,.L326
	.byte	6
	.byte	'prescaler',0,1,167,3,13
	.word	.L230,.L330
	.byte	6
	.byte	'freqCC6',0,1,168,3,13
	.word	.L269,.L331
	.byte	6
	.byte	'divFactor',0,1,169,3,13
	.word	.L230,.L332
	.byte	5
	.word	.L333,.L66
	.byte	7
	.word	.L280,.L333,.L334
	.byte	8
	.word	.L282,.L335
	.byte	8
	.word	.L284,.L336
	.byte	8
	.word	.L286,.L337
	.byte	9
	.word	.L288,.L338
	.byte	6
	.byte	'tctr4',0,2,197,12,20
	.word	.L292,.L341
	.byte	0,0,7
	.word	.L342,.L334,.L339
	.byte	8
	.word	.L343,.L344
	.byte	8
	.word	.L345,.L346
	.byte	10
	.word	.L347,.L334,.L339
	.byte	0,7
	.word	.L280,.L339,.L340
	.byte	8
	.word	.L282,.L335
	.byte	8
	.word	.L284,.L336
	.byte	8
	.word	.L286,.L337
	.byte	0,7
	.word	.L294,.L340,.L348
	.byte	8
	.word	.L296,.L349
	.byte	8
	.word	.L298,.L350
	.byte	8
	.word	.L300,.L351
	.byte	10
	.word	.L302,.L340,.L348
	.byte	0,7
	.word	.L305,.L352,.L67
	.byte	8
	.word	.L307,.L353
	.byte	8
	.word	.L309,.L354
	.byte	10
	.word	.L311,.L352,.L67
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCcu6_setT13Frequency')
	.sect	'.debug_abbrev'
.L157:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,85
	.byte	6,0,0,10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCcu6_setT13Frequency')
	.sect	'.debug_line'
.L158:
	.word	.L569-.L568
.L568:
	.half	3
	.word	.L571-.L570
.L570:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.h',0,0,0,0,0
.L571:
	.byte	5,9,7,0,5,2
	.word	.L109
	.byte	3,164,3,1,5,50,9
	.half	.L448-.L109
	.byte	3,3,1,5,23,9
	.half	.L447-.L448
	.byte	1,5,33,9
	.half	.L451-.L447
	.byte	3,1,1,5,20,9
	.half	.L450-.L451
	.byte	3,2,1,5,39,1,5,21,9
	.half	.L64-.L450
	.byte	3,2,1,5,9,9
	.half	.L572-.L64
	.byte	3,2,1,5,50,7,9
	.half	.L573-.L572
	.byte	3,124,1,5,39,1,5,21,7,9
	.half	.L65-.L573
	.byte	3,10,1,5,5,9
	.half	.L449-.L65
	.byte	1,4,2,5,20,7,9
	.half	.L333-.L449
	.byte	3,145,9,1,9
	.half	.L452-.L333
	.byte	3,1,1,4,1,5,37,9
	.half	.L334-.L452
	.byte	3,244,118,1,4,2,5,25,3,132,13,1,5,20,9
	.half	.L339-.L334
	.byte	3,137,124,1,3,1,1,5,33,9
	.half	.L340-.L339
	.byte	3,139,3,1,5,36,9
	.half	.L453-.L340
	.byte	1,4,1,5,58,9
	.half	.L574-.L453
	.byte	3,235,115,1,4,2,5,66,9
	.half	.L575-.L574
	.byte	3,149,12,1,5,45,9
	.half	.L576-.L575
	.byte	1,5,19,1,4,1,5,9,9
	.half	.L348-.L576
	.byte	3,240,115,1,4,2,5,32,7,9
	.half	.L352-.L348
	.byte	3,178,8,1,5,35,9
	.half	.L577-.L352
	.byte	1,5,19,1,4,1,5,32,9
	.half	.L67-.L577
	.byte	3,211,119,1,5,37,9
	.half	.L578-.L67
	.byte	1,5,29,9
	.half	.L579-.L578
	.byte	1,5,1,3,10,1,5,19,7,9
	.half	.L66-.L579
	.byte	3,124,1,5,1,3,4,1,7,9
	.half	.L160-.L66
	.byte	0,1,1
.L569:
	.sdecl	'.debug_ranges',debug,cluster('IfxCcu6_setT13Frequency')
	.sect	'.debug_ranges'
.L159:
	.word	-1,.L109,0,.L160-.L109,0,0
.L338:
	.word	-1,.L109,.L333-.L109,.L334-.L109,.L339-.L109,.L340-.L109,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCcu6_setT13InputSignal')
	.sect	'.debug_info'
.L161:
	.word	268
	.half	3
	.word	.L162
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L164,.L163
	.byte	2
	.word	.L112
	.byte	3
	.byte	'IfxCcu6_setT13InputSignal',0,1,214,3,6,1,1,1
	.word	.L111,.L355,.L110
	.byte	4
	.byte	'ccu6',0,1,214,3,42
	.word	.L222,.L356
	.byte	4
	.byte	'extInput',0,1,214,3,66
	.word	.L357,.L358
	.byte	5
	.word	.L111,.L355
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCcu6_setT13InputSignal')
	.sect	'.debug_abbrev'
.L162:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCcu6_setT13InputSignal')
	.sect	'.debug_line'
.L163:
	.word	.L581-.L580
.L580:
	.half	3
	.word	.L583-.L582
.L582:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0,0,0,0,0
.L583:
	.byte	5,38,7,0,5,2
	.word	.L111
	.byte	3,215,3,1,5,19,9
	.half	.L584-.L111
	.byte	1,5,47,9
	.half	.L585-.L584
	.byte	1,5,28,9
	.half	.L586-.L585
	.byte	1,5,38,9
	.half	.L587-.L586
	.byte	3,1,1,5,19,9
	.half	.L588-.L587
	.byte	1,5,28,9
	.half	.L589-.L588
	.byte	1,5,1,9
	.half	.L590-.L589
	.byte	3,3,1,7,9
	.half	.L165-.L590
	.byte	0,1,1
.L581:
	.sdecl	'.debug_ranges',debug,cluster('IfxCcu6_setT13InputSignal')
	.sect	'.debug_ranges'
.L164:
	.word	-1,.L111,0,.L165-.L111,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCcu6_getAddress')
	.sect	'.debug_info'
.L166:
	.word	264
	.half	3
	.word	.L167
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L169,.L168
	.byte	2
	.word	.L112
	.byte	3
	.byte	'IfxCcu6_getAddress',0,1,158,1,11
	.word	.L222
	.byte	1,1,1
	.word	.L81,.L359,.L80
	.byte	4
	.byte	'ccu6',0,1,158,1,44
	.word	.L360,.L361
	.byte	5
	.word	.L81,.L359
	.byte	6
	.byte	'module',0,1,160,1,15
	.word	.L222,.L362
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCcu6_getAddress')
	.sect	'.debug_abbrev'
.L167:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCcu6_getAddress')
	.sect	'.debug_line'
.L168:
	.word	.L592-.L591
.L591:
	.half	3
	.word	.L594-.L593
.L593:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0,0,0,0,0
.L594:
	.byte	5,5,7,0,5,2
	.word	.L81
	.byte	3,161,1,1,5,30,7,9
	.half	.L595-.L81
	.byte	3,2,1,5,50,9
	.half	.L596-.L595
	.byte	1,5,56,9
	.half	.L597-.L596
	.byte	1,5,1,9
	.half	.L421-.L597
	.byte	3,8,1,5,16,7,9
	.half	.L14-.L421
	.byte	3,124,1,5,1,9
	.half	.L422-.L14
	.byte	3,4,1,7,9
	.half	.L170-.L422
	.byte	0,1,1
.L592:
	.sdecl	'.debug_ranges',debug,cluster('IfxCcu6_getAddress')
	.sect	'.debug_ranges'
.L169:
	.word	-1,.L81,0,.L170-.L81,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCcu6_getCaptureRegisterValue')
	.sect	'.debug_info'
.L171:
	.word	277
	.half	3
	.word	.L172
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L174,.L173
	.byte	2
	.word	.L112
	.byte	3
	.byte	'IfxCcu6_getCaptureRegisterValue',0,1,175,1,8
	.word	.L256
	.byte	1,1,1
	.word	.L83,.L363,.L82
	.byte	4
	.byte	'ccu6',0,1,175,1,50
	.word	.L222,.L364
	.byte	4
	.byte	'channel',0,1,175,1,75
	.word	.L260,.L365
	.byte	5
	.word	.L83,.L363
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCcu6_getCaptureRegisterValue')
	.sect	'.debug_abbrev'
.L172:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCcu6_getCaptureRegisterValue')
	.sect	'.debug_line'
.L173:
	.word	.L599-.L598
.L598:
	.half	3
	.word	.L601-.L600
.L600:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0,0,0,0,0
.L601:
	.byte	5,22,7,0,5,2
	.word	.L83
	.byte	3,176,1,1,5,31,9
	.half	.L602-.L83
	.byte	1,5,1,9
	.half	.L603-.L602
	.byte	3,1,1,7,9
	.half	.L175-.L603
	.byte	0,1,1
.L599:
	.sdecl	'.debug_ranges',debug,cluster('IfxCcu6_getCaptureRegisterValue')
	.sect	'.debug_ranges'
.L174:
	.word	-1,.L83,0,.L175-.L83,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCcu6_getCaptureShadowRegisterValue')
	.sect	'.debug_info'
.L176:
	.word	283
	.half	3
	.word	.L177
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L179,.L178
	.byte	2
	.word	.L112
	.byte	3
	.byte	'IfxCcu6_getCaptureShadowRegisterValue',0,1,181,1,8
	.word	.L256
	.byte	1,1,1
	.word	.L85,.L366,.L84
	.byte	4
	.byte	'ccu6',0,1,181,1,56
	.word	.L222,.L367
	.byte	4
	.byte	'channel',0,1,181,1,81
	.word	.L260,.L368
	.byte	5
	.word	.L85,.L366
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCcu6_getCaptureShadowRegisterValue')
	.sect	'.debug_abbrev'
.L177:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCcu6_getCaptureShadowRegisterValue')
	.sect	'.debug_line'
.L178:
	.word	.L605-.L604
.L604:
	.half	3
	.word	.L607-.L606
.L606:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0,0,0,0,0
.L607:
	.byte	5,23,7,0,5,2
	.word	.L85
	.byte	3,182,1,1,5,32,9
	.half	.L608-.L85
	.byte	1,5,1,9
	.half	.L609-.L608
	.byte	3,1,1,7,9
	.half	.L180-.L609
	.byte	0,1,1
.L605:
	.sdecl	'.debug_ranges',debug,cluster('IfxCcu6_getCaptureShadowRegisterValue')
	.sect	'.debug_ranges'
.L179:
	.word	-1,.L85,0,.L180-.L85,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCcu6_getIndex')
	.sect	'.debug_info'
.L181:
	.word	281
	.half	3
	.word	.L182
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L184,.L183
	.byte	2
	.word	.L112
	.byte	3
	.byte	'IfxCcu6_getIndex',0,1,187,1,15
	.word	.L360
	.byte	1,1,1
	.word	.L87,.L369,.L86
	.byte	4
	.byte	'ccu6',0,1,187,1,42
	.word	.L222,.L370
	.byte	5
	.word	.L87,.L369
	.byte	6
	.byte	'index',0,1,189,1,19
	.word	.L256,.L371
	.byte	6
	.byte	'result',0,1,190,1,19
	.word	.L360,.L372
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCcu6_getIndex')
	.sect	'.debug_abbrev'
.L182:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCcu6_getIndex')
	.sect	'.debug_line'
.L183:
	.word	.L611-.L610
.L610:
	.half	3
	.word	.L613-.L612
.L612:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0,0,0,0,0
.L613:
	.byte	5,12,7,0,5,2
	.word	.L87
	.byte	3,191,1,1,5,13,3,4,1,5,48,9
	.half	.L614-.L87
	.byte	3,126,1,5,40,9
	.half	.L19-.L614
	.byte	3,2,1,5,9,9
	.half	.L615-.L19
	.byte	1,5,64,7,9
	.half	.L616-.L615
	.byte	3,2,1,5,22,9
	.half	.L617-.L616
	.byte	1,5,1,3,6,1,5,55,7,9
	.half	.L20-.L617
	.byte	3,118,1,5,48,1,5,1,7,9
	.half	.L618-.L20
	.byte	3,10,1,7,9
	.half	.L185-.L618
	.byte	0,1,1
.L611:
	.sdecl	'.debug_ranges',debug,cluster('IfxCcu6_getIndex')
	.sect	'.debug_ranges'
.L184:
	.word	-1,.L87,0,.L185-.L87,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCcu6_getSrcAddress')
	.sect	'.debug_info'
.L186:
	.word	298
	.half	3
	.word	.L187
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L189,.L188
	.byte	2
	.word	.L112
	.byte	3
	.byte	'IfxCcu6_getSrcAddress',0,1,207,1,24
	.word	.L373
	.byte	1,1,1
	.word	.L89,.L374,.L88
	.byte	4
	.byte	'ccu6',0,1,207,1,56
	.word	.L222,.L375
	.byte	4
	.byte	'serviceRequest',0,1,207,1,85
	.word	.L246,.L376
	.byte	5
	.word	.L89,.L374
	.byte	6
	.byte	'moduleIdx',0,1,209,1,28
	.word	.L377,.L378
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCcu6_getSrcAddress')
	.sect	'.debug_abbrev'
.L187:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCcu6_getSrcAddress')
	.sect	'.debug_line'
.L188:
	.word	.L620-.L619
.L619:
	.half	3
	.word	.L622-.L621
.L621:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0,0,0,0,0
.L622:
	.byte	5,24,7,0,5,2
	.word	.L89
	.byte	3,206,1,1,5,57,3,2,1,5,29,9
	.half	.L424-.L89
	.byte	3,3,1,5,34,9
	.half	.L623-.L424
	.byte	1,5,33,9
	.half	.L425-.L623
	.byte	1,5,44,9
	.half	.L624-.L425
	.byte	1,5,18,9
	.half	.L625-.L624
	.byte	3,2,1,5,1,9
	.half	.L626-.L625
	.byte	3,1,1,7,9
	.half	.L190-.L626
	.byte	0,1,1
.L620:
	.sdecl	'.debug_ranges',debug,cluster('IfxCcu6_getSrcAddress')
	.sect	'.debug_ranges'
.L189:
	.word	-1,.L89,0,.L190-.L89,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCcu6_readTimer')
	.sect	'.debug_info'
.L191:
	.word	282
	.half	3
	.word	.L192
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L194,.L193
	.byte	2
	.word	.L112
	.byte	3
	.byte	'IfxCcu6_readTimer',0,1,218,1,8
	.word	.L256
	.byte	1,1,1
	.word	.L91,.L379,.L90
	.byte	4
	.byte	'ccu6',0,1,218,1,36
	.word	.L222,.L380
	.byte	4
	.byte	'timer',0,1,218,1,58
	.word	.L381,.L382
	.byte	5
	.word	.L91,.L379
	.byte	6
	.byte	'result',0,1,220,1,12
	.word	.L256,.L383
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCcu6_readTimer')
	.sect	'.debug_abbrev'
.L192:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCcu6_readTimer')
	.sect	'.debug_line'
.L193:
	.word	.L628-.L627
.L627:
	.half	3
	.word	.L630-.L629
.L629:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0,0,0,0,0
.L630:
	.byte	5,5,7,0,5,2
	.word	.L91
	.byte	3,221,1,1,5,27,7,9
	.half	.L631-.L91
	.byte	3,2,1,5,1,9
	.half	.L426-.L631
	.byte	3,8,1,5,27,7,9
	.half	.L24-.L426
	.byte	3,124,1,5,1,9
	.half	.L427-.L24
	.byte	3,4,1,7,9
	.half	.L195-.L427
	.byte	0,1,1
.L628:
	.sdecl	'.debug_ranges',debug,cluster('IfxCcu6_readTimer')
	.sect	'.debug_ranges'
.L194:
	.word	-1,.L91,0,.L195-.L91,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCcu6_disableModulationOutput')
	.sect	'.debug_info'
.L196:
	.word	310
	.half	3
	.word	.L197
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L199,.L198
	.byte	2
	.word	.L112
	.byte	3
	.byte	'IfxCcu6_disableModulationOutput',0,1,70,6,1,1,1
	.word	.L73,.L384,.L72
	.byte	4
	.byte	'ccu6',0,1,70,48
	.word	.L222,.L385
	.byte	4
	.byte	'timer',0,1,70,70
	.word	.L381,.L386
	.byte	4
	.byte	'channelOut',0,1,70,96
	.word	.L250,.L387
	.byte	5
	.word	.L73,.L384
	.byte	6
	.byte	'shift',0,1,72,12
	.word	.L256,.L388
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCcu6_disableModulationOutput')
	.sect	'.debug_abbrev'
.L197:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCcu6_disableModulationOutput')
	.sect	'.debug_line'
.L198:
	.word	.L633-.L632
.L632:
	.half	3
	.word	.L635-.L634
.L634:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0,0,0,0,0
.L635:
	.byte	5,5,7,0,5,2
	.word	.L73
	.byte	3,201,0,1,5,9,7,9
	.half	.L636-.L73
	.byte	3,2,1,7,9
	.half	.L637-.L636
	.byte	3,6,1,9
	.half	.L2-.L637
	.byte	3,5,1,5,41,7,9
	.half	.L638-.L2
	.byte	3,2,1,5,31,9
	.half	.L4-.L638
	.byte	3,1,1,5,42,3,1,1,5,33,9
	.half	.L639-.L4
	.byte	3,127,1,5,47,9
	.half	.L640-.L639
	.byte	3,1,1,5,45,9
	.half	.L641-.L640
	.byte	1,5,28,1,5,1,9
	.half	.L3-.L641
	.byte	3,7,1,5,27,7,9
	.half	.L5-.L3
	.byte	3,125,1,5,35,9
	.half	.L642-.L5
	.byte	1,5,1,9
	.half	.L643-.L642
	.byte	3,3,1,7,9
	.half	.L200-.L643
	.byte	0,1,1
.L633:
	.sdecl	'.debug_ranges',debug,cluster('IfxCcu6_disableModulationOutput')
	.sect	'.debug_ranges'
.L199:
	.word	-1,.L73,0,.L200-.L73,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCcu6_disableModule')
	.sect	'.debug_info'
.L201:
	.word	296
	.half	3
	.word	.L202
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L204,.L203
	.byte	2
	.word	.L112
	.byte	3
	.byte	'IfxCcu6_disableModule',0,1,101,6,1,1,1
	.word	.L75,.L389,.L74
	.byte	4
	.byte	'ccu6',0,1,101,38
	.word	.L222,.L390
	.byte	5
	.word	.L75,.L389
	.byte	6
	.byte	'passwd',0,1,103,12
	.word	.L230,.L391
	.byte	7
	.word	.L392,.L7,.L393
	.byte	8
	.word	.L394,.L395
	.byte	9
	.word	.L396,.L7,.L393
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCcu6_disableModule')
	.sect	'.debug_abbrev'
.L202:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCcu6_disableModule')
	.sect	'.debug_line'
.L203:
	.word	.L645-.L644
.L644:
	.half	3
	.word	.L647-.L646
.L646:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.h',0,0,0,0,0
.L647:
	.byte	5,6,7,0,5,2
	.word	.L75
	.byte	3,228,0,1,5,53,9
	.half	.L414-.L75
	.byte	3,2,1,5,19,9
	.half	.L413-.L414
	.byte	1,5,31,9
	.half	.L416-.L413
	.byte	3,1,1,5,19,9
	.half	.L415-.L416
	.byte	3,1,1,5,17,1,5,29,9
	.half	.L648-.L415
	.byte	3,1,1,4,2,5,23,9
	.half	.L7-.L648
	.byte	3,146,14,1,4,1,5,49,9
	.half	.L393-.L7
	.byte	3,241,113,1,5,1,7,9
	.half	.L649-.L393
	.byte	3,2,1,7,9
	.half	.L205-.L649
	.byte	0,1,1
.L645:
	.sdecl	'.debug_ranges',debug,cluster('IfxCcu6_disableModule')
	.sect	'.debug_ranges'
.L204:
	.word	-1,.L75,0,.L205-.L75,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCcu6_enableModulationOutput')
	.sect	'.debug_info'
.L206:
	.word	309
	.half	3
	.word	.L207
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L209,.L208
	.byte	2
	.word	.L112
	.byte	3
	.byte	'IfxCcu6_enableModulationOutput',0,1,114,6,1,1,1
	.word	.L77,.L397,.L76
	.byte	4
	.byte	'ccu6',0,1,114,47
	.word	.L222,.L398
	.byte	4
	.byte	'timer',0,1,114,69
	.word	.L381,.L399
	.byte	4
	.byte	'channelOut',0,1,114,95
	.word	.L250,.L400
	.byte	5
	.word	.L77,.L397
	.byte	6
	.byte	'shift',0,1,116,12
	.word	.L256,.L401
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCcu6_enableModulationOutput')
	.sect	'.debug_abbrev'
.L207:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCcu6_enableModulationOutput')
	.sect	'.debug_line'
.L208:
	.word	.L651-.L650
.L650:
	.half	3
	.word	.L653-.L652
.L652:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0,0,0,0,0
.L653:
	.byte	5,5,7,0,5,2
	.word	.L77
	.byte	3,245,0,1,5,9,7,9
	.half	.L654-.L77
	.byte	3,2,1,7,9
	.half	.L655-.L654
	.byte	3,6,1,9
	.half	.L8-.L655
	.byte	3,5,1,5,41,7,9
	.half	.L656-.L8
	.byte	3,2,1,5,31,9
	.half	.L10-.L656
	.byte	3,1,1,5,42,3,1,1,5,33,9
	.half	.L657-.L10
	.byte	3,127,1,5,45,9
	.half	.L658-.L657
	.byte	3,1,1,5,28,1,5,1,9
	.half	.L9-.L658
	.byte	3,7,1,5,27,7,9
	.half	.L11-.L9
	.byte	3,125,1,5,35,9
	.half	.L659-.L11
	.byte	1,5,1,9
	.half	.L660-.L659
	.byte	3,3,1,7,9
	.half	.L210-.L660
	.byte	0,1,1
.L651:
	.sdecl	'.debug_ranges',debug,cluster('IfxCcu6_enableModulationOutput')
	.sect	'.debug_ranges'
.L209:
	.word	-1,.L77,0,.L210-.L77,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCcu6_enableModule')
	.sect	'.debug_info'
.L211:
	.word	298
	.half	3
	.word	.L212
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L214,.L213
	.byte	2
	.word	.L112
	.byte	3
	.byte	'IfxCcu6_enableModule',0,1,145,1,6,1,1,1
	.word	.L79,.L402,.L78
	.byte	4
	.byte	'ccu6',0,1,145,1,37
	.word	.L222,.L403
	.byte	5
	.word	.L79,.L402
	.byte	6
	.byte	'passwd',0,1,147,1,12
	.word	.L230,.L404
	.byte	7
	.word	.L392,.L13,.L405
	.byte	8
	.word	.L394,.L406
	.byte	9
	.word	.L396,.L13,.L405
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCcu6_enableModule')
	.sect	'.debug_abbrev'
.L212:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCcu6_enableModule')
	.sect	'.debug_line'
.L213:
	.word	.L662-.L661
.L661:
	.half	3
	.word	.L664-.L663
.L663:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.h',0,0,0,0,0
.L664:
	.byte	5,6,7,0,5,2
	.word	.L79
	.byte	3,144,1,1,5,53,9
	.half	.L418-.L79
	.byte	3,2,1,5,19,9
	.half	.L417-.L418
	.byte	1,5,31,9
	.half	.L420-.L417
	.byte	3,1,1,5,16,9
	.half	.L419-.L420
	.byte	3,1,1,5,22,9
	.half	.L665-.L419
	.byte	1,5,29,9
	.half	.L666-.L665
	.byte	3,1,1,4,2,5,23,9
	.half	.L13-.L666
	.byte	3,230,13,1,4,1,5,50,9
	.half	.L405-.L13
	.byte	3,157,114,1,5,1,7,9
	.half	.L667-.L405
	.byte	3,2,1,7,9
	.half	.L215-.L667
	.byte	0,1,1
.L662:
	.sdecl	'.debug_ranges',debug,cluster('IfxCcu6_enableModule')
	.sect	'.debug_ranges'
.L214:
	.word	-1,.L79,0,.L215-.L79,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCcu6_resetModule')
	.sect	'.debug_info'
.L216:
	.word	261
	.half	3
	.word	.L217
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L219,.L218
	.byte	2
	.word	.L112
	.byte	3
	.byte	'IfxCcu6_resetModule',0,1,235,1,6,1,1,1
	.word	.L93,.L407,.L92
	.byte	4
	.byte	'ccu6',0,1,235,1,36
	.word	.L222,.L408
	.byte	5
	.word	.L93,.L407
	.byte	6
	.byte	'passwd',0,1,237,1,12
	.word	.L230,.L409
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCcu6_resetModule')
	.sect	'.debug_abbrev'
.L217:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCcu6_resetModule')
	.sect	'.debug_line'
.L218:
	.word	.L669-.L668
.L668:
	.half	3
	.word	.L671-.L670
.L670:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std\\IfxCcu6.c',0,0,0,0,0
.L671:
	.byte	5,6,7,0,5,2
	.word	.L93
	.byte	3,234,1,1,5,53,9
	.half	.L429-.L93
	.byte	3,2,1,5,19,9
	.half	.L428-.L429
	.byte	1,5,31,9
	.half	.L431-.L428
	.byte	3,2,1,5,18,9
	.half	.L430-.L431
	.byte	3,1,1,5,29,9
	.half	.L672-.L430
	.byte	3,2,1,5,23,9
	.half	.L432-.L672
	.byte	3,126,1,5,18,9
	.half	.L673-.L432
	.byte	3,1,1,5,23,9
	.half	.L674-.L673
	.byte	1,5,29,9
	.half	.L675-.L674
	.byte	3,1,1,5,30,9
	.half	.L27-.L675
	.byte	3,2,1,5,38,9
	.half	.L676-.L27
	.byte	1,5,31,7,9
	.half	.L677-.L676
	.byte	3,4,1,5,29,9
	.half	.L678-.L677
	.byte	3,2,1,5,20,3,127,1,5,25,9
	.half	.L433-.L678
	.byte	1,5,29,9
	.half	.L679-.L433
	.byte	3,1,1,5,1,7,9
	.half	.L220-.L679
	.byte	3,1,0,1,1
.L669:
	.sdecl	'.debug_ranges',debug,cluster('IfxCcu6_resetModule')
	.sect	'.debug_ranges'
.L219:
	.word	-1,.L93,0,.L220-.L93,0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCcu6_connectTrigger')
	.sect	'.debug_loc'
.L70:
	.word	-1,.L71,0,.L221-.L71
	.half	2
	.byte	138,0
	.word	0,0
.L236:
	.word	0,0
.L223:
	.word	-1,.L71,0,.L221-.L71
	.half	1
	.byte	100
	.word	0,0
.L238:
	.word	0,0
.L229:
	.word	-1,.L71,.L233-.L71,.L411-.L71
	.half	1
	.byte	95
	.word	.L412-.L71,.L221-.L71
	.half	1
	.byte	95
	.word	0,0
.L225:
	.word	-1,.L71,0,.L221-.L71
	.half	1
	.byte	84
	.word	0,0
.L227:
	.word	-1,.L71,0,.L410-.L71
	.half	1
	.byte	85
	.word	0,0
.L231:
	.word	0,0
.L240:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCcu6_disableModulationOutput')
	.sect	'.debug_loc'
.L72:
	.word	-1,.L73,0,.L384-.L73
	.half	2
	.byte	138,0
	.word	0,0
.L385:
	.word	-1,.L73,0,.L384-.L73
	.half	1
	.byte	100
	.word	0,0
.L387:
	.word	-1,.L73,0,.L384-.L73
	.half	1
	.byte	85
	.word	0,0
.L388:
	.word	-1,.L73,0,.L384-.L73
	.half	1
	.byte	85
	.word	0,0
.L386:
	.word	-1,.L73,0,.L384-.L73
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCcu6_disableModule')
	.sect	'.debug_loc'
.L74:
	.word	-1,.L75,0,.L389-.L75
	.half	2
	.byte	138,0
	.word	0,0
.L390:
	.word	-1,.L75,0,.L413-.L75
	.half	1
	.byte	100
	.word	.L414-.L75,.L389-.L75
	.half	1
	.byte	111
	.word	0,0
.L395:
	.word	0,0
.L391:
	.word	-1,.L75,.L413-.L75,.L415-.L75
	.half	1
	.byte	82
	.word	.L416-.L75,.L7-.L75
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCcu6_enableModulationOutput')
	.sect	'.debug_loc'
.L76:
	.word	-1,.L77,0,.L397-.L77
	.half	2
	.byte	138,0
	.word	0,0
.L398:
	.word	-1,.L77,0,.L397-.L77
	.half	1
	.byte	100
	.word	0,0
.L400:
	.word	-1,.L77,0,.L397-.L77
	.half	1
	.byte	85
	.word	0,0
.L401:
	.word	-1,.L77,0,.L397-.L77
	.half	1
	.byte	85
	.word	0,0
.L399:
	.word	-1,.L77,0,.L397-.L77
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCcu6_enableModule')
	.sect	'.debug_loc'
.L78:
	.word	-1,.L79,0,.L402-.L79
	.half	2
	.byte	138,0
	.word	0,0
.L403:
	.word	-1,.L79,0,.L417-.L79
	.half	1
	.byte	100
	.word	.L418-.L79,.L402-.L79
	.half	1
	.byte	111
	.word	0,0
.L406:
	.word	0,0
.L404:
	.word	-1,.L79,.L417-.L79,.L419-.L79
	.half	1
	.byte	82
	.word	.L420-.L79,.L13-.L79
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCcu6_getAddress')
	.sect	'.debug_loc'
.L80:
	.word	-1,.L81,0,.L359-.L81
	.half	2
	.byte	138,0
	.word	0,0
.L361:
	.word	-1,.L81,0,.L359-.L81
	.half	1
	.byte	84
	.word	0,0
.L362:
	.word	-1,.L81,.L421-.L81,.L14-.L81
	.half	1
	.byte	98
	.word	.L422-.L81,.L359-.L81
	.half	1
	.byte	98
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCcu6_getCaptureRegisterValue')
	.sect	'.debug_loc'
.L82:
	.word	-1,.L83,0,.L363-.L83
	.half	2
	.byte	138,0
	.word	0,0
.L364:
	.word	-1,.L83,0,.L363-.L83
	.half	1
	.byte	100
	.word	0,0
.L365:
	.word	-1,.L83,0,.L363-.L83
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCcu6_getCaptureShadowRegisterValue')
	.sect	'.debug_loc'
.L84:
	.word	-1,.L85,0,.L366-.L85
	.half	2
	.byte	138,0
	.word	0,0
.L367:
	.word	-1,.L85,0,.L366-.L85
	.half	1
	.byte	100
	.word	0,0
.L368:
	.word	-1,.L85,0,.L366-.L85
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCcu6_getIndex')
	.sect	'.debug_loc'
.L86:
	.word	-1,.L87,0,.L369-.L87
	.half	2
	.byte	138,0
	.word	0,0
.L370:
	.word	-1,.L87,0,.L369-.L87
	.half	1
	.byte	100
	.word	0,0
.L371:
	.word	0,0
.L372:
	.word	-1,.L87,.L423-.L87,.L369-.L87
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCcu6_getSrcAddress')
	.sect	'.debug_loc'
.L88:
	.word	-1,.L89,0,.L374-.L89
	.half	2
	.byte	138,0
	.word	0,0
.L375:
	.word	-1,.L89,0,.L424-.L89
	.half	1
	.byte	100
	.word	0,0
.L378:
	.word	-1,.L89,.L424-.L89,.L425-.L89
	.half	1
	.byte	82
	.word	0,0
.L376:
	.word	-1,.L89,0,.L424-.L89
	.half	1
	.byte	84
	.word	.L424-.L89,.L374-.L89
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCcu6_readTimer')
	.sect	'.debug_loc'
.L90:
	.word	-1,.L91,0,.L379-.L91
	.half	2
	.byte	138,0
	.word	0,0
.L380:
	.word	-1,.L91,0,.L379-.L91
	.half	1
	.byte	100
	.word	0,0
.L383:
	.word	-1,.L91,.L426-.L91,.L24-.L91
	.half	1
	.byte	82
	.word	.L427-.L91,.L379-.L91
	.half	1
	.byte	82
	.word	0,0
.L382:
	.word	-1,.L91,0,.L379-.L91
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCcu6_resetModule')
	.sect	'.debug_loc'
.L92:
	.word	-1,.L93,0,.L407-.L93
	.half	2
	.byte	138,0
	.word	0,0
.L408:
	.word	-1,.L93,0,.L428-.L93
	.half	1
	.byte	100
	.word	.L429-.L93,.L407-.L93
	.half	1
	.byte	111
	.word	0,0
.L409:
	.word	-1,.L93,.L428-.L93,.L430-.L93
	.half	1
	.byte	82
	.word	.L431-.L93,.L407-.L93
	.half	1
	.byte	88
	.word	.L432-.L93,.L27-.L93
	.half	1
	.byte	84
	.word	.L433-.L93,.L407-.L93
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCcu6_routeInterruptNode')
	.sect	'.debug_loc'
.L94:
	.word	-1,.L95,0,.L242-.L95
	.half	2
	.byte	138,0
	.word	0,0
.L243:
	.word	-1,.L95,0,.L242-.L95
	.half	1
	.byte	100
	.word	0,0
.L247:
	.word	-1,.L95,0,.L242-.L95
	.half	1
	.byte	85
	.word	0,0
.L245:
	.word	-1,.L95,0,.L242-.L95
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCcu6_setOutputPassiveLevel')
	.sect	'.debug_loc'
.L96:
	.word	-1,.L97,0,.L248-.L97
	.half	2
	.byte	138,0
	.word	0,0
.L249:
	.word	-1,.L97,0,.L248-.L97
	.half	1
	.byte	100
	.word	0,0
.L251:
	.word	-1,.L97,0,.L248-.L97
	.half	1
	.byte	84
	.word	0,0
.L257:
	.word	0,0
.L253:
	.word	-1,.L97,0,.L434-.L97
	.half	1
	.byte	85
	.word	.L48-.L97,.L248-.L97
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCcu6_setT12CaptureCompareState')
	.sect	'.debug_loc'
.L98:
	.word	-1,.L99,0,.L258-.L99
	.half	2
	.byte	138,0
	.word	0,0
.L259:
	.word	-1,.L99,0,.L258-.L99
	.half	1
	.byte	100
	.word	0,0
.L261:
	.word	-1,.L99,0,.L258-.L99
	.half	1
	.byte	84
	.word	0,0
.L264:
	.word	-1,.L99,.L437-.L99,.L438-.L99
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L263:
	.word	-1,.L99,0,.L258-.L99
	.half	1
	.byte	85
	.word	.L435-.L99,.L436-.L99
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCcu6_setT12CompareValue')
	.sect	'.debug_loc'
.L100:
	.word	-1,.L101,0,.L265-.L101
	.half	2
	.byte	138,0
	.word	0,0
.L266:
	.word	-1,.L101,0,.L265-.L101
	.half	1
	.byte	100
	.word	0,0
.L267:
	.word	-1,.L101,0,.L265-.L101
	.half	1
	.byte	84
	.word	0,0
.L268:
	.word	-1,.L101,0,.L265-.L101
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCcu6_setT12Frequency')
	.sect	'.debug_loc'
.L102:
	.word	-1,.L103,0,.L270-.L103
	.half	2
	.byte	138,0
	.word	0,0
.L271:
	.word	-1,.L103,0,.L439-.L103
	.half	1
	.byte	100
	.word	.L440-.L103,.L270-.L103
	.half	1
	.byte	111
	.word	0,0
.L308:
	.word	0,0
.L283:
	.word	0,0
.L297:
	.word	0,0
.L315:
	.word	0,0
.L275:
	.word	-1,.L103,0,.L439-.L103
	.half	1
	.byte	86
	.word	.L440-.L103,.L270-.L103
	.half	1
	.byte	90
	.word	0,0
.L278:
	.word	-1,.L103,.L441-.L103,.L443-.L103
	.half	1
	.byte	82
	.word	.L443-.L103,.L444-.L103
	.half	1
	.byte	95
	.word	0,0
.L277:
	.word	-1,.L103,.L439-.L103,.L441-.L103
	.half	1
	.byte	82
	.word	.L442-.L103,.L270-.L103
	.half	1
	.byte	91
	.word	0,0
.L272:
	.word	-1,.L103,0,.L439-.L103
	.half	1
	.byte	84
	.word	.L442-.L103,.L441-.L103
	.half	1
	.byte	89
	.word	0,0
.L301:
	.word	0,0
.L317:
	.word	0,0
.L273:
	.word	-1,.L103,0,.L439-.L103
	.half	1
	.byte	85
	.word	.L281-.L103,.L295-.L103
	.half	1
	.byte	88
	.word	0,0
.L276:
	.word	-1,.L103,.L53-.L103,.L270-.L103
	.half	1
	.byte	81
	.word	0,0
.L285:
	.word	0,0
.L287:
	.word	0,0
.L293:
	.word	-1,.L103,.L445-.L103,.L446-.L103
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L310:
	.word	0,0
.L299:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCcu6_setT12InputSignal')
	.sect	'.debug_loc'
.L104:
	.word	-1,.L105,0,.L319-.L105
	.half	2
	.byte	138,0
	.word	0,0
.L320:
	.word	-1,.L105,0,.L319-.L105
	.half	1
	.byte	100
	.word	0,0
.L322:
	.word	-1,.L105,0,.L319-.L105
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCcu6_setT13CaptureCompareState')
	.sect	'.debug_loc'
.L106:
	.word	-1,.L107,0,.L323-.L107
	.half	2
	.byte	138,0
	.word	0,0
.L324:
	.word	-1,.L107,0,.L323-.L107
	.half	1
	.byte	100
	.word	0,0
.L325:
	.word	-1,.L107,0,.L323-.L107
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCcu6_setT13Frequency')
	.sect	'.debug_loc'
.L108:
	.word	-1,.L109,0,.L326-.L109
	.half	2
	.byte	138,0
	.word	0,0
.L327:
	.word	-1,.L109,0,.L447-.L109
	.half	1
	.byte	100
	.word	.L448-.L109,.L326-.L109
	.half	1
	.byte	111
	.word	0,0
.L353:
	.word	0,0
.L335:
	.word	0,0
.L349:
	.word	0,0
.L344:
	.word	0,0
.L332:
	.word	-1,.L109,.L64-.L109,.L326-.L109
	.half	1
	.byte	82
	.word	0,0
.L331:
	.word	-1,.L109,.L447-.L109,.L450-.L109
	.half	1
	.byte	82
	.word	.L451-.L109,.L326-.L109
	.half	1
	.byte	89
	.word	0,0
.L328:
	.word	-1,.L109,0,.L447-.L109
	.half	1
	.byte	84
	.word	.L448-.L109,.L449-.L109
	.half	1
	.byte	95
	.word	0,0
.L351:
	.word	0,0
.L329:
	.word	-1,.L109,0,.L447-.L109
	.half	1
	.byte	85
	.word	.L447-.L109,.L339-.L109
	.half	1
	.byte	88
	.word	.L66-.L109,.L326-.L109
	.half	1
	.byte	88
	.word	0,0
.L330:
	.word	-1,.L109,.L64-.L109,.L326-.L109
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L336:
	.word	0,0
.L337:
	.word	0,0
.L341:
	.word	-1,.L109,.L452-.L109,.L453-.L109
	.half	1
	.byte	95
	.word	0,0
.L354:
	.word	0,0
.L350:
	.word	0,0
.L346:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCcu6_setT13InputSignal')
	.sect	'.debug_loc'
.L110:
	.word	-1,.L111,0,.L355-.L111
	.half	2
	.byte	138,0
	.word	0,0
.L356:
	.word	-1,.L111,0,.L355-.L111
	.half	1
	.byte	100
	.word	0,0
.L358:
	.word	-1,.L111,0,.L355-.L111
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L680:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxCcu6_connectTrigger')
	.sect	'.debug_frame'
	.word	24
	.word	.L680,.L71,.L221-.L71
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCcu6_disableModulationOutput')
	.sect	'.debug_frame'
	.word	24
	.word	.L680,.L73,.L384-.L73
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCcu6_disableModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L680,.L75,.L389-.L75
	.sdecl	'.debug_frame',debug,cluster('IfxCcu6_enableModulationOutput')
	.sect	'.debug_frame'
	.word	24
	.word	.L680,.L77,.L397-.L77
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCcu6_enableModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L680,.L79,.L402-.L79
	.sdecl	'.debug_frame',debug,cluster('IfxCcu6_getAddress')
	.sect	'.debug_frame'
	.word	24
	.word	.L680,.L81,.L359-.L81
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCcu6_getCaptureRegisterValue')
	.sect	'.debug_frame'
	.word	24
	.word	.L680,.L83,.L363-.L83
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCcu6_getCaptureShadowRegisterValue')
	.sect	'.debug_frame'
	.word	24
	.word	.L680,.L85,.L366-.L85
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCcu6_getIndex')
	.sect	'.debug_frame'
	.word	20
	.word	.L680,.L87,.L369-.L87
	.byte	8,19,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCcu6_getSrcAddress')
	.sect	'.debug_frame'
	.word	12
	.word	.L680,.L89,.L374-.L89
	.sdecl	'.debug_frame',debug,cluster('IfxCcu6_readTimer')
	.sect	'.debug_frame'
	.word	24
	.word	.L680,.L91,.L379-.L91
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCcu6_resetModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L680,.L93,.L407-.L93
	.sdecl	'.debug_frame',debug,cluster('IfxCcu6_routeInterruptNode')
	.sect	'.debug_frame'
	.word	24
	.word	.L680,.L95,.L242-.L95
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCcu6_setOutputPassiveLevel')
	.sect	'.debug_frame'
	.word	24
	.word	.L680,.L97,.L248-.L97
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCcu6_setT12CaptureCompareState')
	.sect	'.debug_frame'
	.word	24
	.word	.L680,.L99,.L258-.L99
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCcu6_setT12CompareValue')
	.sect	'.debug_frame'
	.word	24
	.word	.L680,.L101,.L265-.L101
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCcu6_setT12Frequency')
	.sect	'.debug_frame'
	.word	12
	.word	.L680,.L103,.L270-.L103
	.sdecl	'.debug_frame',debug,cluster('IfxCcu6_setT12InputSignal')
	.sect	'.debug_frame'
	.word	20
	.word	.L680,.L105,.L319-.L105
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxCcu6_setT13CaptureCompareState')
	.sect	'.debug_frame'
	.word	24
	.word	.L680,.L107,.L323-.L107
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCcu6_setT13Frequency')
	.sect	'.debug_frame'
	.word	12
	.word	.L680,.L109,.L326-.L109
	.sdecl	'.debug_frame',debug,cluster('IfxCcu6_setT13InputSignal')
	.sect	'.debug_frame'
	.word	20
	.word	.L680,.L111,.L355-.L111
	.byte	8,18,8,19,8,22,8,23


	; Module end
