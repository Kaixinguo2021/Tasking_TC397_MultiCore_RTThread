	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\4_McHal\\Tricore\\Dma\\Dma\\.IfxDma_Dma.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include\\libc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.src ..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c'

	
$TC162
	.sdecl	'.zrodata.IfxDma..3.cnt',data,rom
	.sect	'.zrodata.IfxDma..3.cnt'
	.align	2
.3.cnt:	.type	object
	.size	.3.cnt,4
	.word	-268205200
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_configureTransactionSet',code,cluster('IfxDma_Dma_configureTransactionSet')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_configureTransactionSet'
	.align	2
	

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	     1  /**
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	     2   * \file IfxDma_Dma.c
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	     3   * \brief DMA DMA details
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	     4   *
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	     5   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	     6   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	     7   *
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	     8   *
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	     9   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    10   *
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    11   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    12   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    13   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    14   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    15   *
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    16   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    17   *
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    18   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    19   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    20   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    21   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    22   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    23   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    24   *
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    25   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    26   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    27   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    28   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    29   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    30   * language processor.
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    31   *
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    32   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    33   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    34   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    35   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    36   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    37   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    38   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    39   *
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    40   */
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    41  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    42  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    43  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    44  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    45  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    46  #include "IfxDma_Dma.h"
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    47  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    48  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    49  /*-----------------------Private Function Prototypes--------------------------*/
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    50  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    51  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    52  /** \brief local function to copy a transaction set into DMA channel SFRs or memory location (for linked lists)
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    53   * \param channel Specifies the pointer to DMA channel registers
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    54   * \param config pointer to the DMA default channel configuration structure
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    55   * \return None
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    56   */
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    57  IFX_STATIC void IfxDma_Dma_configureTransactionSet(Ifx_DMA_CH *channel, const IfxDma_Dma_ChannelConfig *config);
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    58  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    59  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    60  /*-------------------------Function Implementations---------------------------*/
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    61  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    62  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    63  IFX_STATIC void IfxDma_Dma_configureTransactionSet(Ifx_DMA_CH *channel, const IfxDma_Dma_ChannelConfig *config)
; Function IfxDma_Dma_configureTransactionSet
.L12:
IfxDma_Dma_configureTransactionSet:	.type	func

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    64  {
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    65      /* shadow address shall be 32-Byte Aligned */
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    66      {
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    67          IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, ((config->shadowAddress & 0x1F) == 0U));
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    68      }
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    69  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    70      {
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    71          Ifx_DMA_CH_CHCFGR chcfgr;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    72          chcfgr.U          = 0;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    73          chcfgr.B.TREL     = config->transferCount;
	mov	d15,#0
	ld.hu	d0,[a5]26
.L171:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    74          chcfgr.B.BLKM     = config->blockMode;
	insert	d15,d15,d0,#0,#14
	ld.bu	d0,[a5]28
.L244:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    75          chcfgr.B.RROAT    = config->requestMode;
	insert	d15,d15,d0,#16,#3
	ld.bu	d0,[a5]29
.L245:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    76          chcfgr.B.CHMODE   = config->operationMode;
	insert	d15,d15,d0,#19,#1
	ld.bu	d0,[a5]30
.L246:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    77          chcfgr.B.CHDW     = config->moveSize;
	insert	d15,d15,d0,#20,#1
	ld.bu	d0,[a5]31
.L247:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    78          chcfgr.B.PRSEL    = config->requestSource;
	insert	d15,d15,d0,#21,#3
	ld.bu	d0,[a5]33
.L248:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    79          chcfgr.B.PATSEL   = config->pattern;
	insert	d15,d15,d0,#28,#1
	ld.bu	d0,[a5]32
.L249:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    80  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    81          channel->CHCFGR.U = chcfgr.U;
	insert	d15,d15,d0,#24,#3
	st.w	[a4]20,d15
.L163:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    82      }
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    83  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    84      {
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    85          Ifx_DMA_CH_ADICR adicr;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    86          adicr.U       = 0;
	mov	d15,#0
.L172:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    87          adicr.B.SMF   = config->sourceAddressIncrementStep;
	ld.bu	d0,[a5]36
.L250:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    88          adicr.B.INCS  = config->sourceAddressIncrementDirection;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    89          adicr.B.CBLS  = config->sourceAddressCircularRange;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    90          adicr.B.SCBE  = config->sourceCircularBufferEnabled;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    91          adicr.B.DMF   = config->destinationAddressIncrementStep;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    92          adicr.B.INCD  = config->destinationAddressIncrementDirection;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    93          adicr.B.CBLD  = config->destinationAddressCircularRange;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    94          adicr.B.DCBE  = config->destinationCircularBufferEnabled;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    95          adicr.B.SHCT  = config->shadowControl;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    96          adicr.B.STAMP = config->timestampEnabled;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    97          adicr.B.WRPSE = config->wrapSourceInterruptEnabled;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    98          adicr.B.WRPDE = config->wrapDestinationInterruptEnabled;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    99          adicr.B.INTCT = (config->channelInterruptEnabled ? 2 : 0) | (config->channelInterruptControl ? 1 : 0);
	ld.bu	d1,[a5]49
.L251:
	insert	d15,d15,d0,#0,#3
	ld.bu	d0,[a5]37
.L252:
	ne	d1,d1,#0
.L253:
	insert	d15,d15,d0,#3,#1
	ld.bu	d0,[a5]38
.L254:
	insert	d15,d15,d0,#8,#4
	ld.bu	d0,[a5]43
.L255:
	insert	d15,d15,d0,#20,#1
	ld.bu	d0,[a5]39
.L256:
	insert	d15,d15,d0,#4,#3
	ld.bu	d0,[a5]40
.L257:
	insert	d15,d15,d0,#7,#1
	ld.bu	d0,[a5]41
.L258:
	insert	d15,d15,d0,#12,#4
	ld.bu	d0,[a5]44
.L259:
	insert	d15,d15,d0,#21,#1
	ld.bu	d0,[a5]42
.L260:
	insert	d15,d15,d0,#16,#4
	ld.bu	d0,[a5]45
.L261:
	insert	d15,d15,d0,#22,#1
	ld.bu	d0,[a5]46
.L262:
	insert	d15,d15,d0,#24,#1
	ld.bu	d0,[a5]47
.L263:
	insert	d15,d15,d0,#25,#1
	ld.bu	d0,[a5]48
.L264:
	ne	d0,d0,#0
	sha	d0,#1
.L265:
	or	d0,d1
.L266:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   100          adicr.B.IRDV  = config->interruptRaiseThreshold;
	insert	d15,d15,d0,#26,#2
	ld.bu	d0,[a5]50
.L267:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   101          //enter also the circular buffer enable bits
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   102  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   103          channel->ADICR.U = adicr.U;
	insert	d15,d15,d0,#28,#4
	st.w	[a4]16,d15
.L166:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   104      }
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   105      {
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   106          Ifx_DMA_TSR tsr;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   107          tsr.U                                         = config->module->dma->TSR[config->channelId].U;
	ld.a	a15,[a5]
.L268:
	ld.b	d15,[a5]4
.L173:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   108          tsr.B.ETRL                                    = config->transactionRequestLostInterruptEnabled;
	ld.bu	d0,[a5]51
.L269:
	ld.a	a15,[a15]
.L270:
	addsc.a	a15,a15,d15,#2
.L271:
	ld.w	d15,[a15]7680
.L174:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   109  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   110          config->module->dma->TSR[config->channelId].U = tsr.U;
	insert	d15,d15,d0,#4,#1
	st.w	[a15]7680,d15
.L169:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   111      }
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   112      channel->SADR.U   = config->sourceAddress;
	ld.w	d15,[a5]6
.L175:
	st.w	[a4]8,d15
.L272:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   113      channel->DADR.U   = config->destinationAddress;
	ld.w	d15,[a5]10
.L273:
	st.w	[a4]12,d15
.L274:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   114      channel->SDCRCR.U = config->sourceDestinationAddressCrc;
	ld.w	d15,[a5]22
.L275:
	st.w	[a4]4,d15
.L276:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   115      channel->RDCRCR.U = config->readDataCrc;
	ld.w	d15,[a5]18
.L277:
	st.w	[a4],d15
.L278:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   116  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   117      // write not allowed if SHCT=1 or SHCT=2
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   118      if ((config->shadowControl != IfxDma_ChannelShadow_none) &&
	ld.bu	d15,[a5]42
.L279:
	jeq	d15,#0,.L2
.L280:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   119          (config->shadowControl != IfxDma_ChannelShadow_src) &&
	jeq	d15,#1,.L3
.L281:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   120          (config->shadowControl != IfxDma_ChannelShadow_dst))
	jeq	d15,#2,.L4
.L282:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   121      {
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   122          channel->SHADR.U = config->shadowAddress;
	ld.w	d15,[a5]14
.L283:
	st.w	[a4]24,d15
.L4:
.L3:
.L2:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   123      }
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   124  }
	ret
.L159:
	
__IfxDma_Dma_configureTransactionSet_function_end:
	.size	IfxDma_Dma_configureTransactionSet,__IfxDma_Dma_configureTransactionSet_function_end-IfxDma_Dma_configureTransactionSet
.L72:
	; End of function
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_createModuleHandle',code,cluster('IfxDma_Dma_createModuleHandle')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_createModuleHandle'
	.align	2
	
	.global	IfxDma_Dma_createModuleHandle

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   125  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   126  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   127  void IfxDma_Dma_createModuleHandle(IfxDma_Dma *dmaHandle, Ifx_DMA *dma)
; Function IfxDma_Dma_createModuleHandle
.L14:
IfxDma_Dma_createModuleHandle:	.type	func

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   128  {
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   129      dmaHandle->dma = dma;
	st.a	[a4],a5
.L195:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   130  }
	ret
.L78:
	
__IfxDma_Dma_createModuleHandle_function_end:
	.size	IfxDma_Dma_createModuleHandle,__IfxDma_Dma_createModuleHandle_function_end-IfxDma_Dma_createModuleHandle
.L37:
	; End of function
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_deInitChannel',code,cluster('IfxDma_Dma_deInitChannel')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_deInitChannel'
	.align	2
	
	.global	IfxDma_Dma_deInitChannel

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   131  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   132  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   133  void IfxDma_Dma_deInitChannel(IfxDma_Dma *dma, IfxDma_ChannelId channel)
; Function IfxDma_Dma_deInitChannel
.L16:
IfxDma_Dma_deInitChannel:	.type	func

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   134  {
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   135      if (IfxDma_isChannelTransactionEnabled(dma->dma, channel))
	fcall	.cocofun_4
.L176:
	jz.t	d15:1,.L5
.L89:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    41   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    42   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    43   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    44   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    45   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    46   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    47   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    48   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    49   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    50   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    51   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    52   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    53   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    54   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    55   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    56   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    57   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    59  #ifndef IFXDMA_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    60  #define IFXDMA_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    62  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    63  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    65  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    66  #include "_Impl/IfxDma_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    67  #include "IfxDma_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    69  #include "IfxDma_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    70  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    71  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    72  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    73  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    74  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    75  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    77  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    78  /** \addtogroup IfxLld_Dma_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    79   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    80  /** \brief Bus Master Mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    81   * Definition in Ifx_DMA.MODE[4].B.MODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    82   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    83  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    84  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    85      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    86      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    87  } IfxDma_BusMasterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    89  /** \brief Channel Bus Priority definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    93      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    94      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    95      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    96  } IfxDma_ChannelBusPriority;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    97  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    98  /** \brief DMA circular buffer (wrap around) definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    99   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   103      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   104      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   105      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   119  } IfxDma_ChannelIncrementCircular;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   121  /** \brief DMA incrementation direction definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   122   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   124  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   125  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   126      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   127      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   128  } IfxDma_ChannelIncrementDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   129  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   130  /** \brief DMA incrementation definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   131   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   132   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   133  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   134  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   135      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   136      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   137      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   143  } IfxDma_ChannelIncrementStep;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   145  /** \brief Channel Transfer Interrupt generation mechanism.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   146   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   147   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   148  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   149  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   150      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   151      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   152  } IfxDma_ChannelInterruptControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   153  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   154  /** \brief DMA transfer definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   155   * Definition in Ifx_DMA.ME0.CHCR.B.BLKM and Ifx_DMA.ME1.CHCR.B.BLKM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   156   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   157  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   158  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   159      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   160      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   161      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   167  } IfxDma_ChannelMove;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   169  /** \brief DMA move size definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   170   * Definition in Ifx_DMA.ME0.CHCR.B.CHDW and Ifx_DMA.ME1.CHCR.B.CHDW
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   171   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   172  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   173  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   174      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   175      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   176      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   180  } IfxDma_ChannelMoveSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   182  /** \brief DMA operation mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   183   * Definition in Ifx_DMA.ME0.CHCR.B.CHMODE and Ifx_DMA.ME1.CHCR.B.CHMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   185  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   186  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   187      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   188      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   189  } IfxDma_ChannelOperationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   190  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   191  /** \brief Pattern detection selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   192   * Definition in Ifx_DMA.ME0.CHCR.B.PATSEL and Ifx_DMA.ME1.CHCR.B.PATSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   194  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   195  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   196      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   197      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   198      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   204  } IfxDma_ChannelPattern;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   206  /** \brief Channel Priority definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   207   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   208  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   209  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   210      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   211      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   212      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   213  } IfxDma_ChannelPriority;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   215  /** \brief DMA request mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   216   * Definition in Ifx_DMA.ME0.CHCR.B.RROAT and Ifx_DMA.ME1.CHCR.B.RROAT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   217   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   218  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   219  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   220      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   221      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   222  } IfxDma_ChannelRequestMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   224  /** \brief DMA request selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   225   * Definition in Ifx_DMA.ME0.CHCR.B.PRSEL and Ifx_DMA.ME1.CHCR.B.PRSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   227  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   228  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   229      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   230      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   231  } IfxDma_ChannelRequestSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   233  /** \brief shadow definition definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   234   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   235   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   236  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   237  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   238      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   239      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   240      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   251  } IfxDma_ChannelShadow;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   253  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   254  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   255      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   256      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   257      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   259  } IfxDma_HardwareResourcePartition;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   261  /** \brief DMA move engine definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   263  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   264  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   265      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   266      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   267  } IfxDma_MoveEngine;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   269  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   270   * Definition in Ifx_DMA.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   271   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   272  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   274      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   275      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   276  } IfxDma_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   277  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   278  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   280  /** \addtogroup IfxLld_Dma_Std_Reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   281   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   283  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   284  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   285  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   287  /** \brief Return the status of a DMA channel (reset / not reset)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   288   * This API needs to be used after the IfxDma_resetChannel()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   289   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   290   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   291   * \return TRUE if the channel is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   292   * FALSE if the channel is not reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   293   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   294   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   295   *      // check whether the channel is reset or not and also the hardware trigger disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   296   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   297   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   298   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   299   *              // Dma is out of RESET and there is no hardware request enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   300   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   301   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   305  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   307  /** \brief Reset the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   308   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   309   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   310   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   311   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   312   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   313   *      // Apply reset to the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   314   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   315   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   316   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   317   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   318  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   319  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   320  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   322  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   323   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   324  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   325  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   326  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   327  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   329  /** \brief Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   330   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   331   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   332   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   333   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   334   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   335   *      // Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   336   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   337   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   338   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   339   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   340  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   341  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   342  /** \brief Disable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   343   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   344   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   345   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   346   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   347   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   348   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   350  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   352  /** \brief Disable the generation of a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   353   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   354   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   355   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   356   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   357   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   358   *      // Disable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   359   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   360   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   361   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   362   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   363  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   364  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   365  /** \brief Enable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   366   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   367   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   368   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   369   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   370   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   371   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   372   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   373   *              IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   374   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   375   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   376   *      // Do not restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   377   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   378   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   379   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   380   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   381   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   382   *      // Check for end of transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   383   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   384   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   385   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   386   *      // Enable the hardware trigger for channel 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   387   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   388   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   389   *      // Disable the hardware trigger for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   391   *      // Hardware triggers for second time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   392   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   393   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   394   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   395   *              IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   396   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   397   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   398   *      // Restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   399   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   400   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   401   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   402   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   403   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   404  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   405  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   406  /** \brief Enable the generation of  a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   407   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   408   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   409   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   410   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   411   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   412   *      // Enable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   413   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   414   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   415   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   416   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   417  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   419  /** \brief Check the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   420   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   421   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   422   * \return TRUE if the TRL is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   423   * FALSE if the TRL is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   424   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   425   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   426   *      boolean trlFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   427   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   428   *      // Check whether the channel transaction request lost flag is set or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   429   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   430   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   431   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   433  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   435  /** \brief Converts DMA circular range to circular code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   436   * \param range DMA circular range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   437   * \return DMA circular code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   439  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   441  /** \brief Return the hardware transaction request status of a DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   442   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   443   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   444   * \return TRUE if the hardware transaction request is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   445   * FALSE if the hardware transaction request is disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   446   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   447   * A coding example can be found in \ref IfxDma_isChannelReset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   448   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   449   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   450  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   451  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   452  /** \brief Return the status of a DMA channel (transaction pending)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   453   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   454   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   455   * \return TRUE if a transaction request for the given channel is pending
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   456   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   458   *      // check for the channel request pending with the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   459   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   460   *              // There is channel request pending for channel 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   461   *              result |= 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   462   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   463   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   464   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   465   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   466  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   468  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   469   * \param dma pointer to DMA registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   470   * \param mode mode selection (enable/disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   471   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   472   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   473  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   474  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   475  /** \brief Request a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   476   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   477   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   479   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   480   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   481   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   482   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   483  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   484  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   485  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   486  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   487  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   488   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   490  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   491  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   492  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   494  /** \brief Clear the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   495   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   496   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   497   * \param mask value holds the bits to clear or mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   498   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   500   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   501   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   502   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   503   *                                                  IFXDMA_ERROR_S |    // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   504   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   505   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   510   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   512   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   513  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   514  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   515  /** \brief Disable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   516   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   517   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   518   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   519   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   520   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   521   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   522   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   523  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   524  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   525  /** \brief Disable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   526   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   527   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   528   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   530   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   531   *      // Disable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   532   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   533   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   534   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   535   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   537  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   539  /** \brief Enable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   540   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   541   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   542   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   543   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   544   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   545   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   546   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   547  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   548  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   549  /** \brief Enable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   550   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   551   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   552   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   553   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   554   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   555   *      // Enable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   556   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   557   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   558   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   560   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   561  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   562  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   563  /** \brief Return the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   564   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   565   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   566   * \return the content of the DMA.ERRSR register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   568   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   569   *      uint32 errorFlags = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   570   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   571   *      // Get the status of the error flags of move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   572   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   574   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   575   *              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   576   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   578   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   579   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   580   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   581   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   582   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   583   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   584   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   585   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   586   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   587   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   588   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   589   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   590   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   591   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   592   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   593   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   594   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   595   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   596   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   597   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   598   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   599   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   600   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   601   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   602   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   603  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   604  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   605  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   606  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   607  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   608   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   609  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   610  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   611  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   612  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   614  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   615   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   616   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   617   * \return Actual channel destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   618   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   619   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   620   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   621   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   622   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   623   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   625  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   627  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   628   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   629   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   630   * \return Actual channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   631   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   632   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   633   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   634   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   635   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   636   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   637  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   639  /** \brief Return the DMA channel suspend Mode status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   640   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   641   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   642   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   643   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   644  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   646  /** \brief Return remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   647   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   648   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   649   * \return Remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   650   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   651   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   652   *      // Wait till transfer count (TCOUNT) becomes 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   653   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   654   *      bool notFinished;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   655   *      do {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   656   *              notFinished = false;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   657   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   658   *                              notFinished = true;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   659   *                              break;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   660   *                      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   661   *      } while( notFinished );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   662   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   663   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   664   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   665  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   667  /** \brief get the time stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   668   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   669   * \return the current time stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   670   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   671   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   672   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   673   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   674   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   675   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   676  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   678  /** \brief Configure the move count for each DMA channel transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   679   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   680   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   681   * \param blockMode value holds the number of moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   682   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   684   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   685   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   686   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   687  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   688  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   689  /** \brief Configure a DMA channel to "continous transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   690   * After a transaction, the hardware request transaction remain enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   691   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   692   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   693   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   694   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   695   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   696   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   697   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   698  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   699  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   700  /** \brief Configure the destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   701   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   702   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   703   * \param address is the Initial address of the destination pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   704   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   705   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   706   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   707   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   708   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   709  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   710  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   711  /** \brief Configure a DMA channel destination pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   712   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   713   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   714   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   715   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   716   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   717   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   718   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   719   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   720   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   721   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   722  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   723  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   724  /** \brief Configure a DMA channel move
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   725   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   726   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   727   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   728   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   729   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   730   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   731   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   733  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   735  /** \brief Configure a DMA channel shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   736   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   737   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   738   * \param shadow Specifies the shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   739   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   740   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   741   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   742   *      // Push the shadow mode into double buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   743   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   744   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   745   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   746   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   748  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   750  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   751   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   752   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   753   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   754   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   755   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   756   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   757   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   758   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   759  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   760  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   761  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   762   * One transfer request starts a complete DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   763   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   764   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   765   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   766   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   767   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   768   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   769   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   770  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   771  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   772  /** \brief Configure a DMA channel to "single transfer mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   773   * A transfer request is required for each transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   774   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   775   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   776   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   777   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   778   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   779   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   780   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   781  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   782  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   783  /** \brief Configure the source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   784   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   785   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   786   * \param address is the Initial address of the source pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   787   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   788   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   789   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   790   *      // Check for the end of current transaction and before trigger the channel request for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   791   *      // for another channel, re configure the source and destination addresses
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   792   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   793   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   794   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   795   *      // Re-Program the source address for the channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   796   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   797   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the destination address for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   800   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   801   *      // Start DMA transaction for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   803   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   804   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   805   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   806  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   807  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   808  /** \brief Configure a DMA channel source pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   809   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   810   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   811   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   812   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   813   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   814   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   815   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   816   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   817   *      // Re-program the source and destination circular buffer control fields
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   818   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   819   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   820   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   821   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   822   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   823   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   824  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   825  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   826  /** \brief Configure a DMA channel suspend enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   827   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   828   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   829   * \param enable enable (1) / disable (0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   830   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   831   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   832  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   833  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   834  /** \brief Configure the move count of a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   835   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   836   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   837   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   838   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   839   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   840   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   841   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   842   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   843   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   844   *      // Wait till end of transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   845   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   846   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   847   *      // Change the TREL configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   848   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   849   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the BLKM configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   852   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the Move size configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   855   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   856   *      // Pull down the channel pending request after the first transfer is initiated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   858   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the transaction gets over
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   861   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   862   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   864   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   867   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   868   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   869   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   870  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   871  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   872  /** \brief Configure the shadow pointer register to read only
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   873   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   874   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   875   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   876   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   877   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   878   *      // Disable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   879   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   880   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   881   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   882   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   883  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   884  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   885  /** \brief Configure the shadow pointer register to write-able
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   886   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   887   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   888   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   889   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   890   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   891   *      // Enable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   892   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   893   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   894   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   895   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   896  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   897  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   898  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   899  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   900  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   901   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   902  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   903  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   904  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   905  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   906  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   907  /** \brief Clear channel halt request and aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   908   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   909   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   910   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   911   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   912   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   913   *      // Quit the halt mode of operation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   914   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   915   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   916   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   917   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   918  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   920  /** \brief Get channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   921   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   922   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   923   * \return halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   924   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   925   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   926   *      // Check for the channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   927   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   928   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   929   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   930   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   931  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   932  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   933  /** \brief setting channel halt request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   934   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   935   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   936   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   937   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   938   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   939   *      // Halt the channel processing
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   940   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   941   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   942   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   943   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   944  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   945  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   946  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   947  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   948  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   949   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   950  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   951  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   952  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   953  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   954  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   955  /** \brief get information on buffer being read by software and clear the notification flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   956   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   957   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   958   * \return TRUE  if one of the buffers is being read by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   959   * FALSE if one of the buffers is already read by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   960   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   961   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   962   *      // Check the buffer being read (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   963   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   964   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   965   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   966   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   967  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   968  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   969  /** \brief get Double buffer selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   970   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   971   * \param channelId channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   972   * \return TRUE if buffer 1 is being filled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   973   * FALSE if buffer 0 is being filled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   974   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   975   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   976   *      boolean buffer_being_filled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   977   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   978   *      // Check the buffer being filled (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   979   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   980   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   981   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   982   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   983  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   984  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   985  /** \brief keeps the double buffer active
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   986   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   987   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   988   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   989   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   990   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   991   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   992   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   993   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   994   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   995  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   996  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   997  /** \brief Double buffer switch application
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   998   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   999   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1000   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1001   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1002   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1003   *      // Apply software buffer switch
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1004   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1005   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1006   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1007   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1008  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1009  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1010  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1011  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1012  /** \addtogroup IfxLld_Dma_Std_Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1013   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1014  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1015  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1016  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1017  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1018  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1019  /** \brief Clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1020   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1021   * \param channelId channel for which the interrupt flag should be cleared
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1022   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1023   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1024   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1025   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1026   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1027  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1028  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1029  /** \brief Disable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1030   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1031   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1032   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1033   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1034   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1035   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1036   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1037   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1038   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1039  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1040  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1041  /** \brief Enable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1042   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1043   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1044   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1045   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1046   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1047   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1048   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1049   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1050   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1051  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1052  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1053  /** \brief Return and clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1054   * The flag is automatically cleared with the call to this function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1055   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1056   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1057   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1058   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1059   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1060   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1061   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1062   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1063   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1064   *      // Wait till end of the transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1065   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1066   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1067   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1068   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1069  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1070  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1071  /** \brief Returns and clears the pattern detection interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1072   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1073   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1074   * \return TRUE  if pattern detection for a given channel is found
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1075   * FALSE if pattern detection for a given channel is not found
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1076   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1077   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1078   *      // wait till pattern match is found for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1079   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1080   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1081   *      // Wait for the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1082   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1083   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1084   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1085   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1086  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1087  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1088  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1089   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1090   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1091   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1092   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1093   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1094   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1095   *      // wait for the destination buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1096   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1097   *      boolean destinationWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1098   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1099   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1100   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1101   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1103  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1105  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1106   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1107   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1108   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1109   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1110   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1111   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1112   *      // wait for the source buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1113   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1114   *      boolean sourceWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1115   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1116   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1117   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1118   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1119   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1120  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1122  /** \brief Return a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1123   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1124   * \param channelId channel for which the interrupt flag should be returned
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1125   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1126   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1127   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1128   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1129   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1130   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1131  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1132  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1133  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1134   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1135   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1136   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1137   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1138   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1139   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1140   *      boolean patternDetectOldVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1142   *      // Check the old value of the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1143   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1144   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1146   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1147  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1148  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1149  /** \brief Returns the SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1150   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1151   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1152   * \return SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1153   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1154   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1155   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1156   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1157   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1158   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1159  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1160  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1161  /** \brief Setting of channel interrupt service request by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1162   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1163   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1164   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1165   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1166   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1167   *      // Set the channel interrupt service request through software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1168   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1169   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1171   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1172  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1173  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1174  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1176  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1177  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1178  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1179  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1180  /** \brief Enable the Swap Data CRC Byte order
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1181   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1182   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1185   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1186   *      // Enable the Swap Data CRC Byte order
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1187   *      IfxDma_enableSwapDataByte(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1188   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1189   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1190   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1191  IFX_INLINE void IfxDma_enableSwapDataByte(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1193  /** \brief Configure the hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1194   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1195   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1196   * \param resourcePartition Hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1197   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1198   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1199   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1200   *      // Set the required hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1201   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1202   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1203   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1204   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1205  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1206  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1207  /** \brief Sets the Interrupt control value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1208   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1209   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1210   * \param value Interrupt control value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1211   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1213  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1215  /** \brief Sets the Circular Buffer Destination Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1216   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1217   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1218   * \param length Circular Buffer Destination Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1219   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1220   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1221  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1222  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1223  /** \brief Sets the Circular Buffer Source Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1224   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1225   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1226   * \param length Circular Buffer Source Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1227   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1228   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1229  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1230  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1231  /** \brief Enable the Source Circular Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1232   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1233   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1234   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1235   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1236  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1237  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1238  /** \brief Enable the Destination Circular Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1239   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1240   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1241   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1242   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1243  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1244  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1245  /** \brief Returns the Data CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1246   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1247   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1248   * \return The Data CRC value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1250  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1252  /** \brief Returns the Source and Destination CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1253   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1254   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1255   * \return The source and destination CRC values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1256   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1257  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1258  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1259  /** \brief Returns the ERR pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1260   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1261   * \param resourcePartition Hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1262   * \return ERR pointer for given DMA resource Partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1263   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1264  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma, IfxDma_HardwareResourcePartition resourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1265  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1266  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1267  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1268  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1269  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1270  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1271  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1272      dma->TSR[channelId].B.HLTCLR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1273  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1274  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1275  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1276  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1277  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1278      dma->CH[channelId].CHCSR.B.CICH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1279  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1280  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1281  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1282  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1283  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1284      dma->TSR[channelId].B.CTL = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1285  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1288  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1289  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1290      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1291      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1292          dma->ME1.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1293      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1294      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1295      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1296          dma->ME0.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1297      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1298  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1299  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1301  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1302  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1303      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1304  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1305  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1307  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1308  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1309      dma->TSR[channelId].B.DCH = 1;
	ld.bu	d15,[a15]7682
.L200:
	or	d15,#2
	st.b	[a15]7682,d15
.L5:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   136      {
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   137          IfxDma_disableChannelTransaction(dma->dma, channel);
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   138      }
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   139  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   140      IfxDma_resetChannel(dma->dma, channel);
	fcall	.cocofun_4
.L96:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    41   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    42   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    43   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    44   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    45   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    46   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    47   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    48   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    49   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    50   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    51   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    52   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    53   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    54   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    55   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    56   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    57   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    59  #ifndef IFXDMA_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    60  #define IFXDMA_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    62  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    63  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    65  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    66  #include "_Impl/IfxDma_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    67  #include "IfxDma_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    69  #include "IfxDma_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    70  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    71  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    72  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    73  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    74  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    75  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    77  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    78  /** \addtogroup IfxLld_Dma_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    79   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    80  /** \brief Bus Master Mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    81   * Definition in Ifx_DMA.MODE[4].B.MODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    82   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    83  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    84  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    85      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    86      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    87  } IfxDma_BusMasterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    89  /** \brief Channel Bus Priority definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    93      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    94      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    95      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    96  } IfxDma_ChannelBusPriority;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    97  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    98  /** \brief DMA circular buffer (wrap around) definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    99   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   103      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   104      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   105      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   119  } IfxDma_ChannelIncrementCircular;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   121  /** \brief DMA incrementation direction definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   122   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   124  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   125  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   126      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   127      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   128  } IfxDma_ChannelIncrementDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   129  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   130  /** \brief DMA incrementation definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   131   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   132   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   133  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   134  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   135      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   136      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   137      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   143  } IfxDma_ChannelIncrementStep;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   145  /** \brief Channel Transfer Interrupt generation mechanism.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   146   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   147   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   148  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   149  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   150      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   151      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   152  } IfxDma_ChannelInterruptControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   153  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   154  /** \brief DMA transfer definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   155   * Definition in Ifx_DMA.ME0.CHCR.B.BLKM and Ifx_DMA.ME1.CHCR.B.BLKM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   156   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   157  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   158  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   159      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   160      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   161      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   167  } IfxDma_ChannelMove;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   169  /** \brief DMA move size definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   170   * Definition in Ifx_DMA.ME0.CHCR.B.CHDW and Ifx_DMA.ME1.CHCR.B.CHDW
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   171   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   172  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   173  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   174      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   175      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   176      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   180  } IfxDma_ChannelMoveSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   182  /** \brief DMA operation mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   183   * Definition in Ifx_DMA.ME0.CHCR.B.CHMODE and Ifx_DMA.ME1.CHCR.B.CHMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   185  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   186  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   187      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   188      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   189  } IfxDma_ChannelOperationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   190  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   191  /** \brief Pattern detection selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   192   * Definition in Ifx_DMA.ME0.CHCR.B.PATSEL and Ifx_DMA.ME1.CHCR.B.PATSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   194  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   195  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   196      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   197      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   198      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   204  } IfxDma_ChannelPattern;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   206  /** \brief Channel Priority definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   207   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   208  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   209  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   210      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   211      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   212      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   213  } IfxDma_ChannelPriority;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   215  /** \brief DMA request mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   216   * Definition in Ifx_DMA.ME0.CHCR.B.RROAT and Ifx_DMA.ME1.CHCR.B.RROAT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   217   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   218  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   219  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   220      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   221      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   222  } IfxDma_ChannelRequestMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   224  /** \brief DMA request selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   225   * Definition in Ifx_DMA.ME0.CHCR.B.PRSEL and Ifx_DMA.ME1.CHCR.B.PRSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   227  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   228  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   229      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   230      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   231  } IfxDma_ChannelRequestSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   233  /** \brief shadow definition definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   234   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   235   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   236  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   237  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   238      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   239      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   240      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   251  } IfxDma_ChannelShadow;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   253  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   254  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   255      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   256      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   257      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   259  } IfxDma_HardwareResourcePartition;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   261  /** \brief DMA move engine definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   263  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   264  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   265      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   266      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   267  } IfxDma_MoveEngine;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   269  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   270   * Definition in Ifx_DMA.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   271   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   272  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   274      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   275      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   276  } IfxDma_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   277  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   278  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   280  /** \addtogroup IfxLld_Dma_Std_Reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   281   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   283  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   284  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   285  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   287  /** \brief Return the status of a DMA channel (reset / not reset)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   288   * This API needs to be used after the IfxDma_resetChannel()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   289   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   290   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   291   * \return TRUE if the channel is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   292   * FALSE if the channel is not reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   293   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   294   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   295   *      // check whether the channel is reset or not and also the hardware trigger disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   296   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   297   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   298   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   299   *              // Dma is out of RESET and there is no hardware request enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   300   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   301   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   305  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   307  /** \brief Reset the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   308   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   309   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   310   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   311   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   312   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   313   *      // Apply reset to the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   314   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   315   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   316   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   317   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   318  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   319  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   320  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   322  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   323   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   324  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   325  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   326  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   327  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   329  /** \brief Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   330   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   331   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   332   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   333   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   334   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   335   *      // Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   336   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   337   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   338   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   339   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   340  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   341  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   342  /** \brief Disable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   343   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   344   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   345   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   346   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   347   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   348   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   350  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   352  /** \brief Disable the generation of a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   353   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   354   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   355   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   356   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   357   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   358   *      // Disable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   359   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   360   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   361   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   362   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   363  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   364  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   365  /** \brief Enable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   366   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   367   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   368   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   369   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   370   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   371   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   372   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   373   *              IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   374   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   375   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   376   *      // Do not restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   377   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   378   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   379   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   380   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   381   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   382   *      // Check for end of transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   383   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   384   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   385   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   386   *      // Enable the hardware trigger for channel 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   387   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   388   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   389   *      // Disable the hardware trigger for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   391   *      // Hardware triggers for second time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   392   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   393   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   394   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   395   *              IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   396   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   397   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   398   *      // Restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   399   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   400   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   401   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   402   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   403   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   404  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   405  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   406  /** \brief Enable the generation of  a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   407   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   408   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   409   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   410   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   411   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   412   *      // Enable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   413   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   414   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   415   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   416   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   417  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   419  /** \brief Check the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   420   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   421   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   422   * \return TRUE if the TRL is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   423   * FALSE if the TRL is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   424   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   425   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   426   *      boolean trlFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   427   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   428   *      // Check whether the channel transaction request lost flag is set or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   429   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   430   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   431   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   433  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   435  /** \brief Converts DMA circular range to circular code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   436   * \param range DMA circular range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   437   * \return DMA circular code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   439  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   441  /** \brief Return the hardware transaction request status of a DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   442   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   443   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   444   * \return TRUE if the hardware transaction request is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   445   * FALSE if the hardware transaction request is disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   446   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   447   * A coding example can be found in \ref IfxDma_isChannelReset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   448   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   449   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   450  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   451  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   452  /** \brief Return the status of a DMA channel (transaction pending)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   453   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   454   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   455   * \return TRUE if a transaction request for the given channel is pending
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   456   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   458   *      // check for the channel request pending with the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   459   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   460   *              // There is channel request pending for channel 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   461   *              result |= 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   462   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   463   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   464   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   465   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   466  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   468  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   469   * \param dma pointer to DMA registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   470   * \param mode mode selection (enable/disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   471   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   472   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   473  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   474  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   475  /** \brief Request a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   476   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   477   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   479   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   480   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   481   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   482   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   483  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   484  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   485  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   486  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   487  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   488   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   490  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   491  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   492  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   494  /** \brief Clear the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   495   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   496   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   497   * \param mask value holds the bits to clear or mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   498   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   500   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   501   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   502   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   503   *                                                  IFXDMA_ERROR_S |    // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   504   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   505   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   510   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   512   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   513  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   514  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   515  /** \brief Disable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   516   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   517   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   518   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   519   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   520   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   521   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   522   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   523  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   524  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   525  /** \brief Disable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   526   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   527   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   528   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   530   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   531   *      // Disable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   532   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   533   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   534   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   535   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   537  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   539  /** \brief Enable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   540   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   541   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   542   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   543   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   544   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   545   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   546   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   547  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   548  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   549  /** \brief Enable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   550   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   551   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   552   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   553   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   554   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   555   *      // Enable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   556   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   557   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   558   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   560   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   561  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   562  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   563  /** \brief Return the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   564   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   565   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   566   * \return the content of the DMA.ERRSR register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   568   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   569   *      uint32 errorFlags = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   570   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   571   *      // Get the status of the error flags of move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   572   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   574   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   575   *              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   576   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   578   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   579   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   580   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   581   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   582   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   583   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   584   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   585   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   586   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   587   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   588   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   589   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   590   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   591   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   592   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   593   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   594   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   595   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   596   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   597   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   598   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   599   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   600   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   601   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   602   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   603  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   604  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   605  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   606  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   607  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   608   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   609  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   610  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   611  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   612  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   614  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   615   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   616   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   617   * \return Actual channel destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   618   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   619   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   620   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   621   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   622   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   623   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   625  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   627  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   628   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   629   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   630   * \return Actual channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   631   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   632   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   633   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   634   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   635   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   636   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   637  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   639  /** \brief Return the DMA channel suspend Mode status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   640   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   641   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   642   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   643   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   644  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   646  /** \brief Return remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   647   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   648   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   649   * \return Remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   650   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   651   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   652   *      // Wait till transfer count (TCOUNT) becomes 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   653   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   654   *      bool notFinished;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   655   *      do {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   656   *              notFinished = false;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   657   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   658   *                              notFinished = true;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   659   *                              break;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   660   *                      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   661   *      } while( notFinished );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   662   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   663   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   664   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   665  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   667  /** \brief get the time stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   668   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   669   * \return the current time stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   670   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   671   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   672   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   673   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   674   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   675   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   676  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   678  /** \brief Configure the move count for each DMA channel transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   679   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   680   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   681   * \param blockMode value holds the number of moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   682   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   684   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   685   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   686   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   687  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   688  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   689  /** \brief Configure a DMA channel to "continous transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   690   * After a transaction, the hardware request transaction remain enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   691   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   692   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   693   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   694   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   695   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   696   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   697   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   698  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   699  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   700  /** \brief Configure the destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   701   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   702   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   703   * \param address is the Initial address of the destination pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   704   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   705   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   706   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   707   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   708   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   709  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   710  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   711  /** \brief Configure a DMA channel destination pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   712   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   713   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   714   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   715   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   716   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   717   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   718   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   719   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   720   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   721   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   722  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   723  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   724  /** \brief Configure a DMA channel move
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   725   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   726   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   727   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   728   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   729   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   730   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   731   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   733  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   735  /** \brief Configure a DMA channel shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   736   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   737   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   738   * \param shadow Specifies the shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   739   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   740   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   741   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   742   *      // Push the shadow mode into double buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   743   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   744   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   745   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   746   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   748  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   750  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   751   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   752   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   753   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   754   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   755   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   756   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   757   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   758   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   759  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   760  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   761  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   762   * One transfer request starts a complete DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   763   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   764   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   765   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   766   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   767   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   768   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   769   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   770  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   771  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   772  /** \brief Configure a DMA channel to "single transfer mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   773   * A transfer request is required for each transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   774   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   775   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   776   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   777   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   778   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   779   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   780   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   781  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   782  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   783  /** \brief Configure the source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   784   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   785   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   786   * \param address is the Initial address of the source pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   787   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   788   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   789   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   790   *      // Check for the end of current transaction and before trigger the channel request for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   791   *      // for another channel, re configure the source and destination addresses
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   792   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   793   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   794   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   795   *      // Re-Program the source address for the channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   796   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   797   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the destination address for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   800   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   801   *      // Start DMA transaction for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   803   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   804   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   805   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   806  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   807  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   808  /** \brief Configure a DMA channel source pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   809   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   810   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   811   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   812   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   813   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   814   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   815   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   816   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   817   *      // Re-program the source and destination circular buffer control fields
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   818   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   819   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   820   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   821   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   822   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   823   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   824  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   825  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   826  /** \brief Configure a DMA channel suspend enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   827   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   828   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   829   * \param enable enable (1) / disable (0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   830   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   831   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   832  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   833  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   834  /** \brief Configure the move count of a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   835   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   836   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   837   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   838   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   839   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   840   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   841   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   842   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   843   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   844   *      // Wait till end of transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   845   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   846   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   847   *      // Change the TREL configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   848   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   849   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the BLKM configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   852   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the Move size configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   855   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   856   *      // Pull down the channel pending request after the first transfer is initiated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   858   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the transaction gets over
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   861   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   862   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   864   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   867   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   868   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   869   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   870  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   871  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   872  /** \brief Configure the shadow pointer register to read only
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   873   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   874   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   875   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   876   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   877   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   878   *      // Disable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   879   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   880   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   881   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   882   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   883  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   884  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   885  /** \brief Configure the shadow pointer register to write-able
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   886   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   887   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   888   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   889   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   890   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   891   *      // Enable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   892   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   893   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   894   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   895   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   896  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   897  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   898  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   899  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   900  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   901   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   902  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   903  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   904  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   905  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   906  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   907  /** \brief Clear channel halt request and aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   908   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   909   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   910   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   911   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   912   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   913   *      // Quit the halt mode of operation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   914   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   915   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   916   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   917   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   918  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   920  /** \brief Get channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   921   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   922   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   923   * \return halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   924   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   925   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   926   *      // Check for the channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   927   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   928   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   929   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   930   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   931  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   932  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   933  /** \brief setting channel halt request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   934   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   935   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   936   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   937   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   938   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   939   *      // Halt the channel processing
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   940   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   941   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   942   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   943   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   944  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   945  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   946  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   947  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   948  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   949   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   950  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   951  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   952  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   953  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   954  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   955  /** \brief get information on buffer being read by software and clear the notification flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   956   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   957   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   958   * \return TRUE  if one of the buffers is being read by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   959   * FALSE if one of the buffers is already read by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   960   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   961   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   962   *      // Check the buffer being read (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   963   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   964   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   965   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   966   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   967  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   968  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   969  /** \brief get Double buffer selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   970   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   971   * \param channelId channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   972   * \return TRUE if buffer 1 is being filled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   973   * FALSE if buffer 0 is being filled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   974   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   975   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   976   *      boolean buffer_being_filled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   977   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   978   *      // Check the buffer being filled (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   979   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   980   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   981   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   982   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   983  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   984  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   985  /** \brief keeps the double buffer active
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   986   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   987   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   988   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   989   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   990   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   991   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   992   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   993   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   994   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   995  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   996  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   997  /** \brief Double buffer switch application
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   998   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   999   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1000   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1001   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1002   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1003   *      // Apply software buffer switch
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1004   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1005   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1006   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1007   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1008  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1009  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1010  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1011  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1012  /** \addtogroup IfxLld_Dma_Std_Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1013   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1014  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1015  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1016  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1017  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1018  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1019  /** \brief Clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1020   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1021   * \param channelId channel for which the interrupt flag should be cleared
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1022   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1023   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1024   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1025   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1026   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1027  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1028  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1029  /** \brief Disable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1030   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1031   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1032   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1033   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1034   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1035   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1036   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1037   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1038   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1039  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1040  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1041  /** \brief Enable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1042   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1043   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1044   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1045   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1046   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1047   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1048   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1049   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1050   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1051  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1052  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1053  /** \brief Return and clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1054   * The flag is automatically cleared with the call to this function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1055   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1056   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1057   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1058   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1059   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1060   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1061   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1062   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1063   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1064   *      // Wait till end of the transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1065   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1066   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1067   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1068   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1069  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1070  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1071  /** \brief Returns and clears the pattern detection interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1072   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1073   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1074   * \return TRUE  if pattern detection for a given channel is found
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1075   * FALSE if pattern detection for a given channel is not found
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1076   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1077   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1078   *      // wait till pattern match is found for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1079   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1080   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1081   *      // Wait for the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1082   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1083   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1084   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1085   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1086  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1087  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1088  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1089   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1090   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1091   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1092   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1093   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1094   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1095   *      // wait for the destination buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1096   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1097   *      boolean destinationWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1098   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1099   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1100   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1101   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1103  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1105  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1106   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1107   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1108   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1109   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1110   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1111   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1112   *      // wait for the source buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1113   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1114   *      boolean sourceWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1115   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1116   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1117   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1118   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1119   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1120  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1122  /** \brief Return a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1123   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1124   * \param channelId channel for which the interrupt flag should be returned
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1125   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1126   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1127   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1128   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1129   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1130   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1131  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1132  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1133  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1134   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1135   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1136   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1137   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1138   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1139   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1140   *      boolean patternDetectOldVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1142   *      // Check the old value of the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1143   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1144   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1146   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1147  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1148  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1149  /** \brief Returns the SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1150   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1151   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1152   * \return SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1153   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1154   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1155   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1156   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1157   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1158   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1159  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1160  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1161  /** \brief Setting of channel interrupt service request by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1162   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1163   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1164   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1165   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1166   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1167   *      // Set the channel interrupt service request through software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1168   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1169   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1171   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1172  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1173  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1174  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1176  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1177  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1178  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1179  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1180  /** \brief Enable the Swap Data CRC Byte order
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1181   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1182   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1185   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1186   *      // Enable the Swap Data CRC Byte order
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1187   *      IfxDma_enableSwapDataByte(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1188   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1189   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1190   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1191  IFX_INLINE void IfxDma_enableSwapDataByte(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1193  /** \brief Configure the hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1194   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1195   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1196   * \param resourcePartition Hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1197   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1198   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1199   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1200   *      // Set the required hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1201   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1202   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1203   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1204   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1205  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1206  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1207  /** \brief Sets the Interrupt control value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1208   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1209   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1210   * \param value Interrupt control value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1211   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1213  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1215  /** \brief Sets the Circular Buffer Destination Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1216   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1217   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1218   * \param length Circular Buffer Destination Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1219   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1220   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1221  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1222  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1223  /** \brief Sets the Circular Buffer Source Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1224   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1225   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1226   * \param length Circular Buffer Source Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1227   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1228   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1229  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1230  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1231  /** \brief Enable the Source Circular Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1232   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1233   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1234   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1235   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1236  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1237  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1238  /** \brief Enable the Destination Circular Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1239   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1240   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1241   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1242   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1243  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1244  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1245  /** \brief Returns the Data CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1246   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1247   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1248   * \return The Data CRC value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1250  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1252  /** \brief Returns the Source and Destination CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1253   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1254   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1255   * \return The source and destination CRC values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1256   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1257  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1258  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1259  /** \brief Returns the ERR pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1260   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1261   * \param resourcePartition Hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1262   * \return ERR pointer for given DMA resource Partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1263   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1264  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma, IfxDma_HardwareResourcePartition resourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1265  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1266  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1267  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1268  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1269  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1270  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1271  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1272      dma->TSR[channelId].B.HLTCLR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1273  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1274  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1275  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1276  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1277  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1278      dma->CH[channelId].CHCSR.B.CICH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1279  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1280  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1281  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1282  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1283  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1284      dma->TSR[channelId].B.CTL = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1285  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1288  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1289  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1290      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1291      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1292          dma->ME1.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1293      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1294      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1295      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1296          dma->ME0.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1297      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1298  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1299  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1301  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1302  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1303      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1304  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1305  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1307  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1308  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1309      dma->TSR[channelId].B.DCH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1310  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1311  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1312  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1313  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1314  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1315      dma->TSR[channelId].B.ETRL = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1316  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1317  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1319  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1320  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1321      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1322      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1323          dma->ME1.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1324      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1325      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1326      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1327          dma->ME0.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1328      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1329  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1330  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1331  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1332  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1333  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1334      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1335      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1336          dma->ME1.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1337      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1338      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1339      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1340          dma->ME0.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1341      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1342  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1343  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1344  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1345  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1346  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1347      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1348  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1349  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1350  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1351  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1352  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1353      dma->TSR[channelId].B.ECH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1354  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1355  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1356  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1357  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1358  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1359      dma->TSR[channelId].B.ETRL = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1360  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1361  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1362  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1363  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1364  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1365      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1366      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1367          dma->ME1.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1368      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1369      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1370      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1371          dma->ME0.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1372      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1373  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1374  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1375  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1376  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1377  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1378      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1379      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1380          dma->ME1.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1381      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1382      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1383      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1384          dma->ME0.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1385      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1386  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1388  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1389  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1390  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1391      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1393      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1394  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1395      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1396      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1397          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1398      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1399  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1400      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1401  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1402  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1403  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1404  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1405  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1406      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1407  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1408      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1409  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1410      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1411      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1412          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1413      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1414  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1415      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1416  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1417  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1419  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1420  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1421      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1422  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1423      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1425      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1426      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1427          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1428      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1429  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1430      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1431  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1432  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1434  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1435  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1436      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1437  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1438      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1439  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1440      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1441      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1442          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1443      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1444  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1445      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1446  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1447  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1448  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1449  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1450  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1451      return dma->CH[channelId].DADR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1452  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1453  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1454  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1455  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1456  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1457      return dma->TSR[channelId].B.HLTACK != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1458  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1459  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1460  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1461  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1462  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1463      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1465      result = dma->CH[channelId].CHCSR.B.ICH;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1466  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1467      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1468  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1469  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1470  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1471  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1472  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1473      return dma->CH[channelId].CHCSR.B.LXO != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1474  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1475  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1477  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1478  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1479      return dma->CH[channelId].SADR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1480  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1481  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1482  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1483  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1484  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1485      return dma->SUSACR[channelId].B.SUSAC;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1486  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1488  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1489  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1490  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1491      return dma->TSR[channelId].B.TRL != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1492  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1494  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1495  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1496  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1497      return dma->CH[channelId].CHCSR.B.TCOUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1498  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1499  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1500  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1501  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1502  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1503      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1504  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1505  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1506  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1507  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1508  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1509      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1510  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1511      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1512  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1513      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1514      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1515          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1516      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1517  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1518      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1519  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1520  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1522  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1523  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1524      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1525  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1526  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1527  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1528  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1529  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1530      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1531      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1532          return dma->ME1.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1533      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1534      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1535      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1536          return dma->ME0.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1537      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1538  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1539  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1541  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1542  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1543      IFX_UNUSED_PARAMETER(dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1544      // only a single DMA available, therefore no check for the dma pointer required
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1545      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1546  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1547  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1548  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1549  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1550  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1551      return dma->TIME.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1552  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1555  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1556  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1557      return dma->TSR[channelId].B.RST == 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1558  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1559  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1560  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1561  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1562  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1563      return dma->TSR[channelId].B.HTRE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1564  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1565  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1566  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1567  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1568  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1569      return dma->TSR[channelId].B.CH != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1570  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1571  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1572  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1573  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1574  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1575      dma->CH[channelId].CHCSR.U = 0U << IFX_DMA_CH_CHCSR_FROZEN_OFF;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1576  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1577  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1578  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1579  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1580  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1581      dma->TSR[channelId].B.RST = 1;
	or	d15,#1
	st.b	[a15]7680,d15

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   141  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   142      while (!(IfxDma_isChannelReset(dma->dma, channel)))
.L6:
	fcall	.cocofun_4
.L177:
	jnz.t	d15:0,.L6
.L201:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   143      {}
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   144  }
	ret
.L83:
	
__IfxDma_Dma_deInitChannel_function_end:
	.size	IfxDma_Dma_deInitChannel,__IfxDma_Dma_deInitChannel_function_end-IfxDma_Dma_deInitChannel
.L42:
	; End of function
	
	.sdecl	'.text.IfxDma_Dma..cocofun_4',code,cluster('.cocofun_4')
	.sect	'.text.IfxDma_Dma..cocofun_4'
	.align	2
; Function .cocofun_4
.L18:
.cocofun_4:	.type	func
; Function body .cocofun_4, coco_iter:0
	ld.a	a15,[a4]
.L288:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    41   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    42   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    43   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    44   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    45   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    46   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    47   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    48   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    49   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    50   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    51   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    52   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    53   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    54   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    55   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    56   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    57   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    59  #ifndef IFXDMA_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    60  #define IFXDMA_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    62  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    63  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    65  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    66  #include "_Impl/IfxDma_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    67  #include "IfxDma_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    69  #include "IfxDma_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    70  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    71  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    72  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    73  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    74  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    75  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    77  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    78  /** \addtogroup IfxLld_Dma_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    79   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    80  /** \brief Bus Master Mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    81   * Definition in Ifx_DMA.MODE[4].B.MODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    82   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    83  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    84  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    85      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    86      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    87  } IfxDma_BusMasterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    89  /** \brief Channel Bus Priority definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    93      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    94      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    95      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    96  } IfxDma_ChannelBusPriority;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    97  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    98  /** \brief DMA circular buffer (wrap around) definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    99   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   103      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   104      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   105      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   119  } IfxDma_ChannelIncrementCircular;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   121  /** \brief DMA incrementation direction definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   122   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   124  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   125  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   126      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   127      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   128  } IfxDma_ChannelIncrementDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   129  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   130  /** \brief DMA incrementation definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   131   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   132   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   133  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   134  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   135      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   136      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   137      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   143  } IfxDma_ChannelIncrementStep;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   145  /** \brief Channel Transfer Interrupt generation mechanism.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   146   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   147   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   148  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   149  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   150      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   151      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   152  } IfxDma_ChannelInterruptControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   153  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   154  /** \brief DMA transfer definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   155   * Definition in Ifx_DMA.ME0.CHCR.B.BLKM and Ifx_DMA.ME1.CHCR.B.BLKM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   156   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   157  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   158  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   159      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   160      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   161      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   167  } IfxDma_ChannelMove;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   169  /** \brief DMA move size definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   170   * Definition in Ifx_DMA.ME0.CHCR.B.CHDW and Ifx_DMA.ME1.CHCR.B.CHDW
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   171   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   172  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   173  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   174      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   175      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   176      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   180  } IfxDma_ChannelMoveSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   182  /** \brief DMA operation mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   183   * Definition in Ifx_DMA.ME0.CHCR.B.CHMODE and Ifx_DMA.ME1.CHCR.B.CHMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   185  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   186  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   187      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   188      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   189  } IfxDma_ChannelOperationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   190  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   191  /** \brief Pattern detection selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   192   * Definition in Ifx_DMA.ME0.CHCR.B.PATSEL and Ifx_DMA.ME1.CHCR.B.PATSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   194  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   195  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   196      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   197      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   198      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   204  } IfxDma_ChannelPattern;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   206  /** \brief Channel Priority definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   207   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   208  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   209  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   210      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   211      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   212      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   213  } IfxDma_ChannelPriority;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   215  /** \brief DMA request mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   216   * Definition in Ifx_DMA.ME0.CHCR.B.RROAT and Ifx_DMA.ME1.CHCR.B.RROAT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   217   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   218  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   219  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   220      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   221      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   222  } IfxDma_ChannelRequestMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   224  /** \brief DMA request selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   225   * Definition in Ifx_DMA.ME0.CHCR.B.PRSEL and Ifx_DMA.ME1.CHCR.B.PRSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   227  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   228  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   229      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   230      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   231  } IfxDma_ChannelRequestSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   233  /** \brief shadow definition definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   234   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   235   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   236  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   237  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   238      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   239      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   240      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   251  } IfxDma_ChannelShadow;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   253  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   254  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   255      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   256      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   257      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   259  } IfxDma_HardwareResourcePartition;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   261  /** \brief DMA move engine definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   263  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   264  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   265      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   266      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   267  } IfxDma_MoveEngine;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   269  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   270   * Definition in Ifx_DMA.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   271   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   272  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   274      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   275      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   276  } IfxDma_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   277  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   278  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   280  /** \addtogroup IfxLld_Dma_Std_Reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   281   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   283  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   284  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   285  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   287  /** \brief Return the status of a DMA channel (reset / not reset)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   288   * This API needs to be used after the IfxDma_resetChannel()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   289   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   290   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   291   * \return TRUE if the channel is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   292   * FALSE if the channel is not reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   293   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   294   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   295   *      // check whether the channel is reset or not and also the hardware trigger disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   296   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   297   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   298   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   299   *              // Dma is out of RESET and there is no hardware request enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   300   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   301   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   305  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   307  /** \brief Reset the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   308   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   309   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   310   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   311   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   312   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   313   *      // Apply reset to the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   314   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   315   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   316   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   317   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   318  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   319  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   320  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   322  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   323   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   324  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   325  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   326  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   327  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   329  /** \brief Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   330   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   331   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   332   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   333   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   334   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   335   *      // Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   336   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   337   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   338   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   339   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   340  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   341  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   342  /** \brief Disable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   343   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   344   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   345   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   346   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   347   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   348   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   350  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   352  /** \brief Disable the generation of a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   353   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   354   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   355   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   356   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   357   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   358   *      // Disable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   359   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   360   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   361   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   362   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   363  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   364  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   365  /** \brief Enable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   366   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   367   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   368   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   369   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   370   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   371   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   372   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   373   *              IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   374   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   375   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   376   *      // Do not restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   377   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   378   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   379   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   380   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   381   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   382   *      // Check for end of transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   383   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   384   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   385   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   386   *      // Enable the hardware trigger for channel 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   387   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   388   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   389   *      // Disable the hardware trigger for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   391   *      // Hardware triggers for second time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   392   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   393   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   394   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   395   *              IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   396   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   397   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   398   *      // Restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   399   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   400   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   401   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   402   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   403   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   404  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   405  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   406  /** \brief Enable the generation of  a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   407   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   408   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   409   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   410   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   411   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   412   *      // Enable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   413   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   414   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   415   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   416   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   417  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   419  /** \brief Check the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   420   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   421   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   422   * \return TRUE if the TRL is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   423   * FALSE if the TRL is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   424   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   425   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   426   *      boolean trlFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   427   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   428   *      // Check whether the channel transaction request lost flag is set or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   429   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   430   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   431   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   433  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   435  /** \brief Converts DMA circular range to circular code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   436   * \param range DMA circular range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   437   * \return DMA circular code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   439  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   441  /** \brief Return the hardware transaction request status of a DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   442   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   443   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   444   * \return TRUE if the hardware transaction request is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   445   * FALSE if the hardware transaction request is disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   446   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   447   * A coding example can be found in \ref IfxDma_isChannelReset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   448   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   449   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   450  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   451  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   452  /** \brief Return the status of a DMA channel (transaction pending)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   453   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   454   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   455   * \return TRUE if a transaction request for the given channel is pending
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   456   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   458   *      // check for the channel request pending with the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   459   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   460   *              // There is channel request pending for channel 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   461   *              result |= 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   462   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   463   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   464   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   465   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   466  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   468  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   469   * \param dma pointer to DMA registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   470   * \param mode mode selection (enable/disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   471   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   472   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   473  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   474  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   475  /** \brief Request a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   476   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   477   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   479   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   480   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   481   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   482   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   483  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   484  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   485  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   486  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   487  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   488   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   490  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   491  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   492  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   494  /** \brief Clear the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   495   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   496   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   497   * \param mask value holds the bits to clear or mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   498   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   500   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   501   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   502   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   503   *                                                  IFXDMA_ERROR_S |    // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   504   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   505   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   510   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   512   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   513  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   514  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   515  /** \brief Disable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   516   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   517   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   518   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   519   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   520   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   521   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   522   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   523  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   524  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   525  /** \brief Disable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   526   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   527   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   528   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   530   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   531   *      // Disable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   532   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   533   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   534   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   535   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   537  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   539  /** \brief Enable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   540   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   541   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   542   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   543   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   544   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   545   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   546   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   547  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   548  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   549  /** \brief Enable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   550   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   551   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   552   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   553   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   554   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   555   *      // Enable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   556   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   557   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   558   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   560   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   561  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   562  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   563  /** \brief Return the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   564   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   565   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   566   * \return the content of the DMA.ERRSR register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   568   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   569   *      uint32 errorFlags = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   570   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   571   *      // Get the status of the error flags of move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   572   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   574   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   575   *              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   576   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   578   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   579   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   580   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   581   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   582   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   583   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   584   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   585   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   586   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   587   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   588   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   589   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   590   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   591   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   592   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   593   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   594   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   595   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   596   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   597   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   598   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   599   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   600   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   601   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   602   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   603  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   604  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   605  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   606  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   607  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   608   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   609  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   610  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   611  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   612  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   614  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   615   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   616   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   617   * \return Actual channel destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   618   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   619   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   620   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   621   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   622   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   623   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   625  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   627  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   628   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   629   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   630   * \return Actual channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   631   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   632   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   633   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   634   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   635   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   636   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   637  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   639  /** \brief Return the DMA channel suspend Mode status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   640   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   641   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   642   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   643   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   644  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   646  /** \brief Return remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   647   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   648   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   649   * \return Remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   650   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   651   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   652   *      // Wait till transfer count (TCOUNT) becomes 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   653   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   654   *      bool notFinished;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   655   *      do {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   656   *              notFinished = false;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   657   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   658   *                              notFinished = true;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   659   *                              break;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   660   *                      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   661   *      } while( notFinished );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   662   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   663   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   664   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   665  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   667  /** \brief get the time stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   668   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   669   * \return the current time stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   670   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   671   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   672   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   673   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   674   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   675   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   676  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   678  /** \brief Configure the move count for each DMA channel transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   679   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   680   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   681   * \param blockMode value holds the number of moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   682   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   684   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   685   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   686   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   687  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   688  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   689  /** \brief Configure a DMA channel to "continous transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   690   * After a transaction, the hardware request transaction remain enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   691   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   692   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   693   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   694   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   695   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   696   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   697   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   698  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   699  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   700  /** \brief Configure the destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   701   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   702   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   703   * \param address is the Initial address of the destination pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   704   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   705   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   706   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   707   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   708   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   709  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   710  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   711  /** \brief Configure a DMA channel destination pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   712   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   713   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   714   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   715   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   716   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   717   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   718   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   719   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   720   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   721   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   722  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   723  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   724  /** \brief Configure a DMA channel move
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   725   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   726   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   727   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   728   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   729   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   730   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   731   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   733  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   735  /** \brief Configure a DMA channel shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   736   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   737   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   738   * \param shadow Specifies the shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   739   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   740   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   741   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   742   *      // Push the shadow mode into double buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   743   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   744   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   745   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   746   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   748  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   750  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   751   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   752   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   753   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   754   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   755   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   756   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   757   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   758   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   759  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   760  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   761  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   762   * One transfer request starts a complete DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   763   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   764   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   765   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   766   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   767   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   768   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   769   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   770  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   771  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   772  /** \brief Configure a DMA channel to "single transfer mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   773   * A transfer request is required for each transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   774   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   775   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   776   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   777   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   778   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   779   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   780   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   781  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   782  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   783  /** \brief Configure the source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   784   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   785   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   786   * \param address is the Initial address of the source pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   787   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   788   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   789   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   790   *      // Check for the end of current transaction and before trigger the channel request for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   791   *      // for another channel, re configure the source and destination addresses
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   792   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   793   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   794   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   795   *      // Re-Program the source address for the channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   796   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   797   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the destination address for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   800   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   801   *      // Start DMA transaction for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   803   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   804   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   805   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   806  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   807  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   808  /** \brief Configure a DMA channel source pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   809   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   810   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   811   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   812   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   813   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   814   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   815   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   816   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   817   *      // Re-program the source and destination circular buffer control fields
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   818   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   819   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   820   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   821   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   822   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   823   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   824  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   825  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   826  /** \brief Configure a DMA channel suspend enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   827   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   828   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   829   * \param enable enable (1) / disable (0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   830   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   831   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   832  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   833  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   834  /** \brief Configure the move count of a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   835   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   836   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   837   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   838   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   839   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   840   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   841   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   842   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   843   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   844   *      // Wait till end of transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   845   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   846   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   847   *      // Change the TREL configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   848   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   849   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the BLKM configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   852   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the Move size configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   855   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   856   *      // Pull down the channel pending request after the first transfer is initiated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   858   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the transaction gets over
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   861   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   862   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   864   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   867   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   868   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   869   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   870  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   871  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   872  /** \brief Configure the shadow pointer register to read only
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   873   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   874   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   875   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   876   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   877   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   878   *      // Disable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   879   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   880   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   881   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   882   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   883  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   884  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   885  /** \brief Configure the shadow pointer register to write-able
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   886   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   887   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   888   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   889   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   890   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   891   *      // Enable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   892   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   893   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   894   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   895   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   896  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   897  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   898  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   899  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   900  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   901   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   902  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   903  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   904  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   905  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   906  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   907  /** \brief Clear channel halt request and aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   908   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   909   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   910   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   911   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   912   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   913   *      // Quit the halt mode of operation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   914   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   915   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   916   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   917   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   918  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   920  /** \brief Get channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   921   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   922   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   923   * \return halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   924   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   925   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   926   *      // Check for the channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   927   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   928   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   929   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   930   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   931  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   932  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   933  /** \brief setting channel halt request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   934   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   935   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   936   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   937   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   938   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   939   *      // Halt the channel processing
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   940   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   941   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   942   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   943   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   944  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   945  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   946  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   947  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   948  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   949   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   950  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   951  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   952  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   953  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   954  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   955  /** \brief get information on buffer being read by software and clear the notification flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   956   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   957   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   958   * \return TRUE  if one of the buffers is being read by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   959   * FALSE if one of the buffers is already read by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   960   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   961   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   962   *      // Check the buffer being read (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   963   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   964   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   965   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   966   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   967  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   968  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   969  /** \brief get Double buffer selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   970   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   971   * \param channelId channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   972   * \return TRUE if buffer 1 is being filled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   973   * FALSE if buffer 0 is being filled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   974   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   975   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   976   *      boolean buffer_being_filled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   977   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   978   *      // Check the buffer being filled (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   979   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   980   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   981   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   982   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   983  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   984  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   985  /** \brief keeps the double buffer active
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   986   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   987   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   988   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   989   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   990   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   991   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   992   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   993   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   994   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   995  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   996  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   997  /** \brief Double buffer switch application
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   998   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   999   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1000   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1001   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1002   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1003   *      // Apply software buffer switch
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1004   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1005   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1006   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1007   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1008  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1009  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1010  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1011  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1012  /** \addtogroup IfxLld_Dma_Std_Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1013   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1014  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1015  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1016  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1017  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1018  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1019  /** \brief Clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1020   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1021   * \param channelId channel for which the interrupt flag should be cleared
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1022   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1023   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1024   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1025   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1026   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1027  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1028  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1029  /** \brief Disable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1030   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1031   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1032   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1033   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1034   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1035   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1036   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1037   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1038   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1039  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1040  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1041  /** \brief Enable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1042   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1043   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1044   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1045   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1046   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1047   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1048   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1049   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1050   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1051  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1052  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1053  /** \brief Return and clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1054   * The flag is automatically cleared with the call to this function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1055   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1056   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1057   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1058   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1059   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1060   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1061   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1062   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1063   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1064   *      // Wait till end of the transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1065   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1066   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1067   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1068   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1069  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1070  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1071  /** \brief Returns and clears the pattern detection interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1072   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1073   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1074   * \return TRUE  if pattern detection for a given channel is found
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1075   * FALSE if pattern detection for a given channel is not found
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1076   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1077   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1078   *      // wait till pattern match is found for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1079   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1080   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1081   *      // Wait for the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1082   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1083   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1084   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1085   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1086  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1087  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1088  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1089   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1090   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1091   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1092   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1093   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1094   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1095   *      // wait for the destination buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1096   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1097   *      boolean destinationWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1098   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1099   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1100   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1101   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1103  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1105  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1106   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1107   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1108   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1109   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1110   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1111   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1112   *      // wait for the source buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1113   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1114   *      boolean sourceWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1115   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1116   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1117   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1118   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1119   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1120  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1122  /** \brief Return a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1123   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1124   * \param channelId channel for which the interrupt flag should be returned
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1125   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1126   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1127   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1128   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1129   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1130   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1131  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1132  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1133  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1134   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1135   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1136   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1137   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1138   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1139   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1140   *      boolean patternDetectOldVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1142   *      // Check the old value of the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1143   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1144   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1146   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1147  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1148  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1149  /** \brief Returns the SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1150   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1151   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1152   * \return SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1153   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1154   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1155   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1156   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1157   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1158   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1159  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1160  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1161  /** \brief Setting of channel interrupt service request by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1162   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1163   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1164   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1165   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1166   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1167   *      // Set the channel interrupt service request through software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1168   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1169   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1171   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1172  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1173  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1174  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1176  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1177  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1178  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1179  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1180  /** \brief Enable the Swap Data CRC Byte order
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1181   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1182   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1185   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1186   *      // Enable the Swap Data CRC Byte order
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1187   *      IfxDma_enableSwapDataByte(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1188   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1189   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1190   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1191  IFX_INLINE void IfxDma_enableSwapDataByte(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1193  /** \brief Configure the hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1194   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1195   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1196   * \param resourcePartition Hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1197   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1198   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1199   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1200   *      // Set the required hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1201   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1202   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1203   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1204   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1205  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1206  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1207  /** \brief Sets the Interrupt control value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1208   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1209   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1210   * \param value Interrupt control value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1211   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1213  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1215  /** \brief Sets the Circular Buffer Destination Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1216   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1217   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1218   * \param length Circular Buffer Destination Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1219   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1220   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1221  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1222  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1223  /** \brief Sets the Circular Buffer Source Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1224   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1225   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1226   * \param length Circular Buffer Source Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1227   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1228   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1229  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1230  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1231  /** \brief Enable the Source Circular Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1232   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1233   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1234   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1235   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1236  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1237  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1238  /** \brief Enable the Destination Circular Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1239   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1240   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1241   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1242   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1243  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1244  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1245  /** \brief Returns the Data CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1246   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1247   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1248   * \return The Data CRC value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1250  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1252  /** \brief Returns the Source and Destination CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1253   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1254   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1255   * \return The source and destination CRC values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1256   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1257  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1258  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1259  /** \brief Returns the ERR pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1260   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1261   * \param resourcePartition Hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1262   * \return ERR pointer for given DMA resource Partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1263   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1264  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma, IfxDma_HardwareResourcePartition resourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1265  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1266  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1267  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1268  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1269  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1270  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1271  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1272      dma->TSR[channelId].B.HLTCLR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1273  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1274  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1275  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1276  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1277  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1278      dma->CH[channelId].CHCSR.B.CICH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1279  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1280  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1281  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1282  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1283  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1284      dma->TSR[channelId].B.CTL = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1285  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1288  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1289  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1290      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1291      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1292          dma->ME1.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1293      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1294      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1295      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1296          dma->ME0.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1297      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1298  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1299  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1301  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1302  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1303      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1304  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1305  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1307  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1308  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1309      dma->TSR[channelId].B.DCH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1310  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1311  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1312  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1313  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1314  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1315      dma->TSR[channelId].B.ETRL = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1316  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1317  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1319  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1320  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1321      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1322      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1323          dma->ME1.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1324      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1325      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1326      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1327          dma->ME0.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1328      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1329  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1330  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1331  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1332  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1333  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1334      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1335      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1336          dma->ME1.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1337      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1338      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1339      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1340          dma->ME0.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1341      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1342  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1343  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1344  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1345  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1346  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1347      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1348  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1349  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1350  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1351  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1352  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1353      dma->TSR[channelId].B.ECH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1354  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1355  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1356  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1357  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1358  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1359      dma->TSR[channelId].B.ETRL = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1360  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1361  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1362  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1363  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1364  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1365      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1366      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1367          dma->ME1.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1368      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1369      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1370      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1371          dma->ME0.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1372      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1373  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1374  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1375  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1376  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1377  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1378      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1379      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1380          dma->ME1.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1381      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1382      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1383      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1384          dma->ME0.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1385      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1386  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1388  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1389  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1390  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1391      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1393      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1394  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1395      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1396      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1397          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1398      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1399  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1400      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1401  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1402  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1403  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1404  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1405  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1406      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1407  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1408      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1409  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1410      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1411      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1412          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1413      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1414  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1415      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1416  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1417  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1419  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1420  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1421      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1422  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1423      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1425      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1426      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1427          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1428      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1429  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1430      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1431  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1432  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1434  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1435  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1436      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1437  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1438      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1439  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1440      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1441      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1442          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1443      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1444  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1445      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1446  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1447  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1448  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1449  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1450  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1451      return dma->CH[channelId].DADR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1452  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1453  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1454  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1455  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1456  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1457      return dma->TSR[channelId].B.HLTACK != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1458  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1459  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1460  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1461  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1462  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1463      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1465      result = dma->CH[channelId].CHCSR.B.ICH;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1466  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1467      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1468  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1469  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1470  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1471  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1472  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1473      return dma->CH[channelId].CHCSR.B.LXO != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1474  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1475  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1477  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1478  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1479      return dma->CH[channelId].SADR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1480  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1481  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1482  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1483  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1484  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1485      return dma->SUSACR[channelId].B.SUSAC;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1486  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1488  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1489  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1490  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1491      return dma->TSR[channelId].B.TRL != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1492  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1494  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1495  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1496  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1497      return dma->CH[channelId].CHCSR.B.TCOUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1498  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1499  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1500  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1501  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1502  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1503      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1504  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1505  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1506  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1507  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1508  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1509      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1510  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1511      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1512  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1513      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1514      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1515          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1516      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1517  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1518      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1519  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1520  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1522  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1523  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1524      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1525  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1526  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1527  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1528  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1529  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1530      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1531      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1532          return dma->ME1.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1533      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1534      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1535      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1536          return dma->ME0.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1537      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1538  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1539  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1541  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1542  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1543      IFX_UNUSED_PARAMETER(dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1544      // only a single DMA available, therefore no check for the dma pointer required
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1545      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1546  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1547  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1548  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1549  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1550  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1551      return dma->TIME.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1552  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1555  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1556  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1557      return dma->TSR[channelId].B.RST == 0;
	addsc.a	a15,a15,d4,#2
.L289:
	ld.bu	d15,[a15]7680
.L290:
	fret
.L77:
	; End of function
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_initChannel',code,cluster('IfxDma_Dma_initChannel')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_initChannel'
	.align	2
	
	.global	IfxDma_Dma_initChannel

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   145  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   146  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   147  void IfxDma_Dma_initChannel(IfxDma_Dma_Channel *channel, const IfxDma_Dma_ChannelConfig *config)
; Function IfxDma_Dma_initChannel
.L20:
IfxDma_Dma_initChannel:	.type	func
	mov.aa	a13,a5
.L179:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   148  {
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   149      Ifx_DMA *dma = config->module->dma;
	ld.a	a2,[a13]
.L217:
	mov.aa	a15,a4
.L180:
	ld.a	a12,[a2]
.L181:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   150  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   151      channel->dma       = dma;
	st.a	[a15],a12
.L218:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   152      channel->channelId = config->channelId;
	ld.bu	d15,[a13]4
.L219:
	st.b	[a15]4,d15
.L220:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   153      channel->channel   = &dma->CH[config->channelId];
	ld.b	d15,[a13]4
	sha	d15,#5
.L221:
	addsc.a	a2,a12,d15,#0
	lea	a4,[a2]8192
.L178:
	st.a	[a15]8,a4
.L222:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   154  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   155      IfxDma_Dma_configureTransactionSet(channel->channel, config);
	call	IfxDma_Dma_configureTransactionSet
.L116:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   156  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   157      {
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   158          Ifx_DMA_TSR tsr;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   159          tsr.U = 0;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   160  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   161          if (config->hardwareRequestEnabled)
	ld.bu	d15,[a13]35
.L223:
	mov	d0,#0
.L182:
	jeq	d15,#0,.L7
.L224:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   162          {
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   163              tsr.B.ECH = 1;
	insert	d0,d0,#1,#16,#1
	j	.L8
.L7:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   164          }
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   165          else
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   166          {
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   167              tsr.B.DCH = 1;
	insert	d0,d0,#1,#17,#1
.L8:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   168          }
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   169  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   170          dma->TSR[channel->channelId].U = tsr.U;
	ld.b	d15,[a15]4
.L225:
	addsc.a	a2,a12,d15,#2
.L226:
	st.w	[a2]7680,d0
.L117:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   171      }
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   172  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   173      if (config->channelInterruptPriority > 0)
	ld.hu	d0,[a13]52
.L183:
	jeq	d0,#0,.L9
.L120:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    41   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    42   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    43   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    44   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    45   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    46   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    47   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    48   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    49   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    50   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    51   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    52   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    53   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    54   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    55   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    56   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    57   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    59  #ifndef IFXDMA_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    60  #define IFXDMA_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    62  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    63  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    65  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    66  #include "_Impl/IfxDma_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    67  #include "IfxDma_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    69  #include "IfxDma_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    70  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    71  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    72  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    73  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    74  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    75  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    77  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    78  /** \addtogroup IfxLld_Dma_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    79   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    80  /** \brief Bus Master Mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    81   * Definition in Ifx_DMA.MODE[4].B.MODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    82   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    83  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    84  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    85      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    86      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    87  } IfxDma_BusMasterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    89  /** \brief Channel Bus Priority definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    93      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    94      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    95      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    96  } IfxDma_ChannelBusPriority;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    97  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    98  /** \brief DMA circular buffer (wrap around) definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    99   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   103      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   104      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   105      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   119  } IfxDma_ChannelIncrementCircular;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   121  /** \brief DMA incrementation direction definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   122   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   124  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   125  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   126      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   127      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   128  } IfxDma_ChannelIncrementDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   129  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   130  /** \brief DMA incrementation definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   131   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   132   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   133  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   134  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   135      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   136      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   137      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   143  } IfxDma_ChannelIncrementStep;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   145  /** \brief Channel Transfer Interrupt generation mechanism.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   146   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   147   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   148  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   149  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   150      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   151      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   152  } IfxDma_ChannelInterruptControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   153  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   154  /** \brief DMA transfer definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   155   * Definition in Ifx_DMA.ME0.CHCR.B.BLKM and Ifx_DMA.ME1.CHCR.B.BLKM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   156   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   157  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   158  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   159      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   160      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   161      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   167  } IfxDma_ChannelMove;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   169  /** \brief DMA move size definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   170   * Definition in Ifx_DMA.ME0.CHCR.B.CHDW and Ifx_DMA.ME1.CHCR.B.CHDW
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   171   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   172  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   173  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   174      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   175      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   176      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   180  } IfxDma_ChannelMoveSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   182  /** \brief DMA operation mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   183   * Definition in Ifx_DMA.ME0.CHCR.B.CHMODE and Ifx_DMA.ME1.CHCR.B.CHMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   185  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   186  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   187      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   188      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   189  } IfxDma_ChannelOperationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   190  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   191  /** \brief Pattern detection selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   192   * Definition in Ifx_DMA.ME0.CHCR.B.PATSEL and Ifx_DMA.ME1.CHCR.B.PATSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   194  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   195  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   196      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   197      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   198      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   204  } IfxDma_ChannelPattern;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   206  /** \brief Channel Priority definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   207   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   208  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   209  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   210      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   211      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   212      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   213  } IfxDma_ChannelPriority;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   215  /** \brief DMA request mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   216   * Definition in Ifx_DMA.ME0.CHCR.B.RROAT and Ifx_DMA.ME1.CHCR.B.RROAT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   217   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   218  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   219  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   220      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   221      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   222  } IfxDma_ChannelRequestMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   224  /** \brief DMA request selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   225   * Definition in Ifx_DMA.ME0.CHCR.B.PRSEL and Ifx_DMA.ME1.CHCR.B.PRSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   227  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   228  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   229      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   230      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   231  } IfxDma_ChannelRequestSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   233  /** \brief shadow definition definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   234   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   235   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   236  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   237  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   238      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   239      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   240      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   251  } IfxDma_ChannelShadow;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   253  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   254  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   255      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   256      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   257      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   259  } IfxDma_HardwareResourcePartition;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   261  /** \brief DMA move engine definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   263  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   264  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   265      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   266      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   267  } IfxDma_MoveEngine;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   269  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   270   * Definition in Ifx_DMA.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   271   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   272  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   274      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   275      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   276  } IfxDma_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   277  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   278  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   280  /** \addtogroup IfxLld_Dma_Std_Reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   281   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   283  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   284  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   285  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   287  /** \brief Return the status of a DMA channel (reset / not reset)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   288   * This API needs to be used after the IfxDma_resetChannel()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   289   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   290   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   291   * \return TRUE if the channel is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   292   * FALSE if the channel is not reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   293   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   294   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   295   *      // check whether the channel is reset or not and also the hardware trigger disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   296   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   297   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   298   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   299   *              // Dma is out of RESET and there is no hardware request enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   300   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   301   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   305  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   307  /** \brief Reset the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   308   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   309   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   310   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   311   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   312   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   313   *      // Apply reset to the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   314   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   315   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   316   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   317   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   318  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   319  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   320  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   322  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   323   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   324  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   325  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   326  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   327  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   329  /** \brief Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   330   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   331   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   332   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   333   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   334   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   335   *      // Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   336   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   337   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   338   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   339   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   340  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   341  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   342  /** \brief Disable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   343   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   344   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   345   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   346   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   347   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   348   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   350  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   352  /** \brief Disable the generation of a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   353   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   354   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   355   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   356   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   357   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   358   *      // Disable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   359   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   360   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   361   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   362   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   363  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   364  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   365  /** \brief Enable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   366   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   367   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   368   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   369   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   370   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   371   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   372   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   373   *              IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   374   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   375   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   376   *      // Do not restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   377   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   378   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   379   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   380   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   381   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   382   *      // Check for end of transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   383   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   384   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   385   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   386   *      // Enable the hardware trigger for channel 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   387   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   388   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   389   *      // Disable the hardware trigger for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   391   *      // Hardware triggers for second time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   392   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   393   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   394   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   395   *              IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   396   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   397   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   398   *      // Restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   399   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   400   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   401   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   402   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   403   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   404  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   405  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   406  /** \brief Enable the generation of  a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   407   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   408   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   409   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   410   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   411   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   412   *      // Enable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   413   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   414   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   415   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   416   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   417  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   419  /** \brief Check the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   420   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   421   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   422   * \return TRUE if the TRL is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   423   * FALSE if the TRL is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   424   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   425   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   426   *      boolean trlFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   427   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   428   *      // Check whether the channel transaction request lost flag is set or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   429   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   430   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   431   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   433  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   435  /** \brief Converts DMA circular range to circular code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   436   * \param range DMA circular range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   437   * \return DMA circular code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   439  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   441  /** \brief Return the hardware transaction request status of a DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   442   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   443   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   444   * \return TRUE if the hardware transaction request is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   445   * FALSE if the hardware transaction request is disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   446   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   447   * A coding example can be found in \ref IfxDma_isChannelReset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   448   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   449   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   450  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   451  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   452  /** \brief Return the status of a DMA channel (transaction pending)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   453   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   454   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   455   * \return TRUE if a transaction request for the given channel is pending
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   456   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   458   *      // check for the channel request pending with the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   459   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   460   *              // There is channel request pending for channel 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   461   *              result |= 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   462   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   463   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   464   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   465   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   466  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   468  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   469   * \param dma pointer to DMA registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   470   * \param mode mode selection (enable/disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   471   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   472   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   473  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   474  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   475  /** \brief Request a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   476   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   477   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   479   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   480   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   481   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   482   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   483  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   484  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   485  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   486  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   487  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   488   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   490  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   491  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   492  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   494  /** \brief Clear the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   495   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   496   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   497   * \param mask value holds the bits to clear or mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   498   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   500   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   501   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   502   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   503   *                                                  IFXDMA_ERROR_S |    // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   504   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   505   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   510   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   512   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   513  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   514  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   515  /** \brief Disable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   516   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   517   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   518   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   519   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   520   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   521   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   522   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   523  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   524  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   525  /** \brief Disable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   526   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   527   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   528   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   530   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   531   *      // Disable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   532   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   533   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   534   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   535   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   537  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   539  /** \brief Enable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   540   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   541   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   542   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   543   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   544   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   545   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   546   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   547  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   548  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   549  /** \brief Enable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   550   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   551   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   552   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   553   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   554   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   555   *      // Enable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   556   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   557   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   558   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   560   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   561  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   562  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   563  /** \brief Return the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   564   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   565   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   566   * \return the content of the DMA.ERRSR register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   568   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   569   *      uint32 errorFlags = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   570   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   571   *      // Get the status of the error flags of move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   572   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   574   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   575   *              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   576   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   578   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   579   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   580   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   581   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   582   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   583   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   584   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   585   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   586   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   587   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   588   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   589   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   590   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   591   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   592   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   593   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   594   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   595   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   596   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   597   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   598   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   599   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   600   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   601   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   602   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   603  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   604  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   605  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   606  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   607  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   608   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   609  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   610  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   611  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   612  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   614  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   615   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   616   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   617   * \return Actual channel destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   618   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   619   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   620   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   621   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   622   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   623   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   625  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   627  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   628   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   629   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   630   * \return Actual channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   631   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   632   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   633   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   634   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   635   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   636   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   637  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   639  /** \brief Return the DMA channel suspend Mode status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   640   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   641   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   642   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   643   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   644  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   646  /** \brief Return remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   647   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   648   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   649   * \return Remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   650   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   651   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   652   *      // Wait till transfer count (TCOUNT) becomes 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   653   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   654   *      bool notFinished;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   655   *      do {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   656   *              notFinished = false;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   657   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   658   *                              notFinished = true;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   659   *                              break;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   660   *                      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   661   *      } while( notFinished );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   662   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   663   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   664   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   665  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   667  /** \brief get the time stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   668   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   669   * \return the current time stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   670   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   671   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   672   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   673   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   674   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   675   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   676  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   678  /** \brief Configure the move count for each DMA channel transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   679   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   680   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   681   * \param blockMode value holds the number of moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   682   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   684   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   685   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   686   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   687  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   688  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   689  /** \brief Configure a DMA channel to "continous transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   690   * After a transaction, the hardware request transaction remain enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   691   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   692   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   693   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   694   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   695   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   696   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   697   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   698  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   699  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   700  /** \brief Configure the destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   701   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   702   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   703   * \param address is the Initial address of the destination pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   704   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   705   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   706   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   707   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   708   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   709  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   710  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   711  /** \brief Configure a DMA channel destination pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   712   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   713   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   714   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   715   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   716   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   717   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   718   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   719   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   720   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   721   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   722  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   723  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   724  /** \brief Configure a DMA channel move
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   725   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   726   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   727   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   728   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   729   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   730   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   731   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   733  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   735  /** \brief Configure a DMA channel shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   736   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   737   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   738   * \param shadow Specifies the shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   739   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   740   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   741   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   742   *      // Push the shadow mode into double buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   743   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   744   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   745   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   746   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   748  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   750  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   751   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   752   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   753   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   754   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   755   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   756   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   757   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   758   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   759  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   760  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   761  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   762   * One transfer request starts a complete DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   763   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   764   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   765   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   766   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   767   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   768   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   769   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   770  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   771  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   772  /** \brief Configure a DMA channel to "single transfer mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   773   * A transfer request is required for each transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   774   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   775   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   776   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   777   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   778   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   779   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   780   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   781  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   782  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   783  /** \brief Configure the source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   784   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   785   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   786   * \param address is the Initial address of the source pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   787   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   788   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   789   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   790   *      // Check for the end of current transaction and before trigger the channel request for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   791   *      // for another channel, re configure the source and destination addresses
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   792   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   793   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   794   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   795   *      // Re-Program the source address for the channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   796   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   797   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the destination address for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   800   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   801   *      // Start DMA transaction for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   803   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   804   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   805   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   806  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   807  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   808  /** \brief Configure a DMA channel source pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   809   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   810   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   811   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   812   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   813   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   814   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   815   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   816   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   817   *      // Re-program the source and destination circular buffer control fields
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   818   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   819   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   820   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   821   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   822   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   823   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   824  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   825  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   826  /** \brief Configure a DMA channel suspend enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   827   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   828   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   829   * \param enable enable (1) / disable (0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   830   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   831   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   832  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   833  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   834  /** \brief Configure the move count of a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   835   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   836   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   837   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   838   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   839   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   840   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   841   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   842   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   843   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   844   *      // Wait till end of transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   845   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   846   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   847   *      // Change the TREL configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   848   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   849   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the BLKM configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   852   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the Move size configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   855   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   856   *      // Pull down the channel pending request after the first transfer is initiated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   858   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the transaction gets over
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   861   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   862   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   864   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   867   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   868   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   869   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   870  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   871  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   872  /** \brief Configure the shadow pointer register to read only
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   873   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   874   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   875   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   876   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   877   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   878   *      // Disable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   879   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   880   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   881   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   882   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   883  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   884  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   885  /** \brief Configure the shadow pointer register to write-able
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   886   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   887   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   888   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   889   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   890   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   891   *      // Enable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   892   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   893   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   894   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   895   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   896  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   897  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   898  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   899  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   900  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   901   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   902  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   903  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   904  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   905  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   906  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   907  /** \brief Clear channel halt request and aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   908   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   909   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   910   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   911   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   912   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   913   *      // Quit the halt mode of operation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   914   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   915   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   916   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   917   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   918  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   920  /** \brief Get channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   921   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   922   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   923   * \return halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   924   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   925   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   926   *      // Check for the channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   927   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   928   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   929   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   930   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   931  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   932  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   933  /** \brief setting channel halt request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   934   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   935   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   936   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   937   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   938   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   939   *      // Halt the channel processing
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   940   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   941   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   942   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   943   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   944  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   945  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   946  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   947  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   948  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   949   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   950  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   951  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   952  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   953  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   954  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   955  /** \brief get information on buffer being read by software and clear the notification flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   956   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   957   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   958   * \return TRUE  if one of the buffers is being read by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   959   * FALSE if one of the buffers is already read by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   960   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   961   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   962   *      // Check the buffer being read (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   963   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   964   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   965   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   966   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   967  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   968  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   969  /** \brief get Double buffer selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   970   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   971   * \param channelId channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   972   * \return TRUE if buffer 1 is being filled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   973   * FALSE if buffer 0 is being filled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   974   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   975   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   976   *      boolean buffer_being_filled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   977   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   978   *      // Check the buffer being filled (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   979   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   980   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   981   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   982   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   983  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   984  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   985  /** \brief keeps the double buffer active
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   986   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   987   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   988   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   989   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   990   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   991   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   992   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   993   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   994   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   995  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   996  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   997  /** \brief Double buffer switch application
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   998   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   999   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1000   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1001   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1002   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1003   *      // Apply software buffer switch
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1004   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1005   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1006   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1007   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1008  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1009  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1010  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1011  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1012  /** \addtogroup IfxLld_Dma_Std_Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1013   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1014  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1015  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1016  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1017  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1018  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1019  /** \brief Clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1020   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1021   * \param channelId channel for which the interrupt flag should be cleared
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1022   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1023   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1024   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1025   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1026   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1027  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1028  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1029  /** \brief Disable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1030   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1031   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1032   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1033   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1034   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1035   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1036   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1037   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1038   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1039  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1040  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1041  /** \brief Enable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1042   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1043   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1044   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1045   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1046   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1047   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1048   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1049   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1050   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1051  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1052  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1053  /** \brief Return and clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1054   * The flag is automatically cleared with the call to this function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1055   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1056   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1057   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1058   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1059   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1060   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1061   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1062   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1063   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1064   *      // Wait till end of the transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1065   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1066   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1067   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1068   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1069  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1070  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1071  /** \brief Returns and clears the pattern detection interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1072   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1073   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1074   * \return TRUE  if pattern detection for a given channel is found
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1075   * FALSE if pattern detection for a given channel is not found
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1076   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1077   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1078   *      // wait till pattern match is found for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1079   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1080   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1081   *      // Wait for the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1082   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1083   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1084   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1085   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1086  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1087  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1088  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1089   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1090   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1091   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1092   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1093   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1094   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1095   *      // wait for the destination buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1096   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1097   *      boolean destinationWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1098   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1099   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1100   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1101   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1103  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1105  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1106   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1107   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1108   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1109   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1110   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1111   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1112   *      // wait for the source buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1113   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1114   *      boolean sourceWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1115   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1116   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1117   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1118   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1119   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1120  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1122  /** \brief Return a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1123   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1124   * \param channelId channel for which the interrupt flag should be returned
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1125   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1126   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1127   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1128   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1129   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1130   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1131  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1132  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1133  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1134   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1135   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1136   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1137   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1138   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1139   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1140   *      boolean patternDetectOldVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1142   *      // Check the old value of the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1143   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1144   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1146   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1147  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1148  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1149  /** \brief Returns the SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1150   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1151   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1152   * \return SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1153   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1154   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1155   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1156   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1157   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1158   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1159  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1160  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1161  /** \brief Setting of channel interrupt service request by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1162   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1163   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1164   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1165   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1166   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1167   *      // Set the channel interrupt service request through software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1168   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1169   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1171   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1172  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1173  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1174  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1176  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1177  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1178  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1179  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1180  /** \brief Enable the Swap Data CRC Byte order
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1181   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1182   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1185   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1186   *      // Enable the Swap Data CRC Byte order
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1187   *      IfxDma_enableSwapDataByte(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1188   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1189   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1190   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1191  IFX_INLINE void IfxDma_enableSwapDataByte(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1193  /** \brief Configure the hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1194   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1195   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1196   * \param resourcePartition Hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1197   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1198   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1199   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1200   *      // Set the required hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1201   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1202   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1203   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1204   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1205  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1206  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1207  /** \brief Sets the Interrupt control value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1208   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1209   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1210   * \param value Interrupt control value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1211   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1213  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1215  /** \brief Sets the Circular Buffer Destination Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1216   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1217   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1218   * \param length Circular Buffer Destination Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1219   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1220   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1221  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1222  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1223  /** \brief Sets the Circular Buffer Source Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1224   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1225   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1226   * \param length Circular Buffer Source Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1227   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1228   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1229  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1230  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1231  /** \brief Enable the Source Circular Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1232   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1233   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1234   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1235   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1236  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1237  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1238  /** \brief Enable the Destination Circular Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1239   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1240   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1241   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1242   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1243  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1244  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1245  /** \brief Returns the Data CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1246   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1247   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1248   * \return The Data CRC value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1250  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1252  /** \brief Returns the Source and Destination CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1253   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1254   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1255   * \return The source and destination CRC values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1256   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1257  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1258  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1259  /** \brief Returns the ERR pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1260   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1261   * \param resourcePartition Hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1262   * \return ERR pointer for given DMA resource Partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1263   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1264  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma, IfxDma_HardwareResourcePartition resourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1265  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1266  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1267  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1268  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1269  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1270  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1271  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1272      dma->TSR[channelId].B.HLTCLR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1273  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1274  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1275  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1276  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1277  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1278      dma->CH[channelId].CHCSR.B.CICH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1279  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1280  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1281  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1282  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1283  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1284      dma->TSR[channelId].B.CTL = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1285  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1288  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1289  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1290      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1291      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1292          dma->ME1.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1293      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1294      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1295      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1296          dma->ME0.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1297      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1298  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1299  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1301  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1302  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1303      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1304  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1305  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1307  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1308  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1309      dma->TSR[channelId].B.DCH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1310  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1311  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1312  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1313  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1314  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1315      dma->TSR[channelId].B.ETRL = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1316  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1317  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1319  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1320  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1321      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1322      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1323          dma->ME1.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1324      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1325      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1326      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1327          dma->ME0.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1328      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1329  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1330  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1331  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1332  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1333  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1334      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1335      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1336          dma->ME1.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1337      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1338      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1339      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1340          dma->ME0.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1341      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1342  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1343  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1344  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1345  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1346  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1347      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1348  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1349  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1350  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1351  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1352  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1353      dma->TSR[channelId].B.ECH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1354  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1355  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1356  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1357  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1358  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1359      dma->TSR[channelId].B.ETRL = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1360  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1361  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1362  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1363  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1364  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1365      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1366      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1367          dma->ME1.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1368      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1369      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1370      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1371          dma->ME0.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1372      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1373  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1374  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1375  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1376  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1377  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1378      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1379      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1380          dma->ME1.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1381      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1382      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1383      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1384          dma->ME0.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1385      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1386  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1388  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1389  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1390  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1391      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1393      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1394  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1395      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1396      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1397          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1398      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1399  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1400      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1401  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1402  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1403  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1404  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1405  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1406      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1407  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1408      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1409  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1410      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1411      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1412          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1413      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1414  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1415      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1416  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1417  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1419  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1420  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1421      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1422  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1423      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1425      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1426      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1427          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1428      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1429  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1430      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1431  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1432  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1434  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1435  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1436      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1437  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1438      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1439  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1440      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1441      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1442          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1443      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1444  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1445      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1446  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1447  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1448  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1449  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1450  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1451      return dma->CH[channelId].DADR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1452  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1453  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1454  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1455  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1456  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1457      return dma->TSR[channelId].B.HLTACK != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1458  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1459  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1460  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1461  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1462  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1463      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1465      result = dma->CH[channelId].CHCSR.B.ICH;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1466  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1467      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1468  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1469  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1470  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1471  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1472  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1473      return dma->CH[channelId].CHCSR.B.LXO != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1474  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1475  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1477  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1478  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1479      return dma->CH[channelId].SADR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1480  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1481  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1482  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1483  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1484  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1485      return dma->SUSACR[channelId].B.SUSAC;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1486  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1488  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1489  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1490  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1491      return dma->TSR[channelId].B.TRL != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1492  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1494  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1495  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1496  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1497      return dma->CH[channelId].CHCSR.B.TCOUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1498  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1499  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1500  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1501  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1502  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1503      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1504  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1505  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1506  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1507  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1508  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1509      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1510  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1511      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1512  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1513      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1514      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1515          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1516      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1517  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1518      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1519  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1520  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1522  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1523  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1524      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1525  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1526  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1527  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1528  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1529  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1530      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1531      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1532          return dma->ME1.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1533      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1534      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1535      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1536          return dma->ME0.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1537      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1538  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1539  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1541  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1542  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1543      IFX_UNUSED_PARAMETER(dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1544      // only a single DMA available, therefore no check for the dma pointer required
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1545      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
	ld.w	d1,.3.cnt
.L122:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   174      {
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   175          volatile Ifx_SRC_SRCR *src = IfxDma_getSrcPointer(channel->dma, channel->channelId);
	ld.b	d15,[a15]4
.L129:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    41   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    42   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    43   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    44   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    45   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    46   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    47   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    48   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    49   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    50   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    51   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    52   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    53   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    54   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    55   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    56   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    57   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    59  #ifndef IFXDMA_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    60  #define IFXDMA_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    62  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    63  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    65  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    66  #include "_Impl/IfxDma_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    67  #include "IfxDma_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    69  #include "IfxDma_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    70  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    71  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    72  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    73  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    74  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    75  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    77  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    78  /** \addtogroup IfxLld_Dma_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    79   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    80  /** \brief Bus Master Mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    81   * Definition in Ifx_DMA.MODE[4].B.MODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    82   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    83  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    84  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    85      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    86      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    87  } IfxDma_BusMasterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    89  /** \brief Channel Bus Priority definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    93      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    94      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    95      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    96  } IfxDma_ChannelBusPriority;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    97  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    98  /** \brief DMA circular buffer (wrap around) definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    99   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   103      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   104      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   105      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   119  } IfxDma_ChannelIncrementCircular;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   121  /** \brief DMA incrementation direction definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   122   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   124  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   125  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   126      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   127      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   128  } IfxDma_ChannelIncrementDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   129  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   130  /** \brief DMA incrementation definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   131   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   132   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   133  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   134  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   135      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   136      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   137      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   143  } IfxDma_ChannelIncrementStep;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   145  /** \brief Channel Transfer Interrupt generation mechanism.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   146   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   147   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   148  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   149  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   150      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   151      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   152  } IfxDma_ChannelInterruptControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   153  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   154  /** \brief DMA transfer definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   155   * Definition in Ifx_DMA.ME0.CHCR.B.BLKM and Ifx_DMA.ME1.CHCR.B.BLKM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   156   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   157  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   158  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   159      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   160      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   161      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   167  } IfxDma_ChannelMove;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   169  /** \brief DMA move size definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   170   * Definition in Ifx_DMA.ME0.CHCR.B.CHDW and Ifx_DMA.ME1.CHCR.B.CHDW
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   171   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   172  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   173  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   174      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   175      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   176      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   180  } IfxDma_ChannelMoveSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   182  /** \brief DMA operation mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   183   * Definition in Ifx_DMA.ME0.CHCR.B.CHMODE and Ifx_DMA.ME1.CHCR.B.CHMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   185  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   186  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   187      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   188      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   189  } IfxDma_ChannelOperationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   190  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   191  /** \brief Pattern detection selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   192   * Definition in Ifx_DMA.ME0.CHCR.B.PATSEL and Ifx_DMA.ME1.CHCR.B.PATSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   194  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   195  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   196      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   197      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   198      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   204  } IfxDma_ChannelPattern;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   206  /** \brief Channel Priority definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   207   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   208  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   209  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   210      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   211      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   212      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   213  } IfxDma_ChannelPriority;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   215  /** \brief DMA request mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   216   * Definition in Ifx_DMA.ME0.CHCR.B.RROAT and Ifx_DMA.ME1.CHCR.B.RROAT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   217   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   218  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   219  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   220      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   221      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   222  } IfxDma_ChannelRequestMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   224  /** \brief DMA request selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   225   * Definition in Ifx_DMA.ME0.CHCR.B.PRSEL and Ifx_DMA.ME1.CHCR.B.PRSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   227  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   228  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   229      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   230      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   231  } IfxDma_ChannelRequestSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   233  /** \brief shadow definition definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   234   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   235   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   236  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   237  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   238      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   239      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   240      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   251  } IfxDma_ChannelShadow;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   253  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   254  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   255      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   256      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   257      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   259  } IfxDma_HardwareResourcePartition;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   261  /** \brief DMA move engine definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   263  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   264  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   265      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   266      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   267  } IfxDma_MoveEngine;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   269  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   270   * Definition in Ifx_DMA.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   271   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   272  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   274      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   275      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   276  } IfxDma_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   277  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   278  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   280  /** \addtogroup IfxLld_Dma_Std_Reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   281   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   283  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   284  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   285  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   287  /** \brief Return the status of a DMA channel (reset / not reset)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   288   * This API needs to be used after the IfxDma_resetChannel()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   289   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   290   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   291   * \return TRUE if the channel is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   292   * FALSE if the channel is not reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   293   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   294   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   295   *      // check whether the channel is reset or not and also the hardware trigger disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   296   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   297   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   298   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   299   *              // Dma is out of RESET and there is no hardware request enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   300   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   301   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   305  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   307  /** \brief Reset the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   308   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   309   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   310   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   311   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   312   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   313   *      // Apply reset to the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   314   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   315   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   316   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   317   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   318  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   319  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   320  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   322  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   323   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   324  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   325  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   326  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   327  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   329  /** \brief Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   330   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   331   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   332   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   333   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   334   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   335   *      // Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   336   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   337   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   338   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   339   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   340  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   341  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   342  /** \brief Disable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   343   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   344   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   345   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   346   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   347   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   348   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   350  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   352  /** \brief Disable the generation of a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   353   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   354   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   355   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   356   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   357   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   358   *      // Disable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   359   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   360   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   361   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   362   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   363  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   364  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   365  /** \brief Enable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   366   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   367   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   368   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   369   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   370   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   371   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   372   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   373   *              IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   374   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   375   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   376   *      // Do not restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   377   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   378   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   379   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   380   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   381   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   382   *      // Check for end of transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   383   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   384   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   385   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   386   *      // Enable the hardware trigger for channel 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   387   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   388   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   389   *      // Disable the hardware trigger for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   391   *      // Hardware triggers for second time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   392   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   393   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   394   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   395   *              IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   396   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   397   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   398   *      // Restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   399   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   400   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   401   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   402   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   403   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   404  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   405  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   406  /** \brief Enable the generation of  a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   407   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   408   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   409   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   410   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   411   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   412   *      // Enable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   413   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   414   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   415   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   416   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   417  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   419  /** \brief Check the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   420   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   421   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   422   * \return TRUE if the TRL is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   423   * FALSE if the TRL is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   424   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   425   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   426   *      boolean trlFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   427   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   428   *      // Check whether the channel transaction request lost flag is set or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   429   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   430   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   431   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   433  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   435  /** \brief Converts DMA circular range to circular code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   436   * \param range DMA circular range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   437   * \return DMA circular code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   439  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   441  /** \brief Return the hardware transaction request status of a DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   442   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   443   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   444   * \return TRUE if the hardware transaction request is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   445   * FALSE if the hardware transaction request is disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   446   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   447   * A coding example can be found in \ref IfxDma_isChannelReset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   448   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   449   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   450  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   451  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   452  /** \brief Return the status of a DMA channel (transaction pending)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   453   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   454   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   455   * \return TRUE if a transaction request for the given channel is pending
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   456   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   458   *      // check for the channel request pending with the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   459   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   460   *              // There is channel request pending for channel 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   461   *              result |= 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   462   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   463   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   464   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   465   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   466  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   468  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   469   * \param dma pointer to DMA registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   470   * \param mode mode selection (enable/disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   471   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   472   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   473  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   474  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   475  /** \brief Request a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   476   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   477   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   479   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   480   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   481   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   482   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   483  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   484  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   485  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   486  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   487  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   488   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   490  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   491  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   492  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   494  /** \brief Clear the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   495   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   496   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   497   * \param mask value holds the bits to clear or mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   498   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   500   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   501   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   502   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   503   *                                                  IFXDMA_ERROR_S |    // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   504   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   505   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   510   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   512   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   513  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   514  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   515  /** \brief Disable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   516   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   517   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   518   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   519   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   520   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   521   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   522   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   523  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   524  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   525  /** \brief Disable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   526   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   527   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   528   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   530   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   531   *      // Disable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   532   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   533   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   534   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   535   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   537  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   539  /** \brief Enable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   540   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   541   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   542   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   543   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   544   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   545   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   546   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   547  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   548  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   549  /** \brief Enable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   550   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   551   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   552   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   553   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   554   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   555   *      // Enable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   556   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   557   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   558   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   560   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   561  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   562  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   563  /** \brief Return the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   564   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   565   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   566   * \return the content of the DMA.ERRSR register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   568   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   569   *      uint32 errorFlags = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   570   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   571   *      // Get the status of the error flags of move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   572   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   574   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   575   *              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   576   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   578   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   579   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   580   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   581   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   582   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   583   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   584   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   585   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   586   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   587   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   588   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   589   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   590   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   591   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   592   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   593   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   594   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   595   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   596   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   597   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   598   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   599   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   600   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   601   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   602   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   603  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   604  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   605  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   606  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   607  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   608   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   609  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   610  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   611  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   612  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   614  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   615   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   616   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   617   * \return Actual channel destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   618   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   619   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   620   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   621   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   622   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   623   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   625  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   627  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   628   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   629   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   630   * \return Actual channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   631   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   632   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   633   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   634   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   635   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   636   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   637  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   639  /** \brief Return the DMA channel suspend Mode status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   640   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   641   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   642   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   643   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   644  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   646  /** \brief Return remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   647   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   648   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   649   * \return Remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   650   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   651   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   652   *      // Wait till transfer count (TCOUNT) becomes 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   653   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   654   *      bool notFinished;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   655   *      do {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   656   *              notFinished = false;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   657   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   658   *                              notFinished = true;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   659   *                              break;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   660   *                      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   661   *      } while( notFinished );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   662   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   663   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   664   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   665  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   667  /** \brief get the time stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   668   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   669   * \return the current time stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   670   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   671   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   672   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   673   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   674   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   675   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   676  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   678  /** \brief Configure the move count for each DMA channel transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   679   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   680   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   681   * \param blockMode value holds the number of moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   682   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   684   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   685   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   686   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   687  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   688  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   689  /** \brief Configure a DMA channel to "continous transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   690   * After a transaction, the hardware request transaction remain enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   691   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   692   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   693   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   694   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   695   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   696   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   697   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   698  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   699  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   700  /** \brief Configure the destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   701   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   702   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   703   * \param address is the Initial address of the destination pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   704   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   705   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   706   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   707   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   708   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   709  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   710  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   711  /** \brief Configure a DMA channel destination pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   712   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   713   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   714   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   715   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   716   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   717   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   718   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   719   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   720   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   721   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   722  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   723  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   724  /** \brief Configure a DMA channel move
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   725   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   726   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   727   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   728   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   729   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   730   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   731   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   733  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   735  /** \brief Configure a DMA channel shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   736   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   737   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   738   * \param shadow Specifies the shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   739   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   740   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   741   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   742   *      // Push the shadow mode into double buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   743   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   744   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   745   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   746   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   748  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   750  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   751   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   752   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   753   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   754   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   755   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   756   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   757   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   758   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   759  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   760  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   761  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   762   * One transfer request starts a complete DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   763   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   764   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   765   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   766   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   767   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   768   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   769   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   770  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   771  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   772  /** \brief Configure a DMA channel to "single transfer mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   773   * A transfer request is required for each transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   774   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   775   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   776   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   777   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   778   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   779   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   780   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   781  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   782  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   783  /** \brief Configure the source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   784   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   785   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   786   * \param address is the Initial address of the source pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   787   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   788   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   789   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   790   *      // Check for the end of current transaction and before trigger the channel request for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   791   *      // for another channel, re configure the source and destination addresses
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   792   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   793   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   794   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   795   *      // Re-Program the source address for the channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   796   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   797   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the destination address for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   800   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   801   *      // Start DMA transaction for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   803   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   804   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   805   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   806  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   807  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   808  /** \brief Configure a DMA channel source pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   809   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   810   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   811   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   812   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   813   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   814   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   815   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   816   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   817   *      // Re-program the source and destination circular buffer control fields
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   818   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   819   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   820   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   821   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   822   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   823   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   824  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   825  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   826  /** \brief Configure a DMA channel suspend enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   827   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   828   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   829   * \param enable enable (1) / disable (0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   830   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   831   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   832  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   833  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   834  /** \brief Configure the move count of a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   835   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   836   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   837   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   838   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   839   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   840   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   841   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   842   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   843   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   844   *      // Wait till end of transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   845   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   846   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   847   *      // Change the TREL configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   848   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   849   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the BLKM configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   852   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the Move size configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   855   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   856   *      // Pull down the channel pending request after the first transfer is initiated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   858   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the transaction gets over
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   861   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   862   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   864   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   867   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   868   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   869   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   870  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   871  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   872  /** \brief Configure the shadow pointer register to read only
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   873   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   874   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   875   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   876   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   877   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   878   *      // Disable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   879   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   880   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   881   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   882   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   883  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   884  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   885  /** \brief Configure the shadow pointer register to write-able
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   886   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   887   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   888   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   889   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   890   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   891   *      // Enable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   892   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   893   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   894   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   895   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   896  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   897  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   898  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   899  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   900  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   901   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   902  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   903  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   904  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   905  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   906  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   907  /** \brief Clear channel halt request and aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   908   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   909   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   910   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   911   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   912   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   913   *      // Quit the halt mode of operation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   914   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   915   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   916   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   917   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   918  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   920  /** \brief Get channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   921   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   922   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   923   * \return halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   924   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   925   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   926   *      // Check for the channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   927   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   928   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   929   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   930   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   931  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   932  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   933  /** \brief setting channel halt request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   934   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   935   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   936   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   937   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   938   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   939   *      // Halt the channel processing
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   940   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   941   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   942   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   943   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   944  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   945  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   946  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   947  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   948  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   949   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   950  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   951  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   952  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   953  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   954  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   955  /** \brief get information on buffer being read by software and clear the notification flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   956   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   957   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   958   * \return TRUE  if one of the buffers is being read by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   959   * FALSE if one of the buffers is already read by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   960   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   961   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   962   *      // Check the buffer being read (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   963   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   964   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   965   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   966   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   967  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   968  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   969  /** \brief get Double buffer selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   970   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   971   * \param channelId channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   972   * \return TRUE if buffer 1 is being filled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   973   * FALSE if buffer 0 is being filled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   974   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   975   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   976   *      boolean buffer_being_filled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   977   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   978   *      // Check the buffer being filled (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   979   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   980   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   981   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   982   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   983  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   984  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   985  /** \brief keeps the double buffer active
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   986   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   987   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   988   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   989   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   990   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   991   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   992   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   993   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   994   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   995  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   996  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   997  /** \brief Double buffer switch application
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   998   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   999   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1000   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1001   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1002   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1003   *      // Apply software buffer switch
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1004   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1005   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1006   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1007   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1008  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1009  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1010  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1011  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1012  /** \addtogroup IfxLld_Dma_Std_Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1013   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1014  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1015  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1016  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1017  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1018  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1019  /** \brief Clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1020   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1021   * \param channelId channel for which the interrupt flag should be cleared
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1022   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1023   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1024   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1025   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1026   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1027  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1028  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1029  /** \brief Disable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1030   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1031   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1032   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1033   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1034   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1035   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1036   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1037   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1038   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1039  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1040  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1041  /** \brief Enable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1042   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1043   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1044   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1045   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1046   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1047   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1048   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1049   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1050   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1051  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1052  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1053  /** \brief Return and clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1054   * The flag is automatically cleared with the call to this function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1055   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1056   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1057   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1058   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1059   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1060   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1061   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1062   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1063   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1064   *      // Wait till end of the transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1065   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1066   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1067   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1068   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1069  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1070  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1071  /** \brief Returns and clears the pattern detection interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1072   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1073   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1074   * \return TRUE  if pattern detection for a given channel is found
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1075   * FALSE if pattern detection for a given channel is not found
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1076   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1077   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1078   *      // wait till pattern match is found for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1079   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1080   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1081   *      // Wait for the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1082   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1083   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1084   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1085   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1086  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1087  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1088  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1089   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1090   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1091   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1092   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1093   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1094   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1095   *      // wait for the destination buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1096   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1097   *      boolean destinationWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1098   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1099   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1100   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1101   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1103  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1105  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1106   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1107   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1108   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1109   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1110   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1111   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1112   *      // wait for the source buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1113   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1114   *      boolean sourceWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1115   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1116   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1117   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1118   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1119   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1120  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1122  /** \brief Return a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1123   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1124   * \param channelId channel for which the interrupt flag should be returned
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1125   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1126   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1127   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1128   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1129   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1130   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1131  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1132  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1133  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1134   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1135   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1136   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1137   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1138   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1139   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1140   *      boolean patternDetectOldVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1142   *      // Check the old value of the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1143   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1144   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1146   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1147  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1148  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1149  /** \brief Returns the SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1150   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1151   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1152   * \return SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1153   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1154   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1155   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1156   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1157   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1158   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1159  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1160  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1161  /** \brief Setting of channel interrupt service request by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1162   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1163   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1164   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1165   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1166   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1167   *      // Set the channel interrupt service request through software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1168   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1169   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1171   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1172  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1173  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1174  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1176  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1177  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1178  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1179  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1180  /** \brief Enable the Swap Data CRC Byte order
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1181   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1182   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1185   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1186   *      // Enable the Swap Data CRC Byte order
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1187   *      IfxDma_enableSwapDataByte(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1188   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1189   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1190   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1191  IFX_INLINE void IfxDma_enableSwapDataByte(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1193  /** \brief Configure the hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1194   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1195   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1196   * \param resourcePartition Hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1197   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1198   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1199   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1200   *      // Set the required hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1201   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1202   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1203   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1204   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1205  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1206  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1207  /** \brief Sets the Interrupt control value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1208   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1209   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1210   * \param value Interrupt control value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1211   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1213  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1215  /** \brief Sets the Circular Buffer Destination Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1216   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1217   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1218   * \param length Circular Buffer Destination Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1219   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1220   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1221  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1222  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1223  /** \brief Sets the Circular Buffer Source Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1224   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1225   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1226   * \param length Circular Buffer Source Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1227   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1228   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1229  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1230  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1231  /** \brief Enable the Source Circular Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1232   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1233   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1234   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1235   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1236  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1237  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1238  /** \brief Enable the Destination Circular Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1239   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1240   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1241   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1242   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1243  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1244  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1245  /** \brief Returns the Data CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1246   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1247   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1248   * \return The Data CRC value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1250  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1252  /** \brief Returns the Source and Destination CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1253   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1254   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1255   * \return The source and destination CRC values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1256   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1257  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1258  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1259  /** \brief Returns the ERR pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1260   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1261   * \param resourcePartition Hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1262   * \return ERR pointer for given DMA resource Partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1263   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1264  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma, IfxDma_HardwareResourcePartition resourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1265  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1266  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1267  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1268  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1269  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1270  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1271  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1272      dma->TSR[channelId].B.HLTCLR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1273  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1274  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1275  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1276  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1277  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1278      dma->CH[channelId].CHCSR.B.CICH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1279  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1280  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1281  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1282  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1283  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1284      dma->TSR[channelId].B.CTL = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1285  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1288  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1289  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1290      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1291      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1292          dma->ME1.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1293      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1294      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1295      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1296          dma->ME0.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1297      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1298  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1299  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1301  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1302  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1303      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1304  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1305  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1307  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1308  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1309      dma->TSR[channelId].B.DCH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1310  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1311  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1312  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1313  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1314  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1315      dma->TSR[channelId].B.ETRL = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1316  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1317  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1319  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1320  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1321      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1322      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1323          dma->ME1.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1324      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1325      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1326      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1327          dma->ME0.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1328      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1329  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1330  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1331  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1332  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1333  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1334      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1335      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1336          dma->ME1.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1337      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1338      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1339      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1340          dma->ME0.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1341      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1342  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1343  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1344  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1345  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1346  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1347      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1348  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1349  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1350  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1351  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1352  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1353      dma->TSR[channelId].B.ECH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1354  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1355  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1356  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1357  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1358  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1359      dma->TSR[channelId].B.ETRL = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1360  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1361  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1362  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1363  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1364  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1365      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1366      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1367          dma->ME1.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1368      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1369      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1370      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1371          dma->ME0.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1372      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1373  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1374  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1375  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1376  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1377  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1378      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1379      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1380          dma->ME1.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1381      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1382      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1383      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1384          dma->ME0.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1385      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1386  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1388  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1389  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1390  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1391      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1393      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1394  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1395      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1396      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1397          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1398      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1399  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1400      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1401  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1402  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1403  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1404  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1405  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1406      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1407  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1408      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1409  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1410      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1411      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1412          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1413      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1414  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1415      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1416  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1417  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1419  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1420  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1421      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1422  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1423      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1425      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1426      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1427          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1428      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1429  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1430      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1431  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1432  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1434  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1435  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1436      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1437  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1438      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1439  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1440      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1441      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1442          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1443      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1444  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1445      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1446  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1447  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1448  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1449  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1450  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1451      return dma->CH[channelId].DADR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1452  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1453  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1454  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1455  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1456  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1457      return dma->TSR[channelId].B.HLTACK != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1458  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1459  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1460  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1461  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1462  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1463      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1465      result = dma->CH[channelId].CHCSR.B.ICH;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1466  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1467      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1468  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1469  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1470  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1471  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1472  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1473      return dma->CH[channelId].CHCSR.B.LXO != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1474  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1475  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1477  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1478  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1479      return dma->CH[channelId].SADR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1480  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1481  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1482  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1483  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1484  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1485      return dma->SUSACR[channelId].B.SUSAC;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1486  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1488  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1489  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1490  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1491      return dma->TSR[channelId].B.TRL != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1492  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1494  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1495  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1496  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1497      return dma->CH[channelId].CHCSR.B.TCOUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1498  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1499  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1500  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1501  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1502  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1503      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1504  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1505  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1506  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1507  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1508  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1509      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1510  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1511      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1512  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1513      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1514      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1515          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1516      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1517  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1518      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1519  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1520  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1522  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1523  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1524      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1525  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1526  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1527  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1528  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1529  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1530      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1531      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1532          return dma->ME1.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1533      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1534      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1535      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1536          return dma->ME0.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1537      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1538  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1539  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1541  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1542  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1543      IFX_UNUSED_PARAMETER(dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1544      // only a single DMA available, therefore no check for the dma pointer required
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1545      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
	mov.a	a15,d1
.L130:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   176          IfxSrc_init(src, config->channelInterruptTypeOfService, config->channelInterruptPriority);
	ld.bu	d1,[a13]54
.L131:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    41   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    42   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    43   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    44   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    45   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    46   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    47   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    48   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    49   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    50   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    51   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    52   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    53   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    54   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    55   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    56   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    57   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    59  #ifndef IFXDMA_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    60  #define IFXDMA_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    62  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    63  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    65  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    66  #include "_Impl/IfxDma_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    67  #include "IfxDma_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    69  #include "IfxDma_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    70  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    71  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    72  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    73  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    74  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    75  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    77  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    78  /** \addtogroup IfxLld_Dma_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    79   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    80  /** \brief Bus Master Mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    81   * Definition in Ifx_DMA.MODE[4].B.MODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    82   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    83  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    84  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    85      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    86      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    87  } IfxDma_BusMasterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    89  /** \brief Channel Bus Priority definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    93      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    94      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    95      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    96  } IfxDma_ChannelBusPriority;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    97  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    98  /** \brief DMA circular buffer (wrap around) definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    99   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   103      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   104      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   105      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   119  } IfxDma_ChannelIncrementCircular;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   121  /** \brief DMA incrementation direction definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   122   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   124  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   125  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   126      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   127      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   128  } IfxDma_ChannelIncrementDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   129  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   130  /** \brief DMA incrementation definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   131   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   132   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   133  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   134  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   135      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   136      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   137      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   143  } IfxDma_ChannelIncrementStep;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   145  /** \brief Channel Transfer Interrupt generation mechanism.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   146   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   147   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   148  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   149  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   150      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   151      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   152  } IfxDma_ChannelInterruptControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   153  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   154  /** \brief DMA transfer definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   155   * Definition in Ifx_DMA.ME0.CHCR.B.BLKM and Ifx_DMA.ME1.CHCR.B.BLKM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   156   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   157  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   158  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   159      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   160      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   161      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   167  } IfxDma_ChannelMove;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   169  /** \brief DMA move size definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   170   * Definition in Ifx_DMA.ME0.CHCR.B.CHDW and Ifx_DMA.ME1.CHCR.B.CHDW
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   171   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   172  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   173  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   174      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   175      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   176      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   180  } IfxDma_ChannelMoveSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   182  /** \brief DMA operation mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   183   * Definition in Ifx_DMA.ME0.CHCR.B.CHMODE and Ifx_DMA.ME1.CHCR.B.CHMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   185  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   186  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   187      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   188      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   189  } IfxDma_ChannelOperationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   190  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   191  /** \brief Pattern detection selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   192   * Definition in Ifx_DMA.ME0.CHCR.B.PATSEL and Ifx_DMA.ME1.CHCR.B.PATSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   194  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   195  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   196      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   197      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   198      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   204  } IfxDma_ChannelPattern;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   206  /** \brief Channel Priority definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   207   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   208  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   209  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   210      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   211      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   212      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   213  } IfxDma_ChannelPriority;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   215  /** \brief DMA request mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   216   * Definition in Ifx_DMA.ME0.CHCR.B.RROAT and Ifx_DMA.ME1.CHCR.B.RROAT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   217   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   218  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   219  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   220      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   221      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   222  } IfxDma_ChannelRequestMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   224  /** \brief DMA request selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   225   * Definition in Ifx_DMA.ME0.CHCR.B.PRSEL and Ifx_DMA.ME1.CHCR.B.PRSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   227  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   228  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   229      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   230      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   231  } IfxDma_ChannelRequestSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   233  /** \brief shadow definition definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   234   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   235   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   236  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   237  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   238      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   239      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   240      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   251  } IfxDma_ChannelShadow;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   253  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   254  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   255      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   256      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   257      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   259  } IfxDma_HardwareResourcePartition;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   261  /** \brief DMA move engine definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   263  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   264  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   265      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   266      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   267  } IfxDma_MoveEngine;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   269  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   270   * Definition in Ifx_DMA.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   271   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   272  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   274      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   275      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   276  } IfxDma_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   277  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   278  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   280  /** \addtogroup IfxLld_Dma_Std_Reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   281   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   283  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   284  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   285  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   287  /** \brief Return the status of a DMA channel (reset / not reset)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   288   * This API needs to be used after the IfxDma_resetChannel()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   289   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   290   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   291   * \return TRUE if the channel is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   292   * FALSE if the channel is not reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   293   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   294   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   295   *      // check whether the channel is reset or not and also the hardware trigger disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   296   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   297   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   298   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   299   *              // Dma is out of RESET and there is no hardware request enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   300   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   301   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   305  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   307  /** \brief Reset the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   308   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   309   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   310   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   311   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   312   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   313   *      // Apply reset to the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   314   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   315   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   316   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   317   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   318  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   319  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   320  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   322  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   323   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   324  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   325  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   326  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   327  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   329  /** \brief Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   330   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   331   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   332   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   333   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   334   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   335   *      // Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   336   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   337   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   338   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   339   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   340  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   341  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   342  /** \brief Disable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   343   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   344   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   345   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   346   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   347   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   348   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   350  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   352  /** \brief Disable the generation of a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   353   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   354   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   355   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   356   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   357   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   358   *      // Disable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   359   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   360   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   361   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   362   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   363  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   364  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   365  /** \brief Enable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   366   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   367   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   368   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   369   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   370   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   371   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   372   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   373   *              IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   374   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   375   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   376   *      // Do not restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   377   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   378   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   379   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   380   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   381   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   382   *      // Check for end of transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   383   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   384   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   385   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   386   *      // Enable the hardware trigger for channel 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   387   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   388   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   389   *      // Disable the hardware trigger for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   391   *      // Hardware triggers for second time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   392   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   393   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   394   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   395   *              IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   396   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   397   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   398   *      // Restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   399   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   400   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   401   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   402   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   403   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   404  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   405  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   406  /** \brief Enable the generation of  a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   407   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   408   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   409   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   410   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   411   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   412   *      // Enable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   413   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   414   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   415   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   416   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   417  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   419  /** \brief Check the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   420   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   421   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   422   * \return TRUE if the TRL is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   423   * FALSE if the TRL is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   424   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   425   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   426   *      boolean trlFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   427   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   428   *      // Check whether the channel transaction request lost flag is set or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   429   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   430   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   431   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   433  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   435  /** \brief Converts DMA circular range to circular code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   436   * \param range DMA circular range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   437   * \return DMA circular code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   439  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   441  /** \brief Return the hardware transaction request status of a DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   442   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   443   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   444   * \return TRUE if the hardware transaction request is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   445   * FALSE if the hardware transaction request is disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   446   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   447   * A coding example can be found in \ref IfxDma_isChannelReset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   448   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   449   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   450  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   451  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   452  /** \brief Return the status of a DMA channel (transaction pending)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   453   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   454   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   455   * \return TRUE if a transaction request for the given channel is pending
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   456   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   458   *      // check for the channel request pending with the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   459   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   460   *              // There is channel request pending for channel 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   461   *              result |= 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   462   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   463   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   464   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   465   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   466  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   468  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   469   * \param dma pointer to DMA registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   470   * \param mode mode selection (enable/disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   471   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   472   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   473  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   474  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   475  /** \brief Request a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   476   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   477   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   479   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   480   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   481   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   482   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   483  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   484  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   485  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   486  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   487  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   488   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   490  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   491  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   492  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   494  /** \brief Clear the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   495   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   496   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   497   * \param mask value holds the bits to clear or mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   498   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   500   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   501   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   502   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   503   *                                                  IFXDMA_ERROR_S |    // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   504   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   505   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   510   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   512   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   513  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   514  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   515  /** \brief Disable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   516   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   517   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   518   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   519   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   520   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   521   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   522   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   523  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   524  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   525  /** \brief Disable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   526   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   527   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   528   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   530   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   531   *      // Disable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   532   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   533   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   534   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   535   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   537  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   539  /** \brief Enable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   540   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   541   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   542   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   543   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   544   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   545   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   546   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   547  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   548  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   549  /** \brief Enable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   550   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   551   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   552   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   553   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   554   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   555   *      // Enable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   556   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   557   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   558   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   560   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   561  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   562  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   563  /** \brief Return the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   564   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   565   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   566   * \return the content of the DMA.ERRSR register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   568   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   569   *      uint32 errorFlags = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   570   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   571   *      // Get the status of the error flags of move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   572   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   574   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   575   *              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   576   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   578   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   579   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   580   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   581   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   582   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   583   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   584   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   585   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   586   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   587   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   588   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   589   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   590   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   591   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   592   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   593   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   594   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   595   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   596   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   597   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   598   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   599   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   600   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   601   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   602   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   603  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   604  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   605  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   606  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   607  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   608   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   609  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   610  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   611  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   612  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   614  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   615   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   616   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   617   * \return Actual channel destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   618   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   619   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   620   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   621   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   622   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   623   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   625  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   627  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   628   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   629   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   630   * \return Actual channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   631   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   632   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   633   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   634   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   635   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   636   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   637  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   639  /** \brief Return the DMA channel suspend Mode status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   640   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   641   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   642   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   643   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   644  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   646  /** \brief Return remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   647   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   648   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   649   * \return Remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   650   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   651   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   652   *      // Wait till transfer count (TCOUNT) becomes 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   653   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   654   *      bool notFinished;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   655   *      do {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   656   *              notFinished = false;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   657   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   658   *                              notFinished = true;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   659   *                              break;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   660   *                      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   661   *      } while( notFinished );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   662   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   663   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   664   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   665  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   667  /** \brief get the time stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   668   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   669   * \return the current time stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   670   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   671   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   672   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   673   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   674   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   675   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   676  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   678  /** \brief Configure the move count for each DMA channel transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   679   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   680   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   681   * \param blockMode value holds the number of moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   682   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   684   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   685   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   686   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   687  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   688  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   689  /** \brief Configure a DMA channel to "continous transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   690   * After a transaction, the hardware request transaction remain enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   691   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   692   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   693   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   694   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   695   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   696   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   697   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   698  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   699  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   700  /** \brief Configure the destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   701   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   702   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   703   * \param address is the Initial address of the destination pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   704   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   705   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   706   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   707   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   708   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   709  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   710  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   711  /** \brief Configure a DMA channel destination pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   712   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   713   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   714   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   715   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   716   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   717   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   718   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   719   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   720   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   721   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   722  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   723  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   724  /** \brief Configure a DMA channel move
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   725   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   726   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   727   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   728   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   729   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   730   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   731   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   733  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   735  /** \brief Configure a DMA channel shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   736   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   737   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   738   * \param shadow Specifies the shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   739   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   740   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   741   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   742   *      // Push the shadow mode into double buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   743   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   744   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   745   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   746   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   748  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   750  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   751   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   752   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   753   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   754   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   755   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   756   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   757   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   758   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   759  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   760  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   761  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   762   * One transfer request starts a complete DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   763   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   764   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   765   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   766   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   767   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   768   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   769   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   770  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   771  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   772  /** \brief Configure a DMA channel to "single transfer mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   773   * A transfer request is required for each transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   774   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   775   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   776   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   777   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   778   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   779   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   780   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   781  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   782  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   783  /** \brief Configure the source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   784   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   785   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   786   * \param address is the Initial address of the source pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   787   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   788   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   789   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   790   *      // Check for the end of current transaction and before trigger the channel request for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   791   *      // for another channel, re configure the source and destination addresses
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   792   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   793   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   794   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   795   *      // Re-Program the source address for the channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   796   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   797   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the destination address for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   800   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   801   *      // Start DMA transaction for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   803   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   804   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   805   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   806  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   807  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   808  /** \brief Configure a DMA channel source pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   809   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   810   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   811   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   812   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   813   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   814   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   815   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   816   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   817   *      // Re-program the source and destination circular buffer control fields
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   818   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   819   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   820   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   821   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   822   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   823   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   824  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   825  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   826  /** \brief Configure a DMA channel suspend enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   827   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   828   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   829   * \param enable enable (1) / disable (0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   830   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   831   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   832  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   833  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   834  /** \brief Configure the move count of a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   835   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   836   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   837   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   838   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   839   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   840   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   841   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   842   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   843   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   844   *      // Wait till end of transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   845   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   846   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   847   *      // Change the TREL configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   848   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   849   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the BLKM configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   852   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the Move size configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   855   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   856   *      // Pull down the channel pending request after the first transfer is initiated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   858   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the transaction gets over
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   861   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   862   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   864   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   867   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   868   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   869   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   870  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   871  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   872  /** \brief Configure the shadow pointer register to read only
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   873   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   874   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   875   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   876   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   877   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   878   *      // Disable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   879   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   880   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   881   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   882   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   883  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   884  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   885  /** \brief Configure the shadow pointer register to write-able
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   886   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   887   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   888   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   889   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   890   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   891   *      // Enable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   892   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   893   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   894   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   895   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   896  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   897  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   898  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   899  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   900  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   901   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   902  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   903  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   904  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   905  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   906  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   907  /** \brief Clear channel halt request and aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   908   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   909   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   910   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   911   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   912   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   913   *      // Quit the halt mode of operation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   914   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   915   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   916   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   917   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   918  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   920  /** \brief Get channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   921   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   922   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   923   * \return halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   924   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   925   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   926   *      // Check for the channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   927   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   928   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   929   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   930   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   931  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   932  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   933  /** \brief setting channel halt request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   934   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   935   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   936   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   937   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   938   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   939   *      // Halt the channel processing
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   940   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   941   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   942   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   943   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   944  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   945  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   946  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   947  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   948  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   949   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   950  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   951  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   952  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   953  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   954  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   955  /** \brief get information on buffer being read by software and clear the notification flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   956   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   957   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   958   * \return TRUE  if one of the buffers is being read by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   959   * FALSE if one of the buffers is already read by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   960   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   961   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   962   *      // Check the buffer being read (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   963   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   964   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   965   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   966   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   967  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   968  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   969  /** \brief get Double buffer selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   970   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   971   * \param channelId channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   972   * \return TRUE if buffer 1 is being filled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   973   * FALSE if buffer 0 is being filled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   974   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   975   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   976   *      boolean buffer_being_filled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   977   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   978   *      // Check the buffer being filled (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   979   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   980   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   981   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   982   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   983  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   984  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   985  /** \brief keeps the double buffer active
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   986   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   987   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   988   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   989   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   990   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   991   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   992   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   993   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   994   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   995  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   996  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   997  /** \brief Double buffer switch application
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   998   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   999   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1000   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1001   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1002   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1003   *      // Apply software buffer switch
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1004   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1005   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1006   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1007   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1008  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1009  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1010  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1011  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1012  /** \addtogroup IfxLld_Dma_Std_Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1013   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1014  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1015  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1016  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1017  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1018  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1019  /** \brief Clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1020   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1021   * \param channelId channel for which the interrupt flag should be cleared
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1022   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1023   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1024   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1025   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1026   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1027  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1028  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1029  /** \brief Disable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1030   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1031   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1032   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1033   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1034   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1035   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1036   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1037   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1038   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1039  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1040  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1041  /** \brief Enable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1042   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1043   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1044   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1045   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1046   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1047   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1048   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1049   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1050   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1051  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1052  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1053  /** \brief Return and clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1054   * The flag is automatically cleared with the call to this function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1055   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1056   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1057   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1058   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1059   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1060   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1061   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1062   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1063   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1064   *      // Wait till end of the transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1065   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1066   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1067   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1068   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1069  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1070  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1071  /** \brief Returns and clears the pattern detection interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1072   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1073   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1074   * \return TRUE  if pattern detection for a given channel is found
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1075   * FALSE if pattern detection for a given channel is not found
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1076   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1077   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1078   *      // wait till pattern match is found for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1079   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1080   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1081   *      // Wait for the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1082   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1083   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1084   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1085   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1086  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1087  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1088  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1089   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1090   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1091   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1092   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1093   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1094   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1095   *      // wait for the destination buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1096   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1097   *      boolean destinationWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1098   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1099   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1100   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1101   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1103  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1105  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1106   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1107   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1108   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1109   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1110   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1111   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1112   *      // wait for the source buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1113   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1114   *      boolean sourceWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1115   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1116   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1117   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1118   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1119   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1120  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1122  /** \brief Return a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1123   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1124   * \param channelId channel for which the interrupt flag should be returned
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1125   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1126   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1127   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1128   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1129   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1130   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1131  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1132  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1133  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1134   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1135   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1136   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1137   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1138   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1139   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1140   *      boolean patternDetectOldVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1142   *      // Check the old value of the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1143   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1144   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1146   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1147  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1148  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1149  /** \brief Returns the SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1150   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1151   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1152   * \return SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1153   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1154   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1155   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1156   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1157   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1158   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1159  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1160  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1161  /** \brief Setting of channel interrupt service request by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1162   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1163   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1164   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1165   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1166   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1167   *      // Set the channel interrupt service request through software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1168   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1169   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1171   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1172  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1173  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1174  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1176  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1177  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1178  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1179  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1180  /** \brief Enable the Swap Data CRC Byte order
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1181   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1182   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1185   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1186   *      // Enable the Swap Data CRC Byte order
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1187   *      IfxDma_enableSwapDataByte(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1188   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1189   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1190   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1191  IFX_INLINE void IfxDma_enableSwapDataByte(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1193  /** \brief Configure the hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1194   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1195   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1196   * \param resourcePartition Hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1197   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1198   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1199   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1200   *      // Set the required hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1201   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1202   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1203   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1204   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1205  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1206  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1207  /** \brief Sets the Interrupt control value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1208   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1209   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1210   * \param value Interrupt control value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1211   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1213  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1215  /** \brief Sets the Circular Buffer Destination Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1216   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1217   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1218   * \param length Circular Buffer Destination Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1219   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1220   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1221  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1222  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1223  /** \brief Sets the Circular Buffer Source Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1224   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1225   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1226   * \param length Circular Buffer Source Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1227   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1228   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1229  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1230  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1231  /** \brief Enable the Source Circular Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1232   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1233   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1234   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1235   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1236  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1237  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1238  /** \brief Enable the Destination Circular Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1239   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1240   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1241   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1242   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1243  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1244  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1245  /** \brief Returns the Data CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1246   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1247   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1248   * \return The Data CRC value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1250  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1252  /** \brief Returns the Source and Destination CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1253   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1254   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1255   * \return The source and destination CRC values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1256   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1257  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1258  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1259  /** \brief Returns the ERR pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1260   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1261   * \param resourcePartition Hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1262   * \return ERR pointer for given DMA resource Partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1263   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1264  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma, IfxDma_HardwareResourcePartition resourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1265  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1266  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1267  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1268  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1269  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1270  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1271  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1272      dma->TSR[channelId].B.HLTCLR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1273  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1274  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1275  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1276  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1277  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1278      dma->CH[channelId].CHCSR.B.CICH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1279  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1280  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1281  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1282  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1283  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1284      dma->TSR[channelId].B.CTL = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1285  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1288  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1289  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1290      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1291      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1292          dma->ME1.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1293      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1294      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1295      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1296          dma->ME0.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1297      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1298  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1299  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1301  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1302  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1303      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1304  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1305  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1307  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1308  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1309      dma->TSR[channelId].B.DCH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1310  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1311  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1312  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1313  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1314  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1315      dma->TSR[channelId].B.ETRL = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1316  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1317  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1319  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1320  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1321      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1322      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1323          dma->ME1.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1324      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1325      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1326      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1327          dma->ME0.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1328      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1329  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1330  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1331  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1332  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1333  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1334      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1335      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1336          dma->ME1.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1337      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1338      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1339      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1340          dma->ME0.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1341      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1342  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1343  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1344  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1345  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1346  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1347      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1348  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1349  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1350  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1351  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1352  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1353      dma->TSR[channelId].B.ECH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1354  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1355  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1356  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1357  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1358  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1359      dma->TSR[channelId].B.ETRL = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1360  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1361  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1362  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1363  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1364  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1365      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1366      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1367          dma->ME1.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1368      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1369      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1370      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1371          dma->ME0.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1372      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1373  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1374  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1375  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1376  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1377  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1378      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1379      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1380          dma->ME1.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1381      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1382      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1383      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1384          dma->ME0.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1385      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1386  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1388  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1389  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1390  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1391      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1393      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1394  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1395      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1396      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1397          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1398      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1399  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1400      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1401  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1402  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1403  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1404  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1405  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1406      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1407  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1408      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1409  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1410      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1411      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1412          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1413      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1414  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1415      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1416  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1417  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1419  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1420  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1421      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1422  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1423      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1425      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1426      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1427          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1428      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1429  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1430      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1431  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1432  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1434  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1435  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1436      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1437  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1438      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1439  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1440      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1441      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1442          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1443      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1444  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1445      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1446  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1447  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1448  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1449  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1450  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1451      return dma->CH[channelId].DADR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1452  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1453  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1454  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1455  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1456  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1457      return dma->TSR[channelId].B.HLTACK != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1458  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1459  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1460  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1461  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1462  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1463      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1465      result = dma->CH[channelId].CHCSR.B.ICH;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1466  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1467      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1468  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1469  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1470  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1471  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1472  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1473      return dma->CH[channelId].CHCSR.B.LXO != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1474  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1475  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1477  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1478  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1479      return dma->CH[channelId].SADR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1480  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1481  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1482  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1483  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1484  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1485      return dma->SUSACR[channelId].B.SUSAC;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1486  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1488  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1489  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1490  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1491      return dma->TSR[channelId].B.TRL != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1492  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1494  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1495  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1496  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1497      return dma->CH[channelId].CHCSR.B.TCOUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1498  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1499  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1500  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1501  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1502  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1503      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1504  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1505  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1506  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1507  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1508  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1509      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1510  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1511      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1512  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1513      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1514      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1515          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1516      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1517  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1518      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1519  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1520  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1522  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1523  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1524      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1525  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1526  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1527  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1528  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1529  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1530      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1531      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1532          return dma->ME1.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1533      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1534      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1535      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1536          return dma->ME0.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1537      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1538  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1539  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1541  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1542  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1543      IFX_UNUSED_PARAMETER(dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1544      // only a single DMA available, therefore no check for the dma pointer required
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1545      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
	addsc.a	a15,a15,d15,#2
.L132:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     2   * \file IfxSrc.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     3   * \brief SRC  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     4   * \ingroup IfxLld_Src
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     7   * \copyright Copyright (c) 2016 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    41   * \defgroup IfxLld_Src SRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    42   * \addtogroup IfxLld_Src
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    43   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    44   * \defgroup IfxLld_Src_Usage How to use Service Request Mechanism?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    45   * \addtogroup IfxLld_Src_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    46   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    48   * For Aurix controller peripherals that can generate service requests is connected to one
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    49   * or more Service Request Nodes (SRNs) in the central Interrupt Router(IR) module. Refer to Controller User Manual for more details\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    51   * IfxSrc driver provides the APIs to configure and control service requests. Refer \ref IfxLld_Src_Usage for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    52   * details of these APIs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    53   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    54   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    55   * \section Ifx_Src_UsageInit Initialize the Service Request Node
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    56   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    57   * Service request node is initialized to configure the following,\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    58   * 1) Route the interrupt trigger to service provider, which are:\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    59   *  __a. One of the available CPUs or\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    60   *  __b. DMA controller\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    61   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    62   * 2) Priority of CPU Interrupt or DMA Trigger.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    63   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    64   * For Interrupt or DMA to be correctly triggered, following steps are to be done in the user code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    65   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    66   * \subsection Ifx_Src_UsageInitStep1 Step1: Configure the Node
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    67   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    68   * User must configure the service request node in the application / driver files.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    69   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    70   * \subsection Ifx_Src_UsageInitStep2 Step2: Enable the Trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    71   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    72   * Enable the service request node to connect the trigger event from the hardware to service provider.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    73   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    74   * Example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    75   * Following example show the configuration for STM0 Service request 0 trigger configured to trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    76   * CPU1 with the priority specified by IFX_INTPRIO_STM0 (from the example at IfxCpu_Irq)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    77   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    78   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    79   * //file: myApplication.c
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    80   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    81   * #include "Ifx_IntPrioDef.h" // to get the priority numbers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    82   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    83   * void myDriverInitFunction(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    84   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    85   *    // driver init code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    86   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    87   *    // Step1: Call the function to route the trigger from for SRC_STM0_SR0 to CPU1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    88   *    // and priority specified at Ifx_IntPrioDef.h globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    89   *    IfxSrc_init(&MODULE_SRC.STM.STM[0].SR[0], IfxSrc_Tos_cpu1, IFX_INTPRIO_STM0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    90   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    91   *    // Step2: Enable the service request node
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    92   *    IfxSrc_enable(&MODULE_SRC.STM.STM[0].SR[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    93   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    94   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    95   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    96   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    97   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    99   * \defgroup IfxLld_Src_Std_Service_Request Service Request Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   100   * \ingroup IfxLld_Src_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   101   * \defgroup IfxLld_Src_Std_Module Module Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   102   * \ingroup IfxLld_Src_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   103   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   105  #ifndef IFXSRC_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   106  #define IFXSRC_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   107  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   108  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   109  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   110  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   111  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   112  #include "_Impl/IfxSrc_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   113  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   114  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   115  /** \addtogroup IfxLld_Src_Std_Service_Request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   116   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   117  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   118  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   119  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   120  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   122  /** \brief Resets the overrun flag of the Service Request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   123   * \param src pointer to the Service Request Control register which the overrun flag should be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   124   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   126   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   127   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   129  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   130  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   131  /** \brief Resets a specific interrupt service by software.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   132   * \param src pointer to the Service Request Control register which the request should be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   135   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   136   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   137   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   138  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   139  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   140  /** \brief Gets the current overrun status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   141   * \param src pointer to the Service Request Control register for which the overrun status should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   142   * \return current service request control overrun status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   143   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   144   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   147  IFX_INLINE boolean IfxSrc_isOverrun(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   149  /** \brief Gets the current request status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   150   * \param src pointer to the Service Request Control register for which the request status should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   151   * \return current service request control request status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   152   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   153   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   154   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   156  IFX_INLINE boolean IfxSrc_isRequested(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   158  /** \brief Requests a specific interrupt service by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   159   * \param src pointer to the Service Request Control register which the interrupt has to be requested.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   160   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   161   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   162   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   163   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   164   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   165  IFX_INLINE void IfxSrc_setRequest(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   167  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   169  /** \addtogroup IfxLld_Src_Std_Module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   170   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   171  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   172  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   173  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   174  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   176  /** \brief DeInitializes the service request control register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   177   * \param src pointer to the Service Request Control register which should be deinitialised.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   178   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   179   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   180   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   181   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   182   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   183  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   184  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   185  /** \brief Disables a specific interrupt service request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   186   * \param src pointer to the Service Request Control register for which the interrupt has to be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   187   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   188   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   189   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   190   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   192  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   194  /** \brief Enables a specific interrupt service request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   195   * \param src pointer to the Service Request Control register for which the interrupt has to be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   196   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   197   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   198   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   199   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   200   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   201  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   202  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   203  /** \brief Initializes the service request control register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   204   * \param src pointer to the Service Request Control register which should be initialised.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   205   * \param typOfService type of interrupt service provider.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   206   * \param priority Interrupt priority.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   207   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   208   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   209   * Get the peripheral service control register which request need to be serviced and assign this service to any of service providers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   210   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   211   * //define the interrupt priority
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   212   * #define IFXASCLIN0_TX_INTPRIO 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   213   * //get the service request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   214   * volatile Ifx_SRC_SRCR *src = IfxAsclin_getSrcPointerRx( &MODULE_ASCLIN0 );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   215   * //initlaise the service request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   216   * IfxSrc_init( src, IfxSrc_Tos_cpu0, IFXASCLIN0_TX_INTPRIO );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   217   * // enable the service
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   218   * IfxSrc_enable( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   219   * //check for service request flags and clear if they occur
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   220   * if ( IfxSrc_isRequested( src ) == TRUE )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   221   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   222   *    IfxSrc_clearRequest( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   223   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   224   * if ( IfxSrc_isOverrun( src ) == TRUE )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   225   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   226   *      IfxSrc_clearOverrun( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   227   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   228   * // Atlast deinitialise the service control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   229   * IfxSrc_deinit( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   230   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   231   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   233  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   235  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   237  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   238  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   239  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   241  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   242  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   243      src->B.IOVCLR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   244  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   245  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   247  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   248  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   249      src->B.CLRR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   250  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   253  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   254  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   255      src->U = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   256  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   259  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   260  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   261      src->B.SRE = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   262  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   265  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   266  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   267      src->B.SRE = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   268  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   269  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   271  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   272  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   273      src->B.SRPN = priority;
	st.b	[a15],d0
.L227:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   274      src->B.TOS  = typOfService;
	ld.bu	d15,[a15]1
.L228:
	insert	d15,d15,d1,#3,#3
	st.b	[a15]1,d15
.L143:
	ld.bu	d15,[a15]3
.L229:
	or	d15,#2
	st.b	[a15]3,d15
.L134:
	ld.bu	d15,[a15]1
.L230:
	or	d15,#4
	st.b	[a15]1,d15
.L9:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   177          IfxSrc_enable(src);
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   178      }
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   179  }
	ret
.L110:
	
__IfxDma_Dma_initChannel_function_end:
	.size	IfxDma_Dma_initChannel,__IfxDma_Dma_initChannel_function_end-IfxDma_Dma_initChannel
.L57:
	; End of function
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_initChannelConfig',code,cluster('IfxDma_Dma_initChannelConfig')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_initChannelConfig'
	.align	2
	
	.global	IfxDma_Dma_initChannelConfig

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   180  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   181  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   182  void IfxDma_Dma_initChannelConfig(IfxDma_Dma_ChannelConfig *config, IfxDma_Dma *dma)
; Function IfxDma_Dma_initChannelConfig
.L22:
IfxDma_Dma_initChannelConfig:	.type	func

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   183  {
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   184      const IfxDma_Dma_ChannelConfig defaultConfig = {
	movh.a	a15,#@his(.2.ini)
	lea	a15,[a15]@los(.2.ini)
.L235:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   185          .module                                 = NULL_PTR,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   186          .channelId                              = IfxDma_ChannelId_0,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   187          .sourceAddress                          = 0,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   188          .destinationAddress                     = 0,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   189          .shadowAddress                          = 0,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   190          .readDataCrc                            = 0,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   191          .sourceDestinationAddressCrc            = 0,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   192          .transferCount                          = 0,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   193          .blockMode                              = IfxDma_ChannelMove_1,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   194          .requestMode                            = IfxDma_ChannelRequestMode_oneTransferPerRequest,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   195          .operationMode                          = IfxDma_ChannelOperationMode_single,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   196          .moveSize                               = IfxDma_ChannelMoveSize_8bit,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   197          .pattern                                = IfxDma_ChannelPattern_0_disable,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   198          .requestSource                          = IfxDma_ChannelRequestSource_peripheral,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   199          .busPriority                            = IfxDma_ChannelBusPriority_medium,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   200          .hardwareRequestEnabled                 = FALSE,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   201          .sourceAddressIncrementStep             = IfxDma_ChannelIncrementStep_1,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   202          .sourceAddressIncrementDirection        = IfxDma_ChannelIncrementDirection_positive,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   203          .sourceAddressCircularRange             = IfxDma_ChannelIncrementCircular_32768,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   204          .destinationAddressIncrementStep        = IfxDma_ChannelIncrementStep_1,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   205          .destinationAddressIncrementDirection   = IfxDma_ChannelIncrementDirection_positive,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   206          .destinationAddressCircularRange        = IfxDma_ChannelIncrementCircular_32768,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   207          .shadowControl                          = IfxDma_ChannelShadow_none,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   208          .sourceCircularBufferEnabled            = FALSE,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   209          .destinationCircularBufferEnabled       = FALSE,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   210          .timestampEnabled                       = FALSE,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   211          .wrapSourceInterruptEnabled             = FALSE,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   212          .wrapDestinationInterruptEnabled        = FALSE,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   213          .channelInterruptEnabled                = FALSE,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   214          .channelInterruptControl                = IfxDma_ChannelInterruptControl_thresholdLimitMatch,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   215          .interruptRaiseThreshold                = 0,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   216          .transactionRequestLostInterruptEnabled = FALSE,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   217          .channelInterruptPriority               = 0,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   218          .channelInterruptTypeOfService          = IfxSrc_Tos_cpu0
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   219      };
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   220  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   221      /* Default Configuration */
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   222      *config = defaultConfig;
	mov.aa	a2,a4
.L184:
	mov.a	a6,#13
.L10:
	ld.w	d15,[a15+]
	st.w	[a2+],d15
	loop	a6,.L10
.L185:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   223  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   224      /* take over module pointer */
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   225      config->module = dma;
	st.a	[a4],a5
.L186:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   226  }
	ret
.L151:
	
__IfxDma_Dma_initChannelConfig_function_end:
	.size	IfxDma_Dma_initChannelConfig,__IfxDma_Dma_initChannelConfig_function_end-IfxDma_Dma_initChannelConfig
.L62:
	; End of function
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_initLinkedListEntry',code,cluster('IfxDma_Dma_initLinkedListEntry')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_initLinkedListEntry'
	.align	2
	
	.global	IfxDma_Dma_initLinkedListEntry

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   227  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   228  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   229  void IfxDma_Dma_initLinkedListEntry(void *ptrToAddress, const IfxDma_Dma_ChannelConfig *config)
; Function IfxDma_Dma_initLinkedListEntry
.L24:
IfxDma_Dma_initLinkedListEntry:	.type	func

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   230  {
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   231      IfxDma_Dma_configureTransactionSet((Ifx_DMA_CH *)ptrToAddress, config);
	j	IfxDma_Dma_configureTransactionSet
.L155:
	
__IfxDma_Dma_initLinkedListEntry_function_end:
	.size	IfxDma_Dma_initLinkedListEntry,__IfxDma_Dma_initLinkedListEntry_function_end-IfxDma_Dma_initLinkedListEntry
.L67:
	; End of function
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_initModule',code,cluster('IfxDma_Dma_initModule')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_initModule'
	.align	2
	
	.global	IfxDma_Dma_initModule

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   232  }
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   233  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   234  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   235  void IfxDma_Dma_initModule(IfxDma_Dma *dma, const IfxDma_Dma_Config *config)
; Function IfxDma_Dma_initModule
.L26:
IfxDma_Dma_initModule:	.type	func

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   236  {
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   237      dma->dma = config->dma;
	ld.a	a15,[a5]
.L206:
	st.a	[a4],a15
.L207:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   238  }
	ret
.L102:
	
__IfxDma_Dma_initModule_function_end:
	.size	IfxDma_Dma_initModule,__IfxDma_Dma_initModule_function_end-IfxDma_Dma_initModule
.L47:
	; End of function
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_initModuleConfig',code,cluster('IfxDma_Dma_initModuleConfig')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_initModuleConfig'
	.align	2
	
	.global	IfxDma_Dma_initModuleConfig

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   239  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   240  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   241  void IfxDma_Dma_initModuleConfig(IfxDma_Dma_Config *config, Ifx_DMA *dma)
; Function IfxDma_Dma_initModuleConfig
.L28:
IfxDma_Dma_initModuleConfig:	.type	func

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   242  {
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   243      config->dma = dma;
	st.a	[a4],a5
.L212:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   244  }
	ret
.L106:
	
__IfxDma_Dma_initModuleConfig_function_end:
	.size	IfxDma_Dma_initModuleConfig,__IfxDma_Dma_initModuleConfig_function_end-IfxDma_Dma_initModuleConfig
.L52:
	; End of function
	
	.sdecl	'.rodata.IfxDma_Dma..2.ini',data,rom
	.sect	'.rodata.IfxDma_Dma..2.ini'
	.align	4
.2.ini:	.type	object
	.size	.2.ini,56
	.space	34
	.byte	1
	.space	2
	.byte	1,15
	.space	1
	.byte	1,15
	.space	14
	.calls	'IfxDma_Dma_initChannel','IfxDma_Dma_configureTransactionSet'
	.calls	'IfxDma_Dma_initLinkedListEntry','IfxDma_Dma_configureTransactionSet'
	.calls	'IfxDma_Dma_deInitChannel','.cocofun_4'
	.calls	'IfxDma_Dma_configureTransactionSet','',0
	.calls	'IfxDma_Dma_createModuleHandle','',0
	.calls	'IfxDma_Dma_deInitChannel','',0
	.calls	'.cocofun_4','',0
	.calls	'IfxDma_Dma_initChannel','',0
	.calls	'IfxDma_Dma_initChannelConfig','',0
	.calls	'IfxDma_Dma_initLinkedListEntry','',0
	.calls	'IfxDma_Dma_initModule','',0
	.calls	'IfxDma_Dma_initModuleConfig','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L30:
	.word	116563
	.half	3
	.word	.L31
	.byte	4
.L29:
	.byte	1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L32
	.byte	2,1,1,3
	.word	168
	.byte	4
	.byte	'Ifx__jump_and_link',0,3,1,58,17,1,1,5
	.byte	'fun',0,1,58,43
	.word	171
	.byte	6,0,7
	.byte	'__fract',0,4,128,1,7
	.byte	'float',0,4,4,8
	.byte	'Ifx__float_to_fract',0,3,1,149,2,18
	.word	216
	.byte	1,1,5
	.byte	'a',0,1,149,2,44
	.word	228
	.byte	6,0,4
	.byte	'Ifx__stopPerfCounters',0,3,1,169,2,17,1,1,6,0,7
	.byte	'unsigned long long int',0,8,7,9
	.byte	'void',0
.L156:
	.byte	3
	.word	340
	.byte	8
	.byte	'__ld64',0,3,2,132,1,19
	.word	314
	.byte	1,1,5
	.byte	'addr',0,2,132,1,32
	.word	346
	.byte	6,0,4
	.byte	'__st64',0,3,2,140,1,17,1,1,5
	.byte	'addr',0,2,140,1,30
	.word	346
	.byte	5
	.byte	'value',0,2,140,1,43
	.word	314
	.byte	6,0,7
	.byte	'unsigned int',0,4,7,7
	.byte	'int',0,4,5,7
	.byte	'unsigned char',0,1,8,10
	.byte	'_Ifx_SRC_SRCR_Bits',0,4,68,16,4,11
	.byte	'SRPN',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	455
	.byte	2,6,2,35,1,11
	.byte	'SRE',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'TOS',0,1
	.word	455
	.byte	3,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	455
	.byte	2,0,2,35,1,11
	.byte	'ECC',0,1
	.word	455
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	455
	.byte	3,0,2,35,2,11
	.byte	'SRR',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'CLRR',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'SETR',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'IOV',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'IOVCLR',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'SWS',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'SWSCLR',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	455
	.byte	1,0,2,35,3,0,12,4,93,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	472
	.byte	4,2,35,0,0,14
	.word	762
	.byte	3
	.word	801
.L142:
	.byte	4
	.byte	'IfxSrc_clearRequest',0,3,3,247,1,17,1,1
.L144:
	.byte	5
	.byte	'src',0,3,247,1,60
	.word	806
.L146:
	.byte	6,0
.L147:
	.byte	4
	.byte	'IfxSrc_enable',0,3,3,137,2,17,1,1
.L148:
	.byte	5
	.byte	'src',0,3,137,2,54
	.word	806
.L150:
	.byte	6,0,15,5,66,9,1,16
	.byte	'IfxSrc_Tos_cpu0',0,0,16
	.byte	'IfxSrc_Tos_dma',0,1,16
	.byte	'IfxSrc_Tos_cpu1',0,2,16
	.byte	'IfxSrc_Tos_cpu2',0,3,16
	.byte	'IfxSrc_Tos_cpu3',0,4,16
	.byte	'IfxSrc_Tos_cpu4',0,5,16
	.byte	'IfxSrc_Tos_cpu5',0,6,0,7
	.byte	'unsigned short int',0,2,7
.L133:
	.byte	4
	.byte	'IfxSrc_init',0,3,3,143,2,17,1,1
.L135:
	.byte	5
	.byte	'src',0,3,143,2,52
	.word	806
.L137:
	.byte	5
	.byte	'typOfService',0,3,143,2,68
	.word	891
.L139:
	.byte	5
	.byte	'priority',0,3,143,2,95
	.word	1022
.L141:
	.byte	17,6,0,0,7
	.byte	'unsigned int',0,4,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,7,238,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	1121
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	1121
	.byte	16,0,2,35,0,0,12,7,189,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1137
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,7,247,9,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	455
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1022
	.byte	16,0,2,35,2,0,12,7,197,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1273
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,7,135,10,16,4,11
	.byte	'AE',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	455
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	1022
	.byte	16,0,2,35,2,0,12,7,205,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1539
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU',0,7,136,17,25,12,13
	.byte	'CON0',0
	.word	1233
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	1499
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	1730
	.byte	4,2,35,8,0,14
	.word	1770
	.byte	3
	.word	1833
	.byte	4
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,6,164,4,17,1,1,5
	.byte	'watchdog',0,6,164,4,65
	.word	1838
	.byte	5
	.byte	'password',0,6,164,4,82
	.word	1022
	.byte	6,0,4
	.byte	'IfxScuWdt_clearSafetyEndinitInline',0,3,6,197,4,17,1,1,5
	.byte	'password',0,6,197,4,59
	.word	1022
	.byte	6,0,4
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,6,144,5,17,1,1,5
	.byte	'watchdog',0,6,144,5,63
	.word	1838
	.byte	5
	.byte	'password',0,6,144,5,80
	.word	1022
	.byte	6,0,4
	.byte	'IfxScuWdt_setSafetyEndinitInline',0,3,6,177,5,17,1,1,5
	.byte	'password',0,6,177,5,57
	.word	1022
	.byte	6,0,8
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,6,220,4,19
	.word	1022
	.byte	1,1,5
	.byte	'watchdog',0,6,220,4,74
	.word	1838
	.byte	6,0,8
	.byte	'IfxScuWdt_getSafetyWatchdogPasswordInline',0,3,6,129,5,19
	.word	1022
	.byte	1,1,6,0,15,9,161,1,9,1,16
	.byte	'IfxCpu_ResourceCpu_0',0,0,16
	.byte	'IfxCpu_ResourceCpu_1',0,1,16
	.byte	'IfxCpu_ResourceCpu_2',0,2,16
	.byte	'IfxCpu_ResourceCpu_3',0,3,16
	.byte	'IfxCpu_ResourceCpu_4',0,4,16
	.byte	'IfxCpu_ResourceCpu_5',0,5,16
	.byte	'IfxCpu_ResourceCpu_none',0,6,0,8
	.byte	'IfxCpu_getCoreIndex',0,3,8,235,6,31
	.word	2248
	.byte	1,1,6,0,8
	.byte	'IfxCpu_areInterruptsEnabled',0,3,8,233,5,20
	.word	455
	.byte	1,1,6,0,7
	.byte	'unsigned long int',0,4,7,8
	.byte	'IfxCpu_getPerformanceCounter',0,3,8,255,6,19
	.word	2495
	.byte	1,1,5
	.byte	'address',0,8,255,6,55
	.word	1022
	.byte	6,0,8
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,8,156,7,20
	.word	455
	.byte	1,1,5
	.byte	'address',0,8,156,7,70
	.word	1022
	.byte	6,0,4
	.byte	'IfxCpu_updatePerformanceCounter',0,3,8,138,9,17,1,1,5
	.byte	'address',0,8,138,9,56
	.word	2495
	.byte	5
	.byte	'count',0,8,138,9,72
	.word	2495
	.byte	17,6,0,0,10
	.byte	'_Ifx_P_OUT_Bits',0,11,145,3,16,4,11
	.byte	'P0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1022
	.byte	16,0,2,35,2,0,12,11,171,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2726
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMR_Bits',0,11,171,2,16,4,11
	.byte	'PS0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'PCL0',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	455
	.byte	1,0,2,35,3,0,12,11,251,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3042
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ID_Bits',0,11,133,1,16,4,11
	.byte	'MODREV',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	455
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	1022
	.byte	16,0,2,35,2,0,12,11,155,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3613
	.byte	4,2,35,0,0,18,4
	.word	455
	.byte	19,3,0,10
	.byte	'_Ifx_P_IOCR0_Bits',0,11,163,1,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	3,5,2,35,0,11
	.byte	'PC0',0,1
	.word	455
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	455
	.byte	3,5,2,35,1,11
	.byte	'PC1',0,1
	.word	455
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	455
	.byte	3,5,2,35,2,11
	.byte	'PC2',0,1
	.word	455
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	455
	.byte	3,5,2,35,3,11
	.byte	'PC3',0,1
	.word	455
	.byte	5,0,2,35,3,0,12,11,171,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3742
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR4_Bits',0,11,189,1,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	3,5,2,35,0,11
	.byte	'PC4',0,1
	.word	455
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	455
	.byte	3,5,2,35,1,11
	.byte	'PC5',0,1
	.word	455
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	455
	.byte	3,5,2,35,2,11
	.byte	'PC6',0,1
	.word	455
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	455
	.byte	3,5,2,35,3,11
	.byte	'PC7',0,1
	.word	455
	.byte	5,0,2,35,3,0,12,11,187,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3957
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR8_Bits',0,11,202,1,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	3,5,2,35,0,11
	.byte	'PC8',0,1
	.word	455
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	455
	.byte	3,5,2,35,1,11
	.byte	'PC9',0,1
	.word	455
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	455
	.byte	3,5,2,35,2,11
	.byte	'PC10',0,1
	.word	455
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	455
	.byte	3,5,2,35,3,11
	.byte	'PC11',0,1
	.word	455
	.byte	5,0,2,35,3,0,12,11,195,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4172
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR12_Bits',0,11,176,1,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	3,5,2,35,0,11
	.byte	'PC12',0,1
	.word	455
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	455
	.byte	3,5,2,35,1,11
	.byte	'PC13',0,1
	.word	455
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	455
	.byte	3,5,2,35,2,11
	.byte	'PC14',0,1
	.word	455
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	455
	.byte	3,5,2,35,3,11
	.byte	'PC15',0,1
	.word	455
	.byte	5,0,2,35,3,0,12,11,179,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4389
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IN_Bits',0,11,141,1,16,4,11
	.byte	'P0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1022
	.byte	16,0,2,35,2,0,12,11,163,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4609
	.byte	4,2,35,0,0,18,24
	.word	455
	.byte	19,23,0,10
	.byte	'_Ifx_P_PDR0_Bits',0,11,212,3,16,4,11
	.byte	'PD0',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	455
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	455
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	455
	.byte	2,0,2,35,0,11
	.byte	'PD2',0,1
	.word	455
	.byte	2,6,2,35,1,11
	.byte	'PL2',0,1
	.word	455
	.byte	2,4,2,35,1,11
	.byte	'PD3',0,1
	.word	455
	.byte	2,2,2,35,1,11
	.byte	'PL3',0,1
	.word	455
	.byte	2,0,2,35,1,11
	.byte	'PD4',0,1
	.word	455
	.byte	2,6,2,35,2,11
	.byte	'PL4',0,1
	.word	455
	.byte	2,4,2,35,2,11
	.byte	'PD5',0,1
	.word	455
	.byte	2,2,2,35,2,11
	.byte	'PL5',0,1
	.word	455
	.byte	2,0,2,35,2,11
	.byte	'PD6',0,1
	.word	455
	.byte	2,6,2,35,3,11
	.byte	'PL6',0,1
	.word	455
	.byte	2,4,2,35,3,11
	.byte	'PD7',0,1
	.word	455
	.byte	2,2,2,35,3,11
	.byte	'PL7',0,1
	.word	455
	.byte	2,0,2,35,3,0,12,11,195,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4933
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PDR1_Bits',0,11,233,3,16,4,11
	.byte	'PD8',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'PL8',0,1
	.word	455
	.byte	2,4,2,35,0,11
	.byte	'PD9',0,1
	.word	455
	.byte	2,2,2,35,0,11
	.byte	'PL9',0,1
	.word	455
	.byte	2,0,2,35,0,11
	.byte	'PD10',0,1
	.word	455
	.byte	2,6,2,35,1,11
	.byte	'PL10',0,1
	.word	455
	.byte	2,4,2,35,1,11
	.byte	'PD11',0,1
	.word	455
	.byte	2,2,2,35,1,11
	.byte	'PL11',0,1
	.word	455
	.byte	2,0,2,35,1,11
	.byte	'PD12',0,1
	.word	455
	.byte	2,6,2,35,2,11
	.byte	'PL12',0,1
	.word	455
	.byte	2,4,2,35,2,11
	.byte	'PD13',0,1
	.word	455
	.byte	2,2,2,35,2,11
	.byte	'PL13',0,1
	.word	455
	.byte	2,0,2,35,2,11
	.byte	'PD14',0,1
	.word	455
	.byte	2,6,2,35,3,11
	.byte	'PL14',0,1
	.word	455
	.byte	2,4,2,35,3,11
	.byte	'PD15',0,1
	.word	455
	.byte	2,2,2,35,3,11
	.byte	'PL15',0,1
	.word	455
	.byte	2,0,2,35,3,0,12,11,203,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5237
	.byte	4,2,35,0,0,18,8
	.word	455
	.byte	19,7,0,10
	.byte	'_Ifx_P_ESR_Bits',0,11,111,16,4,11
	.byte	'EN0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1022
	.byte	16,0,2,35,2,0,12,11,147,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5562
	.byte	4,2,35,0,0,18,12
	.word	455
	.byte	19,11,0,10
	.byte	'_Ifx_P_PDISC_Bits',0,11,190,3,16,4,11
	.byte	'PDIS0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'PDIS2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'PDIS3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'PDIS4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'PDIS5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'PDIS6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'PDIS7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'PDIS8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'PDIS9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'PDIS10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'PDIS11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'PDIS12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'PDIS13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'PDIS14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'PDIS15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1022
	.byte	16,0,2,35,2,0,12,11,187,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5902
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PCSR_Bits',0,11,167,3,16,4,11
	.byte	'SEL0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'SEL1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'SEL2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'SEL3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'SEL4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'SEL5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'SEL6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'SEL7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'SEL8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'SEL9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'SEL10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'SEL11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'SEL12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'SEL13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'SEL14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'SEL15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1022
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	455
	.byte	1,0,2,35,3,0,12,11,179,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6268
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR0_Bits',0,11,230,2,16,4,11
	.byte	'PS0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,12,11,139,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6632
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR4_Bits',0,11,251,2,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	4,4,2,35,0,11
	.byte	'PS4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,12,11,155,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6779
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR8_Bits',0,11,134,3,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'PS8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	432
	.byte	20,0,2,35,0,0,12,11,163,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6948
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR12_Bits',0,11,240,2,16,4,11
	.byte	'reserved_0',0,2
	.word	1022
	.byte	12,4,2,35,0,11
	.byte	'PS12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1022
	.byte	16,0,2,35,2,0,12,11,147,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7120
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR0_Bits',0,11,128,2,16,4,11
	.byte	'reserved_0',0,2
	.word	1022
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	1022
	.byte	12,0,2,35,2,0,12,11,219,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7295
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR4_Bits',0,11,149,2,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	20,12,2,35,0,11
	.byte	'PCL4',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	455
	.byte	8,0,2,35,3,0,12,11,235,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7469
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR8_Bits',0,11,160,2,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	24,8,2,35,0,11
	.byte	'PCL8',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	455
	.byte	4,0,2,35,3,0,12,11,243,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7643
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR12_Bits',0,11,139,2,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	28,4,2,35,0,11
	.byte	'PCL12',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	455
	.byte	1,0,2,35,3,0,12,11,227,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7819
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR_Bits',0,11,208,2,16,4,11
	.byte	'PS0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1022
	.byte	16,0,2,35,2,0,12,11,131,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7975
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR_Bits',0,11,234,1,16,4,11
	.byte	'reserved_0',0,2
	.word	1022
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	455
	.byte	1,0,2,35,3,0,12,11,211,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8308
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR_Bits',0,11,215,1,16,4,11
	.byte	'REN_CTRL',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'RX_EN',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'TERM',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'LRXTERM',0,1
	.word	455
	.byte	3,2,2,35,0,11
	.byte	'LVDSM',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'PS',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'TEN_CTRL',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'TX_EN',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'VDIFFADJ',0,1
	.word	455
	.byte	2,4,2,35,1,11
	.byte	'VOSDYN',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'VOSEXT',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'TX_PD',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'TX_PWDPD',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1022
	.byte	16,0,2,35,2,0,12,11,203,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8656
	.byte	4,2,35,0,0,18,32
	.word	8936
	.byte	19,7,0,18,56
	.word	455
	.byte	19,55,0,10
	.byte	'_Ifx_P_ACCEN1_Bits',0,11,105,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,11,139,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8994
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ACCEN0_Bits',0,11,68,16,4,11
	.byte	'EN0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	455
	.byte	1,0,2,35,3,0,12,11,131,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	9081
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P',0,11,220,5,25,128,2,13
	.byte	'OUT',0
	.word	3002
	.byte	4,2,35,0,13
	.byte	'OMR',0
	.word	3573
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	3693
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	3733
	.byte	4,2,35,12,13
	.byte	'IOCR0',0
	.word	3917
	.byte	4,2,35,16,13
	.byte	'IOCR4',0
	.word	4132
	.byte	4,2,35,20,13
	.byte	'IOCR8',0
	.word	4349
	.byte	4,2,35,24,13
	.byte	'IOCR12',0
	.word	4569
	.byte	4,2,35,28,13
	.byte	'reserved_20',0
	.word	3733
	.byte	4,2,35,32,13
	.byte	'IN',0
	.word	4884
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	4924
	.byte	24,2,35,40,13
	.byte	'PDR0',0
	.word	5197
	.byte	4,2,35,64,13
	.byte	'PDR1',0
	.word	5513
	.byte	4,2,35,68,13
	.byte	'reserved_48',0
	.word	5553
	.byte	8,2,35,72,13
	.byte	'ESR',0
	.word	5853
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	5893
	.byte	12,2,35,84,13
	.byte	'PDISC',0
	.word	6228
	.byte	4,2,35,96,13
	.byte	'PCSR',0
	.word	6592
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	5553
	.byte	8,2,35,104,13
	.byte	'OMSR0',0
	.word	6739
	.byte	4,2,35,112,13
	.byte	'OMSR4',0
	.word	6908
	.byte	4,2,35,116,13
	.byte	'OMSR8',0
	.word	7080
	.byte	4,2,35,120,13
	.byte	'OMSR12',0
	.word	7255
	.byte	4,2,35,124,13
	.byte	'OMCR0',0
	.word	7429
	.byte	4,3,35,128,1,13
	.byte	'OMCR4',0
	.word	7603
	.byte	4,3,35,132,1,13
	.byte	'OMCR8',0
	.word	7779
	.byte	4,3,35,136,1,13
	.byte	'OMCR12',0
	.word	7935
	.byte	4,3,35,140,1,13
	.byte	'OMSR',0
	.word	8268
	.byte	4,3,35,144,1,13
	.byte	'OMCR',0
	.word	8616
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	5553
	.byte	8,3,35,152,1,13
	.byte	'LPCR',0
	.word	8976
	.byte	32,3,35,160,1,13
	.byte	'reserved_C0',0
	.word	8985
	.byte	56,3,35,192,1,13
	.byte	'ACCEN1',0
	.word	9041
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	9608
	.byte	4,3,35,252,1,0,14
	.word	9648
	.byte	3
	.word	10218
	.byte	15,10,187,1,9,4,16
	.byte	'IfxPort_State_notChanged',0,0,16
	.byte	'IfxPort_State_high',0,1,16
	.byte	'IfxPort_State_low',0,128,128,4,16
	.byte	'IfxPort_State_toggled',0,129,128,4,0,4
	.byte	'IfxPort_setPinState',0,3,10,169,5,17,1,1,5
	.byte	'port',0,10,169,5,44
	.word	10223
	.byte	5
	.byte	'pinIndex',0,10,169,5,56
	.word	455
	.byte	5
	.byte	'action',0,10,169,5,80
	.word	10228
	.byte	6,0,4
	.byte	'IfxScuCcu_wait',0,3,12,157,14,17,1,1,5
	.byte	'timeSec',0,12,157,14,40
	.word	228
	.byte	17,6,0,0,8
	.byte	'IfxScuCcu_getStmFrequency',0,3,12,188,13,20
	.word	228
	.byte	1,1,6,0,10
	.byte	'_Ifx_DMA_CLC_Bits',0,14,197,1,16,4,11
	.byte	'DISR',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,12,14,212,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10493
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ID_Bits',0,14,221,1,16,4,11
	.byte	'MOD_REV',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'MOD_TYPE',0,1
	.word	455
	.byte	8,0,2,35,1,11
	.byte	'MOD_NUMBER',0,2
	.word	1022
	.byte	16,0,2,35,2,0,12,14,236,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10650
	.byte	4,2,35,0,0,18,52
	.word	455
	.byte	19,51,0,10
	.byte	'_Ifx_DMA_ACCEN_ACCENR0_Bits',0,14,68,16,4,11
	.byte	'EN0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	455
	.byte	1,0,2,35,3,0,12,14,132,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10784
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ACCEN_ACCENR1_Bits',0,14,105,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,14,140,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11360
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ACCEN',0,14,221,6,25,8,13
	.byte	'ACCENR0',0
	.word	11320
	.byte	4,2,35,0,13
	.byte	'ACCENR1',0
	.word	11416
	.byte	4,2,35,4,0,18,32
	.word	11456
	.byte	19,3,0,14
	.word	11512
	.byte	18,192,1
	.word	455
	.byte	19,191,1,0,10
	.byte	'_Ifx_DMA_ME_EER_Bits',0,14,174,2,16,4,11
	.byte	'reserved_0',0,2
	.word	1022
	.byte	16,0,2,35,0,11
	.byte	'ESER',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'EDER',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	1022
	.byte	8,6,2,35,2,11
	.byte	'ELER',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	455
	.byte	5,0,2,35,3,0,12,14,156,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11537
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_ERRSR_Bits',0,14,185,2,16,4,11
	.byte	'LEC',0,1
	.word	455
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	1022
	.byte	9,0,2,35,0,11
	.byte	'SER',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'DER',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	455
	.byte	2,4,2,35,2,11
	.byte	'SPBER',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'SRIER',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	455
	.byte	2,0,2,35,2,11
	.byte	'RAMER',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'SLLER',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'DLLER',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	455
	.byte	5,0,2,35,3,0,12,14,164,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11721
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_CLRE_Bits',0,14,152,2,16,4,11
	.byte	'reserved_0',0,2
	.word	1022
	.byte	16,0,2,35,0,11
	.byte	'CSER',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'CDER',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	455
	.byte	2,4,2,35,2,11
	.byte	'CSPBER',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'CSRIER',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	455
	.byte	2,0,2,35,2,11
	.byte	'CRAMER',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'CSLLER',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'CDLLER',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	455
	.byte	5,0,2,35,3,0,12,14,140,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12012
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_SR_Bits',0,14,170,3,16,4,11
	.byte	'RS',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	455
	.byte	3,4,2,35,0,11
	.byte	'WS',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,2
	.word	1022
	.byte	11,0,2,35,0,11
	.byte	'CH',0,1
	.word	455
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	1022
	.byte	9,0,2,35,2,0,12,14,140,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12294
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_R0_Bits',0,14,202,2,16,4,11
	.byte	'RD00',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'RD01',0,1
	.word	455
	.byte	8,0,2,35,1,11
	.byte	'RD02',0,1
	.word	455
	.byte	8,0,2,35,2,11
	.byte	'RD03',0,1
	.word	455
	.byte	8,0,2,35,3,0,12,14,172,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12470
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_R1_Bits',0,14,211,2,16,4,11
	.byte	'RD10',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'RD11',0,1
	.word	455
	.byte	8,0,2,35,1,11
	.byte	'RD12',0,1
	.word	455
	.byte	8,0,2,35,2,11
	.byte	'RD13',0,1
	.word	455
	.byte	8,0,2,35,3,0,12,14,180,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12601
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_R2_Bits',0,14,220,2,16,4,11
	.byte	'RD20',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'RD21',0,1
	.word	455
	.byte	8,0,2,35,1,11
	.byte	'RD22',0,1
	.word	455
	.byte	8,0,2,35,2,11
	.byte	'RD23',0,1
	.word	455
	.byte	8,0,2,35,3,0,12,14,188,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12732
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_R3_Bits',0,14,229,2,16,4,11
	.byte	'RD30',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'RD31',0,1
	.word	455
	.byte	8,0,2,35,1,11
	.byte	'RD32',0,1
	.word	455
	.byte	8,0,2,35,2,11
	.byte	'RD33',0,1
	.word	455
	.byte	8,0,2,35,3,0,12,14,196,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12863
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_R4_Bits',0,14,238,2,16,4,11
	.byte	'RD40',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'RD41',0,1
	.word	455
	.byte	8,0,2,35,1,11
	.byte	'RD42',0,1
	.word	455
	.byte	8,0,2,35,2,11
	.byte	'RD43',0,1
	.word	455
	.byte	8,0,2,35,3,0,12,14,204,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12994
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_R5_Bits',0,14,247,2,16,4,11
	.byte	'RD50',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'RD51',0,1
	.word	455
	.byte	8,0,2,35,1,11
	.byte	'RD52',0,1
	.word	455
	.byte	8,0,2,35,2,11
	.byte	'RD53',0,1
	.word	455
	.byte	8,0,2,35,3,0,12,14,212,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13125
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_R6_Bits',0,14,128,3,16,4,11
	.byte	'RD60',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'RD61',0,1
	.word	455
	.byte	8,0,2,35,1,11
	.byte	'RD62',0,1
	.word	455
	.byte	8,0,2,35,2,11
	.byte	'RD63',0,1
	.word	455
	.byte	8,0,2,35,3,0,12,14,220,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13256
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_R7_Bits',0,14,137,3,16,4,11
	.byte	'RD70',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'RD71',0,1
	.word	455
	.byte	8,0,2,35,1,11
	.byte	'RD72',0,1
	.word	455
	.byte	8,0,2,35,2,11
	.byte	'RD73',0,1
	.word	455
	.byte	8,0,2,35,3,0,12,14,228,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13387
	.byte	4,2,35,0,0,18,32
	.word	455
	.byte	19,31,0,10
	.byte	'_Ifx_DMA_ME_RDCRC_Bits',0,14,146,3,16,4,11
	.byte	'RDCRC',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,14,236,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13527
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_SDCRC_Bits',0,14,158,3,16,4,11
	.byte	'SDCRC',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,14,252,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13614
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_SADR_Bits',0,14,152,3,16,4,11
	.byte	'SADR',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,14,244,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13701
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_DADR_Bits',0,14,168,2,16,4,11
	.byte	'DADR',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,14,148,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13786
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_ADICR_Bits',0,14,229,1,16,4,11
	.byte	'SMF',0,1
	.word	455
	.byte	3,5,2,35,0,11
	.byte	'INCS',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'DMF',0,1
	.word	455
	.byte	3,1,2,35,0,11
	.byte	'INCD',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'CBLS',0,1
	.word	455
	.byte	4,4,2,35,1,11
	.byte	'CBLD',0,1
	.word	455
	.byte	4,0,2,35,1,11
	.byte	'SHCT',0,1
	.word	455
	.byte	4,4,2,35,2,11
	.byte	'SCBE',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'DCBE',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'STAMP',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'WRPSE',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'WRPDE',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'INTCT',0,1
	.word	455
	.byte	2,4,2,35,3,11
	.byte	'IRDV',0,1
	.word	455
	.byte	4,0,2,35,3,0,12,14,244,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13871
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_CHCR_Bits',0,14,249,1,16,4,11
	.byte	'TREL',0,2
	.word	1022
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,1
	.word	455
	.byte	2,0,2,35,1,11
	.byte	'BLKM',0,1
	.word	455
	.byte	3,5,2,35,2,11
	.byte	'RROAT',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'CHMODE',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'CHDW',0,1
	.word	455
	.byte	3,0,2,35,2,11
	.byte	'PATSEL',0,1
	.word	455
	.byte	3,5,2,35,3,11
	.byte	'SWAP',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'PRSEL',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	455
	.byte	3,0,2,35,3,0,12,14,252,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14190
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_SHADR_Bits',0,14,164,3,16,4,11
	.byte	'SHADR',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,14,132,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14439
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_CHSR_Bits',0,14,136,2,16,4,11
	.byte	'TCOUNT',0,2
	.word	1022
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'LXO',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'WRPS',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'WRPD',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'ICH',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'IPM',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	455
	.byte	2,2,2,35,2,11
	.byte	'BUFFER',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'FROZEN',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	455
	.byte	8,0,2,35,3,0,12,14,132,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14526
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME',0,14,240,6,25,128,1,13
	.byte	'EER',0
	.word	11681
	.byte	4,2,35,0,13
	.byte	'ERRSR',0
	.word	11972
	.byte	4,2,35,4,13
	.byte	'CLRE',0
	.word	12254
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	3733
	.byte	4,2,35,12,13
	.byte	'SR',0
	.word	12430
	.byte	4,2,35,16,13
	.byte	'reserved_14',0
	.word	5893
	.byte	12,2,35,20,13
	.byte	'R0',0
	.word	12561
	.byte	4,2,35,32,13
	.byte	'R1',0
	.word	12692
	.byte	4,2,35,36,13
	.byte	'R2',0
	.word	12823
	.byte	4,2,35,40,13
	.byte	'R3',0
	.word	12954
	.byte	4,2,35,44,13
	.byte	'R4',0
	.word	13085
	.byte	4,2,35,48,13
	.byte	'R5',0
	.word	13216
	.byte	4,2,35,52,13
	.byte	'R6',0
	.word	13347
	.byte	4,2,35,56,13
	.byte	'R7',0
	.word	13478
	.byte	4,2,35,60,13
	.byte	'reserved_40',0
	.word	13518
	.byte	32,2,35,64,13
	.byte	'RDCRC',0
	.word	13574
	.byte	4,2,35,96,13
	.byte	'SDCRC',0
	.word	13661
	.byte	4,2,35,100,13
	.byte	'SADR',0
	.word	13746
	.byte	4,2,35,104,13
	.byte	'DADR',0
	.word	13831
	.byte	4,2,35,108,13
	.byte	'ADICR',0
	.word	14150
	.byte	4,2,35,112,13
	.byte	'CHCR',0
	.word	14399
	.byte	4,2,35,116,13
	.byte	'SHADR',0
	.word	14486
	.byte	4,2,35,120,13
	.byte	'CHSR',0
	.word	14755
	.byte	4,2,35,124,0,14
	.word	14795
	.byte	18,128,31
	.word	455
	.byte	19,255,30,0,14
	.word	14795
	.byte	18,96
	.word	455
	.byte	19,95,0,10
	.byte	'_Ifx_DMA_OTSS_Bits',0,14,188,3,16,4,11
	.byte	'TGS',0,1
	.word	455
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	455
	.byte	3,1,2,35,0,11
	.byte	'BS',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,12,14,156,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15173
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_PRR0_Bits',0,14,197,3,16,4,11
	.byte	'PAT00',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'PAT01',0,1
	.word	455
	.byte	8,0,2,35,1,11
	.byte	'PAT02',0,1
	.word	455
	.byte	8,0,2,35,2,11
	.byte	'PAT03',0,1
	.word	455
	.byte	8,0,2,35,3,0,12,14,164,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15312
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_PRR1_Bits',0,14,206,3,16,4,11
	.byte	'PAT10',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'PAT11',0,1
	.word	455
	.byte	8,0,2,35,1,11
	.byte	'PAT12',0,1
	.word	455
	.byte	8,0,2,35,2,11
	.byte	'PAT13',0,1
	.word	455
	.byte	8,0,2,35,3,0,12,14,172,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15446
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_TIME_Bits',0,14,229,3,16,4,11
	.byte	'COUNT',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,14,196,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15580
	.byte	4,2,35,0,0,18,236,1
	.word	455
	.byte	19,235,1,0,10
	.byte	'_Ifx_DMA_MODE_Bits',0,14,181,3,16,4,11
	.byte	'MODE',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	432
	.byte	31,0,2,35,0,0,12,14,148,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15674
	.byte	4,2,35,0,0,18,16
	.word	15738
	.byte	19,3,0,18,16
	.word	455
	.byte	19,15,0,10
	.byte	'_Ifx_DMA_ERRINTR_Bits',0,14,207,1,16,4,11
	.byte	'SIT',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	432
	.byte	31,0,2,35,0,0,12,14,220,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15796
	.byte	4,2,35,0,0,18,16
	.word	15862
	.byte	19,3,0,18,208,9
	.word	455
	.byte	19,207,9,0,10
	.byte	'_Ifx_DMA_HRR_Bits',0,14,214,1,16,4,11
	.byte	'HRP',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	432
	.byte	30,0,2,35,0,0,12,14,228,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15922
	.byte	4,2,35,0,0,18,128,4
	.word	15984
	.byte	19,127,0,10
	.byte	'_Ifx_DMA_SUSENR_Bits',0,14,222,3,16,4,11
	.byte	'SUSEN',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	432
	.byte	31,0,2,35,0,0,12,14,188,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16034
	.byte	4,2,35,0,0,18,128,4
	.word	16101
	.byte	19,127,0,10
	.byte	'_Ifx_DMA_SUSACR_Bits',0,14,215,3,16,4,11
	.byte	'SUSAC',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	432
	.byte	31,0,2,35,0,0,12,14,180,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16151
	.byte	4,2,35,0,0,18,128,4
	.word	16218
	.byte	19,127,0,10
	.byte	'_Ifx_DMA_TSR_Bits',0,14,235,3,16,4,11
	.byte	'RST',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'HTRE',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'TRL',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'CH',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'ETRL',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	455
	.byte	3,0,2,35,0,11
	.byte	'HLTREQ',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'HLTACK',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	455
	.byte	6,0,2,35,1,11
	.byte	'ECH',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'DCH',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'CTL',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	455
	.byte	5,0,2,35,2,11
	.byte	'HLTCLR',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	455
	.byte	7,0,2,35,3,0
.L118:
	.byte	12,14,204,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16268
	.byte	4,2,35,0,0,18,128,4
	.word	16559
	.byte	19,127,0,10
	.byte	'_Ifx_DMA_CH_RDCRCR_Bits',0,14,173,1,16,4,11
	.byte	'RDCRC',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,14,180,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16609
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH_SDCRCR_Bits',0,14,185,1,16,4,11
	.byte	'SDCRC',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,14,196,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16697
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH_SADR_Bits',0,14,179,1,16,4,11
	.byte	'SADR',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,14,188,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16785
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH_DADR_Bits',0,14,167,1,16,4,11
	.byte	'DADR',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,14,172,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16870
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH_ADICR_Bits',0,14,111,16,4,11
	.byte	'SMF',0,1
	.word	455
	.byte	3,5,2,35,0,11
	.byte	'INCS',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'DMF',0,1
	.word	455
	.byte	3,1,2,35,0,11
	.byte	'INCD',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'CBLS',0,1
	.word	455
	.byte	4,4,2,35,1,11
	.byte	'CBLD',0,1
	.word	455
	.byte	4,0,2,35,1,11
	.byte	'SHCT',0,1
	.word	455
	.byte	4,4,2,35,2,11
	.byte	'SCBE',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'DCBE',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'STAMP',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'WRPSE',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'WRPDE',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'INTCT',0,1
	.word	455
	.byte	2,4,2,35,3,11
	.byte	'IRDV',0,1
	.word	455
	.byte	4,0,2,35,3,0
.L167:
	.byte	12,14,148,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16955
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH_CHCFGR_Bits',0,14,131,1,16,4,11
	.byte	'TREL',0,2
	.word	1022
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,1
	.word	455
	.byte	2,0,2,35,1,11
	.byte	'BLKM',0,1
	.word	455
	.byte	3,5,2,35,2,11
	.byte	'RROAT',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'CHMODE',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'CHDW',0,1
	.word	455
	.byte	3,0,2,35,2,11
	.byte	'PATSEL',0,1
	.word	455
	.byte	3,5,2,35,3,11
	.byte	'SWAP',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'PRSEL',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	455
	.byte	3,0,2,35,3,0
.L164:
	.byte	12,14,156,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17273
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH_SHADR_Bits',0,14,191,1,16,4,11
	.byte	'SHADR',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,14,204,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17524
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH_CHCSR_Bits',0,14,146,1,16,4,11
	.byte	'TCOUNT',0,2
	.word	1022
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'LXO',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'WRPS',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'WRPD',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'ICH',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'IPM',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	455
	.byte	2,2,2,35,2,11
	.byte	'BUFFER',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'FROZEN',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'SWB',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'CWRP',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'CICH',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'SIT',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	455
	.byte	3,1,2,35,3,11
	.byte	'SCH',0,1
	.word	455
	.byte	1,0,2,35,3,0,12,14,164,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17611
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH',0,14,152,7,25,32,13
	.byte	'RDCRCR',0
	.word	16657
	.byte	4,2,35,0,13
	.byte	'SDCRCR',0
	.word	16745
	.byte	4,2,35,4,13
	.byte	'SADR',0
	.word	16830
	.byte	4,2,35,8,13
	.byte	'DADR',0
	.word	16915
	.byte	4,2,35,12,13
	.byte	'ADICR',0
	.word	17233
	.byte	4,2,35,16,13
	.byte	'CHCFGR',0
	.word	17484
	.byte	4,2,35,20,13
	.byte	'SHADR',0
	.word	17571
	.byte	4,2,35,24,13
	.byte	'CHCSR',0
	.word	17918
	.byte	4,2,35,28,0,18,128,32
	.word	17958
	.byte	19,127,0,14
	.word	18098
	.byte	18,128,32
	.word	455
	.byte	19,255,31,0,10
	.byte	'_Ifx_DMA',0,14,177,7,25,128,128,1,13
	.byte	'CLC',0
	.word	10610
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	3733
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	10735
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	10775
	.byte	52,2,35,12,13
	.byte	'ACCEN',0
	.word	11521
	.byte	32,2,35,64,13
	.byte	'reserved_60',0
	.word	11526
	.byte	192,1,2,35,96,13
	.byte	'ME0',0
	.word	15143
	.byte	128,1,3,35,160,2,13
	.byte	'reserved_1A0',0
	.word	15148
	.byte	128,31,3,35,160,3,13
	.byte	'ME1',0
	.word	15159
	.byte	128,1,3,35,160,34,13
	.byte	'reserved_11A0',0
	.word	15164
	.byte	96,3,35,160,35,13
	.byte	'OTSS',0
	.word	15272
	.byte	4,3,35,128,36,13
	.byte	'reserved_1204',0
	.word	3733
	.byte	4,3,35,132,36,13
	.byte	'PRR0',0
	.word	15406
	.byte	4,3,35,136,36,13
	.byte	'PRR1',0
	.word	15540
	.byte	4,3,35,140,36,13
	.byte	'TIME',0
	.word	15623
	.byte	4,3,35,144,36,13
	.byte	'reserved_1214',0
	.word	15663
	.byte	236,1,3,35,148,36,13
	.byte	'MODE',0
	.word	15778
	.byte	16,3,35,128,38,13
	.byte	'reserved_1310',0
	.word	15787
	.byte	16,3,35,144,38,13
	.byte	'ERRINTR',0
	.word	15902
	.byte	16,3,35,160,38,13
	.byte	'reserved_1330',0
	.word	15911
	.byte	208,9,3,35,176,38,13
	.byte	'HRR',0
	.word	16024
	.byte	128,4,3,35,128,48,13
	.byte	'SUSENR',0
	.word	16141
	.byte	128,4,3,35,128,52,13
	.byte	'SUSACR',0
	.word	16258
	.byte	128,4,3,35,128,56,13
	.byte	'TSR',0
	.word	16599
	.byte	128,4,3,35,128,60,13
	.byte	'CH',0
	.word	18108
	.byte	128,32,3,35,128,64,13
	.byte	'reserved_3000',0
	.word	18113
	.byte	128,32,3,35,128,96,0,14
	.word	18124
.L81:
	.byte	3
	.word	18618
.L85:
	.byte	15,15,102,9,1,16
	.byte	'IfxDma_ChannelId_none',0,127,16
	.byte	'IfxDma_ChannelId_0',0,0,16
	.byte	'IfxDma_ChannelId_1',0,1,16
	.byte	'IfxDma_ChannelId_2',0,2,16
	.byte	'IfxDma_ChannelId_3',0,3,16
	.byte	'IfxDma_ChannelId_4',0,4,16
	.byte	'IfxDma_ChannelId_5',0,5,16
	.byte	'IfxDma_ChannelId_6',0,6,16
	.byte	'IfxDma_ChannelId_7',0,7,16
	.byte	'IfxDma_ChannelId_8',0,8,16
	.byte	'IfxDma_ChannelId_9',0,9,16
	.byte	'IfxDma_ChannelId_10',0,10,16
	.byte	'IfxDma_ChannelId_11',0,11,16
	.byte	'IfxDma_ChannelId_12',0,12,16
	.byte	'IfxDma_ChannelId_13',0,13,16
	.byte	'IfxDma_ChannelId_14',0,14,16
	.byte	'IfxDma_ChannelId_15',0,15,16
	.byte	'IfxDma_ChannelId_16',0,16,16
	.byte	'IfxDma_ChannelId_17',0,17,16
	.byte	'IfxDma_ChannelId_18',0,18,16
	.byte	'IfxDma_ChannelId_19',0,19,16
	.byte	'IfxDma_ChannelId_20',0,20,16
	.byte	'IfxDma_ChannelId_21',0,21,16
	.byte	'IfxDma_ChannelId_22',0,22,16
	.byte	'IfxDma_ChannelId_23',0,23,16
	.byte	'IfxDma_ChannelId_24',0,24,16
	.byte	'IfxDma_ChannelId_25',0,25,16
	.byte	'IfxDma_ChannelId_26',0,26,16
	.byte	'IfxDma_ChannelId_27',0,27,16
	.byte	'IfxDma_ChannelId_28',0,28,16
	.byte	'IfxDma_ChannelId_29',0,29,16
	.byte	'IfxDma_ChannelId_30',0,30,16
	.byte	'IfxDma_ChannelId_31',0,31,16
	.byte	'IfxDma_ChannelId_32',0,32,16
	.byte	'IfxDma_ChannelId_33',0,33,16
	.byte	'IfxDma_ChannelId_34',0,34,16
	.byte	'IfxDma_ChannelId_35',0,35,16
	.byte	'IfxDma_ChannelId_36',0,36,16
	.byte	'IfxDma_ChannelId_37',0,37,16
	.byte	'IfxDma_ChannelId_38',0,38,16
	.byte	'IfxDma_ChannelId_39',0,39,16
	.byte	'IfxDma_ChannelId_40',0,40,16
	.byte	'IfxDma_ChannelId_41',0,41,16
	.byte	'IfxDma_ChannelId_42',0,42,16
	.byte	'IfxDma_ChannelId_43',0,43,16
	.byte	'IfxDma_ChannelId_44',0,44,16
	.byte	'IfxDma_ChannelId_45',0,45,16
	.byte	'IfxDma_ChannelId_46',0,46,16
	.byte	'IfxDma_ChannelId_47',0,47,16
	.byte	'IfxDma_ChannelId_48',0,48,16
	.byte	'IfxDma_ChannelId_49',0,49,16
	.byte	'IfxDma_ChannelId_50',0,50,16
	.byte	'IfxDma_ChannelId_51',0,51,16
	.byte	'IfxDma_ChannelId_52',0,52,16
	.byte	'IfxDma_ChannelId_53',0,53,16
	.byte	'IfxDma_ChannelId_54',0,54,16
	.byte	'IfxDma_ChannelId_55',0,55,16
	.byte	'IfxDma_ChannelId_56',0,56,16
	.byte	'IfxDma_ChannelId_57',0,57,16
	.byte	'IfxDma_ChannelId_58',0,58,16
	.byte	'IfxDma_ChannelId_59',0,59,16
	.byte	'IfxDma_ChannelId_60',0,60,16
	.byte	'IfxDma_ChannelId_61',0,61,16
	.byte	'IfxDma_ChannelId_62',0,62,16
	.byte	'IfxDma_ChannelId_63',0,63,16
	.byte	'IfxDma_ChannelId_64',0,192,0,16
	.byte	'IfxDma_ChannelId_65',0,193,0,16
	.byte	'IfxDma_ChannelId_66',0,194,0,16
	.byte	'IfxDma_ChannelId_67',0,195,0,16
	.byte	'IfxDma_ChannelId_68',0,196,0,16
	.byte	'IfxDma_ChannelId_69',0,197,0,16
	.byte	'IfxDma_ChannelId_70',0,198,0,16
	.byte	'IfxDma_ChannelId_71',0,199,0,16
	.byte	'IfxDma_ChannelId_72',0,200,0,16
	.byte	'IfxDma_ChannelId_73',0,201,0,16
	.byte	'IfxDma_ChannelId_74',0,202,0,16
	.byte	'IfxDma_ChannelId_75',0,203,0,16
	.byte	'IfxDma_ChannelId_76',0,204,0,16
	.byte	'IfxDma_ChannelId_77',0,205,0,16
	.byte	'IfxDma_ChannelId_78',0,206,0,16
	.byte	'IfxDma_ChannelId_79',0,207,0,16
	.byte	'IfxDma_ChannelId_80',0,208,0,16
	.byte	'IfxDma_ChannelId_81',0,209,0,16
	.byte	'IfxDma_ChannelId_82',0,210,0,16
	.byte	'IfxDma_ChannelId_83',0,211,0,16
	.byte	'IfxDma_ChannelId_84',0,212,0,16
	.byte	'IfxDma_ChannelId_85',0,213,0,16
	.byte	'IfxDma_ChannelId_86',0,214,0,16
	.byte	'IfxDma_ChannelId_87',0,215,0,16
	.byte	'IfxDma_ChannelId_88',0,216,0,16
	.byte	'IfxDma_ChannelId_89',0,217,0,16
	.byte	'IfxDma_ChannelId_90',0,218,0,16
	.byte	'IfxDma_ChannelId_91',0,219,0,16
	.byte	'IfxDma_ChannelId_92',0,220,0,16
	.byte	'IfxDma_ChannelId_93',0,221,0,16
	.byte	'IfxDma_ChannelId_94',0,222,0,16
	.byte	'IfxDma_ChannelId_95',0,223,0,16
	.byte	'IfxDma_ChannelId_96',0,224,0,16
	.byte	'IfxDma_ChannelId_97',0,225,0,16
	.byte	'IfxDma_ChannelId_98',0,226,0,16
	.byte	'IfxDma_ChannelId_99',0,227,0,16
	.byte	'IfxDma_ChannelId_100',0,228,0,16
	.byte	'IfxDma_ChannelId_101',0,229,0,16
	.byte	'IfxDma_ChannelId_102',0,230,0,16
	.byte	'IfxDma_ChannelId_103',0,231,0,16
	.byte	'IfxDma_ChannelId_104',0,232,0,16
	.byte	'IfxDma_ChannelId_105',0,233,0,16
	.byte	'IfxDma_ChannelId_106',0,234,0,16
	.byte	'IfxDma_ChannelId_107',0,235,0,16
	.byte	'IfxDma_ChannelId_108',0,236,0,16
	.byte	'IfxDma_ChannelId_109',0,237,0,16
	.byte	'IfxDma_ChannelId_110',0,238,0,16
	.byte	'IfxDma_ChannelId_111',0,239,0,16
	.byte	'IfxDma_ChannelId_112',0,240,0,16
	.byte	'IfxDma_ChannelId_113',0,241,0,16
	.byte	'IfxDma_ChannelId_114',0,242,0,16
	.byte	'IfxDma_ChannelId_115',0,243,0,16
	.byte	'IfxDma_ChannelId_116',0,244,0,16
	.byte	'IfxDma_ChannelId_117',0,245,0,16
	.byte	'IfxDma_ChannelId_118',0,246,0,16
	.byte	'IfxDma_ChannelId_119',0,247,0,16
	.byte	'IfxDma_ChannelId_120',0,248,0,16
	.byte	'IfxDma_ChannelId_121',0,249,0,16
	.byte	'IfxDma_ChannelId_122',0,250,0,16
	.byte	'IfxDma_ChannelId_123',0,251,0,16
	.byte	'IfxDma_ChannelId_124',0,252,0,16
	.byte	'IfxDma_ChannelId_125',0,253,0,16
	.byte	'IfxDma_ChannelId_126',0,254,0,16
	.byte	'IfxDma_ChannelId_127',0,255,0,0,8
	.byte	'IfxDma_isChannelReset',0,3,13,147,12,20
	.word	455
	.byte	1,1,5
	.byte	'dma',0,13,147,12,51
	.word	18623
	.byte	5
	.byte	'channelId',0,13,147,12,73
	.word	18628
	.byte	6,0
.L95:
	.byte	4
	.byte	'IfxDma_resetChannel',0,3,13,171,12,17,1,1
.L97:
	.byte	5
	.byte	'dma',0,13,171,12,46
	.word	18623
.L99:
	.byte	5
	.byte	'channelId',0,13,171,12,68
	.word	18628
.L101:
	.byte	6,0
.L88:
	.byte	4
	.byte	'IfxDma_disableChannelTransaction',0,3,13,155,10,17,1,1
.L90:
	.byte	5
	.byte	'dma',0,13,155,10,59
	.word	18623
.L92:
	.byte	5
	.byte	'channelId',0,13,155,10,81
	.word	18628
.L94:
	.byte	6,0,8
	.byte	'IfxDma_isChannelTransactionEnabled',0,3,13,153,12,20
	.word	455
	.byte	1,1,5
	.byte	'dma',0,13,153,12,64
	.word	18623
	.byte	5
	.byte	'channelId',0,13,153,12,86
	.word	18628
	.byte	6,0,8
	.byte	'IfxDma_isChannelTransactionPending',0,3,13,159,12,20
	.word	455
	.byte	1,1,5
	.byte	'dma',0,13,159,12,64
	.word	18623
	.byte	5
	.byte	'channelId',0,13,159,12,86
	.word	18628
	.byte	6,0,4
	.byte	'IfxDma_startChannelTransaction',0,3,13,158,13,17,1,1,5
	.byte	'dma',0,13,158,13,57
	.word	18623
	.byte	5
	.byte	'channelId',0,13,158,13,79
	.word	18628
	.byte	6,0,4
	.byte	'IfxDma_setChannelDestinationAddress',0,3,13,189,12,17,1,1,5
	.byte	'dma',0,13,189,12,62
	.word	18623
	.byte	5
	.byte	'channelId',0,13,189,12,84
	.word	18628
	.byte	5
	.byte	'address',0,13,189,12,101
	.word	346
	.byte	6,0,20
	.word	340
	.byte	3
	.word	22091
	.byte	4
	.byte	'IfxDma_setChannelSourceAddress',0,3,13,248,12,17,1,1,5
	.byte	'dma',0,13,248,12,57
	.word	18623
	.byte	5
	.byte	'channelId',0,13,248,12,79
	.word	18628
	.byte	5
	.byte	'address',0,13,248,12,102
	.word	22096
	.byte	6,0,4
	.byte	'IfxDma_setChannelTransferCount',0,3,13,143,13,17,1,1,5
	.byte	'dma',0,13,143,13,57
	.word	18623
	.byte	5
	.byte	'channelId',0,13,143,13,79
	.word	18628
	.byte	5
	.byte	'transferCount',0,13,143,13,97
	.word	2495
	.byte	6,0,4
	.byte	'IfxDma_clearChannelInterrupt',0,3,13,252,9,17,1,1,5
	.byte	'dma',0,13,252,9,55
	.word	18623
	.byte	5
	.byte	'channelId',0,13,252,9,77
	.word	18628
	.byte	6,0,8
	.byte	'IfxDma_getAndClearChannelInterrupt',0,3,13,237,10,20
	.word	455
	.byte	1,1,5
	.byte	'dma',0,13,237,10,64
	.word	18623
	.byte	5
	.byte	'channelId',0,13,237,10,86
	.word	18628
	.byte	6,0,8
	.byte	'IfxDma_getChannelInterrupt',0,3,13,181,11,20
	.word	455
	.byte	1,1,5
	.byte	'dma',0,13,181,11,56
	.word	18623
	.byte	5
	.byte	'channelId',0,13,181,11,78
	.word	18628
	.byte	6,0
.L121:
	.byte	8
	.byte	'IfxDma_getSrcPointer',0,3,13,133,12,35
	.word	806
	.byte	1,1
.L123:
	.byte	5
	.byte	'dma',0,13,133,12,65
	.word	18623
.L125:
	.byte	5
	.byte	'channelId',0,13,133,12,87
	.word	18628
.L127:
	.byte	6,0,20
	.word	448
	.byte	21
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,22
	.word	22579
	.byte	0,14
	.word	432
	.byte	3
	.word	432
	.byte	23
	.byte	'__cmpswapw',0
	.word	22621
	.byte	1,1,1,1,24
	.byte	'p',0
	.word	22626
	.byte	24
	.byte	'value',0
	.word	432
	.byte	24
	.byte	'compare',0
	.word	432
	.byte	0,25
	.word	176
	.byte	26
	.word	202
	.byte	6,0,25
	.word	237
	.byte	26
	.word	269
	.byte	6,0,25
	.word	282
	.byte	6,0,25
	.word	351
	.byte	26
	.word	370
	.byte	6,0,25
	.word	386
	.byte	26
	.word	401
	.byte	26
	.word	415
	.byte	6,0,25
	.word	811
	.byte	26
	.word	839
	.byte	6,0,25
	.word	854
	.byte	26
	.word	876
	.byte	6,0,25
	.word	1044
	.byte	26
	.word	1064
	.byte	26
	.word	1077
	.byte	26
	.word	1099
	.byte	17,27
	.word	811
	.byte	26
	.word	839
	.byte	28
	.word	852
	.byte	0,6,0,0,25
	.word	1843
	.byte	26
	.word	1883
	.byte	26
	.word	1901
	.byte	6,0,25
	.word	1921
	.byte	26
	.word	1964
	.byte	6,0,25
	.word	1984
	.byte	26
	.word	2022
	.byte	26
	.word	2040
	.byte	6,0,25
	.word	2060
	.byte	26
	.word	2101
	.byte	6,0,25
	.word	2121
	.byte	26
	.word	2172
	.byte	6,0,25
	.word	2192
	.byte	6,0,25
	.word	2419
	.byte	6,0,25
	.word	2453
	.byte	6,0,25
	.word	2516
	.byte	26
	.word	2557
	.byte	6,0,25
	.word	2576
	.byte	26
	.word	2631
	.byte	6,0,25
	.word	2650
	.byte	26
	.word	2690
	.byte	26
	.word	2707
	.byte	17,6,0,0,25
	.word	10331
	.byte	26
	.word	10359
	.byte	26
	.word	10373
	.byte	26
	.word	10391
	.byte	6,0,25
	.word	10409
	.byte	26
	.word	10432
	.byte	17,27
	.word	10453
	.byte	28
	.word	10491
	.byte	0,6,0,0,25
	.word	10453
	.byte	6,0,25
	.word	21556
	.byte	26
	.word	21590
	.byte	26
	.word	21603
	.byte	6,0,25
	.word	21624
	.byte	26
	.word	21652
	.byte	26
	.word	21665
	.byte	6,0,25
	.word	21686
	.byte	26
	.word	21727
	.byte	26
	.word	21740
	.byte	6,0,25
	.word	21761
	.byte	26
	.word	21808
	.byte	26
	.word	21821
	.byte	6,0,25
	.word	21842
	.byte	26
	.word	21889
	.byte	26
	.word	21902
	.byte	6,0,25
	.word	21923
	.byte	26
	.word	21962
	.byte	26
	.word	21975
	.byte	6,0,25
	.word	21996
	.byte	26
	.word	22040
	.byte	26
	.word	22053
	.byte	26
	.word	22072
	.byte	6,0,25
	.word	22101
	.byte	26
	.word	22140
	.byte	26
	.word	22153
	.byte	26
	.word	22172
	.byte	6,0,25
	.word	22191
	.byte	26
	.word	22230
	.byte	26
	.word	22243
	.byte	26
	.word	22262
	.byte	6,0,25
	.word	22287
	.byte	26
	.word	22324
	.byte	26
	.word	22337
	.byte	6,0,25
	.word	22358
	.byte	26
	.word	22405
	.byte	26
	.word	22418
	.byte	6,0,25
	.word	22439
	.byte	26
	.word	22478
	.byte	26
	.word	22491
	.byte	6,0,25
	.word	22512
	.byte	26
	.word	22545
	.byte	26
	.word	22558
	.byte	6,0,29,16,204,3,9,4,13
	.byte	'dma',0
	.word	18623
	.byte	4,2,35,0,0
.L79:
	.byte	3
	.word	23231
	.byte	29,16,136,4,9,4,13
	.byte	'dma',0
	.word	18623
	.byte	4,2,35,0,0,20
	.word	23256
.L104:
	.byte	3
	.word	23276
.L107:
	.byte	3
	.word	23256
	.byte	14
	.word	17958
.L160:
	.byte	3
	.word	23291
	.byte	29,16,215,3,9,12,13
	.byte	'dma',0
	.word	18623
	.byte	4,2,35,0,13
	.byte	'channelId',0
	.word	18628
	.byte	1,2,35,4,13
	.byte	'channel',0
	.word	23296
	.byte	4,2,35,8,0
.L111:
	.byte	3
	.word	23301
	.byte	15,13,157,1,9,1,16
	.byte	'IfxDma_ChannelMove_1',0,0,16
	.byte	'IfxDma_ChannelMove_2',0,1,16
	.byte	'IfxDma_ChannelMove_4',0,2,16
	.byte	'IfxDma_ChannelMove_8',0,3,16
	.byte	'IfxDma_ChannelMove_16',0,4,16
	.byte	'IfxDma_ChannelMove_3',0,5,16
	.byte	'IfxDma_ChannelMove_5',0,6,16
	.byte	'IfxDma_ChannelMove_9',0,7,0,15,13,218,1,9,1,16
	.byte	'IfxDma_ChannelRequestMode_oneTransferPerRequest',0,0,16
	.byte	'IfxDma_ChannelRequestMode_completeTransactionPerRequest',0,1,0,15,13,185,1,9,1,16
	.byte	'IfxDma_ChannelOperationMode_single',0,0,16
	.byte	'IfxDma_ChannelOperationMode_continuous',0,1,0,15,13,172,1,9,1,16
	.byte	'IfxDma_ChannelMoveSize_8bit',0,0,16
	.byte	'IfxDma_ChannelMoveSize_16bit',0,1,16
	.byte	'IfxDma_ChannelMoveSize_32bit',0,2,16
	.byte	'IfxDma_ChannelMoveSize_64bit',0,3,16
	.byte	'IfxDma_ChannelMoveSize_128bit',0,4,16
	.byte	'IfxDma_ChannelMoveSize_256bit',0,5,0,15,13,194,1,9,1,16
	.byte	'IfxDma_ChannelPattern_0_disable',0,0,16
	.byte	'IfxDma_ChannelPattern_0_mode1',0,1,16
	.byte	'IfxDma_ChannelPattern_0_mode2',0,2,16
	.byte	'IfxDma_ChannelPattern_0_mode3',0,3,16
	.byte	'IfxDma_ChannelPattern_1_disable',0,4,16
	.byte	'IfxDma_ChannelPattern_1_mode1',0,5,16
	.byte	'IfxDma_ChannelPattern_1_mode2',0,6,16
	.byte	'IfxDma_ChannelPattern_1_mode3',0,7,0,15,13,227,1,9,1,16
	.byte	'IfxDma_ChannelRequestSource_peripheral',0,0,16
	.byte	'IfxDma_ChannelRequestSource_daisyChain',0,1,0,15,13,91,9,1,16
	.byte	'IfxDma_ChannelBusPriority_low',0,0,16
	.byte	'IfxDma_ChannelBusPriority_medium',0,1,16
	.byte	'IfxDma_ChannelBusPriority_high',0,2,0,15,13,133,1,9,1,16
	.byte	'IfxDma_ChannelIncrementStep_1',0,0,16
	.byte	'IfxDma_ChannelIncrementStep_2',0,1,16
	.byte	'IfxDma_ChannelIncrementStep_4',0,2,16
	.byte	'IfxDma_ChannelIncrementStep_8',0,3,16
	.byte	'IfxDma_ChannelIncrementStep_16',0,4,16
	.byte	'IfxDma_ChannelIncrementStep_32',0,5,16
	.byte	'IfxDma_ChannelIncrementStep_64',0,6,16
	.byte	'IfxDma_ChannelIncrementStep_128',0,7,0,15,13,124,9,1,16
	.byte	'IfxDma_ChannelIncrementDirection_negative',0,0,16
	.byte	'IfxDma_ChannelIncrementDirection_positive',0,1,0,15,13,101,9,1,16
	.byte	'IfxDma_ChannelIncrementCircular_none',0,0,16
	.byte	'IfxDma_ChannelIncrementCircular_2',0,1,16
	.byte	'IfxDma_ChannelIncrementCircular_4',0,2,16
	.byte	'IfxDma_ChannelIncrementCircular_8',0,3,16
	.byte	'IfxDma_ChannelIncrementCircular_16',0,4,16
	.byte	'IfxDma_ChannelIncrementCircular_32',0,5,16
	.byte	'IfxDma_ChannelIncrementCircular_64',0,6,16
	.byte	'IfxDma_ChannelIncrementCircular_128',0,7,16
	.byte	'IfxDma_ChannelIncrementCircular_256',0,8,16
	.byte	'IfxDma_ChannelIncrementCircular_512',0,9,16
	.byte	'IfxDma_ChannelIncrementCircular_1024',0,10,16
	.byte	'IfxDma_ChannelIncrementCircular_2048',0,11,16
	.byte	'IfxDma_ChannelIncrementCircular_4096',0,12,16
	.byte	'IfxDma_ChannelIncrementCircular_8192',0,13,16
	.byte	'IfxDma_ChannelIncrementCircular_16384',0,14,16
	.byte	'IfxDma_ChannelIncrementCircular_32768',0,15,0,15,13,236,1,9,1,16
	.byte	'IfxDma_ChannelShadow_none',0,0,16
	.byte	'IfxDma_ChannelShadow_src',0,1,16
	.byte	'IfxDma_ChannelShadow_dst',0,2,16
	.byte	'IfxDma_ChannelShadow_srcDirectWrite',0,5,16
	.byte	'IfxDma_ChannelShadow_dstDirectWrite',0,6,16
	.byte	'IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch',0,8,16
	.byte	'IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch',0,9,16
	.byte	'IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch',0,10,16
	.byte	'IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch',0,11,16
	.byte	'IfxDma_ChannelShadow_linkedList',0,12,16
	.byte	'IfxDma_ChannelShadow_accumulatedLinkedList',0,13,16
	.byte	'IfxDma_ChannelShadow_safeLinkedList',0,14,16
	.byte	'IfxDma_ChannelShadow_conditionalLinkedList',0,15,0,15,13,148,1,9,1,16
	.byte	'IfxDma_ChannelInterruptControl_thresholdLimitMatch',0,0,16
	.byte	'IfxDma_ChannelInterruptControl_transferCountDecremented',0,1,0,29,16,224,3,9,56,13
	.byte	'module',0
	.word	23251
	.byte	4,2,35,0,13
	.byte	'channelId',0
	.word	18628
	.byte	1,2,35,4,13
	.byte	'sourceAddress',0
	.word	2495
	.byte	4,2,35,6,13
	.byte	'destinationAddress',0
	.word	2495
	.byte	4,2,35,10,13
	.byte	'shadowAddress',0
	.word	2495
	.byte	4,2,35,14,13
	.byte	'readDataCrc',0
	.word	2495
	.byte	4,2,35,18,13
	.byte	'sourceDestinationAddressCrc',0
	.word	2495
	.byte	4,2,35,22,13
	.byte	'transferCount',0
	.word	1022
	.byte	2,2,35,26,13
	.byte	'blockMode',0
	.word	23362
	.byte	1,2,35,28,13
	.byte	'requestMode',0
	.word	23554
	.byte	1,2,35,29,13
	.byte	'operationMode',0
	.word	23669
	.byte	1,2,35,30,13
	.byte	'moveSize',0
	.word	23754
	.byte	1,2,35,31,13
	.byte	'pattern',0
	.word	23948
	.byte	1,2,35,32,13
	.byte	'requestSource',0
	.word	24215
	.byte	1,2,35,33,13
	.byte	'busPriority',0
	.word	24304
	.byte	1,2,35,34,13
	.byte	'hardwareRequestEnabled',0
	.word	455
	.byte	1,2,35,35,13
	.byte	'sourceAddressIncrementStep',0
	.word	24410
	.byte	1,2,35,36,13
	.byte	'sourceAddressIncrementDirection',0
	.word	24678
	.byte	1,2,35,37,13
	.byte	'sourceAddressCircularRange',0
	.word	24772
	.byte	1,2,35,38,13
	.byte	'destinationAddressIncrementStep',0
	.word	24410
	.byte	1,2,35,39,13
	.byte	'destinationAddressIncrementDirection',0
	.word	24678
	.byte	1,2,35,40,13
	.byte	'destinationAddressCircularRange',0
	.word	24772
	.byte	1,2,35,41,13
	.byte	'shadowControl',0
	.word	25386
	.byte	1,2,35,42,13
	.byte	'sourceCircularBufferEnabled',0
	.word	455
	.byte	1,2,35,43,13
	.byte	'destinationCircularBufferEnabled',0
	.word	455
	.byte	1,2,35,44,13
	.byte	'timestampEnabled',0
	.word	455
	.byte	1,2,35,45,13
	.byte	'wrapSourceInterruptEnabled',0
	.word	455
	.byte	1,2,35,46,13
	.byte	'wrapDestinationInterruptEnabled',0
	.word	455
	.byte	1,2,35,47,13
	.byte	'channelInterruptEnabled',0
	.word	455
	.byte	1,2,35,48,13
	.byte	'channelInterruptControl',0
	.word	25939
	.byte	1,2,35,49,13
	.byte	'interruptRaiseThreshold',0
	.word	455
	.byte	1,2,35,50,13
	.byte	'transactionRequestLostInterruptEnabled',0
	.word	455
	.byte	1,2,35,51,13
	.byte	'channelInterruptPriority',0
	.word	1022
	.byte	2,2,35,52,13
	.byte	'channelInterruptTypeOfService',0
	.word	891
	.byte	1,2,35,54,0,20
	.word	26057
.L113:
	.byte	3
	.word	27094
.L152:
	.byte	3
	.word	26057
	.byte	7
	.byte	'short int',0,2,5,30
	.byte	'__wchar_t',0,17,1,1
	.word	27109
	.byte	30
	.byte	'__size_t',0,17,1,1
	.word	432
	.byte	30
	.byte	'__ptrdiff_t',0,17,1,1
	.word	448
	.byte	31,1,3
	.word	27177
	.byte	30
	.byte	'__codeptr',0,17,1,1
	.word	27179
	.byte	30
	.byte	'boolean',0,18,104,29
	.word	455
	.byte	30
	.byte	'uint8',0,18,108,29
	.word	455
	.byte	30
	.byte	'uint16',0,18,112,29
	.word	1022
	.byte	30
	.byte	'uint32',0,18,116,29
	.word	2495
	.byte	30
	.byte	'uint64',0,18,121,29
	.word	314
	.byte	30
	.byte	'sint16',0,18,129,1,29
	.word	27109
	.byte	7
	.byte	'long int',0,4,5,30
	.byte	'sint32',0,18,134,1,29
	.word	27293
	.byte	7
	.byte	'long long int',0,8,5,30
	.byte	'sint64',0,18,141,1,29
	.word	27321
	.byte	30
	.byte	'float32',0,18,170,1,29
	.word	228
	.byte	30
	.byte	'pvoid',0,19,54,28
	.word	346
	.byte	30
	.byte	'Ifx_TickTime',0,19,76,28
	.word	27321
	.byte	30
	.byte	'Ifx_Priority',0,19,100,16
	.word	1022
	.byte	15,19,127,9,1,16
	.byte	'Ifx_RxSel_a',0,0,16
	.byte	'Ifx_RxSel_b',0,1,16
	.byte	'Ifx_RxSel_c',0,2,16
	.byte	'Ifx_RxSel_d',0,3,16
	.byte	'Ifx_RxSel_e',0,4,16
	.byte	'Ifx_RxSel_f',0,5,16
	.byte	'Ifx_RxSel_g',0,6,16
	.byte	'Ifx_RxSel_h',0,7,0,30
	.byte	'Ifx_RxSel',0,19,137,1,3
	.word	27427
	.byte	30
	.byte	'IfxDma_ChannelId',0,15,233,1,3
	.word	18628
	.byte	30
	.byte	'Ifx_UReg_8Bit',0,20,96,24
	.word	455
	.byte	30
	.byte	'Ifx_UReg_32Bit',0,20,98,24
	.word	432
	.byte	30
	.byte	'Ifx_SReg_32Bit',0,20,101,24
	.word	448
	.byte	30
	.byte	'Ifx_DMA_ACCEN_ACCENR0_Bits',0,14,102,3
	.word	10784
	.byte	30
	.byte	'Ifx_DMA_ACCEN_ACCENR1_Bits',0,14,108,3
	.word	11360
	.byte	30
	.byte	'Ifx_DMA_CH_ADICR_Bits',0,14,128,1,3
	.word	16955
	.byte	30
	.byte	'Ifx_DMA_CH_CHCFGR_Bits',0,14,143,1,3
	.word	17273
	.byte	30
	.byte	'Ifx_DMA_CH_CHCSR_Bits',0,14,164,1,3
	.word	17611
	.byte	30
	.byte	'Ifx_DMA_CH_DADR_Bits',0,14,170,1,3
	.word	16870
	.byte	30
	.byte	'Ifx_DMA_CH_RDCRCR_Bits',0,14,176,1,3
	.word	16609
	.byte	30
	.byte	'Ifx_DMA_CH_SADR_Bits',0,14,182,1,3
	.word	16785
	.byte	30
	.byte	'Ifx_DMA_CH_SDCRCR_Bits',0,14,188,1,3
	.word	16697
	.byte	30
	.byte	'Ifx_DMA_CH_SHADR_Bits',0,14,194,1,3
	.word	17524
	.byte	30
	.byte	'Ifx_DMA_CLC_Bits',0,14,204,1,3
	.word	10493
	.byte	30
	.byte	'Ifx_DMA_ERRINTR_Bits',0,14,211,1,3
	.word	15796
	.byte	30
	.byte	'Ifx_DMA_HRR_Bits',0,14,218,1,3
	.word	15922
	.byte	30
	.byte	'Ifx_DMA_ID_Bits',0,14,226,1,3
	.word	10650
	.byte	30
	.byte	'Ifx_DMA_ME_ADICR_Bits',0,14,246,1,3
	.word	13871
	.byte	30
	.byte	'Ifx_DMA_ME_CHCR_Bits',0,14,133,2,3
	.word	14190
	.byte	30
	.byte	'Ifx_DMA_ME_CHSR_Bits',0,14,149,2,3
	.word	14526
	.byte	30
	.byte	'Ifx_DMA_ME_CLRE_Bits',0,14,165,2,3
	.word	12012
	.byte	30
	.byte	'Ifx_DMA_ME_DADR_Bits',0,14,171,2,3
	.word	13786
	.byte	30
	.byte	'Ifx_DMA_ME_EER_Bits',0,14,182,2,3
	.word	11537
	.byte	30
	.byte	'Ifx_DMA_ME_ERRSR_Bits',0,14,199,2,3
	.word	11721
	.byte	30
	.byte	'Ifx_DMA_ME_R0_Bits',0,14,208,2,3
	.word	12470
	.byte	30
	.byte	'Ifx_DMA_ME_R1_Bits',0,14,217,2,3
	.word	12601
	.byte	30
	.byte	'Ifx_DMA_ME_R2_Bits',0,14,226,2,3
	.word	12732
	.byte	30
	.byte	'Ifx_DMA_ME_R3_Bits',0,14,235,2,3
	.word	12863
	.byte	30
	.byte	'Ifx_DMA_ME_R4_Bits',0,14,244,2,3
	.word	12994
	.byte	30
	.byte	'Ifx_DMA_ME_R5_Bits',0,14,253,2,3
	.word	13125
	.byte	30
	.byte	'Ifx_DMA_ME_R6_Bits',0,14,134,3,3
	.word	13256
	.byte	30
	.byte	'Ifx_DMA_ME_R7_Bits',0,14,143,3,3
	.word	13387
	.byte	30
	.byte	'Ifx_DMA_ME_RDCRC_Bits',0,14,149,3,3
	.word	13527
	.byte	30
	.byte	'Ifx_DMA_ME_SADR_Bits',0,14,155,3,3
	.word	13701
	.byte	30
	.byte	'Ifx_DMA_ME_SDCRC_Bits',0,14,161,3,3
	.word	13614
	.byte	30
	.byte	'Ifx_DMA_ME_SHADR_Bits',0,14,167,3,3
	.word	14439
	.byte	30
	.byte	'Ifx_DMA_ME_SR_Bits',0,14,178,3,3
	.word	12294
	.byte	30
	.byte	'Ifx_DMA_MODE_Bits',0,14,185,3,3
	.word	15674
	.byte	30
	.byte	'Ifx_DMA_OTSS_Bits',0,14,194,3,3
	.word	15173
	.byte	30
	.byte	'Ifx_DMA_PRR0_Bits',0,14,203,3,3
	.word	15312
	.byte	30
	.byte	'Ifx_DMA_PRR1_Bits',0,14,212,3,3
	.word	15446
	.byte	30
	.byte	'Ifx_DMA_SUSACR_Bits',0,14,219,3,3
	.word	16151
	.byte	30
	.byte	'Ifx_DMA_SUSENR_Bits',0,14,226,3,3
	.word	16034
	.byte	30
	.byte	'Ifx_DMA_TIME_Bits',0,14,232,3,3
	.word	15580
	.byte	30
	.byte	'Ifx_DMA_TSR_Bits',0,14,252,3,3
	.word	16268
	.byte	30
	.byte	'Ifx_DMA_ACCEN_ACCENR0',0,14,137,4,3
	.word	11320
	.byte	30
	.byte	'Ifx_DMA_ACCEN_ACCENR1',0,14,145,4,3
	.word	11416
	.byte	30
	.byte	'Ifx_DMA_CH_ADICR',0,14,153,4,3
	.word	17233
	.byte	30
	.byte	'Ifx_DMA_CH_CHCFGR',0,14,161,4,3
	.word	17484
	.byte	30
	.byte	'Ifx_DMA_CH_CHCSR',0,14,169,4,3
	.word	17918
	.byte	30
	.byte	'Ifx_DMA_CH_DADR',0,14,177,4,3
	.word	16915
	.byte	30
	.byte	'Ifx_DMA_CH_RDCRCR',0,14,185,4,3
	.word	16657
	.byte	30
	.byte	'Ifx_DMA_CH_SADR',0,14,193,4,3
	.word	16830
	.byte	30
	.byte	'Ifx_DMA_CH_SDCRCR',0,14,201,4,3
	.word	16745
	.byte	30
	.byte	'Ifx_DMA_CH_SHADR',0,14,209,4,3
	.word	17571
	.byte	30
	.byte	'Ifx_DMA_CLC',0,14,217,4,3
	.word	10610
	.byte	30
	.byte	'Ifx_DMA_ERRINTR',0,14,225,4,3
	.word	15862
	.byte	30
	.byte	'Ifx_DMA_HRR',0,14,233,4,3
	.word	15984
	.byte	30
	.byte	'Ifx_DMA_ID',0,14,241,4,3
	.word	10735
	.byte	30
	.byte	'Ifx_DMA_ME_ADICR',0,14,249,4,3
	.word	14150
	.byte	30
	.byte	'Ifx_DMA_ME_CHCR',0,14,129,5,3
	.word	14399
	.byte	30
	.byte	'Ifx_DMA_ME_CHSR',0,14,137,5,3
	.word	14755
	.byte	30
	.byte	'Ifx_DMA_ME_CLRE',0,14,145,5,3
	.word	12254
	.byte	30
	.byte	'Ifx_DMA_ME_DADR',0,14,153,5,3
	.word	13831
	.byte	30
	.byte	'Ifx_DMA_ME_EER',0,14,161,5,3
	.word	11681
	.byte	30
	.byte	'Ifx_DMA_ME_ERRSR',0,14,169,5,3
	.word	11972
	.byte	30
	.byte	'Ifx_DMA_ME_R0',0,14,177,5,3
	.word	12561
	.byte	30
	.byte	'Ifx_DMA_ME_R1',0,14,185,5,3
	.word	12692
	.byte	30
	.byte	'Ifx_DMA_ME_R2',0,14,193,5,3
	.word	12823
	.byte	30
	.byte	'Ifx_DMA_ME_R3',0,14,201,5,3
	.word	12954
	.byte	30
	.byte	'Ifx_DMA_ME_R4',0,14,209,5,3
	.word	13085
	.byte	30
	.byte	'Ifx_DMA_ME_R5',0,14,217,5,3
	.word	13216
	.byte	30
	.byte	'Ifx_DMA_ME_R6',0,14,225,5,3
	.word	13347
	.byte	30
	.byte	'Ifx_DMA_ME_R7',0,14,233,5,3
	.word	13478
	.byte	30
	.byte	'Ifx_DMA_ME_RDCRC',0,14,241,5,3
	.word	13574
	.byte	30
	.byte	'Ifx_DMA_ME_SADR',0,14,249,5,3
	.word	13746
	.byte	30
	.byte	'Ifx_DMA_ME_SDCRC',0,14,129,6,3
	.word	13661
	.byte	30
	.byte	'Ifx_DMA_ME_SHADR',0,14,137,6,3
	.word	14486
	.byte	30
	.byte	'Ifx_DMA_ME_SR',0,14,145,6,3
	.word	12430
	.byte	30
	.byte	'Ifx_DMA_MODE',0,14,153,6,3
	.word	15738
	.byte	30
	.byte	'Ifx_DMA_OTSS',0,14,161,6,3
	.word	15272
	.byte	30
	.byte	'Ifx_DMA_PRR0',0,14,169,6,3
	.word	15406
	.byte	30
	.byte	'Ifx_DMA_PRR1',0,14,177,6,3
	.word	15540
	.byte	30
	.byte	'Ifx_DMA_SUSACR',0,14,185,6,3
	.word	16218
	.byte	30
	.byte	'Ifx_DMA_SUSENR',0,14,193,6,3
	.word	16101
	.byte	30
	.byte	'Ifx_DMA_TIME',0,14,201,6,3
	.word	15623
	.byte	30
	.byte	'Ifx_DMA_TSR',0,14,209,6,3
	.word	16559
	.byte	14
	.word	11456
	.byte	30
	.byte	'Ifx_DMA_ACCEN',0,14,225,6,3
	.word	29912
	.byte	14
	.word	14795
	.byte	30
	.byte	'Ifx_DMA_ME',0,14,137,7,3
	.word	29940
	.byte	14
	.word	17958
	.byte	30
	.byte	'Ifx_DMA_CH',0,14,162,7,3
	.word	29965
	.byte	14
	.word	18124
	.byte	30
	.byte	'Ifx_DMA',0,14,205,7,3
	.word	29990
	.byte	30
	.byte	'IfxSrc_Tos',0,5,75,3
	.word	891
	.byte	30
	.byte	'Ifx_SRC_SRCR_Bits',0,4,85,3
	.word	472
	.byte	30
	.byte	'Ifx_SRC_SRCR',0,4,98,3
	.word	762
	.byte	10
	.byte	'_Ifx_SRC_CPU_CPU',0,4,110,25,4,13
	.byte	'SB',0
	.word	762
	.byte	4,2,35,0,0,14
	.word	30078
	.byte	30
	.byte	'Ifx_SRC_CPU_CPU',0,4,113,3
	.word	30113
	.byte	18,24
	.word	30078
	.byte	19,5,0,14
	.word	30142
	.byte	10
	.byte	'_Ifx_SRC_CPU',0,4,128,1,25,24,13
	.byte	'CPU',0
	.word	30151
	.byte	24,2,35,0,0,14
	.word	30156
	.byte	30
	.byte	'Ifx_SRC_CPU',0,4,131,1,3
	.word	30189
	.byte	10
	.byte	'_Ifx_SRC_AGBT_AGBT',0,4,146,1,25,4,13
	.byte	'SR',0
	.word	762
	.byte	4,2,35,0,0,14
	.word	30215
	.byte	30
	.byte	'Ifx_SRC_AGBT_AGBT',0,4,149,1,3
	.word	30253
	.byte	18,4
	.word	30215
	.byte	19,0,0,14
	.word	30285
	.byte	10
	.byte	'_Ifx_SRC_AGBT',0,4,164,1,25,4,13
	.byte	'AGBT',0
	.word	30294
	.byte	4,2,35,0,0,14
	.word	30299
	.byte	30
	.byte	'Ifx_SRC_AGBT',0,4,167,1,3
	.word	30334
	.byte	10
	.byte	'_Ifx_SRC_XBAR_XBAR',0,4,182,1,25,4,13
	.byte	'SR',0
	.word	762
	.byte	4,2,35,0,0,14
	.word	30361
	.byte	30
	.byte	'Ifx_SRC_XBAR_XBAR',0,4,185,1,3
	.word	30399
	.byte	18,12
	.word	30361
	.byte	19,2,0,14
	.word	30431
	.byte	10
	.byte	'_Ifx_SRC_XBAR',0,4,200,1,25,12,13
	.byte	'XBAR',0
	.word	30440
	.byte	12,2,35,0,0,14
	.word	30445
	.byte	30
	.byte	'Ifx_SRC_XBAR',0,4,203,1,3
	.word	30480
	.byte	18,8
	.word	762
	.byte	19,1,0,10
	.byte	'_Ifx_SRC_CERBERUS_CERBERUS',0,4,218,1,25,8,13
	.byte	'SR',0
	.word	30507
	.byte	8,2,35,0,0,14
	.word	30516
	.byte	30
	.byte	'Ifx_SRC_CERBERUS_CERBERUS',0,4,221,1,3
	.word	30562
	.byte	14
	.word	30516
	.byte	10
	.byte	'_Ifx_SRC_CERBERUS',0,4,236,1,25,8,13
	.byte	'CERBERUS',0
	.word	30602
	.byte	8,2,35,0,0,14
	.word	30607
	.byte	30
	.byte	'Ifx_SRC_CERBERUS',0,4,239,1,3
	.word	30650
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN_ASCLIN',0,4,254,1,25,12,13
	.byte	'TX',0
	.word	762
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	762
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	762
	.byte	4,2,35,8,0,14
	.word	30681
	.byte	30
	.byte	'Ifx_SRC_ASCLIN_ASCLIN',0,4,131,2,3
	.word	30748
	.byte	18,144,1
	.word	30681
	.byte	19,11,0,14
	.word	30784
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN',0,4,146,2,25,144,1,13
	.byte	'ASCLIN',0
	.word	30794
	.byte	144,1,2,35,0,0,14
	.word	30799
	.byte	30
	.byte	'Ifx_SRC_ASCLIN',0,4,149,2,3
	.word	30840
	.byte	10
	.byte	'_Ifx_SRC_QSPI_QSPI',0,4,164,2,25,20,13
	.byte	'TX',0
	.word	762
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	762
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	762
	.byte	4,2,35,8,13
	.byte	'PT',0
	.word	762
	.byte	4,2,35,12,13
	.byte	'U',0
	.word	762
	.byte	4,2,35,16,0,14
	.word	30869
	.byte	30
	.byte	'Ifx_SRC_QSPI_QSPI',0,4,171,2,3
	.word	30955
	.byte	18,120
	.word	30869
	.byte	19,5,0,14
	.word	30987
	.byte	10
	.byte	'_Ifx_SRC_QSPI',0,4,186,2,25,120,13
	.byte	'QSPI',0
	.word	30996
	.byte	120,2,35,0,0,14
	.word	31001
	.byte	30
	.byte	'Ifx_SRC_QSPI',0,4,189,2,3
	.word	31036
	.byte	10
	.byte	'_Ifx_SRC_HSCT_HSCT',0,4,204,2,25,4,13
	.byte	'SR',0
	.word	762
	.byte	4,2,35,0,0,14
	.word	31063
	.byte	30
	.byte	'Ifx_SRC_HSCT_HSCT',0,4,207,2,3
	.word	31101
	.byte	18,8
	.word	31063
	.byte	19,1,0,14
	.word	31133
	.byte	10
	.byte	'_Ifx_SRC_HSCT',0,4,222,2,25,8,13
	.byte	'HSCT',0
	.word	31142
	.byte	8,2,35,0,0,14
	.word	31147
	.byte	30
	.byte	'Ifx_SRC_HSCT',0,4,225,2,3
	.word	31182
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL_CH',0,4,240,2,25,16,13
	.byte	'COK',0
	.word	762
	.byte	4,2,35,0,13
	.byte	'RDI',0
	.word	762
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	762
	.byte	4,2,35,8,13
	.byte	'TRG',0
	.word	762
	.byte	4,2,35,12,0,14
	.word	31209
	.byte	30
	.byte	'Ifx_SRC_HSSL_HSSL_CH',0,4,246,2,3
	.word	31290
	.byte	18,64
	.word	31209
	.byte	19,3,0,14
	.word	31325
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL',0,4,133,3,25,68,13
	.byte	'CH',0
	.word	31334
	.byte	64,2,35,0,13
	.byte	'EXI',0
	.word	762
	.byte	4,2,35,64,0,14
	.word	31339
	.byte	30
	.byte	'Ifx_SRC_HSSL_HSSL',0,4,137,3,3
	.word	31390
	.byte	18,136,1
	.word	31339
	.byte	19,1,0,14
	.word	31422
	.byte	10
	.byte	'_Ifx_SRC_HSSL',0,4,152,3,25,136,1,13
	.byte	'HSSL',0
	.word	31432
	.byte	136,1,2,35,0,0,14
	.word	31437
	.byte	30
	.byte	'Ifx_SRC_HSSL',0,4,155,3,3
	.word	31474
	.byte	10
	.byte	'_Ifx_SRC_I2C_I2C',0,4,170,3,25,16,13
	.byte	'DTR',0
	.word	762
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	762
	.byte	4,2,35,4,13
	.byte	'P',0
	.word	762
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	3733
	.byte	4,2,35,12,0,14
	.word	31501
	.byte	30
	.byte	'Ifx_SRC_I2C_I2C',0,4,176,3,3
	.word	31582
	.byte	18,32
	.word	31501
	.byte	19,1,0,14
	.word	31612
	.byte	10
	.byte	'_Ifx_SRC_I2C',0,4,191,3,25,32,13
	.byte	'I2C',0
	.word	31621
	.byte	32,2,35,0,0,14
	.word	31626
	.byte	30
	.byte	'Ifx_SRC_I2C',0,4,194,3,3
	.word	31659
	.byte	10
	.byte	'_Ifx_SRC_SENT_SENT',0,4,209,3,25,4,13
	.byte	'SR',0
	.word	762
	.byte	4,2,35,0,0,14
	.word	31685
	.byte	30
	.byte	'Ifx_SRC_SENT_SENT',0,4,212,3,3
	.word	31723
	.byte	18,40
	.word	31685
	.byte	19,9,0,14
	.word	31755
	.byte	10
	.byte	'_Ifx_SRC_SENT',0,4,227,3,25,40,13
	.byte	'SENT',0
	.word	31764
	.byte	40,2,35,0,0,14
	.word	31769
	.byte	30
	.byte	'Ifx_SRC_SENT',0,4,230,3,3
	.word	31804
	.byte	18,20
	.word	762
	.byte	19,4,0,10
	.byte	'_Ifx_SRC_MSC_MSC',0,4,245,3,25,20,13
	.byte	'SR',0
	.word	31831
	.byte	20,2,35,0,0,14
	.word	31840
	.byte	30
	.byte	'Ifx_SRC_MSC_MSC',0,4,248,3,3
	.word	31876
	.byte	18,80
	.word	31840
	.byte	19,3,0,14
	.word	31906
	.byte	10
	.byte	'_Ifx_SRC_MSC',0,4,135,4,25,80,13
	.byte	'MSC',0
	.word	31915
	.byte	80,2,35,0,0,14
	.word	31920
	.byte	30
	.byte	'Ifx_SRC_MSC',0,4,138,4,3
	.word	31953
	.byte	18,16
	.word	762
	.byte	19,3,0,10
	.byte	'_Ifx_SRC_CCU6_CCU',0,4,153,4,25,16,13
	.byte	'SR',0
	.word	31979
	.byte	16,2,35,0,0,14
	.word	31988
	.byte	30
	.byte	'Ifx_SRC_CCU6_CCU',0,4,156,4,3
	.word	32025
	.byte	18,32
	.word	31988
	.byte	19,1,0,14
	.word	32056
	.byte	10
	.byte	'_Ifx_SRC_CCU6',0,4,171,4,25,32,13
	.byte	'CCU',0
	.word	32065
	.byte	32,2,35,0,0,14
	.word	32070
	.byte	30
	.byte	'Ifx_SRC_CCU6',0,4,174,4,3
	.word	32104
	.byte	10
	.byte	'_Ifx_SRC_GPT12_GPT12',0,4,189,4,25,24,13
	.byte	'CIRQ',0
	.word	762
	.byte	4,2,35,0,13
	.byte	'T2',0
	.word	762
	.byte	4,2,35,4,13
	.byte	'T3',0
	.word	762
	.byte	4,2,35,8,13
	.byte	'T4',0
	.word	762
	.byte	4,2,35,12,13
	.byte	'T5',0
	.word	762
	.byte	4,2,35,16,13
	.byte	'T6',0
	.word	762
	.byte	4,2,35,20,0,14
	.word	32131
	.byte	30
	.byte	'Ifx_SRC_GPT12_GPT12',0,4,197,4,3
	.word	32233
	.byte	18,24
	.word	32131
	.byte	19,0,0,14
	.word	32267
	.byte	10
	.byte	'_Ifx_SRC_GPT12',0,4,212,4,25,24,13
	.byte	'GPT12',0
	.word	32276
	.byte	24,2,35,0,0,14
	.word	32281
	.byte	30
	.byte	'Ifx_SRC_GPT12',0,4,215,4,3
	.word	32318
	.byte	10
	.byte	'_Ifx_SRC_STM_STM',0,4,230,4,25,8,13
	.byte	'SR',0
	.word	30507
	.byte	8,2,35,0,0,14
	.word	32346
	.byte	30
	.byte	'Ifx_SRC_STM_STM',0,4,233,4,3
	.word	32382
	.byte	18,48
	.word	32346
	.byte	19,5,0,14
	.word	32412
	.byte	10
	.byte	'_Ifx_SRC_STM',0,4,248,4,25,48,13
	.byte	'STM',0
	.word	32421
	.byte	48,2,35,0,0,14
	.word	32426
	.byte	30
	.byte	'Ifx_SRC_STM',0,4,251,4,3
	.word	32459
	.byte	10
	.byte	'_Ifx_SRC_FCE_FCE0',0,4,138,5,25,4,13
	.byte	'SR',0
	.word	762
	.byte	4,2,35,0,0,14
	.word	32485
	.byte	30
	.byte	'Ifx_SRC_FCE_FCE0',0,4,141,5,3
	.word	32522
	.byte	14
	.word	32485
	.byte	10
	.byte	'_Ifx_SRC_FCE',0,4,156,5,25,4,13
	.byte	'FCE0',0
	.word	32553
	.byte	4,2,35,0,0,14
	.word	32558
	.byte	30
	.byte	'Ifx_SRC_FCE',0,4,159,5,3
	.word	32592
	.byte	18,128,4
	.word	762
	.byte	19,127,0,10
	.byte	'_Ifx_SRC_DMA_DMA',0,4,174,5,25,176,4,13
	.byte	'ERR',0
	.word	31979
	.byte	16,2,35,0,13
	.byte	'reserved_10',0
	.word	13518
	.byte	32,2,35,16,13
	.byte	'CH',0
	.word	32618
	.byte	128,4,2,35,48,0,14
	.word	32628
	.byte	30
	.byte	'Ifx_SRC_DMA_DMA',0,4,179,5,3
	.word	32700
	.byte	18,176,4
	.word	32628
	.byte	19,0,0,14
	.word	32730
	.byte	10
	.byte	'_Ifx_SRC_DMA',0,4,194,5,25,176,4,13
	.byte	'DMA',0
	.word	32740
	.byte	176,4,2,35,0,0,14
	.word	32745
	.byte	30
	.byte	'Ifx_SRC_DMA',0,4,197,5,3
	.word	32780
	.byte	10
	.byte	'_Ifx_SRC_SDMMC_SDMMC',0,4,212,5,25,8,13
	.byte	'ERR',0
	.word	762
	.byte	4,2,35,0,13
	.byte	'DMA',0
	.word	762
	.byte	4,2,35,4,0,14
	.word	32806
	.byte	30
	.byte	'Ifx_SRC_SDMMC_SDMMC',0,4,216,5,3
	.word	32860
	.byte	18,8
	.word	32806
	.byte	19,0,0,14
	.word	32894
	.byte	10
	.byte	'_Ifx_SRC_SDMMC',0,4,231,5,25,8,13
	.byte	'SDMMC',0
	.word	32903
	.byte	8,2,35,0,0,14
	.word	32908
	.byte	30
	.byte	'Ifx_SRC_SDMMC',0,4,234,5,3
	.word	32945
	.byte	18,40
	.word	762
	.byte	19,9,0,10
	.byte	'_Ifx_SRC_GETH_GETH',0,4,249,5,25,40,13
	.byte	'SR',0
	.word	32973
	.byte	40,2,35,0,0,14
	.word	32982
	.byte	30
	.byte	'Ifx_SRC_GETH_GETH',0,4,252,5,3
	.word	33020
	.byte	18,40
	.word	32982
	.byte	19,0,0,14
	.word	33052
	.byte	10
	.byte	'_Ifx_SRC_GETH',0,4,139,6,25,40,13
	.byte	'GETH',0
	.word	33061
	.byte	40,2,35,0,0,14
	.word	33066
	.byte	30
	.byte	'Ifx_SRC_GETH',0,4,142,6,3
	.word	33101
	.byte	18,64
	.word	762
	.byte	19,15,0,10
	.byte	'_Ifx_SRC_CAN_CAN',0,4,157,6,25,64,13
	.byte	'INT',0
	.word	33128
	.byte	64,2,35,0,0,14
	.word	33137
	.byte	30
	.byte	'Ifx_SRC_CAN_CAN',0,4,160,6,3
	.word	33174
	.byte	18,192,1
	.word	33137
	.byte	19,2,0,14
	.word	33204
	.byte	10
	.byte	'_Ifx_SRC_CAN',0,4,175,6,25,192,1,13
	.byte	'CAN',0
	.word	33214
	.byte	192,1,2,35,0,0,14
	.word	33219
	.byte	30
	.byte	'Ifx_SRC_CAN',0,4,178,6,3
	.word	33254
	.byte	10
	.byte	'_Ifx_SRC_VADC_G',0,4,193,6,25,16,13
	.byte	'SR0',0
	.word	762
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	762
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	762
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	762
	.byte	4,2,35,12,0,14
	.word	33280
	.byte	30
	.byte	'Ifx_SRC_VADC_G',0,4,199,6,3
	.word	33355
	.byte	10
	.byte	'_Ifx_SRC_VADC_FC',0,4,214,6,25,4,13
	.byte	'SR0',0
	.word	762
	.byte	4,2,35,0,0,14
	.word	33384
	.byte	30
	.byte	'Ifx_SRC_VADC_FC',0,4,217,6,3
	.word	33421
	.byte	18,192,1
	.word	33280
	.byte	19,11,0,14
	.word	33451
	.byte	18,32
	.word	33384
	.byte	19,7,0,14
	.word	33466
	.byte	18,32
	.word	33280
	.byte	19,1,0,14
	.word	33480
	.byte	10
	.byte	'_Ifx_SRC_VADC',0,4,233,6,25,128,2,13
	.byte	'G',0
	.word	33461
	.byte	192,1,2,35,0,13
	.byte	'FC',0
	.word	33475
	.byte	32,3,35,192,1,13
	.byte	'CG',0
	.word	33489
	.byte	32,3,35,224,1,0,14
	.word	33494
	.byte	30
	.byte	'Ifx_SRC_VADC',0,4,238,6,3
	.word	33554
	.byte	10
	.byte	'_Ifx_SRC_DSADC_DSADC',0,4,253,6,25,8,13
	.byte	'SRM',0
	.word	762
	.byte	4,2,35,0,13
	.byte	'SRA',0
	.word	762
	.byte	4,2,35,4,0,14
	.word	33581
	.byte	30
	.byte	'Ifx_SRC_DSADC_DSADC',0,4,129,7,3
	.word	33635
	.byte	18,112
	.word	33581
	.byte	19,13,0,14
	.word	33669
	.byte	10
	.byte	'_Ifx_SRC_DSADC',0,4,144,7,25,112,13
	.byte	'DSADC',0
	.word	33678
	.byte	112,2,35,0,0,14
	.word	33683
	.byte	30
	.byte	'Ifx_SRC_DSADC',0,4,147,7,3
	.word	33720
	.byte	10
	.byte	'_Ifx_SRC_ERAY_ERAY',0,4,162,7,25,48,13
	.byte	'INT0',0
	.word	762
	.byte	4,2,35,0,13
	.byte	'INT1',0
	.word	762
	.byte	4,2,35,4,13
	.byte	'TINT0',0
	.word	762
	.byte	4,2,35,8,13
	.byte	'TINT1',0
	.word	762
	.byte	4,2,35,12,13
	.byte	'NDAT0',0
	.word	762
	.byte	4,2,35,16,13
	.byte	'NDAT1',0
	.word	762
	.byte	4,2,35,20,13
	.byte	'MBSC0',0
	.word	762
	.byte	4,2,35,24,13
	.byte	'MBSC1',0
	.word	762
	.byte	4,2,35,28,13
	.byte	'OBUSY',0
	.word	762
	.byte	4,2,35,32,13
	.byte	'IBUSY',0
	.word	762
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	5553
	.byte	8,2,35,40,0,14
	.word	33748
	.byte	30
	.byte	'Ifx_SRC_ERAY_ERAY',0,4,175,7,3
	.word	33943
	.byte	18,96
	.word	33748
	.byte	19,1,0,14
	.word	33975
	.byte	10
	.byte	'_Ifx_SRC_ERAY',0,4,190,7,25,96,13
	.byte	'ERAY',0
	.word	33984
	.byte	96,2,35,0,0,14
	.word	33989
	.byte	30
	.byte	'Ifx_SRC_ERAY',0,4,193,7,3
	.word	34024
	.byte	10
	.byte	'_Ifx_SRC_HSM_HSM',0,4,208,7,25,8,13
	.byte	'HSM',0
	.word	30507
	.byte	8,2,35,0,0,14
	.word	34051
	.byte	30
	.byte	'Ifx_SRC_HSM_HSM',0,4,211,7,3
	.word	34088
	.byte	18,8
	.word	34051
	.byte	19,0,0,14
	.word	34118
	.byte	10
	.byte	'_Ifx_SRC_HSM',0,4,226,7,25,8,13
	.byte	'HSM',0
	.word	34127
	.byte	8,2,35,0,0,14
	.word	34132
	.byte	30
	.byte	'Ifx_SRC_HSM',0,4,229,7,3
	.word	34165
	.byte	10
	.byte	'_Ifx_SRC_SCU',0,4,244,7,25,16,13
	.byte	'SCUERU',0
	.word	31979
	.byte	16,2,35,0,0,14
	.word	34191
	.byte	30
	.byte	'Ifx_SRC_SCU',0,4,247,7,3
	.word	34227
	.byte	10
	.byte	'_Ifx_SRC_PMS_PMS',0,4,134,8,25,4,13
	.byte	'SR',0
	.word	762
	.byte	4,2,35,0,0,14
	.word	34253
	.byte	30
	.byte	'Ifx_SRC_PMS_PMS',0,4,137,8,3
	.word	34289
	.byte	18,16
	.word	34253
	.byte	19,3,0,14
	.word	34319
	.byte	10
	.byte	'_Ifx_SRC_PMS',0,4,152,8,25,16,13
	.byte	'PMS',0
	.word	34328
	.byte	16,2,35,0,0,14
	.word	34333
	.byte	30
	.byte	'Ifx_SRC_PMS',0,4,155,8,3
	.word	34366
	.byte	18,12
	.word	762
	.byte	19,2,0,10
	.byte	'_Ifx_SRC_SMU_SMU',0,4,170,8,25,12,13
	.byte	'SR',0
	.word	34392
	.byte	12,2,35,0,0,14
	.word	34401
	.byte	30
	.byte	'Ifx_SRC_SMU_SMU',0,4,173,8,3
	.word	34437
	.byte	18,12
	.word	34401
	.byte	19,0,0,14
	.word	34467
	.byte	10
	.byte	'_Ifx_SRC_SMU',0,4,188,8,25,12,13
	.byte	'SMU',0
	.word	34476
	.byte	12,2,35,0,0,14
	.word	34481
	.byte	30
	.byte	'Ifx_SRC_SMU',0,4,191,8,3
	.word	34514
	.byte	18,32
	.word	762
	.byte	19,7,0,10
	.byte	'_Ifx_SRC_PSI5_PSI5',0,4,206,8,25,32,13
	.byte	'SR',0
	.word	34540
	.byte	32,2,35,0,0,14
	.word	34549
	.byte	30
	.byte	'Ifx_SRC_PSI5_PSI5',0,4,209,8,3
	.word	34587
	.byte	18,32
	.word	34549
	.byte	19,0,0,14
	.word	34619
	.byte	10
	.byte	'_Ifx_SRC_PSI5',0,4,224,8,25,32,13
	.byte	'PSI5',0
	.word	34628
	.byte	32,2,35,0,0,14
	.word	34633
	.byte	30
	.byte	'Ifx_SRC_PSI5',0,4,227,8,3
	.word	34668
	.byte	10
	.byte	'_Ifx_SRC_HSPDM_HSPDM0',0,4,242,8,25,12,13
	.byte	'BFR',0
	.word	762
	.byte	4,2,35,0,13
	.byte	'RAMP',0
	.word	762
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	762
	.byte	4,2,35,8,0,14
	.word	34695
	.byte	30
	.byte	'Ifx_SRC_HSPDM_HSPDM0',0,4,247,8,3
	.word	34764
	.byte	14
	.word	34695
	.byte	10
	.byte	'_Ifx_SRC_HSPDM',0,4,134,9,25,12,13
	.byte	'HSPDM0',0
	.word	34799
	.byte	12,2,35,0,0,14
	.word	34804
	.byte	30
	.byte	'Ifx_SRC_HSPDM',0,4,137,9,3
	.word	34842
	.byte	10
	.byte	'_Ifx_SRC_DAM_DAM',0,4,152,9,25,24,13
	.byte	'LI0',0
	.word	762
	.byte	4,2,35,0,13
	.byte	'RI0',0
	.word	762
	.byte	4,2,35,4,13
	.byte	'LI1',0
	.word	762
	.byte	4,2,35,8,13
	.byte	'RI1',0
	.word	762
	.byte	4,2,35,12,13
	.byte	'DR',0
	.word	762
	.byte	4,2,35,16,13
	.byte	'ERR',0
	.word	762
	.byte	4,2,35,20,0,14
	.word	34870
	.byte	30
	.byte	'Ifx_SRC_DAM_DAM',0,4,160,9,3
	.word	34971
	.byte	18,48
	.word	34870
	.byte	19,1,0,14
	.word	35001
	.byte	10
	.byte	'_Ifx_SRC_DAM',0,4,175,9,25,48,13
	.byte	'DAM',0
	.word	35010
	.byte	48,2,35,0,0,14
	.word	35015
	.byte	30
	.byte	'Ifx_SRC_DAM',0,4,178,9,3
	.word	35048
	.byte	10
	.byte	'_Ifx_SRC_PSI5S_PSI5S',0,4,193,9,25,32,13
	.byte	'SR',0
	.word	34540
	.byte	32,2,35,0,0,14
	.word	35074
	.byte	30
	.byte	'Ifx_SRC_PSI5S_PSI5S',0,4,196,9,3
	.word	35114
	.byte	18,32
	.word	35074
	.byte	19,0,0,14
	.word	35148
	.byte	10
	.byte	'_Ifx_SRC_PSI5S',0,4,211,9,25,32,13
	.byte	'PSI5S',0
	.word	35157
	.byte	32,2,35,0,0,14
	.word	35162
	.byte	30
	.byte	'Ifx_SRC_PSI5S',0,4,214,9,3
	.word	35199
	.byte	10
	.byte	'_Ifx_SRC_RIF_RIF',0,4,229,9,25,8,13
	.byte	'ERR',0
	.word	762
	.byte	4,2,35,0,13
	.byte	'INT',0
	.word	762
	.byte	4,2,35,4,0,14
	.word	35227
	.byte	30
	.byte	'Ifx_SRC_RIF_RIF',0,4,233,9,3
	.word	35277
	.byte	18,16
	.word	35227
	.byte	19,1,0,14
	.word	35307
	.byte	10
	.byte	'_Ifx_SRC_RIF',0,4,248,9,25,16,13
	.byte	'RIF',0
	.word	35316
	.byte	16,2,35,0,0,14
	.word	35321
	.byte	30
	.byte	'Ifx_SRC_RIF',0,4,251,9,3
	.word	35354
	.byte	10
	.byte	'_Ifx_SRC_SPU_SPU',0,4,138,10,25,8,13
	.byte	'INT',0
	.word	762
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	762
	.byte	4,2,35,4,0,14
	.word	35380
	.byte	30
	.byte	'Ifx_SRC_SPU_SPU',0,4,142,10,3
	.word	35430
	.byte	18,16
	.word	35380
	.byte	19,1,0,14
	.word	35460
	.byte	10
	.byte	'_Ifx_SRC_SPU',0,4,157,10,25,16,13
	.byte	'SPU',0
	.word	35469
	.byte	16,2,35,0,0,14
	.word	35474
	.byte	30
	.byte	'Ifx_SRC_SPU',0,4,160,10,3
	.word	35507
	.byte	10
	.byte	'_Ifx_SRC_GPSR_GPSR',0,4,175,10,25,32,13
	.byte	'SR',0
	.word	34540
	.byte	32,2,35,0,0,14
	.word	35533
	.byte	30
	.byte	'Ifx_SRC_GPSR_GPSR',0,4,178,10,3
	.word	35571
	.byte	18,192,1
	.word	35533
	.byte	19,5,0,14
	.word	35603
	.byte	10
	.byte	'_Ifx_SRC_GPSR',0,4,193,10,25,192,1,13
	.byte	'GPSR',0
	.word	35613
	.byte	192,1,2,35,0,0,14
	.word	35618
	.byte	30
	.byte	'Ifx_SRC_GPSR',0,4,196,10,3
	.word	35655
	.byte	15,21,162,11,9,1,16
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,16
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,16
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,30
	.byte	'IfxScu_WDTCON1_IR',0,21,167,11,3
	.word	35682
	.byte	10
	.byte	'_Ifx_SCU_ACCEN00_Bits',0,7,68,16,4,11
	.byte	'EN0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	455
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_ACCEN00_Bits',0,7,102,3
	.word	35804
	.byte	10
	.byte	'_Ifx_SCU_ACCEN01_Bits',0,7,105,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_SCU_ACCEN01_Bits',0,7,108,3
	.word	36363
	.byte	10
	.byte	'_Ifx_SCU_ACCEN10_Bits',0,7,111,16,4,11
	.byte	'EN0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	455
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_ACCEN10_Bits',0,7,145,1,3
	.word	36442
	.byte	10
	.byte	'_Ifx_SCU_ACCEN11_Bits',0,7,148,1,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_SCU_ACCEN11_Bits',0,7,151,1,3
	.word	37002
	.byte	10
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,7,154,1,16,4,11
	.byte	'STM0DIS',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'STM1DIS',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'STM2DIS',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'STM3DIS',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'STM4DIS',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'STM5DIS',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	455
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,7,164,1,3
	.word	37083
	.byte	10
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,7,167,1,16,4,11
	.byte	'STMDIV',0,1
	.word	455
	.byte	4,4,2,35,0,11
	.byte	'GTMDIV',0,1
	.word	455
	.byte	4,0,2,35,0,11
	.byte	'SRIDIV',0,1
	.word	455
	.byte	4,4,2,35,1,11
	.byte	'LPDIV',0,1
	.word	455
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'SPBDIV',0,1
	.word	455
	.byte	4,4,2,35,2,11
	.byte	'BBBDIV',0,1
	.word	455
	.byte	4,0,2,35,2,11
	.byte	'FSIDIV',0,1
	.word	455
	.byte	2,6,2,35,3,11
	.byte	'FSI2DIV',0,1
	.word	455
	.byte	2,4,2,35,3,11
	.byte	'CLKSEL',0,1
	.word	455
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	455
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_CCUCON0_Bits',0,7,181,1,3
	.word	37300
	.byte	10
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,7,184,1,16,4,11
	.byte	'MCANDIV',0,1
	.word	455
	.byte	4,4,2,35,0,11
	.byte	'CLKSELMCAN',0,1
	.word	455
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'PLL1DIVDIS',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'I2CDIV',0,1
	.word	455
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	455
	.byte	4,0,2,35,1,11
	.byte	'MSCDIV',0,1
	.word	455
	.byte	4,4,2,35,2,11
	.byte	'CLKSELMSC',0,1
	.word	455
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	455
	.byte	2,0,2,35,2,11
	.byte	'QSPIDIV',0,1
	.word	455
	.byte	4,4,2,35,3,11
	.byte	'CLKSELQSPI',0,1
	.word	455
	.byte	2,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	455
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_CCUCON1_Bits',0,7,199,1,3
	.word	37573
	.byte	10
	.byte	'_Ifx_SCU_CCUCON10_Bits',0,7,202,1,16,4,11
	.byte	'CPU4DIV',0,1
	.word	455
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON10_Bits',0,7,206,1,3
	.word	37899
	.byte	10
	.byte	'_Ifx_SCU_CCUCON11_Bits',0,7,209,1,16,4,11
	.byte	'CPU5DIV',0,1
	.word	455
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON11_Bits',0,7,213,1,3
	.word	38001
	.byte	10
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,7,216,1,16,4,11
	.byte	'ASCLINFDIV',0,1
	.word	455
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	455
	.byte	4,0,2,35,0,11
	.byte	'ASCLINSDIV',0,1
	.word	455
	.byte	4,4,2,35,1,11
	.byte	'CLKSELASCLINS',0,1
	.word	455
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	432
	.byte	10,8,2,35,0,11
	.byte	'EBUPERON',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'ERAYPERON',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'HSPDMPERON',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	455
	.byte	4,1,2,35,3,11
	.byte	'LCK',0,1
	.word	455
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_CCUCON2_Bits',0,7,228,1,3
	.word	38103
	.byte	10
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,7,231,1,16,4,11
	.byte	'PLL0MONEN',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'PLL1MONEN',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'PLL2MONEN',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'SPBMONEN',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'BACKMONEN',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	455
	.byte	3,0,2,35,0,11
	.byte	'PLL0MONTST',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'PLL1MONTST',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'PLL2MONTST',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'SPBMONTST',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'BACKMONTST',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	432
	.byte	11,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	455
	.byte	6,2,2,35,3,11
	.byte	'UP',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	455
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_CCUCON3_Bits',0,7,248,1,3
	.word	38377
	.byte	10
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,7,251,1,16,4,11
	.byte	'LOTHR',0,2
	.word	1022
	.byte	12,4,2,35,0,11
	.byte	'UPTHR',0,4
	.word	432
	.byte	12,8,2,35,0,11
	.byte	'MONEN',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'MONTST',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	455
	.byte	4,2,2,35,3,11
	.byte	'UP',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	455
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_CCUCON4_Bits',0,7,132,2,3
	.word	38746
	.byte	10
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,7,135,2,16,4,11
	.byte	'GETHDIV',0,1
	.word	455
	.byte	4,4,2,35,0,11
	.byte	'MCANHDIV',0,1
	.word	455
	.byte	4,0,2,35,0,11
	.byte	'ADASDIV',0,1
	.word	455
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	432
	.byte	18,2,2,35,0,11
	.byte	'UP',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	455
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_CCUCON5_Bits',0,7,143,2,3
	.word	38926
	.byte	10
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,7,146,2,16,4,11
	.byte	'CPU0DIV',0,1
	.word	455
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON6_Bits',0,7,150,2,3
	.word	39095
	.byte	10
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,7,153,2,16,4,11
	.byte	'CPU1DIV',0,1
	.word	455
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON7_Bits',0,7,157,2,3
	.word	39195
	.byte	10
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,7,160,2,16,4,11
	.byte	'CPU2DIV',0,1
	.word	455
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON8_Bits',0,7,164,2,3
	.word	39295
	.byte	10
	.byte	'_Ifx_SCU_CCUCON9_Bits',0,7,167,2,16,4,11
	.byte	'CPU3DIV',0,1
	.word	455
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON9_Bits',0,7,171,2,3
	.word	39395
	.byte	10
	.byte	'_Ifx_SCU_CHIPID_Bits',0,7,174,2,16,4,11
	.byte	'CHREV',0,1
	.word	455
	.byte	6,2,2,35,0,11
	.byte	'CHTEC',0,1
	.word	455
	.byte	2,0,2,35,0,11
	.byte	'CHPK',0,1
	.word	455
	.byte	4,4,2,35,1,11
	.byte	'CHID',0,1
	.word	455
	.byte	4,0,2,35,1,11
	.byte	'EEA',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'UCODE',0,1
	.word	455
	.byte	7,0,2,35,2,11
	.byte	'FSIZE',0,1
	.word	455
	.byte	4,4,2,35,3,11
	.byte	'VART',0,1
	.word	455
	.byte	3,1,2,35,3,11
	.byte	'SEC',0,1
	.word	455
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_CHIPID_Bits',0,7,185,2,3
	.word	39495
	.byte	10
	.byte	'_Ifx_SCU_DTSCLIM_Bits',0,7,188,2,16,4,11
	.byte	'LOWER',0,2
	.word	1022
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'BGPOK',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'EN',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'LLU',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'UPPER',0,2
	.word	1022
	.byte	12,4,2,35,2,11
	.byte	'INTEN',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'INT',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'UOF',0,1
	.word	455
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_DTSCLIM_Bits',0,7,200,2,3
	.word	39698
	.byte	10
	.byte	'_Ifx_SCU_DTSCSTAT_Bits',0,7,203,2,16,4,11
	.byte	'RESULT',0,2
	.word	1022
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	432
	.byte	20,0,2,35,0,0,30
	.byte	'Ifx_SCU_DTSCSTAT_Bits',0,7,207,2,3
	.word	39930
	.byte	10
	.byte	'_Ifx_SCU_EICON0_Bits',0,7,210,2,16,4,11
	.byte	'reserved_0',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	1121
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	1121
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_SCU_EICON0_Bits',0,7,216,2,3
	.word	40032
	.byte	10
	.byte	'_Ifx_SCU_EICON1_Bits',0,7,219,2,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,30
	.byte	'Ifx_SCU_EICON1_Bits',0,7,228,2,3
	.word	40160
	.byte	10
	.byte	'_Ifx_SCU_EICR_Bits',0,7,231,2,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	4,4,2,35,0,11
	.byte	'EXIS0',0,1
	.word	455
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'FEN0',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'REN0',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'LDEN0',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'EIEN0',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'INP0',0,1
	.word	455
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	432
	.byte	5,12,2,35,0,11
	.byte	'EXIS1',0,1
	.word	455
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'FEN1',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'REN1',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'LDEN1',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'EIEN1',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'INP1',0,1
	.word	455
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	455
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EICR_Bits',0,7,250,2,3
	.word	40349
	.byte	10
	.byte	'_Ifx_SCU_EIFILT_Bits',0,7,253,2,16,4,11
	.byte	'FILRQ0A',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'FILRQ5A',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'FILRQ2A',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'FILRQ3A',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'FILRQ0C',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'FILRQ1C',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'FILRQ3C',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'FILRQ2C',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'FILRQ4A',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'FILRQ6A',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'FILRQ1A',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'FILRQ7A',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'FILRQ6D',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'FILRQ4D',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'FILRQ2B',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'FILRQ3B',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'FILRQ7C',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	455
	.byte	7,0,2,35,2,11
	.byte	'FILTDIV',0,1
	.word	455
	.byte	4,4,2,35,3,11
	.byte	'DEPTH',0,1
	.word	455
	.byte	4,0,2,35,3,0,30
	.byte	'Ifx_SCU_EIFILT_Bits',0,7,147,3,3
	.word	40713
	.byte	10
	.byte	'_Ifx_SCU_EIFR_Bits',0,7,150,3,16,4,11
	.byte	'INTF0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'INTF1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'INTF2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'INTF3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'INTF4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'INTF5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'INTF6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'INTF7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_SCU_EIFR_Bits',0,7,161,3,3
	.word	41152
	.byte	10
	.byte	'_Ifx_SCU_EISR_Bits',0,7,164,3,16,4,11
	.byte	'AE',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	1022
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	1022
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_EISR_Bits',0,7,174,3,3
	.word	41363
	.byte	10
	.byte	'_Ifx_SCU_EMSR_Bits',0,7,177,3,16,4,11
	.byte	'POL',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'MODE',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'ENON',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'PSEL',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	1022
	.byte	12,0,2,35,0,11
	.byte	'EMSF',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'SEMSF',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	1022
	.byte	14,0,2,35,2,0,30
	.byte	'Ifx_SCU_EMSR_Bits',0,7,187,3,3
	.word	41539
	.byte	10
	.byte	'_Ifx_SCU_EMSSW_Bits',0,7,190,3,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	24,8,2,35,0,11
	.byte	'EMSFM',0,1
	.word	455
	.byte	2,6,2,35,3,11
	.byte	'SEMSFM',0,1
	.word	455
	.byte	2,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	455
	.byte	4,0,2,35,3,0,30
	.byte	'Ifx_SCU_EMSSW_Bits',0,7,196,3,3
	.word	41733
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,7,199,3,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	7,1,2,35,0,11
	.byte	'EDCON',0,2
	.word	1022
	.byte	2,7,2,35,0,11
	.byte	'reserved_9',0,4
	.word	432
	.byte	23,0,2,35,0,0,30
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,7,204,3,3
	.word	41868
	.byte	10
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,7,207,3,16,4,11
	.byte	'ARI',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'ARC',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	432
	.byte	30,0,2,35,0,0,30
	.byte	'Ifx_SCU_ESROCFG_Bits',0,7,212,3,3
	.word	42004
	.byte	10
	.byte	'_Ifx_SCU_EXTCON_Bits',0,7,215,3,16,4,11
	.byte	'EN0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'SEL0',0,1
	.word	455
	.byte	4,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	1022
	.byte	10,0,2,35,0,11
	.byte	'EN1',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'NSEL',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'SEL1',0,1
	.word	455
	.byte	4,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	455
	.byte	2,0,2,35,2,11
	.byte	'DIV1',0,1
	.word	455
	.byte	8,0,2,35,3,0,30
	.byte	'Ifx_SCU_EXTCON_Bits',0,7,226,3,3
	.word	42115
	.byte	10
	.byte	'_Ifx_SCU_FDR_Bits',0,7,229,3,16,4,11
	.byte	'STEP',0,2
	.word	1022
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	455
	.byte	4,2,2,35,1,11
	.byte	'DM',0,1
	.word	455
	.byte	2,0,2,35,1,11
	.byte	'RESULT',0,2
	.word	1022
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	455
	.byte	5,1,2,35,3,11
	.byte	'DISCLK',0,1
	.word	455
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_FDR_Bits',0,7,237,3,3
	.word	42333
	.byte	10
	.byte	'_Ifx_SCU_FMR_Bits',0,7,240,3,16,4,11
	.byte	'FS0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'FS1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'FS2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'FS3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'FS4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'FS5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'FS6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'FS7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	455
	.byte	8,0,2,35,1,11
	.byte	'FC0',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'FC1',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'FC2',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'FC3',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'FC4',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'FC5',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'FC6',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'FC7',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	455
	.byte	8,0,2,35,3,0,30
	.byte	'Ifx_SCU_FMR_Bits',0,7,132,4,3
	.word	42496
	.byte	10
	.byte	'_Ifx_SCU_ID_Bits',0,7,135,4,16,4,11
	.byte	'MODREV',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	455
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	1022
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_ID_Bits',0,7,140,4,3
	.word	42832
	.byte	10
	.byte	'_Ifx_SCU_IGCR_Bits',0,7,143,4,16,4,11
	.byte	'IPEN00',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'IPEN01',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'IPEN02',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'IPEN03',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'IPEN04',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'IPEN05',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'IPEN06',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'IPEN07',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	455
	.byte	5,3,2,35,1,11
	.byte	'GEEN0',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'IGP0',0,1
	.word	455
	.byte	2,0,2,35,1,11
	.byte	'IPEN10',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'IPEN11',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'IPEN12',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'IPEN13',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'IPEN14',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'IPEN15',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'IPEN16',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'IPEN17',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	455
	.byte	5,3,2,35,3,11
	.byte	'GEEN1',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'IGP1',0,1
	.word	455
	.byte	2,0,2,35,3,0,30
	.byte	'Ifx_SCU_IGCR_Bits',0,7,167,4,3
	.word	42939
	.byte	10
	.byte	'_Ifx_SCU_IN_Bits',0,7,170,4,16,4,11
	.byte	'P0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	432
	.byte	30,0,2,35,0,0,30
	.byte	'Ifx_SCU_IN_Bits',0,7,175,4,3
	.word	43391
	.byte	10
	.byte	'_Ifx_SCU_IOCR_Bits',0,7,178,4,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	4,4,2,35,0,11
	.byte	'PC0',0,1
	.word	455
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	455
	.byte	4,4,2,35,1,11
	.byte	'PC1',0,1
	.word	455
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1022
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_IOCR_Bits',0,7,185,4,3
	.word	43490
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,7,188,4,16,4,11
	.byte	'LBISTREQ',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'LBISTRES',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'PATTERNS',0,4
	.word	432
	.byte	18,12,2,35,0,11
	.byte	'reserved_20',0,2
	.word	1022
	.byte	8,4,2,35,2,11
	.byte	'LBISTDONE',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'LBISTERRINJ',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'LBISTREQRED',0,1
	.word	455
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,7,198,4,3
	.word	43640
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,7,201,4,16,4,11
	.byte	'SEED',0,4
	.word	432
	.byte	19,13,2,35,0,11
	.byte	'reserved_19',0,1
	.word	455
	.byte	5,0,2,35,2,11
	.byte	'SPLITSH',0,1
	.word	455
	.byte	3,5,2,35,3,11
	.byte	'BODY',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'LBISTFREQU',0,1
	.word	455
	.byte	4,0,2,35,3,0,30
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,7,208,4,3
	.word	43878
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,7,211,4,16,4,11
	.byte	'LENGTH',0,2
	.word	1022
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	432
	.byte	20,0,2,35,0,0,30
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,7,215,4,3
	.word	44039
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL3_Bits',0,7,218,4,16,4,11
	.byte	'SIGNATURE',0,4
	.word	432
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_SCU_LBISTCTRL3_Bits',0,7,221,4,3
	.word	44145
	.byte	10
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,7,224,4,16,4,11
	.byte	'LS2',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	1022
	.byte	14,1,2,35,0,11
	.byte	'LSEN2',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'LS0',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	1022
	.byte	14,1,2,35,2,11
	.byte	'LSEN0',0,1
	.word	455
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_LCLCON0_Bits',0,7,232,4,3
	.word	44231
	.byte	10
	.byte	'_Ifx_SCU_LCLCON1_Bits',0,7,235,4,16,4,11
	.byte	'LS3',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	1022
	.byte	14,1,2,35,0,11
	.byte	'LSEN3',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'LS1',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	1022
	.byte	14,1,2,35,2,11
	.byte	'LSEN1',0,1
	.word	455
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_LCLCON1_Bits',0,7,243,4,3
	.word	44399
	.byte	10
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,7,246,4,16,4,11
	.byte	'LCLT0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'LCLT1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'LCLT2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'LCLT3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'LCLT4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'LCLT5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	1022
	.byte	10,0,2,35,0,11
	.byte	'PLCLT0',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'PLCLT1',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'PLCLT2',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'PLCLT3',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'PLCLT4',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'PLCLT5',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	1022
	.byte	10,0,2,35,2,0,30
	.byte	'Ifx_SCU_LCLTEST_Bits',0,7,134,5,3
	.word	44567
	.byte	10
	.byte	'_Ifx_SCU_MANID_Bits',0,7,137,5,16,4,11
	.byte	'DEPT',0,1
	.word	455
	.byte	5,3,2,35,0,11
	.byte	'MANUF',0,2
	.word	1022
	.byte	11,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1022
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_MANID_Bits',0,7,142,5,3
	.word	44881
	.byte	10
	.byte	'_Ifx_SCU_OMR_Bits',0,7,145,5,16,4,11
	.byte	'PS0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	1022
	.byte	14,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	1022
	.byte	14,0,2,35,2,0,30
	.byte	'Ifx_SCU_OMR_Bits',0,7,153,5,3
	.word	44992
	.byte	10
	.byte	'_Ifx_SCU_OSCCON_Bits',0,7,156,5,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'PLLLV',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'OSCRES',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'GAINSEL',0,1
	.word	455
	.byte	2,3,2,35,0,11
	.byte	'MODE',0,1
	.word	455
	.byte	2,1,2,35,0,11
	.byte	'SHBY',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'PLLHV',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'HYSEN',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'HYSCTL',0,1
	.word	455
	.byte	2,4,2,35,1,11
	.byte	'AMPCTL',0,1
	.word	455
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	455
	.byte	2,0,2,35,1,11
	.byte	'OSCVAL',0,1
	.word	455
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	455
	.byte	2,1,2,35,2,11
	.byte	'APREN',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'CAP0EN',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'CAP1EN',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'CAP2EN',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'CAP3EN',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	455
	.byte	4,0,2,35,3,0,30
	.byte	'Ifx_SCU_OSCCON_Bits',0,7,177,5,3
	.word	45150
	.byte	10
	.byte	'_Ifx_SCU_OUT_Bits',0,7,180,5,16,4,11
	.byte	'P0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	432
	.byte	30,0,2,35,0,0,30
	.byte	'Ifx_SCU_OUT_Bits',0,7,185,5,3
	.word	45561
	.byte	10
	.byte	'_Ifx_SCU_OVCCON_Bits',0,7,188,5,16,4,11
	.byte	'CSEL0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'CSEL1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'CSEL2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'CSEL3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'CSEL4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'CSEL5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	1022
	.byte	10,0,2,35,0,11
	.byte	'OVSTRT',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'OVSTP',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'DCINVAL',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	455
	.byte	5,0,2,35,2,11
	.byte	'OVCONF',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'POVCONF',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	455
	.byte	6,0,2,35,3,0,30
	.byte	'Ifx_SCU_OVCCON_Bits',0,7,204,5,3
	.word	45662
	.byte	10
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,7,207,5,16,4,11
	.byte	'OVEN0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'OVEN1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'OVEN2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'OVEN3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'OVEN4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'OVEN5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,30
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,7,216,5,3
	.word	45980
	.byte	10
	.byte	'_Ifx_SCU_PDISC_Bits',0,7,219,5,16,4,11
	.byte	'PDIS0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	432
	.byte	30,0,2,35,0,0,30
	.byte	'Ifx_SCU_PDISC_Bits',0,7,224,5,3
	.word	46167
	.byte	10
	.byte	'_Ifx_SCU_PDR_Bits',0,7,227,5,16,4,11
	.byte	'PD0',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	455
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	455
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	455
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_SCU_PDR_Bits',0,7,234,5,3
	.word	46278
	.byte	10
	.byte	'_Ifx_SCU_PDRR_Bits',0,7,237,5,16,4,11
	.byte	'PDR0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'PDR1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'PDR2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'PDR3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'PDR4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'PDR5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'PDR6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'PDR7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_SCU_PDRR_Bits',0,7,248,5,3
	.word	46411
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON0_Bits',0,7,251,5,16,4,11
	.byte	'DIVBY',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	1022
	.byte	8,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	455
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	455
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	455
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	455
	.byte	5,0,2,35,3,0,30
	.byte	'Ifx_SCU_PERPLLCON0_Bits',0,7,134,6,3
	.word	46614
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON1_Bits',0,7,137,6,16,4,11
	.byte	'K2DIV',0,1
	.word	455
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	455
	.byte	5,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	455
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	432
	.byte	21,0,2,35,0,0,30
	.byte	'Ifx_SCU_PERPLLCON1_Bits',0,7,143,6,3
	.word	46854
	.byte	10
	.byte	'_Ifx_SCU_PERPLLSTAT_Bits',0,7,146,6,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'K3RDY',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	432
	.byte	25,0,2,35,0,0,30
	.byte	'Ifx_SCU_PERPLLSTAT_Bits',0,7,156,6,3
	.word	46998
	.byte	10
	.byte	'_Ifx_SCU_PMCSR0_Bits',0,7,159,6,16,4,11
	.byte	'REQSLP',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	455
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	432
	.byte	21,0,2,35,0,0,30
	.byte	'Ifx_SCU_PMCSR0_Bits',0,7,165,6,3
	.word	47220
	.byte	10
	.byte	'_Ifx_SCU_PMCSR1_Bits',0,7,168,6,16,4,11
	.byte	'REQSLP',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	455
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	432
	.byte	21,0,2,35,0,0,30
	.byte	'Ifx_SCU_PMCSR1_Bits',0,7,174,6,3
	.word	47356
	.byte	10
	.byte	'_Ifx_SCU_PMCSR2_Bits',0,7,177,6,16,4,11
	.byte	'REQSLP',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	455
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	432
	.byte	21,0,2,35,0,0,30
	.byte	'Ifx_SCU_PMCSR2_Bits',0,7,183,6,3
	.word	47492
	.byte	10
	.byte	'_Ifx_SCU_PMCSR3_Bits',0,7,186,6,16,4,11
	.byte	'REQSLP',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	455
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	432
	.byte	21,0,2,35,0,0,30
	.byte	'Ifx_SCU_PMCSR3_Bits',0,7,192,6,3
	.word	47628
	.byte	10
	.byte	'_Ifx_SCU_PMCSR4_Bits',0,7,195,6,16,4,11
	.byte	'REQSLP',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	455
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	432
	.byte	21,0,2,35,0,0,30
	.byte	'Ifx_SCU_PMCSR4_Bits',0,7,201,6,3
	.word	47764
	.byte	10
	.byte	'_Ifx_SCU_PMCSR5_Bits',0,7,204,6,16,4,11
	.byte	'REQSLP',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	455
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	432
	.byte	21,0,2,35,0,0,30
	.byte	'Ifx_SCU_PMCSR5_Bits',0,7,210,6,3
	.word	47900
	.byte	10
	.byte	'_Ifx_SCU_PMSTAT0_Bits',0,7,213,6,16,4,11
	.byte	'CPU0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'CPU1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'CPU2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'CPU3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'CPU4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'CPU5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	1022
	.byte	10,0,2,35,0,11
	.byte	'CPU0LS',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'CPU1LS',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'CPU2LS',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'CPU3LS',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	1022
	.byte	12,0,2,35,2,0,30
	.byte	'Ifx_SCU_PMSTAT0_Bits',0,7,227,6,3
	.word	48036
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,7,230,6,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'CPUIDLSEL',0,1
	.word	455
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'IRADIS',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	432
	.byte	11,8,2,35,0,11
	.byte	'CPUSEL',0,1
	.word	455
	.byte	3,5,2,35,3,11
	.byte	'STBYEVEN',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'STBYEV',0,1
	.word	455
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	455
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,7,241,6,3
	.word	48308
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR0_Bits',0,7,244,6,16,4,11
	.byte	'LJTEN',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'LJTOVEN',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'LJTOVIEN',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'LJTSTRT',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'LJTSTP',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'LJTCLR',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	1022
	.byte	6,4,2,35,0,11
	.byte	'SDSTEP',0,1
	.word	455
	.byte	4,0,2,35,1,11
	.byte	'VDTEN',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'VDTOVEN',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'VDTOVIEN',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'VDTSTRT',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'VDTSTP',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'VDTCLR',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	1022
	.byte	7,3,2,35,2,11
	.byte	'LPSLPEN',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	455
	.byte	2,0,2,35,3,0,30
	.byte	'Ifx_SCU_PMTRCSR0_Bits',0,7,135,7,3
	.word	48553
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR1_Bits',0,7,138,7,16,4,11
	.byte	'LJTCV',0,2
	.word	1022
	.byte	16,0,2,35,0,11
	.byte	'VDTCV',0,2
	.word	1022
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	455
	.byte	6,0,2,35,3,0,30
	.byte	'Ifx_SCU_PMTRCSR1_Bits',0,7,143,7,3
	.word	48941
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR2_Bits',0,7,146,7,16,4,11
	.byte	'LDJMPREQ',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	2,4,2,35,0,11
	.byte	'LJTRUN',0,1
	.word	455
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	455
	.byte	2,0,2,35,0,11
	.byte	'LJTOV',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	455
	.byte	3,4,2,35,1,11
	.byte	'LJTOVCLR',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	455
	.byte	3,0,2,35,1,11
	.byte	'LJTCNT',0,2
	.word	1022
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_PMTRCSR2_Bits',0,7,157,7,3
	.word	49059
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR3_Bits',0,7,160,7,16,4,11
	.byte	'VDROOPREQ',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	2,4,2,35,0,11
	.byte	'VDTRUN',0,1
	.word	455
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	455
	.byte	2,0,2,35,0,11
	.byte	'VDTOV',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	455
	.byte	3,4,2,35,1,11
	.byte	'VDTOVCLR',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	455
	.byte	3,0,2,35,1,11
	.byte	'VDTCNT',0,2
	.word	1022
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	455
	.byte	6,0,2,35,3,0,30
	.byte	'Ifx_SCU_PMTRCSR3_Bits',0,7,172,7,3
	.word	49302
	.byte	10
	.byte	'_Ifx_SCU_RSTCON_Bits',0,7,175,7,16,4,11
	.byte	'ESR0',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'ESR1',0,1
	.word	455
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	455
	.byte	2,2,2,35,0,11
	.byte	'SMU',0,1
	.word	455
	.byte	2,0,2,35,0,11
	.byte	'SW',0,1
	.word	455
	.byte	2,6,2,35,1,11
	.byte	'STM0',0,1
	.word	455
	.byte	2,4,2,35,1,11
	.byte	'STM1',0,1
	.word	455
	.byte	2,2,2,35,1,11
	.byte	'STM2',0,1
	.word	455
	.byte	2,0,2,35,1,11
	.byte	'STM3',0,1
	.word	455
	.byte	2,6,2,35,2,11
	.byte	'STM4',0,1
	.word	455
	.byte	2,4,2,35,2,11
	.byte	'STM5',0,1
	.word	455
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	1022
	.byte	10,0,2,35,2,0,30
	.byte	'Ifx_SCU_RSTCON_Bits',0,7,189,7,3
	.word	49569
	.byte	10
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,7,192,7,16,4,11
	.byte	'FRTO',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'CLRC',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'CSSX',0,2
	.word	1022
	.byte	6,3,2,35,0,11
	.byte	'reserved_13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'USRINFO',0,2
	.word	1022
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_RSTCON2_Bits',0,7,206,7,3
	.word	49828
	.byte	10
	.byte	'_Ifx_SCU_RSTCON3_Bits',0,7,209,7,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_SCU_RSTCON3_Bits',0,7,212,7,3
	.word	50133
	.byte	10
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,7,215,7,16,4,11
	.byte	'ESR0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'ESR1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'SMU',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'SW',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'STM0',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'STM1',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'STM2',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'STM3',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'STM4',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'STM5',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	455
	.byte	5,0,2,35,1,11
	.byte	'PORST',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'CB0',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'CB1',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'CB3',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'EVRC',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'EVR33',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'SWD',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'HSMS',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'HSMA',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'STBYR',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'LBPORST',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'LBTERM',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	455
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,7,245,7,3
	.word	50214
	.byte	10
	.byte	'_Ifx_SCU_SEICON0_Bits',0,7,248,7,16,4,11
	.byte	'reserved_0',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	1121
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	1121
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_SCU_SEICON0_Bits',0,7,254,7,3
	.word	50763
	.byte	10
	.byte	'_Ifx_SCU_SEICON1_Bits',0,7,129,8,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,30
	.byte	'Ifx_SCU_SEICON1_Bits',0,7,138,8,3
	.word	50893
	.byte	10
	.byte	'_Ifx_SCU_SEISR_Bits',0,7,141,8,16,4,11
	.byte	'AE',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	1022
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	1022
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_SEISR_Bits',0,7,151,8,3
	.word	51084
	.byte	10
	.byte	'_Ifx_SCU_STCON_Bits',0,7,154,8,16,4,11
	.byte	'reserved_0',0,2
	.word	1022
	.byte	13,3,2,35,0,11
	.byte	'SFCBAE',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'CFCBAE',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'STP',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1022
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_STCON_Bits',0,7,161,8,3
	.word	51262
	.byte	10
	.byte	'_Ifx_SCU_STMEM1_Bits',0,7,164,8,16,4,11
	.byte	'MEM',0,4
	.word	432
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_SCU_STMEM1_Bits',0,7,167,8,3
	.word	51413
	.byte	10
	.byte	'_Ifx_SCU_STMEM2_Bits',0,7,170,8,16,4,11
	.byte	'MEM',0,4
	.word	432
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_SCU_STMEM2_Bits',0,7,173,8,3
	.word	51485
	.byte	10
	.byte	'_Ifx_SCU_STMEM3_Bits',0,7,176,8,16,4,11
	.byte	'MEM',0,4
	.word	432
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_SCU_STMEM3_Bits',0,7,179,8,3
	.word	51557
	.byte	10
	.byte	'_Ifx_SCU_STMEM4_Bits',0,7,182,8,16,4,11
	.byte	'MEM',0,4
	.word	432
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_SCU_STMEM4_Bits',0,7,185,8,3
	.word	51629
	.byte	10
	.byte	'_Ifx_SCU_STMEM5_Bits',0,7,188,8,16,4,11
	.byte	'MEM',0,4
	.word	432
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_SCU_STMEM5_Bits',0,7,191,8,3
	.word	51701
	.byte	10
	.byte	'_Ifx_SCU_STMEM6_Bits',0,7,194,8,16,4,11
	.byte	'MEM',0,4
	.word	432
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_SCU_STMEM6_Bits',0,7,197,8,3
	.word	51773
	.byte	10
	.byte	'_Ifx_SCU_STSTAT_Bits',0,7,200,8,16,4,11
	.byte	'HWCFG',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'FTM',0,1
	.word	455
	.byte	7,1,2,35,1,11
	.byte	'MODE',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'FCBAE',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'LUDIS',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'TRSTL',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'SPDEN',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'RAMINT',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	455
	.byte	3,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	455
	.byte	4,0,2,35,3,0,30
	.byte	'Ifx_SCU_STSTAT_Bits',0,7,216,8,3
	.word	51845
	.byte	10
	.byte	'_Ifx_SCU_SWAPCTRL_Bits',0,7,219,8,16,4,11
	.byte	'ADDRCFG',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'SPARE',0,2
	.word	1022
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1022
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_SWAPCTRL_Bits',0,7,224,8,3
	.word	52174
	.byte	10
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,7,227,8,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'SWRSTREQ',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	6,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	455
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1022
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,7,234,8,3
	.word	52294
	.byte	10
	.byte	'_Ifx_SCU_SYSCON_Bits',0,7,237,8,16,4,11
	.byte	'CCTRIG0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'RAMINTM',0,1
	.word	455
	.byte	2,4,2,35,0,11
	.byte	'SETLUDIS',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'DDC',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	455
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1022
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_SYSCON_Bits',0,7,249,8,3
	.word	52464
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON0_Bits',0,7,252,8,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'MODEN',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	1022
	.byte	6,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	455
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	455
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	455
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	455
	.byte	3,2,2,35,3,11
	.byte	'INSEL',0,1
	.word	455
	.byte	2,0,2,35,3,0,30
	.byte	'Ifx_SCU_SYSPLLCON0_Bits',0,7,137,9,3
	.word	52727
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON1_Bits',0,7,140,9,16,4,11
	.byte	'K2DIV',0,1
	.word	455
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	432
	.byte	29,0,2,35,0,0,30
	.byte	'Ifx_SCU_SYSPLLCON1_Bits',0,7,144,9,3
	.word	53006
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON2_Bits',0,7,147,9,16,4,11
	.byte	'MODCFG',0,2
	.word	1022
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1022
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_SYSPLLCON2_Bits',0,7,151,9,3
	.word	53110
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLSTAT_Bits',0,7,154,9,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	455
	.byte	2,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'MODRUN',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_SCU_SYSPLLSTAT_Bits',0,7,164,9,3
	.word	53216
	.byte	10
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,7,167,9,16,4,11
	.byte	'ESR0T',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,30
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,7,174,9,3
	.word	53439
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS0_Bits',0,7,177,9,16,4,11
	.byte	'CPU0ESR0T',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'CPU0ESR1T',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'CPU0TRAP2T',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'CPU0SMUT',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	455
	.byte	4,0,2,35,0,11
	.byte	'CPU1ESR0T',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'CPU1ESR1T',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'CPU1TRAP2T',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'CPU1SMUT',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	455
	.byte	4,0,2,35,1,11
	.byte	'CPU2ESR0T',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'CPU2ESR1T',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'CPU2TRAP2T',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'CPU2SMUT',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	455
	.byte	4,0,2,35,2,11
	.byte	'CPU3ESR0T',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'CPU3ESR1T',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'CPU3TRAP2T',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'CPU3SMUT',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	455
	.byte	4,0,2,35,3,0,30
	.byte	'Ifx_SCU_TRAPDIS0_Bits',0,7,199,9,3
	.word	53587
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS1_Bits',0,7,202,9,16,4,11
	.byte	'CPU4ESR0T',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'CPU4ESR1T',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'CPU4TRAP2T',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'CPU4SMUT',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	455
	.byte	4,0,2,35,0,11
	.byte	'CPU5ESR0T',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'CPU5ESR1T',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'CPU5TRAP2T',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'CPU5SMUT',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	455
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1022
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_TRAPDIS1_Bits',0,7,215,9,3
	.word	54075
	.byte	10
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,7,218,9,16,4,11
	.byte	'ESR0T',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,30
	.byte	'Ifx_SCU_TRAPSET_Bits',0,7,225,9,3
	.word	54372
	.byte	10
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,7,228,9,16,4,11
	.byte	'ESR0T',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,30
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,7,235,9,3
	.word	54520
	.byte	30
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,7,244,9,3
	.word	1137
	.byte	30
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,7,132,10,3
	.word	1273
	.byte	30
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,7,148,10,3
	.word	1539
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,7,151,10,16,4,11
	.byte	'ENDINIT',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	1121
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	1121
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,7,157,10,3
	.word	54770
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,7,160,10,16,4,11
	.byte	'CLRIRF',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	455
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1022
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,7,173,10,3
	.word	54896
	.byte	10
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,7,176,10,16,4,11
	.byte	'AE',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	455
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	1022
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,7,189,10,3
	.word	55148
	.byte	12,7,197,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35804
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_ACCEN00',0,7,202,10,3
	.word	55367
	.byte	12,7,205,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36363
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_ACCEN01',0,7,210,10,3
	.word	55432
	.byte	12,7,213,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36442
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_ACCEN10',0,7,218,10,3
	.word	55497
	.byte	12,7,221,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37002
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_ACCEN11',0,7,226,10,3
	.word	55562
	.byte	12,7,229,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37083
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_ARSTDIS',0,7,234,10,3
	.word	55627
	.byte	12,7,237,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37300
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON0',0,7,242,10,3
	.word	55692
	.byte	12,7,245,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37573
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON1',0,7,250,10,3
	.word	55757
	.byte	12,7,253,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37899
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON10',0,7,130,11,3
	.word	55822
	.byte	12,7,133,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38001
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON11',0,7,138,11,3
	.word	55888
	.byte	12,7,141,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38103
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON2',0,7,146,11,3
	.word	55954
	.byte	12,7,149,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38377
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON3',0,7,154,11,3
	.word	56019
	.byte	12,7,157,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38746
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON4',0,7,162,11,3
	.word	56084
	.byte	12,7,165,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38926
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON5',0,7,170,11,3
	.word	56149
	.byte	12,7,173,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39095
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON6',0,7,178,11,3
	.word	56214
	.byte	12,7,181,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39195
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON7',0,7,186,11,3
	.word	56279
	.byte	12,7,189,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39295
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON8',0,7,194,11,3
	.word	56344
	.byte	12,7,197,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39395
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON9',0,7,202,11,3
	.word	56409
	.byte	12,7,205,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39495
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CHIPID',0,7,210,11,3
	.word	56474
	.byte	12,7,213,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39698
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_DTSCLIM',0,7,218,11,3
	.word	56538
	.byte	12,7,221,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39930
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_DTSCSTAT',0,7,226,11,3
	.word	56603
	.byte	12,7,229,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40032
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EICON0',0,7,234,11,3
	.word	56669
	.byte	12,7,237,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40160
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EICON1',0,7,242,11,3
	.word	56733
	.byte	12,7,245,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40349
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EICR',0,7,250,11,3
	.word	56797
	.byte	12,7,253,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40713
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EIFILT',0,7,130,12,3
	.word	56859
	.byte	12,7,133,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41152
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EIFR',0,7,138,12,3
	.word	56923
	.byte	12,7,141,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41363
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EISR',0,7,146,12,3
	.word	56985
	.byte	12,7,149,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41539
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EMSR',0,7,154,12,3
	.word	57047
	.byte	12,7,157,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41733
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EMSSW',0,7,162,12,3
	.word	57109
	.byte	12,7,165,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41868
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX',0,7,170,12,3
	.word	57172
	.byte	12,7,173,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42004
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_ESROCFG',0,7,178,12,3
	.word	57245
	.byte	12,7,181,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42115
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EXTCON',0,7,186,12,3
	.word	57310
	.byte	12,7,189,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42333
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_FDR',0,7,194,12,3
	.word	57374
	.byte	12,7,197,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42496
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_FMR',0,7,202,12,3
	.word	57435
	.byte	12,7,205,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42832
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_ID',0,7,210,12,3
	.word	57496
	.byte	12,7,213,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42939
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_IGCR',0,7,218,12,3
	.word	57556
	.byte	12,7,221,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43391
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_IN',0,7,226,12,3
	.word	57618
	.byte	12,7,229,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43490
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_IOCR',0,7,234,12,3
	.word	57678
	.byte	12,7,237,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43640
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_LBISTCTRL0',0,7,242,12,3
	.word	57740
	.byte	12,7,245,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43878
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_LBISTCTRL1',0,7,250,12,3
	.word	57808
	.byte	12,7,253,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44039
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_LBISTCTRL2',0,7,130,13,3
	.word	57876
	.byte	12,7,133,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44145
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_LBISTCTRL3',0,7,138,13,3
	.word	57944
	.byte	12,7,141,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44231
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_LCLCON0',0,7,146,13,3
	.word	58012
	.byte	12,7,149,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44399
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_LCLCON1',0,7,154,13,3
	.word	58077
	.byte	12,7,157,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44567
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_LCLTEST',0,7,162,13,3
	.word	58142
	.byte	12,7,165,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44881
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_MANID',0,7,170,13,3
	.word	58207
	.byte	12,7,173,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44992
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_OMR',0,7,178,13,3
	.word	58270
	.byte	12,7,181,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45150
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_OSCCON',0,7,186,13,3
	.word	58331
	.byte	12,7,189,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45561
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_OUT',0,7,194,13,3
	.word	58395
	.byte	12,7,197,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45662
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_OVCCON',0,7,202,13,3
	.word	58456
	.byte	12,7,205,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45980
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_OVCENABLE',0,7,210,13,3
	.word	58520
	.byte	12,7,213,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46167
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PDISC',0,7,218,13,3
	.word	58587
	.byte	12,7,221,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46278
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PDR',0,7,226,13,3
	.word	58650
	.byte	12,7,229,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46411
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PDRR',0,7,234,13,3
	.word	58711
	.byte	12,7,237,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46614
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PERPLLCON0',0,7,242,13,3
	.word	58773
	.byte	12,7,245,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46854
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PERPLLCON1',0,7,250,13,3
	.word	58841
	.byte	12,7,253,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46998
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PERPLLSTAT',0,7,130,14,3
	.word	58909
	.byte	12,7,133,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47220
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PMCSR0',0,7,138,14,3
	.word	58977
	.byte	12,7,141,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47356
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PMCSR1',0,7,146,14,3
	.word	59041
	.byte	12,7,149,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47492
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PMCSR2',0,7,154,14,3
	.word	59105
	.byte	12,7,157,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47628
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PMCSR3',0,7,162,14,3
	.word	59169
	.byte	12,7,165,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47764
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PMCSR4',0,7,170,14,3
	.word	59233
	.byte	12,7,173,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47900
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PMCSR5',0,7,178,14,3
	.word	59297
	.byte	12,7,181,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48036
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PMSTAT0',0,7,186,14,3
	.word	59361
	.byte	12,7,189,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48308
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PMSWCR1',0,7,194,14,3
	.word	59426
	.byte	12,7,197,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48553
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PMTRCSR0',0,7,202,14,3
	.word	59491
	.byte	12,7,205,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48941
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PMTRCSR1',0,7,210,14,3
	.word	59557
	.byte	12,7,213,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49059
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PMTRCSR2',0,7,218,14,3
	.word	59623
	.byte	12,7,221,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49302
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PMTRCSR3',0,7,226,14,3
	.word	59689
	.byte	12,7,229,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49569
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_RSTCON',0,7,234,14,3
	.word	59755
	.byte	12,7,237,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49828
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_RSTCON2',0,7,242,14,3
	.word	59819
	.byte	12,7,245,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50133
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_RSTCON3',0,7,250,14,3
	.word	59884
	.byte	12,7,253,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50214
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_RSTSTAT',0,7,130,15,3
	.word	59949
	.byte	12,7,133,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50763
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_SEICON0',0,7,138,15,3
	.word	60014
	.byte	12,7,141,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50893
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_SEICON1',0,7,146,15,3
	.word	60079
	.byte	12,7,149,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51084
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_SEISR',0,7,154,15,3
	.word	60144
	.byte	12,7,157,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51262
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_STCON',0,7,162,15,3
	.word	60207
	.byte	12,7,165,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51413
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_STMEM1',0,7,170,15,3
	.word	60270
	.byte	12,7,173,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51485
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_STMEM2',0,7,178,15,3
	.word	60334
	.byte	12,7,181,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51557
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_STMEM3',0,7,186,15,3
	.word	60398
	.byte	12,7,189,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51629
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_STMEM4',0,7,194,15,3
	.word	60462
	.byte	12,7,197,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51701
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_STMEM5',0,7,202,15,3
	.word	60526
	.byte	12,7,205,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51773
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_STMEM6',0,7,210,15,3
	.word	60590
	.byte	12,7,213,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51845
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_STSTAT',0,7,218,15,3
	.word	60654
	.byte	12,7,221,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52174
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_SWAPCTRL',0,7,226,15,3
	.word	60718
	.byte	12,7,229,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52294
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_SWRSTCON',0,7,234,15,3
	.word	60784
	.byte	12,7,237,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52464
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_SYSCON',0,7,242,15,3
	.word	60850
	.byte	12,7,245,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52727
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_SYSPLLCON0',0,7,250,15,3
	.word	60914
	.byte	12,7,253,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53006
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_SYSPLLCON1',0,7,130,16,3
	.word	60982
	.byte	12,7,133,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53110
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_SYSPLLCON2',0,7,138,16,3
	.word	61050
	.byte	12,7,141,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53216
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_SYSPLLSTAT',0,7,146,16,3
	.word	61118
	.byte	12,7,149,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53439
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_TRAPCLR',0,7,154,16,3
	.word	61186
	.byte	12,7,157,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53587
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_TRAPDIS0',0,7,162,16,3
	.word	61251
	.byte	12,7,165,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54075
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_TRAPDIS1',0,7,170,16,3
	.word	61317
	.byte	12,7,173,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54372
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_TRAPSET',0,7,178,16,3
	.word	61383
	.byte	12,7,181,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54520
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_TRAPSTAT',0,7,186,16,3
	.word	61448
	.byte	30
	.byte	'Ifx_SCU_WDTCPU_CON0',0,7,194,16,3
	.word	1233
	.byte	30
	.byte	'Ifx_SCU_WDTCPU_CON1',0,7,202,16,3
	.word	1499
	.byte	30
	.byte	'Ifx_SCU_WDTCPU_SR',0,7,210,16,3
	.word	1730
	.byte	12,7,213,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54770
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_WDTS_CON0',0,7,218,16,3
	.word	61599
	.byte	12,7,221,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54896
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_WDTS_CON1',0,7,226,16,3
	.word	61666
	.byte	12,7,229,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55148
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_WDTS_SR',0,7,234,16,3
	.word	61733
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX',0,7,246,16,25,4,13
	.byte	'ESRCFGX',0
	.word	57172
	.byte	4,2,35,0,0,14
	.word	61798
	.byte	30
	.byte	'Ifx_SCU_ESRCFGX',0,7,249,16,3
	.word	61839
	.byte	14
	.word	1770
	.byte	30
	.byte	'Ifx_SCU_WDTCPU',0,7,141,17,3
	.word	61869
	.byte	10
	.byte	'_Ifx_SCU_WDTS',0,7,156,17,25,12,13
	.byte	'CON0',0
	.word	61599
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	61666
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	61733
	.byte	4,2,35,8,0,14
	.word	61898
	.byte	30
	.byte	'Ifx_SCU_WDTS',0,7,161,17,3
	.word	61959
	.byte	18,8
	.word	61798
	.byte	19,1,0,14
	.word	61986
	.byte	18,20
	.word	455
	.byte	19,19,0,18,36
	.word	455
	.byte	19,35,0,18,16
	.word	56797
	.byte	19,3,0,18,16
	.word	57556
	.byte	19,3,0,18,72
	.word	1770
	.byte	19,5,0,14
	.word	62036
	.byte	14
	.word	61898
	.byte	18,176,2
	.word	455
	.byte	19,175,2,0,10
	.byte	'_Ifx_SCU',0,7,176,17,25,128,8,13
	.byte	'reserved_0',0
	.word	5553
	.byte	8,2,35,0,13
	.byte	'ID',0
	.word	57496
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	3733
	.byte	4,2,35,12,13
	.byte	'OSCCON',0
	.word	58331
	.byte	4,2,35,16,13
	.byte	'SYSPLLSTAT',0
	.word	61118
	.byte	4,2,35,20,13
	.byte	'SYSPLLCON0',0
	.word	60914
	.byte	4,2,35,24,13
	.byte	'SYSPLLCON1',0
	.word	60982
	.byte	4,2,35,28,13
	.byte	'SYSPLLCON2',0
	.word	61050
	.byte	4,2,35,32,13
	.byte	'PERPLLSTAT',0
	.word	58909
	.byte	4,2,35,36,13
	.byte	'PERPLLCON0',0
	.word	58773
	.byte	4,2,35,40,13
	.byte	'PERPLLCON1',0
	.word	58841
	.byte	4,2,35,44,13
	.byte	'CCUCON0',0
	.word	55692
	.byte	4,2,35,48,13
	.byte	'CCUCON1',0
	.word	55757
	.byte	4,2,35,52,13
	.byte	'FDR',0
	.word	57374
	.byte	4,2,35,56,13
	.byte	'EXTCON',0
	.word	57310
	.byte	4,2,35,60,13
	.byte	'CCUCON2',0
	.word	55954
	.byte	4,2,35,64,13
	.byte	'CCUCON3',0
	.word	56019
	.byte	4,2,35,68,13
	.byte	'CCUCON4',0
	.word	56084
	.byte	4,2,35,72,13
	.byte	'CCUCON5',0
	.word	56149
	.byte	4,2,35,76,13
	.byte	'RSTSTAT',0
	.word	59949
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	3733
	.byte	4,2,35,84,13
	.byte	'RSTCON',0
	.word	59755
	.byte	4,2,35,88,13
	.byte	'ARSTDIS',0
	.word	55627
	.byte	4,2,35,92,13
	.byte	'SWRSTCON',0
	.word	60784
	.byte	4,2,35,96,13
	.byte	'RSTCON2',0
	.word	59819
	.byte	4,2,35,100,13
	.byte	'RSTCON3',0
	.word	59884
	.byte	4,2,35,104,13
	.byte	'reserved_6C',0
	.word	3733
	.byte	4,2,35,108,13
	.byte	'ESRCFGX',0
	.word	61995
	.byte	8,2,35,112,13
	.byte	'ESROCFG',0
	.word	57245
	.byte	4,2,35,120,13
	.byte	'SYSCON',0
	.word	60850
	.byte	4,2,35,124,13
	.byte	'CCUCON6',0
	.word	56214
	.byte	4,3,35,128,1,13
	.byte	'CCUCON7',0
	.word	56279
	.byte	4,3,35,132,1,13
	.byte	'CCUCON8',0
	.word	56344
	.byte	4,3,35,136,1,13
	.byte	'CCUCON9',0
	.word	56409
	.byte	4,3,35,140,1,13
	.byte	'CCUCON10',0
	.word	55822
	.byte	4,3,35,144,1,13
	.byte	'CCUCON11',0
	.word	55888
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	3733
	.byte	4,3,35,152,1,13
	.byte	'PDR',0
	.word	58650
	.byte	4,3,35,156,1,13
	.byte	'IOCR',0
	.word	57678
	.byte	4,3,35,160,1,13
	.byte	'OUT',0
	.word	58395
	.byte	4,3,35,164,1,13
	.byte	'OMR',0
	.word	58270
	.byte	4,3,35,168,1,13
	.byte	'IN',0
	.word	57618
	.byte	4,3,35,172,1,13
	.byte	'reserved_B0',0
	.word	15787
	.byte	16,3,35,176,1,13
	.byte	'STSTAT',0
	.word	60654
	.byte	4,3,35,192,1,13
	.byte	'STCON',0
	.word	60207
	.byte	4,3,35,196,1,13
	.byte	'PMCSR0',0
	.word	58977
	.byte	4,3,35,200,1,13
	.byte	'PMCSR1',0
	.word	59041
	.byte	4,3,35,204,1,13
	.byte	'PMCSR2',0
	.word	59105
	.byte	4,3,35,208,1,13
	.byte	'PMCSR3',0
	.word	59169
	.byte	4,3,35,212,1,13
	.byte	'PMCSR4',0
	.word	59233
	.byte	4,3,35,216,1,13
	.byte	'PMCSR5',0
	.word	59297
	.byte	4,3,35,220,1,13
	.byte	'reserved_E0',0
	.word	3733
	.byte	4,3,35,224,1,13
	.byte	'PMSTAT0',0
	.word	59361
	.byte	4,3,35,228,1,13
	.byte	'PMSWCR1',0
	.word	59426
	.byte	4,3,35,232,1,13
	.byte	'reserved_EC',0
	.word	15787
	.byte	16,3,35,236,1,13
	.byte	'EMSR',0
	.word	57047
	.byte	4,3,35,252,1,13
	.byte	'EMSSW',0
	.word	57109
	.byte	4,3,35,128,2,13
	.byte	'DTSCSTAT',0
	.word	56603
	.byte	4,3,35,132,2,13
	.byte	'DTSCLIM',0
	.word	56538
	.byte	4,3,35,136,2,13
	.byte	'reserved_10C',0
	.word	62000
	.byte	20,3,35,140,2,13
	.byte	'TRAPDIS1',0
	.word	61317
	.byte	4,3,35,160,2,13
	.byte	'TRAPSTAT',0
	.word	61448
	.byte	4,3,35,164,2,13
	.byte	'TRAPSET',0
	.word	61383
	.byte	4,3,35,168,2,13
	.byte	'TRAPCLR',0
	.word	61186
	.byte	4,3,35,172,2,13
	.byte	'TRAPDIS0',0
	.word	61251
	.byte	4,3,35,176,2,13
	.byte	'LCLCON0',0
	.word	58012
	.byte	4,3,35,180,2,13
	.byte	'LCLCON1',0
	.word	58077
	.byte	4,3,35,184,2,13
	.byte	'LCLTEST',0
	.word	58142
	.byte	4,3,35,188,2,13
	.byte	'CHIPID',0
	.word	56474
	.byte	4,3,35,192,2,13
	.byte	'MANID',0
	.word	58207
	.byte	4,3,35,196,2,13
	.byte	'reserved_148',0
	.word	3733
	.byte	4,3,35,200,2,13
	.byte	'SWAPCTRL',0
	.word	60718
	.byte	4,3,35,204,2,13
	.byte	'reserved_150',0
	.word	62000
	.byte	20,3,35,208,2,13
	.byte	'LBISTCTRL0',0
	.word	57740
	.byte	4,3,35,228,2,13
	.byte	'LBISTCTRL1',0
	.word	57808
	.byte	4,3,35,232,2,13
	.byte	'LBISTCTRL2',0
	.word	57876
	.byte	4,3,35,236,2,13
	.byte	'LBISTCTRL3',0
	.word	57944
	.byte	4,3,35,240,2,13
	.byte	'reserved_174',0
	.word	15787
	.byte	16,3,35,244,2,13
	.byte	'STMEM1',0
	.word	60270
	.byte	4,3,35,132,3,13
	.byte	'STMEM2',0
	.word	60334
	.byte	4,3,35,136,3,13
	.byte	'PDISC',0
	.word	58587
	.byte	4,3,35,140,3,13
	.byte	'reserved_190',0
	.word	5553
	.byte	8,3,35,144,3,13
	.byte	'PMTRCSR0',0
	.word	59491
	.byte	4,3,35,152,3,13
	.byte	'PMTRCSR1',0
	.word	59557
	.byte	4,3,35,156,3,13
	.byte	'PMTRCSR2',0
	.word	59623
	.byte	4,3,35,160,3,13
	.byte	'PMTRCSR3',0
	.word	59689
	.byte	4,3,35,164,3,13
	.byte	'reserved_1A8',0
	.word	4924
	.byte	24,3,35,168,3,13
	.byte	'STMEM3',0
	.word	60398
	.byte	4,3,35,192,3,13
	.byte	'STMEM4',0
	.word	60462
	.byte	4,3,35,196,3,13
	.byte	'STMEM5',0
	.word	60526
	.byte	4,3,35,200,3,13
	.byte	'STMEM6',0
	.word	60590
	.byte	4,3,35,204,3,13
	.byte	'reserved_1D0',0
	.word	15787
	.byte	16,3,35,208,3,13
	.byte	'OVCENABLE',0
	.word	58520
	.byte	4,3,35,224,3,13
	.byte	'OVCCON',0
	.word	58456
	.byte	4,3,35,228,3,13
	.byte	'reserved_1E8',0
	.word	62009
	.byte	36,3,35,232,3,13
	.byte	'EIFILT',0
	.word	56859
	.byte	4,3,35,140,4,13
	.byte	'EICR',0
	.word	62018
	.byte	16,3,35,144,4,13
	.byte	'EIFR',0
	.word	56923
	.byte	4,3,35,160,4,13
	.byte	'FMR',0
	.word	57435
	.byte	4,3,35,164,4,13
	.byte	'PDRR',0
	.word	58711
	.byte	4,3,35,168,4,13
	.byte	'IGCR',0
	.word	62027
	.byte	16,3,35,172,4,13
	.byte	'reserved_23C',0
	.word	15787
	.byte	16,3,35,188,4,13
	.byte	'WDTCPU',0
	.word	62045
	.byte	72,3,35,204,4,13
	.byte	'reserved_294',0
	.word	5553
	.byte	8,3,35,148,5,13
	.byte	'EICON0',0
	.word	56669
	.byte	4,3,35,156,5,13
	.byte	'EICON1',0
	.word	56733
	.byte	4,3,35,160,5,13
	.byte	'EISR',0
	.word	56985
	.byte	4,3,35,164,5,13
	.byte	'WDTS',0
	.word	62050
	.byte	12,3,35,168,5,13
	.byte	'SEICON0',0
	.word	60014
	.byte	4,3,35,180,5,13
	.byte	'SEICON1',0
	.word	60079
	.byte	4,3,35,184,5,13
	.byte	'SEISR',0
	.word	60144
	.byte	4,3,35,188,5,13
	.byte	'reserved_2C0',0
	.word	62055
	.byte	176,2,3,35,192,5,13
	.byte	'ACCEN11',0
	.word	55562
	.byte	4,3,35,240,7,13
	.byte	'ACCEN10',0
	.word	55497
	.byte	4,3,35,244,7,13
	.byte	'ACCEN01',0
	.word	55432
	.byte	4,3,35,248,7,13
	.byte	'ACCEN00',0
	.word	55367
	.byte	4,3,35,252,7,0,14
	.word	62066
	.byte	30
	.byte	'Ifx_SCU',0,7,166,18,3
	.word	64187
	.byte	10
	.byte	'_Ifx_CPU_A_Bits',0,22,68,16,4,11
	.byte	'ADDR',0,4
	.word	1121
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_A_Bits',0,22,71,3
	.word	64209
	.byte	10
	.byte	'_Ifx_CPU_BIV_Bits',0,22,74,16,4,11
	.byte	'VSS',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'BIV',0,4
	.word	1121
	.byte	31,0,2,35,0,0,30
	.byte	'Ifx_CPU_BIV_Bits',0,22,78,3
	.word	64270
	.byte	10
	.byte	'_Ifx_CPU_BLK_OMASK_Bits',0,22,81,16,4,11
	.byte	'reserved_0',0,4
	.word	1121
	.byte	5,27,2,35,0,11
	.byte	'OMASK',0,4
	.word	1121
	.byte	12,15,2,35,0,11
	.byte	'ONE',0,4
	.word	1121
	.byte	11,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	1121
	.byte	4,0,2,35,0,0,30
	.byte	'Ifx_CPU_BLK_OMASK_Bits',0,22,87,3
	.word	64349
	.byte	10
	.byte	'_Ifx_CPU_BLK_OTAR_Bits',0,22,90,16,4,11
	.byte	'reserved_0',0,4
	.word	1121
	.byte	5,27,2,35,0,11
	.byte	'TBASE',0,4
	.word	1121
	.byte	23,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	1121
	.byte	4,0,2,35,0,0,30
	.byte	'Ifx_CPU_BLK_OTAR_Bits',0,22,95,3
	.word	64487
	.byte	10
	.byte	'_Ifx_CPU_BLK_RABR_Bits',0,22,98,16,4,11
	.byte	'reserved_0',0,4
	.word	1121
	.byte	5,27,2,35,0,11
	.byte	'OBASE',0,4
	.word	1121
	.byte	17,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	1121
	.byte	2,8,2,35,0,11
	.byte	'OMEM',0,4
	.word	1121
	.byte	4,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	1121
	.byte	3,1,2,35,0,11
	.byte	'OVEN',0,4
	.word	1121
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_BLK_RABR_Bits',0,22,106,3
	.word	64608
	.byte	10
	.byte	'_Ifx_CPU_BTV_Bits',0,22,109,16,4,11
	.byte	'reserved_0',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'BTV',0,4
	.word	1121
	.byte	31,0,2,35,0,0,30
	.byte	'Ifx_CPU_BTV_Bits',0,22,113,3
	.word	64784
	.byte	10
	.byte	'_Ifx_CPU_CCNT_Bits',0,22,116,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	1121
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	1121
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_CCNT_Bits',0,22,120,3
	.word	64870
	.byte	10
	.byte	'_Ifx_CPU_CCTRL_Bits',0,22,123,16,4,11
	.byte	'CM',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'CE',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'M1',0,4
	.word	1121
	.byte	3,27,2,35,0,11
	.byte	'M2',0,4
	.word	1121
	.byte	3,24,2,35,0,11
	.byte	'M3',0,4
	.word	1121
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	1121
	.byte	21,0,2,35,0,0,30
	.byte	'Ifx_CPU_CCTRL_Bits',0,22,131,1,3
	.word	64959
	.byte	10
	.byte	'_Ifx_CPU_COMPAT_Bits',0,22,134,1,16,4,11
	.byte	'reserved_0',0,4
	.word	1121
	.byte	3,29,2,35,0,11
	.byte	'RM',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'SP',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	1121
	.byte	27,0,2,35,0,0,30
	.byte	'Ifx_CPU_COMPAT_Bits',0,22,140,1,3
	.word	65106
	.byte	10
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,22,143,1,16,4,11
	.byte	'CORE_ID',0,4
	.word	1121
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	1121
	.byte	29,0,2,35,0,0,30
	.byte	'Ifx_CPU_CORE_ID_Bits',0,22,147,1,3
	.word	65235
	.byte	10
	.byte	'_Ifx_CPU_CPR_L_Bits',0,22,150,1,16,4,11
	.byte	'reserved_0',0,4
	.word	1121
	.byte	5,27,2,35,0,11
	.byte	'LOWBND',0,4
	.word	1121
	.byte	27,0,2,35,0,0,30
	.byte	'Ifx_CPU_CPR_L_Bits',0,22,154,1,3
	.word	65335
	.byte	10
	.byte	'_Ifx_CPU_CPR_U_Bits',0,22,157,1,16,4,11
	.byte	'reserved_0',0,4
	.word	1121
	.byte	5,27,2,35,0,11
	.byte	'UPPBND',0,4
	.word	1121
	.byte	27,0,2,35,0,0,30
	.byte	'Ifx_CPU_CPR_U_Bits',0,22,161,1,3
	.word	65430
	.byte	10
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,22,164,1,16,4,11
	.byte	'MOD_REV',0,4
	.word	1121
	.byte	8,24,2,35,0,11
	.byte	'MOD_32B',0,4
	.word	1121
	.byte	8,16,2,35,0,11
	.byte	'MOD',0,4
	.word	1121
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_CPU_CPU_ID_Bits',0,22,169,1,3
	.word	65525
	.byte	10
	.byte	'_Ifx_CPU_CPXE_Bits',0,22,172,1,16,4,11
	.byte	'XE_N',0,4
	.word	1121
	.byte	10,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	1121
	.byte	22,0,2,35,0,0,30
	.byte	'Ifx_CPU_CPXE_Bits',0,22,176,1,3
	.word	65635
	.byte	10
	.byte	'_Ifx_CPU_CREVT_Bits',0,22,179,1,16,4,11
	.byte	'EVTA',0,4
	.word	1121
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	1121
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	1121
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	1121
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_CPU_CREVT_Bits',0,22,187,1,3
	.word	65727
	.byte	10
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,22,190,1,16,4,11
	.byte	'CID',0,4
	.word	1121
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	1121
	.byte	29,0,2,35,0,0,30
	.byte	'Ifx_CPU_CUS_ID_Bits',0,22,194,1,3
	.word	65881
	.byte	10
	.byte	'_Ifx_CPU_D_Bits',0,22,197,1,16,4,11
	.byte	'DATA',0,4
	.word	1121
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_D_Bits',0,22,200,1,3
	.word	65975
	.byte	10
	.byte	'_Ifx_CPU_DATR_Bits',0,22,203,1,16,4,11
	.byte	'reserved_0',0,4
	.word	1121
	.byte	3,29,2,35,0,11
	.byte	'SBE',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	1121
	.byte	5,23,2,35,0,11
	.byte	'CWE',0,4
	.word	1121
	.byte	1,22,2,35,0,11
	.byte	'CFE',0,4
	.word	1121
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	1121
	.byte	3,18,2,35,0,11
	.byte	'SOE',0,4
	.word	1121
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	1121
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	1121
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_CPU_DATR_Bits',0,22,214,1,3
	.word	66038
	.byte	10
	.byte	'_Ifx_CPU_DBGSR_Bits',0,22,217,1,16,4,11
	.byte	'DE',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'HALT',0,4
	.word	1121
	.byte	2,29,2,35,0,11
	.byte	'SIH',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'SUSP',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	1121
	.byte	1,26,2,35,0,11
	.byte	'PREVSUSP',0,4
	.word	1121
	.byte	1,25,2,35,0,11
	.byte	'PEVT',0,4
	.word	1121
	.byte	1,24,2,35,0,11
	.byte	'EVTSRC',0,4
	.word	1121
	.byte	5,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	1121
	.byte	19,0,2,35,0,0,30
	.byte	'Ifx_CPU_DBGSR_Bits',0,22,228,1,3
	.word	66264
	.byte	10
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,22,231,1,16,4,11
	.byte	'DTA',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	1121
	.byte	31,0,2,35,0,0,30
	.byte	'Ifx_CPU_DBGTCR_Bits',0,22,235,1,3
	.word	66479
	.byte	10
	.byte	'_Ifx_CPU_DCON0_Bits',0,22,238,1,16,4,11
	.byte	'reserved_0',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'DCBYP',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	1121
	.byte	30,0,2,35,0,0,30
	.byte	'Ifx_CPU_DCON0_Bits',0,22,243,1,3
	.word	66573
	.byte	10
	.byte	'_Ifx_CPU_DCON2_Bits',0,22,246,1,16,4,11
	.byte	'DCACHE_SZE',0,4
	.word	1121
	.byte	16,16,2,35,0,11
	.byte	'DSCRATCH_SZE',0,4
	.word	1121
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_CPU_DCON2_Bits',0,22,250,1,3
	.word	66689
	.byte	10
	.byte	'_Ifx_CPU_DCX_Bits',0,22,253,1,16,4,11
	.byte	'reserved_0',0,4
	.word	1121
	.byte	6,26,2,35,0,11
	.byte	'DCXVALUE',0,4
	.word	1121
	.byte	26,0,2,35,0,0,30
	.byte	'Ifx_CPU_DCX_Bits',0,22,129,2,3
	.word	66790
	.byte	10
	.byte	'_Ifx_CPU_DEADD_Bits',0,22,132,2,16,4,11
	.byte	'ERROR_ADDRESS',0,4
	.word	1121
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_DEADD_Bits',0,22,135,2,3
	.word	66883
	.byte	10
	.byte	'_Ifx_CPU_DIEAR_Bits',0,22,138,2,16,4,11
	.byte	'TA',0,4
	.word	1121
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_DIEAR_Bits',0,22,141,2,3
	.word	66963
	.byte	10
	.byte	'_Ifx_CPU_DIETR_Bits',0,22,144,2,16,4,11
	.byte	'IED',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	1121
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	1121
	.byte	6,21,2,35,0,11
	.byte	'IE_UNC',0,4
	.word	1121
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	1121
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	1121
	.byte	1,18,2,35,0,11
	.byte	'IE_DLMU',0,4
	.word	1121
	.byte	1,17,2,35,0,11
	.byte	'IE_LPB',0,4
	.word	1121
	.byte	1,16,2,35,0,11
	.byte	'IE_MTMV',0,4
	.word	1121
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	1121
	.byte	15,0,2,35,0,0,30
	.byte	'Ifx_CPU_DIETR_Bits',0,22,159,2,3
	.word	67032
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,22,162,2,16,4,11
	.byte	'EN0',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	1121
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	1121
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	1121
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	1121
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	1121
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	1121
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	1121
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	1121
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	1121
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	1121
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	1121
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	1121
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	1121
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	1121
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	1121
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	1121
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	1121
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	1121
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	1121
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	1121
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	1121
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	1121
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	1121
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	1121
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	1121
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	1121
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	1121
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	1121
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,22,196,2,3
	.word	67316
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,22,199,2,16,4,11
	.byte	'EN0',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	1121
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	1121
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	1121
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	1121
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	1121
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	1121
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	1121
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	1121
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	1121
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	1121
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	1121
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	1121
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	1121
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	1121
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	1121
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	1121
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	1121
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	1121
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	1121
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	1121
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	1121
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	1121
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	1121
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	1121
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	1121
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	1121
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	1121
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	1121
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,22,233,2,3
	.word	67907
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,22,236,2,16,4,11
	.byte	'EN32',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	1121
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	1121
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	1121
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	1121
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	1121
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	1121
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	1121
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	1121
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	1121
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	1121
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	1121
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	1121
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	1121
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	1121
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	1121
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	1121
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	1121
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	1121
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	1121
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	1121
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	1121
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	1121
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	1121
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	1121
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	1121
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	1121
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	1121
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	1121
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,22,142,3,3
	.word	68498
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,22,145,3,16,4,11
	.byte	'EN32',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	1121
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	1121
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	1121
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	1121
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	1121
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	1121
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	1121
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	1121
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	1121
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	1121
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	1121
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	1121
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	1121
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	1121
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	1121
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	1121
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	1121
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	1121
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	1121
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	1121
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	1121
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	1121
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	1121
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	1121
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	1121
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	1121
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	1121
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	1121
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,22,179,3,3
	.word	69099
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,22,182,3,16,4,11
	.byte	'reserved_0',0,4
	.word	1121
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	1121
	.byte	27,0,2,35,0,0,30
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,22,186,3,3
	.word	69700
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,22,189,3,16,4,11
	.byte	'reserved_0',0,4
	.word	1121
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	1121
	.byte	27,0,2,35,0,0,30
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,22,193,3,3
	.word	69815
	.byte	10
	.byte	'_Ifx_CPU_DMS_Bits',0,22,196,3,16,4,11
	.byte	'reserved_0',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'DMSVALUE',0,4
	.word	1121
	.byte	31,0,2,35,0,0,30
	.byte	'Ifx_CPU_DMS_Bits',0,22,200,3,3
	.word	69930
	.byte	10
	.byte	'_Ifx_CPU_DPRE_Bits',0,22,203,3,16,4,11
	.byte	'RE_N',0,4
	.word	1121
	.byte	18,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	1121
	.byte	14,0,2,35,0,0,30
	.byte	'Ifx_CPU_DPRE_Bits',0,22,207,3,3
	.word	70023
	.byte	10
	.byte	'_Ifx_CPU_DPR_L_Bits',0,22,210,3,16,4,11
	.byte	'reserved_0',0,4
	.word	1121
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	1121
	.byte	29,0,2,35,0,0,30
	.byte	'Ifx_CPU_DPR_L_Bits',0,22,214,3,3
	.word	70115
	.byte	10
	.byte	'_Ifx_CPU_DPR_U_Bits',0,22,217,3,16,4,11
	.byte	'reserved_0',0,4
	.word	1121
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	1121
	.byte	29,0,2,35,0,0,30
	.byte	'Ifx_CPU_DPR_U_Bits',0,22,221,3,3
	.word	70210
	.byte	10
	.byte	'_Ifx_CPU_DPWE_Bits',0,22,224,3,16,4,11
	.byte	'WE_N',0,4
	.word	1121
	.byte	18,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	1121
	.byte	14,0,2,35,0,0,30
	.byte	'Ifx_CPU_DPWE_Bits',0,22,228,3,3
	.word	70305
	.byte	10
	.byte	'_Ifx_CPU_DSTR_Bits',0,22,231,3,16,4,11
	.byte	'SRE',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'GAE',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'LBE',0,4
	.word	1121
	.byte	1,29,2,35,0,11
	.byte	'DRE',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	1121
	.byte	2,26,2,35,0,11
	.byte	'CRE',0,4
	.word	1121
	.byte	1,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	1121
	.byte	7,18,2,35,0,11
	.byte	'DTME',0,4
	.word	1121
	.byte	1,17,2,35,0,11
	.byte	'LOE',0,4
	.word	1121
	.byte	1,16,2,35,0,11
	.byte	'SDE',0,4
	.word	1121
	.byte	1,15,2,35,0,11
	.byte	'SCE',0,4
	.word	1121
	.byte	1,14,2,35,0,11
	.byte	'CAC',0,4
	.word	1121
	.byte	1,13,2,35,0,11
	.byte	'MPE',0,4
	.word	1121
	.byte	1,12,2,35,0,11
	.byte	'CLE',0,4
	.word	1121
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	1121
	.byte	3,8,2,35,0,11
	.byte	'ALN',0,4
	.word	1121
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	1121
	.byte	7,0,2,35,0,0,30
	.byte	'Ifx_CPU_DSTR_Bits',0,22,250,3,3
	.word	70397
	.byte	10
	.byte	'_Ifx_CPU_EXEVT_Bits',0,22,253,3,16,4,11
	.byte	'EVTA',0,4
	.word	1121
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	1121
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	1121
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	1121
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_CPU_EXEVT_Bits',0,22,133,4,3
	.word	70736
	.byte	10
	.byte	'_Ifx_CPU_FCX_Bits',0,22,136,4,16,4,11
	.byte	'FCXO',0,4
	.word	1121
	.byte	16,16,2,35,0,11
	.byte	'FCXS',0,4
	.word	1121
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	1121
	.byte	12,0,2,35,0,0,30
	.byte	'Ifx_CPU_FCX_Bits',0,22,141,4,3
	.word	70890
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON0_Bits',0,22,144,4,16,4,11
	.byte	'TAG1',0,4
	.word	1121
	.byte	6,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	1121
	.byte	2,24,2,35,0,11
	.byte	'TAG2',0,4
	.word	1121
	.byte	6,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	1121
	.byte	2,16,2,35,0,11
	.byte	'TAG3',0,4
	.word	1121
	.byte	6,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	1121
	.byte	2,8,2,35,0,11
	.byte	'TAG4',0,4
	.word	1121
	.byte	6,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	1121
	.byte	2,0,2,35,0,0,30
	.byte	'Ifx_CPU_FLASHCON0_Bits',0,22,154,4,3
	.word	70996
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON1_Bits',0,22,157,4,16,4,11
	.byte	'STALL',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	1121
	.byte	15,16,2,35,0,11
	.byte	'MASKUECC',0,4
	.word	1121
	.byte	2,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	1121
	.byte	6,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	1121
	.byte	2,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	1121
	.byte	6,0,2,35,0,0,30
	.byte	'Ifx_CPU_FLASHCON1_Bits',0,22,165,4,3
	.word	71214
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON2_Bits',0,22,168,4,16,4,11
	.byte	'RECDIS',0,4
	.word	1121
	.byte	2,30,2,35,0,11
	.byte	'ECCCORDIS',0,4
	.word	1121
	.byte	2,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	1121
	.byte	4,24,2,35,0,11
	.byte	'HMARGIN',0,4
	.word	1121
	.byte	2,22,2,35,0,11
	.byte	'MSEL',0,4
	.word	1121
	.byte	2,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	1121
	.byte	4,16,2,35,0,11
	.byte	'ECCSCLR',0,4
	.word	1121
	.byte	2,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	1121
	.byte	6,8,2,35,0,11
	.byte	'SBABCLR',0,4
	.word	1121
	.byte	2,6,2,35,0,11
	.byte	'DBABCLR',0,4
	.word	1121
	.byte	2,4,2,35,0,11
	.byte	'MBABCLR',0,4
	.word	1121
	.byte	2,2,2,35,0,11
	.byte	'ZBABCLR',0,4
	.word	1121
	.byte	2,0,2,35,0,0,30
	.byte	'Ifx_CPU_FLASHCON2_Bits',0,22,182,4,3
	.word	71405
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON3_Bits',0,22,185,4,16,4,11
	.byte	'ECCERRINJ',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'EDCERRINJ',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'SBABERRINJ',0,4
	.word	1121
	.byte	1,29,2,35,0,11
	.byte	'DBABERRINJ',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'MBABERRINJ',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'ZBABERRINJ',0,4
	.word	1121
	.byte	1,26,2,35,0,11
	.byte	'SBERERRINJ',0,4
	.word	1121
	.byte	1,25,2,35,0,11
	.byte	'DBERERRINJ',0,4
	.word	1121
	.byte	1,24,2,35,0,11
	.byte	'NVMCERRINJ',0,4
	.word	1121
	.byte	1,23,2,35,0,11
	.byte	'FLCONERRINJ',0,4
	.word	1121
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	1121
	.byte	22,0,2,35,0,0,30
	.byte	'Ifx_CPU_FLASHCON3_Bits',0,22,198,4,3
	.word	71705
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON4_Bits',0,22,201,4,16,4,11
	.byte	'DDIS',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	1121
	.byte	31,0,2,35,0,0,30
	.byte	'Ifx_CPU_FLASHCON4_Bits',0,22,205,4,3
	.word	72010
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,22,208,4,16,4,11
	.byte	'TST',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'TCL',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	1121
	.byte	6,24,2,35,0,11
	.byte	'RM',0,4
	.word	1121
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	1121
	.byte	8,14,2,35,0,11
	.byte	'FXE',0,4
	.word	1121
	.byte	1,13,2,35,0,11
	.byte	'FUE',0,4
	.word	1121
	.byte	1,12,2,35,0,11
	.byte	'FZE',0,4
	.word	1121
	.byte	1,11,2,35,0,11
	.byte	'FVE',0,4
	.word	1121
	.byte	1,10,2,35,0,11
	.byte	'FIE',0,4
	.word	1121
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	1121
	.byte	3,6,2,35,0,11
	.byte	'FX',0,4
	.word	1121
	.byte	1,5,2,35,0,11
	.byte	'FU',0,4
	.word	1121
	.byte	1,4,2,35,0,11
	.byte	'FZ',0,4
	.word	1121
	.byte	1,3,2,35,0,11
	.byte	'FV',0,4
	.word	1121
	.byte	1,2,2,35,0,11
	.byte	'FI',0,4
	.word	1121
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	1121
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,22,227,4,3
	.word	72111
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,22,230,4,16,4,11
	.byte	'OPC',0,4
	.word	1121
	.byte	8,24,2,35,0,11
	.byte	'FMT',0,4
	.word	1121
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	1121
	.byte	7,16,2,35,0,11
	.byte	'DREG',0,4
	.word	1121
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	1121
	.byte	12,0,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,22,237,4,3
	.word	72460
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,22,240,4,16,4,11
	.byte	'PC',0,4
	.word	1121
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,22,243,4,3
	.word	72620
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,22,246,4,16,4,11
	.byte	'SRC1',0,4
	.word	1121
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,22,249,4,3
	.word	72701
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,22,252,4,16,4,11
	.byte	'SRC2',0,4
	.word	1121
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,22,255,4,3
	.word	72788
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,22,130,5,16,4,11
	.byte	'SRC3',0,4
	.word	1121
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,22,133,5,3
	.word	72875
	.byte	10
	.byte	'_Ifx_CPU_ICNT_Bits',0,22,136,5,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	1121
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	1121
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_ICNT_Bits',0,22,140,5,3
	.word	72962
	.byte	10
	.byte	'_Ifx_CPU_ICR_Bits',0,22,143,5,16,4,11
	.byte	'CCPN',0,4
	.word	1121
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	1121
	.byte	7,17,2,35,0,11
	.byte	'IE',0,4
	.word	1121
	.byte	1,16,2,35,0,11
	.byte	'PIPN',0,4
	.word	1121
	.byte	8,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	1121
	.byte	8,0,2,35,0,0,30
	.byte	'Ifx_CPU_ICR_Bits',0,22,150,5,3
	.word	73053
	.byte	10
	.byte	'_Ifx_CPU_ISP_Bits',0,22,153,5,16,4,11
	.byte	'ISP',0,4
	.word	1121
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_ISP_Bits',0,22,156,5,3
	.word	73195
	.byte	10
	.byte	'_Ifx_CPU_KRST0_Bits',0,22,159,5,16,4,11
	.byte	'RST',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'RSTSTAT',0,4
	.word	1121
	.byte	2,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	1121
	.byte	29,0,2,35,0,0,30
	.byte	'Ifx_CPU_KRST0_Bits',0,22,164,5,3
	.word	73261
	.byte	10
	.byte	'_Ifx_CPU_KRST1_Bits',0,22,167,5,16,4,11
	.byte	'RST',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	1121
	.byte	31,0,2,35,0,0,30
	.byte	'Ifx_CPU_KRST1_Bits',0,22,171,5,3
	.word	73372
	.byte	10
	.byte	'_Ifx_CPU_KRSTCLR_Bits',0,22,174,5,16,4,11
	.byte	'CLR',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	1121
	.byte	31,0,2,35,0,0,30
	.byte	'Ifx_CPU_KRSTCLR_Bits',0,22,178,5,3
	.word	73464
	.byte	10
	.byte	'_Ifx_CPU_LCX_Bits',0,22,181,5,16,4,11
	.byte	'LCXO',0,4
	.word	1121
	.byte	16,16,2,35,0,11
	.byte	'LCXS',0,4
	.word	1121
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	1121
	.byte	12,0,2,35,0,0,30
	.byte	'Ifx_CPU_LCX_Bits',0,22,186,5,3
	.word	73560
	.byte	10
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,22,189,5,16,4,11
	.byte	'EN0',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	1121
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	1121
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	1121
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	1121
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	1121
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	1121
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	1121
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	1121
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	1121
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	1121
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	1121
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	1121
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	1121
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	1121
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	1121
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	1121
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	1121
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	1121
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	1121
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	1121
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	1121
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	1121
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	1121
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	1121
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	1121
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	1121
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	1121
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	1121
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,22,223,5,3
	.word	73666
	.byte	10
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,22,226,5,16,4,11
	.byte	'EN32',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	1121
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	1121
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	1121
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	1121
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	1121
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	1121
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	1121
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	1121
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	1121
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	1121
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	1121
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	1121
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	1121
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	1121
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	1121
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	1121
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	1121
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	1121
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	1121
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	1121
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	1121
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	1121
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	1121
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	1121
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	1121
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	1121
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	1121
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	1121
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,22,132,6,3
	.word	74249
	.byte	10
	.byte	'_Ifx_CPU_M1CNT_Bits',0,22,135,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	1121
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	1121
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_M1CNT_Bits',0,22,139,6,3
	.word	74842
	.byte	10
	.byte	'_Ifx_CPU_M2CNT_Bits',0,22,142,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	1121
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	1121
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_M2CNT_Bits',0,22,146,6,3
	.word	74935
	.byte	10
	.byte	'_Ifx_CPU_M3CNT_Bits',0,22,149,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	1121
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	1121
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_M3CNT_Bits',0,22,153,6,3
	.word	75028
	.byte	10
	.byte	'_Ifx_CPU_OSEL_Bits',0,22,156,6,16,4,11
	.byte	'SHOVEN_X',0,4
	.word	1121
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_OSEL_Bits',0,22,159,6,3
	.word	75121
	.byte	10
	.byte	'_Ifx_CPU_PC_Bits',0,22,162,6,16,4,11
	.byte	'reserved_0',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'PC',0,4
	.word	1121
	.byte	31,0,2,35,0,0,30
	.byte	'Ifx_CPU_PC_Bits',0,22,166,6,3
	.word	75194
	.byte	10
	.byte	'_Ifx_CPU_PCON0_Bits',0,22,169,6,16,4,11
	.byte	'reserved_0',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'PCBYP',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	1121
	.byte	30,0,2,35,0,0,30
	.byte	'Ifx_CPU_PCON0_Bits',0,22,174,6,3
	.word	75279
	.byte	10
	.byte	'_Ifx_CPU_PCON1_Bits',0,22,177,6,16,4,11
	.byte	'PCINV',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'PBINV',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	1121
	.byte	30,0,2,35,0,0,30
	.byte	'Ifx_CPU_PCON1_Bits',0,22,182,6,3
	.word	75395
	.byte	10
	.byte	'_Ifx_CPU_PCON2_Bits',0,22,185,6,16,4,11
	.byte	'PCACHE_SZE',0,4
	.word	1121
	.byte	16,16,2,35,0,11
	.byte	'PSCRATCH_SZE',0,4
	.word	1121
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_CPU_PCON2_Bits',0,22,189,6,3
	.word	75506
	.byte	10
	.byte	'_Ifx_CPU_PCXI_Bits',0,22,192,6,16,4,11
	.byte	'PCXO',0,4
	.word	1121
	.byte	16,16,2,35,0,11
	.byte	'PCXS',0,4
	.word	1121
	.byte	4,12,2,35,0,11
	.byte	'UL',0,4
	.word	1121
	.byte	1,11,2,35,0,11
	.byte	'PIE',0,4
	.word	1121
	.byte	1,10,2,35,0,11
	.byte	'PCPN',0,4
	.word	1121
	.byte	8,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	1121
	.byte	2,0,2,35,0,0,30
	.byte	'Ifx_CPU_PCXI_Bits',0,22,200,6,3
	.word	75607
	.byte	10
	.byte	'_Ifx_CPU_PIEAR_Bits',0,22,203,6,16,4,11
	.byte	'TA',0,4
	.word	1121
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_PIEAR_Bits',0,22,206,6,3
	.word	75760
	.byte	10
	.byte	'_Ifx_CPU_PIETR_Bits',0,22,209,6,16,4,11
	.byte	'IED',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	1121
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	1121
	.byte	6,21,2,35,0,11
	.byte	'IE_UNC',0,4
	.word	1121
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	1121
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	1121
	.byte	1,18,2,35,0,11
	.byte	'IE_ADDR',0,4
	.word	1121
	.byte	1,17,2,35,0,11
	.byte	'IE_LPB',0,4
	.word	1121
	.byte	1,16,2,35,0,11
	.byte	'IE_MTMV',0,4
	.word	1121
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	1121
	.byte	15,0,2,35,0,0,30
	.byte	'Ifx_CPU_PIETR_Bits',0,22,224,6,3
	.word	75829
	.byte	10
	.byte	'_Ifx_CPU_PMA0_Bits',0,22,227,6,16,4,11
	.byte	'DAC',0,4
	.word	1121
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	1121
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_CPU_PMA0_Bits',0,22,231,6,3
	.word	76113
	.byte	10
	.byte	'_Ifx_CPU_PMA1_Bits',0,22,234,6,16,4,11
	.byte	'CAC',0,4
	.word	1121
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	1121
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_CPU_PMA1_Bits',0,22,238,6,3
	.word	76204
	.byte	10
	.byte	'_Ifx_CPU_PMA2_Bits',0,22,241,6,16,4,11
	.byte	'PSI',0,4
	.word	1121
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	1121
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_CPU_PMA2_Bits',0,22,245,6,3
	.word	76295
	.byte	10
	.byte	'_Ifx_CPU_PSTR_Bits',0,22,248,6,16,4,11
	.byte	'FRE',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'FBE',0,4
	.word	1121
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	1121
	.byte	9,20,2,35,0,11
	.byte	'FPE',0,4
	.word	1121
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	1121
	.byte	1,18,2,35,0,11
	.byte	'FME',0,4
	.word	1121
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	1121
	.byte	17,0,2,35,0,0,30
	.byte	'Ifx_CPU_PSTR_Bits',0,22,130,7,3
	.word	76386
	.byte	10
	.byte	'_Ifx_CPU_PSW_Bits',0,22,133,7,16,4,11
	.byte	'CDC',0,4
	.word	1121
	.byte	7,25,2,35,0,11
	.byte	'CDE',0,4
	.word	1121
	.byte	1,24,2,35,0,11
	.byte	'GW',0,4
	.word	1121
	.byte	1,23,2,35,0,11
	.byte	'IS',0,4
	.word	1121
	.byte	1,22,2,35,0,11
	.byte	'IO',0,4
	.word	1121
	.byte	2,20,2,35,0,11
	.byte	'PRS',0,4
	.word	1121
	.byte	2,18,2,35,0,11
	.byte	'S',0,4
	.word	1121
	.byte	1,17,2,35,0,11
	.byte	'PRS2',0,4
	.word	1121
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	1121
	.byte	8,8,2,35,0,11
	.byte	'USB',0,4
	.word	1121
	.byte	8,0,2,35,0,0,30
	.byte	'Ifx_CPU_PSW_Bits',0,22,145,7,3
	.word	76589
	.byte	10
	.byte	'_Ifx_CPU_RGN_ACCENA_Bits',0,22,148,7,16,4,11
	.byte	'EN0',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	1121
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	1121
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	1121
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	1121
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	1121
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	1121
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	1121
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	1121
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	1121
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	1121
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	1121
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	1121
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	1121
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	1121
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	1121
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	1121
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	1121
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	1121
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	1121
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	1121
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	1121
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	1121
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	1121
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	1121
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	1121
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	1121
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	1121
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	1121
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_RGN_ACCENA_Bits',0,22,182,7,3
	.word	76794
	.byte	10
	.byte	'_Ifx_CPU_RGN_ACCENB_Bits',0,22,185,7,16,4,11
	.byte	'EN32',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	1121
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	1121
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	1121
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	1121
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	1121
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	1121
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	1121
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	1121
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	1121
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	1121
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	1121
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	1121
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	1121
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	1121
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	1121
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	1121
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	1121
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	1121
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	1121
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	1121
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	1121
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	1121
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	1121
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	1121
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	1121
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	1121
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	1121
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	1121
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_RGN_ACCENB_Bits',0,22,219,7,3
	.word	77361
	.byte	10
	.byte	'_Ifx_CPU_RGN_LA_Bits',0,22,222,7,16,4,11
	.byte	'reserved_0',0,4
	.word	1121
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	1121
	.byte	27,0,2,35,0,0,30
	.byte	'Ifx_CPU_RGN_LA_Bits',0,22,226,7,3
	.word	77938
	.byte	10
	.byte	'_Ifx_CPU_RGN_UA_Bits',0,22,229,7,16,4,11
	.byte	'reserved_0',0,4
	.word	1121
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	1121
	.byte	27,0,2,35,0,0,30
	.byte	'Ifx_CPU_RGN_UA_Bits',0,22,233,7,3
	.word	78033
	.byte	10
	.byte	'_Ifx_CPU_SEGEN_Bits',0,22,236,7,16,4,11
	.byte	'ADFLIP',0,4
	.word	1121
	.byte	8,24,2,35,0,11
	.byte	'ADTYPE',0,4
	.word	1121
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	1121
	.byte	21,1,2,35,0,11
	.byte	'AE',0,4
	.word	1121
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_SEGEN_Bits',0,22,242,7,3
	.word	78128
	.byte	10
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,22,245,7,16,4,11
	.byte	'EN0',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	1121
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	1121
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	1121
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	1121
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	1121
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	1121
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	1121
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	1121
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	1121
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	1121
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	1121
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	1121
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	1121
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	1121
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	1121
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	1121
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	1121
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	1121
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	1121
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	1121
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	1121
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	1121
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	1121
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	1121
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	1121
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	1121
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	1121
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	1121
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,22,151,8,3
	.word	78256
	.byte	10
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,22,154,8,16,4,11
	.byte	'EN32',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	1121
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	1121
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	1121
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	1121
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	1121
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	1121
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	1121
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	1121
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	1121
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	1121
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	1121
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	1121
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	1121
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	1121
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	1121
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	1121
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	1121
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	1121
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	1121
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	1121
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	1121
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	1121
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	1121
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	1121
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	1121
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	1121
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	1121
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	1121
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,22,188,8,3
	.word	78839
	.byte	10
	.byte	'_Ifx_CPU_SMACON_Bits',0,22,191,8,16,4,11
	.byte	'reserved_0',0,4
	.word	1121
	.byte	24,8,2,35,0,11
	.byte	'IODT',0,4
	.word	1121
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	1121
	.byte	7,0,2,35,0,0,30
	.byte	'Ifx_CPU_SMACON_Bits',0,22,196,8,3
	.word	79432
	.byte	10
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,22,199,8,16,4,11
	.byte	'EN0',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	1121
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	1121
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	1121
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	1121
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	1121
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	1121
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	1121
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	1121
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	1121
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	1121
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	1121
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	1121
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	1121
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	1121
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	1121
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	1121
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	1121
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	1121
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	1121
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	1121
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	1121
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	1121
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	1121
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	1121
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	1121
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	1121
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	1121
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	1121
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,22,233,8,3
	.word	79550
	.byte	10
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,22,236,8,16,4,11
	.byte	'EN32',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	1121
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	1121
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	1121
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	1121
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	1121
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	1121
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	1121
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	1121
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	1121
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	1121
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	1121
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	1121
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	1121
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	1121
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	1121
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	1121
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	1121
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	1121
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	1121
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	1121
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	1121
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	1121
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	1121
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	1121
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	1121
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	1121
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	1121
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	1121
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,22,142,9,3
	.word	80139
	.byte	10
	.byte	'_Ifx_CPU_SWEVT_Bits',0,22,145,9,16,4,11
	.byte	'EVTA',0,4
	.word	1121
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	1121
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	1121
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	1121
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_CPU_SWEVT_Bits',0,22,153,9,3
	.word	80738
	.byte	10
	.byte	'_Ifx_CPU_SYSCON_Bits',0,22,156,9,16,4,11
	.byte	'FCDSF',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'PROTEN',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'TPROTEN',0,4
	.word	1121
	.byte	1,29,2,35,0,11
	.byte	'IS',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'TS',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	1121
	.byte	3,24,2,35,0,11
	.byte	'ESDIS',0,4
	.word	1121
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	1121
	.byte	7,16,2,35,0,11
	.byte	'U1_IED',0,4
	.word	1121
	.byte	1,15,2,35,0,11
	.byte	'U1_IOS',0,4
	.word	1121
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	1121
	.byte	6,8,2,35,0,11
	.byte	'BHALT',0,4
	.word	1121
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	1121
	.byte	7,0,2,35,0,0,30
	.byte	'Ifx_CPU_SYSCON_Bits',0,22,171,9,3
	.word	80892
	.byte	10
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,22,174,9,16,4,11
	.byte	'ASI',0,4
	.word	1121
	.byte	5,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	1121
	.byte	27,0,2,35,0,0,30
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,22,178,9,3
	.word	81191
	.byte	10
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,22,181,9,16,4,11
	.byte	'TEXP0',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'TEXP1',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'TEXP2',0,4
	.word	1121
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	1121
	.byte	13,16,2,35,0,11
	.byte	'TTRAP',0,4
	.word	1121
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	1121
	.byte	15,0,2,35,0,0,30
	.byte	'Ifx_CPU_TPS_CON_Bits',0,22,189,9,3
	.word	81289
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,22,192,9,16,4,11
	.byte	'EXTIM_CLASS_EN',0,4
	.word	1121
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	1121
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,22,196,9,3
	.word	81461
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,22,199,9,16,4,11
	.byte	'ENTRY_CVAL',0,4
	.word	1121
	.byte	12,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	1121
	.byte	20,0,2,35,0,0,30
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,22,203,9,3
	.word	81590
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,22,206,9,16,4,11
	.byte	'reserved_0',0,4
	.word	1121
	.byte	4,28,2,35,0,11
	.byte	'ENTRY_LVAL',0,4
	.word	1121
	.byte	8,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	1121
	.byte	20,0,2,35,0,0,30
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,22,211,9,3
	.word	81720
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,22,214,9,16,4,11
	.byte	'EXIT_CVAL',0,4
	.word	1121
	.byte	24,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	1121
	.byte	8,0,2,35,0,0,30
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,22,218,9,3
	.word	81872
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,22,221,9,16,4,11
	.byte	'reserved_0',0,4
	.word	1121
	.byte	4,28,2,35,0,11
	.byte	'EXIT_LVAL',0,4
	.word	1121
	.byte	20,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	1121
	.byte	8,0,2,35,0,0,30
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,22,226,9,3
	.word	81999
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_FCX_Bits',0,22,229,9,16,4,11
	.byte	'EXIT_FCX',0,4
	.word	1121
	.byte	20,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	1121
	.byte	12,0,2,35,0,0,30
	.byte	'Ifx_CPU_TPS_EXTIM_FCX_Bits',0,22,233,9,3
	.word	82148
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_STAT_Bits',0,22,236,9,16,4,11
	.byte	'EXIT_TIN',0,4
	.word	1121
	.byte	8,24,2,35,0,11
	.byte	'EXIT_CLASS',0,4
	.word	1121
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	1121
	.byte	4,17,2,35,0,11
	.byte	'EXIT_AT',0,4
	.word	1121
	.byte	1,16,2,35,0,11
	.byte	'ENTRY_TIN',0,4
	.word	1121
	.byte	8,8,2,35,0,11
	.byte	'ENTRY_CLASS',0,4
	.word	1121
	.byte	3,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	1121
	.byte	4,1,2,35,0,11
	.byte	'ENTRY_AT',0,4
	.word	1121
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_TPS_EXTIM_STAT_Bits',0,22,246,9,3
	.word	82262
	.byte	10
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,22,249,9,16,4,11
	.byte	'TIMER',0,4
	.word	1121
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,22,252,9,3
	.word	82506
	.byte	10
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,22,255,9,16,4,11
	.byte	'T0',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'T1',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'T2',0,4
	.word	1121
	.byte	1,29,2,35,0,11
	.byte	'T3',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'T4',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'T5',0,4
	.word	1121
	.byte	1,26,2,35,0,11
	.byte	'T6',0,4
	.word	1121
	.byte	1,25,2,35,0,11
	.byte	'T7',0,4
	.word	1121
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	1121
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,22,138,10,3
	.word	82586
	.byte	10
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,22,141,10,16,4,11
	.byte	'ADDR',0,4
	.word	1121
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_TR_ADR_Bits',0,22,144,10,3
	.word	82781
	.byte	10
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,22,147,10,16,4,11
	.byte	'EVTA',0,4
	.word	1121
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	1121
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	1121
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	1121
	.byte	4,20,2,35,0,11
	.byte	'TYP',0,4
	.word	1121
	.byte	1,19,2,35,0,11
	.byte	'RNG',0,4
	.word	1121
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	1121
	.byte	1,17,2,35,0,11
	.byte	'ASI_EN',0,4
	.word	1121
	.byte	1,16,2,35,0,11
	.byte	'ASI',0,4
	.word	1121
	.byte	5,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	1121
	.byte	6,5,2,35,0,11
	.byte	'AST',0,4
	.word	1121
	.byte	1,4,2,35,0,11
	.byte	'ALD',0,4
	.word	1121
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	1121
	.byte	3,0,2,35,0,0,30
	.byte	'Ifx_CPU_TR_EVT_Bits',0,22,164,10,3
	.word	82854
	.byte	12,22,172,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64209
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_A',0,22,177,10,3
	.word	83172
	.byte	12,22,180,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64270
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_BIV',0,22,185,10,3
	.word	83231
	.byte	12,22,188,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64349
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_BLK_OMASK',0,22,193,10,3
	.word	83292
	.byte	12,22,196,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64487
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_BLK_OTAR',0,22,201,10,3
	.word	83359
	.byte	12,22,204,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64608
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_BLK_RABR',0,22,209,10,3
	.word	83425
	.byte	12,22,212,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64784
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_BTV',0,22,217,10,3
	.word	83491
	.byte	12,22,220,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64870
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_CCNT',0,22,225,10,3
	.word	83552
	.byte	12,22,228,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64959
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_CCTRL',0,22,233,10,3
	.word	83614
	.byte	12,22,236,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65106
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_COMPAT',0,22,241,10,3
	.word	83677
	.byte	12,22,244,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65235
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_CORE_ID',0,22,249,10,3
	.word	83741
	.byte	12,22,252,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65335
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_CPR_L',0,22,129,11,3
	.word	83806
	.byte	12,22,132,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65430
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_CPR_U',0,22,137,11,3
	.word	83869
	.byte	12,22,140,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65525
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_CPU_ID',0,22,145,11,3
	.word	83932
	.byte	12,22,148,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65635
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_CPXE',0,22,153,11,3
	.word	83996
	.byte	12,22,156,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65727
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_CREVT',0,22,161,11,3
	.word	84058
	.byte	12,22,164,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65881
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_CUS_ID',0,22,169,11,3
	.word	84121
	.byte	12,22,172,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65975
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_D',0,22,177,11,3
	.word	84185
	.byte	12,22,180,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66038
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DATR',0,22,185,11,3
	.word	84244
	.byte	12,22,188,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66264
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DBGSR',0,22,193,11,3
	.word	84306
	.byte	12,22,196,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66479
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DBGTCR',0,22,201,11,3
	.word	84369
	.byte	12,22,204,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66573
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DCON0',0,22,209,11,3
	.word	84433
	.byte	12,22,212,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66689
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DCON2',0,22,217,11,3
	.word	84496
	.byte	12,22,220,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66790
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DCX',0,22,225,11,3
	.word	84559
	.byte	12,22,228,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66883
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DEADD',0,22,233,11,3
	.word	84620
	.byte	12,22,236,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66963
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DIEAR',0,22,241,11,3
	.word	84683
	.byte	12,22,244,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67032
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DIETR',0,22,249,11,3
	.word	84746
	.byte	12,22,252,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67316
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R',0,22,129,12,3
	.word	84809
	.byte	12,22,132,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67907
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W',0,22,137,12,3
	.word	84889
	.byte	12,22,140,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68498
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R',0,22,145,12,3
	.word	84969
	.byte	12,22,148,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69099
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W',0,22,153,12,3
	.word	85049
	.byte	12,22,156,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69700
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA',0,22,161,12,3
	.word	85129
	.byte	12,22,164,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69815
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA',0,22,169,12,3
	.word	85203
	.byte	12,22,172,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69930
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DMS',0,22,177,12,3
	.word	85277
	.byte	12,22,180,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70023
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DPRE',0,22,185,12,3
	.word	85338
	.byte	12,22,188,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70115
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DPR_L',0,22,193,12,3
	.word	85400
	.byte	12,22,196,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70210
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DPR_U',0,22,201,12,3
	.word	85463
	.byte	12,22,204,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70305
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DPWE',0,22,209,12,3
	.word	85526
	.byte	12,22,212,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70397
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DSTR',0,22,217,12,3
	.word	85588
	.byte	12,22,220,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70736
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_EXEVT',0,22,225,12,3
	.word	85650
	.byte	12,22,228,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70890
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_FCX',0,22,233,12,3
	.word	85713
	.byte	12,22,236,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70996
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_FLASHCON0',0,22,241,12,3
	.word	85774
	.byte	12,22,244,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71214
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_FLASHCON1',0,22,249,12,3
	.word	85841
	.byte	12,22,252,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71405
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_FLASHCON2',0,22,129,13,3
	.word	85908
	.byte	12,22,132,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71705
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_FLASHCON3',0,22,137,13,3
	.word	85975
	.byte	12,22,140,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72010
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_FLASHCON4',0,22,145,13,3
	.word	86042
	.byte	12,22,148,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72111
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,22,153,13,3
	.word	86109
	.byte	12,22,156,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72460
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,22,161,13,3
	.word	86179
	.byte	12,22,164,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72620
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,22,169,13,3
	.word	86249
	.byte	12,22,172,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72701
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,22,177,13,3
	.word	86318
	.byte	12,22,180,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72788
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,22,185,13,3
	.word	86389
	.byte	12,22,188,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72875
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,22,193,13,3
	.word	86460
	.byte	12,22,196,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72962
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_ICNT',0,22,201,13,3
	.word	86531
	.byte	12,22,204,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73053
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_ICR',0,22,209,13,3
	.word	86593
	.byte	12,22,212,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73195
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_ISP',0,22,217,13,3
	.word	86654
	.byte	12,22,220,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73261
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_KRST0',0,22,225,13,3
	.word	86715
	.byte	12,22,228,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73372
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_KRST1',0,22,233,13,3
	.word	86778
	.byte	12,22,236,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73464
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_KRSTCLR',0,22,241,13,3
	.word	86841
	.byte	12,22,244,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73560
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_LCX',0,22,249,13,3
	.word	86906
	.byte	12,22,252,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73666
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R',0,22,129,14,3
	.word	86967
	.byte	12,22,132,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74249
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R',0,22,137,14,3
	.word	87043
	.byte	12,22,140,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74842
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_M1CNT',0,22,145,14,3
	.word	87119
	.byte	12,22,148,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74935
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_M2CNT',0,22,153,14,3
	.word	87182
	.byte	12,22,156,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75028
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_M3CNT',0,22,161,14,3
	.word	87245
	.byte	12,22,164,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75121
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_OSEL',0,22,169,14,3
	.word	87308
	.byte	12,22,172,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75194
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PC',0,22,177,14,3
	.word	87370
	.byte	12,22,180,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75279
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PCON0',0,22,185,14,3
	.word	87430
	.byte	12,22,188,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75395
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PCON1',0,22,193,14,3
	.word	87493
	.byte	12,22,196,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75506
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PCON2',0,22,201,14,3
	.word	87556
	.byte	12,22,204,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75607
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PCXI',0,22,209,14,3
	.word	87619
	.byte	12,22,212,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75760
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PIEAR',0,22,217,14,3
	.word	87681
	.byte	12,22,220,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75829
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PIETR',0,22,225,14,3
	.word	87744
	.byte	12,22,228,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76113
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PMA0',0,22,233,14,3
	.word	87807
	.byte	12,22,236,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76204
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PMA1',0,22,241,14,3
	.word	87869
	.byte	12,22,244,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76295
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PMA2',0,22,249,14,3
	.word	87931
	.byte	12,22,252,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76386
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PSTR',0,22,129,15,3
	.word	87993
	.byte	12,22,132,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76589
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PSW',0,22,137,15,3
	.word	88055
	.byte	12,22,140,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76794
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_RGN_ACCENA',0,22,145,15,3
	.word	88116
	.byte	12,22,148,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77361
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_RGN_ACCENB',0,22,153,15,3
	.word	88184
	.byte	12,22,156,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77938
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_RGN_LA',0,22,161,15,3
	.word	88252
	.byte	12,22,164,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78033
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_RGN_UA',0,22,169,15,3
	.word	88316
	.byte	12,22,172,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78128
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_SEGEN',0,22,177,15,3
	.word	88380
	.byte	12,22,180,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78256
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W',0,22,185,15,3
	.word	88443
	.byte	12,22,188,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78839
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W',0,22,193,15,3
	.word	88519
	.byte	12,22,196,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79432
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_SMACON',0,22,201,15,3
	.word	88595
	.byte	12,22,204,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79550
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R',0,22,209,15,3
	.word	88659
	.byte	12,22,212,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80139
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R',0,22,217,15,3
	.word	88738
	.byte	12,22,220,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80738
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_SWEVT',0,22,225,15,3
	.word	88817
	.byte	12,22,228,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80892
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_SYSCON',0,22,233,15,3
	.word	88880
	.byte	12,22,236,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81191
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_TASK_ASI',0,22,241,15,3
	.word	88944
	.byte	12,22,244,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81289
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_TPS_CON',0,22,249,15,3
	.word	89010
	.byte	12,22,252,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81461
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN',0,22,129,16,3
	.word	89075
	.byte	12,22,132,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81590
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL',0,22,137,16,3
	.word	89151
	.byte	12,22,140,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81720
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL',0,22,145,16,3
	.word	89229
	.byte	12,22,148,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81872
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL',0,22,153,16,3
	.word	89307
	.byte	12,22,156,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81999
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL',0,22,161,16,3
	.word	89384
	.byte	12,22,164,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82148
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_TPS_EXTIM_FCX',0,22,169,16,3
	.word	89461
	.byte	12,22,172,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82262
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_TPS_EXTIM_STAT',0,22,177,16,3
	.word	89532
	.byte	12,22,180,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82506
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_TPS_TIMER',0,22,185,16,3
	.word	89604
	.byte	12,22,188,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82586
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_TRIG_ACC',0,22,193,16,3
	.word	89671
	.byte	12,22,196,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82781
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_TR_ADR',0,22,201,16,3
	.word	89737
	.byte	12,22,204,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82854
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_TR_EVT',0,22,209,16,3
	.word	89801
	.byte	10
	.byte	'_Ifx_CPU_RGN',0,22,221,16,25,16,13
	.byte	'LA',0
	.word	88252
	.byte	4,2,35,0,13
	.byte	'UA',0
	.word	88316
	.byte	4,2,35,4,13
	.byte	'ACCENA',0
	.word	88116
	.byte	4,2,35,8,13
	.byte	'ACCENB',0
	.word	88184
	.byte	4,2,35,12,0,14
	.word	89865
	.byte	30
	.byte	'Ifx_CPU_RGN',0,22,227,16,3
	.word	89941
	.byte	10
	.byte	'_Ifx_CPU_BLK',0,22,242,16,25,12,13
	.byte	'RABR',0
	.word	83425
	.byte	4,2,35,0,13
	.byte	'OTAR',0
	.word	83359
	.byte	4,2,35,4,13
	.byte	'OMASK',0
	.word	83292
	.byte	4,2,35,8,0,14
	.word	89967
	.byte	30
	.byte	'Ifx_CPU_BLK',0,22,247,16,3
	.word	90030
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP',0,22,134,17,25,28,13
	.byte	'CON',0
	.word	86109
	.byte	4,2,35,0,13
	.byte	'PC',0
	.word	86249
	.byte	4,2,35,4,13
	.byte	'OPC',0
	.word	86179
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	3733
	.byte	4,2,35,12,13
	.byte	'SRC1',0
	.word	86318
	.byte	4,2,35,16,13
	.byte	'SRC2',0
	.word	86389
	.byte	4,2,35,20,13
	.byte	'SRC3',0
	.word	86460
	.byte	4,2,35,24,0,14
	.word	90056
	.byte	30
	.byte	'Ifx_CPU_FPU_TRAP',0,22,143,17,3
	.word	90181
	.byte	10
	.byte	'_Ifx_CPU_DPR',0,22,158,17,25,8,13
	.byte	'L',0
	.word	85400
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	85463
	.byte	4,2,35,4,0,14
	.word	90212
	.byte	30
	.byte	'Ifx_CPU_DPR',0,22,162,17,3
	.word	90254
	.byte	10
	.byte	'_Ifx_CPU_CPR',0,22,177,17,25,8,13
	.byte	'L',0
	.word	83806
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	83869
	.byte	4,2,35,4,0,14
	.word	90280
	.byte	30
	.byte	'Ifx_CPU_CPR',0,22,181,17,3
	.word	90322
	.byte	18,12
	.word	89604
	.byte	19,2,0,10
	.byte	'_Ifx_CPU_TPS',0,22,196,17,25,16,13
	.byte	'CON',0
	.word	89010
	.byte	4,2,35,0,13
	.byte	'TIMER',0
	.word	90348
	.byte	12,2,35,4,0,14
	.word	90357
	.byte	30
	.byte	'Ifx_CPU_TPS',0,22,200,17,3
	.word	90405
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM',0,22,215,17,25,28,13
	.byte	'ENTRY_LVAL',0
	.word	89229
	.byte	4,2,35,0,13
	.byte	'ENTRY_CVAL',0
	.word	89151
	.byte	4,2,35,4,13
	.byte	'EXIT_LVAL',0
	.word	89384
	.byte	4,2,35,8,13
	.byte	'EXIT_CVAL',0
	.word	89307
	.byte	4,2,35,12,13
	.byte	'CLASS_EN',0
	.word	89075
	.byte	4,2,35,16,13
	.byte	'STAT',0
	.word	89532
	.byte	4,2,35,20,13
	.byte	'FCX',0
	.word	89461
	.byte	4,2,35,24,0,14
	.word	90431
	.byte	30
	.byte	'Ifx_CPU_TPS_EXTIM',0,22,224,17,3
	.word	90580
	.byte	10
	.byte	'_Ifx_CPU_TR',0,22,239,17,25,8,13
	.byte	'EVT',0
	.word	89801
	.byte	4,2,35,0,13
	.byte	'ADR',0
	.word	89737
	.byte	4,2,35,4,0,14
	.word	90612
	.byte	30
	.byte	'Ifx_CPU_TR',0,22,243,17,3
	.word	90657
	.byte	18,128,34
	.word	455
	.byte	19,255,33,0,18,236,253,2
	.word	455
	.byte	19,235,253,2,0,18,244,31
	.word	455
	.byte	19,243,31,0,18,128,1
	.word	89865
	.byte	19,7,0,14
	.word	90717
	.byte	18,232,1
	.word	455
	.byte	19,231,1,0,18,128,48
	.word	455
	.byte	19,255,47,0,18,128,3
	.word	89967
	.byte	19,31,0,14
	.word	90754
	.byte	18,160,39
	.word	455
	.byte	19,159,39,0,18,208,223,1
	.word	455
	.byte	19,207,223,1,0,18,248,1
	.word	455
	.byte	19,247,1,0,18,244,29
	.word	455
	.byte	19,243,29,0,18,188,3
	.word	455
	.byte	19,187,3,0,18,232,3
	.word	455
	.byte	19,231,3,0,18,252,23
	.word	455
	.byte	19,251,23,0,14
	.word	90056
	.byte	18,228,63
	.word	455
	.byte	19,227,63,0,18,144,1
	.word	90212
	.byte	19,17,0,14
	.word	90864
	.byte	18,240,30
	.word	455
	.byte	19,239,30,0,18,80
	.word	90280
	.byte	19,9,0,14
	.word	90890
	.byte	18,176,31
	.word	455
	.byte	19,175,31,0,18,152,7
	.word	455
	.byte	19,151,7,0,14
	.word	90357
	.byte	18,48
	.word	455
	.byte	19,47,0,14
	.word	90431
	.byte	18,164,23
	.word	455
	.byte	19,163,23,0,18,64
	.word	90612
	.byte	19,7,0,14
	.word	90956
	.byte	18,192,23
	.word	455
	.byte	19,191,23,0,18,28
	.word	455
	.byte	19,27,0,18,180,1
	.word	455
	.byte	19,179,1,0,18,172,1
	.word	455
	.byte	19,171,1,0,18,64
	.word	84185
	.byte	19,15,0,18,64
	.word	455
	.byte	19,63,0,18,64
	.word	83172
	.byte	19,15,0,10
	.byte	'_Ifx_CPU',0,22,130,18,25,128,128,8,13
	.byte	'reserved_0',0
	.word	90682
	.byte	128,34,2,35,0,13
	.byte	'FLASHCON0',0
	.word	85774
	.byte	4,3,35,128,34,13
	.byte	'FLASHCON1',0
	.word	85841
	.byte	4,3,35,132,34,13
	.byte	'FLASHCON2',0
	.word	85908
	.byte	4,3,35,136,34,13
	.byte	'FLASHCON3',0
	.word	85975
	.byte	4,3,35,140,34,13
	.byte	'FLASHCON4',0
	.word	86042
	.byte	4,3,35,144,34,13
	.byte	'reserved_1114',0
	.word	90693
	.byte	236,253,2,3,35,148,34,13
	.byte	'KRST0',0
	.word	86715
	.byte	4,4,35,128,160,3,13
	.byte	'KRST1',0
	.word	86778
	.byte	4,4,35,132,160,3,13
	.byte	'KRSTCLR',0
	.word	86841
	.byte	4,4,35,136,160,3,13
	.byte	'reserved_D00C',0
	.word	90706
	.byte	244,31,4,35,140,160,3,13
	.byte	'RGN',0
	.word	90727
	.byte	128,1,4,35,128,192,3,13
	.byte	'reserved_E080',0
	.word	5553
	.byte	8,4,35,128,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R0',0
	.word	88659
	.byte	4,4,35,136,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R0',0
	.word	88738
	.byte	4,4,35,140,193,3,13
	.byte	'reserved_E090',0
	.word	5553
	.byte	8,4,35,144,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R1',0
	.word	88659
	.byte	4,4,35,152,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R1',0
	.word	88738
	.byte	4,4,35,156,193,3,13
	.byte	'reserved_E0A0',0
	.word	5553
	.byte	8,4,35,160,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R2',0
	.word	88659
	.byte	4,4,35,168,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R2',0
	.word	88738
	.byte	4,4,35,172,193,3,13
	.byte	'reserved_E0B0',0
	.word	5553
	.byte	8,4,35,176,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R3',0
	.word	88659
	.byte	4,4,35,184,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R3',0
	.word	88738
	.byte	4,4,35,188,193,3,13
	.byte	'reserved_E0C0',0
	.word	5553
	.byte	8,4,35,192,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R4',0
	.word	88659
	.byte	4,4,35,200,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R4',0
	.word	88738
	.byte	4,4,35,204,193,3,13
	.byte	'reserved_E0D0',0
	.word	5553
	.byte	8,4,35,208,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R5',0
	.word	88659
	.byte	4,4,35,216,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R5',0
	.word	88738
	.byte	4,4,35,220,193,3,13
	.byte	'reserved_E0E0',0
	.word	5553
	.byte	8,4,35,224,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R6',0
	.word	88659
	.byte	4,4,35,232,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R6',0
	.word	88738
	.byte	4,4,35,236,193,3,13
	.byte	'reserved_E0F0',0
	.word	5553
	.byte	8,4,35,240,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R7',0
	.word	88659
	.byte	4,4,35,248,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R7',0
	.word	88738
	.byte	4,4,35,252,193,3,13
	.byte	'SFR_SPROT_ACCENA_W',0
	.word	88443
	.byte	4,4,35,128,194,3,13
	.byte	'SFR_SPROT_ACCENB_W',0
	.word	88519
	.byte	4,4,35,132,194,3,13
	.byte	'reserved_E108',0
	.word	5553
	.byte	8,4,35,136,194,3,13
	.byte	'LPB_SPROT_ACCENA_R',0
	.word	86967
	.byte	4,4,35,144,194,3,13
	.byte	'LPB_SPROT_ACCENB_R',0
	.word	87043
	.byte	4,4,35,148,194,3,13
	.byte	'reserved_E118',0
	.word	90732
	.byte	232,1,4,35,152,194,3,13
	.byte	'DLMU_SPROT_RGNLA0',0
	.word	85129
	.byte	4,4,35,128,196,3,13
	.byte	'DLMU_SPROT_RGNUA0',0
	.word	85203
	.byte	4,4,35,132,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W0',0
	.word	84889
	.byte	4,4,35,136,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W0',0
	.word	85049
	.byte	4,4,35,140,196,3,13
	.byte	'DLMU_SPROT_RGNLA1',0
	.word	85129
	.byte	4,4,35,144,196,3,13
	.byte	'DLMU_SPROT_RGNUA1',0
	.word	85203
	.byte	4,4,35,148,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W1',0
	.word	84889
	.byte	4,4,35,152,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W1',0
	.word	85049
	.byte	4,4,35,156,196,3,13
	.byte	'DLMU_SPROT_RGNLA2',0
	.word	85129
	.byte	4,4,35,160,196,3,13
	.byte	'DLMU_SPROT_RGNUA2',0
	.word	85203
	.byte	4,4,35,164,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W2',0
	.word	84889
	.byte	4,4,35,168,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W2',0
	.word	85049
	.byte	4,4,35,172,196,3,13
	.byte	'DLMU_SPROT_RGNLA3',0
	.word	85129
	.byte	4,4,35,176,196,3,13
	.byte	'DLMU_SPROT_RGNUA3',0
	.word	85203
	.byte	4,4,35,180,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W3',0
	.word	84889
	.byte	4,4,35,184,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W3',0
	.word	85049
	.byte	4,4,35,188,196,3,13
	.byte	'DLMU_SPROT_RGNLA4',0
	.word	85129
	.byte	4,4,35,192,196,3,13
	.byte	'DLMU_SPROT_RGNUA4',0
	.word	85203
	.byte	4,4,35,196,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W4',0
	.word	84889
	.byte	4,4,35,200,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W4',0
	.word	85049
	.byte	4,4,35,204,196,3,13
	.byte	'DLMU_SPROT_RGNLA5',0
	.word	85129
	.byte	4,4,35,208,196,3,13
	.byte	'DLMU_SPROT_RGNUA5',0
	.word	85203
	.byte	4,4,35,212,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W5',0
	.word	84889
	.byte	4,4,35,216,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W5',0
	.word	85049
	.byte	4,4,35,220,196,3,13
	.byte	'DLMU_SPROT_RGNLA6',0
	.word	85129
	.byte	4,4,35,224,196,3,13
	.byte	'DLMU_SPROT_RGNUA6',0
	.word	85203
	.byte	4,4,35,228,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W6',0
	.word	84889
	.byte	4,4,35,232,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W6',0
	.word	85049
	.byte	4,4,35,236,196,3,13
	.byte	'DLMU_SPROT_RGNLA7',0
	.word	85129
	.byte	4,4,35,240,196,3,13
	.byte	'DLMU_SPROT_RGNUA7',0
	.word	85203
	.byte	4,4,35,244,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W7',0
	.word	84889
	.byte	4,4,35,248,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W7',0
	.word	85049
	.byte	4,4,35,252,196,3,13
	.byte	'reserved_E280',0
	.word	5553
	.byte	8,4,35,128,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R0',0
	.word	84809
	.byte	4,4,35,136,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R0',0
	.word	84969
	.byte	4,4,35,140,197,3,13
	.byte	'reserved_E290',0
	.word	5553
	.byte	8,4,35,144,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R1',0
	.word	84809
	.byte	4,4,35,152,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R1',0
	.word	84969
	.byte	4,4,35,156,197,3,13
	.byte	'reserved_E2A0',0
	.word	5553
	.byte	8,4,35,160,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R2',0
	.word	84809
	.byte	4,4,35,168,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R2',0
	.word	84969
	.byte	4,4,35,172,197,3,13
	.byte	'reserved_E2B0',0
	.word	5553
	.byte	8,4,35,176,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R3',0
	.word	84809
	.byte	4,4,35,184,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R3',0
	.word	84969
	.byte	4,4,35,188,197,3,13
	.byte	'reserved_E2C0',0
	.word	5553
	.byte	8,4,35,192,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R4',0
	.word	84809
	.byte	4,4,35,200,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R4',0
	.word	84969
	.byte	4,4,35,204,197,3,13
	.byte	'reserved_E2D0',0
	.word	5553
	.byte	8,4,35,208,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R5',0
	.word	84809
	.byte	4,4,35,216,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R5',0
	.word	84969
	.byte	4,4,35,220,197,3,13
	.byte	'reserved_E2E0',0
	.word	5553
	.byte	8,4,35,224,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R6',0
	.word	84809
	.byte	4,4,35,232,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R6',0
	.word	84969
	.byte	4,4,35,236,197,3,13
	.byte	'reserved_E2F0',0
	.word	5553
	.byte	8,4,35,240,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R7',0
	.word	84809
	.byte	4,4,35,248,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R7',0
	.word	84969
	.byte	4,4,35,252,197,3,13
	.byte	'reserved_E300',0
	.word	90743
	.byte	128,48,4,35,128,198,3,13
	.byte	'OSEL',0
	.word	87308
	.byte	4,4,35,128,246,3,13
	.byte	'reserved_FB04',0
	.word	5893
	.byte	12,4,35,132,246,3,13
	.byte	'BLK',0
	.word	90764
	.byte	128,3,4,35,144,246,3,13
	.byte	'reserved_FC90',0
	.word	90769
	.byte	160,39,4,35,144,249,3,13
	.byte	'SEGEN',0
	.word	88380
	.byte	4,4,35,176,160,4,13
	.byte	'reserved_11034',0
	.word	90780
	.byte	208,223,1,4,35,180,160,4,13
	.byte	'TASK_ASI',0
	.word	88944
	.byte	4,4,35,132,128,6,13
	.byte	'reserved_18008',0
	.word	90793
	.byte	248,1,4,35,136,128,6,13
	.byte	'PMA0',0
	.word	87807
	.byte	4,4,35,128,130,6,13
	.byte	'PMA1',0
	.word	87869
	.byte	4,4,35,132,130,6,13
	.byte	'PMA2',0
	.word	87931
	.byte	4,4,35,136,130,6,13
	.byte	'reserved_1810C',0
	.word	90804
	.byte	244,29,4,35,140,130,6,13
	.byte	'DCON2',0
	.word	84496
	.byte	4,4,35,128,160,6,13
	.byte	'reserved_19004',0
	.word	5553
	.byte	8,4,35,132,160,6,13
	.byte	'SMACON',0
	.word	88595
	.byte	4,4,35,140,160,6,13
	.byte	'DSTR',0
	.word	85588
	.byte	4,4,35,144,160,6,13
	.byte	'reserved_19014',0
	.word	3733
	.byte	4,4,35,148,160,6,13
	.byte	'DATR',0
	.word	84244
	.byte	4,4,35,152,160,6,13
	.byte	'DEADD',0
	.word	84620
	.byte	4,4,35,156,160,6,13
	.byte	'DIEAR',0
	.word	84683
	.byte	4,4,35,160,160,6,13
	.byte	'DIETR',0
	.word	84746
	.byte	4,4,35,164,160,6,13
	.byte	'reserved_19028',0
	.word	4924
	.byte	24,4,35,168,160,6,13
	.byte	'DCON0',0
	.word	84433
	.byte	4,4,35,192,160,6,13
	.byte	'reserved_19044',0
	.word	90815
	.byte	188,3,4,35,196,160,6,13
	.byte	'PSTR',0
	.word	87993
	.byte	4,4,35,128,164,6,13
	.byte	'PCON1',0
	.word	87493
	.byte	4,4,35,132,164,6,13
	.byte	'PCON2',0
	.word	87556
	.byte	4,4,35,136,164,6,13
	.byte	'PCON0',0
	.word	87430
	.byte	4,4,35,140,164,6,13
	.byte	'PIEAR',0
	.word	87681
	.byte	4,4,35,144,164,6,13
	.byte	'PIETR',0
	.word	87744
	.byte	4,4,35,148,164,6,13
	.byte	'reserved_19218',0
	.word	90826
	.byte	232,3,4,35,152,164,6,13
	.byte	'COMPAT',0
	.word	83677
	.byte	4,4,35,128,168,6,13
	.byte	'reserved_19404',0
	.word	90837
	.byte	252,23,4,35,132,168,6,13
	.byte	'FPU_TRAP',0
	.word	90848
	.byte	28,4,35,128,192,6,13
	.byte	'reserved_1A01C',0
	.word	90853
	.byte	228,63,4,35,156,192,6,13
	.byte	'DPR',0
	.word	90874
	.byte	144,1,4,35,128,128,7,13
	.byte	'reserved_1C090',0
	.word	90879
	.byte	240,30,4,35,144,129,7,13
	.byte	'CPR',0
	.word	90899
	.byte	80,4,35,128,160,7,13
	.byte	'reserved_1D050',0
	.word	90904
	.byte	176,31,4,35,208,160,7,13
	.byte	'CPXE_0',0
	.word	83996
	.byte	4,4,35,128,192,7,13
	.byte	'CPXE_1',0
	.word	83996
	.byte	4,4,35,132,192,7,13
	.byte	'CPXE_2',0
	.word	83996
	.byte	4,4,35,136,192,7,13
	.byte	'CPXE_3',0
	.word	83996
	.byte	4,4,35,140,192,7,13
	.byte	'DPRE_0',0
	.word	85338
	.byte	4,4,35,144,192,7,13
	.byte	'DPRE_1',0
	.word	85338
	.byte	4,4,35,148,192,7,13
	.byte	'DPRE_2',0
	.word	85338
	.byte	4,4,35,152,192,7,13
	.byte	'DPRE_3',0
	.word	85338
	.byte	4,4,35,156,192,7,13
	.byte	'DPWE_0',0
	.word	85526
	.byte	4,4,35,160,192,7,13
	.byte	'DPWE_1',0
	.word	85526
	.byte	4,4,35,164,192,7,13
	.byte	'DPWE_2',0
	.word	85526
	.byte	4,4,35,168,192,7,13
	.byte	'DPWE_3',0
	.word	85526
	.byte	4,4,35,172,192,7,13
	.byte	'reserved_1E030',0
	.word	15787
	.byte	16,4,35,176,192,7,13
	.byte	'CPXE_4',0
	.word	83996
	.byte	4,4,35,192,192,7,13
	.byte	'CPXE_5',0
	.word	83996
	.byte	4,4,35,196,192,7,13
	.byte	'reserved_1E048',0
	.word	5553
	.byte	8,4,35,200,192,7,13
	.byte	'DPRE_4',0
	.word	85338
	.byte	4,4,35,208,192,7,13
	.byte	'DPRE_5',0
	.word	85338
	.byte	4,4,35,212,192,7,13
	.byte	'reserved_1E058',0
	.word	5553
	.byte	8,4,35,216,192,7,13
	.byte	'DPWE_4',0
	.word	85526
	.byte	4,4,35,224,192,7,13
	.byte	'DPWE_5',0
	.word	85526
	.byte	4,4,35,228,192,7,13
	.byte	'reserved_1E068',0
	.word	90915
	.byte	152,7,4,35,232,192,7,13
	.byte	'TPS',0
	.word	90926
	.byte	16,4,35,128,200,7,13
	.byte	'reserved_1E410',0
	.word	90931
	.byte	48,4,35,144,200,7,13
	.byte	'TPS_EXTIM',0
	.word	90940
	.byte	28,4,35,192,200,7,13
	.byte	'reserved_1E45C',0
	.word	90945
	.byte	164,23,4,35,220,200,7,13
	.byte	'TR',0
	.word	90965
	.byte	64,4,35,128,224,7,13
	.byte	'reserved_1F040',0
	.word	90970
	.byte	192,23,4,35,192,224,7,13
	.byte	'CCTRL',0
	.word	83614
	.byte	4,4,35,128,248,7,13
	.byte	'CCNT',0
	.word	83552
	.byte	4,4,35,132,248,7,13
	.byte	'ICNT',0
	.word	86531
	.byte	4,4,35,136,248,7,13
	.byte	'M1CNT',0
	.word	87119
	.byte	4,4,35,140,248,7,13
	.byte	'M2CNT',0
	.word	87182
	.byte	4,4,35,144,248,7,13
	.byte	'M3CNT',0
	.word	87245
	.byte	4,4,35,148,248,7,13
	.byte	'reserved_1FC18',0
	.word	90732
	.byte	232,1,4,35,152,248,7,13
	.byte	'DBGSR',0
	.word	84306
	.byte	4,4,35,128,250,7,13
	.byte	'reserved_1FD04',0
	.word	3733
	.byte	4,4,35,132,250,7,13
	.byte	'EXEVT',0
	.word	85650
	.byte	4,4,35,136,250,7,13
	.byte	'CREVT',0
	.word	84058
	.byte	4,4,35,140,250,7,13
	.byte	'SWEVT',0
	.word	88817
	.byte	4,4,35,144,250,7,13
	.byte	'reserved_1FD14',0
	.word	90981
	.byte	28,4,35,148,250,7,13
	.byte	'TRIG_ACC',0
	.word	89671
	.byte	4,4,35,176,250,7,13
	.byte	'reserved_1FD34',0
	.word	5893
	.byte	12,4,35,180,250,7,13
	.byte	'DMS',0
	.word	85277
	.byte	4,4,35,192,250,7,13
	.byte	'DCX',0
	.word	84559
	.byte	4,4,35,196,250,7,13
	.byte	'DBGTCR',0
	.word	84369
	.byte	4,4,35,200,250,7,13
	.byte	'reserved_1FD4C',0
	.word	90990
	.byte	180,1,4,35,204,250,7,13
	.byte	'PCXI',0
	.word	87619
	.byte	4,4,35,128,252,7,13
	.byte	'PSW',0
	.word	88055
	.byte	4,4,35,132,252,7,13
	.byte	'PC',0
	.word	87370
	.byte	4,4,35,136,252,7,13
	.byte	'reserved_1FE0C',0
	.word	5553
	.byte	8,4,35,140,252,7,13
	.byte	'SYSCON',0
	.word	88880
	.byte	4,4,35,148,252,7,13
	.byte	'CPU_ID',0
	.word	83932
	.byte	4,4,35,152,252,7,13
	.byte	'CORE_ID',0
	.word	83741
	.byte	4,4,35,156,252,7,13
	.byte	'BIV',0
	.word	83231
	.byte	4,4,35,160,252,7,13
	.byte	'BTV',0
	.word	83491
	.byte	4,4,35,164,252,7,13
	.byte	'ISP',0
	.word	86654
	.byte	4,4,35,168,252,7,13
	.byte	'ICR',0
	.word	86593
	.byte	4,4,35,172,252,7,13
	.byte	'reserved_1FE30',0
	.word	5553
	.byte	8,4,35,176,252,7,13
	.byte	'FCX',0
	.word	85713
	.byte	4,4,35,184,252,7,13
	.byte	'LCX',0
	.word	86906
	.byte	4,4,35,188,252,7,13
	.byte	'reserved_1FE40',0
	.word	15787
	.byte	16,4,35,192,252,7,13
	.byte	'CUS_ID',0
	.word	84121
	.byte	4,4,35,208,252,7,13
	.byte	'reserved_1FE54',0
	.word	91001
	.byte	172,1,4,35,212,252,7,13
	.byte	'D',0
	.word	91012
	.byte	64,4,35,128,254,7,13
	.byte	'reserved_1FF40',0
	.word	91021
	.byte	64,4,35,192,254,7,13
	.byte	'A',0
	.word	91030
	.byte	64,4,35,128,255,7,13
	.byte	'reserved_1FFC0',0
	.word	91021
	.byte	64,4,35,192,255,7,0,14
	.word	91039
	.byte	30
	.byte	'Ifx_CPU',0,22,210,19,3
	.word	96137
	.byte	15,9,124,9,1,16
	.byte	'IfxCpu_Id_0',0,0,16
	.byte	'IfxCpu_Id_1',0,1,16
	.byte	'IfxCpu_Id_2',0,2,16
	.byte	'IfxCpu_Id_3',0,3,16
	.byte	'IfxCpu_Id_4',0,4,16
	.byte	'IfxCpu_Id_6',0,6,16
	.byte	'IfxCpu_Id_none',0,7,0,30
	.byte	'IfxCpu_Id',0,9,133,1,3
	.word	96159
	.byte	30
	.byte	'IfxCpu_ResourceCpu',0,9,170,1,3
	.word	2248
	.byte	10
	.byte	'_Ifx_STM_ACCEN0_Bits',0,23,68,16,4,11
	.byte	'EN0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	455
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_STM_ACCEN0_Bits',0,23,102,3
	.word	96313
	.byte	10
	.byte	'_Ifx_STM_ACCEN1_Bits',0,23,105,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_ACCEN1_Bits',0,23,108,3
	.word	96870
	.byte	10
	.byte	'_Ifx_STM_CAP_Bits',0,23,111,16,4,11
	.byte	'STMCAP_63_32',0,4
	.word	432
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_CAP_Bits',0,23,114,3
	.word	96947
	.byte	10
	.byte	'_Ifx_STM_CAPSV_Bits',0,23,117,16,4,11
	.byte	'STMCAP_63_32',0,4
	.word	432
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_CAPSV_Bits',0,23,120,3
	.word	97020
	.byte	10
	.byte	'_Ifx_STM_CLC_Bits',0,23,123,16,4,11
	.byte	'DISR',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,30
	.byte	'Ifx_STM_CLC_Bits',0,23,130,1,3
	.word	97097
	.byte	10
	.byte	'_Ifx_STM_CMCON_Bits',0,23,133,1,16,4,11
	.byte	'MSIZE0',0,1
	.word	455
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	455
	.byte	3,0,2,35,0,11
	.byte	'MSTART0',0,1
	.word	455
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	455
	.byte	3,0,2,35,1,11
	.byte	'MSIZE1',0,1
	.word	455
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	455
	.byte	3,0,2,35,2,11
	.byte	'MSTART1',0,1
	.word	455
	.byte	5,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	455
	.byte	3,0,2,35,3,0,30
	.byte	'Ifx_STM_CMCON_Bits',0,23,143,1,3
	.word	97239
	.byte	10
	.byte	'_Ifx_STM_CMP_Bits',0,23,146,1,16,4,11
	.byte	'CMPVAL',0,4
	.word	432
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_CMP_Bits',0,23,149,1,3
	.word	97459
	.byte	10
	.byte	'_Ifx_STM_ICR_Bits',0,23,152,1,16,4,11
	.byte	'CMP0EN',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'CMP0IR',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'CMP0OS',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'CMP1EN',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'CMP1IR',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'CMP1OS',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	432
	.byte	25,0,2,35,0,0,30
	.byte	'Ifx_STM_ICR_Bits',0,23,162,1,3
	.word	97528
	.byte	10
	.byte	'_Ifx_STM_ID_Bits',0,23,165,1,16,4,11
	.byte	'MODREV',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	455
	.byte	8,0,2,35,1,11
	.byte	'MODNUM',0,2
	.word	1022
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_STM_ID_Bits',0,23,170,1,3
	.word	97731
	.byte	10
	.byte	'_Ifx_STM_ISCR_Bits',0,23,173,1,16,4,11
	.byte	'CMP0IRR',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'CMP0IRS',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'CMP1IRR',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'CMP1IRS',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,30
	.byte	'Ifx_STM_ISCR_Bits',0,23,180,1,3
	.word	97835
	.byte	10
	.byte	'_Ifx_STM_KRST0_Bits',0,23,183,1,16,4,11
	.byte	'RST',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	432
	.byte	30,0,2,35,0,0,30
	.byte	'Ifx_STM_KRST0_Bits',0,23,188,1,3
	.word	97986
	.byte	10
	.byte	'_Ifx_STM_KRST1_Bits',0,23,191,1,16,4,11
	.byte	'RST',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	432
	.byte	31,0,2,35,0,0,30
	.byte	'Ifx_STM_KRST1_Bits',0,23,195,1,3
	.word	98097
	.byte	10
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,23,198,1,16,4,11
	.byte	'CLR',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	432
	.byte	31,0,2,35,0,0,30
	.byte	'Ifx_STM_KRSTCLR_Bits',0,23,202,1,3
	.word	98189
	.byte	10
	.byte	'_Ifx_STM_OCS_Bits',0,23,205,1,16,4,11
	.byte	'reserved_0',0,1
	.word	455
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	432
	.byte	21,8,2,35,0,11
	.byte	'SUS',0,1
	.word	455
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	455
	.byte	2,0,2,35,3,0,30
	.byte	'Ifx_STM_OCS_Bits',0,23,213,1,3
	.word	98285
	.byte	10
	.byte	'_Ifx_STM_TIM0_Bits',0,23,216,1,16,4,11
	.byte	'STM_31_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_TIM0_Bits',0,23,219,1,3
	.word	98453
	.byte	10
	.byte	'_Ifx_STM_TIM0SV_Bits',0,23,222,1,16,4,11
	.byte	'STM_31_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_TIM0SV_Bits',0,23,225,1,3
	.word	98526
	.byte	10
	.byte	'_Ifx_STM_TIM1_Bits',0,23,228,1,16,4,11
	.byte	'STM_35_4',0,4
	.word	432
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_TIM1_Bits',0,23,231,1,3
	.word	98603
	.byte	10
	.byte	'_Ifx_STM_TIM2_Bits',0,23,234,1,16,4,11
	.byte	'STM_39_8',0,4
	.word	432
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_TIM2_Bits',0,23,237,1,3
	.word	98676
	.byte	10
	.byte	'_Ifx_STM_TIM3_Bits',0,23,240,1,16,4,11
	.byte	'STM_43_12',0,4
	.word	432
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_TIM3_Bits',0,23,243,1,3
	.word	98749
	.byte	10
	.byte	'_Ifx_STM_TIM4_Bits',0,23,246,1,16,4,11
	.byte	'STM_47_16',0,4
	.word	432
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_TIM4_Bits',0,23,249,1,3
	.word	98823
	.byte	10
	.byte	'_Ifx_STM_TIM5_Bits',0,23,252,1,16,4,11
	.byte	'STM_51_20',0,4
	.word	432
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_TIM5_Bits',0,23,255,1,3
	.word	98897
	.byte	10
	.byte	'_Ifx_STM_TIM6_Bits',0,23,130,2,16,4,11
	.byte	'STM_63_32',0,4
	.word	432
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_TIM6_Bits',0,23,133,2,3
	.word	98971
	.byte	12,23,141,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	96313
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_ACCEN0',0,23,146,2,3
	.word	99045
	.byte	12,23,149,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	96870
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_ACCEN1',0,23,154,2,3
	.word	99109
	.byte	12,23,157,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	96947
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_CAP',0,23,162,2,3
	.word	99173
	.byte	12,23,165,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97020
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_CAPSV',0,23,170,2,3
	.word	99234
	.byte	12,23,173,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97097
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_CLC',0,23,178,2,3
	.word	99297
	.byte	12,23,181,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97239
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_CMCON',0,23,186,2,3
	.word	99358
	.byte	12,23,189,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97459
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_CMP',0,23,194,2,3
	.word	99421
	.byte	12,23,197,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97528
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_ICR',0,23,202,2,3
	.word	99482
	.byte	12,23,205,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97731
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_ID',0,23,210,2,3
	.word	99543
	.byte	12,23,213,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97835
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_ISCR',0,23,218,2,3
	.word	99603
	.byte	12,23,221,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97986
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_KRST0',0,23,226,2,3
	.word	99665
	.byte	12,23,229,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	98097
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_KRST1',0,23,234,2,3
	.word	99728
	.byte	12,23,237,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	98189
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_KRSTCLR',0,23,242,2,3
	.word	99791
	.byte	12,23,245,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	98285
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_OCS',0,23,250,2,3
	.word	99856
	.byte	12,23,253,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	98453
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_TIM0',0,23,130,3,3
	.word	99917
	.byte	12,23,133,3,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	98526
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_TIM0SV',0,23,138,3,3
	.word	99979
	.byte	12,23,141,3,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	98603
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_TIM1',0,23,146,3,3
	.word	100043
	.byte	12,23,149,3,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	98676
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_TIM2',0,23,154,3,3
	.word	100105
	.byte	12,23,157,3,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	98749
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_TIM3',0,23,162,3,3
	.word	100167
	.byte	12,23,165,3,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	98823
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_TIM4',0,23,170,3,3
	.word	100229
	.byte	12,23,173,3,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	98897
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_TIM5',0,23,178,3,3
	.word	100291
	.byte	12,23,181,3,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	98971
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_TIM6',0,23,186,3,3
	.word	100353
	.byte	15,8,141,1,9,1,16
	.byte	'IfxCpu_CounterMode_normal',0,0,16
	.byte	'IfxCpu_CounterMode_task',0,1,0,30
	.byte	'IfxCpu_CounterMode',0,8,145,1,3
	.word	100415
	.byte	29,8,198,1,9,6,13
	.byte	'counter',0
	.word	2495
	.byte	4,2,35,0,13
	.byte	'overlfow',0
	.word	455
	.byte	1,2,35,4,0,30
	.byte	'IfxCpu_Counter',0,8,202,1,3
	.word	100504
	.byte	29,8,210,1,9,32,13
	.byte	'instruction',0
	.word	100504
	.byte	6,2,35,0,13
	.byte	'clock',0
	.word	100504
	.byte	6,2,35,6,13
	.byte	'counter1',0
	.word	100504
	.byte	6,2,35,12,13
	.byte	'counter2',0
	.word	100504
	.byte	6,2,35,18,13
	.byte	'counter3',0
	.word	100504
	.byte	6,2,35,24,0,30
	.byte	'IfxCpu_Perf',0,8,217,1,3
	.word	100570
	.byte	30
	.byte	'Ifx_P_ACCEN0_Bits',0,11,102,3
	.word	9081
	.byte	30
	.byte	'Ifx_P_ACCEN1_Bits',0,11,108,3
	.word	8994
	.byte	30
	.byte	'Ifx_P_ESR_Bits',0,11,130,1,3
	.word	5562
	.byte	30
	.byte	'Ifx_P_ID_Bits',0,11,138,1,3
	.word	3613
	.byte	30
	.byte	'Ifx_P_IN_Bits',0,11,160,1,3
	.word	4609
	.byte	30
	.byte	'Ifx_P_IOCR0_Bits',0,11,173,1,3
	.word	3742
	.byte	30
	.byte	'Ifx_P_IOCR12_Bits',0,11,186,1,3
	.word	4389
	.byte	30
	.byte	'Ifx_P_IOCR4_Bits',0,11,199,1,3
	.word	3957
	.byte	30
	.byte	'Ifx_P_IOCR8_Bits',0,11,212,1,3
	.word	4172
	.byte	30
	.byte	'Ifx_P_LPCR_Bits',0,11,231,1,3
	.word	8656
	.byte	30
	.byte	'Ifx_P_OMCR_Bits',0,11,253,1,3
	.word	8308
	.byte	30
	.byte	'Ifx_P_OMCR0_Bits',0,11,136,2,3
	.word	7295
	.byte	30
	.byte	'Ifx_P_OMCR12_Bits',0,11,146,2,3
	.word	7819
	.byte	30
	.byte	'Ifx_P_OMCR4_Bits',0,11,157,2,3
	.word	7469
	.byte	30
	.byte	'Ifx_P_OMCR8_Bits',0,11,168,2,3
	.word	7643
	.byte	30
	.byte	'Ifx_P_OMR_Bits',0,11,205,2,3
	.word	3042
	.byte	30
	.byte	'Ifx_P_OMSR_Bits',0,11,227,2,3
	.word	7975
	.byte	30
	.byte	'Ifx_P_OMSR0_Bits',0,11,237,2,3
	.word	6632
	.byte	30
	.byte	'Ifx_P_OMSR12_Bits',0,11,248,2,3
	.word	7120
	.byte	30
	.byte	'Ifx_P_OMSR4_Bits',0,11,131,3,3
	.word	6779
	.byte	30
	.byte	'Ifx_P_OMSR8_Bits',0,11,142,3,3
	.word	6948
	.byte	30
	.byte	'Ifx_P_OUT_Bits',0,11,164,3,3
	.word	2726
	.byte	30
	.byte	'Ifx_P_PCSR_Bits',0,11,187,3,3
	.word	6268
	.byte	30
	.byte	'Ifx_P_PDISC_Bits',0,11,209,3,3
	.word	5902
	.byte	30
	.byte	'Ifx_P_PDR0_Bits',0,11,230,3,3
	.word	4933
	.byte	30
	.byte	'Ifx_P_PDR1_Bits',0,11,251,3,3
	.word	5237
	.byte	30
	.byte	'Ifx_P_ACCEN0',0,11,136,4,3
	.word	9608
	.byte	30
	.byte	'Ifx_P_ACCEN1',0,11,144,4,3
	.word	9041
	.byte	30
	.byte	'Ifx_P_ESR',0,11,152,4,3
	.word	5853
	.byte	30
	.byte	'Ifx_P_ID',0,11,160,4,3
	.word	3693
	.byte	30
	.byte	'Ifx_P_IN',0,11,168,4,3
	.word	4884
	.byte	30
	.byte	'Ifx_P_IOCR0',0,11,176,4,3
	.word	3917
	.byte	30
	.byte	'Ifx_P_IOCR12',0,11,184,4,3
	.word	4569
	.byte	30
	.byte	'Ifx_P_IOCR4',0,11,192,4,3
	.word	4132
	.byte	30
	.byte	'Ifx_P_IOCR8',0,11,200,4,3
	.word	4349
	.byte	30
	.byte	'Ifx_P_LPCR',0,11,208,4,3
	.word	8936
	.byte	30
	.byte	'Ifx_P_OMCR',0,11,216,4,3
	.word	8616
	.byte	30
	.byte	'Ifx_P_OMCR0',0,11,224,4,3
	.word	7429
	.byte	30
	.byte	'Ifx_P_OMCR12',0,11,232,4,3
	.word	7935
	.byte	30
	.byte	'Ifx_P_OMCR4',0,11,240,4,3
	.word	7603
	.byte	30
	.byte	'Ifx_P_OMCR8',0,11,248,4,3
	.word	7779
	.byte	30
	.byte	'Ifx_P_OMR',0,11,128,5,3
	.word	3573
	.byte	30
	.byte	'Ifx_P_OMSR',0,11,136,5,3
	.word	8268
	.byte	30
	.byte	'Ifx_P_OMSR0',0,11,144,5,3
	.word	6739
	.byte	30
	.byte	'Ifx_P_OMSR12',0,11,152,5,3
	.word	7255
	.byte	30
	.byte	'Ifx_P_OMSR4',0,11,160,5,3
	.word	6908
	.byte	30
	.byte	'Ifx_P_OMSR8',0,11,168,5,3
	.word	7080
	.byte	30
	.byte	'Ifx_P_OUT',0,11,176,5,3
	.word	3002
	.byte	30
	.byte	'Ifx_P_PCSR',0,11,184,5,3
	.word	6592
	.byte	30
	.byte	'Ifx_P_PDISC',0,11,192,5,3
	.word	6228
	.byte	30
	.byte	'Ifx_P_PDR0',0,11,200,5,3
	.word	5197
	.byte	30
	.byte	'Ifx_P_PDR1',0,11,208,5,3
	.word	5513
	.byte	14
	.word	9648
	.byte	30
	.byte	'Ifx_P',0,11,128,6,3
	.word	101882
	.byte	15,10,73,9,1,16
	.byte	'IfxPort_ControlledBy_port',0,0,16
	.byte	'IfxPort_ControlledBy_hsct',0,1,0,30
	.byte	'IfxPort_ControlledBy',0,10,77,3
	.word	101902
	.byte	15,10,81,9,1,16
	.byte	'IfxPort_InputMode_undefined',0,127,16
	.byte	'IfxPort_InputMode_noPullDevice',0,0,16
	.byte	'IfxPort_InputMode_pullDown',0,8,16
	.byte	'IfxPort_InputMode_pullUp',0,16,0,30
	.byte	'IfxPort_InputMode',0,10,87,3
	.word	101993
	.byte	15,10,91,9,1,16
	.byte	'IfxPort_LvdsMode_high',0,0,16
	.byte	'IfxPort_LvdsMode_medium',0,1,0,30
	.byte	'IfxPort_LvdsMode',0,10,95,3
	.word	102144
	.byte	15,10,126,9,1,16
	.byte	'IfxPort_OutputIdx_general',0,128,1,16
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,16
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,16
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,16
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,16
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,16
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,16
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0,30
	.byte	'IfxPort_OutputIdx',0,10,136,1,3
	.word	102225
	.byte	15,10,140,1,9,1,16
	.byte	'IfxPort_OutputMode_none',0,0,16
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,16
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,30
	.byte	'IfxPort_OutputMode',0,10,145,1,3
	.word	102469
	.byte	15,10,151,1,9,1,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,16
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,16
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,16
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,16
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed1',0,12,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed2',0,13,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed3',0,14,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed4',0,15,0,30
	.byte	'IfxPort_PadDriver',0,10,165,1,3
	.word	102593
	.byte	15,10,169,1,9,1,16
	.byte	'IfxPort_PadSupply_3v',0,0,16
	.byte	'IfxPort_PadSupply_5v',0,1,0,30
	.byte	'IfxPort_PadSupply',0,10,173,1,3
	.word	103043
	.byte	15,10,177,1,9,1,16
	.byte	'IfxPort_PinFunctionMode_digital',0,0,16
	.byte	'IfxPort_PinFunctionMode_analog',0,1,0,30
	.byte	'IfxPort_PinFunctionMode',0,10,181,1,3
	.word	103123
	.byte	30
	.byte	'IfxPort_State',0,10,193,1,3
	.word	10228
	.byte	29,10,246,1,9,8,13
	.byte	'port',0
	.word	10223
	.byte	4,2,35,0,13
	.byte	'pinIndex',0
	.word	455
	.byte	1,2,35,4,0,30
	.byte	'IfxPort_Pin',0,10,250,1,3
	.word	103253
	.byte	10
	.byte	'_Ifx_SMU_ACCEN0_Bits',0,24,68,16,4,11
	.byte	'EN0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	455
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SMU_ACCEN0_Bits',0,24,102,3
	.word	103313
	.byte	10
	.byte	'_Ifx_SMU_ACCEN1_Bits',0,24,105,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_SMU_ACCEN1_Bits',0,24,108,3
	.word	103870
	.byte	10
	.byte	'_Ifx_SMU_AD_Bits',0,24,111,16,4,11
	.byte	'DF0',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'DF1',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'DF2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'DF3',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'DF4',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'DF5',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'DF6',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'DF7',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'DF8',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'DF9',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'DF10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'DF11',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'DF12',0,1
	.word	455
	.byte	1,3,2,35,1,11
	.byte	'DF13',0,1
	.word	455
	.byte	1,2,2,35,1,11
	.byte	'DF14',0,1
	.word	455
	.byte	1,1,2,35,1,11
	.byte	'DF15',0,1
	.word	455
	.byte	1,0,2,35,1,11
	.byte	'DF16',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'DF17',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'DF18',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'DF19',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'DF20',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'DF21',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'DF22',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'DF23',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'DF24',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'DF25',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'DF26',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'DF27',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'DF28',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'DF29',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'DF30',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'DF31',0,1
	.word	455
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SMU_AD_Bits',0,24,145,1,3
	.word	103947
	.byte	10
	.byte	'_Ifx_SMU_AEX_Bits',0,24,148,1,16,4,11
	.byte	'IRQ0STS',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'IRQ1STS',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'IRQ2STS',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'RST0STS',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'RST1STS',0,1
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'RST2STS',0,1
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'RST3STS',0,1
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'RST4STS',0,1
	.word	455
	.byte	1,0,2,35,0,11
	.byte	'RST5STS',0,1
	.word	455
	.byte	1,7,2,35,1,11
	.byte	'NMISTS',0,1
	.word	455
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	455
	.byte	1,5,2,35,1,11
	.byte	'EMSSTS',0,1
	.word	455
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	455
	.byte	4,0,2,35,1,11
	.byte	'IRQ0AEM',0,1
	.word	455
	.byte	1,7,2,35,2,11
	.byte	'IRQ1AEM',0,1
	.word	455
	.byte	1,6,2,35,2,11
	.byte	'IRQ2AEM',0,1
	.word	455
	.byte	1,5,2,35,2,11
	.byte	'RST0AEM',0,1
	.word	455
	.byte	1,4,2,35,2,11
	.byte	'RST1AEM',0,1
	.word	455
	.byte	1,3,2,35,2,11
	.byte	'RST2AEM',0,1
	.word	455
	.byte	1,2,2,35,2,11
	.byte	'RST3AEM',0,1
	.word	455
	.byte	1,1,2,35,2,11
	.byte	'RST4AEM',0,1
	.word	455
	.byte	1,0,2,35,2,11
	.byte	'RST5AEM',0,1
	.word	455
	.byte	1,7,2,35,3,11
	.byte	'NMIAEM',0,1
	.word	455
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	455
	.byte	1,5,2,35,3,11
	.byte	'EMSAEM',0,1
	.word	455
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	455
	.byte	4,0,2,35,3,0,30
	.byte	'Ifx_SMU_AEX_Bits',0,24,176,1,3
	.word	104497
	.byte	10
	.byte	'_Ifx_SMU_AEXCLR_Bits',0,24,179,1,16,4,11
	.byte	'IRQ0CLR',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'IRQ1CLR',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'IRQ2CLR',0,4
	.word	1121
	.byte	1,29,2,35,0,11
	.byte	'RST0CLR',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'RST1CLR',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'RST2CLR',0,4
	.word	1121
	.byte	1,26,2,35,0,11
	.byte	'RST3CLR',0,4
	.word	1121
	.byte	1,25,2,35,0,11
	.byte	'RST4CLR',0,4
	.word	1121
	.byte	1,24,2,35,0,11
	.byte	'RST5CLR',0,4
	.word	1121
	.byte	1,23,2,35,0,11
	.byte	'NMICLR',0,4
	.word	1121
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	1121
	.byte	1,21,2,35,0,11
	.byte	'EMSCLR',0,4
	.word	1121
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	1121
	.byte	4,16,2,35,0,11
	.byte	'IRQ0AEMCLR',0,4
	.word	1121
	.byte	1,15,2,35,0,11
	.byte	'IRQ1AEMCLR',0,4
	.word	1121
	.byte	1,14,2,35,0,11
	.byte	'IRQ2AEMCLR',0,4
	.word	1121
	.byte	1,13,2,35,0,11
	.byte	'RST0AEMCLR',0,4
	.word	1121
	.byte	1,12,2,35,0,11
	.byte	'RST1AEMCLR',0,4
	.word	1121
	.byte	1,11,2,35,0,11
	.byte	'RST2AEMCLR',0,4
	.word	1121
	.byte	1,10,2,35,0,11
	.byte	'RST3AEMCLR',0,4
	.word	1121
	.byte	1,9,2,35,0,11
	.byte	'RST4AEMCLR',0,4
	.word	1121
	.byte	1,8,2,35,0,11
	.byte	'RST5AEMCLR',0,4
	.word	1121
	.byte	1,7,2,35,0,11
	.byte	'NMIAEMCLR',0,4
	.word	1121
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	1121
	.byte	1,5,2,35,0,11
	.byte	'EMSAEMCLR',0,4
	.word	1121
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	1121
	.byte	4,0,2,35,0,0,30
	.byte	'Ifx_SMU_AEXCLR_Bits',0,24,207,1,3
	.word	105054
	.byte	10
	.byte	'_Ifx_SMU_AFCNT_Bits',0,24,210,1,16,4,11
	.byte	'FCNT',0,1
	.word	455
	.byte	4,4,2,35,0,11
	.byte	'ACNT',0,2
	.word	1022
	.byte	12,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1022
	.byte	14,2,2,35,2,11
	.byte	'FCO',0,1
	.word	455
	.byte	1,1,2,35,3,11
	.byte	'ACO',0,1
	.word	455
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SMU_AFCNT_Bits',0,24,217,1,3
	.word	105650
	.byte	10
	.byte	'_Ifx_SMU_AG_Bits',0,24,220,1,16,4,11
	.byte	'SF0',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'SF1',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'SF2',0,4
	.word	1121
	.byte	1,29,2,35,0,11
	.byte	'SF3',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'SF4',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'SF5',0,4
	.word	1121
	.byte	1,26,2,35,0,11
	.byte	'SF6',0,4
	.word	1121
	.byte	1,25,2,35,0,11
	.byte	'SF7',0,4
	.word	1121
	.byte	1,24,2,35,0,11
	.byte	'SF8',0,4
	.word	1121
	.byte	1,23,2,35,0,11
	.byte	'SF9',0,4
	.word	1121
	.byte	1,22,2,35,0,11
	.byte	'SF10',0,4
	.word	1121
	.byte	1,21,2,35,0,11
	.byte	'SF11',0,4
	.word	1121
	.byte	1,20,2,35,0,11
	.byte	'SF12',0,4
	.word	1121
	.byte	1,19,2,35,0,11
	.byte	'SF13',0,4
	.word	1121
	.byte	1,18,2,35,0,11
	.byte	'SF14',0,4
	.word	1121
	.byte	1,17,2,35,0,11
	.byte	'SF15',0,4
	.word	1121
	.byte	1,16,2,35,0,11
	.byte	'SF16',0,4
	.word	1121
	.byte	1,15,2,35,0,11
	.byte	'SF17',0,4
	.word	1121
	.byte	1,14,2,35,0,11
	.byte	'SF18',0,4
	.word	1121
	.byte	1,13,2,35,0,11
	.byte	'SF19',0,4
	.word	1121
	.byte	1,12,2,35,0,11
	.byte	'SF20',0,4
	.word	1121
	.byte	1,11,2,35,0,11
	.byte	'SF21',0,4
	.word	1121
	.byte	1,10,2,35,0,11
	.byte	'SF22',0,4
	.word	1121
	.byte	1,9,2,35,0,11
	.byte	'SF23',0,4
	.word	1121
	.byte	1,8,2,35,0,11
	.byte	'SF24',0,4
	.word	1121
	.byte	1,7,2,35,0,11
	.byte	'SF25',0,4
	.word	1121
	.byte	1,6,2,35,0,11
	.byte	'SF26',0,4
	.word	1121
	.byte	1,5,2,35,0,11
	.byte	'SF27',0,4
	.word	1121
	.byte	1,4,2,35,0,11
	.byte	'SF28',0,4
	.word	1121
	.byte	1,3,2,35,0,11
	.byte	'SF29',0,4
	.word	1121
	.byte	1,2,2,35,0,11
	.byte	'SF30',0,4
	.word	1121
	.byte	1,1,2,35,0,11
	.byte	'SF31',0,4
	.word	1121
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_SMU_AG_Bits',0,24,254,1,3
	.word	105790
	.byte	10
	.byte	'_Ifx_SMU_AGC_Bits',0,24,129,2,16,4,11
	.byte	'IGCS0',0,4
	.word	1121
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'IGCS1',0,4
	.word	1121
	.byte	3,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	1121
	.byte	1,24,2,35,0,11
	.byte	'IGCS2',0,4
	.word	1121
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	1121
	.byte	5,16,2,35,0,11
	.byte	'RCS',0,4
	.word	1121
	.byte	6,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	1121
	.byte	2,8,2,35,0,11
	.byte	'PES',0,4
	.word	1121
	.byte	5,3,2,35,0,11
	.byte	'EFRST',0,4
	.word	1121
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	1121
	.byte	2,0,2,35,0,0,30
	.byte	'Ifx_SMU_AGC_Bits',0,24,142,2,3
	.word	106341
	.byte	10
	.byte	'_Ifx_SMU_AGCF_Bits',0,24,145,2,16,4,11
	.byte	'CF0',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'CF1',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'CF2',0,4
	.word	1121
	.byte	1,29,2,35,0,11
	.byte	'CF3',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'CF4',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'CF5',0,4
	.word	1121
	.byte	1,26,2,35,0,11
	.byte	'CF6',0,4
	.word	1121
	.byte	1,25,2,35,0,11
	.byte	'CF7',0,4
	.word	1121
	.byte	1,24,2,35,0,11
	.byte	'CF8',0,4
	.word	1121
	.byte	1,23,2,35,0,11
	.byte	'CF9',0,4
	.word	1121
	.byte	1,22,2,35,0,11
	.byte	'CF10',0,4
	.word	1121
	.byte	1,21,2,35,0,11
	.byte	'CF11',0,4
	.word	1121
	.byte	1,20,2,35,0,11
	.byte	'CF12',0,4
	.word	1121
	.byte	1,19,2,35,0,11
	.byte	'CF13',0,4
	.word	1121
	.byte	1,18,2,35,0,11
	.byte	'CF14',0,4
	.word	1121
	.byte	1,17,2,35,0,11
	.byte	'CF15',0,4
	.word	1121
	.byte	1,16,2,35,0,11
	.byte	'CF16',0,4
	.word	1121
	.byte	1,15,2,35,0,11
	.byte	'CF17',0,4
	.word	1121
	.byte	1,14,2,35,0,11
	.byte	'CF18',0,4
	.word	1121
	.byte	1,13,2,35,0,11
	.byte	'CF19',0,4
	.word	1121
	.byte	1,12,2,35,0,11
	.byte	'CF20',0,4
	.word	1121
	.byte	1,11,2,35,0,11
	.byte	'CF21',0,4
	.word	1121
	.byte	1,10,2,35,0,11
	.byte	'CF22',0,4
	.word	1121
	.byte	1,9,2,35,0,11
	.byte	'CF23',0,4
	.word	1121
	.byte	1,8,2,35,0,11
	.byte	'CF24',0,4
	.word	1121
	.byte	1,7,2,35,0,11
	.byte	'CF25',0,4
	.word	1121
	.byte	1,6,2,35,0,11
	.byte	'CF26',0,4
	.word	1121
	.byte	1,5,2,35,0,11
	.byte	'CF27',0,4
	.word	1121
	.byte	1,4,2,35,0,11
	.byte	'CF28',0,4
	.word	1121
	.byte	1,3,2,35,0,11
	.byte	'CF29',0,4
	.word	1121
	.byte	1,2,2,35,0,11
	.byte	'CF30',0,4
	.word	1121
	.byte	1,1,2,35,0,11
	.byte	'CF31',0,4
	.word	1121
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_SMU_AGCF_Bits',0,24,179,2,3
	.word	106603
	.byte	10
	.byte	'_Ifx_SMU_AGFSP_Bits',0,24,182,2,16,4,11
	.byte	'FE0',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'FE1',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'FE2',0,4
	.word	1121
	.byte	1,29,2,35,0,11
	.byte	'FE3',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'FE4',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'FE5',0,4
	.word	1121
	.byte	1,26,2,35,0,11
	.byte	'FE6',0,4
	.word	1121
	.byte	1,25,2,35,0,11
	.byte	'FE7',0,4
	.word	1121
	.byte	1,24,2,35,0,11
	.byte	'FE8',0,4
	.word	1121
	.byte	1,23,2,35,0,11
	.byte	'FE9',0,4
	.word	1121
	.byte	1,22,2,35,0,11
	.byte	'FE10',0,4
	.word	1121
	.byte	1,21,2,35,0,11
	.byte	'FE11',0,4
	.word	1121
	.byte	1,20,2,35,0,11
	.byte	'FE12',0,4
	.word	1121
	.byte	1,19,2,35,0,11
	.byte	'FE13',0,4
	.word	1121
	.byte	1,18,2,35,0,11
	.byte	'FE14',0,4
	.word	1121
	.byte	1,17,2,35,0,11
	.byte	'FE15',0,4
	.word	1121
	.byte	1,16,2,35,0,11
	.byte	'FE16',0,4
	.word	1121
	.byte	1,15,2,35,0,11
	.byte	'FE17',0,4
	.word	1121
	.byte	1,14,2,35,0,11
	.byte	'FE18',0,4
	.word	1121
	.byte	1,13,2,35,0,11
	.byte	'FE19',0,4
	.word	1121
	.byte	1,12,2,35,0,11
	.byte	'FE20',0,4
	.word	1121
	.byte	1,11,2,35,0,11
	.byte	'FE21',0,4
	.word	1121
	.byte	1,10,2,35,0,11
	.byte	'FE22',0,4
	.word	1121
	.byte	1,9,2,35,0,11
	.byte	'FE23',0,4
	.word	1121
	.byte	1,8,2,35,0,11
	.byte	'FE24',0,4
	.word	1121
	.byte	1,7,2,35,0,11
	.byte	'FE25',0,4
	.word	1121
	.byte	1,6,2,35,0,11
	.byte	'FE26',0,4
	.word	1121
	.byte	1,5,2,35,0,11
	.byte	'FE27',0,4
	.word	1121
	.byte	1,4,2,35,0,11
	.byte	'FE28',0,4
	.word	1121
	.byte	1,3,2,35,0,11
	.byte	'FE29',0,4
	.word	1121
	.byte	1,2,2,35,0,11
	.byte	'FE30',0,4
	.word	1121
	.byte	1,1,2,35,0,11
	.byte	'FE31',0,4
	.word	1121
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_SMU_AGFSP_Bits',0,24,216,2,3
	.word	107158
	.byte	10
	.byte	'_Ifx_SMU_CLC_Bits',0,24,219,2,16,4,11
	.byte	'DISR',0,1
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,30
	.byte	'Ifx_SMU_CLC_Bits',0,24,226,2,3
	.word	107715
	.byte	10
	.byte	'_Ifx_SMU_CMD_Bits',0,24,229,2,16,4,11
	.byte	'CMD',0,4
	.word	1121
	.byte	4,28,2,35,0,11
	.byte	'ARG',0,4
	.word	1121
	.byte	4,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	1121
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_SMU_CMD_Bits',0,24,234,2,3
	.word	107858
	.byte	10
	.byte	'_Ifx_SMU_DBG_Bits',0,24,237,2,16,4,11
	.byte	'SSM',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	432
	.byte	30,0,2,35,0,0,30
	.byte	'Ifx_SMU_DBG_Bits',0,24,241,2,3
	.word	107961
	.byte	10
	.byte	'_Ifx_SMU_FSP_Bits',0,24,244,2,16,4,11
	.byte	'PRE1',0,4
	.word	1121
	.byte	3,29,2,35,0,11
	.byte	'PRE2',0,4
	.word	1121
	.byte	2,27,2,35,0,11
	.byte	'MODE',0,4
	.word	1121
	.byte	2,25,2,35,0,11
	.byte	'PES',0,4
	.word	1121
	.byte	1,24,2,35,0,11
	.byte	'TFSP_LOW',0,4
	.word	1121
	.byte	14,10,2,35,0,11
	.byte	'TFSP_HIGH',0,4
	.word	1121
	.byte	10,0,2,35,0,0,30
	.byte	'Ifx_SMU_FSP_Bits',0,24,252,2,3
	.word	108049
	.byte	10
	.byte	'_Ifx_SMU_ID_Bits',0,24,255,2,16,4,11
	.byte	'MOD_REV',0,1
	.word	455
	.byte	8,0,2,35,0,11
	.byte	'MOD_TYPE',0,1
	.word	455
	.byte	8,0,2,35,1,11
	.byte	'MOD_NUMBER',0,2
	.word	1022
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SMU_ID_Bits',0,24,132,3,3
	.word	108204
	.byte	10
	.byte	'_Ifx_SMU_KEYS_Bits',0,24,135,3,16,4,11
	.byte	'CFGLCK',0,4
	.word	1121
	.byte	8,24,2,35,0,11
	.byte	'PERLCK',0,4
	.word	1121
	.byte	8,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	1121
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_SMU_KEYS_Bits',0,24,140,3,3
	.word	108314
	.byte	10
	.byte	'_Ifx_SMU_OCS_Bits',0,24,143,3,16,4,11
	.byte	'TGS',0,1
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'TGB',0,1
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'TG_P',0,1
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	20,8,2,35,0,11
	.byte	'SUS',0,1
	.word	455
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	455
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	455
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	455
	.byte	2,0,2,35,3,0,30
	.byte	'Ifx_SMU_OCS_Bits',0,24,153,3,3
	.word	108426
	.byte	10
	.byte	'_Ifx_SMU_PCTL_Bits',0,24,156,3,16,4,11
	.byte	'HWDIR',0,4
	.word	1121
	.byte	2,30,2,35,0,11
	.byte	'HWEN',0,4
	.word	1121
	.byte	2,28,2,35,0,11
	.byte	'GFSCU_EN',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'GFSTS_EN',0,4
	.word	1121
	.byte	1,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	1121
	.byte	1,25,2,35,0,11
	.byte	'PCS',0,4
	.word	1121
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	1121
	.byte	6,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	1121
	.byte	9,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	1121
	.byte	9,0,2,35,0,0,30
	.byte	'Ifx_SMU_PCTL_Bits',0,24,167,3,3
	.word	108618
	.byte	10
	.byte	'_Ifx_SMU_RMCTL_Bits',0,24,170,3,16,4,11
	.byte	'TE0',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'TE1',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'TE2',0,4
	.word	1121
	.byte	1,29,2,35,0,11
	.byte	'TE3',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'TE4',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'TE5',0,4
	.word	1121
	.byte	1,26,2,35,0,11
	.byte	'TE6',0,4
	.word	1121
	.byte	1,25,2,35,0,11
	.byte	'TE7',0,4
	.word	1121
	.byte	1,24,2,35,0,11
	.byte	'TE8',0,4
	.word	1121
	.byte	1,23,2,35,0,11
	.byte	'TE9',0,4
	.word	1121
	.byte	1,22,2,35,0,11
	.byte	'TE10',0,4
	.word	1121
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	1121
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	1121
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	1121
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	1121
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	1121
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	1121
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	1121
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	1121
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	1121
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	1121
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	1121
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	1121
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	1121
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	1121
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	1121
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	1121
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	1121
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	1121
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	1121
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	1121
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	1121
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_SMU_RMCTL_Bits',0,24,204,3,3
	.word	108849
	.byte	10
	.byte	'_Ifx_SMU_RMEF_Bits',0,24,207,3,16,4,11
	.byte	'EF0',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'EF1',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'EF2',0,4
	.word	1121
	.byte	1,29,2,35,0,11
	.byte	'EF3',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'EF4',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'EF5',0,4
	.word	1121
	.byte	1,26,2,35,0,11
	.byte	'EF6',0,4
	.word	1121
	.byte	1,25,2,35,0,11
	.byte	'EF7',0,4
	.word	1121
	.byte	1,24,2,35,0,11
	.byte	'EF8',0,4
	.word	1121
	.byte	1,23,2,35,0,11
	.byte	'EF9',0,4
	.word	1121
	.byte	1,22,2,35,0,11
	.byte	'EF10',0,4
	.word	1121
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	1121
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	1121
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	1121
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	1121
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	1121
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	1121
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	1121
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	1121
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	1121
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	1121
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	1121
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	1121
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	1121
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	1121
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	1121
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	1121
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	1121
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	1121
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	1121
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	1121
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	1121
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_SMU_RMEF_Bits',0,24,241,3,3
	.word	109553
	.byte	10
	.byte	'_Ifx_SMU_RMSTS_Bits',0,24,244,3,16,4,11
	.byte	'STS0',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'STS1',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'STS2',0,4
	.word	1121
	.byte	1,29,2,35,0,11
	.byte	'STS3',0,4
	.word	1121
	.byte	1,28,2,35,0,11
	.byte	'STS4',0,4
	.word	1121
	.byte	1,27,2,35,0,11
	.byte	'STS5',0,4
	.word	1121
	.byte	1,26,2,35,0,11
	.byte	'STS6',0,4
	.word	1121
	.byte	1,25,2,35,0,11
	.byte	'STS7',0,4
	.word	1121
	.byte	1,24,2,35,0,11
	.byte	'STS8',0,4
	.word	1121
	.byte	1,23,2,35,0,11
	.byte	'STS9',0,4
	.word	1121
	.byte	1,22,2,35,0,11
	.byte	'STS10',0,4
	.word	1121
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	1121
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	1121
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	1121
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	1121
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	1121
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	1121
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	1121
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	1121
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	1121
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	1121
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	1121
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	1121
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	1121
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	1121
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	1121
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	1121
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	1121
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	1121
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	1121
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	1121
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	1121
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_SMU_RMSTS_Bits',0,24,150,4,3
	.word	110255
	.byte	10
	.byte	'_Ifx_SMU_RTAC00_Bits',0,24,153,4,16,4,11
	.byte	'GID0',0,4
	.word	1121
	.byte	4,28,2,35,0,11
	.byte	'ALID0',0,4
	.word	1121
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	1121
	.byte	7,16,2,35,0,11
	.byte	'GID1',0,4
	.word	1121
	.byte	4,12,2,35,0,11
	.byte	'ALID1',0,4
	.word	1121
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	1121
	.byte	7,0,2,35,0,0,30
	.byte	'Ifx_SMU_RTAC00_Bits',0,24,161,4,3
	.word	110970
	.byte	10
	.byte	'_Ifx_SMU_RTAC01_Bits',0,24,164,4,16,4,11
	.byte	'GID2',0,4
	.word	1121
	.byte	4,28,2,35,0,11
	.byte	'ALID2',0,4
	.word	1121
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	1121
	.byte	7,16,2,35,0,11
	.byte	'GID3',0,4
	.word	1121
	.byte	4,12,2,35,0,11
	.byte	'ALID3',0,4
	.word	1121
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	1121
	.byte	7,0,2,35,0,0,30
	.byte	'Ifx_SMU_RTAC01_Bits',0,24,172,4,3
	.word	111138
	.byte	10
	.byte	'_Ifx_SMU_RTAC10_Bits',0,24,175,4,16,4,11
	.byte	'GID0',0,4
	.word	1121
	.byte	4,28,2,35,0,11
	.byte	'ALID0',0,4
	.word	1121
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	1121
	.byte	7,16,2,35,0,11
	.byte	'GID1',0,4
	.word	1121
	.byte	4,12,2,35,0,11
	.byte	'ALID1',0,4
	.word	1121
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	1121
	.byte	7,0,2,35,0,0,30
	.byte	'Ifx_SMU_RTAC10_Bits',0,24,183,4,3
	.word	111306
	.byte	10
	.byte	'_Ifx_SMU_RTAC11_Bits',0,24,186,4,16,4,11
	.byte	'GID2',0,4
	.word	1121
	.byte	4,28,2,35,0,11
	.byte	'ALID2',0,4
	.word	1121
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	1121
	.byte	7,16,2,35,0,11
	.byte	'GID3',0,4
	.word	1121
	.byte	4,12,2,35,0,11
	.byte	'ALID3',0,4
	.word	1121
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	1121
	.byte	7,0,2,35,0,0,30
	.byte	'Ifx_SMU_RTAC11_Bits',0,24,194,4,3
	.word	111474
	.byte	10
	.byte	'_Ifx_SMU_RTC_Bits',0,24,197,4,16,4,11
	.byte	'RT0E',0,4
	.word	1121
	.byte	1,31,2,35,0,11
	.byte	'RT1E',0,4
	.word	1121
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	1121
	.byte	6,24,2,35,0,11
	.byte	'RTD',0,4
	.word	1121
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_SMU_RTC_Bits',0,24,203,4,3
	.word	111642
	.byte	10
	.byte	'_Ifx_SMU_STS_Bits',0,24,206,4,16,4,11
	.byte	'CMD',0,4
	.word	1121
	.byte	4,28,2,35,0,11
	.byte	'ARG',0,4
	.word	1121
	.byte	4,24,2,35,0,11
	.byte	'RES',0,4
	.word	1121
	.byte	1,23,2,35,0,11
	.byte	'ASCE',0,4
	.word	1121
	.byte	1,22,2,35,0,11
	.byte	'FSP',0,4
	.word	1121
	.byte	2,20,2,35,0,11
	.byte	'FSTS',0,4
	.word	1121
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	1121
	.byte	3,16,2,35,0,11
	.byte	'RTS0',0,4
	.word	1121
	.byte	1,15,2,35,0,11
	.byte	'RTME0',0,4
	.word	1121
	.byte	1,14,2,35,0,11
	.byte	'RTS1',0,4
	.word	1121
	.byte	1,13,2,35,0,11
	.byte	'RTME1',0,4
	.word	1121
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	1121
	.byte	12,0,2,35,0,0,30
	.byte	'Ifx_SMU_STS_Bits',0,24,220,4,3
	.word	111762
	.byte	12,24,228,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	103313
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SMU_ACCEN0',0,24,233,4,3
	.word	112017
	.byte	12,24,236,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	103870
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SMU_ACCEN1',0,24,241,4,3
	.word	112081
	.byte	12,24,244,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	103947
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SMU_AD',0,24,249,4,3
	.word	112145
	.byte	12,24,252,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104497
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SMU_AEX',0,24,129,5,3
	.word	112205
	.byte	12,24,132,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	105054
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SMU_AEXCLR',0,24,137,5,3
	.word	112266
	.byte	12,24,140,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	105650
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SMU_AFCNT',0,24,145,5,3
	.word	112330
	.byte	12,24,148,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	105790
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SMU_AG',0,24,153,5,3
	.word	112393
	.byte	12,24,156,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	106341
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SMU_AGC',0,24,161,5,3
	.word	112453
	.byte	12,24,164,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	106603
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SMU_AGCF',0,24,169,5,3
	.word	112514
	.byte	12,24,172,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107158
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SMU_AGFSP',0,24,177,5,3
	.word	112576
	.byte	12,24,180,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107715
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SMU_CLC',0,24,185,5,3
	.word	112639
	.byte	12,24,188,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107858
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SMU_CMD',0,24,193,5,3
	.word	112700
	.byte	12,24,196,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107961
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SMU_DBG',0,24,201,5,3
	.word	112761
	.byte	12,24,204,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	108049
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SMU_FSP',0,24,209,5,3
	.word	112822
	.byte	12,24,212,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	108204
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SMU_ID',0,24,217,5,3
	.word	112883
	.byte	12,24,220,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	108314
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SMU_KEYS',0,24,225,5,3
	.word	112943
	.byte	12,24,228,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	108426
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SMU_OCS',0,24,233,5,3
	.word	113005
	.byte	12,24,236,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	108618
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SMU_PCTL',0,24,241,5,3
	.word	113066
	.byte	12,24,244,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	108849
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SMU_RMCTL',0,24,249,5,3
	.word	113128
	.byte	12,24,252,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109553
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SMU_RMEF',0,24,129,6,3
	.word	113191
	.byte	12,24,132,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110255
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SMU_RMSTS',0,24,137,6,3
	.word	113253
	.byte	12,24,140,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110970
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SMU_RTAC00',0,24,145,6,3
	.word	113316
	.byte	12,24,148,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111138
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SMU_RTAC01',0,24,153,6,3
	.word	113380
	.byte	12,24,156,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111306
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SMU_RTAC10',0,24,161,6,3
	.word	113444
	.byte	12,24,164,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111474
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SMU_RTAC11',0,24,169,6,3
	.word	113508
	.byte	12,24,172,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111642
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SMU_RTC',0,24,177,6,3
	.word	113572
	.byte	12,24,180,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111762
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SMU_STS',0,24,185,6,3
	.word	113633
	.byte	15,12,210,2,9,1,16
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy30',0,1,16
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy60',0,2,16
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy120',0,3,16
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy240',0,4,0,30
	.byte	'IfxScuCcu_LowPowerDivRatio',0,12,216,2,3
	.word	113694
	.byte	15,12,220,2,9,1,16
	.byte	'IfxScuCcu_ModulationAmplitude_0p5',0,0,16
	.byte	'IfxScuCcu_ModulationAmplitude_1p0',0,1,16
	.byte	'IfxScuCcu_ModulationAmplitude_1p25',0,2,16
	.byte	'IfxScuCcu_ModulationAmplitude_1p5',0,3,16
	.byte	'IfxScuCcu_ModulationAmplitude_2p0',0,4,16
	.byte	'IfxScuCcu_ModulationAmplitude_2p5',0,5,16
	.byte	'IfxScuCcu_ModulationAmplitude_count',0,6,0,30
	.byte	'IfxScuCcu_ModulationAmplitude',0,12,229,2,3
	.word	113887
	.byte	15,12,254,3,9,1,16
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc1',0,0,16
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc0',0,1,16
	.byte	'IfxScuCcu_PllInputClockSelection_fSysclk',0,2,0,30
	.byte	'IfxScuCcu_PllInputClockSelection',0,12,131,4,3
	.word	114188
	.byte	15,12,135,4,9,1,16
	.byte	'IfxScuCcu_Traprequest_esr0',0,0,16
	.byte	'IfxScuCcu_Traprequest_esr1',0,1,16
	.byte	'IfxScuCcu_Traprequest_trap2',0,2,16
	.byte	'IfxScuCcu_Traprequest_smu',0,3,0,30
	.byte	'IfxScuCcu_Traprequest',0,12,141,4,3
	.word	114362
	.byte	15,12,147,4,9,1,16
	.byte	'IfxScuCcu_ModEn_disabled',0,0,16
	.byte	'IfxScuCcu_ModEn_enabled',0,1,0,30
	.byte	'IfxScuCcu_ModEn',0,12,151,4,3
	.word	114516
	.byte	29,12,162,4,9,6,13
	.byte	'pDivider',0
	.word	455
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	455
	.byte	1,2,35,1,13
	.byte	'k2Divider',0
	.word	455
	.byte	1,2,35,2,13
	.byte	'k3Divider',0
	.word	455
	.byte	1,2,35,3,13
	.byte	'k3DividerBypass',0
	.word	455
	.byte	1,2,35,4,0,30
	.byte	'IfxScuCcu_PerPllConfig',0,12,171,4,3
	.word	114601
	.byte	29,12,176,4,9,4,13
	.byte	'pDivider',0
	.word	455
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	455
	.byte	1,2,35,1,13
	.byte	'k2Divider',0
	.word	455
	.byte	1,2,35,2,0,30
	.byte	'IfxScuCcu_SysPllConfig',0,12,181,4,3
	.word	114739
	.byte	29,12,189,4,9,8,13
	.byte	'value',0
	.word	2495
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	2495
	.byte	4,2,35,4,0,30
	.byte	'IfxScuCcu_CcuconRegConfig',0,12,193,4,3
	.word	114833
	.byte	29,12,197,4,9,6,13
	.byte	'k2Step',0
	.word	455
	.byte	1,2,35,0,13
	.byte	'waitTime',0
	.word	228
	.byte	4,2,35,2,0,30
	.byte	'IfxScuCcu_PllStepConfig',0,12,201,4,3
	.word	114904
	.byte	29,12,205,4,9,16,13
	.byte	'xtalFrequency',0
	.word	2495
	.byte	4,2,35,0,13
	.byte	'pllInputClockSelection',0
	.word	114188
	.byte	1,2,35,4,13
	.byte	'sysPllConfig',0
	.word	114739
	.byte	4,2,35,6,13
	.byte	'perPllConfig',0
	.word	114601
	.byte	6,2,35,10,0,30
	.byte	'IfxScuCcu_pllsParameterConfig',0,12,211,4,3
	.word	114978
	.byte	29,12,219,4,9,8,13
	.byte	'value',0
	.word	2495
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	2495
	.byte	4,2,35,4,0,30
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,12,223,4,3
	.word	115123
	.byte	29,12,231,4,9,80,13
	.byte	'ccucon0',0
	.word	114833
	.byte	8,2,35,0,13
	.byte	'ccucon1',0
	.word	114833
	.byte	8,2,35,8,13
	.byte	'ccucon2',0
	.word	114833
	.byte	8,2,35,16,13
	.byte	'ccucon5',0
	.word	114833
	.byte	8,2,35,24,13
	.byte	'ccucon6',0
	.word	114833
	.byte	8,2,35,32,13
	.byte	'ccucon7',0
	.word	114833
	.byte	8,2,35,40,13
	.byte	'ccucon8',0
	.word	114833
	.byte	8,2,35,48,13
	.byte	'ccucon9',0
	.word	114833
	.byte	8,2,35,56,13
	.byte	'ccucon10',0
	.word	114833
	.byte	8,2,35,64,13
	.byte	'ccucon11',0
	.word	114833
	.byte	8,2,35,72,0,30
	.byte	'IfxScuCcu_ClockDistributionConfig',0,12,243,4,3
	.word	115199
	.byte	29,12,247,4,9,20,13
	.byte	'pllsParameters',0
	.word	114978
	.byte	16,2,35,0,13
	.byte	'waitTime',0
	.word	228
	.byte	4,2,35,16,0,30
	.byte	'IfxScuCcu_InitialStepConfig',0,12,251,4,3
	.word	115421
	.byte	20
	.word	114904
	.byte	3
	.word	115507
	.byte	29,12,255,4,9,8,13
	.byte	'numOfSteps',0
	.word	455
	.byte	1,2,35,0,13
	.byte	'pllSteps',0
	.word	115512
	.byte	4,2,35,4,0,30
	.byte	'IfxScuCcu_PllThrottleConfig',0,12,131,5,3
	.word	115517
	.byte	29,12,137,5,9,2,13
	.byte	'Mod_Enable',0
	.word	114516
	.byte	1,2,35,0,13
	.byte	'Mod_Amp',0
	.word	113887
	.byte	1,2,35,1,0,30
	.byte	'IfxScuCcu_Mod_Config',0,12,141,5,3
	.word	115599
	.byte	30
	.byte	'IfxDma_ChannelBusPriority',0,13,96,3
	.word	24304
	.byte	30
	.byte	'IfxDma_ChannelIncrementCircular',0,13,119,3
	.word	24772
	.byte	30
	.byte	'IfxDma_ChannelIncrementDirection',0,13,128,1,3
	.word	24678
	.byte	30
	.byte	'IfxDma_ChannelIncrementStep',0,13,143,1,3
	.word	24410
	.byte	30
	.byte	'IfxDma_ChannelInterruptControl',0,13,152,1,3
	.word	25939
	.byte	30
	.byte	'IfxDma_ChannelMove',0,13,167,1,3
	.word	23362
	.byte	30
	.byte	'IfxDma_ChannelMoveSize',0,13,180,1,3
	.word	23754
	.byte	30
	.byte	'IfxDma_ChannelOperationMode',0,13,189,1,3
	.word	23669
	.byte	30
	.byte	'IfxDma_ChannelPattern',0,13,204,1,3
	.word	23948
	.byte	30
	.byte	'IfxDma_ChannelRequestMode',0,13,222,1,3
	.word	23554
	.byte	30
	.byte	'IfxDma_ChannelRequestSource',0,13,231,1,3
	.word	24215
	.byte	30
	.byte	'IfxDma_ChannelShadow',0,13,251,1,3
	.word	25386
	.byte	15,13,253,1,9,1,16
	.byte	'IfxDma_HardwareResourcePartition_0',0,0,16
	.byte	'IfxDma_HardwareResourcePartition_1',0,1,16
	.byte	'IfxDma_HardwareResourcePartition_2',0,2,16
	.byte	'IfxDma_HardwareResourcePartition_3',0,3,0,30
	.byte	'IfxDma_HardwareResourcePartition',0,13,131,2,3
	.word	116096
	.byte	15,13,135,2,9,1,16
	.byte	'IfxDma_MoveEngine_0',0,0,16
	.byte	'IfxDma_MoveEngine_1',0,1,0,30
	.byte	'IfxDma_MoveEngine',0,13,139,2,3
	.word	116293
	.byte	15,13,144,2,9,1,16
	.byte	'IfxDma_SleepMode_enable',0,0,16
	.byte	'IfxDma_SleepMode_disable',0,1,0,30
	.byte	'IfxDma_SleepMode',0,13,148,2,3
	.word	116371
	.byte	30
	.byte	'IfxDma_Dma',0,16,207,3,3
	.word	23231
	.byte	30
	.byte	'IfxDma_Dma_Channel',0,16,220,3,3
	.word	23301
	.byte	30
	.byte	'IfxDma_Dma_ChannelConfig',0,16,132,4,3
	.word	26057
	.byte	30
	.byte	'IfxDma_Dma_Config',0,16,139,4,3
	.word	23256
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L31:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,39,12,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,36,0,3,8,11,15,62
	.byte	15,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,59,0,3,8,0,0,10,19,1,3,8,58,15,59,15
	.byte	57,15,11,15,0,0,11,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,12,23,1,58,15,59,15,57,15,11,15,0,0,13,13
	.byte	0,3,8,73,19,11,15,56,9,0,0,14,53,0,73,19,0,0,15,4,1,58,15,59,15,57,15,11,15,0,0,16,40,0,3,8,28,13,0,0
	.byte	17,11,1,0,0,18,1,1,11,15,73,19,0,0,19,33,0,47,15,0,0,20,38,0,73,19,0,0,21,46,1,3,8,54,15,39,12,63,12,60
	.byte	12,0,0,22,5,0,73,19,0,0,23,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,24,5,0,3,8,73,19,0,0,25,46,1,49
	.byte	19,0,0,26,5,0,49,19,0,0,27,29,1,49,19,0,0,28,11,0,49,19,0,0,29,19,1,58,15,59,15,57,15,11,15,0,0,30,22
	.byte	0,3,8,58,15,59,15,57,15,73,19,0,0,31,21,0,54,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L32:
	.word	.L188-.L187
.L187:
	.half	3
	.word	.L190-.L189
.L189:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Std',0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0
	.byte	'IfxSrc.h',0,2,0,0
	.byte	'IfxSrc_regdef.h',0,3,0,0
	.byte	'IfxSrc_cfg.h',0,4,0,0
	.byte	'IfxScuWdt.h',0,5,0,0
	.byte	'IfxScu_regdef.h',0,3,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'IfxCpu_cfg.h',0,4,0,0
	.byte	'IfxPort.h',0,6,0,0
	.byte	'IfxPort_regdef.h',0,3,0,0
	.byte	'IfxScuCcu.h',0,5,0,0
	.byte	'IfxDma.h',0,7,0,0
	.byte	'IfxDma_regdef.h',0,3,0,0
	.byte	'IfxDma_cfg.h',0,4,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.h',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'Ifx_TypesReg.h',0,3,0,0
	.byte	'IfxScu_cfg.h',0,4,0,0
	.byte	'IfxCpu_regdef.h',0,3,0,0
	.byte	'IfxStm_regdef.h',0,3,0,0
	.byte	'IfxSmu_regdef.h',0,3,0,0,0
.L190:
.L188:
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_createModuleHandle')
	.sect	'.debug_info'
.L33:
	.word	271
	.half	3
	.word	.L34
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L36,.L35
	.byte	2
	.word	.L29
	.byte	3
	.byte	'IfxDma_Dma_createModuleHandle',0,1,127,6,1,1,1
	.word	.L14,.L78,.L13
	.byte	4
	.byte	'dmaHandle',0,1,127,48
	.word	.L79,.L80
	.byte	4
	.byte	'dma',0,1,127,68
	.word	.L81,.L82
	.byte	5
	.word	.L14,.L78
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_createModuleHandle')
	.sect	'.debug_abbrev'
.L34:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_createModuleHandle')
	.sect	'.debug_line'
.L35:
	.word	.L192-.L191
.L191:
	.half	3
	.word	.L194-.L193
.L193:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0,0
.L194:
	.byte	5,20,7,0,5,2
	.word	.L14
	.byte	3,128,1,1,5,1,9
	.half	.L195-.L14
	.byte	3,1,1,7,9
	.half	.L37-.L195
	.byte	0,1,1
.L192:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_createModuleHandle')
	.sect	'.debug_ranges'
.L36:
	.word	-1,.L14,0,.L37-.L14,0,0
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_deInitChannel')
	.sect	'.debug_info'
.L38:
	.word	354
	.half	3
	.word	.L39
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L41,.L40
	.byte	2
	.word	.L29
	.byte	3
	.byte	'IfxDma_Dma_deInitChannel',0,1,133,1,6,1,1,1
	.word	.L16,.L83,.L15
	.byte	4
	.byte	'dma',0,1,133,1,43
	.word	.L79,.L84
	.byte	4
	.byte	'channel',0,1,133,1,65
	.word	.L85,.L86
	.byte	5
	.word	.L87
	.byte	6
	.word	.L88,.L89,.L5
	.byte	7
	.word	.L90,.L91
	.byte	7
	.word	.L92,.L93
	.byte	8
	.word	.L94,.L89,.L5
	.byte	0,6
	.word	.L95,.L96,.L6
	.byte	7
	.word	.L97,.L98
	.byte	7
	.word	.L99,.L100
	.byte	8
	.word	.L101,.L96,.L6
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_deInitChannel')
	.sect	'.debug_abbrev'
.L39:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,29,1,49,16
	.byte	17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_deInitChannel')
	.sect	'.debug_line'
.L40:
	.word	.L197-.L196
.L196:
	.half	3
	.word	.L199-.L198
.L198:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0
	.byte	'IfxDma.h',0,1,0,0,0
.L199:
	.byte	5,47,7,0,5,2
	.word	.L16
	.byte	3,134,1,1,5,5,9
	.half	.L176-.L16
	.byte	1,4,2,5,26,7,9
	.half	.L89-.L176
	.byte	3,150,9,1,5,31,9
	.half	.L200-.L89
	.byte	1,4,1,5,28,9
	.half	.L5-.L200
	.byte	3,239,118,1,4,2,5,31,9
	.half	.L96-.L5
	.byte	3,161,11,1,4,1,5,39,9
	.half	.L6-.L96
	.byte	3,225,116,1,5,13,9
	.half	.L177-.L6
	.byte	1,5,1,7,9
	.half	.L201-.L177
	.byte	3,2,1,7,9
	.half	.L42-.L201
	.byte	0,1,1
.L197:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_deInitChannel')
	.sect	'.debug_ranges'
.L41:
	.word	-1,.L16,0,.L42-.L16,0,0
.L87:
	.word	-1,.L16,0,.L83-.L16,-1,.L18,0,.L77-.L18,0,0
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_initModule')
	.sect	'.debug_info'
.L43:
	.word	263
	.half	3
	.word	.L44
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L46,.L45
	.byte	2
	.word	.L29
	.byte	3
	.byte	'IfxDma_Dma_initModule',0,1,235,1,6,1,1,1
	.word	.L26,.L102,.L25
	.byte	4
	.byte	'dma',0,1,235,1,40
	.word	.L79,.L103
	.byte	4
	.byte	'config',0,1,235,1,70
	.word	.L104,.L105
	.byte	5
	.word	.L26,.L102
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_initModule')
	.sect	'.debug_abbrev'
.L44:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_initModule')
	.sect	'.debug_line'
.L45:
	.word	.L203-.L202
.L202:
	.half	3
	.word	.L205-.L204
.L204:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0,0
.L205:
	.byte	5,22,7,0,5,2
	.word	.L26
	.byte	3,236,1,1,5,14,9
	.half	.L206-.L26
	.byte	1,5,1,9
	.half	.L207-.L206
	.byte	3,1,1,7,9
	.half	.L47-.L207
	.byte	0,1,1
.L203:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_initModule')
	.sect	'.debug_ranges'
.L46:
	.word	-1,.L26,0,.L47-.L26,0,0
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_initModuleConfig')
	.sect	'.debug_info'
.L48:
	.word	269
	.half	3
	.word	.L49
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L51,.L50
	.byte	2
	.word	.L29
	.byte	3
	.byte	'IfxDma_Dma_initModuleConfig',0,1,241,1,6,1,1,1
	.word	.L28,.L106,.L27
	.byte	4
	.byte	'config',0,1,241,1,53
	.word	.L107,.L108
	.byte	4
	.byte	'dma',0,1,241,1,70
	.word	.L81,.L109
	.byte	5
	.word	.L28,.L106
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_initModuleConfig')
	.sect	'.debug_abbrev'
.L49:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_initModuleConfig')
	.sect	'.debug_line'
.L50:
	.word	.L209-.L208
.L208:
	.half	3
	.word	.L211-.L210
.L210:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0,0
.L211:
	.byte	5,17,7,0,5,2
	.word	.L28
	.byte	3,242,1,1,5,1,9
	.half	.L212-.L28
	.byte	3,1,1,7,9
	.half	.L52-.L212
	.byte	0,1,1
.L209:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_initModuleConfig')
	.sect	'.debug_ranges'
.L51:
	.word	-1,.L28,0,.L52-.L28,0,0
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_initChannel')
	.sect	'.debug_info'
.L53:
	.word	555
	.half	3
	.word	.L54
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L56,.L55
	.byte	2
	.word	.L29
	.byte	3
	.byte	'IfxDma_Dma_initChannel',0,1,147,1,6,1,1,1
	.word	.L20,.L110,.L19
	.byte	4
	.byte	'channel',0,1,147,1,49
	.word	.L111,.L112
	.byte	4
	.byte	'config',0,1,147,1,90
	.word	.L113,.L114
	.byte	5
	.word	.L20,.L110
	.byte	6
	.byte	'dma',0,1,149,1,14
	.word	.L81,.L115
	.byte	5
	.word	.L116,.L117
	.byte	6
	.byte	'tsr',0,1,158,1,21
	.word	.L118,.L119
	.byte	0,5
	.word	.L120,.L9
	.byte	7
	.word	.L121,.L120,.L122
	.byte	8
	.word	.L123,.L124
	.byte	8
	.word	.L125,.L126
	.byte	9
	.word	.L127,.L128
	.byte	0,7
	.word	.L121,.L129,.L130
	.byte	8
	.word	.L123,.L124
	.byte	8
	.word	.L125,.L126
	.byte	0,7
	.word	.L121,.L131,.L132
	.byte	8
	.word	.L123,.L124
	.byte	8
	.word	.L125,.L126
	.byte	0,7
	.word	.L133,.L132,.L134
	.byte	8
	.word	.L135,.L136
	.byte	8
	.word	.L137,.L138
	.byte	8
	.word	.L139,.L140
	.byte	10
	.word	.L141,.L132,.L134
	.byte	7
	.word	.L142,.L143,.L134
	.byte	8
	.word	.L144,.L145
	.byte	11
	.word	.L146,.L143,.L134
	.byte	0,0,0,7
	.word	.L147,.L134,.L9
	.byte	8
	.word	.L148,.L149
	.byte	11
	.word	.L150,.L134,.L9
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_initChannel')
	.sect	'.debug_abbrev'
.L54:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,85,6,0,0
	.byte	10,11,1,49,16,17,1,18,1,0,0,11,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_initChannel')
	.sect	'.debug_line'
.L55:
	.word	.L214-.L213
.L213:
	.half	3
	.word	.L216-.L215
.L215:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0
	.byte	'IfxDma.h',0,1,0,0
	.byte	'IfxSrc.h',0,2,0,0,0
.L216:
	.byte	5,6,7,0,5,2
	.word	.L20
	.byte	3,146,1,1,5,26,9
	.half	.L179-.L20
	.byte	3,2,1,5,6,9
	.half	.L217-.L179
	.byte	3,126,1,5,34,9
	.half	.L180-.L217
	.byte	3,2,1,5,24,9
	.half	.L181-.L180
	.byte	3,2,1,5,32,9
	.half	.L218-.L181
	.byte	3,1,1,5,24,9
	.half	.L219-.L218
	.byte	1,5,41,9
	.half	.L220-.L219
	.byte	3,1,1,5,34,9
	.half	.L221-.L220
	.byte	1,5,24,9
	.half	.L178-.L221
	.byte	1,5,58,9
	.half	.L222-.L178
	.byte	3,2,1,5,19,9
	.half	.L116-.L222
	.byte	3,6,1,5,15,9
	.half	.L223-.L116
	.byte	3,126,1,5,9,9
	.half	.L182-.L223
	.byte	3,2,1,5,23,7,9
	.half	.L224-.L182
	.byte	3,2,1,5,26,1,5,23,9
	.half	.L7-.L224
	.byte	3,4,1,5,25,9
	.half	.L8-.L7
	.byte	3,3,1,5,17,9
	.half	.L225-.L8
	.byte	1,5,40,9
	.half	.L226-.L225
	.byte	1,5,15,9
	.half	.L117-.L226
	.byte	3,3,1,5,5,9
	.half	.L183-.L117
	.byte	1,4,2,5,34,7,9
	.half	.L120-.L183
	.byte	3,220,10,1,4,1,5,80,9
	.half	.L122-.L120
	.byte	3,166,117,1,4,2,5,34,9
	.half	.L129-.L122
	.byte	3,218,10,1,4,1,5,32,9
	.half	.L130-.L129
	.byte	3,167,117,1,4,2,5,37,9
	.half	.L131-.L130
	.byte	3,217,10,1,4,3,5,17,9
	.half	.L132-.L131
	.byte	3,136,118,1,5,11,9
	.half	.L227-.L132
	.byte	3,1,1,5,17,9
	.half	.L228-.L227
	.byte	1,5,11,9
	.half	.L143-.L228
	.byte	3,103,1,5,17,9
	.half	.L229-.L143
	.byte	1,5,11,9
	.half	.L134-.L229
	.byte	3,18,1,5,16,9
	.half	.L230-.L134
	.byte	1,4,1,5,1,9
	.half	.L9-.L230
	.byte	3,168,127,1,7,9
	.half	.L57-.L9
	.byte	0,1,1
.L214:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_initChannel')
	.sect	'.debug_ranges'
.L56:
	.word	-1,.L20,0,.L57-.L20,0,0
.L128:
	.word	-1,.L20,.L120-.L20,.L122-.L20,.L129-.L20,.L130-.L20,.L131-.L20,.L132-.L20,0,0
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_initChannelConfig')
	.sect	'.debug_info'
.L58:
	.word	270
	.half	3
	.word	.L59
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L61,.L60
	.byte	2
	.word	.L29
	.byte	3
	.byte	'IfxDma_Dma_initChannelConfig',0,1,182,1,6,1,1,1
	.word	.L22,.L151,.L21
	.byte	4
	.byte	'config',0,1,182,1,61
	.word	.L152,.L153
	.byte	4
	.byte	'dma',0,1,182,1,81
	.word	.L79,.L154
	.byte	5
	.word	.L22,.L151
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_initChannelConfig')
	.sect	'.debug_abbrev'
.L59:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_initChannelConfig')
	.sect	'.debug_line'
.L60:
	.word	.L232-.L231
.L231:
	.half	3
	.word	.L234-.L233
.L233:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0,0
.L234:
	.byte	5,52,7,0,5,2
	.word	.L22
	.byte	3,183,1,1,5,13,9
	.half	.L235-.L22
	.byte	3,38,1,5,20,9
	.half	.L185-.L235
	.byte	3,3,1,5,1,9
	.half	.L186-.L185
	.byte	3,1,1,7,9
	.half	.L62-.L186
	.byte	0,1,1
.L232:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_initChannelConfig')
	.sect	'.debug_ranges'
.L61:
	.word	-1,.L22,0,.L62-.L22,0,0
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_initLinkedListEntry')
	.sect	'.debug_info'
.L63:
	.word	281
	.half	3
	.word	.L64
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L66,.L65
	.byte	2
	.word	.L29
	.byte	3
	.byte	'IfxDma_Dma_initLinkedListEntry',0,1,229,1,6,1,1,1
	.word	.L24,.L155,.L23
	.byte	4
	.byte	'ptrToAddress',0,1,229,1,43
	.word	.L156,.L157
	.byte	4
	.byte	'config',0,1,229,1,89
	.word	.L113,.L158
	.byte	5
	.word	.L24,.L155
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_initLinkedListEntry')
	.sect	'.debug_abbrev'
.L64:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_initLinkedListEntry')
	.sect	'.debug_line'
.L65:
	.word	.L237-.L236
.L236:
	.half	3
	.word	.L239-.L238
.L238:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0,0
.L239:
	.byte	5,68,7,0,5,2
	.word	.L24
	.byte	3,230,1,1,5,1,7,9
	.half	.L67-.L24
	.byte	3,1,0,1,1
.L237:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_initLinkedListEntry')
	.sect	'.debug_ranges'
.L66:
	.word	-1,.L24,0,.L67-.L24,0,0
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_configureTransactionSet')
	.sect	'.debug_info'
.L68:
	.word	360
	.half	3
	.word	.L69
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L71,.L70
	.byte	2
	.word	.L29
	.byte	3
	.byte	'IfxDma_Dma_configureTransactionSet',0,1,63,17,1,1
	.word	.L12,.L159,.L11
	.byte	4
	.byte	'channel',0,1,63,64
	.word	.L160,.L161
	.byte	4
	.byte	'config',0,1,63,105
	.word	.L113,.L162
	.byte	5
	.word	.L12,.L159
	.byte	5
	.word	.L12,.L163
	.byte	6
	.byte	'chcfgr',0,1,71,27
	.word	.L164,.L165
	.byte	0,5
	.word	.L163,.L166
	.byte	6
	.byte	'adicr',0,1,85,26
	.word	.L167,.L168
	.byte	0,5
	.word	.L166,.L169
	.byte	6
	.byte	'tsr',0,1,106,21
	.word	.L118,.L170
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_configureTransactionSet')
	.sect	'.debug_abbrev'
.L69:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_configureTransactionSet')
	.sect	'.debug_line'
.L70:
	.word	.L241-.L240
.L240:
	.half	3
	.word	.L243-.L242
.L242:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0,0
.L243:
	.byte	5,27,7,0,5,2
	.word	.L12
	.byte	3,199,0,1,5,35,3,1,1,5,27,9
	.half	.L171-.L12
	.byte	1,5,35,3,1,1,5,27,9
	.half	.L244-.L171
	.byte	1,5,35,3,1,1,5,27,9
	.half	.L245-.L244
	.byte	1,5,35,3,1,1,5,27,9
	.half	.L246-.L245
	.byte	1,5,35,3,1,1,5,27,9
	.half	.L247-.L246
	.byte	1,5,35,3,1,1,5,27,9
	.half	.L248-.L247
	.byte	1,5,35,3,1,1,5,27,9
	.half	.L249-.L248
	.byte	1,3,2,1,5,23,9
	.half	.L163-.L249
	.byte	3,5,1,5,31,9
	.half	.L172-.L163
	.byte	3,1,1,5,76,9
	.half	.L250-.L172
	.byte	3,12,1,5,23,9
	.half	.L251-.L250
	.byte	3,116,1,5,31,3,1,1,5,70,9
	.half	.L252-.L251
	.byte	3,11,1,5,23,9
	.half	.L253-.L252
	.byte	3,117,1,5,31,3,1,1,5,23,9
	.half	.L254-.L253
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L255-.L254
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L256-.L255
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L257-.L256
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L258-.L257
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L259-.L258
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L260-.L259
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L261-.L260
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L262-.L261
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L263-.L262
	.byte	1,5,32,3,1,1,5,26,9
	.half	.L264-.L263
	.byte	1,5,67,9
	.half	.L265-.L264
	.byte	1,5,23,9
	.half	.L266-.L265
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L267-.L266
	.byte	1,5,26,3,3,1,5,63,9
	.half	.L166-.L267
	.byte	3,4,1,5,88,9
	.half	.L268-.L166
	.byte	1,5,63,9
	.half	.L173-.L268
	.byte	3,1,1,5,71,9
	.half	.L269-.L173
	.byte	3,127,1,5,81,9
	.half	.L270-.L269
	.byte	1,5,100,9
	.half	.L271-.L270
	.byte	1,5,55,9
	.half	.L174-.L271
	.byte	3,1,1,3,2,1,5,31,9
	.half	.L169-.L174
	.byte	3,2,1,5,23,9
	.half	.L175-.L169
	.byte	1,5,31,9
	.half	.L272-.L175
	.byte	3,1,1,5,23,9
	.half	.L273-.L272
	.byte	1,5,31,9
	.half	.L274-.L273
	.byte	3,1,1,5,23,9
	.half	.L275-.L274
	.byte	1,5,31,9
	.half	.L276-.L275
	.byte	3,1,1,5,23,9
	.half	.L277-.L276
	.byte	1,5,16,9
	.half	.L278-.L277
	.byte	3,3,1,5,9,9
	.half	.L279-.L278
	.byte	1,5,32,7,9
	.half	.L280-.L279
	.byte	3,1,1,7,9
	.half	.L281-.L280
	.byte	3,1,1,5,34,7,9
	.half	.L282-.L281
	.byte	3,2,1,5,26,9
	.half	.L283-.L282
	.byte	1,5,1,9
	.half	.L2-.L283
	.byte	3,2,1,7,9
	.half	.L72-.L2
	.byte	0,1,1
.L241:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_configureTransactionSet')
	.sect	'.debug_ranges'
.L71:
	.word	-1,.L12,0,.L72-.L12,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_4')
	.sect	'.debug_info'
.L73:
	.word	203
	.half	3
	.word	.L74
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L76,.L75
	.byte	2
	.word	.L29
	.byte	3
	.byte	'.cocofun_4',0,1,133,1,6,1
	.word	.L18,.L77,.L17
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_4')
	.sect	'.debug_abbrev'
.L74:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_4')
	.sect	'.debug_line'
.L75:
	.word	.L285-.L284
.L284:
	.half	3
	.word	.L287-.L286
.L286:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0
	.byte	'IfxDma.h',0,1,0,0,0
.L287:
	.byte	5,39,7,0,5,2
	.word	.L18
	.byte	3,141,1,1,4,2,5,20,9
	.half	.L288-.L18
	.byte	3,135,11,1,5,33,9
	.half	.L289-.L288
	.byte	1,9
	.half	.L77-.L289
	.byte	0,1,1,5,47,0,5,2
	.word	.L18
	.byte	3,134,1,1,4,2,5,20,9
	.half	.L288-.L18
	.byte	3,148,11,1,5,33,9
	.half	.L289-.L288
	.byte	1,9
	.half	.L290-.L289
	.byte	3,122,1,7,9
	.half	.L77-.L290
	.byte	0,1,1,5,28,0,5,2
	.word	.L18
	.byte	3,139,1,1,4,2,5,13,9
	.half	.L288-.L18
	.byte	3,161,11,1,5,26,9
	.half	.L289-.L288
	.byte	1,5,33,9
	.half	.L290-.L289
	.byte	3,104,1,7,9
	.half	.L77-.L290
	.byte	0,1,1
.L285:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_4')
	.sect	'.debug_ranges'
.L76:
	.word	-1,.L18,0,.L77-.L18,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_4')
	.sect	'.debug_loc'
.L17:
	.word	-1,.L18,0,.L77-.L18
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_configureTransactionSet')
	.sect	'.debug_loc'
.L11:
	.word	-1,.L12,0,.L159-.L12
	.half	2
	.byte	138,0
	.word	0,0
.L168:
	.word	-1,.L12,.L172-.L12,.L173-.L12
	.half	1
	.byte	95
	.word	0,0
.L161:
	.word	-1,.L12,0,.L159-.L12
	.half	1
	.byte	100
	.word	0,0
.L165:
	.word	-1,.L12,.L171-.L12,.L172-.L12
	.half	1
	.byte	95
	.word	0,0
.L162:
	.word	-1,.L12,0,.L159-.L12
	.half	1
	.byte	101
	.word	0,0
.L170:
	.word	-1,.L12,.L174-.L12,.L175-.L12
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_createModuleHandle')
	.sect	'.debug_loc'
.L13:
	.word	-1,.L14,0,.L78-.L14
	.half	2
	.byte	138,0
	.word	0,0
.L82:
	.word	-1,.L14,0,.L78-.L14
	.half	1
	.byte	101
	.word	0,0
.L80:
	.word	-1,.L14,0,.L78-.L14
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_deInitChannel')
	.sect	'.debug_loc'
.L15:
	.word	-1,.L16,0,.L83-.L16
	.half	2
	.byte	138,0
	.word	0,0
.L86:
	.word	-1,.L16,.L18-.L16,.L77-.L16
	.half	1
	.byte	84
	.word	.L176-.L16,.L5-.L16
	.half	1
	.byte	84
	.word	.L96-.L16,.L6-.L16
	.half	1
	.byte	84
	.word	.L177-.L16,.L83-.L16
	.half	1
	.byte	84
	.word	0,0
.L93:
	.word	0,0
.L100:
	.word	0,0
.L84:
	.word	-1,.L16,.L18-.L16,.L77-.L16
	.half	1
	.byte	100
	.word	.L176-.L16,.L5-.L16
	.half	1
	.byte	100
	.word	.L96-.L16,.L6-.L16
	.half	1
	.byte	100
	.word	.L177-.L16,.L83-.L16
	.half	1
	.byte	100
	.word	0,0
.L91:
	.word	0,0
.L98:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_initChannel')
	.sect	'.debug_loc'
.L19:
	.word	-1,.L20,0,.L110-.L20
	.half	2
	.byte	138,0
	.word	0,0
.L112:
	.word	-1,.L20,0,.L178-.L20
	.half	1
	.byte	100
	.word	.L180-.L20,.L130-.L20
	.half	1
	.byte	111
	.word	0,0
.L126:
	.word	0,0
.L114:
	.word	-1,.L20,0,.L116-.L20
	.half	1
	.byte	101
	.word	.L179-.L20,.L110-.L20
	.half	1
	.byte	109
	.word	0,0
.L115:
	.word	-1,.L20,.L181-.L20,.L110-.L20
	.half	1
	.byte	108
	.word	0,0
.L124:
	.word	0,0
.L140:
	.word	0,0
.L145:
	.word	0,0
.L149:
	.word	0,0
.L136:
	.word	0,0
.L119:
	.word	-1,.L20,.L182-.L20,.L183-.L20
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L138:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_initChannelConfig')
	.sect	'.debug_loc'
.L21:
	.word	-1,.L22,0,.L151-.L22
	.half	2
	.byte	138,0
	.word	0,0
.L153:
	.word	-1,.L22,0,.L10-.L22
	.half	1
	.byte	100
	.word	.L184-.L22,.L151-.L22
	.half	1
	.byte	98
	.word	.L185-.L22,.L186-.L22
	.half	1
	.byte	100
	.word	0,0
.L154:
	.word	-1,.L22,0,.L151-.L22
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_initLinkedListEntry')
	.sect	'.debug_loc'
.L23:
	.word	-1,.L24,0,.L155-.L24
	.half	2
	.byte	138,0
	.word	0,0
.L158:
	.word	-1,.L24,0,.L155-.L24
	.half	1
	.byte	101
	.word	0,0
.L157:
	.word	-1,.L24,0,.L155-.L24
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_initModule')
	.sect	'.debug_loc'
.L25:
	.word	-1,.L26,0,.L102-.L26
	.half	2
	.byte	138,0
	.word	0,0
.L105:
	.word	-1,.L26,0,.L102-.L26
	.half	1
	.byte	101
	.word	0,0
.L103:
	.word	-1,.L26,0,.L102-.L26
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_initModuleConfig')
	.sect	'.debug_loc'
.L27:
	.word	-1,.L28,0,.L106-.L28
	.half	2
	.byte	138,0
	.word	0,0
.L108:
	.word	-1,.L28,0,.L106-.L28
	.half	1
	.byte	100
	.word	0,0
.L109:
	.word	-1,.L28,0,.L106-.L28
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L291:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_configureTransactionSet')
	.sect	'.debug_frame'
	.word	20
	.word	.L291,.L12,.L159-.L12
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_createModuleHandle')
	.sect	'.debug_frame'
	.word	20
	.word	.L291,.L14,.L78-.L14
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_deInitChannel')
	.sect	'.debug_frame'
	.word	24
	.word	.L291,.L16,.L83-.L16
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_initChannel')
	.sect	'.debug_frame'
	.word	12
	.word	.L291,.L20,.L110-.L20
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_initChannelConfig')
	.sect	'.debug_frame'
	.word	16
	.word	.L291,.L22,.L151-.L22
	.byte	8,19,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_initLinkedListEntry')
	.sect	'.debug_frame'
	.word	12
	.word	.L291,.L24,.L155-.L24
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_initModule')
	.sect	'.debug_frame'
	.word	20
	.word	.L291,.L26,.L102-.L26
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_initModuleConfig')
	.sect	'.debug_frame'
	.word	20
	.word	.L291,.L28,.L106-.L28
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L292:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_4')
	.sect	'.debug_frame'
	.word	24
	.word	.L292,.L18,.L77-.L18
	.byte	8,18,8,19,8,20,8,21,8,22,8,23


	; Module end
